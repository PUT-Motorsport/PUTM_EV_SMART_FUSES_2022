
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000947c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a60  08009a60  00020284  2**0
                  CONTENTS
  4 .ARM          00000000  08009a60  08009a60  00020284  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a60  08009a60  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009a60  08009a60  00019a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009a68  08009a68  00019a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  08009a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20000284  08009cf4  00020284  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  08009cf4  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bd44  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044a9  00000000  00000000  0004bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000504a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  00051b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033fde  00000000  00000000  00053000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001759b  00000000  00000000  00086fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00132ae6  00000000  00000000  0009e579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d105f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a8  00000000  00000000  001d10b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000284 	.word	0x20000284
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009624 	.word	0x08009624

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000288 	.word	0x20000288
 80001fc:	08009624 	.word	0x08009624

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002a6:	f107 031c 	add.w	r3, r7, #28
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002c4:	4a2f      	ldr	r2, [pc, #188]	; (8000384 <MX_ADC1_Init+0xe4>)
 80002c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c8:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ce:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d4:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002da:	4b29      	ldr	r3, [pc, #164]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002e0:	4b27      	ldr	r3, [pc, #156]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002e2:	2204      	movs	r2, #4
 80002e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002e6:	4b26      	ldr	r3, [pc, #152]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ec:	4b24      	ldr	r3, [pc, #144]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f8:	4b21      	ldr	r3, [pc, #132]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000300:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000302:	2200      	movs	r2, #0
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000306:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000308:	2200      	movs	r2, #0
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800030c:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_ADC1_Init+0xe0>)
 800030e:	2200      	movs	r2, #0
 8000310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000316:	2200      	movs	r2, #0
 8000318:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_ADC1_Init+0xe0>)
 800031c:	2200      	movs	r2, #0
 800031e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000324:	f004 fc4a 	bl	8004bbc <HAL_ADC_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800032e:	f003 f9b3 	bl	8003698 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000336:	f107 031c 	add.w	r3, r7, #28
 800033a:	4619      	mov	r1, r3
 800033c:	4810      	ldr	r0, [pc, #64]	; (8000380 <MX_ADC1_Init+0xe0>)
 800033e:	f005 f9b1 	bl	80056a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000348:	f003 f9a6 	bl	8003698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_ADC1_Init+0xe8>)
 800034e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000350:	2306      	movs	r3, #6
 8000352:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000358:	237f      	movs	r3, #127	; 0x7f
 800035a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800035c:	2304      	movs	r3, #4
 800035e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_ADC1_Init+0xe0>)
 800036a:	f004 fd79 	bl	8004e60 <HAL_ADC_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000374:	f003 f990 	bl	8003698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000378:	bf00      	nop
 800037a:	3728      	adds	r7, #40	; 0x28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	200002a0 	.word	0x200002a0
 8000384:	50040000 	.word	0x50040000
 8000388:	36902000 	.word	0x36902000

0800038c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b0b2      	sub	sp, #200	; 0xc8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a4:	f107 031c 	add.w	r3, r7, #28
 80003a8:	2298      	movs	r2, #152	; 0x98
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f008 f96f 	bl	8008690 <memset>
  if(adcHandle->Instance==ADC1)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <HAL_ADC_MspInit+0x134>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d17d      	bne.n	80004b8 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80003d2:	2308      	movs	r3, #8
 80003d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003da:	2302      	movs	r3, #2
 80003dc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003de:	2302      	movs	r3, #2
 80003e0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003e6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	4618      	mov	r0, r3
 80003ee:	f007 fae3 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80003f8:	f003 f94e 	bl	8003698 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003fc:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a30      	ldr	r2, [pc, #192]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000408:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000410:	61bb      	str	r3, [r7, #24]
 8000412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000418:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800042e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000430:	4a24      	ldr	r2, [pc, #144]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800043a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000448:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800044a:	f043 0302 	orr.w	r3, r3, #2
 800044e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000454:	f003 0302 	and.w	r3, r3, #2
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800045c:	2301      	movs	r3, #1
 800045e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000462:	230b      	movs	r3, #11
 8000464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000472:	4619      	mov	r1, r3
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f006 f916 	bl	80066a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800047c:	2330      	movs	r3, #48	; 0x30
 800047e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000482:	230b      	movs	r3, #11
 8000484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000492:	4619      	mov	r1, r3
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <HAL_ADC_MspInit+0x13c>)
 8000496:	f006 f907 	bl	80066a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800049a:	2303      	movs	r3, #3
 800049c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004a0:	230b      	movs	r3, #11
 80004a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80004b0:	4619      	mov	r1, r3
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <HAL_ADC_MspInit+0x140>)
 80004b4:	f006 f8f8 	bl	80066a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004b8:	bf00      	nop
 80004ba:	37c8      	adds	r7, #200	; 0xc8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	50040000 	.word	0x50040000
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000800 	.word	0x48000800
 80004cc:	48000400 	.word	0x48000400

080004d0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MX_CAN1_Init+0x64>)
 80004d6:	4a18      	ldr	r2, [pc, #96]	; (8000538 <MX_CAN1_Init+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_CAN1_Init+0x64>)
 80004dc:	2206      	movs	r2, #6
 80004de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_CAN1_Init+0x64>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_CAN1_Init+0x64>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_CAN1_Init+0x64>)
 80004ee:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80004f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_CAN1_Init+0x64>)
 80004f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80004fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <MX_CAN1_Init+0x64>)
 800050a:	2200      	movs	r2, #0
 800050c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_CAN1_Init+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <MX_CAN1_Init+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_CAN1_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <MX_CAN1_Init+0x64>)
 8000522:	f005 f963 	bl	80057ec <HAL_CAN_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800052c:	f003 f8b4 	bl	8003698 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000308 	.word	0x20000308
 8000538:	40006400 	.word	0x40006400

0800053c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <HAL_CAN_MspInit+0xa0>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d139      	bne.n	80005d2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800058e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005a0:	2309      	movs	r3, #9
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f006 f87b 	bl	80066a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2014      	movs	r0, #20
 80005b8:	f006 f83f 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005bc:	2014      	movs	r0, #20
 80005be:	f006 f858 	bl	8006672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2015      	movs	r0, #21
 80005c8:	f006 f837 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005cc:	2015      	movs	r0, #21
 80005ce:	f006 f850 	bl	8006672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d2:	bf00      	nop
 80005d4:	3728      	adds	r7, #40	; 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40006400 	.word	0x40006400
 80005e0:	40021000 	.word	0x40021000

080005e4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>:
{
	return this->channels[size_t(channel)].current;
}

template <uint32_t num_of_sf>
void SmartFuseHandler<num_of_sf>::emplaceBack(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef *const hspi, std::array < ChannelSettings, number_of_channels_per_fuse >channels_settings)
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b087      	sub	sp, #28
 8000600:	af02      	add	r7, sp, #8
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	603b      	str	r3, [r7, #0]
{
	this->smart_fuses.emplace_back(port, pin, hspi, channels_settings);
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	463b      	mov	r3, r7
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	f107 0108 	add.w	r1, r7, #8
 8000614:	f107 0420 	add.w	r4, r7, #32
 8000618:	9400      	str	r4, [sp, #0]
 800061a:	f001 fc1d 	bl	8001e58 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EEEEEvDpOT_>
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bd90      	pop	{r4, r7, pc}

08000626 <_ZN16SmartFuseHandlerILm4EE9handleAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::handleAll()
 8000626:	b580      	push	{r7, lr}
 8000628:	b088      	sub	sp, #32
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 800062e:	2300      	movs	r3, #0
 8000630:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fc64 	bl	8001f06 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 800063e:	61b8      	str	r0, [r7, #24]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fc6b 	bl	8001f1e <_ZN3etl7ivectorI9SmartFuseE3endEv>
 8000648:	6138      	str	r0, [r7, #16]
 800064a:	69ba      	ldr	r2, [r7, #24]
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	429a      	cmp	r2, r3
 8000650:	d00f      	beq.n	8000672 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x4c>
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.handle();
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f000 fc9e 	bl	8000f98 <_ZN9SmartFuse6handleEv>
 800065c:	4603      	mov	r3, r0
 800065e:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 8000660:	7afb      	ldrb	r3, [r7, #11]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x44>
 8000666:	7afb      	ldrb	r3, [r7, #11]
 8000668:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	3374      	adds	r3, #116	; 0x74
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	e7eb      	b.n	800064a <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x24>
	}

	return result;
 8000672:	7ffb      	ldrb	r3, [r7, #31]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <_ZN16SmartFuseHandlerILm4EE7initAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::initAll()
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 8000684:	2300      	movs	r3, #0
 8000686:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fc39 	bl	8001f06 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 8000694:	61b8      	str	r0, [r7, #24]
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fc40 	bl	8001f1e <_ZN3etl7ivectorI9SmartFuseE3endEv>
 800069e:	6138      	str	r0, [r7, #16]
 80006a0:	69ba      	ldr	r2, [r7, #24]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d00f      	beq.n	80006c8 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x4c>
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.init();
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 fc18 	bl	8000ee2 <_ZN9SmartFuse4initEv>
 80006b2:	4603      	mov	r3, r0
 80006b4:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x44>
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	3374      	adds	r3, #116	; 0x74
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	e7eb      	b.n	80006a0 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x24>
	}

	return result;
 80006c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <_ZN16SmartFuseHandlerILm4EE9enableAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::enableAll()
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b088      	sub	sp, #32
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 80006da:	2300      	movs	r3, #0
 80006dc:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fc0e 	bl	8001f06 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 80006ea:	61b8      	str	r0, [r7, #24]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fc15 	bl	8001f1e <_ZN3etl7ivectorI9SmartFuseE3endEv>
 80006f4:	6138      	str	r0, [r7, #16]
 80006f6:	69ba      	ldr	r2, [r7, #24]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d012      	beq.n	8000724 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x52>
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.enable();
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f000 fc08 	bl	8000f18 <_ZN9SmartFuse6enableEv>
 8000708:	4603      	mov	r3, r0
 800070a:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(5);
 800070c:	2005      	movs	r0, #5
 800070e:	f004 f891 	bl	8004834 <HAL_Delay>
		if(x != SmartFuseState::Ok) result = x;
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x4a>
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	3374      	adds	r3, #116	; 0x74
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	e7e8      	b.n	80006f6 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x24>
	}

	return result;
 8000724:	7ffb      	ldrb	r3, [r7, #31]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_ZN16SmartFuseHandlerILm4EE9getStatesEv>:

	return result;
}

template <uint32_t num_of_sf>
std::array < SmartFuseState, num_of_sf >  SmartFuseHandler<num_of_sf>::getStates()
 800072e:	b5b0      	push	{r4, r5, r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
{
	std::array < SmartFuseState, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d815      	bhi.n	800076c <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0x3e>
	{
		x[i] = this->smart_fuses[i].getState();
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6979      	ldr	r1, [r7, #20]
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fc05 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800074a:	4605      	mov	r5, r0
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	6979      	ldr	r1, [r7, #20]
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fbef 	bl	8001f36 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8000758:	4604      	mov	r4, r0
 800075a:	4628      	mov	r0, r5
 800075c:	f000 fee0 	bl	8001520 <_ZNK9SmartFuse8getStateEv>
 8000760:	4603      	mov	r3, r0
 8000762:	7023      	strb	r3, [r4, #0]
	for(size_t i = 0; i < num_of_sf; i++)
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e7e6      	b.n	800073a <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0xc>
	}

	return x;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	2300      	movs	r3, #0
 8000772:	7c3a      	ldrb	r2, [r7, #16]
 8000774:	f362 0307 	bfi	r3, r2, #0, #8
 8000778:	7c7a      	ldrb	r2, [r7, #17]
 800077a:	f362 230f 	bfi	r3, r2, #8, #8
 800077e:	7cba      	ldrb	r2, [r7, #18]
 8000780:	f362 4317 	bfi	r3, r2, #16, #8
 8000784:	7cfa      	ldrb	r2, [r7, #19]
 8000786:	f362 631f 	bfi	r3, r2, #24, #8
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bdb0      	pop	{r4, r5, r7, pc}

08000792 <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>:

template <uint32_t num_of_sf>
std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsStates()
 8000792:	b5b0      	push	{r4, r5, r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	60b9      	str	r1, [r7, #8]
{
	std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d819      	bhi.n	80007da <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0x48>
	{
		x[i] = this->smart_fuses[i].getChannelsStates();
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	6979      	ldr	r1, [r7, #20]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fbd2 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80007b0:	4604      	mov	r4, r0
 80007b2:	6979      	ldr	r1, [r7, #20]
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f001 fbdf 	bl	8001f78 <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>
 80007ba:	4605      	mov	r5, r0
 80007bc:	463b      	mov	r3, r7
 80007be:	4621      	mov	r1, r4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fecd 	bl	8001560 <_ZN9SmartFuse17getChannelsStatesEv>
 80007c6:	462a      	mov	r2, r5
 80007c8:	463b      	mov	r3, r7
 80007ca:	6819      	ldr	r1, [r3, #0]
 80007cc:	6011      	str	r1, [r2, #0]
 80007ce:	889b      	ldrh	r3, [r3, #4]
 80007d0:	8093      	strh	r3, [r2, #4]
	for(size_t i = 0; i < num_of_sf; i++)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e7e2      	b.n	80007a0 <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0xe>
	}

	return x;
 80007da:	bf00      	nop
}
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bdb0      	pop	{r4, r5, r7, pc}

080007e4 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>:

template <uint32_t num_of_sf>
std::array < std::array < uint16_t, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsCurrents()
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6178      	str	r0, [r7, #20]
 80007ec:	6139      	str	r1, [r7, #16]
{
	std::array < std::array < uint16_t, number_of_channels_per_fuse >, num_of_sf > x;
	for(size_t i = 0; i < num_of_sf; i++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d81b      	bhi.n	8000830 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0x4c>
	{
		x[i] = this->smart_fuses[i].getChannelsCurrents();
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	69f9      	ldr	r1, [r7, #28]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fba9 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8000802:	4604      	mov	r4, r0
 8000804:	69f9      	ldr	r1, [r7, #28]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f001 fbc5 	bl	8001f96 <_ZNSt5arrayIS_ItLj6EELj4EEixEj>
 800080c:	4605      	mov	r5, r0
 800080e:	463b      	mov	r3, r7
 8000810:	4621      	mov	r1, r4
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fee9 	bl	80015ea <_ZN9SmartFuse19getChannelsCurrentsEv>
 8000818:	462a      	mov	r2, r5
 800081a:	463b      	mov	r3, r7
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	6859      	ldr	r1, [r3, #4]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	6010      	str	r0, [r2, #0]
 8000824:	6051      	str	r1, [r2, #4]
 8000826:	6093      	str	r3, [r2, #8]
	for(size_t i = 0; i < num_of_sf; i++)
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	3301      	adds	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e7e0      	b.n	80007f2 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0xe>
	}

	return x;
 8000830:	bf00      	nop
}
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bdb0      	pop	{r4, r5, r7, pc}

0800083a <_ZNK3etl7ibitset5countEv>:
    }

    //*************************************************************************
    /// Count the number of bits set.
    //*************************************************************************
    size_t count() const
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
    {
      size_t n = 0UL;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]

      for (size_t i = 0UL; i < SIZE; ++i)
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	429a      	cmp	r2, r3
 8000852:	d210      	bcs.n	8000876 <_ZNK3etl7ibitset5countEv+0x3c>
      {
        n += etl::count_bits(pdata[i]);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f9cf 	bl	8001c02 <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
      for (size_t i = 0UL; i < SIZE; ++i)
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	3301      	adds	r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	e7e9      	b.n	800084a <_ZNK3etl7ibitset5countEv+0x10>
      }

      return n;
 8000876:	68fb      	ldr	r3, [r7, #12]
    }
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZN3etl7ibitset5resetEv>:
    }

    //*************************************************************************
    /// Resets the bitset.
    //*************************************************************************
    ibitset& reset()
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    {
      for (size_t i = 0UL; i < SIZE; ++i)
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	429a      	cmp	r2, r3
 8000894:	d209      	bcs.n	80008aa <_ZN3etl7ibitset5resetEv+0x2a>
      {
        pdata[i] = ALL_CLEAR;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
      for (size_t i = 0UL; i < SIZE; ++i)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e7f0      	b.n	800088c <_ZN3etl7ibitset5resetEv+0xc>
      }

      return *this;
 80008aa:	687b      	ldr	r3, [r7, #4]
    }
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <_ZN3etl7ibitset10initialiseEy>:
  protected:

    //*************************************************************************
    /// Initialise from an unsigned long long.
    //*************************************************************************
    ibitset& initialise(unsigned long long value)
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	e9c7 2300 	strd	r2, r3, [r7]
    {
      reset();
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff ffdb 	bl	8000880 <_ZN3etl7ibitset5resetEv>

      const size_t SHIFT = (integral_limits<unsigned long long>::bits <= (int)BITS_PER_ELEMENT) ? 0 : BITS_PER_ELEMENT;
 80008ca:	2308      	movs	r3, #8
 80008cc:	613b      	str	r3, [r7, #16]
      {
        pdata[0] = element_t(value);
      }
      else
      {
        size_t i = 0UL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]

        while ((value != 0) && (i < SIZE))
 80008d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	d019      	beq.n	800090e <_ZN3etl7ibitset10initialiseEy+0x56>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d214      	bcs.n	800090e <_ZN3etl7ibitset10initialiseEy+0x56>
        {
          pdata[i++] = value & ALL_SET;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	1c59      	adds	r1, r3, #1
 80008ec:	6179      	str	r1, [r7, #20]
 80008ee:	4413      	add	r3, r2
 80008f0:	783a      	ldrb	r2, [r7, #0]
 80008f2:	701a      	strb	r2, [r3, #0]
          value = value >> SHIFT;
 80008f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008f8:	f04f 0200 	mov.w	r2, #0
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	0a02      	lsrs	r2, r0, #8
 8000902:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000906:	0a0b      	lsrs	r3, r1, #8
 8000908:	e9c7 2300 	strd	r2, r3, [r7]
        while ((value != 0) && (i < SIZE))
 800090c:	e7e1      	b.n	80008d2 <_ZN3etl7ibitset10initialiseEy+0x1a>
        }
      }

      pdata[SIZE - 1] &= TOP_MASK;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	3b01      	subs	r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	7819      	ldrb	r1, [r3, #0]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	68d8      	ldr	r0, [r3, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	3b01      	subs	r3, #1
 800092a:	4403      	add	r3, r0
 800092c:	400a      	ands	r2, r1
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	701a      	strb	r2, [r3, #0]

      return *this;
 8000932:	68fb      	ldr	r3, [r7, #12]
    }
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZN3etl7ibitsetC1EjjPh>:
    }

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    ibitset(size_t nbits_, size_t size_, element_t* pdata_)
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]
      : NBITS(nbits_),
        SIZE(size_),
        pdata(pdata_)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	60da      	str	r2, [r3, #12]
    {
      size_t allocated_bits = SIZE * BITS_PER_ELEMENT;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	617b      	str	r3, [r7, #20]
      size_t top_mask_shift = ((BITS_PER_ELEMENT - (allocated_bits - NBITS)) % BITS_PER_ELEMENT);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	f003 0307 	and.w	r3, r3, #7
 8000970:	613b      	str	r3, [r7, #16]
      TOP_MASK = element_t(top_mask_shift == 0 ? ALL_SET : ~(ALL_SET << top_mask_shift));
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d007      	beq.n	8000988 <_ZN3etl7ibitsetC1EjjPh+0x4c>
 8000978:	22ff      	movs	r2, #255	; 0xff
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	e000      	b.n	800098a <_ZN3etl7ibitsetC1EjjPh+0x4e>
 8000988:	22ff      	movs	r2, #255	; 0xff
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	701a      	strb	r2, [r3, #0]
    }
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4618      	mov	r0, r3
 8000992:	371c      	adds	r7, #28
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_ZN3etl7ibitsetD1Ev>:
    virtual ~ibitset()
    {
    }
#else
  protected:
    ~ibitset()
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    {
    }
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_ZN3etl6bitsetILj8EED1Ev>:
  /// Does not use std::string.
  ///\tparam MAXN The number of bits.
  ///\ingroup bitset
  //*************************************************************************
  template <const size_t MAXN>
  class bitset : public etl::ibitset
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffed 	bl	800099c <_ZN3etl7ibitsetD1Ev>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  Nm  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	429c      	cmp	r4, r3
 80009e4:	d004      	beq.n	80009f0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 80009e6:	3c14      	subs	r4, #20
 80009e8:	4620      	mov	r0, r4
 80009ea:	f7ff ffe2 	bl	80009b2 <_ZN3etl6bitsetILj8EED1Ev>
 80009ee:	e7f7      	b.n	80009e0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x14>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}

080009fa <_ZL11checkParitySt5arrayIhLj3EE>:
{
 80009fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009fe:	b097      	sub	sp, #92	; 0x5c
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	size_t buff = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	657b      	str	r3, [r7, #84]	; 0x54
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000a08:	f107 0408 	add.w	r4, r7, #8
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 f91d 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000a16:	4603      	mov	r3, r0
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	461d      	mov	r5, r3
 8000a20:	4616      	mov	r6, r2
 8000a22:	462a      	mov	r2, r5
 8000a24:	4633      	mov	r3, r6
 8000a26:	4620      	mov	r0, r4
 8000a28:	f001 f921 	bl	8001c6e <_ZN3etl6bitsetILj8EEC1Ey>
 8000a2c:	3414      	adds	r4, #20
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2101      	movs	r1, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 f90c 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2200      	movs	r2, #0
 8000a40:	469a      	mov	sl, r3
 8000a42:	4693      	mov	fp, r2
 8000a44:	4652      	mov	r2, sl
 8000a46:	465b      	mov	r3, fp
 8000a48:	4620      	mov	r0, r4
 8000a4a:	f001 f910 	bl	8001c6e <_ZN3etl6bitsetILj8EEC1Ey>
 8000a4e:	3414      	adds	r4, #20
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2102      	movs	r1, #2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 f8fb 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	4698      	mov	r8, r3
 8000a64:	4691      	mov	r9, r2
 8000a66:	4642      	mov	r2, r8
 8000a68:	464b      	mov	r3, r9
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f001 f8ff 	bl	8001c6e <_ZN3etl6bitsetILj8EEC1Ey>
	for (auto &bit : bits) buff += bit.count();
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000a78:	f001 f911 	bl	8001c9e <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>
 8000a7c:	6538      	str	r0, [r7, #80]	; 0x50
 8000a7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000a80:	f001 f919 	bl	8001cb6 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>
 8000a84:	64b8      	str	r0, [r7, #72]	; 0x48
 8000a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <_ZL11checkParitySt5arrayIhLj3EE+0xb0>
 8000a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a90:	647b      	str	r3, [r7, #68]	; 0x44
 8000a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fed0 	bl	800083a <_ZNK3etl7ibitset5countEv>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a9e:	4413      	add	r3, r2
 8000aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8000aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa4:	3314      	adds	r3, #20
 8000aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8000aa8:	e7ed      	b.n	8000a86 <_ZL11checkParitySt5arrayIhLj3EE+0x8c>
	return (buff % 2 == 0);
 8000aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf0c      	ite	eq
 8000ab4:	2301      	moveq	r3, #1
 8000ab6:	2300      	movne	r3, #0
 8000ab8:	b2dc      	uxtb	r4, r3
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff84 	bl	80009cc <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>
	return (buff % 2 == 0);
 8000ac4:	4623      	mov	r3, r4
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	375c      	adds	r7, #92	; 0x5c
 8000aca:	46bd      	mov	sp, r7
 8000acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ad0 <_ZL18calculateParityBitRSt5arrayIhLj3EE>:
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	data[2] &= ~(1 << 0);
 8000ad8:	2102      	movs	r1, #2
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f001 f8b8 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	f022 0201 	bic.w	r2, r2, #1
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	701a      	strb	r2, [r3, #0]
	if (checkParity(data)) data[2] |= (1 << 0);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	7859      	ldrb	r1, [r3, #1]
 8000af2:	0209      	lsls	r1, r1, #8
 8000af4:	430a      	orrs	r2, r1
 8000af6:	789b      	ldrb	r3, [r3, #2]
 8000af8:	041b      	lsls	r3, r3, #16
 8000afa:	431a      	orrs	r2, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	f362 0317 	bfi	r3, r2, #0, #24
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff79 	bl	80009fa <_ZL11checkParitySt5arrayIhLj3EE>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d009      	beq.n	8000b22 <_ZL18calculateParityBitRSt5arrayIhLj3EE+0x52>
 8000b0e:	2102      	movs	r1, #2
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f001 f89d 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000b16:	4603      	mov	r3, r0
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	f042 0201 	orr.w	r2, r2, #1
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	701a      	strb	r2, [r3, #0]
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>:
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
	this->last_gsb = x[0];
 8000b34:	463b      	mov	r3, r7
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 f889 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	709a      	strb	r2, [r3, #2]
	if(x[0] & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000b46:	463b      	mov	r3, r7
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 f880 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000b50:	4603      	mov	r3, r0
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	09db      	lsrs	r3, r3, #7
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x3a>
 8000b60:	2300      	movs	r3, #0
 8000b62:	e07e      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000001) return SmartFuseState::FailSafe;
 8000b64:	463b      	mov	r3, r7
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 f871 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x5e>
 8000b84:	2307      	movs	r3, #7
 8000b86:	e06c      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000010) return SmartFuseState::OLOFF;
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 f85f 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000b92:	4603      	mov	r3, r0
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x82>
 8000ba8:	2306      	movs	r3, #6
 8000baa:	e05a      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000100) return SmartFuseState::LatchOff;
 8000bac:	463b      	mov	r3, r7
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 f84d 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf14      	ite	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	2300      	moveq	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xa6>
 8000bcc:	2305      	movs	r3, #5
 8000bce:	e048      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00001000) return SmartFuseState::TempFail;
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 f83b 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bf14      	ite	ne
 8000be6:	2301      	movne	r3, #1
 8000be8:	2300      	moveq	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xca>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e036      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00010000) return SmartFuseState::OTPLVDS;
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 f829 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xee>
 8000c14:	2303      	movs	r3, #3
 8000c16:	e024      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00100000) return SmartFuseState::SPIError;
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 f817 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000c22:	4603      	mov	r3, r0
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf14      	ite	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	2300      	moveq	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x112>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e012      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b01000000) return SmartFuseState::ResetState;
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 f805 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8000c46:	4603      	mov	r3, r0
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	bf14      	ite	ne
 8000c52:	2301      	movne	r3, #1
 8000c54:	2300      	moveq	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x136>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	return SmartFuseState::NotResponding;
 8000c60:	2308      	movs	r3, #8
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZN9SmartFuse22ChannelSettingsAndDataC1Ev>:
SmartFuse::ChannelSettingsAndData::ChannelSettingsAndData()
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3306      	adds	r3, #6
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f82a 	bl	8001cd0 <_ZNSt4pairIttEC1IttLb1EEEv>
	current = 0x0000;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	809a      	strh	r2, [r3, #4]
	state = ChannelState::Ok;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	72da      	strb	r2, [r3, #11]
}
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev>:
 8000c92:	b5b0      	push	{r4, r5, r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2405      	movs	r4, #5
 8000c9e:	461d      	mov	r5, r3
 8000ca0:	2c00      	cmp	r4, #0
 8000ca2:	db05      	blt.n	8000cb0 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev+0x1e>
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	f7ff ffe0 	bl	8000c6a <_ZN9SmartFuse22ChannelSettingsAndDataC1Ev>
 8000caa:	350c      	adds	r5, #12
 8000cac:	3c01      	subs	r4, #1
 8000cae:	e7f7      	b.n	8000ca0 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev+0xe>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bdb0      	pop	{r4, r5, r7, pc}

08000cba <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, std::array < ChannelSettings, number_of_channels_per_fuse > channels_settings) :
 8000cba:	b590      	push	{r4, r7, lr}
 8000cbc:	b087      	sub	sp, #28
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	603b      	str	r3, [r7, #0]
					 port(port), pin(pin), hspi(hspi), toggle(false)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ffda 	bl	8000c92 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	651a      	str	r2, [r3, #80]	; 0x50
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	655a      	str	r2, [r3, #84]	; 0x54
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3358      	adds	r3, #88	; 0x58
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 fc9a 	bl	8004628 <_ZN5TimerC1Ev>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3360      	adds	r3, #96	; 0x60
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fc95 	bl	8004628 <_ZN5TimerC1Ev>
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	336c      	adds	r3, #108	; 0x6c
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 f806 	bl	8001d14 <_ZN3etl8delegateIFvP9SmartFuseEEC1Ev>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	2b05      	cmp	r3, #5
 8000d10:	f200 8086 	bhi.w	8000e20 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x166>
		this->channels[i].active = channels_settings[i].active;
 8000d14:	6979      	ldr	r1, [r7, #20]
 8000d16:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d1a:	f001 f817 	bl	8001d4c <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000d1e:	4604      	mov	r4, r0
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3308      	adds	r3, #8
 8000d24:	6979      	ldr	r1, [r7, #20]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 f801 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	7822      	ldrb	r2, [r4, #0]
 8000d30:	701a      	strb	r2, [r3, #0]
		this->channels[i].clamping_currents = channels_settings[i].clamping_currents;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3308      	adds	r3, #8
 8000d36:	6979      	ldr	r1, [r7, #20]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fff8 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	1d9c      	adds	r4, r3, #6
 8000d42:	6979      	ldr	r1, [r7, #20]
 8000d44:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d48:	f001 f800 	bl	8001d4c <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	3306      	adds	r3, #6
 8000d50:	4619      	mov	r1, r3
 8000d52:	4620      	mov	r0, r4
 8000d54:	f001 f809 	bl	8001d6a <_ZNSt4pairIttEaSERKS0_>
		this->channels[i].duty_cycle = channels_settings[i].duty_cycle;
 8000d58:	6979      	ldr	r1, [r7, #20]
 8000d5a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d5e:	f000 fff5 	bl	8001d4c <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000d62:	4604      	mov	r4, r0
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	3308      	adds	r3, #8
 8000d68:	6979      	ldr	r1, [r7, #20]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 ffdf 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000d70:	4603      	mov	r3, r0
 8000d72:	88a2      	ldrh	r2, [r4, #4]
 8000d74:	805a      	strh	r2, [r3, #2]
		this->channels[i].latch_off_time_out = channels_settings[i].latch_off_time_out;
 8000d76:	6979      	ldr	r1, [r7, #20]
 8000d78:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d7c:	f000 ffe6 	bl	8001d4c <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000d80:	4604      	mov	r4, r0
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3308      	adds	r3, #8
 8000d86:	6979      	ldr	r1, [r7, #20]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 ffd0 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	7862      	ldrb	r2, [r4, #1]
 8000d92:	705a      	strb	r2, [r3, #1]
		this->channels[i].sampling_mode = channels_settings[i].sampling_mode;
 8000d94:	6979      	ldr	r1, [r7, #20]
 8000d96:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d9a:	f000 ffd7 	bl	8001d4c <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3308      	adds	r3, #8
 8000da4:	6979      	ldr	r1, [r7, #20]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 ffc1 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000dac:	4603      	mov	r3, r0
 8000dae:	78a2      	ldrb	r2, [r4, #2]
 8000db0:	729a      	strb	r2, [r3, #10]
		if(this->channels[i].duty_cycle > 0x3ff) this->channels[i].duty_cycle = 0x3ff;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3308      	adds	r3, #8
 8000db6:	6979      	ldr	r1, [r7, #20]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 ffb8 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	885b      	ldrh	r3, [r3, #2]
 8000dc2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	bf8c      	ite	hi
 8000dca:	2301      	movhi	r3, #1
 8000dcc:	2300      	movls	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d009      	beq.n	8000de8 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x12e>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3308      	adds	r3, #8
 8000dd8:	6979      	ldr	r1, [r7, #20]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 ffa7 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000de6:	805a      	strh	r2, [r3, #2]
		if(this->channels[i].latch_off_time_out > 0xf) this->channels[i].latch_off_time_out = 0xf;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3308      	adds	r3, #8
 8000dec:	6979      	ldr	r1, [r7, #20]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 ff9d 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000df4:	4603      	mov	r3, r0
 8000df6:	785b      	ldrb	r3, [r3, #1]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	bf8c      	ite	hi
 8000dfc:	2301      	movhi	r3, #1
 8000dfe:	2300      	movls	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d008      	beq.n	8000e18 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x15e>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3308      	adds	r3, #8
 8000e0a:	6979      	ldr	r1, [r7, #20]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 ff8e 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000e12:	4603      	mov	r3, r0
 8000e14:	220f      	movs	r2, #15
 8000e16:	705a      	strb	r2, [r3, #1]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e775      	b.n	8000d0c <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x52>
	this->action_timer.setTimeOut(100);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3360      	adds	r3, #96	; 0x60
 8000e24:	2164      	movs	r1, #100	; 0x64
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fc21 	bl	800466e <_ZN5Timer10setTimeOutEm>
	this->watch_dog.setTimeOut(31);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3358      	adds	r3, #88	; 0x58
 8000e30:	211f      	movs	r1, #31
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fc1b 	bl	800466e <_ZN5Timer10setTimeOutEm>
	slaveDeselect();
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f000 f841 	bl	8000ec0 <_ZN9SmartFuse13slaveDeselectEv>
}
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}

08000e48 <_ZN9SmartFuse17setActionIntervalEm>:
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
	this->action_timer.setTimeOut(interval);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3360      	adds	r3, #96	; 0x60
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 fc08 	bl	800466e <_ZN5Timer10setTimeOutEm>
	this->action_timer.restart();
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3360      	adds	r3, #96	; 0x60
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 fc11 	bl	800468a <_ZN5Timer7restartEv>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_ZN9SmartFuse9setActionEN3etl8delegateIFvPS_EEE>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	e883 0006 	stmia.w	r3, {r1, r2}
	this->action = action;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	336c      	adds	r3, #108	; 0x6c
 8000e82:	1d3a      	adds	r2, r7, #4
 8000e84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e88:	e883 0003 	stmia.w	r3, {r0, r1}
	this->action_defined = true;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	705a      	strb	r2, [r3, #1]
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_ZN9SmartFuse11slaveSelectEv>:
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f005 fda2 	bl	80069fc <HAL_GPIO_WritePin>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_ZN9SmartFuse13slaveDeselectEv>:
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f005 fd91 	bl	80069fc <HAL_GPIO_WritePin>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_ZN9SmartFuse4initEv>:
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	this->reset();
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 fbc2 	bl	8001674 <_ZN9SmartFuse5resetEv>
	this->setUpAllDutyCycles();
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 fc2d 	bl	8001750 <_ZN9SmartFuse18setUpAllDutyCyclesEv>
	this->setUpAllSamplingModes();
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fc84 	bl	8001804 <_ZN9SmartFuse21setUpAllSamplingModesEv>
	this->setUpAllLatchOffTimers();
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fcf7 	bl	80018f0 <_ZN9SmartFuse22setUpAllLatchOffTimersEv>
	this->setUpAllChannelsStates();
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 fd9a 	bl	8001a3c <_ZN9SmartFuse22setUpAllChannelsStatesEv>
	return this->state;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <_ZN9SmartFuse6enableEv>:
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	tx_data = { WRITE_RAM(0x14), 1 << 6, 0 };
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <_ZN9SmartFuse6enableEv+0x78>)
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	6812      	ldr	r2, [r2, #0]
 8000f28:	4611      	mov	r1, r2
 8000f2a:	8019      	strh	r1, [r3, #0]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	0c12      	lsrs	r2, r2, #16
 8000f30:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	461a      	mov	r2, r3
 8000f38:	68f9      	ldr	r1, [r7, #12]
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fdda 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { WRITE_RAM(0x14), 1 << 3, 0 };
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_ZN9SmartFuse6enableEv+0x7c>)
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	6812      	ldr	r2, [r2, #0]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	8019      	strh	r1, [r3, #0]
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	0c12      	lsrs	r2, r2, #16
 8000f50:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	461a      	mov	r2, r3
 8000f58:	68f9      	ldr	r1, [r7, #12]
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 fdca 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->watch_dog.restart();
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3358      	adds	r3, #88	; 0x58
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fb90 	bl	800468a <_ZN5Timer7restartEv>
	this->toggle = false;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	this->state = getGSB(rx_data);
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fdd9 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	return this->state;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800963c 	.word	0x0800963c
 8000f94:	08009640 	.word	0x08009640

08000f98 <_ZN9SmartFuse6handleEv>:
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b091      	sub	sp, #68	; 0x44
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	bool lock_state = false;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bool fuse_state_changed = false;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	std::array < bool, number_of_channels_per_fuse > read_fuses_states { false };
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	809a      	strh	r2, [r3, #4]
	std::array < uint8_t, 3 > tx_data { };
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2100      	movs	r1, #0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	801a      	strh	r2, [r3, #0]
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	709a      	strb	r2, [r3, #2]
	std::array < uint8_t, 3 > rx_data { };
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2100      	movs	r1, #0
 8000fca:	460a      	mov	r2, r1
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	460a      	mov	r2, r1
 8000fd0:	709a      	strb	r2, [r3, #2]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++) this->channels[i].state = ChannelState::Ok;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d80c      	bhi.n	8000ff6 <_ZN9SmartFuse6handleEv+0x5e>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fea3 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2200      	movs	r2, #0
 8000fec:	72da      	strb	r2, [r3, #11]
 8000fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ff4:	e7ef      	b.n	8000fd6 <_ZN9SmartFuse6handleEv+0x3e>
	if(watch_dog.getPassedTime() >= 31)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3358      	adds	r3, #88	; 0x58
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fb6d 	bl	80046da <_ZN5Timer13getPassedTimeEv>
 8001000:	4603      	mov	r3, r0
 8001002:	2b1e      	cmp	r3, #30
 8001004:	bf8c      	ite	hi
 8001006:	2301      	movhi	r3, #1
 8001008:	2300      	movls	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d04d      	beq.n	80010ac <_ZN9SmartFuse6handleEv+0x114>
		this->toggle = !this->toggle;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f083 0301 	eor.w	r3, r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	701a      	strb	r2, [r3, #0]
		tx_data[0] = READ_RAM(0x13);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fe13 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 800102a:	4603      	mov	r3, r0
 800102c:	2253      	movs	r2, #83	; 0x53
 800102e:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	461a      	mov	r2, r3
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fd5b 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		rx_data[2] &= ~(1 << 1);
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	2102      	movs	r1, #2
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fe03 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 800104a:	4603      	mov	r3, r0
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	f022 0202 	bic.w	r2, r2, #2
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]
		tx_data = { WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1) };
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2101      	movs	r1, #1
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fdf7 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001062:	4603      	mov	r3, r0
 8001064:	781c      	ldrb	r4, [r3, #0]
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2102      	movs	r1, #2
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fdef 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001072:	4603      	mov	r3, r0
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	b251      	sxtb	r1, r2
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	7812      	ldrb	r2, [r2, #0]
 800107c:	0052      	lsls	r2, r2, #1
 800107e:	b252      	sxtb	r2, r2
 8001080:	430a      	orrs	r2, r1
 8001082:	b252      	sxtb	r2, r2
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2213      	movs	r2, #19
 800108c:	733a      	strb	r2, [r7, #12]
 800108e:	4622      	mov	r2, r4
 8001090:	737a      	strb	r2, [r7, #13]
 8001092:	73bb      	strb	r3, [r7, #14]
		this->transmitReceiveData(tx_data, rx_data);
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	461a      	mov	r2, r3
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fd29 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3358      	adds	r3, #88	; 0x58
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 faef 	bl	800468a <_ZN5Timer7restartEv>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
 80010b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d850      	bhi.n	8001158 <_ZN9SmartFuse6handleEv+0x1c0>
		tx_data[0] = READ_RAM(0x28 + i);
 80010b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	3328      	adds	r3, #40	; 0x28
 80010bc:	b2dc      	uxtb	r4, r3
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fdc3 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f044 0240 	orr.w	r2, r4, #64	; 0x40
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	461a      	mov	r2, r3
 80010da:	68f9      	ldr	r1, [r7, #12]
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 fd09 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->channels[i].current = uint16_t(rx_data[1]) << 4 | uint16_t(rx_data[2]) >> 4;
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2101      	movs	r1, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fdb1 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80010ee:	4603      	mov	r3, r0
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	b21c      	sxth	r4, r3
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2102      	movs	r1, #2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fda7 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001102:	4603      	mov	r3, r0
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b21b      	sxth	r3, r3
 800110c:	4323      	orrs	r3, r4
 800110e:	b21c      	sxth	r4, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3308      	adds	r3, #8
 8001114:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fe09 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800111c:	4603      	mov	r3, r0
 800111e:	b2a2      	uxth	r2, r4
 8001120:	809a      	strh	r2, [r3, #4]
		read_fuses_states[i] = bool(rx_data[2] & (1 << 2));
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2102      	movs	r1, #2
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fd91 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 800112e:	4603      	mov	r3, r0
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	f003 0404 	and.w	r4, r3, #4
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fe28 	bl	8001d92 <_ZNSt5arrayIbLj6EEixEj>
 8001142:	4603      	mov	r3, r0
 8001144:	2c00      	cmp	r4, #0
 8001146:	bf14      	ite	ne
 8001148:	2201      	movne	r2, #1
 800114a:	2200      	moveq	r2, #0
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001152:	3301      	adds	r3, #1
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
 8001156:	e7ab      	b.n	80010b0 <_ZN9SmartFuse6handleEv+0x118>
	for(auto& channel : this->channels)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3308      	adds	r3, #8
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	6a38      	ldr	r0, [r7, #32]
 8001160:	f000 fe26 	bl	8001db0 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE5beginEv>
 8001164:	6338      	str	r0, [r7, #48]	; 0x30
 8001166:	6a38      	ldr	r0, [r7, #32]
 8001168:	f000 fe2e 	bl	8001dc8 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE3endEv>
 800116c:	61f8      	str	r0, [r7, #28]
 800116e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	429a      	cmp	r2, r3
 8001174:	d031      	beq.n	80011da <_ZN9SmartFuse6handleEv+0x242>
 8001176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001178:	61bb      	str	r3, [r7, #24]
		if (channel.current < channel.clamping_currents.first)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	889a      	ldrh	r2, [r3, #4]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	88db      	ldrh	r3, [r3, #6]
 8001182:	429a      	cmp	r2, r3
 8001184:	d20f      	bcs.n	80011a6 <_ZN9SmartFuse6handleEv+0x20e>
			channel.active = false;
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 800118c:	2301      	movs	r3, #1
 800118e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			fuse_state_changed = true;
 8001192:	2301      	movs	r3, #1
 8001194:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			this->state = SmartFuseState::OTPLVDS;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			channel.state = ChannelState::UnderCurrent;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2201      	movs	r2, #1
 80011a4:	72da      	strb	r2, [r3, #11]
		if (channel.current > channel.clamping_currents.second)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	889a      	ldrh	r2, [r3, #4]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	891b      	ldrh	r3, [r3, #8]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d90f      	bls.n	80011d2 <_ZN9SmartFuse6handleEv+0x23a>
			channel.active = false;
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 80011b8:	2301      	movs	r3, #1
 80011ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			fuse_state_changed = true;
 80011be:	2301      	movs	r3, #1
 80011c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			this->state = SmartFuseState::OTPLVDS;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2203      	movs	r2, #3
 80011c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			channel.state = ChannelState::OverCurrent;
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2202      	movs	r2, #2
 80011d0:	72da      	strb	r2, [r3, #11]
	for(auto& channel : this->channels)
 80011d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d4:	330c      	adds	r3, #12
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
 80011d8:	e7c9      	b.n	800116e <_ZN9SmartFuse6handleEv+0x1d6>
	if(fuse_state_changed)
 80011da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d049      	beq.n	8001276 <_ZN9SmartFuse6handleEv+0x2de>
		tx_data[0] = WRITE_RAM(0x13);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fd31 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2213      	movs	r2, #19
 80011f2:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0x00;
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2101      	movs	r1, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fd28 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001200:	4603      	mov	r3, r0
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	2b05      	cmp	r3, #5
 800120e:	d81e      	bhi.n	800124e <_ZN9SmartFuse6handleEv+0x2b6>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3308      	adds	r3, #8
 8001214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fd88 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800121e:	4603      	mov	r3, r0
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	fa02 f403 	lsl.w	r4, r2, r3
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	2101      	movs	r1, #1
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fd0d 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001236:	4603      	mov	r3, r0
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	b251      	sxtb	r1, r2
 800123c:	b262      	sxtb	r2, r4
 800123e:	430a      	orrs	r2, r1
 8001240:	b252      	sxtb	r2, r2
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	3301      	adds	r3, #1
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800124c:	e7dd      	b.n	800120a <_ZN9SmartFuse6handleEv+0x272>
		tx_data[2] = this->toggle << 1;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461c      	mov	r4, r3
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2102      	movs	r1, #2
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fcf8 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001260:	4603      	mov	r3, r0
 8001262:	0062      	lsls	r2, r4, #1
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	461a      	mov	r2, r3
 800126e:	68f9      	ldr	r1, [r7, #12]
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 fc3f 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
 800127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127c:	2b05      	cmp	r3, #5
 800127e:	d82a      	bhi.n	80012d6 <_ZN9SmartFuse6handleEv+0x33e>
		if(this->channels[i].active != read_fuses_states[i])
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3308      	adds	r3, #8
 8001284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fd51 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800128c:	4603      	mov	r3, r0
 800128e:	781c      	ldrb	r4, [r3, #0]
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fd7b 	bl	8001d92 <_ZNSt5arrayIbLj6EEixEj>
 800129c:	4603      	mov	r3, r0
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	429c      	cmp	r4, r3
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00f      	beq.n	80012ce <_ZN9SmartFuse6handleEv+0x336>
			this->channels[i].state = ChannelState::STKFLTR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3308      	adds	r3, #8
 80012b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fd3a 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2204      	movs	r2, #4
 80012be:	72da      	strb	r2, [r3, #11]
			lock_state = true;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			this->state = SmartFuseState::OLOFF;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2206      	movs	r2, #6
 80012ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80012ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d0:	3301      	adds	r3, #1
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d4:	e7d1      	b.n	800127a <_ZN9SmartFuse6handleEv+0x2e2>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	2b05      	cmp	r3, #5
 80012de:	f200 8082 	bhi.w	80013e6 <_ZN9SmartFuse6handleEv+0x44e>
		tx_data[0] = READ_AND_CLEAR(0x20 + i);
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	3320      	adds	r3, #32
 80012e8:	b2dc      	uxtb	r4, r3
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fcad 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f064 027f 	orn	r2, r4, #127	; 0x7f
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	461a      	mov	r2, r3
 8001306:	68f9      	ldr	r1, [r7, #12]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 fbf3 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		if(rx_data[1] & (1 << 0)) this->channels[i].state = ChannelState::LatchOff;
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2101      	movs	r1, #1
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fc9b 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 800131a:	4603      	mov	r3, r0
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <_ZN9SmartFuse6handleEv+0x3aa>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3308      	adds	r3, #8
 8001334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fcf9 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800133c:	4603      	mov	r3, r0
 800133e:	2203      	movs	r2, #3
 8001340:	72da      	strb	r2, [r3, #11]
		if(rx_data[1] & (1 << 2)) this->channels[i].state = ChannelState::STKFLTR;
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fc81 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 800134e:	4603      	mov	r3, r0
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf14      	ite	ne
 800135a:	2301      	movne	r3, #1
 800135c:	2300      	moveq	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <_ZN9SmartFuse6handleEv+0x3de>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3308      	adds	r3, #8
 8001368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fcdf 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001370:	4603      	mov	r3, r0
 8001372:	2204      	movs	r2, #4
 8001374:	72da      	strb	r2, [r3, #11]
		if(rx_data[1] & (1 << 3)) this->channels[i].state = ChannelState::VDSFS;
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2101      	movs	r1, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fc67 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001382:	4603      	mov	r3, r0
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf14      	ite	ne
 800138e:	2301      	movne	r3, #1
 8001390:	2300      	moveq	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <_ZN9SmartFuse6handleEv+0x412>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3308      	adds	r3, #8
 800139c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fcc5 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2205      	movs	r2, #5
 80013a8:	72da      	strb	r2, [r3, #11]
		if(rx_data[1] & (1 << 4)) this->channels[i].state = ChannelState::CHFBSR;
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2101      	movs	r1, #1
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fc4d 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80013b6:	4603      	mov	r3, r0
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	bf14      	ite	ne
 80013c2:	2301      	movne	r3, #1
 80013c4:	2300      	moveq	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <_ZN9SmartFuse6handleEv+0x446>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3308      	adds	r3, #8
 80013d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fcab 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80013d8:	4603      	mov	r3, r0
 80013da:	2206      	movs	r2, #6
 80013dc:	72da      	strb	r2, [r3, #11]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	3301      	adds	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 80013e4:	e779      	b.n	80012da <_ZN9SmartFuse6handleEv+0x342>
	if(this->action_defined && this->action_timer.checkIfTimedOutAndReset())
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <_ZN9SmartFuse6handleEv+0x46a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3360      	adds	r3, #96	; 0x60
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 f956 	bl	80046a4 <_ZN5Timer23checkIfTimedOutAndResetEv>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <_ZN9SmartFuse6handleEv+0x46a>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <_ZN9SmartFuse6handleEv+0x46c>
 8001402:	2300      	movs	r3, #0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <_ZN9SmartFuse6handleEv+0x47c>
		this->action(this);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	336c      	adds	r3, #108	; 0x6c
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fcf8 	bl	8001e04 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_>
	if (!lock_state) this->state = getGSB(rx_data);
 8001414:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001418:	f083 0301 	eor.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d008      	beq.n	8001434 <_ZN9SmartFuse6handleEv+0x49c>
 8001422:	68b9      	ldr	r1, [r7, #8]
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fb80 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	return this->state;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 800143a:	4618      	mov	r0, r3
 800143c:	3744      	adds	r7, #68	; 0x44
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
	...

08001444 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>:
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
 8001450:	4613      	mov	r3, r2
 8001452:	803b      	strh	r3, [r7, #0]
	std::array < uint8_t, 3 >  tx_data { 0, 0, 0 };
 8001454:	4a31      	ldr	r2, [pc, #196]	; (800151c <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0xd8>)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	4611      	mov	r1, r2
 800145e:	8019      	strh	r1, [r3, #0]
 8001460:	3302      	adds	r3, #2
 8001462:	0c12      	lsrs	r2, r2, #16
 8001464:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 >  rx_data { 0, 0, 0 };
 8001466:	4a2d      	ldr	r2, [pc, #180]	; (800151c <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0xd8>)
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	4611      	mov	r1, r2
 8001470:	8019      	strh	r1, [r3, #0]
 8001472:	3302      	adds	r3, #2
 8001474:	0c12      	lsrs	r2, r2, #16
 8001476:	701a      	strb	r2, [r3, #0]
	if(duty_cykle > 1023) duty_cykle = 1023;
 8001478:	883b      	ldrh	r3, [r7, #0]
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147e:	d302      	bcc.n	8001486 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0x42>
 8001480:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001484:	803b      	strh	r3, [r7, #0]
	this->channels[size_t(channel)].duty_cycle = duty_cykle;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3308      	adds	r3, #8
 800148a:	78fa      	ldrb	r2, [r7, #3]
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fc4d 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001494:	4602      	mov	r2, r0
 8001496:	883b      	ldrh	r3, [r7, #0]
 8001498:	8053      	strh	r3, [r2, #2]
	tx_data[0] = WRITE_RAM(0x00 + size_t(channel));
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fbd5 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80014a6:	4602      	mov	r2, r0
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	7013      	strb	r3, [r2, #0]
	tx_data[1] = uint8_t(duty_cykle >> 4);
 80014ac:	883b      	ldrh	r3, [r7, #0]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	b29c      	uxth	r4, r3
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2101      	movs	r1, #1
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fbc9 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80014be:	4603      	mov	r3, r0
 80014c0:	b2e2      	uxtb	r2, r4
 80014c2:	701a      	strb	r2, [r3, #0]
	tx_data[2] = uint8_t(duty_cykle << 4) | this->toggle << 1;
 80014c4:	883b      	ldrh	r3, [r7, #0]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b25c      	sxtb	r4, r3
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2102      	movs	r1, #2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fbb5 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80014e6:	4603      	mov	r3, r0
 80014e8:	b2e2      	uxtb	r2, r4
 80014ea:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	461a      	mov	r2, r3
 80014f2:	68f9      	ldr	r1, [r7, #12]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fafd 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fb14 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	return this->state;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}
 800151a:	bf00      	nop
 800151c:	08009644 	.word	0x08009644

08001520 <_ZNK9SmartFuse8getStateEv>:
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	return this->state;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_ZN9SmartFuse15getChannelStateE7Channel>:
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	70fb      	strb	r3, [r7, #3]
	return this->channels[size_t(channel)].state;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3308      	adds	r3, #8
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fbed 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001554:	4603      	mov	r3, r0
 8001556:	7adb      	ldrb	r3, [r3, #11]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_ZN9SmartFuse17getChannelsStatesEv>:
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	3308      	adds	r3, #8
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fbdc 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001576:	4603      	mov	r3, r0
 8001578:	7ada      	ldrb	r2, [r3, #11]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	701a      	strb	r2, [r3, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3308      	adds	r3, #8
 8001582:	2101      	movs	r1, #1
 8001584:	4618      	mov	r0, r3
 8001586:	f000 fbd2 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800158a:	4603      	mov	r3, r0
 800158c:	7ada      	ldrb	r2, [r3, #11]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	705a      	strb	r2, [r3, #1]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	3308      	adds	r3, #8
 8001596:	2102      	movs	r1, #2
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fbc8 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800159e:	4603      	mov	r3, r0
 80015a0:	7ada      	ldrb	r2, [r3, #11]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	709a      	strb	r2, [r3, #2]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3308      	adds	r3, #8
 80015aa:	2103      	movs	r1, #3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fbbe 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80015b2:	4603      	mov	r3, r0
 80015b4:	7ada      	ldrb	r2, [r3, #11]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	70da      	strb	r2, [r3, #3]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3308      	adds	r3, #8
 80015be:	2104      	movs	r1, #4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fbb4 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80015c6:	4603      	mov	r3, r0
 80015c8:	7ada      	ldrb	r2, [r3, #11]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	711a      	strb	r2, [r3, #4]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	3308      	adds	r3, #8
 80015d2:	2105      	movs	r1, #5
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fbaa 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80015da:	4603      	mov	r3, r0
 80015dc:	7ada      	ldrb	r2, [r3, #11]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	715a      	strb	r2, [r3, #5]
}
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_ZN9SmartFuse19getChannelsCurrentsEv>:
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	3308      	adds	r3, #8
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fb97 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001600:	4603      	mov	r3, r0
 8001602:	889a      	ldrh	r2, [r3, #4]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	801a      	strh	r2, [r3, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	3308      	adds	r3, #8
 800160c:	2101      	movs	r1, #1
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fb8d 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001614:	4603      	mov	r3, r0
 8001616:	889a      	ldrh	r2, [r3, #4]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	805a      	strh	r2, [r3, #2]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3308      	adds	r3, #8
 8001620:	2102      	movs	r1, #2
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fb83 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001628:	4603      	mov	r3, r0
 800162a:	889a      	ldrh	r2, [r3, #4]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	809a      	strh	r2, [r3, #4]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3308      	adds	r3, #8
 8001634:	2103      	movs	r1, #3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fb79 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800163c:	4603      	mov	r3, r0
 800163e:	889a      	ldrh	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	80da      	strh	r2, [r3, #6]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3308      	adds	r3, #8
 8001648:	2104      	movs	r1, #4
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fb6f 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001650:	4603      	mov	r3, r0
 8001652:	889a      	ldrh	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	811a      	strh	r2, [r3, #8]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3308      	adds	r3, #8
 800165c:	2105      	movs	r1, #5
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fb65 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001664:	4603      	mov	r3, r0
 8001666:	889a      	ldrh	r2, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	815a      	strh	r2, [r3, #10]
}
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_ZN9SmartFuse5resetEv>:
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	tx_data = { RESET_SMARTFUSE(), 0, 0 };
 800167c:	23ff      	movs	r3, #255	; 0xff
 800167e:	743b      	strb	r3, [r7, #16]
 8001680:	2300      	movs	r3, #0
 8001682:	747b      	strb	r3, [r7, #17]
 8001684:	2300      	movs	r3, #0
 8001686:	74bb      	strb	r3, [r7, #18]
	this->transmitReceiveData(tx_data, rx_data);
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	461a      	mov	r2, r3
 800168e:	6939      	ldr	r1, [r7, #16]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fa2f 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { READ_ROM(0x01), 0, 0 };
 8001696:	23c1      	movs	r3, #193	; 0xc1
 8001698:	743b      	strb	r3, [r7, #16]
 800169a:	2300      	movs	r3, #0
 800169c:	747b      	strb	r3, [r7, #17]
 800169e:	2300      	movs	r3, #0
 80016a0:	74bb      	strb	r3, [r7, #18]
	for (size_t i = 0; i < fuse_timeout; i++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d845      	bhi.n	8001738 <_ZN9SmartFuse5resetEv+0xc4>
		if(!IF_RESET_STATE(rx_data)) break;
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 facc 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80016b8:	4603      	mov	r3, r0
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d113      	bne.n	80016e8 <_ZN9SmartFuse5resetEv+0x74>
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2101      	movs	r1, #1
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fac2 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80016cc:	4603      	mov	r3, r0
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d109      	bne.n	80016e8 <_ZN9SmartFuse5resetEv+0x74>
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2102      	movs	r1, #2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fab8 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80016e0:	4603      	mov	r3, r0
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00d      	beq.n	8001704 <_ZN9SmartFuse5resetEv+0x90>
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 faae 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80016f4:	4603      	mov	r3, r0
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <_ZN9SmartFuse5resetEv+0x90>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <_ZN9SmartFuse5resetEv+0x92>
 8001704:	2300      	movs	r3, #0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d115      	bne.n	8001736 <_ZN9SmartFuse5resetEv+0xc2>
		else if(i == fuse_timeout - 1)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d104      	bne.n	800171a <_ZN9SmartFuse5resetEv+0xa6>
			this->state = SmartFuseState::NotResponding;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2208      	movs	r2, #8
 8001714:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001718:	e017      	b.n	800174a <_ZN9SmartFuse5resetEv+0xd6>
		this->transmitReceiveData(tx_data, rx_data);
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	461a      	mov	r2, r3
 8001720:	6939      	ldr	r1, [r7, #16]
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f9e6 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		HAL_Delay(1);
 8001728:	2001      	movs	r0, #1
 800172a:	f003 f883 	bl	8004834 <HAL_Delay>
	for (size_t i = 0; i < fuse_timeout; i++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e7b7      	b.n	80016a6 <_ZN9SmartFuse5resetEv+0x32>
		if(!IF_RESET_STATE(rx_data)) break;
 8001736:	bf00      	nop
	this->state = getGSB(rx_data);
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff f9f5 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_ZN9SmartFuse18setUpAllDutyCyclesEv>:
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < 6; i++)
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d842      	bhi.n	80017e8 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0x98>
		tx_data[0] = WRITE_RAM(0x00 + i);
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fa71 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 800176e:	4603      	mov	r3, r0
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]
		tx_data[1] = uint8_t(this->channels[i].duty_cycle >> 4);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3308      	adds	r3, #8
 800177a:	6979      	ldr	r1, [r7, #20]
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fad6 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001782:	4603      	mov	r3, r0
 8001784:	885b      	ldrh	r3, [r3, #2]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	b29c      	uxth	r4, r3
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2101      	movs	r1, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fa5d 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001796:	4603      	mov	r3, r0
 8001798:	b2e2      	uxtb	r2, r4
 800179a:	701a      	strb	r2, [r3, #0]
		tx_data[2] = uint8_t(this->channels[i].duty_cycle << 4) | this->toggle << 1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3308      	adds	r3, #8
 80017a0:	6979      	ldr	r1, [r7, #20]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fac3 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80017a8:	4603      	mov	r3, r0
 80017aa:	885b      	ldrh	r3, [r3, #2]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	b25a      	sxtb	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	b25c      	sxtb	r4, r3
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	2102      	movs	r1, #2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fa42 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b2e2      	uxtb	r2, r4
 80017d0:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	461a      	mov	r2, r3
 80017d8:	6939      	ldr	r1, [r7, #16]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f98a 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < 6; i++)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e7b9      	b.n	800175c <_ZN9SmartFuse18setUpAllDutyCyclesEv+0xc>
	this->state = getGSB(rx_data);
 80017e8:	68f9      	ldr	r1, [r7, #12]
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff f99d 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
	...

08001804 <_ZN9SmartFuse21setUpAllSamplingModesEv>:
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data = { 0, 0, 0 };
 800180c:	4a37      	ldr	r2, [pc, #220]	; (80018ec <_ZN9SmartFuse21setUpAllSamplingModesEv+0xe8>)
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	4611      	mov	r1, r2
 8001816:	8019      	strh	r1, [r3, #0]
 8001818:	3302      	adds	r3, #2
 800181a:	0c12      	lsrs	r2, r2, #16
 800181c:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d854      	bhi.n	80018d2 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xce>
		tx_data[0] = WRITE_RAM(0x08 + i);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	b2dc      	uxtb	r4, r3
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fa0c 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001838:	4603      	mov	r3, r0
 800183a:	f104 0208 	add.w	r2, r4, #8
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]
		switch (this->channels[i].sampling_mode)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3308      	adds	r3, #8
 8001846:	6979      	ldr	r1, [r7, #20]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fa70 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800184e:	4603      	mov	r3, r0
 8001850:	7a9b      	ldrb	r3, [r3, #10]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d832      	bhi.n	80018bc <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
 8001856:	a201      	add	r2, pc, #4	; (adr r2, 800185c <_ZN9SmartFuse21setUpAllSamplingModesEv+0x58>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	0800186d 	.word	0x0800186d
 8001860:	08001881 	.word	0x08001881
 8001864:	08001895 	.word	0x08001895
 8001868:	080018a9 	.word	0x080018a9
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2102      	movs	r1, #2
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f9ec 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001878:	4603      	mov	r3, r0
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	e01d      	b.n	80018bc <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	2102      	movs	r1, #2
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f9e2 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 800188c:	4603      	mov	r3, r0
 800188e:	2240      	movs	r2, #64	; 0x40
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e013      	b.n	80018bc <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	2102      	movs	r1, #2
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f9d8 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	e009      	b.n	80018bc <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	2102      	movs	r1, #2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f9ce 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80018b4:	4603      	mov	r3, r0
 80018b6:	22c0      	movs	r2, #192	; 0xc0
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	bf00      	nop
		this->transmitReceiveData(tx_data, rx_data);
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	461a      	mov	r2, r3
 80018c2:	6939      	ldr	r1, [r7, #16]
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f915 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e7a7      	b.n	8001822 <_ZN9SmartFuse21setUpAllSamplingModesEv+0x1e>
	this->state = getGSB(rx_data);
 80018d2:	68f9      	ldr	r1, [r7, #12]
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff f928 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	08009644 	.word	0x08009644

080018f0 <_ZN9SmartFuse22setUpAllLatchOffTimersEv>:
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 80018f8:	4a4f      	ldr	r2, [pc, #316]	; (8001a38 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x148>)
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	4611      	mov	r1, r2
 8001902:	8019      	strh	r1, [r3, #0]
 8001904:	3302      	adds	r3, #2
 8001906:	0c12      	lsrs	r2, r2, #16
 8001908:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 > rx_data { 0, 0, 0 };
 800190a:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x148>)
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	4611      	mov	r1, r2
 8001914:	8019      	strh	r1, [r3, #0]
 8001916:	3302      	adds	r3, #2
 8001918:	0c12      	lsrs	r2, r2, #16
 800191a:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x10);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f994 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001928:	4603      	mov	r3, r0
 800192a:	2210      	movs	r2, #16
 800192c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = this->channels[2].latch_off_time_out << 4 |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3308      	adds	r3, #8
 8001932:	2102      	movs	r1, #2
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f9fa 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800193a:	4603      	mov	r3, r0
 800193c:	785b      	ldrb	r3, [r3, #1]
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	b25c      	sxtb	r4, r3
			     this->channels[1].latch_off_time_out;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3308      	adds	r3, #8
 8001946:	2101      	movs	r1, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f9f0 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800194e:	4603      	mov	r3, r0
 8001950:	785b      	ldrb	r3, [r3, #1]
 8001952:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels[2].latch_off_time_out << 4 |
 8001954:	4323      	orrs	r3, r4
 8001956:	b25c      	sxtb	r4, r3
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f976 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001964:	4603      	mov	r3, r0
 8001966:	b2e2      	uxtb	r2, r4
 8001968:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels[0].latch_off_time_out << 4;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3308      	adds	r3, #8
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f9dc 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001976:	4603      	mov	r3, r0
 8001978:	785c      	ldrb	r4, [r3, #1]
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	2102      	movs	r1, #2
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f965 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001986:	4603      	mov	r3, r0
 8001988:	0122      	lsls	r2, r4, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	461a      	mov	r2, r3
 8001994:	68f9      	ldr	r1, [r7, #12]
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8ac 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data[0] = WRITE_RAM(0x11);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f954 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2211      	movs	r2, #17
 80019ac:	701a      	strb	r2, [r3, #0]
	tx_data[1] = this->channels[5].latch_off_time_out << 4 |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3308      	adds	r3, #8
 80019b2:	2105      	movs	r1, #5
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f9ba 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80019ba:	4603      	mov	r3, r0
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	b25c      	sxtb	r4, r3
	             this->channels[4].latch_off_time_out;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3308      	adds	r3, #8
 80019c6:	2104      	movs	r1, #4
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f9b0 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80019ce:	4603      	mov	r3, r0
 80019d0:	785b      	ldrb	r3, [r3, #1]
 80019d2:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels[5].latch_off_time_out << 4 |
 80019d4:	4323      	orrs	r3, r4
 80019d6:	b25c      	sxtb	r4, r3
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2101      	movs	r1, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f936 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b2e2      	uxtb	r2, r4
 80019e8:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels[3].latch_off_time_out << 4;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3308      	adds	r3, #8
 80019ee:	2103      	movs	r1, #3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f99c 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80019f6:	4603      	mov	r3, r0
 80019f8:	785c      	ldrb	r4, [r3, #1]
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	2102      	movs	r1, #2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f925 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001a06:	4603      	mov	r3, r0
 8001a08:	0122      	lsls	r2, r4, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	461a      	mov	r2, r3
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f86c 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff f883 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	08009644 	.word	0x08009644

08001a3c <_ZN9SmartFuse22setUpAllChannelsStatesEv>:
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	tx_data[0] = WRITE_RAM(0x13);
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f900 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2213      	movs	r2, #19
 8001a54:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f8f7 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d81e      	bhi.n	8001ab0 <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x74>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3308      	adds	r3, #8
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f957 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001a80:	4603      	mov	r3, r0
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa02 f403 	lsl.w	r4, r2, r3
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f8dc 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	781a      	ldrb	r2, [r3, #0]
 8001a9c:	b251      	sxtb	r1, r2
 8001a9e:	b262      	sxtb	r2, r4
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	b252      	sxtb	r2, r2
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e7dd      	b.n	8001a6c <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x30>
	tx_data[2] = this->toggle << 1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461c      	mov	r4, r3
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	2102      	movs	r1, #2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 f8c7 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	0062      	lsls	r2, r4, #1
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6939      	ldr	r1, [r7, #16]
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f80e 	bl	8001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff f825 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001aea:	bf00      	nop
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd90      	pop	{r4, r7, pc}
	...

08001af4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>:
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8001b00:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0a:	2b40      	cmp	r3, #64	; 0x40
 8001b0c:	bf14      	ite	ne
 8001b0e:	2301      	movne	r3, #1
 8001b10:	2300      	moveq	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x34>
 8001b18:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b26:	601a      	str	r2, [r3, #0]
	calculateParityBit(tx_data);
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe ffcf 	bl	8000ad0 <_ZL18calculateParityBitRSt5arrayIhLj3EE>
	this->slaveSelect();
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f7ff f9b3 	bl	8000e9e <_ZN9SmartFuse11slaveSelectEv>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	75fb      	strb	r3, [r7, #23]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	75bb      	strb	r3, [r7, #22]
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d902      	bls.n	8001b4c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x58>
 8001b46:	7dbb      	ldrb	r3, [r7, #22]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d83e      	bhi.n	8001bca <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xd6>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d104      	bne.n	8001b64 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8001b5a:	7dbb      	ldrb	r3, [r7, #22]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d801      	bhi.n	8001b64 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x72>
 8001b64:	2300      	movs	r3, #0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00f      	beq.n	8001b8a <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x96>
			(*(uint8_t*) &rx_data[rx]) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f103 040c 	add.w	r4, r3, #12
 8001b72:	7dbb      	ldrb	r3, [r7, #22]
 8001b74:	4619      	mov	r1, r3
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f86a 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	7822      	ldrb	r2, [r4, #0]
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]
			rx++;
 8001b84:	7dbb      	ldrb	r3, [r7, #22]
 8001b86:	3301      	adds	r3, #1
 8001b88:	75bb      	strb	r3, [r7, #22]
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d104      	bne.n	8001ba2 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d801      	bhi.n	8001ba2 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xb0>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0cb      	beq.n	8001b40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = tx_data[tx];
 8001ba8:	7dfa      	ldrb	r2, [r7, #23]
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f84d 	bl	8001c50 <_ZNSt5arrayIhLj3EEixEj>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	330c      	adds	r3, #12
 8001bbe:	7812      	ldrb	r2, [r2, #0]
 8001bc0:	701a      	strb	r2, [r3, #0]
			tx++;
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	75fb      	strb	r3, [r7, #23]
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001bc8:	e7ba      	b.n	8001b40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
	this->slaveDeselect();
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f7ff f978 	bl	8000ec0 <_ZN9SmartFuse13slaveDeselectEv>
}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	2000066c 	.word	0x2000066c

08001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>:
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
	return this->channels[size_t(channel)].current;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3308      	adds	r3, #8
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 f89c 	bl	8001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	889b      	ldrh	r3, [r3, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>:
  ///\ingroup binary
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR14
    typename etl::enable_if<etl::is_integral<T>::value && etl::is_unsigned<T>::value && (etl::integral_limits<T>::bits == 8U), uint_least8_t>::type
    count_bits(T value)
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  {
#if ETL_CPP23_SUPPORTED && ETL_USING_STL
    return std::popcount(value);
#else
    uint32_t count = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]

    count = value - ((value >> 1U) & 0x55U);
 8001c10:	79fa      	ldrb	r2, [r7, #7]
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	60fb      	str	r3, [r7, #12]
    count = ((count >> 2U) & 0x33U) + (count & 0x33U);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
    count = ((count >> 4U) + count) & 0x0FU;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	091a      	lsrs	r2, r3, #4
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	60fb      	str	r3, [r7, #12]

    return uint_least8_t(count);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	b2db      	uxtb	r3, r3
#endif
  }
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_ZNSt5arrayIhLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f9a8 	bl	8001fb4 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_ZN3etl6bitsetILj8EEC1Ey>:
    }

    //*************************************************************************
    /// Construct from a value.
    //*************************************************************************
    bitset(unsigned long long value)
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	e9c7 2300 	strd	r2, r3, [r7]
      : etl::ibitset(MAXN, ARRAY_SIZE, data)
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3310      	adds	r3, #16
 8001c80:	2201      	movs	r2, #1
 8001c82:	2108      	movs	r1, #8
 8001c84:	f7fe fe5a 	bl	800093c <_ZN3etl7ibitsetC1EjjPh>
    {
      initialise(value);
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c8e:	4608      	mov	r0, r1
 8001c90:	f7fe fe12 	bl	80008b8 <_ZN3etl7ibitset10initialiseEy>
    }
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>:
      begin() noexcept
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f992 	bl	8001fd0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>:
      end() noexcept
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f986 	bl	8001fd0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	333c      	adds	r3, #60	; 0x3c
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_ZNSt4pairIttEC1IttLb1EEEv>:
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>
#endif
      _GLIBCXX_CONSTEXPR pair()
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	801a      	strh	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	805a      	strh	r2, [r3, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>:
    //*************************************************************************
    /// The internal invocation object.
    //*************************************************************************
    struct invocation_element
    {
      invocation_element() = default;
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_ZN3etl8delegateIFvP9SmartFuseEEC1Ev>:
    ETL_CONSTEXPR14 delegate()
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ffe7 	bl	8001cf2 <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>
    }
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>:
      operator[](size_type __n) noexcept
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 f954 	bl	8001fea <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_refERA6_KS1_j>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>:
      operator[](size_type __n) noexcept
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f957 	bl	800200e <_ZNSt14__array_traitsI15ChannelSettingsLj6EE6_S_refERA6_KS0_j>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_ZNSt4pairIttEaSERKS0_>:
      template<typename... _Args1, typename... _Args2>
	_GLIBCXX20_CONSTEXPR
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      _GLIBCXX20_CONSTEXPR pair&
      operator=(typename conditional<
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
		__and_<is_copy_assignable<_T1>,
		       is_copy_assignable<_T2>>::value,
		const pair&, const __nonesuch&>::type __p)
      {
	first = __p.first;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	881a      	ldrh	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	801a      	strh	r2, [r3, #0]
	second = __p.second;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	885a      	ldrh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	805a      	strh	r2, [r3, #2]
	return *this;
 8001d84:	687b      	ldr	r3, [r7, #4]
      }
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_ZNSt5arrayIbLj6EEixEj>:
      operator[](size_type __n) noexcept
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6839      	ldr	r1, [r7, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f946 	bl	8002032 <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE5beginEv>:
      begin() noexcept
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f948 	bl	800204e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE4dataEv>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE3endEv>:
      end() noexcept
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f93c 	bl	800204e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE4dataEv>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	3348      	adds	r3, #72	; 0x48
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_ZNK3etl8delegateIFvP9SmartFuseEE8is_validEv>:
    ETL_CONSTEXPR14 bool is_valid() const
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
      return invocation.stub != ETL_NULLPTR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bf14      	ite	ne
 8001df2:	2301      	movne	r3, #1
 8001df4:	2300      	moveq	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
    }
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_>:
    TReturn operator()(TParams... args) const
 8001e04:	b5b0      	push	{r4, r5, r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
      ETL_ASSERT(is_valid(), ETL_ERROR(delegate_uninitialised));
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffe7 	bl	8001de2 <_ZNK3etl8delegateIFvP9SmartFuseEE8is_validEv>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x24>
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x48>)
 8001e1c:	4a0c      	ldr	r2, [pc, #48]	; (8001e50 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x4c>)
 8001e1e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001e22:	480c      	ldr	r0, [pc, #48]	; (8001e54 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x50>)
 8001e24:	f006 fbc4 	bl	80085b0 <__assert_func>
      return (*invocation.stub)(invocation.object, etl::forward<TParams>(args)...);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685c      	ldr	r4, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681d      	ldr	r5, [r3, #0]
 8001e30:	463b      	mov	r3, r7
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f918 	bl	8002068 <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4628      	mov	r0, r5
 8001e40:	47a0      	blx	r4
 8001e42:	bf00      	nop
    }
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	08009648 	.word	0x08009648
 8001e50:	08009658 	.word	0x08009658
 8001e54:	080096d4 	.word	0x080096d4

08001e58 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EEEEEvDpOT_>:
    /// Constructs a value at the end of the vector.
    /// If asserts or exceptions are enabled, emits vector_full if the vector is already full.
    ///\param value The value to add.
    //*********************************************************************
    template <typename ... Args>
    void emplace_back(Args && ... args)
 8001e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5a:	b0a9      	sub	sp, #164	; 0xa4
 8001e5c:	af10      	add	r7, sp, #64	; 0x40
 8001e5e:	61f8      	str	r0, [r7, #28]
 8001e60:	61b9      	str	r1, [r7, #24]
 8001e62:	617a      	str	r2, [r7, #20]
 8001e64:	613b      	str	r3, [r7, #16]
    {
#if defined(ETL_CHECK_PUSH_POP)
      ETL_ASSERT(size() != CAPACITY, ETL_ERROR(vector_full));
#endif
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001e66:	69b8      	ldr	r0, [r7, #24]
 8001e68:	f000 f909 	bl	800207e <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f000 f90e 	bl	8002094 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	6938      	ldr	r0, [r7, #16]
 8001e80:	f000 f913 	bl	80020aa <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8001e84:	4603      	mov	r3, r0
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001e8c:	f000 f918 	bl	80020c0 <_ZN3etl7forwardIRSt5arrayI15ChannelSettingsLj6EEEEOT_RNS_16remove_referenceIS5_E4typeE>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461c      	mov	r4, r3
 8001e94:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8001e98:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8001e9c:	4635      	mov	r5, r6
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eaa:	3410      	adds	r4, #16
 8001eac:	3610      	adds	r6, #16
 8001eae:	4564      	cmp	r4, ip
 8001eb0:	d1f4      	bne.n	8001e9c <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EEEEEvDpOT_+0x44>
 8001eb2:	4633      	mov	r3, r6
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	6810      	ldr	r0, [r2, #0]
 8001eb8:	6851      	ldr	r1, [r2, #4]
 8001eba:	6892      	ldr	r2, [r2, #8]
 8001ebc:	c307      	stmia	r3!, {r0, r1, r2}
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2074      	movs	r0, #116	; 0x74
 8001ec6:	f7fe fb8d 	bl	80005e4 <_ZnwjPv>
 8001eca:	4606      	mov	r6, r0
 8001ecc:	466d      	mov	r5, sp
 8001ece:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ee2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4630      	mov	r0, r6
 8001eee:	f7fe fee4 	bl	8000cba <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
      ++p_end;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	609a      	str	r2, [r3, #8]
      ETL_INCREMENT_DEBUG_COUNT
    }
 8001efe:	bf00      	nop
 8001f00:	3764      	adds	r7, #100	; 0x64
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f06 <_ZN3etl7ivectorI9SmartFuseE5beginEv>:
    iterator begin()
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
      return p_buffer;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
    }
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <_ZN3etl7ivectorI9SmartFuseE3endEv>:
    iterator end()
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
      return p_end;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
    }
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>:
      operator[](size_type __n) noexcept
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f8c6 	bl	80020d6 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>:
    reference operator [](size_t i)
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
      return p_buffer[i];
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2174      	movs	r1, #116	; 0x74
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
    }
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f8b3 	bl	80020f2 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_ZNSt5arrayIS_ItLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f8b6 	bl	8002116 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_refERA4_KS1_j>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f8ad 	bl	800213a <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <_ZNSt14__array_traitsI15ChannelSettingsLj6EE6_S_refERA6_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE4dataEv>:
      data() noexcept
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f879 	bl	8002150 <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_ptrERA6_KS1_>
 800205e:	4603      	mov	r3, r0
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8002070:	687b      	ldr	r3, [r7, #4]
  }
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8002086:	687b      	ldr	r3, [r7, #4]
  }
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800209c:	687b      	ldr	r3, [r7, #4]
  }
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 80020b2:	687b      	ldr	r3, [r7, #4]
  }
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_ZN3etl7forwardIRSt5arrayI15ChannelSettingsLj6EEEEOT_RNS_16remove_referenceIS5_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 80020c8:	687b      	ldr	r3, [r7, #4]
  }
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_ptrERA6_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <_ZN11GpioElementD1Ev>:
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		//virtual void handle();
		virtual ~GpioElement() { };
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <_ZN11GpioElementD1Ev+0x1c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	08009728 	.word	0x08009728

08002188 <_ZN11GpioElementD0Ev>:
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ffe9 	bl	8002168 <_ZN11GpioElementD1Ev>
 8002196:	2110      	movs	r1, #16
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f006 fa04 	bl	80085a6 <_ZdlPvj>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
 *      Author: Piotr Lesicki
 */

#include "gpio elements.hpp"

GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	70fb      	strb	r3, [r7, #3]
						 port(port), pin(pin), is_inverted(is_inverted) { }
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x34>)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	715a      	strb	r2, [r3, #5]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	08009728 	.word	0x08009728

080021e0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin) :
							   GpioElement(port, pin, false) { }

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	70fb      	strb	r3, [r7, #3]
							   GpioElement(port, pin, is_inverted) { }
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	f7ff ffd7 	bl	80021a8 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 80021fa:	4a04      	ldr	r2, [pc, #16]	; (800220c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x2c>)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	08009718 	.word	0x08009718

08002210 <_ZN14GpioOutElement8activateEv>:

void GpioOutElement::activate()
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68d8      	ldr	r0, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	b299      	uxth	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	795b      	ldrb	r3, [r3, #5]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <_ZN14GpioOutElement8activateEv+0x1e>
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <_ZN14GpioOutElement8activateEv+0x20>
 800222e:	2301      	movs	r3, #1
 8002230:	461a      	mov	r2, r3
 8002232:	f004 fbe3 	bl	80069fc <HAL_GPIO_WritePin>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <_ZN14GpioOutElement10deactivateEv>:

void GpioOutElement::deactivate()
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68d8      	ldr	r0, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	b299      	uxth	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	795b      	ldrb	r3, [r3, #5]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <_ZN14GpioOutElement10deactivateEv+0x1e>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <_ZN14GpioOutElement10deactivateEv+0x20>
 800225c:	2300      	movs	r3, #0
 800225e:	461a      	mov	r2, r3
 8002260:	f004 fbcc 	bl	80069fc <HAL_GPIO_WritePin>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>:
}

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin) :
							 GpioElement(port, pin, false) { }

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	70fb      	strb	r3, [r7, #3]
							 GpioElement(port, pin, is_inverted) { }
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	f7ff ff91 	bl	80021a8 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb+0x2c>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	08009708 	.word	0x08009708

0800229c <_ZN13GpioInElement8isActiveEv>:

bool GpioInElement::isActive()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	 *		  1  |    1   |  0
	 *
	 *	  basically a XOR operation
	 *
	 */
	return ((HAL_GPIO_ReadPin((GPIO_TypeDef*)(this->port), this->pin) == GPIO_PIN_SET) != this->is_inverted);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	4610      	mov	r0, r2
 80022b2:	f004 fb8b 	bl	80069cc <HAL_GPIO_ReadPin>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	795b      	ldrb	r3, [r3, #5]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <_ZN13GpioInElementD1Ev>:

		//void handle() override;
		void toggle();
};

class GpioInElement : public GpioElement
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	4a05      	ldr	r2, [pc, #20]	; (80022fc <_ZN13GpioInElementD1Ev+0x20>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff3b 	bl	8002168 <_ZN11GpioElementD1Ev>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	08009708 	.word	0x08009708

08002300 <_ZN13GpioInElementD0Ev>:
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ffe7 	bl	80022dc <_ZN13GpioInElementD1Ev>
 800230e:	2110      	movs	r1, #16
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f006 f948 	bl	80085a6 <_ZdlPvj>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_ZN14GpioOutElementD1Ev>:
class GpioOutElement : public GpioElement
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	4a05      	ldr	r2, [pc, #20]	; (8002340 <_ZN14GpioOutElementD1Ev+0x20>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff19 	bl	8002168 <_ZN11GpioElementD1Ev>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	08009718 	.word	0x08009718

08002344 <_ZN14GpioOutElementD0Ev>:
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ffe7 	bl	8002320 <_ZN14GpioOutElementD1Ev>
 8002352:	2110      	movs	r1, #16
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f006 f926 	bl	80085a6 <_ZdlPvj>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800237a:	4b5e      	ldr	r3, [pc, #376]	; (80024f4 <MX_GPIO_Init+0x190>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	4a5d      	ldr	r2, [pc, #372]	; (80024f4 <MX_GPIO_Init+0x190>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002386:	4b5b      	ldr	r3, [pc, #364]	; (80024f4 <MX_GPIO_Init+0x190>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002392:	4b58      	ldr	r3, [pc, #352]	; (80024f4 <MX_GPIO_Init+0x190>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	4a57      	ldr	r2, [pc, #348]	; (80024f4 <MX_GPIO_Init+0x190>)
 8002398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239e:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <MX_GPIO_Init+0x190>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <MX_GPIO_Init+0x190>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	4a51      	ldr	r2, [pc, #324]	; (80024f4 <MX_GPIO_Init+0x190>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b6:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <MX_GPIO_Init+0x190>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c2:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <MX_GPIO_Init+0x190>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	4a4b      	ldr	r2, [pc, #300]	; (80024f4 <MX_GPIO_Init+0x190>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ce:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <MX_GPIO_Init+0x190>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023da:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <MX_GPIO_Init+0x190>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	4a45      	ldr	r2, [pc, #276]	; (80024f4 <MX_GPIO_Init+0x190>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e6:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <MX_GPIO_Init+0x190>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	210f      	movs	r1, #15
 80023f6:	4840      	ldr	r0, [pc, #256]	; (80024f8 <MX_GPIO_Init+0x194>)
 80023f8:	f004 fb00 	bl	80069fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	211e      	movs	r1, #30
 8002400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002404:	f004 fafa 	bl	80069fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 7109 	mov.w	r1, #548	; 0x224
 800240e:	483b      	ldr	r0, [pc, #236]	; (80024fc <MX_GPIO_Init+0x198>)
 8002410:	f004 faf4 	bl	80069fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8002414:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8002418:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800241a:	2303      	movs	r3, #3
 800241c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	4833      	ldr	r0, [pc, #204]	; (80024f8 <MX_GPIO_Init+0x194>)
 800242a:	f004 f93d 	bl	80066a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800242e:	230f      	movs	r3, #15
 8002430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	2301      	movs	r3, #1
 8002434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	482c      	ldr	r0, [pc, #176]	; (80024f8 <MX_GPIO_Init+0x194>)
 8002446:	f004 f92f 	bl	80066a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800244a:	231e      	movs	r3, #30
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244e:	2301      	movs	r3, #1
 8002450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002464:	f004 f920 	bl	80066a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9;
 8002468:	f44f 7309 	mov.w	r3, #548	; 0x224
 800246c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	481e      	ldr	r0, [pc, #120]	; (80024fc <MX_GPIO_Init+0x198>)
 8002482:	f004 f911 	bl	80066a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB4 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002486:	f64f 53d0 	movw	r3, #64976	; 0xfdd0
 800248a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800248c:	2303      	movs	r3, #3
 800248e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	4818      	ldr	r0, [pc, #96]	; (80024fc <MX_GPIO_Init+0x198>)
 800249c:	f004 f904 	bl	80066a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 80024a0:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a6:	2303      	movs	r3, #3
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b8:	f004 f8f6 	bl	80066a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024bc:	2304      	movs	r3, #4
 80024be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c0:	2303      	movs	r3, #3
 80024c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	480c      	ldr	r0, [pc, #48]	; (8002500 <MX_GPIO_Init+0x19c>)
 80024d0:	f004 f8ea 	bl	80066a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024d4:	2308      	movs	r3, #8
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d8:	2303      	movs	r3, #3
 80024da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	4807      	ldr	r0, [pc, #28]	; (8002504 <MX_GPIO_Init+0x1a0>)
 80024e8:	f004 f8de 	bl	80066a8 <HAL_GPIO_Init>

}
 80024ec:	bf00      	nop
 80024ee:	3728      	adds	r7, #40	; 0x28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	48000800 	.word	0x48000800
 80024fc:	48000400 	.word	0x48000400
 8002500:	48000c00 	.word	0x48000c00
 8002504:	48001c00 	.word	0x48001c00

08002508 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	601a      	str	r2, [r3, #0]
    {
    }
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
    {
    }
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	461a      	mov	r2, r3
 800254c:	2300      	movs	r3, #0
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	6053      	str	r3, [r2, #4]
 8002552:	6093      	str	r3, [r2, #8]
 8002554:	60d3      	str	r3, [r2, #12]
 8002556:	6113      	str	r3, [r2, #16]
 8002558:	6153      	str	r3, [r2, #20]
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	331c      	adds	r3, #28
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	331c      	adds	r3, #28
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	68b8      	ldr	r0, [r7, #8]
 8002570:	f003 fc20 	bl	8005db4 <HAL_CAN_GetRxMessage>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
    this->status =
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	791a      	ldrb	r2, [r3, #4]
 8002594:	795b      	ldrb	r3, [r3, #5]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	4313      	orrs	r3, r2
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	6938      	ldr	r0, [r7, #16]
 80025c0:	f001 f884 	bl	80036cc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>
 80025c4:	6178      	str	r0, [r7, #20]
 80025c6:	6938      	ldr	r0, [r7, #16]
 80025c8:	f001 f88c 	bl	80036e4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d01f      	beq.n	8002616 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ffd2 	bl	8002588 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80025e4:	4602      	mov	r2, r0
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6839      	ldr	r1, [r7, #0]
 8002606:	4610      	mov	r0, r2
 8002608:	4798      	blx	r3
        return true;
 800260a:	2301      	movs	r3, #1
 800260c:	e004      	b.n	8002618 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3304      	adds	r3, #4
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e7db      	b.n	80025ce <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 8002616:	2300      	movs	r3, #0
  }
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_ZN8PUTM_CAN13Can_interface11get_tc_mainEv>:
    return steering_wheel_main.data;
  }
  Steering_Wheel_event get_steering_wheel_event() {
    return steering_wheel_event.data;
  }
  TC_main get_tc_main() { return tc_main.data; }
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002632:	cb03      	ldmia	r3!, {r0, r1}
 8002634:	6010      	str	r0, [r2, #0]
 8002636:	6051      	str	r1, [r2, #4]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 800264c:	f107 0308 	add.w	r3, r7, #8
 8002650:	2200      	movs	r2, #0
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff71 	bl	800253c <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 800265a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	4619      	mov	r1, r3
 8002668:	4803      	ldr	r0, [pc, #12]	; (8002678 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800266a:	f7ff ff9f 	bl	80025ac <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 800266e:	bf00      	nop
 8002670:	3730      	adds	r7, #48	; 0x30
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000000 	.word	0x20000000

0800267c <_ZN16SmartFuseHandlerILm4EEC1Ev>:

		SmartFuseState getGSB(std::array < uint8_t, 3 > x);
};

template <uint32_t num_of_sf>
class SmartFuseHandler
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4618      	mov	r0, r3
 8002688:	f001 f846 	bl	8003718 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <_ZZ4mainENKUlP9SmartFuseE_clES0_>:
	 * channel 5: pump
	 */
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_4, &hspi1, channels_settings);

	sf_handler.smart_fuses[1].setActionInterval(100);
	sf_handler.smart_fuses[1].setAction([](SmartFuse* sf)
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	{
		static uint16_t previous_setting = 1023;

		uint16_t setting = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	82fb      	strh	r3, [r7, #22]
//		if(temps.water_temp_in > 60) setting = 1023;
//		else if(temps.water_temp_in > 50) setting = 800;
//		else if(temps.water_temp_in > 40) setting = 500;
//		else setting = 0;

		auto tc_main = PUTM_CAN::can.get_tc_main();
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4914      	ldr	r1, [pc, #80]	; (80026fc <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x64>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ffb7 	bl	8002620 <_ZN8PUTM_CAN13Can_interface11get_tc_mainEv>
		if(tc_main.traction_control_enable) setting = 0x3ff;
 80026b2:	7c7b      	ldrb	r3, [r7, #17]
 80026b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x2e>
 80026be:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80026c2:	82fb      	strh	r3, [r7, #22]
 80026c4:	e001      	b.n	80026ca <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x32>
		else setting = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	82fb      	strh	r3, [r7, #22]

		if(previous_setting != setting)
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x68>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	8afa      	ldrh	r2, [r7, #22]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d00e      	beq.n	80026f2 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x5a>
		{
			// fan left
			sf->setChannelDutyCykle(Channel::c3, setting);
 80026d4:	8afb      	ldrh	r3, [r7, #22]
 80026d6:	461a      	mov	r2, r3
 80026d8:	2103      	movs	r1, #3
 80026da:	6838      	ldr	r0, [r7, #0]
 80026dc:	f7fe feb2 	bl	8001444 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>
			// fan right
			sf->setChannelDutyCykle(Channel::c4, setting);
 80026e0:	8afb      	ldrh	r3, [r7, #22]
 80026e2:	461a      	mov	r2, r3
 80026e4:	2104      	movs	r1, #4
 80026e6:	6838      	ldr	r0, [r7, #0]
 80026e8:	f7fe feac 	bl	8001444 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>

			previous_setting = setting;
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x68>)
 80026ee:	8afb      	ldrh	r3, [r7, #22]
 80026f0:	8013      	strh	r3, [r2, #0]
		}
	});
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000210 	.word	0x20000210

08002704 <_ZN11GpioElementC1ERKS_>:
class GpioElement
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <_ZN11GpioElementC1ERKS_+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	791a      	ldrb	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	711a      	strb	r2, [r3, #4]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	795a      	ldrb	r2, [r3, #5]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	715a      	strb	r2, [r3, #5]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	60da      	str	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	08009728 	.word	0x08009728

08002748 <_ZN13GpioInElementC1ERKS_>:
class GpioInElement : public GpioElement
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ffd3 	bl	8002704 <_ZN11GpioElementC1ERKS_>
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <_ZN13GpioInElementC1ERKS_+0x28>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	08009708 	.word	0x08009708

08002774 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4614      	mov	r4, r2
 8002786:	461d      	mov	r5, r3
 8002788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800278a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002790:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3318      	adds	r3, #24
 8002798:	2203      	movs	r2, #3
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	4618      	mov	r0, r3
 800279e:	f005 ff69 	bl	8008674 <memcpy>
  }
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bdb0      	pop	{r4, r5, r7, pc}

080027ac <main>:
{
 80027ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ae:	b0ed      	sub	sp, #436	; 0x1b4
 80027b0:	af10      	add	r7, sp, #64	; 0x40
	uint8_t _1 = 0x2;
 80027b2:	2302      	movs	r3, #2
 80027b4:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	ChannelSettings channel_setting
 80027b8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	811a      	strh	r2, [r3, #8]
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80027ca:	2302      	movs	r3, #2
 80027cc:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80027d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80027d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80027d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027dc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	};
 80027e0:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80027e4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	};
 80027e8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027ec:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80027f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027f2:	c303      	stmia	r3!, {r0, r1}
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	f107 02da 	add.w	r2, r7, #218	; 0xda
 80027fa:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80027fe:	cb03      	ldmia	r3!, {r0, r1}
 8002800:	6010      	str	r0, [r2, #0]
 8002802:	6051      	str	r1, [r2, #4]
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	8113      	strh	r3, [r2, #8]
 8002808:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800280c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002810:	ca07      	ldmia	r2, {r0, r1, r2}
 8002812:	c303      	stmia	r3!, {r0, r1}
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	f107 02ee 	add.w	r2, r7, #238	; 0xee
 800281a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800281e:	cb03      	ldmia	r3!, {r0, r1}
 8002820:	6010      	str	r0, [r2, #0]
 8002822:	6051      	str	r1, [r2, #4]
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	8113      	strh	r3, [r2, #8]
 8002828:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800282c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002830:	ca07      	ldmia	r2, {r0, r1, r2}
 8002832:	c303      	stmia	r3!, {r0, r1}
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	f507 7281 	add.w	r2, r7, #258	; 0x102
 800283a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800283e:	cb03      	ldmia	r3!, {r0, r1}
 8002840:	6010      	str	r0, [r2, #0]
 8002842:	6051      	str	r1, [r2, #4]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	8113      	strh	r3, [r2, #8]
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_1, &hspi1, channels_settings);
 8002848:	466d      	mov	r5, sp
 800284a:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 800284e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800285e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002862:	4bd0      	ldr	r3, [pc, #832]	; (8002ba4 <main+0x3f8>)
 8002864:	2202      	movs	r2, #2
 8002866:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800286a:	48cf      	ldr	r0, [pc, #828]	; (8002ba8 <main+0x3fc>)
 800286c:	f7fd fec6 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_2, &hspi1, channels_settings);
 8002870:	466d      	mov	r5, sp
 8002872:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8002876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002882:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002886:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800288a:	4bc6      	ldr	r3, [pc, #792]	; (8002ba4 <main+0x3f8>)
 800288c:	2204      	movs	r2, #4
 800288e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002892:	48c5      	ldr	r0, [pc, #788]	; (8002ba8 <main+0x3fc>)
 8002894:	f7fd feb2 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_3, &hspi1, channels_settings);
 8002898:	466d      	mov	r5, sp
 800289a:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 800289e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80028ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80028b2:	4bbc      	ldr	r3, [pc, #752]	; (8002ba4 <main+0x3f8>)
 80028b4:	2208      	movs	r2, #8
 80028b6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80028ba:	48bb      	ldr	r0, [pc, #748]	; (8002ba8 <main+0x3fc>)
 80028bc:	f7fd fe9e 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_4, &hspi1, channels_settings);
 80028c0:	466d      	mov	r5, sp
 80028c2:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80028c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80028d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80028da:	4bb2      	ldr	r3, [pc, #712]	; (8002ba4 <main+0x3f8>)
 80028dc:	2210      	movs	r2, #16
 80028de:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80028e2:	48b1      	ldr	r0, [pc, #708]	; (8002ba8 <main+0x3fc>)
 80028e4:	f7fd fe8a 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
	sf_handler.smart_fuses[1].setActionInterval(100);
 80028e8:	2101      	movs	r1, #1
 80028ea:	48af      	ldr	r0, [pc, #700]	; (8002ba8 <main+0x3fc>)
 80028ec:	f7ff fb32 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2164      	movs	r1, #100	; 0x64
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe faa7 	bl	8000e48 <_ZN9SmartFuse17setActionIntervalEm>
	sf_handler.smart_fuses[1].setAction([](SmartFuse* sf)
 80028fa:	2101      	movs	r1, #1
 80028fc:	48aa      	ldr	r0, [pc, #680]	; (8002ba8 <main+0x3fc>)
 80028fe:	f7ff fb29 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002902:	4604      	mov	r4, r0
 8002904:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002908:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f000 ff28 	bl	8003764 <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_>
 8002914:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002918:	e893 0006 	ldmia.w	r3, {r1, r2}
 800291c:	4620      	mov	r0, r4
 800291e:	f7fe faa7 	bl	8000e70 <_ZN9SmartFuse9setActionEN3etl8delegateIFvPS_EEE>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002922:	f001 ff12 	bl	800474a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002926:	f000 fa45 	bl	8002db4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800292a:	f7ff fd1b 	bl	8002364 <MX_GPIO_Init>
  MX_CAN1_Init();
 800292e:	f7fd fdcf 	bl	80004d0 <MX_CAN1_Init>
  MX_ADC1_Init();
 8002932:	f7fd fcb5 	bl	80002a0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002936:	f001 fca7 	bl	8004288 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	sf_handler.initAll();
 800293a:	489b      	ldr	r0, [pc, #620]	; (8002ba8 <main+0x3fc>)
 800293c:	f7fd fe9e 	bl	800067c <_ZN16SmartFuseHandlerILm4EE7initAllEv>
	initCAN();
 8002940:	f000 fa98 	bl	8002e74 <_Z7initCANv>

	led_ok.deactivate();
 8002944:	4899      	ldr	r0, [pc, #612]	; (8002bac <main+0x400>)
 8002946:	f7ff fc7a 	bl	800223e <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 800294a:	4899      	ldr	r0, [pc, #612]	; (8002bb0 <main+0x404>)
 800294c:	f7ff fc77 	bl	800223e <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8002950:	4898      	ldr	r0, [pc, #608]	; (8002bb4 <main+0x408>)
 8002952:	f7ff fc74 	bl	800223e <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 8002956:	4898      	ldr	r0, [pc, #608]	; (8002bb8 <main+0x40c>)
 8002958:	f7ff fc71 	bl	800223e <_ZN14GpioOutElement10deactivateEv>

	std::array < GpioInElement, 5 > optos { safety_ams, safety_spare, safety_tms, safety_td, safety_hvd };
 800295c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002960:	4996      	ldr	r1, [pc, #600]	; (8002bbc <main+0x410>)
 8002962:	4620      	mov	r0, r4
 8002964:	f7ff fef0 	bl	8002748 <_ZN13GpioInElementC1ERKS_>
 8002968:	3410      	adds	r4, #16
 800296a:	4995      	ldr	r1, [pc, #596]	; (8002bc0 <main+0x414>)
 800296c:	4620      	mov	r0, r4
 800296e:	f7ff feeb 	bl	8002748 <_ZN13GpioInElementC1ERKS_>
 8002972:	3410      	adds	r4, #16
 8002974:	4993      	ldr	r1, [pc, #588]	; (8002bc4 <main+0x418>)
 8002976:	4620      	mov	r0, r4
 8002978:	f7ff fee6 	bl	8002748 <_ZN13GpioInElementC1ERKS_>
 800297c:	3410      	adds	r4, #16
 800297e:	4992      	ldr	r1, [pc, #584]	; (8002bc8 <main+0x41c>)
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff fee1 	bl	8002748 <_ZN13GpioInElementC1ERKS_>
 8002986:	f104 0310 	add.w	r3, r4, #16
 800298a:	4990      	ldr	r1, [pc, #576]	; (8002bcc <main+0x420>)
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fedb 	bl	8002748 <_ZN13GpioInElementC1ERKS_>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	sf_handler.enableAll();
 8002992:	4885      	ldr	r0, [pc, #532]	; (8002ba8 <main+0x3fc>)
 8002994:	f7fd fe9d 	bl	80006d2 <_ZN16SmartFuseHandlerILm4EE9enableAllEv>

	enable_mosfets.activate();
 8002998:	488d      	ldr	r0, [pc, #564]	; (8002bd0 <main+0x424>)
 800299a:	f7ff fc39 	bl	8002210 <_ZN14GpioOutElement8activateEv>

	led_ok.activate();
 800299e:	4883      	ldr	r0, [pc, #524]	; (8002bac <main+0x400>)
 80029a0:	f7ff fc36 	bl	8002210 <_ZN14GpioOutElement8activateEv>

	Timer timer_can_send_main_frame(10);
 80029a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029a8:	210a      	movs	r1, #10
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fe4d 	bl	800464a <_ZN5TimerC1Em>
	Timer timer_can_send_other_frames(100);
 80029b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029b4:	2164      	movs	r1, #100	; 0x64
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 fe47 	bl	800464a <_ZN5TimerC1Em>

	while (1)
	{
		//----------------------------------------------------------------------------------------
		// handle smart fuses and show as Ok/Warnings/Error
		auto state = sf_handler.handleAll();
 80029bc:	487a      	ldr	r0, [pc, #488]	; (8002ba8 <main+0x3fc>)
 80029be:	f7fd fe32 	bl	8000626 <_ZN16SmartFuseHandlerILm4EE9handleAllEv>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
		if(state != SmartFuseState::Ok) led_error.activate();
 80029c8:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <main+0x22c>
 80029d0:	4879      	ldr	r0, [pc, #484]	; (8002bb8 <main+0x40c>)
 80029d2:	f7ff fc1d 	bl	8002210 <_ZN14GpioOutElement8activateEv>
 80029d6:	e002      	b.n	80029de <main+0x232>
		else led_error.deactivate();
 80029d8:	4877      	ldr	r0, [pc, #476]	; (8002bb8 <main+0x40c>)
 80029da:	f7ff fc30 	bl	800223e <_ZN14GpioOutElement10deactivateEv>
		// debug stuff
		fuses_states = sf_handler.getStates();
 80029de:	4872      	ldr	r0, [pc, #456]	; (8002ba8 <main+0x3fc>)
 80029e0:	f7fd fea5 	bl	800072e <_ZN16SmartFuseHandlerILm4EE9getStatesEv>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4a7b      	ldr	r2, [pc, #492]	; (8002bd4 <main+0x428>)
 80029e8:	6013      	str	r3, [r2, #0]
		channels_states = sf_handler.getChannelsStates();
 80029ea:	4c7b      	ldr	r4, [pc, #492]	; (8002bd8 <main+0x42c>)
 80029ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029f0:	496d      	ldr	r1, [pc, #436]	; (8002ba8 <main+0x3fc>)
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fecd 	bl	8000792 <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>
 80029f8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80029fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a00:	461d      	mov	r5, r3
 8002a02:	6828      	ldr	r0, [r5, #0]
 8002a04:	6869      	ldr	r1, [r5, #4]
 8002a06:	68aa      	ldr	r2, [r5, #8]
 8002a08:	68eb      	ldr	r3, [r5, #12]
 8002a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a0c:	6928      	ldr	r0, [r5, #16]
 8002a0e:	6969      	ldr	r1, [r5, #20]
 8002a10:	c403      	stmia	r4!, {r0, r1}
		channels_currents = sf_handler.getChannelsCurrents();
 8002a12:	4d72      	ldr	r5, [pc, #456]	; (8002bdc <main+0x430>)
 8002a14:	463b      	mov	r3, r7
 8002a16:	4964      	ldr	r1, [pc, #400]	; (8002ba8 <main+0x3fc>)
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fee3 	bl	80007e4 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>
 8002a1e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002a22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a26:	461c      	mov	r4, r3
 8002a28:	462e      	mov	r6, r5
 8002a2a:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8002a2e:	4635      	mov	r5, r6
 8002a30:	4623      	mov	r3, r4
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	3410      	adds	r4, #16
 8002a3e:	3610      	adds	r6, #16
 8002a40:	4564      	cmp	r4, ip
 8002a42:	d1f4      	bne.n	8002a2e <main+0x282>

		//----------------------------------------------------------------------------------------
		// handle safety
		for (auto& safety : optos)
 8002a44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a48:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a4c:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8002a50:	f000 fe9e 	bl	8003790 <_ZNSt5arrayI13GpioInElementLj5EE5beginEv>
 8002a54:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
 8002a58:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8002a5c:	f000 fea4 	bl	80037a8 <_ZNSt5arrayI13GpioInElementLj5EE3endEv>
 8002a60:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 8002a64:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d00d      	beq.n	8002a8c <main+0x2e0>
 8002a70:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002a74:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		{
			safety.isActive();
 8002a78:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8002a7c:	f7ff fc0e 	bl	800229c <_ZN13GpioInElement8isActiveEv>
		for (auto& safety : optos)
 8002a80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002a84:	3310      	adds	r3, #16
 8002a86:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002a8a:	e7eb      	b.n	8002a64 <main+0x2b8>
		}

		//----------------------------------------------------------------------------------------
		// transmit receive can and handle
		if(timer_can_send_main_frame.checkIfTimedOutAndReset())
 8002a8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 fe07 	bl	80046a4 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 810d 	beq.w	8002cb8 <main+0x50c>
		{
			auto device_state = PUTM_CAN::SF_states::OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b

			PUTM_CAN::FuseData fuses_overall_state { };
 8002aa4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002aac:	2200      	movs	r2, #0
 8002aae:	801a      	strh	r2, [r3, #0]

			for(size_t i = 0; i < 4; i++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002ab6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d819      	bhi.n	8002af2 <main+0x346>
				if(fuses_states[i] != SmartFuseState::Ok)
 8002abe:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8002ac2:	4844      	ldr	r0, [pc, #272]	; (8002bd4 <main+0x428>)
 8002ac4:	f7ff fa37 	bl	8001f36 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <main+0x33a>
					device_state = static_cast<PUTM_CAN::SF_states>(i + 2);
 8002ada:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
			for(size_t i = 0; i < 4; i++)
 8002ae6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002aea:	3301      	adds	r3, #1
 8002aec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002af0:	e7e1      	b.n	8002ab6 <main+0x30a>

			for(auto& sf : channels_currents)
 8002af2:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <main+0x430>)
 8002af4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002af8:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8002afc:	f000 fe61 	bl	80037c2 <_ZNSt5arrayIS_ItLj6EELj4EE5beginEv>
 8002b00:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 8002b04:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8002b08:	f000 fe67 	bl	80037da <_ZNSt5arrayIS_ItLj6EELj4EE3endEv>
 8002b0c:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
 8002b10:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002b14:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d061      	beq.n	8002be0 <main+0x434>
 8002b1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b20:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
				for(auto& ch_current : sf)
 8002b24:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002b28:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002b2c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002b30:	f000 fe60 	bl	80037f4 <_ZNSt5arrayItLj6EE5beginEv>
 8002b34:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
 8002b38:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002b3c:	f000 fe66 	bl	800380c <_ZNSt5arrayItLj6EE3endEv>
 8002b40:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 8002b44:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002b48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d022      	beq.n	8002b96 <main+0x3ea>
 8002b50:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002b54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
					fuses_overall_state.current += ch_current;
 8002b58:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002b5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b78:	b299      	uxth	r1, r3
 8002b7a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002b7e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8002b82:	8813      	ldrh	r3, [r2, #0]
 8002b84:	f361 130f 	bfi	r3, r1, #4, #12
 8002b88:	8013      	strh	r3, [r2, #0]
				for(auto& ch_current : sf)
 8002b8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002b8e:	3302      	adds	r3, #2
 8002b90:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002b94:	e7d6      	b.n	8002b44 <main+0x398>
			for(auto& sf : channels_currents)
 8002b96:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002ba0:	e7b6      	b.n	8002b10 <main+0x364>
 8002ba2:	bf00      	nop
 8002ba4:	2000066c 	.word	0x2000066c
 8002ba8:	20000474 	.word	0x20000474
 8002bac:	20000330 	.word	0x20000330
 8002bb0:	20000340 	.word	0x20000340
 8002bb4:	20000350 	.word	0x20000350
 8002bb8:	20000360 	.word	0x20000360
 8002bbc:	200003b0 	.word	0x200003b0
 8002bc0:	200003c0 	.word	0x200003c0
 8002bc4:	200003d0 	.word	0x200003d0
 8002bc8:	200003e0 	.word	0x200003e0
 8002bcc:	200003f0 	.word	0x200003f0
 8002bd0:	200003a0 	.word	0x200003a0
 8002bd4:	20000428 	.word	0x20000428
 8002bd8:	2000042c 	.word	0x2000042c
 8002bdc:	20000444 	.word	0x20000444

			for(auto& sf : fuses_states)
 8002be0:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <main+0x5f4>)
 8002be2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002be6:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002bea:	f000 fe1c 	bl	8003826 <_ZNSt5arrayI14SmartFuseStateLj4EE5beginEv>
 8002bee:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
 8002bf2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002bf6:	f000 fe22 	bl	800383e <_ZNSt5arrayI14SmartFuseStateLj4EE3endEv>
 8002bfa:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8002bfe:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d028      	beq.n	8002c5c <main+0x4b0>
 8002c0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				fuses_overall_state.ok |= (sf == SmartFuseState::Ok);
 8002c12:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	b25a      	sxtb	r2, r3
 8002c24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	b25b      	sxtb	r3, r3
 8002c36:	4313      	orrs	r3, r2
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	b2d9      	uxtb	r1, r3
 8002c40:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c44:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8002c48:	7813      	ldrb	r3, [r2, #0]
 8002c4a:	f361 0300 	bfi	r3, r1, #0, #1
 8002c4e:	7013      	strb	r3, [r2, #0]
			for(auto& sf : fuses_states)
 8002c50:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c54:	3301      	adds	r3, #1
 8002c56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c5a:	e7d0      	b.n	8002bfe <main+0x452>

			PUTM_CAN::SF_main sf_main
			{
				.fuses_overall_state = fuses_overall_state,
				.device_state =	device_state
			};
 8002c5c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c64:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002c68:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c78:	f897 216b 	ldrb.w	r2, [r7, #363]	; 0x16b
 8002c7c:	709a      	strb	r2, [r3, #2]

			PUTM_CAN::Can_tx_message<PUTM_CAN::SF_main> can_sender(sf_main, PUTM_CAN::can_tx_header_SF_MAIN);
 8002c7e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002c82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c86:	4a47      	ldr	r2, [pc, #284]	; (8002da4 <main+0x5f8>)
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fd73 	bl	8002774 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

			if(can_sender.send(hcan1) != HAL_StatusTypeDef::HAL_OK) led_error.activate();
 8002c8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c92:	4945      	ldr	r1, [pc, #276]	; (8002da8 <main+0x5fc>)
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fddf 	bl	8003858 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <main+0x506>
 8002caa:	4840      	ldr	r0, [pc, #256]	; (8002dac <main+0x600>)
 8002cac:	f7ff fab0 	bl	8002210 <_ZN14GpioOutElement8activateEv>
 8002cb0:	e002      	b.n	8002cb8 <main+0x50c>
			else led_error.deactivate();
 8002cb2:	483e      	ldr	r0, [pc, #248]	; (8002dac <main+0x600>)
 8002cb4:	f7ff fac3 	bl	800223e <_ZN14GpioOutElement10deactivateEv>
		}

		if(timer_can_send_other_frames.checkIfTimedOutAndReset())
 8002cb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 fcf1 	bl	80046a4 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f43f ae79 	beq.w	80029bc <main+0x210>
		{
			auto can_ok = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

			if( sendCanFrameFrontBox() != HAL_OK ) can_ok = HAL_ERROR;
 8002cd0:	f000 f93c 	bl	8002f4c <_Z20sendCanFrameFrontBoxv>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <main+0x53e>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if( sendCanFrameCoolingAndSafety() != HAL_OK ) can_ok = HAL_ERROR;
 8002cea:	f000 f9e5 	bl	80030b8 <_Z28sendCanFrameCoolingAndSafetyv>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <main+0x558>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if( sendCanFrameDV() != HAL_OK ) can_ok = HAL_ERROR;
 8002d04:	f000 fab6 	bl	8003274 <_Z14sendCanFrameDVv>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	2300      	moveq	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <main+0x572>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if( sendCanFrameDV() != HAL_OK ) can_ok = HAL_ERROR;
 8002d1e:	f000 faa9 	bl	8003274 <_Z14sendCanFrameDVv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <main+0x58c>
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if( sendCanFrameWS() != HAL_OK ) can_ok = HAL_ERROR;
 8002d38:	f000 fb7a 	bl	8003430 <_Z14sendCanFrameWSv>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <main+0x5a6>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if( sendCanFrameNucs() != HAL_OK ) can_ok = HAL_ERROR;
 8002d52:	f000 fbfb 	bl	800354c <_Z16sendCanFrameNucsv>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf14      	ite	ne
 8002d5c:	2301      	movne	r3, #1
 8002d5e:	2300      	moveq	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <main+0x5c0>
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			if( sendCanFrameSafety() != HAL_OK ) can_ok = HAL_ERROR;
 8002d6c:	f000 fc50 	bl	8003610 <_Z18sendCanFrameSafetyv>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf14      	ite	ne
 8002d76:	2301      	movne	r3, #1
 8002d78:	2300      	moveq	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <main+0x5da>
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

			if(can_ok != HAL_OK) led_warning_2.activate();
 8002d86:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <main+0x5ea>
 8002d8e:	4808      	ldr	r0, [pc, #32]	; (8002db0 <main+0x604>)
 8002d90:	f7ff fa3e 	bl	8002210 <_ZN14GpioOutElement8activateEv>
 8002d94:	e612      	b.n	80029bc <main+0x210>
			else led_warning_2.deactivate();
 8002d96:	4806      	ldr	r0, [pc, #24]	; (8002db0 <main+0x604>)
 8002d98:	f7ff fa51 	bl	800223e <_ZN14GpioOutElement10deactivateEv>
		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 8002d9c:	e60e      	b.n	80029bc <main+0x210>
 8002d9e:	bf00      	nop
 8002da0:	20000428 	.word	0x20000428
 8002da4:	08009730 	.word	0x08009730
 8002da8:	20000308 	.word	0x20000308
 8002dac:	20000360 	.word	0x20000360
 8002db0:	20000350 	.word	0x20000350

08002db4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b098      	sub	sp, #96	; 0x60
 8002db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dba:	f107 0318 	add.w	r3, r7, #24
 8002dbe:	2248      	movs	r2, #72	; 0x48
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f005 fc64 	bl	8008690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f003 fe48 	bl	8006a6c <HAL_PWREx_ControlVoltageScaling>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002dec:	f000 fc54 	bl	8003698 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002df0:	2302      	movs	r3, #2
 8002df2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dfa:	2340      	movs	r3, #64	; 0x40
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e02:	2302      	movs	r3, #2
 8002e04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002e06:	2302      	movs	r3, #2
 8002e08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002e0a:	231e      	movs	r3, #30
 8002e0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e12:	2302      	movs	r3, #2
 8002e14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e16:	2302      	movs	r3, #2
 8002e18:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e1a:	f107 0318 	add.w	r3, r7, #24
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fec8 	bl	8006bb4 <HAL_RCC_OscConfig>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 8002e34:	f000 fc30 	bl	8003698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e38:	230f      	movs	r3, #15
 8002e3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	2105      	movs	r1, #5
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 fb37 	bl	80074c4 <HAL_RCC_ClockConfig>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8002e66:	f000 fc17 	bl	8003698 <Error_Handler>
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	3760      	adds	r7, #96	; 0x60
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <_Z7initCANv>:

/* USER CODE BEGIN 4 */

void initCAN()
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	can_filtering_config.FilterBank = 0;
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <_Z7initCANv+0x98>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
	can_filtering_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8002e7e:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <_Z7initCANv+0x98>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
	can_filtering_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <_Z7initCANv+0x98>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	61da      	str	r2, [r3, #28]
	can_filtering_config.FilterIdHigh = 0x0000;
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <_Z7initCANv+0x98>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
	can_filtering_config.FilterIdLow = 0x0000;
 8002e90:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <_Z7initCANv+0x98>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	605a      	str	r2, [r3, #4]
	can_filtering_config.FilterMaskIdHigh = 0x0000;
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <_Z7initCANv+0x98>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
	can_filtering_config.FilterMaskIdLow = 0x0000;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <_Z7initCANv+0x98>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
	can_filtering_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <_Z7initCANv+0x98>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
	can_filtering_config.FilterActivation = ENABLE;
 8002ea8:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <_Z7initCANv+0x98>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	621a      	str	r2, [r3, #32]
	can_filtering_config.SlaveStartFilterBank = 14;
 8002eae:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <_Z7initCANv+0x98>)
 8002eb0:	220e      	movs	r2, #14
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24

	if ( HAL_CAN_ConfigFilter(&hcan1, &can_filtering_config) != HAL_OK )
 8002eb4:	4915      	ldr	r1, [pc, #84]	; (8002f0c <_Z7initCANv+0x98>)
 8002eb6:	4816      	ldr	r0, [pc, #88]	; (8002f10 <_Z7initCANv+0x9c>)
 8002eb8:	f002 fd93 	bl	80059e2 <HAL_CAN_ConfigFilter>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <_Z7initCANv+0x5c>
		Error_Handler();
 8002ecc:	f000 fbe4 	bl	8003698 <Error_Handler>

	if ( HAL_CAN_Start(&hcan1) != HAL_OK )
 8002ed0:	480f      	ldr	r0, [pc, #60]	; (8002f10 <_Z7initCANv+0x9c>)
 8002ed2:	f002 fe50 	bl	8005b76 <HAL_CAN_Start>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <_Z7initCANv+0x76>
		Error_Handler();
 8002ee6:	f000 fbd7 	bl	8003698 <Error_Handler>

	if ( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8002eea:	2102      	movs	r1, #2
 8002eec:	4808      	ldr	r0, [pc, #32]	; (8002f10 <_Z7initCANv+0x9c>)
 8002eee:	f003 f873 	bl	8005fd8 <HAL_CAN_ActivateNotification>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <_Z7initCANv+0x92>
		Error_Handler();
 8002f02:	f000 fbc9 	bl	8003698 <Error_Handler>
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000400 	.word	0x20000400
 8002f10:	20000308 	.word	0x20000308

08002f14 <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002f14:	b5b0      	push	{r4, r5, r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4614      	mov	r4, r2
 8002f26:	461d      	mov	r5, r3
 8002f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f30:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3318      	adds	r3, #24
 8002f38:	2208      	movs	r2, #8
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f005 fb99 	bl	8008674 <memcpy>
  }
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bdb0      	pop	{r4, r5, r7, pc}

08002f4c <_Z20sendCanFrameFrontBoxv>:

HAL_StatusTypeDef sendCanFrameFrontBox()
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08c      	sub	sp, #48	; 0x30
 8002f50:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 8002f52:	4b48      	ldr	r3, [pc, #288]	; (8003074 <_Z20sendCanFrameFrontBoxv+0x128>)
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_FrontBox front_box
 8002f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
	{
		.fuse_0_inverter =
		{
			.ok = sf_buff[0].getChannelState(fuse_0_inverter) == ChannelState::Ok,
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe fff5 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fae3 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
		}
	};
 8002f80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f84:	f362 0300 	bfi	r3, r2, #0, #1
 8002f88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[0].getChannelCurrent(fuse_0_inverter)
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe ffdf 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe fe1e 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa6:	b29a      	uxth	r2, r3
	};
 8002fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002faa:	f362 130f 	bfi	r3, r2, #4, #12
 8002fae:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[0].getChannelState(fuse_0_front_box) == ChannelState::Ok,
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe ffcd 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fabb 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2da      	uxtb	r2, r3
	};
 8002fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fd4:	f362 0300 	bfi	r3, r2, #0, #1
 8002fd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.current = sf_buff[0].getChannelCurrent(fuse_0_front_box)
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe ffb7 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fdf6 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff6:	b29a      	uxth	r2, r3
	};
 8002ff8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ffa:	f362 130f 	bfi	r3, r2, #4, #12
 8002ffe:	84fb      	strh	r3, [r7, #38]	; 0x26
			.ok = sf_buff[0].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f7fe ffa5 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800300a:	4603      	mov	r3, r0
 800300c:	2102      	movs	r1, #2
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fa93 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2da      	uxtb	r2, r3
	};
 8003020:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003024:	f362 0300 	bfi	r3, r2, #0, #1
 8003028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe ff8f 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003036:	4603      	mov	r3, r0
 8003038:	2102      	movs	r1, #2
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fdce 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003040:	4603      	mov	r3, r0
 8003042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003046:	b29a      	uxth	r2, r3
	};
 8003048:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800304a:	f362 130f 	bfi	r3, r2, #4, #12
 800304e:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_FrontBox> sender(front_box, PUTM_CAN::can_tx_header_SF_FRONTBOX);
 8003050:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <_Z20sendCanFrameFrontBoxv+0x12c>)
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff5b 	bl	8002f14 <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	4906      	ldr	r1, [pc, #24]	; (800307c <_Z20sendCanFrameFrontBoxv+0x130>)
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fc0c 	bl	8003880 <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3730      	adds	r7, #48	; 0x30
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000474 	.word	0x20000474
 8003078:	08009748 	.word	0x08009748
 800307c:	20000308 	.word	0x20000308

08003080 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8003080:	b5b0      	push	{r4, r5, r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4614      	mov	r4, r2
 8003092:	461d      	mov	r5, r3
 8003094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003098:	e895 0003 	ldmia.w	r5, {r0, r1}
 800309c:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3318      	adds	r3, #24
 80030a4:	2208      	movs	r2, #8
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f005 fae3 	bl	8008674 <memcpy>
  }
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bdb0      	pop	{r4, r5, r7, pc}

080030b8 <_Z28sendCanFrameCoolingAndSafetyv>:

HAL_StatusTypeDef sendCanFrameCoolingAndSafety()
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08c      	sub	sp, #48	; 0x30
 80030bc:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 80030be:	4b5c      	ldr	r3, [pc, #368]	; (8003230 <_Z28sendCanFrameCoolingAndSafetyv+0x178>)
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_CoolingAndVSafety cooling_and_safety
 80030c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	605a      	str	r2, [r3, #4]
	{
		.fuse_1_fan_l =
		{
			.ok = sf_buff[1].getChannelState(fuse_1_fan_l) == ChannelState::Ok,
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	2101      	movs	r1, #1
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe ff3f 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2103      	movs	r1, #3
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fa2d 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[2].getChannelCurrent(fuse_0_tsal_assi)
		}
	};
 80030ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030f0:	f362 0300 	bfi	r3, r2, #0, #1
 80030f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[1].getChannelCurrent(fuse_0_inverter)
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe ff29 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003102:	4603      	mov	r3, r0
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe fd68 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 800310c:	4603      	mov	r3, r0
 800310e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003112:	b29a      	uxth	r2, r3
	};
 8003114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003116:	f362 130f 	bfi	r3, r2, #4, #12
 800311a:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[1].getChannelState(fuse_1_fan_r) == ChannelState::Ok,
 800311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe ff17 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003126:	4603      	mov	r3, r0
 8003128:	2104      	movs	r1, #4
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fa05 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2da      	uxtb	r2, r3
	};
 800313c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003140:	f362 0300 	bfi	r3, r2, #0, #1
 8003144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.current = sf_buff[1].getChannelCurrent(fuse_1_fan_r)
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	2101      	movs	r1, #1
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe ff01 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003152:	4603      	mov	r3, r0
 8003154:	2104      	movs	r1, #4
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe fd40 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 800315c:	4603      	mov	r3, r0
 800315e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003162:	b29a      	uxth	r2, r3
	};
 8003164:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003166:	f362 130f 	bfi	r3, r2, #4, #12
 800316a:	84fb      	strh	r3, [r7, #38]	; 0x26
			.ok = sf_buff[3].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	2103      	movs	r1, #3
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe feef 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003176:	4603      	mov	r3, r0
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe f9dd 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2da      	uxtb	r2, r3
	};
 800318c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003190:	f362 0300 	bfi	r3, r2, #0, #1
 8003194:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			.current = sf_buff[3].getChannelCurrent(fuse_0_tsal_assi)
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	2103      	movs	r1, #3
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fed9 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2102      	movs	r1, #2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe fd18 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b2:	b29a      	uxth	r2, r3
	};
 80031b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031b6:	f362 130f 	bfi	r3, r2, #4, #12
 80031ba:	853b      	strh	r3, [r7, #40]	; 0x28
			.ok = sf_buff[2].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	2102      	movs	r1, #2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe fec7 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2102      	movs	r1, #2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe f9b5 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2da      	uxtb	r2, r3
	};
 80031dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80031e0:	f362 0300 	bfi	r3, r2, #0, #1
 80031e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[2].getChannelCurrent(fuse_0_tsal_assi)
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	2102      	movs	r1, #2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe feb1 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2102      	movs	r1, #2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fcf0 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003202:	b29a      	uxth	r2, r3
	};
 8003204:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003206:	f362 130f 	bfi	r3, r2, #4, #12
 800320a:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_CoolingAndVSafety> sender(cooling_and_safety, PUTM_CAN::can_tx_header_SF_FRONTBOX);
 800320c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003210:	1d3b      	adds	r3, r7, #4
 8003212:	4a08      	ldr	r2, [pc, #32]	; (8003234 <_Z28sendCanFrameCoolingAndSafetyv+0x17c>)
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff33 	bl	8003080 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	4906      	ldr	r1, [pc, #24]	; (8003238 <_Z28sendCanFrameCoolingAndSafetyv+0x180>)
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fb42 	bl	80038a8 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef>
 8003224:	4603      	mov	r3, r0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3730      	adds	r7, #48	; 0x30
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000474 	.word	0x20000474
 8003234:	08009748 	.word	0x08009748
 8003238:	20000308 	.word	0x20000308

0800323c <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800323c:	b5b0      	push	{r4, r5, r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4614      	mov	r4, r2
 800324e:	461d      	mov	r5, r3
 8003250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003254:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003258:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3318      	adds	r3, #24
 8003260:	2208      	movs	r2, #8
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	4618      	mov	r0, r3
 8003266:	f005 fa05 	bl	8008674 <memcpy>
  }
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bdb0      	pop	{r4, r5, r7, pc}

08003274 <_Z14sendCanFrameDVv>:

HAL_StatusTypeDef sendCanFrameDV()
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08c      	sub	sp, #48	; 0x30
 8003278:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 800327a:	4b5c      	ldr	r3, [pc, #368]	; (80033ec <_Z14sendCanFrameDVv+0x178>)
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_DV dv
 800327e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]
	{
		.fuse_0_box_dv =
		{
			.ok = sf_buff[2].getChannelState(fuse_2_box_dv) == ChannelState::Ok,
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fe61 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003292:	4603      	mov	r3, r0
 8003294:	2104      	movs	r1, #4
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe f94f 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[1].getChannelCurrent(fuse_1_dash)
		}
	};
 80032a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032ac:	f362 0300 	bfi	r3, r2, #0, #1
 80032b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[2].getChannelCurrent(fuse_2_box_dv)
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	2102      	movs	r1, #2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe fe4b 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80032be:	4603      	mov	r3, r0
 80032c0:	2104      	movs	r1, #4
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fc8a 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ce:	b29a      	uxth	r2, r3
	};
 80032d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032d2:	f362 130f 	bfi	r3, r2, #4, #12
 80032d6:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[0].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fe39 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2102      	movs	r1, #2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe f927 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf0c      	ite	eq
 80032f2:	2301      	moveq	r3, #1
 80032f4:	2300      	movne	r3, #0
 80032f6:	b2da      	uxtb	r2, r3
	};
 80032f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80032fc:	f362 0300 	bfi	r3, r2, #0, #1
 8003300:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fe23 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800330e:	4603      	mov	r3, r0
 8003310:	2102      	movs	r1, #2
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fc62 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003318:	4603      	mov	r3, r0
 800331a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331e:	b29a      	uxth	r2, r3
	};
 8003320:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003322:	f362 130f 	bfi	r3, r2, #4, #12
 8003326:	84fb      	strh	r3, [r7, #38]	; 0x26
			.ok = sf_buff[1].getChannelState(fuse_1_wheel_speed_1) == ChannelState::Ok,
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fe11 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003332:	4603      	mov	r3, r0
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe f8ff 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2da      	uxtb	r2, r3
	};
 8003348:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800334c:	f362 0300 	bfi	r3, r2, #0, #1
 8003350:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			.current = sf_buff[1].getChannelCurrent(fuse_1_wheel_speed_1)
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	2101      	movs	r1, #1
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fdfb 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800335e:	4603      	mov	r3, r0
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fc3a 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003368:	4603      	mov	r3, r0
 800336a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336e:	b29a      	uxth	r2, r3
	};
 8003370:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003372:	f362 130f 	bfi	r3, r2, #4, #12
 8003376:	853b      	strh	r3, [r7, #40]	; 0x28
			.ok = sf_buff[1].getChannelState(fuse_1_dash) == ChannelState::Ok,
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	2101      	movs	r1, #1
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe fde9 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003382:	4603      	mov	r3, r0
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe f8d7 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	bf0c      	ite	eq
 8003392:	2301      	moveq	r3, #1
 8003394:	2300      	movne	r3, #0
 8003396:	b2da      	uxtb	r2, r3
	};
 8003398:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800339c:	f362 0300 	bfi	r3, r2, #0, #1
 80033a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[1].getChannelCurrent(fuse_1_dash)
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe fdd3 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2101      	movs	r1, #1
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fc12 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033be:	b29a      	uxth	r2, r3
	};
 80033c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033c2:	f362 130f 	bfi	r3, r2, #4, #12
 80033c6:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_DV> sender(dv, PUTM_CAN::can_tx_header_SF_DV);
 80033c8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	4a08      	ldr	r2, [pc, #32]	; (80033f0 <_Z14sendCanFrameDVv+0x17c>)
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff33 	bl	800323c <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	4906      	ldr	r1, [pc, #24]	; (80033f4 <_Z14sendCanFrameDVv+0x180>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fa78 	bl	80038d0 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3730      	adds	r7, #48	; 0x30
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000474 	.word	0x20000474
 80033f0:	08009760 	.word	0x08009760
 80033f4:	20000308 	.word	0x20000308

080033f8 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80033f8:	b5b0      	push	{r4, r5, r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4614      	mov	r4, r2
 800340a:	461d      	mov	r5, r3
 800340c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800340e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003410:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003414:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3318      	adds	r3, #24
 800341c:	2208      	movs	r2, #8
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f005 f927 	bl	8008674 <memcpy>
  }
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bdb0      	pop	{r4, r5, r7, pc}

08003430 <_Z14sendCanFrameWSv>:

HAL_StatusTypeDef sendCanFrameWS()
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	; 0x30
 8003434:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 8003436:	4b34      	ldr	r3, [pc, #208]	; (8003508 <_Z14sendCanFrameWSv+0xd8>)
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_WS ws
 800343a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
	{
		.fuse_1_ws_rl =
		{
			.ok = sf_buff[1].getChannelState(fuse_1_wheel_speed_1) == ChannelState::Ok,
 8003444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003446:	2101      	movs	r1, #1
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe fd83 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800344e:	4603      	mov	r3, r0
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe f871 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[2].getChannelCurrent(fuse_2_wheel_speed_2)
		}
	};
 8003464:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003468:	f362 0300 	bfi	r3, r2, #0, #1
 800346c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[1].getChannelCurrent(fuse_1_wheel_speed_1)
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	2101      	movs	r1, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fd6d 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800347a:	4603      	mov	r3, r0
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe fbac 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003484:	4603      	mov	r3, r0
 8003486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348a:	b29a      	uxth	r2, r3
	};
 800348c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800348e:	f362 130f 	bfi	r3, r2, #4, #12
 8003492:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[2].getChannelState(fuse_2_wheel_speed_2) == ChannelState::Ok,
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	2102      	movs	r1, #2
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe fd5b 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800349e:	4603      	mov	r3, r0
 80034a0:	2103      	movs	r1, #3
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe f849 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2da      	uxtb	r2, r3
	};
 80034b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80034b8:	f362 0300 	bfi	r3, r2, #0, #1
 80034bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[2].getChannelCurrent(fuse_2_wheel_speed_2)
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	2102      	movs	r1, #2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fd45 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2103      	movs	r1, #3
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fb84 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034da:	b29a      	uxth	r2, r3
	};
 80034dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034de:	f362 130f 	bfi	r3, r2, #4, #12
 80034e2:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_WS> sender(ws, PUTM_CAN::can_tx_header_SF_WS);
 80034e4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <_Z14sendCanFrameWSv+0xdc>)
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff83 	bl	80033f8 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	4906      	ldr	r1, [pc, #24]	; (8003510 <_Z14sendCanFrameWSv+0xe0>)
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f9fe 	bl	80038f8 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3730      	adds	r7, #48	; 0x30
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000474 	.word	0x20000474
 800350c:	08009778 	.word	0x08009778
 8003510:	20000308 	.word	0x20000308

08003514 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8003514:	b4b0      	push	{r4, r5, r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4614      	mov	r4, r2
 8003526:	461d      	mov	r5, r3
 8003528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800352a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800352c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003530:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3318      	adds	r3, #24
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	601a      	str	r2, [r3, #0]
  }
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bcb0      	pop	{r4, r5, r7}
 8003548:	4770      	bx	lr
	...

0800354c <_Z16sendCanFrameNucsv>:

HAL_StatusTypeDef sendCanFrameNucs()
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 8003552:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <_Z16sendCanFrameNucsv+0x80>)
 8003554:	627b      	str	r3, [r7, #36]	; 0x24

	PUTM_CAN::SF_NUCS nucs
 8003556:	2300      	movs	r3, #0
 8003558:	623b      	str	r3, [r7, #32]
	{
		.fuse_2_jetson =
		{
			.ok = sf_buff[2].getChannelState(fuse_2_jetson) == ChannelState::Ok,
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	2102      	movs	r1, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe fcf8 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003564:	4603      	mov	r3, r0
 8003566:	2105      	movs	r1, #5
 8003568:	4618      	mov	r0, r3
 800356a:	f7fd ffe6 	bl	800153a <_ZN9SmartFuse15getChannelStateE7Channel>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = 0
		}
	};
 800357a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800357e:	f362 0300 	bfi	r3, r2, #0, #1
 8003582:	f887 3020 	strb.w	r3, [r7, #32]
			.current = sf_buff[2].getChannelCurrent(fuse_2_jetson)
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	2102      	movs	r1, #2
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fce2 	bl	8001f54 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003590:	4603      	mov	r3, r0
 8003592:	2105      	movs	r1, #5
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fb21 	bl	8001bdc <_ZN9SmartFuse17getChannelCurrentE7Channel>
 800359a:	4603      	mov	r3, r0
 800359c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a0:	b29a      	uxth	r2, r3
	};
 80035a2:	8c3b      	ldrh	r3, [r7, #32]
 80035a4:	f362 130f 	bfi	r3, r2, #4, #12
 80035a8:	843b      	strh	r3, [r7, #32]

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_NUCS> sender(nucs, PUTM_CAN::can_tx_header_SF_NUCS);
 80035aa:	f107 0120 	add.w	r1, r7, #32
 80035ae:	463b      	mov	r3, r7
 80035b0:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <_Z16sendCanFrameNucsv+0x84>)
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff ffae 	bl	8003514 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 80035b8:	463b      	mov	r3, r7
 80035ba:	4906      	ldr	r1, [pc, #24]	; (80035d4 <_Z16sendCanFrameNucsv+0x88>)
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f9af 	bl	8003920 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef>
 80035c2:	4603      	mov	r3, r0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3728      	adds	r7, #40	; 0x28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000474 	.word	0x20000474
 80035d0:	08009790 	.word	0x08009790
 80035d4:	20000308 	.word	0x20000308

080035d8 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4614      	mov	r4, r2
 80035ea:	461d      	mov	r5, r3
 80035ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80035f4:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3318      	adds	r3, #24
 80035fc:	2205      	movs	r2, #5
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	4618      	mov	r0, r3
 8003602:	f005 f837 	bl	8008674 <memcpy>
  }
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bdb0      	pop	{r4, r5, r7, pc}

08003610 <_Z18sendCanFrameSafetyv>:

HAL_StatusTypeDef sendCanFrameSafety()
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <_Z18sendCanFrameSafetyv+0x68>)
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_safety safety
	{
		.firewall = safety_ams.isActive(),
 800361a:	4818      	ldr	r0, [pc, #96]	; (800367c <_Z18sendCanFrameSafetyv+0x6c>)
 800361c:	f7fe fe3e 	bl	800229c <_ZN13GpioInElement8isActiveEv>
 8003620:	4603      	mov	r3, r0
		.hvd = safety_hvd.isActive(),
		.inverter = safety_spare.isActive(),
		.dv = safety_td.isActive(),
		.tsms = safety_tms.isActive()
	};
 8003622:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		.hvd = safety_hvd.isActive(),
 8003626:	4816      	ldr	r0, [pc, #88]	; (8003680 <_Z18sendCanFrameSafetyv+0x70>)
 8003628:	f7fe fe38 	bl	800229c <_ZN13GpioInElement8isActiveEv>
 800362c:	4603      	mov	r3, r0
	};
 800362e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		.inverter = safety_spare.isActive(),
 8003632:	4814      	ldr	r0, [pc, #80]	; (8003684 <_Z18sendCanFrameSafetyv+0x74>)
 8003634:	f7fe fe32 	bl	800229c <_ZN13GpioInElement8isActiveEv>
 8003638:	4603      	mov	r3, r0
	};
 800363a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		.dv = safety_td.isActive(),
 800363e:	4812      	ldr	r0, [pc, #72]	; (8003688 <_Z18sendCanFrameSafetyv+0x78>)
 8003640:	f7fe fe2c 	bl	800229c <_ZN13GpioInElement8isActiveEv>
 8003644:	4603      	mov	r3, r0
	};
 8003646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		.tsms = safety_tms.isActive()
 800364a:	4810      	ldr	r0, [pc, #64]	; (800368c <_Z18sendCanFrameSafetyv+0x7c>)
 800364c:	f7fe fe26 	bl	800229c <_ZN13GpioInElement8isActiveEv>
 8003650:	4603      	mov	r3, r0
	};
 8003652:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_safety> sender(safety, PUTM_CAN::can_tx_header_SF_SAFETY);
 8003656:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <_Z18sendCanFrameSafetyv+0x80>)
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff ffba 	bl	80035d8 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 8003664:	1d3b      	adds	r3, r7, #4
 8003666:	490b      	ldr	r1, [pc, #44]	; (8003694 <_Z18sendCanFrameSafetyv+0x84>)
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f96d 	bl	8003948 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>
 800366e:	4603      	mov	r3, r0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3730      	adds	r7, #48	; 0x30
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000474 	.word	0x20000474
 800367c:	200003b0 	.word	0x200003b0
 8003680:	200003f0 	.word	0x200003f0
 8003684:	200003c0 	.word	0x200003c0
 8003688:	200003e0 	.word	0x200003e0
 800368c:	200003d0 	.word	0x200003d0
 8003690:	080097a8 	.word	0x080097a8
 8003694:	20000308 	.word	0x20000308

08003698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	led_ok.deactivate();
 800369c:	4807      	ldr	r0, [pc, #28]	; (80036bc <Error_Handler+0x24>)
 800369e:	f7fe fdce 	bl	800223e <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 80036a2:	4807      	ldr	r0, [pc, #28]	; (80036c0 <Error_Handler+0x28>)
 80036a4:	f7fe fdcb 	bl	800223e <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 80036a8:	4806      	ldr	r0, [pc, #24]	; (80036c4 <Error_Handler+0x2c>)
 80036aa:	f7fe fdc8 	bl	800223e <_ZN14GpioOutElement10deactivateEv>
	led_error.activate();
 80036ae:	4806      	ldr	r0, [pc, #24]	; (80036c8 <Error_Handler+0x30>)
 80036b0:	f7fe fdae 	bl	8002210 <_ZN14GpioOutElement8activateEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036b4:	b672      	cpsid	i
}
 80036b6:	bf00      	nop

	__disable_irq();
	while (1) {}
 80036b8:	e7fe      	b.n	80036b8 <Error_Handler+0x20>
 80036ba:	bf00      	nop
 80036bc:	20000330 	.word	0x20000330
 80036c0:	20000340 	.word	0x20000340
 80036c4:	20000350 	.word	0x20000350
 80036c8:	20000360 	.word	0x20000360

080036cc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>:
      begin() noexcept
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f94b 	bl	8003970 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 80036da:	4603      	mov	r3, r0
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>:
      end() noexcept
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f93f 	bl	8003970 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 80036f2:	4603      	mov	r3, r0
 80036f4:	3384      	adds	r3, #132	; 0x84
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <_ZN3etl7ivectorI9SmartFuseED1Ev>:
  class ivector : public etl::vector_base
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe ff0c 	bl	8002526 <_ZN3etl11vector_baseD1Ev>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	330c      	adds	r3, #12
 8003726:	2204      	movs	r2, #4
 8003728:	4619      	mov	r1, r3
 800372a:	f000 f92e 	bl	800398a <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>
    {
      this->initialise();
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f940 	bl	80039b6 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f947 	bl	80039de <_ZN3etl7ivectorI9SmartFuseE5clearEv>
    }
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff ffd3 	bl	80036fe <_ZN3etl7ivectorI9SmartFuseED1Ev>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_>:
    ETL_CONSTEXPR14 delegate(const TLambda& instance)
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
    {
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fabe 	bl	8001cf2 <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>
      assign((void*)(&instance), lambda_stub<TLambda>);
 8003776:	4a05      	ldr	r2, [pc, #20]	; (800378c <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_+0x28>)
 8003778:	6839      	ldr	r1, [r7, #0]
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f93a 	bl	80039f4 <_ZN3etl8delegateIFvP9SmartFuseEE6assignEPvPFvS5_S2_E>
    }
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	08003a19 	.word	0x08003a19

08003790 <_ZNSt5arrayI13GpioInElementLj5EE5beginEv>:
      begin() noexcept
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f952 	bl	8003a42 <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>
 800379e:	4603      	mov	r3, r0
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <_ZNSt5arrayI13GpioInElementLj5EE3endEv>:
      end() noexcept
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f946 	bl	8003a42 <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>
 80037b6:	4603      	mov	r3, r0
 80037b8:	3350      	adds	r3, #80	; 0x50
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <_ZNSt5arrayIS_ItLj6EELj4EE5beginEv>:
      begin() noexcept
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f946 	bl	8003a5c <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_ZNSt5arrayIS_ItLj6EELj4EE3endEv>:
      end() noexcept
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f93a 	bl	8003a5c <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>
 80037e8:	4603      	mov	r3, r0
 80037ea:	3330      	adds	r3, #48	; 0x30
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_ZNSt5arrayItLj6EE5beginEv>:
      begin() noexcept
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f93a 	bl	8003a76 <_ZNSt5arrayItLj6EE4dataEv>
 8003802:	4603      	mov	r3, r0
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_ZNSt5arrayItLj6EE3endEv>:
      end() noexcept
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f92e 	bl	8003a76 <_ZNSt5arrayItLj6EE4dataEv>
 800381a:	4603      	mov	r3, r0
 800381c:	330c      	adds	r3, #12
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <_ZNSt5arrayI14SmartFuseStateLj4EE5beginEv>:
      begin() noexcept
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f92e 	bl	8003a90 <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>
 8003834:	4603      	mov	r3, r0
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <_ZNSt5arrayI14SmartFuseStateLj4EE3endEv>:
      end() noexcept
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f922 	bl	8003a90 <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>
 800384c:	4603      	mov	r3, r0
 800384e:	3304      	adds	r3, #4
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f103 0218 	add.w	r2, r3, #24
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 800386c:	6838      	ldr	r0, [r7, #0]
 800386e:	f002 f9c6 	bl	8005bfe <HAL_CAN_AddTxMessage>
 8003872:	4603      	mov	r3, r0
  }
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000650 	.word	0x20000650

08003880 <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f103 0218 	add.w	r2, r3, #24
 8003892:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003894:	6838      	ldr	r0, [r7, #0]
 8003896:	f002 f9b2 	bl	8005bfe <HAL_CAN_AddTxMessage>
 800389a:	4603      	mov	r3, r0
  }
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000654 	.word	0x20000654

080038a8 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f103 0218 	add.w	r2, r3, #24
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef+0x24>)
 80038bc:	6838      	ldr	r0, [r7, #0]
 80038be:	f002 f99e 	bl	8005bfe <HAL_CAN_AddTxMessage>
 80038c2:	4603      	mov	r3, r0
  }
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000658 	.word	0x20000658

080038d0 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f103 0218 	add.w	r2, r3, #24
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef+0x24>)
 80038e4:	6838      	ldr	r0, [r7, #0]
 80038e6:	f002 f98a 	bl	8005bfe <HAL_CAN_AddTxMessage>
 80038ea:	4603      	mov	r3, r0
  }
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2000065c 	.word	0x2000065c

080038f8 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f103 0218 	add.w	r2, r3, #24
 800390a:	4b04      	ldr	r3, [pc, #16]	; (800391c <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef+0x24>)
 800390c:	6838      	ldr	r0, [r7, #0]
 800390e:	f002 f976 	bl	8005bfe <HAL_CAN_AddTxMessage>
 8003912:	4603      	mov	r3, r0
  }
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000660 	.word	0x20000660

08003920 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f103 0218 	add.w	r2, r3, #24
 8003932:	4b04      	ldr	r3, [pc, #16]	; (8003944 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003934:	6838      	ldr	r0, [r7, #0]
 8003936:	f002 f962 	bl	8005bfe <HAL_CAN_AddTxMessage>
 800393a:	4603      	mov	r3, r0
  }
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000664 	.word	0x20000664

08003948 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f103 0218 	add.w	r2, r3, #24
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef+0x24>)
 800395c:	6838      	ldr	r0, [r7, #0]
 800395e:	f002 f94e 	bl	8005bfe <HAL_CAN_AddTxMessage>
 8003962:	4603      	mov	r3, r0
  }
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000668 	.word	0x20000668

08003970 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>:
      data() noexcept
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f895 	bl	8003aaa <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>
 8003980:	4603      	mov	r3, r0
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fdb4 	bl	8002508 <_ZN3etl11vector_baseC1Ej>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	609a      	str	r2, [r3, #8]
    }
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>:
    void initialise()
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f000 f879 	bl	8003ac0 <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>
      p_end = p_buffer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	609a      	str	r2, [r3, #8]
    }
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <_ZN3etl7ivectorI9SmartFuseE5clearEv>:
    void clear()
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
      initialise();
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ffe5 	bl	80039b6 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <_ZN3etl8delegateIFvP9SmartFuseEE6assignEPvPFvS5_S2_E>:
    }

    //*************************************************************************
    /// Assign from an object and stub.
    //*************************************************************************
    ETL_CONSTEXPR14 void assign(void* object, stub_type stub)
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
    {
      invocation.object = object;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	601a      	str	r2, [r3, #0]
      invocation.stub   = stub;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]
    }
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_ZN3etl8delegateIFvP9SmartFuseEE11lambda_stubIZ4mainEUlS2_E_EEvPvS2_>:

    //*************************************************************************
    /// Stub call for a lambda or functor function.
    //*************************************************************************
    template <typename TLambda>
    static ETL_CONSTEXPR14 TReturn lambda_stub(void* object, TParams... arg)
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
    {
      TLambda* p = static_cast<TLambda*>(object);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	60fb      	str	r3, [r7, #12]
      return (p->operator())(etl::forward<TParams>(arg)...);
 8003a26:	463b      	mov	r3, r7
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe fb1d 	bl	8002068 <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4619      	mov	r1, r3
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f7fe fe2f 	bl	8002698 <_ZZ4mainENKUlP9SmartFuseE_clES0_>
 8003a3a:	bf00      	nop
    }
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>:
      data() noexcept
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 f842 	bl	8003ad6 <_ZNSt14__array_traitsI13GpioInElementLj5EE6_S_ptrERA5_KS0_>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>:
      data() noexcept
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f840 	bl	8003aec <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_ptrERA4_KS1_>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <_ZNSt5arrayItLj6EE4dataEv>:
      data() noexcept
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f83e 	bl	8003b02 <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>:
      data() noexcept
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f83c 	bl	8003b18 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_ptrERA4_KS0_>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>:
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  typename etl::enable_if<etl::is_trivially_destructible<typename etl::iterator_traits<TIterator>::value_type>::value, void>::type
    destroy(TIterator /*i_begin*/, TIterator /*i_end*/)
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  {
  }
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <_ZNSt14__array_traitsI13GpioInElementLj5EE6_S_ptrERA5_KS0_>:
      _S_ptr(const _Type& __t) noexcept
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_ptrERA4_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>:
      _S_ptr(const _Type& __t) noexcept
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_ptrERA4_KS0_>:
      _S_ptr(const _Type& __t) noexcept
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <_ZN16SmartFuseHandlerILm4EED1Ev>:
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fe01 	bl	8003740 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_Z41__static_initialization_and_destruction_0ii>:

  /* USER CODE END Error_Handler_Debug */
}
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d157      	bne.n	8003c08 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d152      	bne.n	8003c08 <_Z41__static_initialization_and_destruction_0ii+0xc0>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 8003b62:	2301      	movs	r3, #1
 8003b64:	2201      	movs	r2, #1
 8003b66:	4943      	ldr	r1, [pc, #268]	; (8003c74 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003b68:	4843      	ldr	r0, [pc, #268]	; (8003c78 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003b6a:	f7fe fb39 	bl	80021e0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 8003b6e:	2301      	movs	r3, #1
 8003b70:	2202      	movs	r2, #2
 8003b72:	4940      	ldr	r1, [pc, #256]	; (8003c74 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003b74:	4841      	ldr	r0, [pc, #260]	; (8003c7c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8003b76:	f7fe fb33 	bl	80021e0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	493d      	ldr	r1, [pc, #244]	; (8003c74 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003b80:	483f      	ldr	r0, [pc, #252]	; (8003c80 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8003b82:	f7fe fb2d 	bl	80021e0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 8003b86:	2301      	movs	r3, #1
 8003b88:	2208      	movs	r2, #8
 8003b8a:	493a      	ldr	r1, [pc, #232]	; (8003c74 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003b8c:	483d      	ldr	r0, [pc, #244]	; (8003c84 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003b8e:	f7fe fb27 	bl	80021e0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 8003b92:	2300      	movs	r3, #0
 8003b94:	2220      	movs	r2, #32
 8003b96:	493c      	ldr	r1, [pc, #240]	; (8003c88 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003b98:	483c      	ldr	r0, [pc, #240]	; (8003c8c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003b9a:	f7fe fb21 	bl	80021e0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2280      	movs	r2, #128	; 0x80
 8003ba2:	4939      	ldr	r1, [pc, #228]	; (8003c88 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003ba4:	483a      	ldr	r0, [pc, #232]	; (8003c90 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8003ba6:	f7fe fb1b 	bl	80021e0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003baa:	2300      	movs	r3, #0
 8003bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bb0:	4935      	ldr	r1, [pc, #212]	; (8003c88 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003bb2:	4838      	ldr	r0, [pc, #224]	; (8003c94 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8003bb4:	f7fe fb14 	bl	80021e0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement enable_mosfets(GPIOB, GPIO_PIN_9, false);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bbe:	4932      	ldr	r1, [pc, #200]	; (8003c88 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003bc0:	4835      	ldr	r0, [pc, #212]	; (8003c98 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8003bc2:	f7fe fb0d 	bl	80021e0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_ams(GPIOB, GPIO_PIN_0, true);
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	2201      	movs	r2, #1
 8003bca:	492f      	ldr	r1, [pc, #188]	; (8003c88 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003bcc:	4833      	ldr	r0, [pc, #204]	; (8003c9c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8003bce:	f7fe fb4d 	bl	800226c <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_spare(GPIOB, GPIO_PIN_1, true);
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	492c      	ldr	r1, [pc, #176]	; (8003c88 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003bd8:	4831      	ldr	r0, [pc, #196]	; (8003ca0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8003bda:	f7fe fb47 	bl	800226c <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_tms(GPIOB, GPIO_PIN_2, true);
 8003bde:	2301      	movs	r3, #1
 8003be0:	2204      	movs	r2, #4
 8003be2:	4929      	ldr	r1, [pc, #164]	; (8003c88 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003be4:	482f      	ldr	r0, [pc, #188]	; (8003ca4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8003be6:	f7fe fb41 	bl	800226c <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_td(GPIOB, GPIO_PIN_4, true);
 8003bea:	2301      	movs	r3, #1
 8003bec:	2210      	movs	r2, #16
 8003bee:	4926      	ldr	r1, [pc, #152]	; (8003c88 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003bf0:	482d      	ldr	r0, [pc, #180]	; (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8003bf2:	f7fe fb3b 	bl	800226c <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_hvd(GPIOB, GPIO_PIN_6, true);
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	2240      	movs	r2, #64	; 0x40
 8003bfa:	4923      	ldr	r1, [pc, #140]	; (8003c88 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003bfc:	482b      	ldr	r0, [pc, #172]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8003bfe:	f7fe fb35 	bl	800226c <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
SmartFuseHandler < number_of_fuses > sf_handler;
 8003c02:	482b      	ldr	r0, [pc, #172]	; (8003cb0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8003c04:	f7fe fd3a 	bl	800267c <_ZN16SmartFuseHandlerILm4EEC1Ev>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d12e      	bne.n	8003c6c <_Z41__static_initialization_and_destruction_0ii+0x124>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d129      	bne.n	8003c6c <_Z41__static_initialization_and_destruction_0ii+0x124>
 8003c18:	4825      	ldr	r0, [pc, #148]	; (8003cb0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8003c1a:	f7ff ff88 	bl	8003b2e <_ZN16SmartFuseHandlerILm4EED1Ev>
GpioInElement safety_hvd(GPIOB, GPIO_PIN_6, true);
 8003c1e:	4823      	ldr	r0, [pc, #140]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8003c20:	f7fe fb5c 	bl	80022dc <_ZN13GpioInElementD1Ev>
GpioInElement safety_td(GPIOB, GPIO_PIN_4, true);
 8003c24:	4820      	ldr	r0, [pc, #128]	; (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8003c26:	f7fe fb59 	bl	80022dc <_ZN13GpioInElementD1Ev>
GpioInElement safety_tms(GPIOB, GPIO_PIN_2, true);
 8003c2a:	481e      	ldr	r0, [pc, #120]	; (8003ca4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8003c2c:	f7fe fb56 	bl	80022dc <_ZN13GpioInElementD1Ev>
GpioInElement safety_spare(GPIOB, GPIO_PIN_1, true);
 8003c30:	481b      	ldr	r0, [pc, #108]	; (8003ca0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8003c32:	f7fe fb53 	bl	80022dc <_ZN13GpioInElementD1Ev>
GpioInElement safety_ams(GPIOB, GPIO_PIN_0, true);
 8003c36:	4819      	ldr	r0, [pc, #100]	; (8003c9c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8003c38:	f7fe fb50 	bl	80022dc <_ZN13GpioInElementD1Ev>
GpioOutElement enable_mosfets(GPIOB, GPIO_PIN_9, false);
 8003c3c:	4816      	ldr	r0, [pc, #88]	; (8003c98 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8003c3e:	f7fe fb6f 	bl	8002320 <_ZN14GpioOutElementD1Ev>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003c42:	4814      	ldr	r0, [pc, #80]	; (8003c94 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8003c44:	f7fe fb6c 	bl	8002320 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003c48:	4811      	ldr	r0, [pc, #68]	; (8003c90 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8003c4a:	f7fe fb69 	bl	8002320 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 8003c4e:	480f      	ldr	r0, [pc, #60]	; (8003c8c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003c50:	f7fe fb66 	bl	8002320 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 8003c54:	480b      	ldr	r0, [pc, #44]	; (8003c84 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003c56:	f7fe fb63 	bl	8002320 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 8003c5a:	4809      	ldr	r0, [pc, #36]	; (8003c80 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8003c5c:	f7fe fb60 	bl	8002320 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 8003c60:	4806      	ldr	r0, [pc, #24]	; (8003c7c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8003c62:	f7fe fb5d 	bl	8002320 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 8003c66:	4804      	ldr	r0, [pc, #16]	; (8003c78 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003c68:	f7fe fb5a 	bl	8002320 <_ZN14GpioOutElementD1Ev>
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	48000800 	.word	0x48000800
 8003c78:	20000330 	.word	0x20000330
 8003c7c:	20000340 	.word	0x20000340
 8003c80:	20000350 	.word	0x20000350
 8003c84:	20000360 	.word	0x20000360
 8003c88:	48000400 	.word	0x48000400
 8003c8c:	20000370 	.word	0x20000370
 8003c90:	20000380 	.word	0x20000380
 8003c94:	20000390 	.word	0x20000390
 8003c98:	200003a0 	.word	0x200003a0
 8003c9c:	200003b0 	.word	0x200003b0
 8003ca0:	200003c0 	.word	0x200003c0
 8003ca4:	200003d0 	.word	0x200003d0
 8003ca8:	200003e0 	.word	0x200003e0
 8003cac:	200003f0 	.word	0x200003f0
 8003cb0:	20000474 	.word	0x20000474

08003cb4 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	7993      	ldrb	r3, [r2, #6]
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	1dd8      	adds	r0, r3, #7
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	331c      	adds	r3, #28
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f004 fcce 	bl	8008674 <memcpy>
  }
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	7993      	ldrb	r3, [r2, #6]
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3307      	adds	r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	321c      	adds	r2, #28
 8003cfc:	8812      	ldrh	r2, [r2, #0]
 8003cfe:	b292      	uxth	r2, r2
 8003d00:	801a      	strh	r2, [r3, #0]
  }
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	7993      	ldrb	r3, [r2, #6]
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3307      	adds	r3, #7
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	321c      	adds	r2, #28
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	601a      	str	r2, [r3, #0]
  }
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	7993      	ldrb	r3, [r2, #6]
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	1dd8      	adds	r0, r3, #7
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	331c      	adds	r3, #28
 8003d56:	2206      	movs	r2, #6
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f004 fc8b 	bl	8008674 <memcpy>
  }
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	7993      	ldrb	r3, [r2, #6]
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	1dd8      	adds	r0, r3, #7
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	331c      	adds	r3, #28
 8003d82:	2206      	movs	r2, #6
 8003d84:	4619      	mov	r1, r3
 8003d86:	f004 fc75 	bl	8008674 <memcpy>
  }
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	7993      	ldrb	r3, [r2, #6]
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	1dd8      	adds	r0, r3, #7
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	331c      	adds	r3, #28
 8003dae:	2206      	movs	r2, #6
 8003db0:	4619      	mov	r1, r3
 8003db2:	f004 fc5f 	bl	8008674 <memcpy>
  }
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	7993      	ldrb	r3, [r2, #6]
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	1dd8      	adds	r0, r3, #7
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	331c      	adds	r3, #28
 8003dda:	2208      	movs	r2, #8
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f004 fc49 	bl	8008674 <memcpy>
  }
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	7993      	ldrb	r3, [r2, #6]
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3307      	adds	r3, #7
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	321c      	adds	r2, #28
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	601a      	str	r2, [r3, #0]
  }
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	7993      	ldrb	r3, [r2, #6]
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	1dd8      	adds	r0, r3, #7
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	331c      	adds	r3, #28
 8003e32:	2208      	movs	r2, #8
 8003e34:	4619      	mov	r1, r3
 8003e36:	f004 fc1d 	bl	8008674 <memcpy>
  }
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	7993      	ldrb	r3, [r2, #6]
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	1dd8      	adds	r0, r3, #7
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	331c      	adds	r3, #28
 8003e5e:	2203      	movs	r2, #3
 8003e60:	4619      	mov	r1, r3
 8003e62:	f004 fc07 	bl	8008674 <memcpy>
  }
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	7993      	ldrb	r3, [r2, #6]
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	1dd8      	adds	r0, r3, #7
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	331c      	adds	r3, #28
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f004 fbf1 	bl	8008674 <memcpy>
  }
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_ZN8PUTM_CAN6DeviceINS_7SF_NUCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	7993      	ldrb	r3, [r2, #6]
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3307      	adds	r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	321c      	adds	r2, #28
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	601a      	str	r2, [r3, #0]
  }
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <_ZN8PUTM_CAN6DeviceINS_5SF_WSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	7993      	ldrb	r3, [r2, #6]
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	1dd8      	adds	r0, r3, #7
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	331c      	adds	r3, #28
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f004 fbc5 	bl	8008674 <memcpy>
  }
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <_ZN8PUTM_CAN6DeviceINS_5SF_DVEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	7993      	ldrb	r3, [r2, #6]
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	1dd8      	adds	r0, r3, #7
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	331c      	adds	r3, #28
 8003f0e:	2208      	movs	r2, #8
 8003f10:	4619      	mov	r1, r3
 8003f12:	f004 fbaf 	bl	8008674 <memcpy>
  }
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <_ZN8PUTM_CAN6DeviceINS_20SF_CoolingAndVSafetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	7993      	ldrb	r3, [r2, #6]
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	1dd8      	adds	r0, r3, #7
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	331c      	adds	r3, #28
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f004 fb99 	bl	8008674 <memcpy>
  }
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <_ZN8PUTM_CAN6DeviceINS_11SF_FrontBoxEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	7993      	ldrb	r3, [r2, #6]
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1dd8      	adds	r0, r3, #7
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	331c      	adds	r3, #28
 8003f66:	2208      	movs	r2, #8
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f004 fb83 	bl	8008674 <memcpy>
  }
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	7993      	ldrb	r3, [r2, #6]
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	1dd8      	adds	r0, r3, #7
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	331c      	adds	r3, #28
 8003f92:	2203      	movs	r2, #3
 8003f94:	4619      	mov	r1, r3
 8003f96:	f004 fb6d 	bl	8008674 <memcpy>
  }
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	7993      	ldrb	r3, [r2, #6]
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	1dd8      	adds	r0, r3, #7
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	331c      	adds	r3, #28
 8003fbe:	2205      	movs	r2, #5
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f004 fb57 	bl	8008674 <memcpy>
  }
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	7993      	ldrb	r3, [r2, #6]
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3307      	adds	r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	321c      	adds	r2, #28
 8003fea:	8812      	ldrh	r2, [r2, #0]
 8003fec:	b292      	uxth	r2, r2
 8003fee:	801a      	strh	r2, [r3, #0]
  }
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	7993      	ldrb	r3, [r2, #6]
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3307      	adds	r3, #7
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	321c      	adds	r2, #28
 8004018:	7812      	ldrb	r2, [r2, #0]
 800401a:	701a      	strb	r2, [r3, #0]
  }
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	7993      	ldrb	r3, [r2, #6]
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3307      	adds	r3, #7
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	321c      	adds	r2, #28
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	601a      	str	r2, [r3, #0]
  }
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	7993      	ldrb	r3, [r2, #6]
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3307      	adds	r3, #7
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	321c      	adds	r2, #28
 8004070:	7812      	ldrb	r2, [r2, #0]
 8004072:	701a      	strb	r2, [r3, #0]
  }
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
    new_data = true;
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	7993      	ldrb	r3, [r2, #6]
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3307      	adds	r3, #7
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	321c      	adds	r2, #28
 800409c:	8812      	ldrh	r2, [r2, #0]
 800409e:	b292      	uxth	r2, r2
 80040a0:	801a      	strh	r2, [r3, #0]
  }
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	7993      	ldrb	r3, [r2, #6]
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	1dd8      	adds	r0, r3, #7
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	331c      	adds	r3, #28
 80040ca:	2208      	movs	r2, #8
 80040cc:	4619      	mov	r1, r3
 80040ce:	f004 fad1 	bl	8008674 <memcpy>
  }
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	7993      	ldrb	r3, [r2, #6]
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3307      	adds	r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	321c      	adds	r2, #28
 80040f6:	7812      	ldrb	r2, [r2, #0]
 80040f8:	701a      	strb	r2, [r3, #0]
  }
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	7993      	ldrb	r3, [r2, #6]
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	1dd8      	adds	r0, r3, #7
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	331c      	adds	r3, #28
 8004122:	2208      	movs	r2, #8
 8004124:	4619      	mov	r1, r3
 8004126:	f004 faa5 	bl	8008674 <memcpy>
  }
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	7993      	ldrb	r3, [r2, #6]
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	1dd8      	adds	r0, r3, #7
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	331c      	adds	r3, #28
 800414e:	2206      	movs	r2, #6
 8004150:	4619      	mov	r1, r3
 8004152:	f004 fa8f 	bl	8008674 <memcpy>
  }
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	7993      	ldrb	r3, [r2, #6]
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	1dd8      	adds	r0, r3, #7
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	331c      	adds	r3, #28
 800417a:	2208      	movs	r2, #8
 800417c:	4619      	mov	r1, r3
 800417e:	f004 fa79 	bl	8008674 <memcpy>
  }
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	7993      	ldrb	r3, [r2, #6]
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3307      	adds	r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	321c      	adds	r2, #28
 80041a6:	7812      	ldrb	r2, [r2, #0]
 80041a8:	701a      	strb	r2, [r3, #0]
  }
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
    new_data = true;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	7993      	ldrb	r3, [r2, #6]
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	1dd8      	adds	r0, r3, #7
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	331c      	adds	r3, #28
 80041d2:	2206      	movs	r2, #6
 80041d4:	4619      	mov	r1, r3
 80041d6:	f004 fa4d 	bl	8008674 <memcpy>
  }
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
    new_data = true;
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	7993      	ldrb	r3, [r2, #6]
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	1dd8      	adds	r0, r3, #7
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	331c      	adds	r3, #28
 80041fe:	2206      	movs	r2, #6
 8004200:	4619      	mov	r1, r3
 8004202:	f004 fa37 	bl	8008674 <memcpy>
  }
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	7993      	ldrb	r3, [r2, #6]
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	1dd8      	adds	r0, r3, #7
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	331c      	adds	r3, #28
 800422a:	2208      	movs	r2, #8
 800422c:	4619      	mov	r1, r3
 800422e:	f004 fa21 	bl	8008674 <memcpy>
  }
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	7993      	ldrb	r3, [r2, #6]
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	1dd8      	adds	r0, r3, #7
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	331c      	adds	r3, #28
 8004256:	2205      	movs	r2, #5
 8004258:	4619      	mov	r1, r3
 800425a:	f004 fa0b 	bl	8008674 <memcpy>
  }
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 8004266:	b580      	push	{r7, lr}
 8004268:	af00      	add	r7, sp, #0
 800426a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800426e:	2001      	movs	r0, #1
 8004270:	f7ff fc6a 	bl	8003b48 <_Z41__static_initialization_and_destruction_0ii>
 8004274:	bd80      	pop	{r7, pc}

08004276 <_GLOBAL__sub_D__ZN8PUTM_CAN3canE>:
 8004276:	b580      	push	{r7, lr}
 8004278:	af00      	add	r7, sp, #0
 800427a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800427e:	2000      	movs	r0, #0
 8004280:	f7ff fc62 	bl	8003b48 <_Z41__static_initialization_and_destruction_0ii>
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800428c:	4b26      	ldr	r3, [pc, #152]	; (8004328 <MX_SPI1_Init+0xa0>)
 800428e:	4a27      	ldr	r2, [pc, #156]	; (800432c <MX_SPI1_Init+0xa4>)
 8004290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004292:	4b25      	ldr	r3, [pc, #148]	; (8004328 <MX_SPI1_Init+0xa0>)
 8004294:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800429a:	4b23      	ldr	r3, [pc, #140]	; (8004328 <MX_SPI1_Init+0xa0>)
 800429c:	2200      	movs	r2, #0
 800429e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80042a0:	4b21      	ldr	r3, [pc, #132]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80042a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a8:	4b1f      	ldr	r3, [pc, #124]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042ae:	4b1e      	ldr	r3, [pc, #120]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042b4:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042be:	2218      	movs	r2, #24
 80042c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042c8:	4b17      	ldr	r3, [pc, #92]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042d6:	2207      	movs	r2, #7
 80042d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042e6:	4810      	ldr	r0, [pc, #64]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042e8:	f004 f8ba 	bl	8008460 <HAL_SPI_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80042f2:	f7ff f9d1 	bl	8003698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <MX_SPI1_Init+0xa0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004304:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <MX_SPI1_Init+0xa0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d007      	beq.n	8004324 <MX_SPI1_Init+0x9c>
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <MX_SPI1_Init+0xa0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b03      	ldr	r3, [pc, #12]	; (8004328 <MX_SPI1_Init+0xa0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004322:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8004324:	bf00      	nop
 8004326:	bd80      	pop	{r7, pc}
 8004328:	2000066c 	.word	0x2000066c
 800432c:	40013000 	.word	0x40013000

08004330 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004338:	f107 0314 	add.w	r3, r7, #20
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a17      	ldr	r2, [pc, #92]	; (80043ac <HAL_SPI_MspInit+0x7c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d128      	bne.n	80043a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004352:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <HAL_SPI_MspInit+0x80>)
 8004354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004356:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <HAL_SPI_MspInit+0x80>)
 8004358:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800435c:	6613      	str	r3, [r2, #96]	; 0x60
 800435e:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <HAL_SPI_MspInit+0x80>)
 8004360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <HAL_SPI_MspInit+0x80>)
 800436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436e:	4a10      	ldr	r2, [pc, #64]	; (80043b0 <HAL_SPI_MspInit+0x80>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004376:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <HAL_SPI_MspInit+0x80>)
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004382:	23e0      	movs	r3, #224	; 0xe0
 8004384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004386:	2302      	movs	r3, #2
 8004388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800438a:	2302      	movs	r3, #2
 800438c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800438e:	2303      	movs	r3, #3
 8004390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004392:	2305      	movs	r3, #5
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004396:	f107 0314 	add.w	r3, r7, #20
 800439a:	4619      	mov	r1, r3
 800439c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043a0:	f002 f982 	bl	80066a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80043a4:	bf00      	nop
 80043a6:	3728      	adds	r7, #40	; 0x28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40013000 	.word	0x40013000
 80043b0:	40021000 	.word	0x40021000

080043b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ba:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <HAL_MspInit+0x44>)
 80043bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043be:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <HAL_MspInit+0x44>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6613      	str	r3, [r2, #96]	; 0x60
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <HAL_MspInit+0x44>)
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_MspInit+0x44>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d6:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <HAL_MspInit+0x44>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6593      	str	r3, [r2, #88]	; 0x58
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_MspInit+0x44>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000

080043fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004400:	e7fe      	b.n	8004400 <NMI_Handler+0x4>

08004402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004402:	b480      	push	{r7}
 8004404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004406:	e7fe      	b.n	8004406 <HardFault_Handler+0x4>

08004408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800440c:	e7fe      	b.n	800440c <MemManage_Handler+0x4>

0800440e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800440e:	b480      	push	{r7}
 8004410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004412:	e7fe      	b.n	8004412 <BusFault_Handler+0x4>

08004414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004418:	e7fe      	b.n	8004418 <UsageFault_Handler+0x4>

0800441a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800441a:	b480      	push	{r7}
 800441c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800441e:	bf00      	nop
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004448:	f000 f9d4 	bl	80047f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800444c:	bf00      	nop
 800444e:	bd80      	pop	{r7, pc}

08004450 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004454:	4802      	ldr	r0, [pc, #8]	; (8004460 <CAN1_RX0_IRQHandler+0x10>)
 8004456:	f001 fde5 	bl	8006024 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000308 	.word	0x20000308

08004464 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004468:	4802      	ldr	r0, [pc, #8]	; (8004474 <CAN1_RX1_IRQHandler+0x10>)
 800446a:	f001 fddb 	bl	8006024 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000308 	.word	0x20000308

08004478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
	return 1;
 800447c:	2301      	movs	r3, #1
}
 800447e:	4618      	mov	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <_kill>:

int _kill(int pid, int sig)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004492:	f004 f8ab 	bl	80085ec <__errno>
 8004496:	4603      	mov	r3, r0
 8004498:	2216      	movs	r2, #22
 800449a:	601a      	str	r2, [r3, #0]
	return -1;
 800449c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_exit>:

void _exit (int status)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80044b0:	f04f 31ff 	mov.w	r1, #4294967295
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ffe7 	bl	8004488 <_kill>
	while (1) {}		/* Make sure we hang here */
 80044ba:	e7fe      	b.n	80044ba <_exit+0x12>

080044bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e00a      	b.n	80044e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80044ce:	f3af 8000 	nop.w
 80044d2:	4601      	mov	r1, r0
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	60ba      	str	r2, [r7, #8]
 80044da:	b2ca      	uxtb	r2, r1
 80044dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3301      	adds	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	dbf0      	blt.n	80044ce <_read+0x12>
	}

return len;
 80044ec:	687b      	ldr	r3, [r7, #4]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b086      	sub	sp, #24
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	e009      	b.n	800451c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	60ba      	str	r2, [r7, #8]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	3301      	adds	r3, #1
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	dbf1      	blt.n	8004508 <_write+0x12>
	}
	return len;
 8004524:	687b      	ldr	r3, [r7, #4]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <_close>:

int _close(int file)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
	return -1;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004556:	605a      	str	r2, [r3, #4]
	return 0;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <_isatty>:

int _isatty(int file)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
	return 1;
 800456e:	2301      	movs	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
	return 0;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <_sbrk+0x5c>)
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <_sbrk+0x60>)
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <_sbrk+0x64>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d102      	bne.n	80045ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045b4:	4b11      	ldr	r3, [pc, #68]	; (80045fc <_sbrk+0x64>)
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <_sbrk+0x68>)
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <_sbrk+0x64>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d207      	bcs.n	80045d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045c8:	f004 f810 	bl	80085ec <__errno>
 80045cc:	4603      	mov	r3, r0
 80045ce:	220c      	movs	r2, #12
 80045d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295
 80045d6:	e009      	b.n	80045ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045d8:	4b08      	ldr	r3, [pc, #32]	; (80045fc <_sbrk+0x64>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045de:	4b07      	ldr	r3, [pc, #28]	; (80045fc <_sbrk+0x64>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	4a05      	ldr	r2, [pc, #20]	; (80045fc <_sbrk+0x64>)
 80045e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045ea:	68fb      	ldr	r3, [r7, #12]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20050000 	.word	0x20050000
 80045f8:	00000400 	.word	0x00000400
 80045fc:	200006d0 	.word	0x200006d0
 8004600:	200006e8 	.word	0x200006e8

08004604 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <SystemInit+0x20>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	4a05      	ldr	r2, [pc, #20]	; (8004624 <SystemInit+0x20>)
 8004610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	e000ed00 	.word	0xe000ed00

08004628 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 8004636:	f000 f8f1 	bl	800481c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	601a      	str	r2, [r3, #0]
}
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <_ZN5TimerC1Em>:

Timer::Timer(uint32_t timeout) : timeout(timeout)
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 800465a:	f000 f8df 	bl	800481c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <_ZN5Timer10setTimeOutEm>:

void Timer::setTimeOut(uint32_t timeout)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
	this->timeout = timeout;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	605a      	str	r2, [r3, #4]
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <_ZN5Timer7restartEv>:

void Timer::restart()
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
	this->start_time = HAL_GetTick();
 8004692:	f000 f8c3 	bl	800481c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]
}
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <_ZN5Timer23checkIfTimedOutAndResetEv>:

bool Timer::checkIfTimedOutAndReset()
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	if(this->getPassedTime() >= this->timeout)
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f814 	bl	80046da <_ZN5Timer13getPassedTimeEv>
 80046b2:	4602      	mov	r2, r0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	bf2c      	ite	cs
 80046bc:	2301      	movcs	r3, #1
 80046be:	2300      	movcc	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <_ZN5Timer23checkIfTimedOutAndResetEv+0x2c>
	{
		this->restart();
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff ffdf 	bl	800468a <_ZN5Timer7restartEv>
		return true;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <_ZN5Timer23checkIfTimedOutAndResetEv+0x2e>
	}

	return false;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - this->start_time;
 80046e2:	f000 f89b 	bl	800481c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	1ad3      	subs	r3, r2, r3
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80046f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004730 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80046fc:	f7ff ff82 	bl	8004604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004700:	480c      	ldr	r0, [pc, #48]	; (8004734 <LoopForever+0x6>)
  ldr r1, =_edata
 8004702:	490d      	ldr	r1, [pc, #52]	; (8004738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004704:	4a0d      	ldr	r2, [pc, #52]	; (800473c <LoopForever+0xe>)
  movs r3, #0
 8004706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004708:	e002      	b.n	8004710 <LoopCopyDataInit>

0800470a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800470a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800470c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800470e:	3304      	adds	r3, #4

08004710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004714:	d3f9      	bcc.n	800470a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004716:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004718:	4c0a      	ldr	r4, [pc, #40]	; (8004744 <LoopForever+0x16>)
  movs r3, #0
 800471a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800471c:	e001      	b.n	8004722 <LoopFillZerobss>

0800471e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800471e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004720:	3204      	adds	r2, #4

08004722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004724:	d3fb      	bcc.n	800471e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004726:	f003 ff79 	bl	800861c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800472a:	f7fe f83f 	bl	80027ac <main>

0800472e <LoopForever>:

LoopForever:
    b LoopForever
 800472e:	e7fe      	b.n	800472e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004730:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004738:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 800473c:	08009a70 	.word	0x08009a70
  ldr r2, =_sbss
 8004740:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 8004744:	200006e8 	.word	0x200006e8

08004748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004748:	e7fe      	b.n	8004748 <ADC1_2_IRQHandler>

0800474a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004754:	2003      	movs	r0, #3
 8004756:	f001 ff65 	bl	8006624 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800475a:	200f      	movs	r0, #15
 800475c:	f000 f80e 	bl	800477c <HAL_InitTick>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	71fb      	strb	r3, [r7, #7]
 800476a:	e001      	b.n	8004770 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800476c:	f7ff fe22 	bl	80043b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004770:	79fb      	ldrb	r3, [r7, #7]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004788:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <HAL_InitTick+0x6c>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d023      	beq.n	80047d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004790:	4b16      	ldr	r3, [pc, #88]	; (80047ec <HAL_InitTick+0x70>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <HAL_InitTick+0x6c>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800479e:	fbb3 f3f1 	udiv	r3, r3, r1
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 ff71 	bl	800668e <HAL_SYSTICK_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10f      	bne.n	80047d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	d809      	bhi.n	80047cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047b8:	2200      	movs	r2, #0
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295
 80047c0:	f001 ff3b 	bl	800663a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047c4:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <HAL_InitTick+0x74>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e007      	b.n	80047dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
 80047d0:	e004      	b.n	80047dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
 80047d6:	e001      	b.n	80047dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2000021c 	.word	0x2000021c
 80047ec:	20000214 	.word	0x20000214
 80047f0:	20000218 	.word	0x20000218

080047f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_IncTick+0x20>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_IncTick+0x24>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4413      	add	r3, r2
 8004804:	4a04      	ldr	r2, [pc, #16]	; (8004818 <HAL_IncTick+0x24>)
 8004806:	6013      	str	r3, [r2, #0]
}
 8004808:	bf00      	nop
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000021c 	.word	0x2000021c
 8004818:	200006d4 	.word	0x200006d4

0800481c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  return uwTick;
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <HAL_GetTick+0x14>)
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	200006d4 	.word	0x200006d4

08004834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800483c:	f7ff ffee 	bl	800481c <HAL_GetTick>
 8004840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d005      	beq.n	800485a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800484e:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <HAL_Delay+0x44>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800485a:	bf00      	nop
 800485c:	f7ff ffde 	bl	800481c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	429a      	cmp	r2, r3
 800486a:	d8f7      	bhi.n	800485c <HAL_Delay+0x28>
  {
  }
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	2000021c 	.word	0x2000021c

0800487c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	609a      	str	r2, [r3, #8]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3360      	adds	r3, #96	; 0x60
 80048f6:	461a      	mov	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4b08      	ldr	r3, [pc, #32]	; (8004928 <LL_ADC_SetOffset+0x44>)
 8004906:	4013      	ands	r3, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	4313      	orrs	r3, r2
 8004914:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	03fff000 	.word	0x03fff000

0800492c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3360      	adds	r3, #96	; 0x60
 800493a:	461a      	mov	r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3360      	adds	r3, #96	; 0x60
 8004968:	461a      	mov	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	431a      	orrs	r2, r3
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	615a      	str	r2, [r3, #20]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3330      	adds	r3, #48	; 0x30
 80049c4:	461a      	mov	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	0a1b      	lsrs	r3, r3, #8
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	f003 030c 	and.w	r3, r3, #12
 80049d0:	4413      	add	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	211f      	movs	r1, #31
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	401a      	ands	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	0e9b      	lsrs	r3, r3, #26
 80049ec:	f003 011f 	and.w	r1, r3, #31
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	431a      	orrs	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3314      	adds	r3, #20
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	0e5b      	lsrs	r3, r3, #25
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	4413      	add	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	0d1b      	lsrs	r3, r3, #20
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	2107      	movs	r1, #7
 8004a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	401a      	ands	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	0d1b      	lsrs	r3, r3, #20
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a50:	431a      	orrs	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	401a      	ands	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f003 0318 	and.w	r3, r3, #24
 8004a86:	4908      	ldr	r1, [pc, #32]	; (8004aa8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a88:	40d9      	lsrs	r1, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	400b      	ands	r3, r1
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	431a      	orrs	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	0007ffff 	.word	0x0007ffff

08004aac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6093      	str	r3, [r2, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae4:	d101      	bne.n	8004aea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b34:	d101      	bne.n	8004b3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <LL_ADC_IsEnabled+0x18>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <LL_ADC_IsEnabled+0x1a>
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d101      	bne.n	8004b86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d101      	bne.n	8004bac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b089      	sub	sp, #36	; 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e134      	b.n	8004e40 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fb fbd1 	bl	800038c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff ff67 	bl	8004ad0 <LL_ADC_IsDeepPowerDownEnabled>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d004      	beq.n	8004c12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff ff4d 	bl	8004aac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff ff82 	bl	8004b20 <LL_ADC_IsInternalRegulatorEnabled>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d115      	bne.n	8004c4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff ff66 	bl	8004af8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c2c:	4b86      	ldr	r3, [pc, #536]	; (8004e48 <HAL_ADC_Init+0x28c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	4a86      	ldr	r2, [pc, #536]	; (8004e4c <HAL_ADC_Init+0x290>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	099b      	lsrs	r3, r3, #6
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c40:	e002      	b.n	8004c48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f9      	bne.n	8004c42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff ff64 	bl	8004b20 <LL_ADC_IsInternalRegulatorEnabled>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10d      	bne.n	8004c7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	f043 0210 	orr.w	r2, r3, #16
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	f043 0201 	orr.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff ff75 	bl	8004b6e <LL_ADC_REG_IsConversionOngoing>
 8004c84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 80cd 	bne.w	8004e2e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 80c9 	bne.w	8004e2e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ca4:	f043 0202 	orr.w	r2, r3, #2
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ff49 	bl	8004b48 <LL_ADC_IsEnabled>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d110      	bne.n	8004cde <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cbc:	4864      	ldr	r0, [pc, #400]	; (8004e50 <HAL_ADC_Init+0x294>)
 8004cbe:	f7ff ff43 	bl	8004b48 <LL_ADC_IsEnabled>
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4863      	ldr	r0, [pc, #396]	; (8004e54 <HAL_ADC_Init+0x298>)
 8004cc6:	f7ff ff3f 	bl	8004b48 <LL_ADC_IsEnabled>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4323      	orrs	r3, r4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d105      	bne.n	8004cde <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	485f      	ldr	r0, [pc, #380]	; (8004e58 <HAL_ADC_Init+0x29c>)
 8004cda:	f7ff fdcf 	bl	800487c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7e5b      	ldrb	r3, [r3, #25]
 8004ce2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ce8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004cee:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004cf4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cfc:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d106      	bne.n	8004d1a <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	3b01      	subs	r3, #1
 8004d12:	045b      	lsls	r3, r3, #17
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	4b47      	ldr	r3, [pc, #284]	; (8004e5c <HAL_ADC_Init+0x2a0>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	69b9      	ldr	r1, [r7, #24]
 8004d46:	430b      	orrs	r3, r1
 8004d48:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff0d 	bl	8004b6e <LL_ADC_REG_IsConversionOngoing>
 8004d54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff ff1a 	bl	8004b94 <LL_ADC_INJ_IsConversionOngoing>
 8004d60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d140      	bne.n	8004dea <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d13d      	bne.n	8004dea <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	7e1b      	ldrb	r3, [r3, #24]
 8004d76:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d78:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d80:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d90:	f023 0306 	bic.w	r3, r3, #6
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d118      	bne.n	8004dda <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004db2:	f023 0304 	bic.w	r3, r3, #4
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004dbe:	4311      	orrs	r1, r2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004dc4:	4311      	orrs	r1, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	611a      	str	r2, [r3, #16]
 8004dd8:	e007      	b.n	8004dea <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0201 	bic.w	r2, r2, #1
 8004de8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d10c      	bne.n	8004e0c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	f023 010f 	bic.w	r1, r3, #15
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	1e5a      	subs	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
 8004e0a:	e007      	b.n	8004e1c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 020f 	bic.w	r2, r2, #15
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	f023 0303 	bic.w	r3, r3, #3
 8004e24:	f043 0201 	orr.w	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	659a      	str	r2, [r3, #88]	; 0x58
 8004e2c:	e007      	b.n	8004e3e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f043 0210 	orr.w	r2, r3, #16
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3724      	adds	r7, #36	; 0x24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd90      	pop	{r4, r7, pc}
 8004e48:	20000214 	.word	0x20000214
 8004e4c:	053e2d63 	.word	0x053e2d63
 8004e50:	50040000 	.word	0x50040000
 8004e54:	50040100 	.word	0x50040100
 8004e58:	50040300 	.word	0x50040300
 8004e5c:	fff0c007 	.word	0xfff0c007

08004e60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b0b6      	sub	sp, #216	; 0xd8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x22>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e3d5      	b.n	800562e <HAL_ADC_ConfigChannel+0x7ce>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fe6d 	bl	8004b6e <LL_ADC_REG_IsConversionOngoing>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 83ba 	bne.w	8005610 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b05      	cmp	r3, #5
 8004ea2:	d824      	bhi.n	8004eee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	3b02      	subs	r3, #2
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d81b      	bhi.n	8004ee6 <HAL_ADC_ConfigChannel+0x86>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <HAL_ADC_ConfigChannel+0x54>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ec5 	.word	0x08004ec5
 8004eb8:	08004ecd 	.word	0x08004ecd
 8004ebc:	08004ed5 	.word	0x08004ed5
 8004ec0:	08004edd 	.word	0x08004edd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	220c      	movs	r2, #12
 8004ec8:	605a      	str	r2, [r3, #4]
          break;
 8004eca:	e011      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2212      	movs	r2, #18
 8004ed0:	605a      	str	r2, [r3, #4]
          break;
 8004ed2:	e00d      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2218      	movs	r2, #24
 8004ed8:	605a      	str	r2, [r3, #4]
          break;
 8004eda:	e009      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ee2:	605a      	str	r2, [r3, #4]
          break;
 8004ee4:	e004      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2206      	movs	r2, #6
 8004eea:	605a      	str	r2, [r3, #4]
          break;
 8004eec:	e000      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004eee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6859      	ldr	r1, [r3, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f7ff fd59 	bl	80049b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fe31 	bl	8004b6e <LL_ADC_REG_IsConversionOngoing>
 8004f0c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fe3d 	bl	8004b94 <LL_ADC_INJ_IsConversionOngoing>
 8004f1a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f040 81c1 	bne.w	80052aa <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f040 81bc 	bne.w	80052aa <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f3a:	d10f      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2200      	movs	r2, #0
 8004f46:	4619      	mov	r1, r3
 8004f48:	f7ff fd60 	bl	8004a0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fd1a 	bl	800498e <LL_ADC_SetSamplingTimeCommonConfig>
 8004f5a:	e00e      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f7ff fd4f 	bl	8004a0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2100      	movs	r1, #0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff fd0a 	bl	800498e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	08db      	lsrs	r3, r3, #3
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6919      	ldr	r1, [r3, #16]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fac:	f7ff fc9a 	bl	80048e4 <LL_ADC_SetOffset>
 8004fb0:	e17b      	b.n	80052aa <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fcb7 	bl	800492c <LL_ADC_GetOffsetChannel>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x17e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fcac 	bl	800492c <LL_ADC_GetOffsetChannel>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	0e9b      	lsrs	r3, r3, #26
 8004fd8:	f003 021f 	and.w	r2, r3, #31
 8004fdc:	e01e      	b.n	800501c <HAL_ADC_ConfigChannel+0x1bc>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fca1 	bl	800492c <LL_ADC_GetOffsetChannel>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ff4:	fa93 f3a3 	rbit	r3, r3
 8004ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800500c:	2320      	movs	r3, #32
 800500e:	e004      	b.n	800501a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8005010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005014:	fab3 f383 	clz	r3, r3
 8005018:	b2db      	uxtb	r3, r3
 800501a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x1d4>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	0e9b      	lsrs	r3, r3, #26
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	e018      	b.n	8005066 <HAL_ADC_ConfigChannel+0x206>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005040:	fa93 f3a3 	rbit	r3, r3
 8005044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800504c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005050:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8005058:	2320      	movs	r3, #32
 800505a:	e004      	b.n	8005066 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800505c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005060:	fab3 f383 	clz	r3, r3
 8005064:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005066:	429a      	cmp	r2, r3
 8005068:	d106      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	2100      	movs	r1, #0
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fc70 	bl	8004958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2101      	movs	r1, #1
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fc54 	bl	800492c <LL_ADC_GetOffsetChannel>
 8005084:	4603      	mov	r3, r0
 8005086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x244>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2101      	movs	r1, #1
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fc49 	bl	800492c <LL_ADC_GetOffsetChannel>
 800509a:	4603      	mov	r3, r0
 800509c:	0e9b      	lsrs	r3, r3, #26
 800509e:	f003 021f 	and.w	r2, r3, #31
 80050a2:	e01e      	b.n	80050e2 <HAL_ADC_ConfigChannel+0x282>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2101      	movs	r1, #1
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fc3e 	bl	800492c <LL_ADC_GetOffsetChannel>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80050c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80050ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80050d2:	2320      	movs	r3, #32
 80050d4:	e004      	b.n	80050e0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80050d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80050da:	fab3 f383 	clz	r3, r3
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d105      	bne.n	80050fa <HAL_ADC_ConfigChannel+0x29a>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	0e9b      	lsrs	r3, r3, #26
 80050f4:	f003 031f 	and.w	r3, r3, #31
 80050f8:	e018      	b.n	800512c <HAL_ADC_ConfigChannel+0x2cc>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005106:	fa93 f3a3 	rbit	r3, r3
 800510a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800510e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005112:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005116:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800511e:	2320      	movs	r3, #32
 8005120:	e004      	b.n	800512c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8005122:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005126:	fab3 f383 	clz	r3, r3
 800512a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800512c:	429a      	cmp	r2, r3
 800512e:	d106      	bne.n	800513e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2200      	movs	r2, #0
 8005136:	2101      	movs	r1, #1
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fc0d 	bl	8004958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2102      	movs	r1, #2
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fbf1 	bl	800492c <LL_ADC_GetOffsetChannel>
 800514a:	4603      	mov	r3, r0
 800514c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <HAL_ADC_ConfigChannel+0x30a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2102      	movs	r1, #2
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fbe6 	bl	800492c <LL_ADC_GetOffsetChannel>
 8005160:	4603      	mov	r3, r0
 8005162:	0e9b      	lsrs	r3, r3, #26
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	e01e      	b.n	80051a8 <HAL_ADC_ConfigChannel+0x348>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2102      	movs	r1, #2
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff fbdb 	bl	800492c <LL_ADC_GetOffsetChannel>
 8005176:	4603      	mov	r3, r0
 8005178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005180:	fa93 f3a3 	rbit	r3, r3
 8005184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800518c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005190:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8005198:	2320      	movs	r3, #32
 800519a:	e004      	b.n	80051a6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800519c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051a0:	fab3 f383 	clz	r3, r3
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d105      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x360>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	0e9b      	lsrs	r3, r3, #26
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	e016      	b.n	80051ee <HAL_ADC_ConfigChannel+0x38e>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051cc:	fa93 f3a3 	rbit	r3, r3
 80051d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80051d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80051d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80051e0:	2320      	movs	r3, #32
 80051e2:	e004      	b.n	80051ee <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80051e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d106      	bne.n	8005200 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	2102      	movs	r1, #2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fbac 	bl	8004958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2103      	movs	r1, #3
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff fb90 	bl	800492c <LL_ADC_GetOffsetChannel>
 800520c:	4603      	mov	r3, r0
 800520e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <HAL_ADC_ConfigChannel+0x3cc>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2103      	movs	r1, #3
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fb85 	bl	800492c <LL_ADC_GetOffsetChannel>
 8005222:	4603      	mov	r3, r0
 8005224:	0e9b      	lsrs	r3, r3, #26
 8005226:	f003 021f 	and.w	r2, r3, #31
 800522a:	e017      	b.n	800525c <HAL_ADC_ConfigChannel+0x3fc>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2103      	movs	r1, #3
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fb7a 	bl	800492c <LL_ADC_GetOffsetChannel>
 8005238:	4603      	mov	r3, r0
 800523a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800523e:	fa93 f3a3 	rbit	r3, r3
 8005242:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005246:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800524e:	2320      	movs	r3, #32
 8005250:	e003      	b.n	800525a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8005252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005254:	fab3 f383 	clz	r3, r3
 8005258:	b2db      	uxtb	r3, r3
 800525a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <HAL_ADC_ConfigChannel+0x414>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	0e9b      	lsrs	r3, r3, #26
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	e011      	b.n	8005298 <HAL_ADC_ConfigChannel+0x438>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800527c:	fa93 f3a3 	rbit	r3, r3
 8005280:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005284:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800528c:	2320      	movs	r3, #32
 800528e:	e003      	b.n	8005298 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8005290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005292:	fab3 f383 	clz	r3, r3
 8005296:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005298:	429a      	cmp	r2, r3
 800529a:	d106      	bne.n	80052aa <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2103      	movs	r1, #3
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff fb57 	bl	8004958 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fc4a 	bl	8004b48 <LL_ADC_IsEnabled>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f040 8140 	bne.w	800553c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	461a      	mov	r2, r3
 80052ca:	f7ff fbcb 	bl	8004a64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	4a8f      	ldr	r2, [pc, #572]	; (8005510 <HAL_ADC_ConfigChannel+0x6b0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	f040 8131 	bne.w	800553c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10b      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x4a2>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	0e9b      	lsrs	r3, r3, #26
 80052f0:	3301      	adds	r3, #1
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	2b09      	cmp	r3, #9
 80052f8:	bf94      	ite	ls
 80052fa:	2301      	movls	r3, #1
 80052fc:	2300      	movhi	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	e019      	b.n	8005336 <HAL_ADC_ConfigChannel+0x4d6>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800530a:	fa93 f3a3 	rbit	r3, r3
 800530e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005312:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800531a:	2320      	movs	r3, #32
 800531c:	e003      	b.n	8005326 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800531e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005320:	fab3 f383 	clz	r3, r3
 8005324:	b2db      	uxtb	r3, r3
 8005326:	3301      	adds	r3, #1
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	2b09      	cmp	r3, #9
 800532e:	bf94      	ite	ls
 8005330:	2301      	movls	r3, #1
 8005332:	2300      	movhi	r3, #0
 8005334:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005336:	2b00      	cmp	r3, #0
 8005338:	d079      	beq.n	800542e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005342:	2b00      	cmp	r3, #0
 8005344:	d107      	bne.n	8005356 <HAL_ADC_ConfigChannel+0x4f6>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	0e9b      	lsrs	r3, r3, #26
 800534c:	3301      	adds	r3, #1
 800534e:	069b      	lsls	r3, r3, #26
 8005350:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005354:	e015      	b.n	8005382 <HAL_ADC_ConfigChannel+0x522>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800535e:	fa93 f3a3 	rbit	r3, r3
 8005362:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005366:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800536e:	2320      	movs	r3, #32
 8005370:	e003      	b.n	800537a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8005372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005374:	fab3 f383 	clz	r3, r3
 8005378:	b2db      	uxtb	r3, r3
 800537a:	3301      	adds	r3, #1
 800537c:	069b      	lsls	r3, r3, #26
 800537e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <HAL_ADC_ConfigChannel+0x542>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	0e9b      	lsrs	r3, r3, #26
 8005394:	3301      	adds	r3, #1
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	2101      	movs	r1, #1
 800539c:	fa01 f303 	lsl.w	r3, r1, r3
 80053a0:	e017      	b.n	80053d2 <HAL_ADC_ConfigChannel+0x572>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053aa:	fa93 f3a3 	rbit	r3, r3
 80053ae:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80053b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80053b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80053ba:	2320      	movs	r3, #32
 80053bc:	e003      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80053be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c0:	fab3 f383 	clz	r3, r3
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	3301      	adds	r3, #1
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	2101      	movs	r1, #1
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	ea42 0103 	orr.w	r1, r2, r3
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x598>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	0e9b      	lsrs	r3, r3, #26
 80053e8:	3301      	adds	r3, #1
 80053ea:	f003 021f 	and.w	r2, r3, #31
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	051b      	lsls	r3, r3, #20
 80053f6:	e018      	b.n	800542a <HAL_ADC_ConfigChannel+0x5ca>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	fa93 f3a3 	rbit	r3, r3
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800540a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8005410:	2320      	movs	r3, #32
 8005412:	e003      	b.n	800541c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8005414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005416:	fab3 f383 	clz	r3, r3
 800541a:	b2db      	uxtb	r3, r3
 800541c:	3301      	adds	r3, #1
 800541e:	f003 021f 	and.w	r2, r3, #31
 8005422:	4613      	mov	r3, r2
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	4413      	add	r3, r2
 8005428:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800542a:	430b      	orrs	r3, r1
 800542c:	e081      	b.n	8005532 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005436:	2b00      	cmp	r3, #0
 8005438:	d107      	bne.n	800544a <HAL_ADC_ConfigChannel+0x5ea>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	0e9b      	lsrs	r3, r3, #26
 8005440:	3301      	adds	r3, #1
 8005442:	069b      	lsls	r3, r3, #26
 8005444:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005448:	e015      	b.n	8005476 <HAL_ADC_ConfigChannel+0x616>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	fa93 f3a3 	rbit	r3, r3
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8005462:	2320      	movs	r3, #32
 8005464:	e003      	b.n	800546e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	fab3 f383 	clz	r3, r3
 800546c:	b2db      	uxtb	r3, r3
 800546e:	3301      	adds	r3, #1
 8005470:	069b      	lsls	r3, r3, #26
 8005472:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <HAL_ADC_ConfigChannel+0x636>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	0e9b      	lsrs	r3, r3, #26
 8005488:	3301      	adds	r3, #1
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2101      	movs	r1, #1
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	e017      	b.n	80054c6 <HAL_ADC_ConfigChannel+0x666>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	fa93 f3a3 	rbit	r3, r3
 80054a2:	61fb      	str	r3, [r7, #28]
  return result;
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80054ae:	2320      	movs	r3, #32
 80054b0:	e003      	b.n	80054ba <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	fab3 f383 	clz	r3, r3
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	3301      	adds	r3, #1
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2101      	movs	r1, #1
 80054c2:	fa01 f303 	lsl.w	r3, r1, r3
 80054c6:	ea42 0103 	orr.w	r1, r2, r3
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10d      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x692>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	0e9b      	lsrs	r3, r3, #26
 80054dc:	3301      	adds	r3, #1
 80054de:	f003 021f 	and.w	r2, r3, #31
 80054e2:	4613      	mov	r3, r2
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	4413      	add	r3, r2
 80054e8:	3b1e      	subs	r3, #30
 80054ea:	051b      	lsls	r3, r3, #20
 80054ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054f0:	e01e      	b.n	8005530 <HAL_ADC_ConfigChannel+0x6d0>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	fa93 f3a3 	rbit	r3, r3
 80054fe:	613b      	str	r3, [r7, #16]
  return result;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800550a:	2320      	movs	r3, #32
 800550c:	e006      	b.n	800551c <HAL_ADC_ConfigChannel+0x6bc>
 800550e:	bf00      	nop
 8005510:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	3301      	adds	r3, #1
 800551e:	f003 021f 	and.w	r2, r3, #31
 8005522:	4613      	mov	r3, r2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4413      	add	r3, r2
 8005528:	3b1e      	subs	r3, #30
 800552a:	051b      	lsls	r3, r3, #20
 800552c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005530:	430b      	orrs	r3, r1
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	6892      	ldr	r2, [r2, #8]
 8005536:	4619      	mov	r1, r3
 8005538:	f7ff fa68 	bl	8004a0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4b3d      	ldr	r3, [pc, #244]	; (8005638 <HAL_ADC_ConfigChannel+0x7d8>)
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d06c      	beq.n	8005622 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005548:	483c      	ldr	r0, [pc, #240]	; (800563c <HAL_ADC_ConfigChannel+0x7dc>)
 800554a:	f7ff f9bd 	bl	80048c8 <LL_ADC_GetCommonPathInternalCh>
 800554e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a3a      	ldr	r2, [pc, #232]	; (8005640 <HAL_ADC_ConfigChannel+0x7e0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d127      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800555c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d121      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a35      	ldr	r2, [pc, #212]	; (8005644 <HAL_ADC_ConfigChannel+0x7e4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d157      	bne.n	8005622 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005576:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800557a:	4619      	mov	r1, r3
 800557c:	482f      	ldr	r0, [pc, #188]	; (800563c <HAL_ADC_ConfigChannel+0x7dc>)
 800557e:	f7ff f990 	bl	80048a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005582:	4b31      	ldr	r3, [pc, #196]	; (8005648 <HAL_ADC_ConfigChannel+0x7e8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	099b      	lsrs	r3, r3, #6
 8005588:	4a30      	ldr	r2, [pc, #192]	; (800564c <HAL_ADC_ConfigChannel+0x7ec>)
 800558a:	fba2 2303 	umull	r2, r3, r2, r3
 800558e:	099b      	lsrs	r3, r3, #6
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	4613      	mov	r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800559c:	e002      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f9      	bne.n	800559e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055aa:	e03a      	b.n	8005622 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a27      	ldr	r2, [pc, #156]	; (8005650 <HAL_ADC_ConfigChannel+0x7f0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d113      	bne.n	80055de <HAL_ADC_ConfigChannel+0x77e>
 80055b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10d      	bne.n	80055de <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <HAL_ADC_ConfigChannel+0x7e4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d12a      	bne.n	8005622 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d4:	4619      	mov	r1, r3
 80055d6:	4819      	ldr	r0, [pc, #100]	; (800563c <HAL_ADC_ConfigChannel+0x7dc>)
 80055d8:	f7ff f963 	bl	80048a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055dc:	e021      	b.n	8005622 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <HAL_ADC_ConfigChannel+0x7f4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d11c      	bne.n	8005622 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d116      	bne.n	8005622 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a12      	ldr	r2, [pc, #72]	; (8005644 <HAL_ADC_ConfigChannel+0x7e4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d111      	bne.n	8005622 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005606:	4619      	mov	r1, r3
 8005608:	480c      	ldr	r0, [pc, #48]	; (800563c <HAL_ADC_ConfigChannel+0x7dc>)
 800560a:	f7ff f94a 	bl	80048a2 <LL_ADC_SetCommonPathInternalCh>
 800560e:	e008      	b.n	8005622 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800562a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800562e:	4618      	mov	r0, r3
 8005630:	37d8      	adds	r7, #216	; 0xd8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	80080000 	.word	0x80080000
 800563c:	50040300 	.word	0x50040300
 8005640:	c7520000 	.word	0xc7520000
 8005644:	50040000 	.word	0x50040000
 8005648:	20000214 	.word	0x20000214
 800564c:	053e2d63 	.word	0x053e2d63
 8005650:	cb840000 	.word	0xcb840000
 8005654:	80000001 	.word	0x80000001

08005658 <LL_ADC_IsEnabled>:
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <LL_ADC_IsEnabled+0x18>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <LL_ADC_IsEnabled+0x1a>
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <LL_ADC_REG_IsConversionOngoing>:
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b04      	cmp	r3, #4
 8005690:	d101      	bne.n	8005696 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b0a1      	sub	sp, #132	; 0x84
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80056be:	2302      	movs	r3, #2
 80056c0:	e089      	b.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80056ca:	2300      	movs	r3, #0
 80056cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80056ce:	2300      	movs	r3, #0
 80056d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a42      	ldr	r2, [pc, #264]	; (80057e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d102      	bne.n	80056e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80056dc:	4b41      	ldr	r3, [pc, #260]	; (80057e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e001      	b.n	80056e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e068      	b.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff ffb9 	bl	800567e <LL_ADC_REG_IsConversionOngoing>
 800570c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff ffb3 	bl	800567e <LL_ADC_REG_IsConversionOngoing>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d14a      	bne.n	80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800571e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005720:	2b00      	cmp	r3, #0
 8005722:	d147      	bne.n	80057b4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005724:	4b30      	ldr	r3, [pc, #192]	; (80057e8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005726:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d027      	beq.n	8005780 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005742:	035b      	lsls	r3, r3, #13
 8005744:	430b      	orrs	r3, r1
 8005746:	431a      	orrs	r2, r3
 8005748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800574a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800574c:	4824      	ldr	r0, [pc, #144]	; (80057e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800574e:	f7ff ff83 	bl	8005658 <LL_ADC_IsEnabled>
 8005752:	4604      	mov	r4, r0
 8005754:	4823      	ldr	r0, [pc, #140]	; (80057e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005756:	f7ff ff7f 	bl	8005658 <LL_ADC_IsEnabled>
 800575a:	4603      	mov	r3, r0
 800575c:	4323      	orrs	r3, r4
 800575e:	2b00      	cmp	r3, #0
 8005760:	d132      	bne.n	80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800576a:	f023 030f 	bic.w	r3, r3, #15
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	6811      	ldr	r1, [r2, #0]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	6892      	ldr	r2, [r2, #8]
 8005776:	430a      	orrs	r2, r1
 8005778:	431a      	orrs	r2, r3
 800577a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800577c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800577e:	e023      	b.n	80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800578a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800578c:	4814      	ldr	r0, [pc, #80]	; (80057e0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800578e:	f7ff ff63 	bl	8005658 <LL_ADC_IsEnabled>
 8005792:	4604      	mov	r4, r0
 8005794:	4813      	ldr	r0, [pc, #76]	; (80057e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005796:	f7ff ff5f 	bl	8005658 <LL_ADC_IsEnabled>
 800579a:	4603      	mov	r3, r0
 800579c:	4323      	orrs	r3, r4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d112      	bne.n	80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80057a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80057aa:	f023 030f 	bic.w	r3, r3, #15
 80057ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80057b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057b2:	e009      	b.n	80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80057c6:	e000      	b.n	80057ca <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80057d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3784      	adds	r7, #132	; 0x84
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd90      	pop	{r4, r7, pc}
 80057de:	bf00      	nop
 80057e0:	50040000 	.word	0x50040000
 80057e4:	50040100 	.word	0x50040100
 80057e8:	50040300 	.word	0x50040300

080057ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e0ed      	b.n	80059da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fa fe96 	bl	800053c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005820:	f7fe fffc 	bl	800481c <HAL_GetTick>
 8005824:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005826:	e012      	b.n	800584e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005828:	f7fe fff8 	bl	800481c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b0a      	cmp	r3, #10
 8005834:	d90b      	bls.n	800584e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2205      	movs	r2, #5
 8005846:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e0c5      	b.n	80059da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0e5      	beq.n	8005828 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0202 	bic.w	r2, r2, #2
 800586a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800586c:	f7fe ffd6 	bl	800481c <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005872:	e012      	b.n	800589a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005874:	f7fe ffd2 	bl	800481c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b0a      	cmp	r3, #10
 8005880:	d90b      	bls.n	800589a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2205      	movs	r2, #5
 8005892:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e09f      	b.n	80059da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e5      	bne.n	8005874 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	7e1b      	ldrb	r3, [r3, #24]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d108      	bne.n	80058c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e007      	b.n	80058d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	7e5b      	ldrb	r3, [r3, #25]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d108      	bne.n	80058ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e007      	b.n	80058fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	7e9b      	ldrb	r3, [r3, #26]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d108      	bne.n	8005916 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0220 	orr.w	r2, r2, #32
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e007      	b.n	8005926 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0220 	bic.w	r2, r2, #32
 8005924:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	7edb      	ldrb	r3, [r3, #27]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d108      	bne.n	8005940 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0210 	bic.w	r2, r2, #16
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e007      	b.n	8005950 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0210 	orr.w	r2, r2, #16
 800594e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7f1b      	ldrb	r3, [r3, #28]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d108      	bne.n	800596a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0208 	orr.w	r2, r2, #8
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e007      	b.n	800597a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0208 	bic.w	r2, r2, #8
 8005978:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	7f5b      	ldrb	r3, [r3, #29]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d108      	bne.n	8005994 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0204 	orr.w	r2, r2, #4
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e007      	b.n	80059a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0204 	bic.w	r2, r2, #4
 80059a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	ea42 0103 	orr.w	r1, r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	1e5a      	subs	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80059fa:	7cfb      	ldrb	r3, [r7, #19]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d003      	beq.n	8005a08 <HAL_CAN_ConfigFilter+0x26>
 8005a00:	7cfb      	ldrb	r3, [r7, #19]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	f040 80aa 	bne.w	8005b5c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a0e:	f043 0201 	orr.w	r2, r3, #1
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	2201      	movs	r2, #1
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	43db      	mvns	r3, r3
 8005a32:	401a      	ands	r2, r3
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d123      	bne.n	8005a8a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	401a      	ands	r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005a64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	3248      	adds	r2, #72	; 0x48
 8005a6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a80:	6979      	ldr	r1, [r7, #20]
 8005a82:	3348      	adds	r3, #72	; 0x48
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	440b      	add	r3, r1
 8005a88:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d122      	bne.n	8005ad8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005ab2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	3248      	adds	r2, #72	; 0x48
 8005ab8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005acc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	3348      	adds	r3, #72	; 0x48
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	440b      	add	r3, r1
 8005ad6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d109      	bne.n	8005af4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	401a      	ands	r2, r3
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005af2:	e007      	b.n	8005b04 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	401a      	ands	r2, r3
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005b1e:	e007      	b.n	8005b30 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d107      	bne.n	8005b48 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e006      	b.n	8005b6a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
  }
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d12e      	bne.n	8005be8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba2:	f7fe fe3b 	bl	800481c <HAL_GetTick>
 8005ba6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005ba8:	e012      	b.n	8005bd0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005baa:	f7fe fe37 	bl	800481c <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b0a      	cmp	r3, #10
 8005bb6:	d90b      	bls.n	8005bd0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2205      	movs	r2, #5
 8005bc8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e012      	b.n	8005bf6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e5      	bne.n	8005baa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e006      	b.n	8005bf6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
  }
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b089      	sub	sp, #36	; 0x24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c12:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c1c:	7ffb      	ldrb	r3, [r7, #31]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d003      	beq.n	8005c2a <HAL_CAN_AddTxMessage+0x2c>
 8005c22:	7ffb      	ldrb	r3, [r7, #31]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	f040 80b8 	bne.w	8005d9a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d105      	bne.n	8005c4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 80a0 	beq.w	8005d8a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	0e1b      	lsrs	r3, r3, #24
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d907      	bls.n	8005c6a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e09e      	b.n	8005da8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	409a      	lsls	r2, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10d      	bne.n	8005c98 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	6809      	ldr	r1, [r1, #0]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	3318      	adds	r3, #24
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	440b      	add	r3, r1
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e00f      	b.n	8005cb8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005ca2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005ca8:	68f9      	ldr	r1, [r7, #12]
 8005caa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005cac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	3318      	adds	r3, #24
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	440b      	add	r3, r1
 8005cb6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6819      	ldr	r1, [r3, #0]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	440b      	add	r3, r1
 8005cc8:	3304      	adds	r3, #4
 8005cca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	7d1b      	ldrb	r3, [r3, #20]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d111      	bne.n	8005cf8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	3318      	adds	r3, #24
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	4413      	add	r3, r2
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	6811      	ldr	r1, [r2, #0]
 8005ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	3318      	adds	r3, #24
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	440b      	add	r3, r1
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3307      	adds	r3, #7
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	061a      	lsls	r2, r3, #24
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3306      	adds	r3, #6
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3305      	adds	r3, #5
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	4313      	orrs	r3, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	3204      	adds	r2, #4
 8005d18:	7812      	ldrb	r2, [r2, #0]
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	6811      	ldr	r1, [r2, #0]
 8005d20:	ea43 0200 	orr.w	r2, r3, r0
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	440b      	add	r3, r1
 8005d2a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005d2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3303      	adds	r3, #3
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	061a      	lsls	r2, r3, #24
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3302      	adds	r3, #2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	041b      	lsls	r3, r3, #16
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3301      	adds	r3, #1
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	7812      	ldrb	r2, [r2, #0]
 8005d50:	4610      	mov	r0, r2
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	6811      	ldr	r1, [r2, #0]
 8005d56:	ea43 0200 	orr.w	r2, r3, r0
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	440b      	add	r3, r1
 8005d60:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005d64:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	3318      	adds	r3, #24
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	4413      	add	r3, r2
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	6811      	ldr	r1, [r2, #0]
 8005d78:	f043 0201 	orr.w	r2, r3, #1
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	3318      	adds	r3, #24
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	440b      	add	r3, r1
 8005d84:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	e00e      	b.n	8005da8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e006      	b.n	8005da8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
  }
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3724      	adds	r7, #36	; 0x24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dc8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d003      	beq.n	8005dd8 <HAL_CAN_GetRxMessage+0x24>
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	f040 80f3 	bne.w	8005fbe <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10e      	bne.n	8005dfc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d116      	bne.n	8005e1a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0e7      	b.n	8005fcc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d107      	bne.n	8005e1a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e0d8      	b.n	8005fcc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	331b      	adds	r3, #27
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	4413      	add	r3, r2
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0204 	and.w	r2, r3, #4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10c      	bne.n	8005e52 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	331b      	adds	r3, #27
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	4413      	add	r3, r2
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	0d5b      	lsrs	r3, r3, #21
 8005e48:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e00b      	b.n	8005e6a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	331b      	adds	r3, #27
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	4413      	add	r3, r2
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	08db      	lsrs	r3, r3, #3
 8005e62:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	331b      	adds	r3, #27
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	4413      	add	r3, r2
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0202 	and.w	r2, r3, #2
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	331b      	adds	r3, #27
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	331b      	adds	r3, #27
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	331b      	adds	r3, #27
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	4413      	add	r3, r2
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	0c1b      	lsrs	r3, r3, #16
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	0a1a      	lsrs	r2, r3, #8
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	0c1a      	lsrs	r2, r3, #16
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	3302      	adds	r3, #2
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	0e1a      	lsrs	r2, r3, #24
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	3303      	adds	r3, #3
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	0a1a      	lsrs	r2, r3, #8
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	3305      	adds	r3, #5
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	0c1a      	lsrs	r2, r3, #16
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	3306      	adds	r3, #6
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	0e1a      	lsrs	r2, r3, #24
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	3307      	adds	r3, #7
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d108      	bne.n	8005faa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0220 	orr.w	r2, r2, #32
 8005fa6:	60da      	str	r2, [r3, #12]
 8005fa8:	e007      	b.n	8005fba <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0220 	orr.w	r2, r2, #32
 8005fb8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e006      	b.n	8005fcc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
  }
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fe8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d002      	beq.n	8005ff6 <HAL_CAN_ActivateNotification+0x1e>
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d109      	bne.n	800600a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6959      	ldr	r1, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e006      	b.n	8006018 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
  }
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	; 0x28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800602c:	2300      	movs	r3, #0
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d07c      	beq.n	8006164 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d023      	beq.n	80060bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2201      	movs	r2, #1
 800607a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f983 	bl	8006392 <HAL_CAN_TxMailbox0CompleteCallback>
 800608c:	e016      	b.n	80060bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
 80060a0:	e00c      	b.n	80060bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
 80060b4:	e002      	b.n	80060bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f989 	bl	80063ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d024      	beq.n	8006110 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f963 	bl	80063a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80060e0:	e016      	b.n	8006110 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
 80060f4:	e00c      	b.n	8006110 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
 8006108:	e002      	b.n	8006110 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f969 	bl	80063e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d024      	beq.n	8006164 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006122:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f943 	bl	80063ba <HAL_CAN_TxMailbox2CompleteCallback>
 8006134:	e016      	b.n	8006164 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
 8006148:	e00c      	b.n	8006164 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
 800615c:	e002      	b.n	8006164 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f949 	bl	80063f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00c      	beq.n	8006188 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800617e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2210      	movs	r2, #16
 8006186:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00b      	beq.n	80061aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2208      	movs	r2, #8
 80061a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f930 	bl	800640a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d009      	beq.n	80061c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fc fa3e 	bl	8002644 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00c      	beq.n	80061ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2210      	movs	r2, #16
 80061ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d006      	beq.n	800620e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2208      	movs	r2, #8
 8006206:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f912 	bl	8006432 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f8f9 	bl	800641e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2210      	movs	r2, #16
 8006246:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f8fc 	bl	8006446 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d006      	beq.n	8006270 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2208      	movs	r2, #8
 8006268:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f8f5 	bl	800645a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d07b      	beq.n	8006372 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d072      	beq.n	800636a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	f043 0301 	orr.w	r3, r3, #1
 800629e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	f043 0304 	orr.w	r3, r3, #4
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d043      	beq.n	800636a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d03e      	beq.n	800636a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062f2:	2b60      	cmp	r3, #96	; 0x60
 80062f4:	d02b      	beq.n	800634e <HAL_CAN_IRQHandler+0x32a>
 80062f6:	2b60      	cmp	r3, #96	; 0x60
 80062f8:	d82e      	bhi.n	8006358 <HAL_CAN_IRQHandler+0x334>
 80062fa:	2b50      	cmp	r3, #80	; 0x50
 80062fc:	d022      	beq.n	8006344 <HAL_CAN_IRQHandler+0x320>
 80062fe:	2b50      	cmp	r3, #80	; 0x50
 8006300:	d82a      	bhi.n	8006358 <HAL_CAN_IRQHandler+0x334>
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d019      	beq.n	800633a <HAL_CAN_IRQHandler+0x316>
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d826      	bhi.n	8006358 <HAL_CAN_IRQHandler+0x334>
 800630a:	2b30      	cmp	r3, #48	; 0x30
 800630c:	d010      	beq.n	8006330 <HAL_CAN_IRQHandler+0x30c>
 800630e:	2b30      	cmp	r3, #48	; 0x30
 8006310:	d822      	bhi.n	8006358 <HAL_CAN_IRQHandler+0x334>
 8006312:	2b10      	cmp	r3, #16
 8006314:	d002      	beq.n	800631c <HAL_CAN_IRQHandler+0x2f8>
 8006316:	2b20      	cmp	r3, #32
 8006318:	d005      	beq.n	8006326 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800631a:	e01d      	b.n	8006358 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	f043 0308 	orr.w	r3, r3, #8
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006324:	e019      	b.n	800635a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	f043 0310 	orr.w	r3, r3, #16
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800632e:	e014      	b.n	800635a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	f043 0320 	orr.w	r3, r3, #32
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006338:	e00f      	b.n	800635a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006342:	e00a      	b.n	800635a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800634c:	e005      	b.n	800635a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006356:	e000      	b.n	800635a <HAL_CAN_IRQHandler+0x336>
            break;
 8006358:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006368:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2204      	movs	r2, #4
 8006370:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f872 	bl	800646e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800638a:	bf00      	nop
 800638c:	3728      	adds	r7, #40	; 0x28
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006494:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064a0:	4013      	ands	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064b6:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <__NVIC_SetPriorityGrouping+0x44>)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	60d3      	str	r3, [r2, #12]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	e000ed00 	.word	0xe000ed00

080064cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <__NVIC_GetPriorityGrouping+0x18>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	0a1b      	lsrs	r3, r3, #8
 80064d6:	f003 0307 	and.w	r3, r3, #7
}
 80064da:	4618      	mov	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	e000ed00 	.word	0xe000ed00

080064e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	db0b      	blt.n	8006512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	f003 021f 	and.w	r2, r3, #31
 8006500:	4907      	ldr	r1, [pc, #28]	; (8006520 <__NVIC_EnableIRQ+0x38>)
 8006502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	2001      	movs	r0, #1
 800650a:	fa00 f202 	lsl.w	r2, r0, r2
 800650e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	e000e100 	.word	0xe000e100

08006524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	6039      	str	r1, [r7, #0]
 800652e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006534:	2b00      	cmp	r3, #0
 8006536:	db0a      	blt.n	800654e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	490c      	ldr	r1, [pc, #48]	; (8006570 <__NVIC_SetPriority+0x4c>)
 800653e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006542:	0112      	lsls	r2, r2, #4
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	440b      	add	r3, r1
 8006548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800654c:	e00a      	b.n	8006564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4908      	ldr	r1, [pc, #32]	; (8006574 <__NVIC_SetPriority+0x50>)
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	3b04      	subs	r3, #4
 800655c:	0112      	lsls	r2, r2, #4
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	440b      	add	r3, r1
 8006562:	761a      	strb	r2, [r3, #24]
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	e000e100 	.word	0xe000e100
 8006574:	e000ed00 	.word	0xe000ed00

08006578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	; 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f1c3 0307 	rsb	r3, r3, #7
 8006592:	2b04      	cmp	r3, #4
 8006594:	bf28      	it	cs
 8006596:	2304      	movcs	r3, #4
 8006598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	3304      	adds	r3, #4
 800659e:	2b06      	cmp	r3, #6
 80065a0:	d902      	bls.n	80065a8 <NVIC_EncodePriority+0x30>
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	3b03      	subs	r3, #3
 80065a6:	e000      	b.n	80065aa <NVIC_EncodePriority+0x32>
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43da      	mvns	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	401a      	ands	r2, r3
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065c0:	f04f 31ff 	mov.w	r1, #4294967295
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	43d9      	mvns	r1, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065d0:	4313      	orrs	r3, r2
         );
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3724      	adds	r7, #36	; 0x24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065f0:	d301      	bcc.n	80065f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065f2:	2301      	movs	r3, #1
 80065f4:	e00f      	b.n	8006616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065f6:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <SysTick_Config+0x40>)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065fe:	210f      	movs	r1, #15
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	f7ff ff8e 	bl	8006524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <SysTick_Config+0x40>)
 800660a:	2200      	movs	r2, #0
 800660c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800660e:	4b04      	ldr	r3, [pc, #16]	; (8006620 <SysTick_Config+0x40>)
 8006610:	2207      	movs	r2, #7
 8006612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	e000e010 	.word	0xe000e010

08006624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff29 	bl	8006484 <__NVIC_SetPriorityGrouping>
}
 8006632:	bf00      	nop
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	4603      	mov	r3, r0
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800664c:	f7ff ff3e 	bl	80064cc <__NVIC_GetPriorityGrouping>
 8006650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	6978      	ldr	r0, [r7, #20]
 8006658:	f7ff ff8e 	bl	8006578 <NVIC_EncodePriority>
 800665c:	4602      	mov	r2, r0
 800665e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006662:	4611      	mov	r1, r2
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff ff5d 	bl	8006524 <__NVIC_SetPriority>
}
 800666a:	bf00      	nop
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	4603      	mov	r3, r0
 800667a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800667c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff ff31 	bl	80064e8 <__NVIC_EnableIRQ>
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff ffa2 	bl	80065e0 <SysTick_Config>
 800669c:	4603      	mov	r3, r0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066b6:	e166      	b.n	8006986 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	2101      	movs	r1, #1
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	fa01 f303 	lsl.w	r3, r1, r3
 80066c4:	4013      	ands	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8158 	beq.w	8006980 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d005      	beq.n	80066e8 <HAL_GPIO_Init+0x40>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d130      	bne.n	800674a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	2203      	movs	r2, #3
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	43db      	mvns	r3, r3
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4013      	ands	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800671e:	2201      	movs	r2, #1
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	43db      	mvns	r3, r3
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4013      	ands	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	091b      	lsrs	r3, r3, #4
 8006734:	f003 0201 	and.w	r2, r3, #1
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b03      	cmp	r3, #3
 8006754:	d017      	beq.n	8006786 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	2203      	movs	r2, #3
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	43db      	mvns	r3, r3
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4013      	ands	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	fa02 f303 	lsl.w	r3, r2, r3
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d123      	bne.n	80067da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	08da      	lsrs	r2, r3, #3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3208      	adds	r2, #8
 800679a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	220f      	movs	r2, #15
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4013      	ands	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	08da      	lsrs	r2, r3, #3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3208      	adds	r2, #8
 80067d4:	6939      	ldr	r1, [r7, #16]
 80067d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	2203      	movs	r2, #3
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	43db      	mvns	r3, r3
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4013      	ands	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f003 0203 	and.w	r2, r3, #3
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 80b2 	beq.w	8006980 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800681c:	4b61      	ldr	r3, [pc, #388]	; (80069a4 <HAL_GPIO_Init+0x2fc>)
 800681e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006820:	4a60      	ldr	r2, [pc, #384]	; (80069a4 <HAL_GPIO_Init+0x2fc>)
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	6613      	str	r3, [r2, #96]	; 0x60
 8006828:	4b5e      	ldr	r3, [pc, #376]	; (80069a4 <HAL_GPIO_Init+0x2fc>)
 800682a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006834:	4a5c      	ldr	r2, [pc, #368]	; (80069a8 <HAL_GPIO_Init+0x300>)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	089b      	lsrs	r3, r3, #2
 800683a:	3302      	adds	r3, #2
 800683c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	220f      	movs	r2, #15
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	43db      	mvns	r3, r3
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4013      	ands	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800685e:	d02b      	beq.n	80068b8 <HAL_GPIO_Init+0x210>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a52      	ldr	r2, [pc, #328]	; (80069ac <HAL_GPIO_Init+0x304>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d025      	beq.n	80068b4 <HAL_GPIO_Init+0x20c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a51      	ldr	r2, [pc, #324]	; (80069b0 <HAL_GPIO_Init+0x308>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d01f      	beq.n	80068b0 <HAL_GPIO_Init+0x208>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a50      	ldr	r2, [pc, #320]	; (80069b4 <HAL_GPIO_Init+0x30c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d019      	beq.n	80068ac <HAL_GPIO_Init+0x204>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a4f      	ldr	r2, [pc, #316]	; (80069b8 <HAL_GPIO_Init+0x310>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d013      	beq.n	80068a8 <HAL_GPIO_Init+0x200>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a4e      	ldr	r2, [pc, #312]	; (80069bc <HAL_GPIO_Init+0x314>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00d      	beq.n	80068a4 <HAL_GPIO_Init+0x1fc>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a4d      	ldr	r2, [pc, #308]	; (80069c0 <HAL_GPIO_Init+0x318>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d007      	beq.n	80068a0 <HAL_GPIO_Init+0x1f8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a4c      	ldr	r2, [pc, #304]	; (80069c4 <HAL_GPIO_Init+0x31c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d101      	bne.n	800689c <HAL_GPIO_Init+0x1f4>
 8006898:	2307      	movs	r3, #7
 800689a:	e00e      	b.n	80068ba <HAL_GPIO_Init+0x212>
 800689c:	2308      	movs	r3, #8
 800689e:	e00c      	b.n	80068ba <HAL_GPIO_Init+0x212>
 80068a0:	2306      	movs	r3, #6
 80068a2:	e00a      	b.n	80068ba <HAL_GPIO_Init+0x212>
 80068a4:	2305      	movs	r3, #5
 80068a6:	e008      	b.n	80068ba <HAL_GPIO_Init+0x212>
 80068a8:	2304      	movs	r3, #4
 80068aa:	e006      	b.n	80068ba <HAL_GPIO_Init+0x212>
 80068ac:	2303      	movs	r3, #3
 80068ae:	e004      	b.n	80068ba <HAL_GPIO_Init+0x212>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e002      	b.n	80068ba <HAL_GPIO_Init+0x212>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <HAL_GPIO_Init+0x212>
 80068b8:	2300      	movs	r3, #0
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	f002 0203 	and.w	r2, r2, #3
 80068c0:	0092      	lsls	r2, r2, #2
 80068c2:	4093      	lsls	r3, r2
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80068ca:	4937      	ldr	r1, [pc, #220]	; (80069a8 <HAL_GPIO_Init+0x300>)
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	089b      	lsrs	r3, r3, #2
 80068d0:	3302      	adds	r3, #2
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068d8:	4b3b      	ldr	r3, [pc, #236]	; (80069c8 <HAL_GPIO_Init+0x320>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4013      	ands	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80068fc:	4a32      	ldr	r2, [pc, #200]	; (80069c8 <HAL_GPIO_Init+0x320>)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006902:	4b31      	ldr	r3, [pc, #196]	; (80069c8 <HAL_GPIO_Init+0x320>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	43db      	mvns	r3, r3
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4013      	ands	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006926:	4a28      	ldr	r2, [pc, #160]	; (80069c8 <HAL_GPIO_Init+0x320>)
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800692c:	4b26      	ldr	r3, [pc, #152]	; (80069c8 <HAL_GPIO_Init+0x320>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	43db      	mvns	r3, r3
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4013      	ands	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006950:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <HAL_GPIO_Init+0x320>)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006956:	4b1c      	ldr	r3, [pc, #112]	; (80069c8 <HAL_GPIO_Init+0x320>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	43db      	mvns	r3, r3
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4013      	ands	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800697a:	4a13      	ldr	r2, [pc, #76]	; (80069c8 <HAL_GPIO_Init+0x320>)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3301      	adds	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	f47f ae91 	bne.w	80066b8 <HAL_GPIO_Init+0x10>
  }
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40021000 	.word	0x40021000
 80069a8:	40010000 	.word	0x40010000
 80069ac:	48000400 	.word	0x48000400
 80069b0:	48000800 	.word	0x48000800
 80069b4:	48000c00 	.word	0x48000c00
 80069b8:	48001000 	.word	0x48001000
 80069bc:	48001400 	.word	0x48001400
 80069c0:	48001800 	.word	0x48001800
 80069c4:	48001c00 	.word	0x48001c00
 80069c8:	40010400 	.word	0x40010400

080069cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	887b      	ldrh	r3, [r7, #2]
 80069de:	4013      	ands	r3, r2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069e4:	2301      	movs	r3, #1
 80069e6:	73fb      	strb	r3, [r7, #15]
 80069e8:	e001      	b.n	80069ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	807b      	strh	r3, [r7, #2]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a0c:	787b      	ldrb	r3, [r7, #1]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a12:	887a      	ldrh	r2, [r7, #2]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a18:	e002      	b.n	8006a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a1a:	887a      	ldrh	r2, [r7, #2]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a30:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3c:	d102      	bne.n	8006a44 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a42:	e00b      	b.n	8006a5c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006a44:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a52:	d102      	bne.n	8006a5a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a58:	e000      	b.n	8006a5c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006a5a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	40007000 	.word	0x40007000

08006a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d141      	bne.n	8006afe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a7a:	4b4b      	ldr	r3, [pc, #300]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a86:	d131      	bne.n	8006aec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a88:	4b47      	ldr	r3, [pc, #284]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a8e:	4a46      	ldr	r2, [pc, #280]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a98:	4b43      	ldr	r3, [pc, #268]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006aa0:	4a41      	ldr	r2, [pc, #260]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006aa8:	4b40      	ldr	r3, [pc, #256]	; (8006bac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2232      	movs	r2, #50	; 0x32
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
 8006ab2:	4a3f      	ldr	r2, [pc, #252]	; (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	0c9b      	lsrs	r3, r3, #18
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006abe:	e002      	b.n	8006ac6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ac6:	4b38      	ldr	r3, [pc, #224]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad2:	d102      	bne.n	8006ada <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f2      	bne.n	8006ac0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ada:	4b33      	ldr	r3, [pc, #204]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae6:	d158      	bne.n	8006b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e057      	b.n	8006b9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006aec:	4b2e      	ldr	r3, [pc, #184]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af2:	4a2d      	ldr	r2, [pc, #180]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006afc:	e04d      	b.n	8006b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b04:	d141      	bne.n	8006b8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b06:	4b28      	ldr	r3, [pc, #160]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b12:	d131      	bne.n	8006b78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b14:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b1a:	4a23      	ldr	r2, [pc, #140]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b24:	4b20      	ldr	r3, [pc, #128]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006b34:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2232      	movs	r2, #50	; 0x32
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b40:	fba2 2303 	umull	r2, r3, r2, r3
 8006b44:	0c9b      	lsrs	r3, r3, #18
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b4a:	e002      	b.n	8006b52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b52:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b5e:	d102      	bne.n	8006b66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f2      	bne.n	8006b4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b66:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b72:	d112      	bne.n	8006b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e011      	b.n	8006b9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b78:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b7e:	4a0a      	ldr	r2, [pc, #40]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006b88:	e007      	b.n	8006b9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b8a:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b92:	4a05      	ldr	r2, [pc, #20]	; (8006ba8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b98:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	40007000 	.word	0x40007000
 8006bac:	20000214 	.word	0x20000214
 8006bb0:	431bde83 	.word	0x431bde83

08006bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	; 0x28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	f000 bc76 	b.w	80074b4 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bc8:	4b97      	ldr	r3, [pc, #604]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 030c 	and.w	r3, r3, #12
 8006bd0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bd2:	4b95      	ldr	r3, [pc, #596]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80e6 	beq.w	8006db6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d007      	beq.n	8006c00 <HAL_RCC_OscConfig+0x4c>
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	f040 808d 	bne.w	8006d12 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	f040 8089 	bne.w	8006d12 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c00:	4b89      	ldr	r3, [pc, #548]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <HAL_RCC_OscConfig+0x66>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	f000 bc4d 	b.w	80074b4 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c1e:	4b82      	ldr	r3, [pc, #520]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <HAL_RCC_OscConfig+0x80>
 8006c2a:	4b7f      	ldr	r3, [pc, #508]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c32:	e005      	b.n	8006c40 <HAL_RCC_OscConfig+0x8c>
 8006c34:	4b7c      	ldr	r3, [pc, #496]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c3a:	091b      	lsrs	r3, r3, #4
 8006c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d224      	bcs.n	8006c8e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fdf3 	bl	8007834 <RCC_SetFlashLatencyFromMSIRange>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f000 bc2d 	b.w	80074b4 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c5a:	4b73      	ldr	r3, [pc, #460]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a72      	ldr	r2, [pc, #456]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c60:	f043 0308 	orr.w	r3, r3, #8
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	4b70      	ldr	r3, [pc, #448]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	496d      	ldr	r1, [pc, #436]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c78:	4b6b      	ldr	r3, [pc, #428]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	4968      	ldr	r1, [pc, #416]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	604b      	str	r3, [r1, #4]
 8006c8c:	e025      	b.n	8006cda <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c8e:	4b66      	ldr	r3, [pc, #408]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a65      	ldr	r2, [pc, #404]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c94:	f043 0308 	orr.w	r3, r3, #8
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	4b63      	ldr	r3, [pc, #396]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	4960      	ldr	r1, [pc, #384]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cac:	4b5e      	ldr	r3, [pc, #376]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	495b      	ldr	r1, [pc, #364]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fdb2 	bl	8007834 <RCC_SetFlashLatencyFromMSIRange>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e3ec      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cda:	f000 fd1f 	bl	800771c <HAL_RCC_GetSysClockFreq>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	4b51      	ldr	r3, [pc, #324]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	091b      	lsrs	r3, r3, #4
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	4950      	ldr	r1, [pc, #320]	; (8006e2c <HAL_RCC_OscConfig+0x278>)
 8006cec:	5ccb      	ldrb	r3, [r1, r3]
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf6:	4a4e      	ldr	r2, [pc, #312]	; (8006e30 <HAL_RCC_OscConfig+0x27c>)
 8006cf8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006cfa:	4b4e      	ldr	r3, [pc, #312]	; (8006e34 <HAL_RCC_OscConfig+0x280>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fd fd3c 	bl	800477c <HAL_InitTick>
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d052      	beq.n	8006db4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
 8006d10:	e3d0      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d032      	beq.n	8006d80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006d1a:	4b43      	ldr	r3, [pc, #268]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a42      	ldr	r2, [pc, #264]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d20:	f043 0301 	orr.w	r3, r3, #1
 8006d24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d26:	f7fd fd79 	bl	800481c <HAL_GetTick>
 8006d2a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d2e:	f7fd fd75 	bl	800481c <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e3b9      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d40:	4b39      	ldr	r3, [pc, #228]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0f0      	beq.n	8006d2e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d4c:	4b36      	ldr	r3, [pc, #216]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a35      	ldr	r2, [pc, #212]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d52:	f043 0308 	orr.w	r3, r3, #8
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	4b33      	ldr	r3, [pc, #204]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	4930      	ldr	r1, [pc, #192]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d6a:	4b2f      	ldr	r3, [pc, #188]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	021b      	lsls	r3, r3, #8
 8006d78:	492b      	ldr	r1, [pc, #172]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	604b      	str	r3, [r1, #4]
 8006d7e:	e01a      	b.n	8006db6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006d80:	4b29      	ldr	r3, [pc, #164]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a28      	ldr	r2, [pc, #160]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006d86:	f023 0301 	bic.w	r3, r3, #1
 8006d8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d8c:	f7fd fd46 	bl	800481c <HAL_GetTick>
 8006d90:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d94:	f7fd fd42 	bl	800481c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e386      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006da6:	4b20      	ldr	r3, [pc, #128]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f0      	bne.n	8006d94 <HAL_RCC_OscConfig+0x1e0>
 8006db2:	e000      	b.n	8006db6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006db4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d073      	beq.n	8006eaa <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d005      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x220>
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	2b0c      	cmp	r3, #12
 8006dcc:	d10e      	bne.n	8006dec <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d10b      	bne.n	8006dec <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd4:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d063      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x2f4>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d15f      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e363      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df4:	d106      	bne.n	8006e04 <HAL_RCC_OscConfig+0x250>
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a0b      	ldr	r2, [pc, #44]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	e025      	b.n	8006e50 <HAL_RCC_OscConfig+0x29c>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e0c:	d114      	bne.n	8006e38 <HAL_RCC_OscConfig+0x284>
 8006e0e:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a05      	ldr	r2, [pc, #20]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	4b03      	ldr	r3, [pc, #12]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a02      	ldr	r2, [pc, #8]	; (8006e28 <HAL_RCC_OscConfig+0x274>)
 8006e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e013      	b.n	8006e50 <HAL_RCC_OscConfig+0x29c>
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	0800994c 	.word	0x0800994c
 8006e30:	20000214 	.word	0x20000214
 8006e34:	20000218 	.word	0x20000218
 8006e38:	4b8f      	ldr	r3, [pc, #572]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a8e      	ldr	r2, [pc, #568]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	4b8c      	ldr	r3, [pc, #560]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a8b      	ldr	r2, [pc, #556]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d013      	beq.n	8006e80 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fd fce0 	bl	800481c <HAL_GetTick>
 8006e5c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e60:	f7fd fcdc 	bl	800481c <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b64      	cmp	r3, #100	; 0x64
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e320      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e72:	4b81      	ldr	r3, [pc, #516]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0f0      	beq.n	8006e60 <HAL_RCC_OscConfig+0x2ac>
 8006e7e:	e014      	b.n	8006eaa <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fd fccc 	bl	800481c <HAL_GetTick>
 8006e84:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e88:	f7fd fcc8 	bl	800481c <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b64      	cmp	r3, #100	; 0x64
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e30c      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e9a:	4b77      	ldr	r3, [pc, #476]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x2d4>
 8006ea6:	e000      	b.n	8006eaa <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d060      	beq.n	8006f78 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d005      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x314>
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	2b0c      	cmp	r3, #12
 8006ec0:	d119      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d116      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ec8:	4b6b      	ldr	r3, [pc, #428]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x32c>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e2e9      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee0:	4b65      	ldr	r3, [pc, #404]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	061b      	lsls	r3, r3, #24
 8006eee:	4962      	ldr	r1, [pc, #392]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ef4:	e040      	b.n	8006f78 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d023      	beq.n	8006f46 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006efe:	4b5e      	ldr	r3, [pc, #376]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a5d      	ldr	r2, [pc, #372]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0a:	f7fd fc87 	bl	800481c <HAL_GetTick>
 8006f0e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f10:	e008      	b.n	8006f24 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f12:	f7fd fc83 	bl	800481c <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e2c7      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f24:	4b54      	ldr	r3, [pc, #336]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0f0      	beq.n	8006f12 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f30:	4b51      	ldr	r3, [pc, #324]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	061b      	lsls	r3, r3, #24
 8006f3e:	494e      	ldr	r1, [pc, #312]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	604b      	str	r3, [r1, #4]
 8006f44:	e018      	b.n	8006f78 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f46:	4b4c      	ldr	r3, [pc, #304]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a4b      	ldr	r2, [pc, #300]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f52:	f7fd fc63 	bl	800481c <HAL_GetTick>
 8006f56:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f58:	e008      	b.n	8006f6c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f5a:	f7fd fc5f 	bl	800481c <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e2a3      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f6c:	4b42      	ldr	r3, [pc, #264]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1f0      	bne.n	8006f5a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8082 	beq.w	800708a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d05f      	beq.n	800704e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8006f8e:	4b3a      	ldr	r3, [pc, #232]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f94:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d037      	beq.n	8007014 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d006      	beq.n	8006fbc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e27b      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d01b      	beq.n	8006ffe <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8006fc6:	4b2c      	ldr	r3, [pc, #176]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fcc:	4a2a      	ldr	r2, [pc, #168]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006fce:	f023 0301 	bic.w	r3, r3, #1
 8006fd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006fd6:	f7fd fc21 	bl	800481c <HAL_GetTick>
 8006fda:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fde:	f7fd fc1d 	bl	800481c <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b11      	cmp	r3, #17
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e261      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ff0:	4b21      	ldr	r3, [pc, #132]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8006ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1ef      	bne.n	8006fde <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006ffe:	4b1e      	ldr	r3, [pc, #120]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8007000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007004:	f023 0210 	bic.w	r2, r3, #16
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	491a      	ldr	r1, [pc, #104]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007014:	4b18      	ldr	r3, [pc, #96]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8007016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800701a:	4a17      	ldr	r2, [pc, #92]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007024:	f7fd fbfa 	bl	800481c <HAL_GetTick>
 8007028:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800702c:	f7fd fbf6 	bl	800481c <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b11      	cmp	r3, #17
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e23a      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800703e:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8007040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0ef      	beq.n	800702c <HAL_RCC_OscConfig+0x478>
 800704c:	e01d      	b.n	800708a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8007050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007054:	4a08      	ldr	r2, [pc, #32]	; (8007078 <HAL_RCC_OscConfig+0x4c4>)
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800705e:	f7fd fbdd 	bl	800481c <HAL_GetTick>
 8007062:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007064:	e00a      	b.n	800707c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007066:	f7fd fbd9 	bl	800481c <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b11      	cmp	r3, #17
 8007072:	d903      	bls.n	800707c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e21d      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
 8007078:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800707c:	4b83      	ldr	r3, [pc, #524]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 800707e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1ed      	bne.n	8007066 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0304 	and.w	r3, r3, #4
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 80bd 	beq.w	8007212 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007098:	2300      	movs	r3, #0
 800709a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800709e:	4b7b      	ldr	r3, [pc, #492]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 80070a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10e      	bne.n	80070c8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070aa:	4b78      	ldr	r3, [pc, #480]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 80070ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ae:	4a77      	ldr	r2, [pc, #476]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 80070b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b4:	6593      	str	r3, [r2, #88]	; 0x58
 80070b6:	4b75      	ldr	r3, [pc, #468]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80070c2:	2301      	movs	r3, #1
 80070c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070c8:	4b71      	ldr	r3, [pc, #452]	; (8007290 <HAL_RCC_OscConfig+0x6dc>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d118      	bne.n	8007106 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070d4:	4b6e      	ldr	r3, [pc, #440]	; (8007290 <HAL_RCC_OscConfig+0x6dc>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a6d      	ldr	r2, [pc, #436]	; (8007290 <HAL_RCC_OscConfig+0x6dc>)
 80070da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070e0:	f7fd fb9c 	bl	800481c <HAL_GetTick>
 80070e4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e8:	f7fd fb98 	bl	800481c <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e1dc      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070fa:	4b65      	ldr	r3, [pc, #404]	; (8007290 <HAL_RCC_OscConfig+0x6dc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d02c      	beq.n	800716c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8007112:	4b5e      	ldr	r3, [pc, #376]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007118:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007124:	4959      	ldr	r1, [pc, #356]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d010      	beq.n	800715a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007138:	4b54      	ldr	r3, [pc, #336]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713e:	4a53      	ldr	r2, [pc, #332]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007140:	f043 0304 	orr.w	r3, r3, #4
 8007144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007148:	4b50      	ldr	r3, [pc, #320]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714e:	4a4f      	ldr	r2, [pc, #316]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007150:	f043 0301 	orr.w	r3, r3, #1
 8007154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007158:	e018      	b.n	800718c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800715a:	4b4c      	ldr	r3, [pc, #304]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007160:	4a4a      	ldr	r2, [pc, #296]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800716a:	e00f      	b.n	800718c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800716c:	4b47      	ldr	r3, [pc, #284]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 800716e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007172:	4a46      	ldr	r2, [pc, #280]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007174:	f023 0301 	bic.w	r3, r3, #1
 8007178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800717c:	4b43      	ldr	r3, [pc, #268]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007182:	4a42      	ldr	r2, [pc, #264]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007184:	f023 0304 	bic.w	r3, r3, #4
 8007188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d016      	beq.n	80071c2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007194:	f7fd fb42 	bl	800481c <HAL_GetTick>
 8007198:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800719a:	e00a      	b.n	80071b2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800719c:	f7fd fb3e 	bl	800481c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e180      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071b2:	4b36      	ldr	r3, [pc, #216]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0ed      	beq.n	800719c <HAL_RCC_OscConfig+0x5e8>
 80071c0:	e01d      	b.n	80071fe <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c2:	f7fd fb2b 	bl	800481c <HAL_GetTick>
 80071c6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071c8:	e00a      	b.n	80071e0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ca:	f7fd fb27 	bl	800481c <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d8:	4293      	cmp	r3, r2
 80071da:	d901      	bls.n	80071e0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e169      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071e0:	4b2a      	ldr	r3, [pc, #168]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 80071e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1ed      	bne.n	80071ca <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80071ee:	4b27      	ldr	r3, [pc, #156]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 80071f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f4:	4a25      	ldr	r2, [pc, #148]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 80071f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007202:	2b01      	cmp	r3, #1
 8007204:	d105      	bne.n	8007212 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007206:	4b21      	ldr	r3, [pc, #132]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	4a20      	ldr	r2, [pc, #128]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 800720c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007210:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d041      	beq.n	80072a2 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01c      	beq.n	8007260 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007226:	4b19      	ldr	r3, [pc, #100]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800722c:	4a17      	ldr	r2, [pc, #92]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007236:	f7fd faf1 	bl	800481c <HAL_GetTick>
 800723a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800723c:	e008      	b.n	8007250 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800723e:	f7fd faed 	bl	800481c <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e131      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007250:	4b0e      	ldr	r3, [pc, #56]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0ef      	beq.n	800723e <HAL_RCC_OscConfig+0x68a>
 800725e:	e020      	b.n	80072a2 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007260:	4b0a      	ldr	r3, [pc, #40]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007266:	4a09      	ldr	r2, [pc, #36]	; (800728c <HAL_RCC_OscConfig+0x6d8>)
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007270:	f7fd fad4 	bl	800481c <HAL_GetTick>
 8007274:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007276:	e00d      	b.n	8007294 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007278:	f7fd fad0 	bl	800481c <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d906      	bls.n	8007294 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e114      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
 800728a:	bf00      	nop
 800728c:	40021000 	.word	0x40021000
 8007290:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007294:	4b89      	ldr	r3, [pc, #548]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1ea      	bne.n	8007278 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 8103 	beq.w	80074b2 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	f040 80cb 	bne.w	800744c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80072b6:	4b81      	ldr	r3, [pc, #516]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	f003 0203 	and.w	r2, r3, #3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d12c      	bne.n	8007324 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d4:	3b01      	subs	r3, #1
 80072d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d8:	429a      	cmp	r2, r3
 80072da:	d123      	bne.n	8007324 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d11b      	bne.n	8007324 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d113      	bne.n	8007324 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	3b01      	subs	r3, #1
 800730a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800730c:	429a      	cmp	r2, r3
 800730e:	d109      	bne.n	8007324 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	3b01      	subs	r3, #1
 800731e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007320:	429a      	cmp	r2, r3
 8007322:	d06d      	beq.n	8007400 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	2b0c      	cmp	r3, #12
 8007328:	d068      	beq.n	80073fc <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800732a:	4b64      	ldr	r3, [pc, #400]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d105      	bne.n	8007342 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007336:	4b61      	ldr	r3, [pc, #388]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e0b6      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007346:	4b5d      	ldr	r3, [pc, #372]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a5c      	ldr	r2, [pc, #368]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 800734c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007350:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007352:	f7fd fa63 	bl	800481c <HAL_GetTick>
 8007356:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007358:	e008      	b.n	800736c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800735a:	f7fd fa5f 	bl	800481c <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e0a3      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800736c:	4b53      	ldr	r3, [pc, #332]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f0      	bne.n	800735a <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007378:	4b50      	ldr	r3, [pc, #320]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	4b50      	ldr	r3, [pc, #320]	; (80074c0 <HAL_RCC_OscConfig+0x90c>)
 800737e:	4013      	ands	r3, r2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007388:	3a01      	subs	r2, #1
 800738a:	0112      	lsls	r2, r2, #4
 800738c:	4311      	orrs	r1, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007392:	0212      	lsls	r2, r2, #8
 8007394:	4311      	orrs	r1, r2
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800739a:	0852      	lsrs	r2, r2, #1
 800739c:	3a01      	subs	r2, #1
 800739e:	0552      	lsls	r2, r2, #21
 80073a0:	4311      	orrs	r1, r2
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80073a6:	0852      	lsrs	r2, r2, #1
 80073a8:	3a01      	subs	r2, #1
 80073aa:	0652      	lsls	r2, r2, #25
 80073ac:	4311      	orrs	r1, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073b2:	06d2      	lsls	r2, r2, #27
 80073b4:	430a      	orrs	r2, r1
 80073b6:	4941      	ldr	r1, [pc, #260]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80073bc:	4b3f      	ldr	r3, [pc, #252]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a3e      	ldr	r2, [pc, #248]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 80073c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073c8:	4b3c      	ldr	r3, [pc, #240]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	4a3b      	ldr	r2, [pc, #236]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 80073ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80073d4:	f7fd fa22 	bl	800481c <HAL_GetTick>
 80073d8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073da:	e008      	b.n	80073ee <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073dc:	f7fd fa1e 	bl	800481c <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d901      	bls.n	80073ee <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e062      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073ee:	4b33      	ldr	r3, [pc, #204]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0f0      	beq.n	80073dc <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073fa:	e05a      	b.n	80074b2 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e059      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007400:	4b2e      	ldr	r3, [pc, #184]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d152      	bne.n	80074b2 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800740c:	4b2b      	ldr	r3, [pc, #172]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a2a      	ldr	r2, [pc, #168]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007416:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007418:	4b28      	ldr	r3, [pc, #160]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4a27      	ldr	r2, [pc, #156]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 800741e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007422:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007424:	f7fd f9fa 	bl	800481c <HAL_GetTick>
 8007428:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800742c:	f7fd f9f6 	bl	800481c <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e03a      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800743e:	4b1f      	ldr	r3, [pc, #124]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0f0      	beq.n	800742c <HAL_RCC_OscConfig+0x878>
 800744a:	e032      	b.n	80074b2 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	2b0c      	cmp	r3, #12
 8007450:	d02d      	beq.n	80074ae <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007452:	4b1a      	ldr	r3, [pc, #104]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a19      	ldr	r2, [pc, #100]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800745c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800745e:	4b17      	ldr	r3, [pc, #92]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800746a:	4b14      	ldr	r3, [pc, #80]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	4a13      	ldr	r2, [pc, #76]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007470:	f023 0303 	bic.w	r3, r3, #3
 8007474:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007476:	4b11      	ldr	r3, [pc, #68]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	4a10      	ldr	r2, [pc, #64]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 800747c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007484:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007486:	f7fd f9c9 	bl	800481c <HAL_GetTick>
 800748a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800748e:	f7fd f9c5 	bl	800481c <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e009      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a0:	4b06      	ldr	r3, [pc, #24]	; (80074bc <HAL_RCC_OscConfig+0x908>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1f0      	bne.n	800748e <HAL_RCC_OscConfig+0x8da>
 80074ac:	e001      	b.n	80074b2 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3728      	adds	r7, #40	; 0x28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	40021000 	.word	0x40021000
 80074c0:	019d800c 	.word	0x019d800c

080074c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80074ce:	2300      	movs	r3, #0
 80074d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e10f      	b.n	80076fc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074dc:	4b89      	ldr	r3, [pc, #548]	; (8007704 <HAL_RCC_ClockConfig+0x240>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 030f 	and.w	r3, r3, #15
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d910      	bls.n	800750c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ea:	4b86      	ldr	r3, [pc, #536]	; (8007704 <HAL_RCC_ClockConfig+0x240>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f023 020f 	bic.w	r2, r3, #15
 80074f2:	4984      	ldr	r1, [pc, #528]	; (8007704 <HAL_RCC_ClockConfig+0x240>)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074fa:	4b82      	ldr	r3, [pc, #520]	; (8007704 <HAL_RCC_ClockConfig+0x240>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 030f 	and.w	r3, r3, #15
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d001      	beq.n	800750c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e0f7      	b.n	80076fc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8089 	beq.w	800762c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b03      	cmp	r3, #3
 8007520:	d133      	bne.n	800758a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007522:	4b79      	ldr	r3, [pc, #484]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e0e4      	b.n	80076fc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007532:	f000 f9d9 	bl	80078e8 <RCC_GetSysClockFreqFromPLLSource>
 8007536:	4603      	mov	r3, r0
 8007538:	4a74      	ldr	r2, [pc, #464]	; (800770c <HAL_RCC_ClockConfig+0x248>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d955      	bls.n	80075ea <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800753e:	4b72      	ldr	r3, [pc, #456]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10a      	bne.n	8007560 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800754a:	4b6f      	ldr	r3, [pc, #444]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007552:	4a6d      	ldr	r2, [pc, #436]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 8007554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007558:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800755a:	2380      	movs	r3, #128	; 0x80
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	e044      	b.n	80075ea <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d03e      	beq.n	80075ea <HAL_RCC_ClockConfig+0x126>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d13a      	bne.n	80075ea <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007574:	4b64      	ldr	r3, [pc, #400]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800757c:	4a62      	ldr	r2, [pc, #392]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 800757e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007582:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007584:	2380      	movs	r3, #128	; 0x80
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	e02f      	b.n	80075ea <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d107      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007592:	4b5d      	ldr	r3, [pc, #372]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d115      	bne.n	80075ca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e0ac      	b.n	80076fc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075aa:	4b57      	ldr	r3, [pc, #348]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e0a0      	b.n	80076fc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075ba:	4b53      	ldr	r3, [pc, #332]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e098      	b.n	80076fc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80075ca:	f000 f8a7 	bl	800771c <HAL_RCC_GetSysClockFreq>
 80075ce:	4603      	mov	r3, r0
 80075d0:	4a4e      	ldr	r2, [pc, #312]	; (800770c <HAL_RCC_ClockConfig+0x248>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d909      	bls.n	80075ea <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80075d6:	4b4c      	ldr	r3, [pc, #304]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075de:	4a4a      	ldr	r2, [pc, #296]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 80075e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80075e6:	2380      	movs	r3, #128	; 0x80
 80075e8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075ea:	4b47      	ldr	r3, [pc, #284]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f023 0203 	bic.w	r2, r3, #3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	4944      	ldr	r1, [pc, #272]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075fc:	f7fd f90e 	bl	800481c <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007602:	e00a      	b.n	800761a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007604:	f7fd f90a 	bl	800481c <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007612:	4293      	cmp	r3, r2
 8007614:	d901      	bls.n	800761a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e070      	b.n	80076fc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800761a:	4b3b      	ldr	r3, [pc, #236]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 020c 	and.w	r2, r3, #12
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	429a      	cmp	r2, r3
 800762a:	d1eb      	bne.n	8007604 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d009      	beq.n	800764c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007638:	4b33      	ldr	r3, [pc, #204]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4930      	ldr	r1, [pc, #192]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 8007646:	4313      	orrs	r3, r2
 8007648:	608b      	str	r3, [r1, #8]
 800764a:	e008      	b.n	800765e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b80      	cmp	r3, #128	; 0x80
 8007650:	d105      	bne.n	800765e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007652:	4b2d      	ldr	r3, [pc, #180]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	4a2c      	ldr	r2, [pc, #176]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 8007658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800765c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800765e:	4b29      	ldr	r3, [pc, #164]	; (8007704 <HAL_RCC_ClockConfig+0x240>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	429a      	cmp	r2, r3
 800766a:	d210      	bcs.n	800768e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766c:	4b25      	ldr	r3, [pc, #148]	; (8007704 <HAL_RCC_ClockConfig+0x240>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f023 020f 	bic.w	r2, r3, #15
 8007674:	4923      	ldr	r1, [pc, #140]	; (8007704 <HAL_RCC_ClockConfig+0x240>)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	4313      	orrs	r3, r2
 800767a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800767c:	4b21      	ldr	r3, [pc, #132]	; (8007704 <HAL_RCC_ClockConfig+0x240>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 030f 	and.w	r3, r3, #15
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d001      	beq.n	800768e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e036      	b.n	80076fc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0304 	and.w	r3, r3, #4
 8007696:	2b00      	cmp	r3, #0
 8007698:	d008      	beq.n	80076ac <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800769a:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	4918      	ldr	r1, [pc, #96]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076b8:	4b13      	ldr	r3, [pc, #76]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4910      	ldr	r1, [pc, #64]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80076cc:	f000 f826 	bl	800771c <HAL_RCC_GetSysClockFreq>
 80076d0:	4602      	mov	r2, r0
 80076d2:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <HAL_RCC_ClockConfig+0x244>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	091b      	lsrs	r3, r3, #4
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	490c      	ldr	r1, [pc, #48]	; (8007710 <HAL_RCC_ClockConfig+0x24c>)
 80076de:	5ccb      	ldrb	r3, [r1, r3]
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	fa22 f303 	lsr.w	r3, r2, r3
 80076e8:	4a0a      	ldr	r2, [pc, #40]	; (8007714 <HAL_RCC_ClockConfig+0x250>)
 80076ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80076ec:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <HAL_RCC_ClockConfig+0x254>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fd f843 	bl	800477c <HAL_InitTick>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]

  return status;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40022000 	.word	0x40022000
 8007708:	40021000 	.word	0x40021000
 800770c:	04c4b400 	.word	0x04c4b400
 8007710:	0800994c 	.word	0x0800994c
 8007714:	20000214 	.word	0x20000214
 8007718:	20000218 	.word	0x20000218

0800771c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800771c:	b480      	push	{r7}
 800771e:	b089      	sub	sp, #36	; 0x24
 8007720:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
 8007726:	2300      	movs	r3, #0
 8007728:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800772a:	4b3e      	ldr	r3, [pc, #248]	; (8007824 <HAL_RCC_GetSysClockFreq+0x108>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 030c 	and.w	r3, r3, #12
 8007732:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007734:	4b3b      	ldr	r3, [pc, #236]	; (8007824 <HAL_RCC_GetSysClockFreq+0x108>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_RCC_GetSysClockFreq+0x34>
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b0c      	cmp	r3, #12
 8007748:	d121      	bne.n	800778e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d11e      	bne.n	800778e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007750:	4b34      	ldr	r3, [pc, #208]	; (8007824 <HAL_RCC_GetSysClockFreq+0x108>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d107      	bne.n	800776c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800775c:	4b31      	ldr	r3, [pc, #196]	; (8007824 <HAL_RCC_GetSysClockFreq+0x108>)
 800775e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	61fb      	str	r3, [r7, #28]
 800776a:	e005      	b.n	8007778 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800776c:	4b2d      	ldr	r3, [pc, #180]	; (8007824 <HAL_RCC_GetSysClockFreq+0x108>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	091b      	lsrs	r3, r3, #4
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007778:	4a2b      	ldr	r2, [pc, #172]	; (8007828 <HAL_RCC_GetSysClockFreq+0x10c>)
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007780:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10d      	bne.n	80077a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800778c:	e00a      	b.n	80077a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2b04      	cmp	r3, #4
 8007792:	d102      	bne.n	800779a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007794:	4b25      	ldr	r3, [pc, #148]	; (800782c <HAL_RCC_GetSysClockFreq+0x110>)
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	e004      	b.n	80077a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2b08      	cmp	r3, #8
 800779e:	d101      	bne.n	80077a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80077a0:	4b23      	ldr	r3, [pc, #140]	; (8007830 <HAL_RCC_GetSysClockFreq+0x114>)
 80077a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	2b0c      	cmp	r3, #12
 80077a8:	d134      	bne.n	8007814 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077aa:	4b1e      	ldr	r3, [pc, #120]	; (8007824 <HAL_RCC_GetSysClockFreq+0x108>)
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d003      	beq.n	80077c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d003      	beq.n	80077c8 <HAL_RCC_GetSysClockFreq+0xac>
 80077c0:	e005      	b.n	80077ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80077c2:	4b1a      	ldr	r3, [pc, #104]	; (800782c <HAL_RCC_GetSysClockFreq+0x110>)
 80077c4:	617b      	str	r3, [r7, #20]
      break;
 80077c6:	e005      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80077c8:	4b19      	ldr	r3, [pc, #100]	; (8007830 <HAL_RCC_GetSysClockFreq+0x114>)
 80077ca:	617b      	str	r3, [r7, #20]
      break;
 80077cc:	e002      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	617b      	str	r3, [r7, #20]
      break;
 80077d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077d4:	4b13      	ldr	r3, [pc, #76]	; (8007824 <HAL_RCC_GetSysClockFreq+0x108>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	091b      	lsrs	r3, r3, #4
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	3301      	adds	r3, #1
 80077e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80077e2:	4b10      	ldr	r3, [pc, #64]	; (8007824 <HAL_RCC_GetSysClockFreq+0x108>)
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	fb03 f202 	mul.w	r2, r3, r2
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077fa:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <HAL_RCC_GetSysClockFreq+0x108>)
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	0e5b      	lsrs	r3, r3, #25
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	3301      	adds	r3, #1
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007812:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007814:	69bb      	ldr	r3, [r7, #24]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3724      	adds	r7, #36	; 0x24
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	40021000 	.word	0x40021000
 8007828:	0800995c 	.word	0x0800995c
 800782c:	00f42400 	.word	0x00f42400
 8007830:	007a1200 	.word	0x007a1200

08007834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800783c:	2300      	movs	r3, #0
 800783e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007840:	4b27      	ldr	r3, [pc, #156]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800784c:	f7ff f8ee 	bl	8006a2c <HAL_PWREx_GetVoltageRange>
 8007850:	6178      	str	r0, [r7, #20]
 8007852:	e014      	b.n	800787e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007854:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007858:	4a21      	ldr	r2, [pc, #132]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800785a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800785e:	6593      	str	r3, [r2, #88]	; 0x58
 8007860:	4b1f      	ldr	r3, [pc, #124]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800786c:	f7ff f8de 	bl	8006a2c <HAL_PWREx_GetVoltageRange>
 8007870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007872:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007876:	4a1a      	ldr	r2, [pc, #104]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800787c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007884:	d10b      	bne.n	800789e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b80      	cmp	r3, #128	; 0x80
 800788a:	d913      	bls.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2ba0      	cmp	r3, #160	; 0xa0
 8007890:	d902      	bls.n	8007898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007892:	2302      	movs	r3, #2
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	e00d      	b.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007898:	2301      	movs	r3, #1
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	e00a      	b.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b7f      	cmp	r3, #127	; 0x7f
 80078a2:	d902      	bls.n	80078aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80078a4:	2302      	movs	r3, #2
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	e004      	b.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b70      	cmp	r3, #112	; 0x70
 80078ae:	d101      	bne.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80078b0:	2301      	movs	r3, #1
 80078b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80078b4:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f023 020f 	bic.w	r2, r3, #15
 80078bc:	4909      	ldr	r1, [pc, #36]	; (80078e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80078c4:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d001      	beq.n	80078d6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	40021000 	.word	0x40021000
 80078e4:	40022000 	.word	0x40022000

080078e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80078f2:	4b2d      	ldr	r3, [pc, #180]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d118      	bne.n	8007930 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80078fe:	4b2a      	ldr	r3, [pc, #168]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800790a:	4b27      	ldr	r3, [pc, #156]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800790c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007910:	0a1b      	lsrs	r3, r3, #8
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	e005      	b.n	8007926 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800791a:	4b23      	ldr	r3, [pc, #140]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	091b      	lsrs	r3, r3, #4
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007926:	4a21      	ldr	r2, [pc, #132]	; (80079ac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007930:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d003      	beq.n	8007948 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b03      	cmp	r3, #3
 8007944:	d003      	beq.n	800794e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8007946:	e005      	b.n	8007954 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007948:	4b19      	ldr	r3, [pc, #100]	; (80079b0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800794a:	613b      	str	r3, [r7, #16]
    break;
 800794c:	e005      	b.n	800795a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800794e:	4b19      	ldr	r3, [pc, #100]	; (80079b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007950:	613b      	str	r3, [r7, #16]
    break;
 8007952:	e002      	b.n	800795a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	613b      	str	r3, [r7, #16]
    break;
 8007958:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800795a:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	091b      	lsrs	r3, r3, #4
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	3301      	adds	r3, #1
 8007966:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007968:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	0a1b      	lsrs	r3, r3, #8
 800796e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	fb03 f202 	mul.w	r2, r3, r2
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	fbb2 f3f3 	udiv	r3, r2, r3
 800797e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007980:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	0e5b      	lsrs	r3, r3, #25
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	3301      	adds	r3, #1
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	fbb2 f3f3 	udiv	r3, r2, r3
 8007998:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800799a:	683b      	ldr	r3, [r7, #0]
}
 800799c:	4618      	mov	r0, r3
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	40021000 	.word	0x40021000
 80079ac:	0800995c 	.word	0x0800995c
 80079b0:	00f42400 	.word	0x00f42400
 80079b4:	007a1200 	.word	0x007a1200

080079b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079c0:	2300      	movs	r3, #0
 80079c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079c4:	2300      	movs	r3, #0
 80079c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d040      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d8:	2b80      	cmp	r3, #128	; 0x80
 80079da:	d02a      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80079dc:	2b80      	cmp	r3, #128	; 0x80
 80079de:	d825      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80079e0:	2b60      	cmp	r3, #96	; 0x60
 80079e2:	d026      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80079e4:	2b60      	cmp	r3, #96	; 0x60
 80079e6:	d821      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80079e8:	2b40      	cmp	r3, #64	; 0x40
 80079ea:	d006      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d81d      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d009      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d010      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80079f8:	e018      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80079fa:	4b89      	ldr	r3, [pc, #548]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	4a88      	ldr	r2, [pc, #544]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a04:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a06:	e015      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fb3e 	bl	8008090 <RCCEx_PLLSAI1_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a18:	e00c      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3320      	adds	r3, #32
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fc29 	bl	8008278 <RCCEx_PLLSAI2_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a2a:	e003      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	74fb      	strb	r3, [r7, #19]
      break;
 8007a30:	e000      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a34:	7cfb      	ldrb	r3, [r7, #19]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10b      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a3a:	4b79      	ldr	r3, [pc, #484]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a40:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a48:	4975      	ldr	r1, [pc, #468]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007a50:	e001      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a52:	7cfb      	ldrb	r3, [r7, #19]
 8007a54:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d047      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a6a:	d030      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a70:	d82a      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a76:	d02a      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a7c:	d824      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a82:	d008      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a88:	d81e      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a92:	d010      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a94:	e018      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a96:	4b62      	ldr	r3, [pc, #392]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	4a61      	ldr	r2, [pc, #388]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aa0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007aa2:	e015      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 faf0 	bl	8008090 <RCCEx_PLLSAI1_Config>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007ab4:	e00c      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3320      	adds	r3, #32
 8007aba:	2100      	movs	r1, #0
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fbdb 	bl	8008278 <RCCEx_PLLSAI2_Config>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007ac6:	e003      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	74fb      	strb	r3, [r7, #19]
      break;
 8007acc:	e000      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ad0:	7cfb      	ldrb	r3, [r7, #19]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10b      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ad6:	4b52      	ldr	r3, [pc, #328]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae4:	494e      	ldr	r1, [pc, #312]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007aec:	e001      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aee:	7cfb      	ldrb	r3, [r7, #19]
 8007af0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 809f 	beq.w	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b00:	2300      	movs	r3, #0
 8007b02:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b04:	4b46      	ldr	r3, [pc, #280]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007b14:	2300      	movs	r3, #0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00d      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b1a:	4b41      	ldr	r3, [pc, #260]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1e:	4a40      	ldr	r2, [pc, #256]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b24:	6593      	str	r3, [r2, #88]	; 0x58
 8007b26:	4b3e      	ldr	r3, [pc, #248]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b2e:	60bb      	str	r3, [r7, #8]
 8007b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b32:	2301      	movs	r3, #1
 8007b34:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b36:	4b3b      	ldr	r3, [pc, #236]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a3a      	ldr	r2, [pc, #232]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b42:	f7fc fe6b 	bl	800481c <HAL_GetTick>
 8007b46:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b48:	e009      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b4a:	f7fc fe67 	bl	800481c <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d902      	bls.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	74fb      	strb	r3, [r7, #19]
        break;
 8007b5c:	e005      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b5e:	4b31      	ldr	r3, [pc, #196]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0ef      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007b6a:	7cfb      	ldrb	r3, [r7, #19]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d15b      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b70:	4b2b      	ldr	r3, [pc, #172]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b7a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d01f      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d019      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b8e:	4b24      	ldr	r3, [pc, #144]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b9a:	4b21      	ldr	r3, [pc, #132]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba0:	4a1f      	ldr	r2, [pc, #124]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007baa:	4b1d      	ldr	r3, [pc, #116]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bba:	4a19      	ldr	r2, [pc, #100]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d016      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bcc:	f7fc fe26 	bl	800481c <HAL_GetTick>
 8007bd0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bd2:	e00b      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bd4:	f7fc fe22 	bl	800481c <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d902      	bls.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	74fb      	strb	r3, [r7, #19]
            break;
 8007bea:	e006      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bec:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0ec      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007bfa:	7cfb      	ldrb	r3, [r7, #19]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10c      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c10:	4903      	ldr	r1, [pc, #12]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c18:	e008      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c1a:	7cfb      	ldrb	r3, [r7, #19]
 8007c1c:	74bb      	strb	r3, [r7, #18]
 8007c1e:	e005      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007c20:	40021000 	.word	0x40021000
 8007c24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c28:	7cfb      	ldrb	r3, [r7, #19]
 8007c2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c2c:	7c7b      	ldrb	r3, [r7, #17]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d105      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c32:	4ba0      	ldr	r3, [pc, #640]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c36:	4a9f      	ldr	r2, [pc, #636]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c4a:	4b9a      	ldr	r3, [pc, #616]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c50:	f023 0203 	bic.w	r2, r3, #3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c58:	4996      	ldr	r1, [pc, #600]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c6c:	4b91      	ldr	r3, [pc, #580]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c72:	f023 020c 	bic.w	r2, r3, #12
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	498e      	ldr	r1, [pc, #568]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c8e:	4b89      	ldr	r3, [pc, #548]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9c:	4985      	ldr	r1, [pc, #532]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00a      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cb0:	4b80      	ldr	r3, [pc, #512]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cbe:	497d      	ldr	r1, [pc, #500]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cd2:	4b78      	ldr	r3, [pc, #480]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce0:	4974      	ldr	r1, [pc, #464]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cf4:	4b6f      	ldr	r3, [pc, #444]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d02:	496c      	ldr	r1, [pc, #432]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d16:	4b67      	ldr	r3, [pc, #412]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d24:	4963      	ldr	r1, [pc, #396]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d38:	4b5e      	ldr	r3, [pc, #376]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d46:	495b      	ldr	r1, [pc, #364]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d5a:	4b56      	ldr	r3, [pc, #344]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d68:	4952      	ldr	r1, [pc, #328]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d7c:	4b4d      	ldr	r3, [pc, #308]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d8a:	494a      	ldr	r1, [pc, #296]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d9e:	4b45      	ldr	r3, [pc, #276]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dac:	4941      	ldr	r1, [pc, #260]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dc0:	4b3c      	ldr	r3, [pc, #240]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dc6:	f023 0203 	bic.w	r2, r3, #3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dce:	4939      	ldr	r1, [pc, #228]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d028      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007de2:	4b34      	ldr	r3, [pc, #208]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007df0:	4930      	ldr	r1, [pc, #192]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e00:	d106      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e02:	4b2c      	ldr	r3, [pc, #176]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	4a2b      	ldr	r2, [pc, #172]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e0c:	60d3      	str	r3, [r2, #12]
 8007e0e:	e011      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e18:	d10c      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	2101      	movs	r1, #1
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 f935 	bl	8008090 <RCCEx_PLLSAI1_Config>
 8007e26:	4603      	mov	r3, r0
 8007e28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007e2a:	7cfb      	ldrb	r3, [r7, #19]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007e30:	7cfb      	ldrb	r3, [r7, #19]
 8007e32:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d04d      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e48:	d108      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007e4a:	4b1a      	ldr	r3, [pc, #104]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e50:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007e5a:	e012      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007e5c:	4b15      	ldr	r3, [pc, #84]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e62:	4a14      	ldr	r2, [pc, #80]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007e6c:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e7a:	490e      	ldr	r1, [pc, #56]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e8a:	d106      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e8c:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	4a08      	ldr	r2, [pc, #32]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e96:	60d3      	str	r3, [r2, #12]
 8007e98:	e020      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea2:	d109      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007ea4:	4b03      	ldr	r3, [pc, #12]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	4a02      	ldr	r2, [pc, #8]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eae:	60d3      	str	r3, [r2, #12]
 8007eb0:	e014      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007eb2:	bf00      	nop
 8007eb4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ec0:	d10c      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 f8e1 	bl	8008090 <RCCEx_PLLSAI1_Config>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ed2:	7cfb      	ldrb	r3, [r7, #19]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007ed8:	7cfb      	ldrb	r3, [r7, #19]
 8007eda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d028      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ee8:	4b68      	ldr	r3, [pc, #416]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef6:	4965      	ldr	r1, [pc, #404]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f06:	d106      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f08:	4b60      	ldr	r3, [pc, #384]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	4a5f      	ldr	r2, [pc, #380]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f12:	60d3      	str	r3, [r2, #12]
 8007f14:	e011      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f1e:	d10c      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3304      	adds	r3, #4
 8007f24:	2101      	movs	r1, #1
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 f8b2 	bl	8008090 <RCCEx_PLLSAI1_Config>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f30:	7cfb      	ldrb	r3, [r7, #19]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007f36:	7cfb      	ldrb	r3, [r7, #19]
 8007f38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01e      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f46:	4b51      	ldr	r3, [pc, #324]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f56:	494d      	ldr	r1, [pc, #308]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f68:	d10c      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	2102      	movs	r1, #2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 f88d 	bl	8008090 <RCCEx_PLLSAI1_Config>
 8007f76:	4603      	mov	r3, r0
 8007f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f7a:	7cfb      	ldrb	r3, [r7, #19]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007f80:	7cfb      	ldrb	r3, [r7, #19]
 8007f82:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f90:	4b3e      	ldr	r3, [pc, #248]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f96:	f023 0204 	bic.w	r2, r3, #4
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa0:	493a      	ldr	r1, [pc, #232]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007fb4:	4b35      	ldr	r3, [pc, #212]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fba:	f023 0218 	bic.w	r2, r3, #24
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc4:	4931      	ldr	r1, [pc, #196]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d035      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007fd8:	4b2c      	ldr	r3, [pc, #176]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a2b      	ldr	r2, [pc, #172]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fe4:	f7fc fc1a 	bl	800481c <HAL_GetTick>
 8007fe8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007fea:	e009      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007fec:	f7fc fc16 	bl	800481c <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d902      	bls.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	74fb      	strb	r3, [r7, #19]
        break;
 8007ffe:	e005      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008000:	4b22      	ldr	r3, [pc, #136]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1ef      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800800c:	7cfb      	ldrb	r3, [r7, #19]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d113      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8008012:	4b1e      	ldr	r3, [pc, #120]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008018:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008022:	491a      	ldr	r1, [pc, #104]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008024:	4313      	orrs	r3, r2
 8008026:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3320      	adds	r3, #32
 800802e:	2102      	movs	r1, #2
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f921 	bl	8008278 <RCCEx_PLLSAI2_Config>
 8008036:	4603      	mov	r3, r0
 8008038:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800803a:	7cfb      	ldrb	r3, [r7, #19]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8008040:	7cfb      	ldrb	r3, [r7, #19]
 8008042:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d017      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008050:	4b0e      	ldr	r3, [pc, #56]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008056:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008060:	490a      	ldr	r1, [pc, #40]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008062:	4313      	orrs	r3, r2
 8008064:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008072:	d105      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008074:	4b05      	ldr	r3, [pc, #20]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	4a04      	ldr	r2, [pc, #16]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800807a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800807e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008080:	7cbb      	ldrb	r3, [r7, #18]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	40021000 	.word	0x40021000

08008090 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800809e:	4b72      	ldr	r3, [pc, #456]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00e      	beq.n	80080c8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80080aa:	4b6f      	ldr	r3, [pc, #444]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f003 0203 	and.w	r2, r3, #3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d103      	bne.n	80080c2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
       ||
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d142      	bne.n	8008148 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	73fb      	strb	r3, [r7, #15]
 80080c6:	e03f      	b.n	8008148 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d018      	beq.n	8008102 <RCCEx_PLLSAI1_Config+0x72>
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d825      	bhi.n	8008120 <RCCEx_PLLSAI1_Config+0x90>
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d002      	beq.n	80080de <RCCEx_PLLSAI1_Config+0x4e>
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d009      	beq.n	80080f0 <RCCEx_PLLSAI1_Config+0x60>
 80080dc:	e020      	b.n	8008120 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80080de:	4b62      	ldr	r3, [pc, #392]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d11d      	bne.n	8008126 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080ee:	e01a      	b.n	8008126 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80080f0:	4b5d      	ldr	r3, [pc, #372]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d116      	bne.n	800812a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008100:	e013      	b.n	800812a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008102:	4b59      	ldr	r3, [pc, #356]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10f      	bne.n	800812e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800810e:	4b56      	ldr	r3, [pc, #344]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d109      	bne.n	800812e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800811e:	e006      	b.n	800812e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	73fb      	strb	r3, [r7, #15]
      break;
 8008124:	e004      	b.n	8008130 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008126:	bf00      	nop
 8008128:	e002      	b.n	8008130 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800812e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008130:	7bfb      	ldrb	r3, [r7, #15]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d108      	bne.n	8008148 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008136:	4b4c      	ldr	r3, [pc, #304]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f023 0203 	bic.w	r2, r3, #3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4949      	ldr	r1, [pc, #292]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008144:	4313      	orrs	r3, r2
 8008146:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	2b00      	cmp	r3, #0
 800814c:	f040 8086 	bne.w	800825c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008150:	4b45      	ldr	r3, [pc, #276]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a44      	ldr	r2, [pc, #272]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800815a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800815c:	f7fc fb5e 	bl	800481c <HAL_GetTick>
 8008160:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008162:	e009      	b.n	8008178 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008164:	f7fc fb5a 	bl	800481c <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d902      	bls.n	8008178 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	73fb      	strb	r3, [r7, #15]
        break;
 8008176:	e005      	b.n	8008184 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008178:	4b3b      	ldr	r3, [pc, #236]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1ef      	bne.n	8008164 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d168      	bne.n	800825c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d113      	bne.n	80081b8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008190:	4b35      	ldr	r3, [pc, #212]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008192:	691a      	ldr	r2, [r3, #16]
 8008194:	4b35      	ldr	r3, [pc, #212]	; (800826c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008196:	4013      	ands	r3, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6892      	ldr	r2, [r2, #8]
 800819c:	0211      	lsls	r1, r2, #8
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	68d2      	ldr	r2, [r2, #12]
 80081a2:	06d2      	lsls	r2, r2, #27
 80081a4:	4311      	orrs	r1, r2
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	6852      	ldr	r2, [r2, #4]
 80081aa:	3a01      	subs	r2, #1
 80081ac:	0112      	lsls	r2, r2, #4
 80081ae:	430a      	orrs	r2, r1
 80081b0:	492d      	ldr	r1, [pc, #180]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	610b      	str	r3, [r1, #16]
 80081b6:	e02d      	b.n	8008214 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d115      	bne.n	80081ea <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081be:	4b2a      	ldr	r3, [pc, #168]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081c0:	691a      	ldr	r2, [r3, #16]
 80081c2:	4b2b      	ldr	r3, [pc, #172]	; (8008270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6892      	ldr	r2, [r2, #8]
 80081ca:	0211      	lsls	r1, r2, #8
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	6912      	ldr	r2, [r2, #16]
 80081d0:	0852      	lsrs	r2, r2, #1
 80081d2:	3a01      	subs	r2, #1
 80081d4:	0552      	lsls	r2, r2, #21
 80081d6:	4311      	orrs	r1, r2
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6852      	ldr	r2, [r2, #4]
 80081dc:	3a01      	subs	r2, #1
 80081de:	0112      	lsls	r2, r2, #4
 80081e0:	430a      	orrs	r2, r1
 80081e2:	4921      	ldr	r1, [pc, #132]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	610b      	str	r3, [r1, #16]
 80081e8:	e014      	b.n	8008214 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081ea:	4b1f      	ldr	r3, [pc, #124]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081ec:	691a      	ldr	r2, [r3, #16]
 80081ee:	4b21      	ldr	r3, [pc, #132]	; (8008274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80081f0:	4013      	ands	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6892      	ldr	r2, [r2, #8]
 80081f6:	0211      	lsls	r1, r2, #8
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6952      	ldr	r2, [r2, #20]
 80081fc:	0852      	lsrs	r2, r2, #1
 80081fe:	3a01      	subs	r2, #1
 8008200:	0652      	lsls	r2, r2, #25
 8008202:	4311      	orrs	r1, r2
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6852      	ldr	r2, [r2, #4]
 8008208:	3a01      	subs	r2, #1
 800820a:	0112      	lsls	r2, r2, #4
 800820c:	430a      	orrs	r2, r1
 800820e:	4916      	ldr	r1, [pc, #88]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008210:	4313      	orrs	r3, r2
 8008212:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008214:	4b14      	ldr	r3, [pc, #80]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a13      	ldr	r2, [pc, #76]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800821a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800821e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008220:	f7fc fafc 	bl	800481c <HAL_GetTick>
 8008224:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008226:	e009      	b.n	800823c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008228:	f7fc faf8 	bl	800481c <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d902      	bls.n	800823c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	73fb      	strb	r3, [r7, #15]
          break;
 800823a:	e005      	b.n	8008248 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0ef      	beq.n	8008228 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800824e:	4b06      	ldr	r3, [pc, #24]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008250:	691a      	ldr	r2, [r3, #16]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	4904      	ldr	r1, [pc, #16]	; (8008268 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008258:	4313      	orrs	r3, r2
 800825a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	40021000 	.word	0x40021000
 800826c:	07ff800f 	.word	0x07ff800f
 8008270:	ff9f800f 	.word	0xff9f800f
 8008274:	f9ff800f 	.word	0xf9ff800f

08008278 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008286:	4b72      	ldr	r3, [pc, #456]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00e      	beq.n	80082b0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008292:	4b6f      	ldr	r3, [pc, #444]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f003 0203 	and.w	r2, r3, #3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d103      	bne.n	80082aa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
       ||
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d142      	bne.n	8008330 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	73fb      	strb	r3, [r7, #15]
 80082ae:	e03f      	b.n	8008330 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d018      	beq.n	80082ea <RCCEx_PLLSAI2_Config+0x72>
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d825      	bhi.n	8008308 <RCCEx_PLLSAI2_Config+0x90>
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d002      	beq.n	80082c6 <RCCEx_PLLSAI2_Config+0x4e>
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d009      	beq.n	80082d8 <RCCEx_PLLSAI2_Config+0x60>
 80082c4:	e020      	b.n	8008308 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80082c6:	4b62      	ldr	r3, [pc, #392]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d11d      	bne.n	800830e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082d6:	e01a      	b.n	800830e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80082d8:	4b5d      	ldr	r3, [pc, #372]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d116      	bne.n	8008312 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082e8:	e013      	b.n	8008312 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80082ea:	4b59      	ldr	r3, [pc, #356]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10f      	bne.n	8008316 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80082f6:	4b56      	ldr	r3, [pc, #344]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008306:	e006      	b.n	8008316 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
      break;
 800830c:	e004      	b.n	8008318 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800830e:	bf00      	nop
 8008310:	e002      	b.n	8008318 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008316:	bf00      	nop
    }

    if(status == HAL_OK)
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d108      	bne.n	8008330 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800831e:	4b4c      	ldr	r3, [pc, #304]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f023 0203 	bic.w	r2, r3, #3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4949      	ldr	r1, [pc, #292]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800832c:	4313      	orrs	r3, r2
 800832e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f040 8086 	bne.w	8008444 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008338:	4b45      	ldr	r3, [pc, #276]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a44      	ldr	r2, [pc, #272]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800833e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008344:	f7fc fa6a 	bl	800481c <HAL_GetTick>
 8008348:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800834a:	e009      	b.n	8008360 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800834c:	f7fc fa66 	bl	800481c <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b02      	cmp	r3, #2
 8008358:	d902      	bls.n	8008360 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	73fb      	strb	r3, [r7, #15]
        break;
 800835e:	e005      	b.n	800836c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008360:	4b3b      	ldr	r3, [pc, #236]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1ef      	bne.n	800834c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d168      	bne.n	8008444 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d113      	bne.n	80083a0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008378:	4b35      	ldr	r3, [pc, #212]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800837a:	695a      	ldr	r2, [r3, #20]
 800837c:	4b35      	ldr	r3, [pc, #212]	; (8008454 <RCCEx_PLLSAI2_Config+0x1dc>)
 800837e:	4013      	ands	r3, r2
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6892      	ldr	r2, [r2, #8]
 8008384:	0211      	lsls	r1, r2, #8
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68d2      	ldr	r2, [r2, #12]
 800838a:	06d2      	lsls	r2, r2, #27
 800838c:	4311      	orrs	r1, r2
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6852      	ldr	r2, [r2, #4]
 8008392:	3a01      	subs	r2, #1
 8008394:	0112      	lsls	r2, r2, #4
 8008396:	430a      	orrs	r2, r1
 8008398:	492d      	ldr	r1, [pc, #180]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 800839a:	4313      	orrs	r3, r2
 800839c:	614b      	str	r3, [r1, #20]
 800839e:	e02d      	b.n	80083fc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d115      	bne.n	80083d2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80083a6:	4b2a      	ldr	r3, [pc, #168]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083a8:	695a      	ldr	r2, [r3, #20]
 80083aa:	4b2b      	ldr	r3, [pc, #172]	; (8008458 <RCCEx_PLLSAI2_Config+0x1e0>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6892      	ldr	r2, [r2, #8]
 80083b2:	0211      	lsls	r1, r2, #8
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6912      	ldr	r2, [r2, #16]
 80083b8:	0852      	lsrs	r2, r2, #1
 80083ba:	3a01      	subs	r2, #1
 80083bc:	0552      	lsls	r2, r2, #21
 80083be:	4311      	orrs	r1, r2
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6852      	ldr	r2, [r2, #4]
 80083c4:	3a01      	subs	r2, #1
 80083c6:	0112      	lsls	r2, r2, #4
 80083c8:	430a      	orrs	r2, r1
 80083ca:	4921      	ldr	r1, [pc, #132]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	614b      	str	r3, [r1, #20]
 80083d0:	e014      	b.n	80083fc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80083d2:	4b1f      	ldr	r3, [pc, #124]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083d4:	695a      	ldr	r2, [r3, #20]
 80083d6:	4b21      	ldr	r3, [pc, #132]	; (800845c <RCCEx_PLLSAI2_Config+0x1e4>)
 80083d8:	4013      	ands	r3, r2
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	6892      	ldr	r2, [r2, #8]
 80083de:	0211      	lsls	r1, r2, #8
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	6952      	ldr	r2, [r2, #20]
 80083e4:	0852      	lsrs	r2, r2, #1
 80083e6:	3a01      	subs	r2, #1
 80083e8:	0652      	lsls	r2, r2, #25
 80083ea:	4311      	orrs	r1, r2
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6852      	ldr	r2, [r2, #4]
 80083f0:	3a01      	subs	r2, #1
 80083f2:	0112      	lsls	r2, r2, #4
 80083f4:	430a      	orrs	r2, r1
 80083f6:	4916      	ldr	r1, [pc, #88]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80083fc:	4b14      	ldr	r3, [pc, #80]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a13      	ldr	r2, [pc, #76]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008406:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008408:	f7fc fa08 	bl	800481c <HAL_GetTick>
 800840c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800840e:	e009      	b.n	8008424 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008410:	f7fc fa04 	bl	800481c <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b02      	cmp	r3, #2
 800841c:	d902      	bls.n	8008424 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	73fb      	strb	r3, [r7, #15]
          break;
 8008422:	e005      	b.n	8008430 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008424:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0ef      	beq.n	8008410 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008436:	4b06      	ldr	r3, [pc, #24]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008438:	695a      	ldr	r2, [r3, #20]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	4904      	ldr	r1, [pc, #16]	; (8008450 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008440:	4313      	orrs	r3, r2
 8008442:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	40021000 	.word	0x40021000
 8008454:	07ff800f 	.word	0x07ff800f
 8008458:	ff9f800f 	.word	0xff9f800f
 800845c:	f9ff800f 	.word	0xf9ff800f

08008460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e095      	b.n	800859e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2b00      	cmp	r3, #0
 8008478:	d108      	bne.n	800848c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008482:	d009      	beq.n	8008498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	61da      	str	r2, [r3, #28]
 800848a:	e005      	b.n	8008498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7fb ff3c 	bl	8004330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084d8:	d902      	bls.n	80084e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	e002      	b.n	80084e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80084e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80084ee:	d007      	beq.n	8008500 <HAL_SPI_Init+0xa0>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084f8:	d002      	beq.n	8008500 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008510:	431a      	orrs	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008538:	431a      	orrs	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008542:	ea42 0103 	orr.w	r1, r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	0c1b      	lsrs	r3, r3, #16
 800855c:	f003 0204 	and.w	r2, r3, #4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856e:	f003 0308 	and.w	r3, r3, #8
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800857c:	ea42 0103 	orr.w	r1, r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_ZdlPvj>:
 80085a6:	f000 b800 	b.w	80085aa <_ZdlPv>

080085aa <_ZdlPv>:
 80085aa:	f000 b85b 	b.w	8008664 <free>
	...

080085b0 <__assert_func>:
 80085b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085b2:	4614      	mov	r4, r2
 80085b4:	461a      	mov	r2, r3
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <__assert_func+0x2c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4605      	mov	r5, r0
 80085bc:	68d8      	ldr	r0, [r3, #12]
 80085be:	b14c      	cbz	r4, 80085d4 <__assert_func+0x24>
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <__assert_func+0x30>)
 80085c2:	9100      	str	r1, [sp, #0]
 80085c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085c8:	4906      	ldr	r1, [pc, #24]	; (80085e4 <__assert_func+0x34>)
 80085ca:	462b      	mov	r3, r5
 80085cc:	f000 f814 	bl	80085f8 <fiprintf>
 80085d0:	f000 fd04 	bl	8008fdc <abort>
 80085d4:	4b04      	ldr	r3, [pc, #16]	; (80085e8 <__assert_func+0x38>)
 80085d6:	461c      	mov	r4, r3
 80085d8:	e7f3      	b.n	80085c2 <__assert_func+0x12>
 80085da:	bf00      	nop
 80085dc:	20000220 	.word	0x20000220
 80085e0:	0800998c 	.word	0x0800998c
 80085e4:	08009999 	.word	0x08009999
 80085e8:	080099c7 	.word	0x080099c7

080085ec <__errno>:
 80085ec:	4b01      	ldr	r3, [pc, #4]	; (80085f4 <__errno+0x8>)
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	20000220 	.word	0x20000220

080085f8 <fiprintf>:
 80085f8:	b40e      	push	{r1, r2, r3}
 80085fa:	b503      	push	{r0, r1, lr}
 80085fc:	4601      	mov	r1, r0
 80085fe:	ab03      	add	r3, sp, #12
 8008600:	4805      	ldr	r0, [pc, #20]	; (8008618 <fiprintf+0x20>)
 8008602:	f853 2b04 	ldr.w	r2, [r3], #4
 8008606:	6800      	ldr	r0, [r0, #0]
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	f000 f953 	bl	80088b4 <_vfiprintf_r>
 800860e:	b002      	add	sp, #8
 8008610:	f85d eb04 	ldr.w	lr, [sp], #4
 8008614:	b003      	add	sp, #12
 8008616:	4770      	bx	lr
 8008618:	20000220 	.word	0x20000220

0800861c <__libc_init_array>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	4d0d      	ldr	r5, [pc, #52]	; (8008654 <__libc_init_array+0x38>)
 8008620:	4c0d      	ldr	r4, [pc, #52]	; (8008658 <__libc_init_array+0x3c>)
 8008622:	1b64      	subs	r4, r4, r5
 8008624:	10a4      	asrs	r4, r4, #2
 8008626:	2600      	movs	r6, #0
 8008628:	42a6      	cmp	r6, r4
 800862a:	d109      	bne.n	8008640 <__libc_init_array+0x24>
 800862c:	4d0b      	ldr	r5, [pc, #44]	; (800865c <__libc_init_array+0x40>)
 800862e:	4c0c      	ldr	r4, [pc, #48]	; (8008660 <__libc_init_array+0x44>)
 8008630:	f000 fff8 	bl	8009624 <_init>
 8008634:	1b64      	subs	r4, r4, r5
 8008636:	10a4      	asrs	r4, r4, #2
 8008638:	2600      	movs	r6, #0
 800863a:	42a6      	cmp	r6, r4
 800863c:	d105      	bne.n	800864a <__libc_init_array+0x2e>
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	f855 3b04 	ldr.w	r3, [r5], #4
 8008644:	4798      	blx	r3
 8008646:	3601      	adds	r6, #1
 8008648:	e7ee      	b.n	8008628 <__libc_init_array+0xc>
 800864a:	f855 3b04 	ldr.w	r3, [r5], #4
 800864e:	4798      	blx	r3
 8008650:	3601      	adds	r6, #1
 8008652:	e7f2      	b.n	800863a <__libc_init_array+0x1e>
 8008654:	08009a60 	.word	0x08009a60
 8008658:	08009a60 	.word	0x08009a60
 800865c:	08009a60 	.word	0x08009a60
 8008660:	08009a68 	.word	0x08009a68

08008664 <free>:
 8008664:	4b02      	ldr	r3, [pc, #8]	; (8008670 <free+0xc>)
 8008666:	4601      	mov	r1, r0
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	f000 b819 	b.w	80086a0 <_free_r>
 800866e:	bf00      	nop
 8008670:	20000220 	.word	0x20000220

08008674 <memcpy>:
 8008674:	440a      	add	r2, r1
 8008676:	4291      	cmp	r1, r2
 8008678:	f100 33ff 	add.w	r3, r0, #4294967295
 800867c:	d100      	bne.n	8008680 <memcpy+0xc>
 800867e:	4770      	bx	lr
 8008680:	b510      	push	{r4, lr}
 8008682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800868a:	4291      	cmp	r1, r2
 800868c:	d1f9      	bne.n	8008682 <memcpy+0xe>
 800868e:	bd10      	pop	{r4, pc}

08008690 <memset>:
 8008690:	4402      	add	r2, r0
 8008692:	4603      	mov	r3, r0
 8008694:	4293      	cmp	r3, r2
 8008696:	d100      	bne.n	800869a <memset+0xa>
 8008698:	4770      	bx	lr
 800869a:	f803 1b01 	strb.w	r1, [r3], #1
 800869e:	e7f9      	b.n	8008694 <memset+0x4>

080086a0 <_free_r>:
 80086a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d044      	beq.n	8008730 <_free_r+0x90>
 80086a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086aa:	9001      	str	r0, [sp, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f1a1 0404 	sub.w	r4, r1, #4
 80086b2:	bfb8      	it	lt
 80086b4:	18e4      	addlt	r4, r4, r3
 80086b6:	f000 feb9 	bl	800942c <__malloc_lock>
 80086ba:	4a1e      	ldr	r2, [pc, #120]	; (8008734 <_free_r+0x94>)
 80086bc:	9801      	ldr	r0, [sp, #4]
 80086be:	6813      	ldr	r3, [r2, #0]
 80086c0:	b933      	cbnz	r3, 80086d0 <_free_r+0x30>
 80086c2:	6063      	str	r3, [r4, #4]
 80086c4:	6014      	str	r4, [r2, #0]
 80086c6:	b003      	add	sp, #12
 80086c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086cc:	f000 beb4 	b.w	8009438 <__malloc_unlock>
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	d908      	bls.n	80086e6 <_free_r+0x46>
 80086d4:	6825      	ldr	r5, [r4, #0]
 80086d6:	1961      	adds	r1, r4, r5
 80086d8:	428b      	cmp	r3, r1
 80086da:	bf01      	itttt	eq
 80086dc:	6819      	ldreq	r1, [r3, #0]
 80086de:	685b      	ldreq	r3, [r3, #4]
 80086e0:	1949      	addeq	r1, r1, r5
 80086e2:	6021      	streq	r1, [r4, #0]
 80086e4:	e7ed      	b.n	80086c2 <_free_r+0x22>
 80086e6:	461a      	mov	r2, r3
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	b10b      	cbz	r3, 80086f0 <_free_r+0x50>
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d9fa      	bls.n	80086e6 <_free_r+0x46>
 80086f0:	6811      	ldr	r1, [r2, #0]
 80086f2:	1855      	adds	r5, r2, r1
 80086f4:	42a5      	cmp	r5, r4
 80086f6:	d10b      	bne.n	8008710 <_free_r+0x70>
 80086f8:	6824      	ldr	r4, [r4, #0]
 80086fa:	4421      	add	r1, r4
 80086fc:	1854      	adds	r4, r2, r1
 80086fe:	42a3      	cmp	r3, r4
 8008700:	6011      	str	r1, [r2, #0]
 8008702:	d1e0      	bne.n	80086c6 <_free_r+0x26>
 8008704:	681c      	ldr	r4, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	6053      	str	r3, [r2, #4]
 800870a:	4421      	add	r1, r4
 800870c:	6011      	str	r1, [r2, #0]
 800870e:	e7da      	b.n	80086c6 <_free_r+0x26>
 8008710:	d902      	bls.n	8008718 <_free_r+0x78>
 8008712:	230c      	movs	r3, #12
 8008714:	6003      	str	r3, [r0, #0]
 8008716:	e7d6      	b.n	80086c6 <_free_r+0x26>
 8008718:	6825      	ldr	r5, [r4, #0]
 800871a:	1961      	adds	r1, r4, r5
 800871c:	428b      	cmp	r3, r1
 800871e:	bf04      	itt	eq
 8008720:	6819      	ldreq	r1, [r3, #0]
 8008722:	685b      	ldreq	r3, [r3, #4]
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	bf04      	itt	eq
 8008728:	1949      	addeq	r1, r1, r5
 800872a:	6021      	streq	r1, [r4, #0]
 800872c:	6054      	str	r4, [r2, #4]
 800872e:	e7ca      	b.n	80086c6 <_free_r+0x26>
 8008730:	b003      	add	sp, #12
 8008732:	bd30      	pop	{r4, r5, pc}
 8008734:	200006d8 	.word	0x200006d8

08008738 <sbrk_aligned>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	4e0e      	ldr	r6, [pc, #56]	; (8008774 <sbrk_aligned+0x3c>)
 800873c:	460c      	mov	r4, r1
 800873e:	6831      	ldr	r1, [r6, #0]
 8008740:	4605      	mov	r5, r0
 8008742:	b911      	cbnz	r1, 800874a <sbrk_aligned+0x12>
 8008744:	f000 fb7a 	bl	8008e3c <_sbrk_r>
 8008748:	6030      	str	r0, [r6, #0]
 800874a:	4621      	mov	r1, r4
 800874c:	4628      	mov	r0, r5
 800874e:	f000 fb75 	bl	8008e3c <_sbrk_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d00a      	beq.n	800876c <sbrk_aligned+0x34>
 8008756:	1cc4      	adds	r4, r0, #3
 8008758:	f024 0403 	bic.w	r4, r4, #3
 800875c:	42a0      	cmp	r0, r4
 800875e:	d007      	beq.n	8008770 <sbrk_aligned+0x38>
 8008760:	1a21      	subs	r1, r4, r0
 8008762:	4628      	mov	r0, r5
 8008764:	f000 fb6a 	bl	8008e3c <_sbrk_r>
 8008768:	3001      	adds	r0, #1
 800876a:	d101      	bne.n	8008770 <sbrk_aligned+0x38>
 800876c:	f04f 34ff 	mov.w	r4, #4294967295
 8008770:	4620      	mov	r0, r4
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	200006dc 	.word	0x200006dc

08008778 <_malloc_r>:
 8008778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800877c:	1ccd      	adds	r5, r1, #3
 800877e:	f025 0503 	bic.w	r5, r5, #3
 8008782:	3508      	adds	r5, #8
 8008784:	2d0c      	cmp	r5, #12
 8008786:	bf38      	it	cc
 8008788:	250c      	movcc	r5, #12
 800878a:	2d00      	cmp	r5, #0
 800878c:	4607      	mov	r7, r0
 800878e:	db01      	blt.n	8008794 <_malloc_r+0x1c>
 8008790:	42a9      	cmp	r1, r5
 8008792:	d905      	bls.n	80087a0 <_malloc_r+0x28>
 8008794:	230c      	movs	r3, #12
 8008796:	603b      	str	r3, [r7, #0]
 8008798:	2600      	movs	r6, #0
 800879a:	4630      	mov	r0, r6
 800879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a0:	4e2e      	ldr	r6, [pc, #184]	; (800885c <_malloc_r+0xe4>)
 80087a2:	f000 fe43 	bl	800942c <__malloc_lock>
 80087a6:	6833      	ldr	r3, [r6, #0]
 80087a8:	461c      	mov	r4, r3
 80087aa:	bb34      	cbnz	r4, 80087fa <_malloc_r+0x82>
 80087ac:	4629      	mov	r1, r5
 80087ae:	4638      	mov	r0, r7
 80087b0:	f7ff ffc2 	bl	8008738 <sbrk_aligned>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	4604      	mov	r4, r0
 80087b8:	d14d      	bne.n	8008856 <_malloc_r+0xde>
 80087ba:	6834      	ldr	r4, [r6, #0]
 80087bc:	4626      	mov	r6, r4
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d140      	bne.n	8008844 <_malloc_r+0xcc>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	4631      	mov	r1, r6
 80087c6:	4638      	mov	r0, r7
 80087c8:	eb04 0803 	add.w	r8, r4, r3
 80087cc:	f000 fb36 	bl	8008e3c <_sbrk_r>
 80087d0:	4580      	cmp	r8, r0
 80087d2:	d13a      	bne.n	800884a <_malloc_r+0xd2>
 80087d4:	6821      	ldr	r1, [r4, #0]
 80087d6:	3503      	adds	r5, #3
 80087d8:	1a6d      	subs	r5, r5, r1
 80087da:	f025 0503 	bic.w	r5, r5, #3
 80087de:	3508      	adds	r5, #8
 80087e0:	2d0c      	cmp	r5, #12
 80087e2:	bf38      	it	cc
 80087e4:	250c      	movcc	r5, #12
 80087e6:	4629      	mov	r1, r5
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff ffa5 	bl	8008738 <sbrk_aligned>
 80087ee:	3001      	adds	r0, #1
 80087f0:	d02b      	beq.n	800884a <_malloc_r+0xd2>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	442b      	add	r3, r5
 80087f6:	6023      	str	r3, [r4, #0]
 80087f8:	e00e      	b.n	8008818 <_malloc_r+0xa0>
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	1b52      	subs	r2, r2, r5
 80087fe:	d41e      	bmi.n	800883e <_malloc_r+0xc6>
 8008800:	2a0b      	cmp	r2, #11
 8008802:	d916      	bls.n	8008832 <_malloc_r+0xba>
 8008804:	1961      	adds	r1, r4, r5
 8008806:	42a3      	cmp	r3, r4
 8008808:	6025      	str	r5, [r4, #0]
 800880a:	bf18      	it	ne
 800880c:	6059      	strne	r1, [r3, #4]
 800880e:	6863      	ldr	r3, [r4, #4]
 8008810:	bf08      	it	eq
 8008812:	6031      	streq	r1, [r6, #0]
 8008814:	5162      	str	r2, [r4, r5]
 8008816:	604b      	str	r3, [r1, #4]
 8008818:	4638      	mov	r0, r7
 800881a:	f104 060b 	add.w	r6, r4, #11
 800881e:	f000 fe0b 	bl	8009438 <__malloc_unlock>
 8008822:	f026 0607 	bic.w	r6, r6, #7
 8008826:	1d23      	adds	r3, r4, #4
 8008828:	1af2      	subs	r2, r6, r3
 800882a:	d0b6      	beq.n	800879a <_malloc_r+0x22>
 800882c:	1b9b      	subs	r3, r3, r6
 800882e:	50a3      	str	r3, [r4, r2]
 8008830:	e7b3      	b.n	800879a <_malloc_r+0x22>
 8008832:	6862      	ldr	r2, [r4, #4]
 8008834:	42a3      	cmp	r3, r4
 8008836:	bf0c      	ite	eq
 8008838:	6032      	streq	r2, [r6, #0]
 800883a:	605a      	strne	r2, [r3, #4]
 800883c:	e7ec      	b.n	8008818 <_malloc_r+0xa0>
 800883e:	4623      	mov	r3, r4
 8008840:	6864      	ldr	r4, [r4, #4]
 8008842:	e7b2      	b.n	80087aa <_malloc_r+0x32>
 8008844:	4634      	mov	r4, r6
 8008846:	6876      	ldr	r6, [r6, #4]
 8008848:	e7b9      	b.n	80087be <_malloc_r+0x46>
 800884a:	230c      	movs	r3, #12
 800884c:	603b      	str	r3, [r7, #0]
 800884e:	4638      	mov	r0, r7
 8008850:	f000 fdf2 	bl	8009438 <__malloc_unlock>
 8008854:	e7a1      	b.n	800879a <_malloc_r+0x22>
 8008856:	6025      	str	r5, [r4, #0]
 8008858:	e7de      	b.n	8008818 <_malloc_r+0xa0>
 800885a:	bf00      	nop
 800885c:	200006d8 	.word	0x200006d8

08008860 <__sfputc_r>:
 8008860:	6893      	ldr	r3, [r2, #8]
 8008862:	3b01      	subs	r3, #1
 8008864:	2b00      	cmp	r3, #0
 8008866:	b410      	push	{r4}
 8008868:	6093      	str	r3, [r2, #8]
 800886a:	da08      	bge.n	800887e <__sfputc_r+0x1e>
 800886c:	6994      	ldr	r4, [r2, #24]
 800886e:	42a3      	cmp	r3, r4
 8008870:	db01      	blt.n	8008876 <__sfputc_r+0x16>
 8008872:	290a      	cmp	r1, #10
 8008874:	d103      	bne.n	800887e <__sfputc_r+0x1e>
 8008876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800887a:	f000 baef 	b.w	8008e5c <__swbuf_r>
 800887e:	6813      	ldr	r3, [r2, #0]
 8008880:	1c58      	adds	r0, r3, #1
 8008882:	6010      	str	r0, [r2, #0]
 8008884:	7019      	strb	r1, [r3, #0]
 8008886:	4608      	mov	r0, r1
 8008888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800888c:	4770      	bx	lr

0800888e <__sfputs_r>:
 800888e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008890:	4606      	mov	r6, r0
 8008892:	460f      	mov	r7, r1
 8008894:	4614      	mov	r4, r2
 8008896:	18d5      	adds	r5, r2, r3
 8008898:	42ac      	cmp	r4, r5
 800889a:	d101      	bne.n	80088a0 <__sfputs_r+0x12>
 800889c:	2000      	movs	r0, #0
 800889e:	e007      	b.n	80088b0 <__sfputs_r+0x22>
 80088a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a4:	463a      	mov	r2, r7
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7ff ffda 	bl	8008860 <__sfputc_r>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d1f3      	bne.n	8008898 <__sfputs_r+0xa>
 80088b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088b4 <_vfiprintf_r>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	460d      	mov	r5, r1
 80088ba:	b09d      	sub	sp, #116	; 0x74
 80088bc:	4614      	mov	r4, r2
 80088be:	4698      	mov	r8, r3
 80088c0:	4606      	mov	r6, r0
 80088c2:	b118      	cbz	r0, 80088cc <_vfiprintf_r+0x18>
 80088c4:	6983      	ldr	r3, [r0, #24]
 80088c6:	b90b      	cbnz	r3, 80088cc <_vfiprintf_r+0x18>
 80088c8:	f000 fcaa 	bl	8009220 <__sinit>
 80088cc:	4b89      	ldr	r3, [pc, #548]	; (8008af4 <_vfiprintf_r+0x240>)
 80088ce:	429d      	cmp	r5, r3
 80088d0:	d11b      	bne.n	800890a <_vfiprintf_r+0x56>
 80088d2:	6875      	ldr	r5, [r6, #4]
 80088d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088d6:	07d9      	lsls	r1, r3, #31
 80088d8:	d405      	bmi.n	80088e6 <_vfiprintf_r+0x32>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	059a      	lsls	r2, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_vfiprintf_r+0x32>
 80088e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088e2:	f000 fd3b 	bl	800935c <__retarget_lock_acquire_recursive>
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	071b      	lsls	r3, r3, #28
 80088ea:	d501      	bpl.n	80088f0 <_vfiprintf_r+0x3c>
 80088ec:	692b      	ldr	r3, [r5, #16]
 80088ee:	b9eb      	cbnz	r3, 800892c <_vfiprintf_r+0x78>
 80088f0:	4629      	mov	r1, r5
 80088f2:	4630      	mov	r0, r6
 80088f4:	f000 fb04 	bl	8008f00 <__swsetup_r>
 80088f8:	b1c0      	cbz	r0, 800892c <_vfiprintf_r+0x78>
 80088fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088fc:	07dc      	lsls	r4, r3, #31
 80088fe:	d50e      	bpl.n	800891e <_vfiprintf_r+0x6a>
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	b01d      	add	sp, #116	; 0x74
 8008906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890a:	4b7b      	ldr	r3, [pc, #492]	; (8008af8 <_vfiprintf_r+0x244>)
 800890c:	429d      	cmp	r5, r3
 800890e:	d101      	bne.n	8008914 <_vfiprintf_r+0x60>
 8008910:	68b5      	ldr	r5, [r6, #8]
 8008912:	e7df      	b.n	80088d4 <_vfiprintf_r+0x20>
 8008914:	4b79      	ldr	r3, [pc, #484]	; (8008afc <_vfiprintf_r+0x248>)
 8008916:	429d      	cmp	r5, r3
 8008918:	bf08      	it	eq
 800891a:	68f5      	ldreq	r5, [r6, #12]
 800891c:	e7da      	b.n	80088d4 <_vfiprintf_r+0x20>
 800891e:	89ab      	ldrh	r3, [r5, #12]
 8008920:	0598      	lsls	r0, r3, #22
 8008922:	d4ed      	bmi.n	8008900 <_vfiprintf_r+0x4c>
 8008924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008926:	f000 fd1a 	bl	800935e <__retarget_lock_release_recursive>
 800892a:	e7e9      	b.n	8008900 <_vfiprintf_r+0x4c>
 800892c:	2300      	movs	r3, #0
 800892e:	9309      	str	r3, [sp, #36]	; 0x24
 8008930:	2320      	movs	r3, #32
 8008932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008936:	f8cd 800c 	str.w	r8, [sp, #12]
 800893a:	2330      	movs	r3, #48	; 0x30
 800893c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b00 <_vfiprintf_r+0x24c>
 8008940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008944:	f04f 0901 	mov.w	r9, #1
 8008948:	4623      	mov	r3, r4
 800894a:	469a      	mov	sl, r3
 800894c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008950:	b10a      	cbz	r2, 8008956 <_vfiprintf_r+0xa2>
 8008952:	2a25      	cmp	r2, #37	; 0x25
 8008954:	d1f9      	bne.n	800894a <_vfiprintf_r+0x96>
 8008956:	ebba 0b04 	subs.w	fp, sl, r4
 800895a:	d00b      	beq.n	8008974 <_vfiprintf_r+0xc0>
 800895c:	465b      	mov	r3, fp
 800895e:	4622      	mov	r2, r4
 8008960:	4629      	mov	r1, r5
 8008962:	4630      	mov	r0, r6
 8008964:	f7ff ff93 	bl	800888e <__sfputs_r>
 8008968:	3001      	adds	r0, #1
 800896a:	f000 80aa 	beq.w	8008ac2 <_vfiprintf_r+0x20e>
 800896e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008970:	445a      	add	r2, fp
 8008972:	9209      	str	r2, [sp, #36]	; 0x24
 8008974:	f89a 3000 	ldrb.w	r3, [sl]
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 80a2 	beq.w	8008ac2 <_vfiprintf_r+0x20e>
 800897e:	2300      	movs	r3, #0
 8008980:	f04f 32ff 	mov.w	r2, #4294967295
 8008984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008988:	f10a 0a01 	add.w	sl, sl, #1
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	9307      	str	r3, [sp, #28]
 8008990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008994:	931a      	str	r3, [sp, #104]	; 0x68
 8008996:	4654      	mov	r4, sl
 8008998:	2205      	movs	r2, #5
 800899a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899e:	4858      	ldr	r0, [pc, #352]	; (8008b00 <_vfiprintf_r+0x24c>)
 80089a0:	f7f7 fc2e 	bl	8000200 <memchr>
 80089a4:	9a04      	ldr	r2, [sp, #16]
 80089a6:	b9d8      	cbnz	r0, 80089e0 <_vfiprintf_r+0x12c>
 80089a8:	06d1      	lsls	r1, r2, #27
 80089aa:	bf44      	itt	mi
 80089ac:	2320      	movmi	r3, #32
 80089ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b2:	0713      	lsls	r3, r2, #28
 80089b4:	bf44      	itt	mi
 80089b6:	232b      	movmi	r3, #43	; 0x2b
 80089b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089bc:	f89a 3000 	ldrb.w	r3, [sl]
 80089c0:	2b2a      	cmp	r3, #42	; 0x2a
 80089c2:	d015      	beq.n	80089f0 <_vfiprintf_r+0x13c>
 80089c4:	9a07      	ldr	r2, [sp, #28]
 80089c6:	4654      	mov	r4, sl
 80089c8:	2000      	movs	r0, #0
 80089ca:	f04f 0c0a 	mov.w	ip, #10
 80089ce:	4621      	mov	r1, r4
 80089d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d4:	3b30      	subs	r3, #48	; 0x30
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	d94e      	bls.n	8008a78 <_vfiprintf_r+0x1c4>
 80089da:	b1b0      	cbz	r0, 8008a0a <_vfiprintf_r+0x156>
 80089dc:	9207      	str	r2, [sp, #28]
 80089de:	e014      	b.n	8008a0a <_vfiprintf_r+0x156>
 80089e0:	eba0 0308 	sub.w	r3, r0, r8
 80089e4:	fa09 f303 	lsl.w	r3, r9, r3
 80089e8:	4313      	orrs	r3, r2
 80089ea:	9304      	str	r3, [sp, #16]
 80089ec:	46a2      	mov	sl, r4
 80089ee:	e7d2      	b.n	8008996 <_vfiprintf_r+0xe2>
 80089f0:	9b03      	ldr	r3, [sp, #12]
 80089f2:	1d19      	adds	r1, r3, #4
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	9103      	str	r1, [sp, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	bfbb      	ittet	lt
 80089fc:	425b      	neglt	r3, r3
 80089fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008a02:	9307      	strge	r3, [sp, #28]
 8008a04:	9307      	strlt	r3, [sp, #28]
 8008a06:	bfb8      	it	lt
 8008a08:	9204      	strlt	r2, [sp, #16]
 8008a0a:	7823      	ldrb	r3, [r4, #0]
 8008a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008a0e:	d10c      	bne.n	8008a2a <_vfiprintf_r+0x176>
 8008a10:	7863      	ldrb	r3, [r4, #1]
 8008a12:	2b2a      	cmp	r3, #42	; 0x2a
 8008a14:	d135      	bne.n	8008a82 <_vfiprintf_r+0x1ce>
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	1d1a      	adds	r2, r3, #4
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	9203      	str	r2, [sp, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bfb8      	it	lt
 8008a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a26:	3402      	adds	r4, #2
 8008a28:	9305      	str	r3, [sp, #20]
 8008a2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b10 <_vfiprintf_r+0x25c>
 8008a2e:	7821      	ldrb	r1, [r4, #0]
 8008a30:	2203      	movs	r2, #3
 8008a32:	4650      	mov	r0, sl
 8008a34:	f7f7 fbe4 	bl	8000200 <memchr>
 8008a38:	b140      	cbz	r0, 8008a4c <_vfiprintf_r+0x198>
 8008a3a:	2340      	movs	r3, #64	; 0x40
 8008a3c:	eba0 000a 	sub.w	r0, r0, sl
 8008a40:	fa03 f000 	lsl.w	r0, r3, r0
 8008a44:	9b04      	ldr	r3, [sp, #16]
 8008a46:	4303      	orrs	r3, r0
 8008a48:	3401      	adds	r4, #1
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a50:	482c      	ldr	r0, [pc, #176]	; (8008b04 <_vfiprintf_r+0x250>)
 8008a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a56:	2206      	movs	r2, #6
 8008a58:	f7f7 fbd2 	bl	8000200 <memchr>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d03f      	beq.n	8008ae0 <_vfiprintf_r+0x22c>
 8008a60:	4b29      	ldr	r3, [pc, #164]	; (8008b08 <_vfiprintf_r+0x254>)
 8008a62:	bb1b      	cbnz	r3, 8008aac <_vfiprintf_r+0x1f8>
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	3307      	adds	r3, #7
 8008a68:	f023 0307 	bic.w	r3, r3, #7
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	9303      	str	r3, [sp, #12]
 8008a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a72:	443b      	add	r3, r7
 8008a74:	9309      	str	r3, [sp, #36]	; 0x24
 8008a76:	e767      	b.n	8008948 <_vfiprintf_r+0x94>
 8008a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	2001      	movs	r0, #1
 8008a80:	e7a5      	b.n	80089ce <_vfiprintf_r+0x11a>
 8008a82:	2300      	movs	r3, #0
 8008a84:	3401      	adds	r4, #1
 8008a86:	9305      	str	r3, [sp, #20]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f04f 0c0a 	mov.w	ip, #10
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a94:	3a30      	subs	r2, #48	; 0x30
 8008a96:	2a09      	cmp	r2, #9
 8008a98:	d903      	bls.n	8008aa2 <_vfiprintf_r+0x1ee>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0c5      	beq.n	8008a2a <_vfiprintf_r+0x176>
 8008a9e:	9105      	str	r1, [sp, #20]
 8008aa0:	e7c3      	b.n	8008a2a <_vfiprintf_r+0x176>
 8008aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e7f0      	b.n	8008a8e <_vfiprintf_r+0x1da>
 8008aac:	ab03      	add	r3, sp, #12
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4b16      	ldr	r3, [pc, #88]	; (8008b0c <_vfiprintf_r+0x258>)
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f3af 8000 	nop.w
 8008abc:	4607      	mov	r7, r0
 8008abe:	1c78      	adds	r0, r7, #1
 8008ac0:	d1d6      	bne.n	8008a70 <_vfiprintf_r+0x1bc>
 8008ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ac4:	07d9      	lsls	r1, r3, #31
 8008ac6:	d405      	bmi.n	8008ad4 <_vfiprintf_r+0x220>
 8008ac8:	89ab      	ldrh	r3, [r5, #12]
 8008aca:	059a      	lsls	r2, r3, #22
 8008acc:	d402      	bmi.n	8008ad4 <_vfiprintf_r+0x220>
 8008ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ad0:	f000 fc45 	bl	800935e <__retarget_lock_release_recursive>
 8008ad4:	89ab      	ldrh	r3, [r5, #12]
 8008ad6:	065b      	lsls	r3, r3, #25
 8008ad8:	f53f af12 	bmi.w	8008900 <_vfiprintf_r+0x4c>
 8008adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ade:	e711      	b.n	8008904 <_vfiprintf_r+0x50>
 8008ae0:	ab03      	add	r3, sp, #12
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	4b09      	ldr	r3, [pc, #36]	; (8008b0c <_vfiprintf_r+0x258>)
 8008ae8:	a904      	add	r1, sp, #16
 8008aea:	4630      	mov	r0, r6
 8008aec:	f000 f880 	bl	8008bf0 <_printf_i>
 8008af0:	e7e4      	b.n	8008abc <_vfiprintf_r+0x208>
 8008af2:	bf00      	nop
 8008af4:	08009a20 	.word	0x08009a20
 8008af8:	08009a40 	.word	0x08009a40
 8008afc:	08009a00 	.word	0x08009a00
 8008b00:	080099cc 	.word	0x080099cc
 8008b04:	080099d6 	.word	0x080099d6
 8008b08:	00000000 	.word	0x00000000
 8008b0c:	0800888f 	.word	0x0800888f
 8008b10:	080099d2 	.word	0x080099d2

08008b14 <_printf_common>:
 8008b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b18:	4616      	mov	r6, r2
 8008b1a:	4699      	mov	r9, r3
 8008b1c:	688a      	ldr	r2, [r1, #8]
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bfb8      	it	lt
 8008b28:	4613      	movlt	r3, r2
 8008b2a:	6033      	str	r3, [r6, #0]
 8008b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b30:	4607      	mov	r7, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b10a      	cbz	r2, 8008b3a <_printf_common+0x26>
 8008b36:	3301      	adds	r3, #1
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	0699      	lsls	r1, r3, #26
 8008b3e:	bf42      	ittt	mi
 8008b40:	6833      	ldrmi	r3, [r6, #0]
 8008b42:	3302      	addmi	r3, #2
 8008b44:	6033      	strmi	r3, [r6, #0]
 8008b46:	6825      	ldr	r5, [r4, #0]
 8008b48:	f015 0506 	ands.w	r5, r5, #6
 8008b4c:	d106      	bne.n	8008b5c <_printf_common+0x48>
 8008b4e:	f104 0a19 	add.w	sl, r4, #25
 8008b52:	68e3      	ldr	r3, [r4, #12]
 8008b54:	6832      	ldr	r2, [r6, #0]
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	42ab      	cmp	r3, r5
 8008b5a:	dc26      	bgt.n	8008baa <_printf_common+0x96>
 8008b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b60:	1e13      	subs	r3, r2, #0
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	bf18      	it	ne
 8008b66:	2301      	movne	r3, #1
 8008b68:	0692      	lsls	r2, r2, #26
 8008b6a:	d42b      	bmi.n	8008bc4 <_printf_common+0xb0>
 8008b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b70:	4649      	mov	r1, r9
 8008b72:	4638      	mov	r0, r7
 8008b74:	47c0      	blx	r8
 8008b76:	3001      	adds	r0, #1
 8008b78:	d01e      	beq.n	8008bb8 <_printf_common+0xa4>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	68e5      	ldr	r5, [r4, #12]
 8008b7e:	6832      	ldr	r2, [r6, #0]
 8008b80:	f003 0306 	and.w	r3, r3, #6
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	bf08      	it	eq
 8008b88:	1aad      	subeq	r5, r5, r2
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	6922      	ldr	r2, [r4, #16]
 8008b8e:	bf0c      	ite	eq
 8008b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b94:	2500      	movne	r5, #0
 8008b96:	4293      	cmp	r3, r2
 8008b98:	bfc4      	itt	gt
 8008b9a:	1a9b      	subgt	r3, r3, r2
 8008b9c:	18ed      	addgt	r5, r5, r3
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	341a      	adds	r4, #26
 8008ba2:	42b5      	cmp	r5, r6
 8008ba4:	d11a      	bne.n	8008bdc <_printf_common+0xc8>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e008      	b.n	8008bbc <_printf_common+0xa8>
 8008baa:	2301      	movs	r3, #1
 8008bac:	4652      	mov	r2, sl
 8008bae:	4649      	mov	r1, r9
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	47c0      	blx	r8
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d103      	bne.n	8008bc0 <_printf_common+0xac>
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc0:	3501      	adds	r5, #1
 8008bc2:	e7c6      	b.n	8008b52 <_printf_common+0x3e>
 8008bc4:	18e1      	adds	r1, r4, r3
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	2030      	movs	r0, #48	; 0x30
 8008bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bce:	4422      	add	r2, r4
 8008bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bd8:	3302      	adds	r3, #2
 8008bda:	e7c7      	b.n	8008b6c <_printf_common+0x58>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4622      	mov	r2, r4
 8008be0:	4649      	mov	r1, r9
 8008be2:	4638      	mov	r0, r7
 8008be4:	47c0      	blx	r8
 8008be6:	3001      	adds	r0, #1
 8008be8:	d0e6      	beq.n	8008bb8 <_printf_common+0xa4>
 8008bea:	3601      	adds	r6, #1
 8008bec:	e7d9      	b.n	8008ba2 <_printf_common+0x8e>
	...

08008bf0 <_printf_i>:
 8008bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	7e0f      	ldrb	r7, [r1, #24]
 8008bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bf8:	2f78      	cmp	r7, #120	; 0x78
 8008bfa:	4691      	mov	r9, r2
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	469a      	mov	sl, r3
 8008c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c06:	d807      	bhi.n	8008c18 <_printf_i+0x28>
 8008c08:	2f62      	cmp	r7, #98	; 0x62
 8008c0a:	d80a      	bhi.n	8008c22 <_printf_i+0x32>
 8008c0c:	2f00      	cmp	r7, #0
 8008c0e:	f000 80d8 	beq.w	8008dc2 <_printf_i+0x1d2>
 8008c12:	2f58      	cmp	r7, #88	; 0x58
 8008c14:	f000 80a3 	beq.w	8008d5e <_printf_i+0x16e>
 8008c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c20:	e03a      	b.n	8008c98 <_printf_i+0xa8>
 8008c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c26:	2b15      	cmp	r3, #21
 8008c28:	d8f6      	bhi.n	8008c18 <_printf_i+0x28>
 8008c2a:	a101      	add	r1, pc, #4	; (adr r1, 8008c30 <_printf_i+0x40>)
 8008c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c30:	08008c89 	.word	0x08008c89
 8008c34:	08008c9d 	.word	0x08008c9d
 8008c38:	08008c19 	.word	0x08008c19
 8008c3c:	08008c19 	.word	0x08008c19
 8008c40:	08008c19 	.word	0x08008c19
 8008c44:	08008c19 	.word	0x08008c19
 8008c48:	08008c9d 	.word	0x08008c9d
 8008c4c:	08008c19 	.word	0x08008c19
 8008c50:	08008c19 	.word	0x08008c19
 8008c54:	08008c19 	.word	0x08008c19
 8008c58:	08008c19 	.word	0x08008c19
 8008c5c:	08008da9 	.word	0x08008da9
 8008c60:	08008ccd 	.word	0x08008ccd
 8008c64:	08008d8b 	.word	0x08008d8b
 8008c68:	08008c19 	.word	0x08008c19
 8008c6c:	08008c19 	.word	0x08008c19
 8008c70:	08008dcb 	.word	0x08008dcb
 8008c74:	08008c19 	.word	0x08008c19
 8008c78:	08008ccd 	.word	0x08008ccd
 8008c7c:	08008c19 	.word	0x08008c19
 8008c80:	08008c19 	.word	0x08008c19
 8008c84:	08008d93 	.word	0x08008d93
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	1d1a      	adds	r2, r3, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0a3      	b.n	8008de4 <_printf_i+0x1f4>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	6829      	ldr	r1, [r5, #0]
 8008ca0:	0606      	lsls	r6, r0, #24
 8008ca2:	f101 0304 	add.w	r3, r1, #4
 8008ca6:	d50a      	bpl.n	8008cbe <_printf_i+0xce>
 8008ca8:	680e      	ldr	r6, [r1, #0]
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	2e00      	cmp	r6, #0
 8008cae:	da03      	bge.n	8008cb8 <_printf_i+0xc8>
 8008cb0:	232d      	movs	r3, #45	; 0x2d
 8008cb2:	4276      	negs	r6, r6
 8008cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb8:	485e      	ldr	r0, [pc, #376]	; (8008e34 <_printf_i+0x244>)
 8008cba:	230a      	movs	r3, #10
 8008cbc:	e019      	b.n	8008cf2 <_printf_i+0x102>
 8008cbe:	680e      	ldr	r6, [r1, #0]
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cc6:	bf18      	it	ne
 8008cc8:	b236      	sxthne	r6, r6
 8008cca:	e7ef      	b.n	8008cac <_printf_i+0xbc>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	1d19      	adds	r1, r3, #4
 8008cd2:	6029      	str	r1, [r5, #0]
 8008cd4:	0601      	lsls	r1, r0, #24
 8008cd6:	d501      	bpl.n	8008cdc <_printf_i+0xec>
 8008cd8:	681e      	ldr	r6, [r3, #0]
 8008cda:	e002      	b.n	8008ce2 <_printf_i+0xf2>
 8008cdc:	0646      	lsls	r6, r0, #25
 8008cde:	d5fb      	bpl.n	8008cd8 <_printf_i+0xe8>
 8008ce0:	881e      	ldrh	r6, [r3, #0]
 8008ce2:	4854      	ldr	r0, [pc, #336]	; (8008e34 <_printf_i+0x244>)
 8008ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2308      	moveq	r3, #8
 8008cea:	230a      	movne	r3, #10
 8008cec:	2100      	movs	r1, #0
 8008cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf2:	6865      	ldr	r5, [r4, #4]
 8008cf4:	60a5      	str	r5, [r4, #8]
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	bfa2      	ittt	ge
 8008cfa:	6821      	ldrge	r1, [r4, #0]
 8008cfc:	f021 0104 	bicge.w	r1, r1, #4
 8008d00:	6021      	strge	r1, [r4, #0]
 8008d02:	b90e      	cbnz	r6, 8008d08 <_printf_i+0x118>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	d04d      	beq.n	8008da4 <_printf_i+0x1b4>
 8008d08:	4615      	mov	r5, r2
 8008d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d12:	5dc7      	ldrb	r7, [r0, r7]
 8008d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d18:	4637      	mov	r7, r6
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	460e      	mov	r6, r1
 8008d1e:	d9f4      	bls.n	8008d0a <_printf_i+0x11a>
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d10b      	bne.n	8008d3c <_printf_i+0x14c>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	07de      	lsls	r6, r3, #31
 8008d28:	d508      	bpl.n	8008d3c <_printf_i+0x14c>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	bfde      	ittt	le
 8008d32:	2330      	movle	r3, #48	; 0x30
 8008d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d3c:	1b52      	subs	r2, r2, r5
 8008d3e:	6122      	str	r2, [r4, #16]
 8008d40:	f8cd a000 	str.w	sl, [sp]
 8008d44:	464b      	mov	r3, r9
 8008d46:	aa03      	add	r2, sp, #12
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7ff fee2 	bl	8008b14 <_printf_common>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d14c      	bne.n	8008dee <_printf_i+0x1fe>
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	b004      	add	sp, #16
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	4835      	ldr	r0, [pc, #212]	; (8008e34 <_printf_i+0x244>)
 8008d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d64:	6829      	ldr	r1, [r5, #0]
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d6c:	6029      	str	r1, [r5, #0]
 8008d6e:	061d      	lsls	r5, r3, #24
 8008d70:	d514      	bpl.n	8008d9c <_printf_i+0x1ac>
 8008d72:	07df      	lsls	r7, r3, #31
 8008d74:	bf44      	itt	mi
 8008d76:	f043 0320 	orrmi.w	r3, r3, #32
 8008d7a:	6023      	strmi	r3, [r4, #0]
 8008d7c:	b91e      	cbnz	r6, 8008d86 <_printf_i+0x196>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	f023 0320 	bic.w	r3, r3, #32
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	2310      	movs	r3, #16
 8008d88:	e7b0      	b.n	8008cec <_printf_i+0xfc>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f043 0320 	orr.w	r3, r3, #32
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	2378      	movs	r3, #120	; 0x78
 8008d94:	4828      	ldr	r0, [pc, #160]	; (8008e38 <_printf_i+0x248>)
 8008d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d9a:	e7e3      	b.n	8008d64 <_printf_i+0x174>
 8008d9c:	0659      	lsls	r1, r3, #25
 8008d9e:	bf48      	it	mi
 8008da0:	b2b6      	uxthmi	r6, r6
 8008da2:	e7e6      	b.n	8008d72 <_printf_i+0x182>
 8008da4:	4615      	mov	r5, r2
 8008da6:	e7bb      	b.n	8008d20 <_printf_i+0x130>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	6826      	ldr	r6, [r4, #0]
 8008dac:	6961      	ldr	r1, [r4, #20]
 8008dae:	1d18      	adds	r0, r3, #4
 8008db0:	6028      	str	r0, [r5, #0]
 8008db2:	0635      	lsls	r5, r6, #24
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	d501      	bpl.n	8008dbc <_printf_i+0x1cc>
 8008db8:	6019      	str	r1, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <_printf_i+0x1d2>
 8008dbc:	0670      	lsls	r0, r6, #25
 8008dbe:	d5fb      	bpl.n	8008db8 <_printf_i+0x1c8>
 8008dc0:	8019      	strh	r1, [r3, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	e7ba      	b.n	8008d40 <_printf_i+0x150>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	602a      	str	r2, [r5, #0]
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 fa12 	bl	8000200 <memchr>
 8008ddc:	b108      	cbz	r0, 8008de2 <_printf_i+0x1f2>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	6060      	str	r0, [r4, #4]
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	2300      	movs	r3, #0
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	e7a8      	b.n	8008d40 <_printf_i+0x150>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	462a      	mov	r2, r5
 8008df2:	4649      	mov	r1, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	47d0      	blx	sl
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d0ab      	beq.n	8008d54 <_printf_i+0x164>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	079b      	lsls	r3, r3, #30
 8008e00:	d413      	bmi.n	8008e2a <_printf_i+0x23a>
 8008e02:	68e0      	ldr	r0, [r4, #12]
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	4298      	cmp	r0, r3
 8008e08:	bfb8      	it	lt
 8008e0a:	4618      	movlt	r0, r3
 8008e0c:	e7a4      	b.n	8008d58 <_printf_i+0x168>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4632      	mov	r2, r6
 8008e12:	4649      	mov	r1, r9
 8008e14:	4640      	mov	r0, r8
 8008e16:	47d0      	blx	sl
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d09b      	beq.n	8008d54 <_printf_i+0x164>
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	9903      	ldr	r1, [sp, #12]
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	42ab      	cmp	r3, r5
 8008e26:	dcf2      	bgt.n	8008e0e <_printf_i+0x21e>
 8008e28:	e7eb      	b.n	8008e02 <_printf_i+0x212>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	f104 0619 	add.w	r6, r4, #25
 8008e30:	e7f5      	b.n	8008e1e <_printf_i+0x22e>
 8008e32:	bf00      	nop
 8008e34:	080099dd 	.word	0x080099dd
 8008e38:	080099ee 	.word	0x080099ee

08008e3c <_sbrk_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d06      	ldr	r5, [pc, #24]	; (8008e58 <_sbrk_r+0x1c>)
 8008e40:	2300      	movs	r3, #0
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	602b      	str	r3, [r5, #0]
 8008e48:	f7fb fba6 	bl	8004598 <_sbrk>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_sbrk_r+0x1a>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_sbrk_r+0x1a>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	200006e4 	.word	0x200006e4

08008e5c <__swbuf_r>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	460e      	mov	r6, r1
 8008e60:	4614      	mov	r4, r2
 8008e62:	4605      	mov	r5, r0
 8008e64:	b118      	cbz	r0, 8008e6e <__swbuf_r+0x12>
 8008e66:	6983      	ldr	r3, [r0, #24]
 8008e68:	b90b      	cbnz	r3, 8008e6e <__swbuf_r+0x12>
 8008e6a:	f000 f9d9 	bl	8009220 <__sinit>
 8008e6e:	4b21      	ldr	r3, [pc, #132]	; (8008ef4 <__swbuf_r+0x98>)
 8008e70:	429c      	cmp	r4, r3
 8008e72:	d12b      	bne.n	8008ecc <__swbuf_r+0x70>
 8008e74:	686c      	ldr	r4, [r5, #4]
 8008e76:	69a3      	ldr	r3, [r4, #24]
 8008e78:	60a3      	str	r3, [r4, #8]
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	071a      	lsls	r2, r3, #28
 8008e7e:	d52f      	bpl.n	8008ee0 <__swbuf_r+0x84>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	b36b      	cbz	r3, 8008ee0 <__swbuf_r+0x84>
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	6820      	ldr	r0, [r4, #0]
 8008e88:	1ac0      	subs	r0, r0, r3
 8008e8a:	6963      	ldr	r3, [r4, #20]
 8008e8c:	b2f6      	uxtb	r6, r6
 8008e8e:	4283      	cmp	r3, r0
 8008e90:	4637      	mov	r7, r6
 8008e92:	dc04      	bgt.n	8008e9e <__swbuf_r+0x42>
 8008e94:	4621      	mov	r1, r4
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 f92e 	bl	80090f8 <_fflush_r>
 8008e9c:	bb30      	cbnz	r0, 8008eec <__swbuf_r+0x90>
 8008e9e:	68a3      	ldr	r3, [r4, #8]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	60a3      	str	r3, [r4, #8]
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	6022      	str	r2, [r4, #0]
 8008eaa:	701e      	strb	r6, [r3, #0]
 8008eac:	6963      	ldr	r3, [r4, #20]
 8008eae:	3001      	adds	r0, #1
 8008eb0:	4283      	cmp	r3, r0
 8008eb2:	d004      	beq.n	8008ebe <__swbuf_r+0x62>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	07db      	lsls	r3, r3, #31
 8008eb8:	d506      	bpl.n	8008ec8 <__swbuf_r+0x6c>
 8008eba:	2e0a      	cmp	r6, #10
 8008ebc:	d104      	bne.n	8008ec8 <__swbuf_r+0x6c>
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f000 f919 	bl	80090f8 <_fflush_r>
 8008ec6:	b988      	cbnz	r0, 8008eec <__swbuf_r+0x90>
 8008ec8:	4638      	mov	r0, r7
 8008eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <__swbuf_r+0x9c>)
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	d101      	bne.n	8008ed6 <__swbuf_r+0x7a>
 8008ed2:	68ac      	ldr	r4, [r5, #8]
 8008ed4:	e7cf      	b.n	8008e76 <__swbuf_r+0x1a>
 8008ed6:	4b09      	ldr	r3, [pc, #36]	; (8008efc <__swbuf_r+0xa0>)
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	bf08      	it	eq
 8008edc:	68ec      	ldreq	r4, [r5, #12]
 8008ede:	e7ca      	b.n	8008e76 <__swbuf_r+0x1a>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 f80c 	bl	8008f00 <__swsetup_r>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d0cb      	beq.n	8008e84 <__swbuf_r+0x28>
 8008eec:	f04f 37ff 	mov.w	r7, #4294967295
 8008ef0:	e7ea      	b.n	8008ec8 <__swbuf_r+0x6c>
 8008ef2:	bf00      	nop
 8008ef4:	08009a20 	.word	0x08009a20
 8008ef8:	08009a40 	.word	0x08009a40
 8008efc:	08009a00 	.word	0x08009a00

08008f00 <__swsetup_r>:
 8008f00:	4b32      	ldr	r3, [pc, #200]	; (8008fcc <__swsetup_r+0xcc>)
 8008f02:	b570      	push	{r4, r5, r6, lr}
 8008f04:	681d      	ldr	r5, [r3, #0]
 8008f06:	4606      	mov	r6, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	b125      	cbz	r5, 8008f16 <__swsetup_r+0x16>
 8008f0c:	69ab      	ldr	r3, [r5, #24]
 8008f0e:	b913      	cbnz	r3, 8008f16 <__swsetup_r+0x16>
 8008f10:	4628      	mov	r0, r5
 8008f12:	f000 f985 	bl	8009220 <__sinit>
 8008f16:	4b2e      	ldr	r3, [pc, #184]	; (8008fd0 <__swsetup_r+0xd0>)
 8008f18:	429c      	cmp	r4, r3
 8008f1a:	d10f      	bne.n	8008f3c <__swsetup_r+0x3c>
 8008f1c:	686c      	ldr	r4, [r5, #4]
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f24:	0719      	lsls	r1, r3, #28
 8008f26:	d42c      	bmi.n	8008f82 <__swsetup_r+0x82>
 8008f28:	06dd      	lsls	r5, r3, #27
 8008f2a:	d411      	bmi.n	8008f50 <__swsetup_r+0x50>
 8008f2c:	2309      	movs	r3, #9
 8008f2e:	6033      	str	r3, [r6, #0]
 8008f30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f34:	81a3      	strh	r3, [r4, #12]
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3a:	e03e      	b.n	8008fba <__swsetup_r+0xba>
 8008f3c:	4b25      	ldr	r3, [pc, #148]	; (8008fd4 <__swsetup_r+0xd4>)
 8008f3e:	429c      	cmp	r4, r3
 8008f40:	d101      	bne.n	8008f46 <__swsetup_r+0x46>
 8008f42:	68ac      	ldr	r4, [r5, #8]
 8008f44:	e7eb      	b.n	8008f1e <__swsetup_r+0x1e>
 8008f46:	4b24      	ldr	r3, [pc, #144]	; (8008fd8 <__swsetup_r+0xd8>)
 8008f48:	429c      	cmp	r4, r3
 8008f4a:	bf08      	it	eq
 8008f4c:	68ec      	ldreq	r4, [r5, #12]
 8008f4e:	e7e6      	b.n	8008f1e <__swsetup_r+0x1e>
 8008f50:	0758      	lsls	r0, r3, #29
 8008f52:	d512      	bpl.n	8008f7a <__swsetup_r+0x7a>
 8008f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f56:	b141      	cbz	r1, 8008f6a <__swsetup_r+0x6a>
 8008f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f5c:	4299      	cmp	r1, r3
 8008f5e:	d002      	beq.n	8008f66 <__swsetup_r+0x66>
 8008f60:	4630      	mov	r0, r6
 8008f62:	f7ff fb9d 	bl	80086a0 <_free_r>
 8008f66:	2300      	movs	r3, #0
 8008f68:	6363      	str	r3, [r4, #52]	; 0x34
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	2300      	movs	r3, #0
 8008f74:	6063      	str	r3, [r4, #4]
 8008f76:	6923      	ldr	r3, [r4, #16]
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	f043 0308 	orr.w	r3, r3, #8
 8008f80:	81a3      	strh	r3, [r4, #12]
 8008f82:	6923      	ldr	r3, [r4, #16]
 8008f84:	b94b      	cbnz	r3, 8008f9a <__swsetup_r+0x9a>
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f90:	d003      	beq.n	8008f9a <__swsetup_r+0x9a>
 8008f92:	4621      	mov	r1, r4
 8008f94:	4630      	mov	r0, r6
 8008f96:	f000 fa09 	bl	80093ac <__smakebuf_r>
 8008f9a:	89a0      	ldrh	r0, [r4, #12]
 8008f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fa0:	f010 0301 	ands.w	r3, r0, #1
 8008fa4:	d00a      	beq.n	8008fbc <__swsetup_r+0xbc>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60a3      	str	r3, [r4, #8]
 8008faa:	6963      	ldr	r3, [r4, #20]
 8008fac:	425b      	negs	r3, r3
 8008fae:	61a3      	str	r3, [r4, #24]
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	b943      	cbnz	r3, 8008fc6 <__swsetup_r+0xc6>
 8008fb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fb8:	d1ba      	bne.n	8008f30 <__swsetup_r+0x30>
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	0781      	lsls	r1, r0, #30
 8008fbe:	bf58      	it	pl
 8008fc0:	6963      	ldrpl	r3, [r4, #20]
 8008fc2:	60a3      	str	r3, [r4, #8]
 8008fc4:	e7f4      	b.n	8008fb0 <__swsetup_r+0xb0>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e7f7      	b.n	8008fba <__swsetup_r+0xba>
 8008fca:	bf00      	nop
 8008fcc:	20000220 	.word	0x20000220
 8008fd0:	08009a20 	.word	0x08009a20
 8008fd4:	08009a40 	.word	0x08009a40
 8008fd8:	08009a00 	.word	0x08009a00

08008fdc <abort>:
 8008fdc:	b508      	push	{r3, lr}
 8008fde:	2006      	movs	r0, #6
 8008fe0:	f000 fa58 	bl	8009494 <raise>
 8008fe4:	2001      	movs	r0, #1
 8008fe6:	f7fb fa5f 	bl	80044a8 <_exit>
	...

08008fec <__sflush_r>:
 8008fec:	898a      	ldrh	r2, [r1, #12]
 8008fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	0710      	lsls	r0, r2, #28
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	d458      	bmi.n	80090ac <__sflush_r+0xc0>
 8008ffa:	684b      	ldr	r3, [r1, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dc05      	bgt.n	800900c <__sflush_r+0x20>
 8009000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009002:	2b00      	cmp	r3, #0
 8009004:	dc02      	bgt.n	800900c <__sflush_r+0x20>
 8009006:	2000      	movs	r0, #0
 8009008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800900e:	2e00      	cmp	r6, #0
 8009010:	d0f9      	beq.n	8009006 <__sflush_r+0x1a>
 8009012:	2300      	movs	r3, #0
 8009014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009018:	682f      	ldr	r7, [r5, #0]
 800901a:	602b      	str	r3, [r5, #0]
 800901c:	d032      	beq.n	8009084 <__sflush_r+0x98>
 800901e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009020:	89a3      	ldrh	r3, [r4, #12]
 8009022:	075a      	lsls	r2, r3, #29
 8009024:	d505      	bpl.n	8009032 <__sflush_r+0x46>
 8009026:	6863      	ldr	r3, [r4, #4]
 8009028:	1ac0      	subs	r0, r0, r3
 800902a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800902c:	b10b      	cbz	r3, 8009032 <__sflush_r+0x46>
 800902e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009030:	1ac0      	subs	r0, r0, r3
 8009032:	2300      	movs	r3, #0
 8009034:	4602      	mov	r2, r0
 8009036:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009038:	6a21      	ldr	r1, [r4, #32]
 800903a:	4628      	mov	r0, r5
 800903c:	47b0      	blx	r6
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	d106      	bne.n	8009052 <__sflush_r+0x66>
 8009044:	6829      	ldr	r1, [r5, #0]
 8009046:	291d      	cmp	r1, #29
 8009048:	d82c      	bhi.n	80090a4 <__sflush_r+0xb8>
 800904a:	4a2a      	ldr	r2, [pc, #168]	; (80090f4 <__sflush_r+0x108>)
 800904c:	40ca      	lsrs	r2, r1
 800904e:	07d6      	lsls	r6, r2, #31
 8009050:	d528      	bpl.n	80090a4 <__sflush_r+0xb8>
 8009052:	2200      	movs	r2, #0
 8009054:	6062      	str	r2, [r4, #4]
 8009056:	04d9      	lsls	r1, r3, #19
 8009058:	6922      	ldr	r2, [r4, #16]
 800905a:	6022      	str	r2, [r4, #0]
 800905c:	d504      	bpl.n	8009068 <__sflush_r+0x7c>
 800905e:	1c42      	adds	r2, r0, #1
 8009060:	d101      	bne.n	8009066 <__sflush_r+0x7a>
 8009062:	682b      	ldr	r3, [r5, #0]
 8009064:	b903      	cbnz	r3, 8009068 <__sflush_r+0x7c>
 8009066:	6560      	str	r0, [r4, #84]	; 0x54
 8009068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800906a:	602f      	str	r7, [r5, #0]
 800906c:	2900      	cmp	r1, #0
 800906e:	d0ca      	beq.n	8009006 <__sflush_r+0x1a>
 8009070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009074:	4299      	cmp	r1, r3
 8009076:	d002      	beq.n	800907e <__sflush_r+0x92>
 8009078:	4628      	mov	r0, r5
 800907a:	f7ff fb11 	bl	80086a0 <_free_r>
 800907e:	2000      	movs	r0, #0
 8009080:	6360      	str	r0, [r4, #52]	; 0x34
 8009082:	e7c1      	b.n	8009008 <__sflush_r+0x1c>
 8009084:	6a21      	ldr	r1, [r4, #32]
 8009086:	2301      	movs	r3, #1
 8009088:	4628      	mov	r0, r5
 800908a:	47b0      	blx	r6
 800908c:	1c41      	adds	r1, r0, #1
 800908e:	d1c7      	bne.n	8009020 <__sflush_r+0x34>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0c4      	beq.n	8009020 <__sflush_r+0x34>
 8009096:	2b1d      	cmp	r3, #29
 8009098:	d001      	beq.n	800909e <__sflush_r+0xb2>
 800909a:	2b16      	cmp	r3, #22
 800909c:	d101      	bne.n	80090a2 <__sflush_r+0xb6>
 800909e:	602f      	str	r7, [r5, #0]
 80090a0:	e7b1      	b.n	8009006 <__sflush_r+0x1a>
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a8:	81a3      	strh	r3, [r4, #12]
 80090aa:	e7ad      	b.n	8009008 <__sflush_r+0x1c>
 80090ac:	690f      	ldr	r7, [r1, #16]
 80090ae:	2f00      	cmp	r7, #0
 80090b0:	d0a9      	beq.n	8009006 <__sflush_r+0x1a>
 80090b2:	0793      	lsls	r3, r2, #30
 80090b4:	680e      	ldr	r6, [r1, #0]
 80090b6:	bf08      	it	eq
 80090b8:	694b      	ldreq	r3, [r1, #20]
 80090ba:	600f      	str	r7, [r1, #0]
 80090bc:	bf18      	it	ne
 80090be:	2300      	movne	r3, #0
 80090c0:	eba6 0807 	sub.w	r8, r6, r7
 80090c4:	608b      	str	r3, [r1, #8]
 80090c6:	f1b8 0f00 	cmp.w	r8, #0
 80090ca:	dd9c      	ble.n	8009006 <__sflush_r+0x1a>
 80090cc:	6a21      	ldr	r1, [r4, #32]
 80090ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090d0:	4643      	mov	r3, r8
 80090d2:	463a      	mov	r2, r7
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b0      	blx	r6
 80090d8:	2800      	cmp	r0, #0
 80090da:	dc06      	bgt.n	80090ea <__sflush_r+0xfe>
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	e78e      	b.n	8009008 <__sflush_r+0x1c>
 80090ea:	4407      	add	r7, r0
 80090ec:	eba8 0800 	sub.w	r8, r8, r0
 80090f0:	e7e9      	b.n	80090c6 <__sflush_r+0xda>
 80090f2:	bf00      	nop
 80090f4:	20400001 	.word	0x20400001

080090f8 <_fflush_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	690b      	ldr	r3, [r1, #16]
 80090fc:	4605      	mov	r5, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	b913      	cbnz	r3, 8009108 <_fflush_r+0x10>
 8009102:	2500      	movs	r5, #0
 8009104:	4628      	mov	r0, r5
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	b118      	cbz	r0, 8009112 <_fflush_r+0x1a>
 800910a:	6983      	ldr	r3, [r0, #24]
 800910c:	b90b      	cbnz	r3, 8009112 <_fflush_r+0x1a>
 800910e:	f000 f887 	bl	8009220 <__sinit>
 8009112:	4b14      	ldr	r3, [pc, #80]	; (8009164 <_fflush_r+0x6c>)
 8009114:	429c      	cmp	r4, r3
 8009116:	d11b      	bne.n	8009150 <_fflush_r+0x58>
 8009118:	686c      	ldr	r4, [r5, #4]
 800911a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0ef      	beq.n	8009102 <_fflush_r+0xa>
 8009122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009124:	07d0      	lsls	r0, r2, #31
 8009126:	d404      	bmi.n	8009132 <_fflush_r+0x3a>
 8009128:	0599      	lsls	r1, r3, #22
 800912a:	d402      	bmi.n	8009132 <_fflush_r+0x3a>
 800912c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800912e:	f000 f915 	bl	800935c <__retarget_lock_acquire_recursive>
 8009132:	4628      	mov	r0, r5
 8009134:	4621      	mov	r1, r4
 8009136:	f7ff ff59 	bl	8008fec <__sflush_r>
 800913a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800913c:	07da      	lsls	r2, r3, #31
 800913e:	4605      	mov	r5, r0
 8009140:	d4e0      	bmi.n	8009104 <_fflush_r+0xc>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	059b      	lsls	r3, r3, #22
 8009146:	d4dd      	bmi.n	8009104 <_fflush_r+0xc>
 8009148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800914a:	f000 f908 	bl	800935e <__retarget_lock_release_recursive>
 800914e:	e7d9      	b.n	8009104 <_fflush_r+0xc>
 8009150:	4b05      	ldr	r3, [pc, #20]	; (8009168 <_fflush_r+0x70>)
 8009152:	429c      	cmp	r4, r3
 8009154:	d101      	bne.n	800915a <_fflush_r+0x62>
 8009156:	68ac      	ldr	r4, [r5, #8]
 8009158:	e7df      	b.n	800911a <_fflush_r+0x22>
 800915a:	4b04      	ldr	r3, [pc, #16]	; (800916c <_fflush_r+0x74>)
 800915c:	429c      	cmp	r4, r3
 800915e:	bf08      	it	eq
 8009160:	68ec      	ldreq	r4, [r5, #12]
 8009162:	e7da      	b.n	800911a <_fflush_r+0x22>
 8009164:	08009a20 	.word	0x08009a20
 8009168:	08009a40 	.word	0x08009a40
 800916c:	08009a00 	.word	0x08009a00

08009170 <std>:
 8009170:	2300      	movs	r3, #0
 8009172:	b510      	push	{r4, lr}
 8009174:	4604      	mov	r4, r0
 8009176:	e9c0 3300 	strd	r3, r3, [r0]
 800917a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800917e:	6083      	str	r3, [r0, #8]
 8009180:	8181      	strh	r1, [r0, #12]
 8009182:	6643      	str	r3, [r0, #100]	; 0x64
 8009184:	81c2      	strh	r2, [r0, #14]
 8009186:	6183      	str	r3, [r0, #24]
 8009188:	4619      	mov	r1, r3
 800918a:	2208      	movs	r2, #8
 800918c:	305c      	adds	r0, #92	; 0x5c
 800918e:	f7ff fa7f 	bl	8008690 <memset>
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <std+0x38>)
 8009194:	6263      	str	r3, [r4, #36]	; 0x24
 8009196:	4b05      	ldr	r3, [pc, #20]	; (80091ac <std+0x3c>)
 8009198:	62a3      	str	r3, [r4, #40]	; 0x28
 800919a:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <std+0x40>)
 800919c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <std+0x44>)
 80091a0:	6224      	str	r4, [r4, #32]
 80091a2:	6323      	str	r3, [r4, #48]	; 0x30
 80091a4:	bd10      	pop	{r4, pc}
 80091a6:	bf00      	nop
 80091a8:	080094cd 	.word	0x080094cd
 80091ac:	080094ef 	.word	0x080094ef
 80091b0:	08009527 	.word	0x08009527
 80091b4:	0800954b 	.word	0x0800954b

080091b8 <_cleanup_r>:
 80091b8:	4901      	ldr	r1, [pc, #4]	; (80091c0 <_cleanup_r+0x8>)
 80091ba:	f000 b8af 	b.w	800931c <_fwalk_reent>
 80091be:	bf00      	nop
 80091c0:	080090f9 	.word	0x080090f9

080091c4 <__sfmoreglue>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	2268      	movs	r2, #104	; 0x68
 80091c8:	1e4d      	subs	r5, r1, #1
 80091ca:	4355      	muls	r5, r2
 80091cc:	460e      	mov	r6, r1
 80091ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091d2:	f7ff fad1 	bl	8008778 <_malloc_r>
 80091d6:	4604      	mov	r4, r0
 80091d8:	b140      	cbz	r0, 80091ec <__sfmoreglue+0x28>
 80091da:	2100      	movs	r1, #0
 80091dc:	e9c0 1600 	strd	r1, r6, [r0]
 80091e0:	300c      	adds	r0, #12
 80091e2:	60a0      	str	r0, [r4, #8]
 80091e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091e8:	f7ff fa52 	bl	8008690 <memset>
 80091ec:	4620      	mov	r0, r4
 80091ee:	bd70      	pop	{r4, r5, r6, pc}

080091f0 <__sfp_lock_acquire>:
 80091f0:	4801      	ldr	r0, [pc, #4]	; (80091f8 <__sfp_lock_acquire+0x8>)
 80091f2:	f000 b8b3 	b.w	800935c <__retarget_lock_acquire_recursive>
 80091f6:	bf00      	nop
 80091f8:	200006e1 	.word	0x200006e1

080091fc <__sfp_lock_release>:
 80091fc:	4801      	ldr	r0, [pc, #4]	; (8009204 <__sfp_lock_release+0x8>)
 80091fe:	f000 b8ae 	b.w	800935e <__retarget_lock_release_recursive>
 8009202:	bf00      	nop
 8009204:	200006e1 	.word	0x200006e1

08009208 <__sinit_lock_acquire>:
 8009208:	4801      	ldr	r0, [pc, #4]	; (8009210 <__sinit_lock_acquire+0x8>)
 800920a:	f000 b8a7 	b.w	800935c <__retarget_lock_acquire_recursive>
 800920e:	bf00      	nop
 8009210:	200006e2 	.word	0x200006e2

08009214 <__sinit_lock_release>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__sinit_lock_release+0x8>)
 8009216:	f000 b8a2 	b.w	800935e <__retarget_lock_release_recursive>
 800921a:	bf00      	nop
 800921c:	200006e2 	.word	0x200006e2

08009220 <__sinit>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	f7ff fff0 	bl	8009208 <__sinit_lock_acquire>
 8009228:	69a3      	ldr	r3, [r4, #24]
 800922a:	b11b      	cbz	r3, 8009234 <__sinit+0x14>
 800922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009230:	f7ff bff0 	b.w	8009214 <__sinit_lock_release>
 8009234:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009238:	6523      	str	r3, [r4, #80]	; 0x50
 800923a:	4b13      	ldr	r3, [pc, #76]	; (8009288 <__sinit+0x68>)
 800923c:	4a13      	ldr	r2, [pc, #76]	; (800928c <__sinit+0x6c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	62a2      	str	r2, [r4, #40]	; 0x28
 8009242:	42a3      	cmp	r3, r4
 8009244:	bf04      	itt	eq
 8009246:	2301      	moveq	r3, #1
 8009248:	61a3      	streq	r3, [r4, #24]
 800924a:	4620      	mov	r0, r4
 800924c:	f000 f820 	bl	8009290 <__sfp>
 8009250:	6060      	str	r0, [r4, #4]
 8009252:	4620      	mov	r0, r4
 8009254:	f000 f81c 	bl	8009290 <__sfp>
 8009258:	60a0      	str	r0, [r4, #8]
 800925a:	4620      	mov	r0, r4
 800925c:	f000 f818 	bl	8009290 <__sfp>
 8009260:	2200      	movs	r2, #0
 8009262:	60e0      	str	r0, [r4, #12]
 8009264:	2104      	movs	r1, #4
 8009266:	6860      	ldr	r0, [r4, #4]
 8009268:	f7ff ff82 	bl	8009170 <std>
 800926c:	68a0      	ldr	r0, [r4, #8]
 800926e:	2201      	movs	r2, #1
 8009270:	2109      	movs	r1, #9
 8009272:	f7ff ff7d 	bl	8009170 <std>
 8009276:	68e0      	ldr	r0, [r4, #12]
 8009278:	2202      	movs	r2, #2
 800927a:	2112      	movs	r1, #18
 800927c:	f7ff ff78 	bl	8009170 <std>
 8009280:	2301      	movs	r3, #1
 8009282:	61a3      	str	r3, [r4, #24]
 8009284:	e7d2      	b.n	800922c <__sinit+0xc>
 8009286:	bf00      	nop
 8009288:	080099c8 	.word	0x080099c8
 800928c:	080091b9 	.word	0x080091b9

08009290 <__sfp>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	4607      	mov	r7, r0
 8009294:	f7ff ffac 	bl	80091f0 <__sfp_lock_acquire>
 8009298:	4b1e      	ldr	r3, [pc, #120]	; (8009314 <__sfp+0x84>)
 800929a:	681e      	ldr	r6, [r3, #0]
 800929c:	69b3      	ldr	r3, [r6, #24]
 800929e:	b913      	cbnz	r3, 80092a6 <__sfp+0x16>
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7ff ffbd 	bl	8009220 <__sinit>
 80092a6:	3648      	adds	r6, #72	; 0x48
 80092a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	d503      	bpl.n	80092b8 <__sfp+0x28>
 80092b0:	6833      	ldr	r3, [r6, #0]
 80092b2:	b30b      	cbz	r3, 80092f8 <__sfp+0x68>
 80092b4:	6836      	ldr	r6, [r6, #0]
 80092b6:	e7f7      	b.n	80092a8 <__sfp+0x18>
 80092b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092bc:	b9d5      	cbnz	r5, 80092f4 <__sfp+0x64>
 80092be:	4b16      	ldr	r3, [pc, #88]	; (8009318 <__sfp+0x88>)
 80092c0:	60e3      	str	r3, [r4, #12]
 80092c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092c6:	6665      	str	r5, [r4, #100]	; 0x64
 80092c8:	f000 f847 	bl	800935a <__retarget_lock_init_recursive>
 80092cc:	f7ff ff96 	bl	80091fc <__sfp_lock_release>
 80092d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092d8:	6025      	str	r5, [r4, #0]
 80092da:	61a5      	str	r5, [r4, #24]
 80092dc:	2208      	movs	r2, #8
 80092de:	4629      	mov	r1, r5
 80092e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092e4:	f7ff f9d4 	bl	8008690 <memset>
 80092e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092f0:	4620      	mov	r0, r4
 80092f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f4:	3468      	adds	r4, #104	; 0x68
 80092f6:	e7d9      	b.n	80092ac <__sfp+0x1c>
 80092f8:	2104      	movs	r1, #4
 80092fa:	4638      	mov	r0, r7
 80092fc:	f7ff ff62 	bl	80091c4 <__sfmoreglue>
 8009300:	4604      	mov	r4, r0
 8009302:	6030      	str	r0, [r6, #0]
 8009304:	2800      	cmp	r0, #0
 8009306:	d1d5      	bne.n	80092b4 <__sfp+0x24>
 8009308:	f7ff ff78 	bl	80091fc <__sfp_lock_release>
 800930c:	230c      	movs	r3, #12
 800930e:	603b      	str	r3, [r7, #0]
 8009310:	e7ee      	b.n	80092f0 <__sfp+0x60>
 8009312:	bf00      	nop
 8009314:	080099c8 	.word	0x080099c8
 8009318:	ffff0001 	.word	0xffff0001

0800931c <_fwalk_reent>:
 800931c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009320:	4606      	mov	r6, r0
 8009322:	4688      	mov	r8, r1
 8009324:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009328:	2700      	movs	r7, #0
 800932a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800932e:	f1b9 0901 	subs.w	r9, r9, #1
 8009332:	d505      	bpl.n	8009340 <_fwalk_reent+0x24>
 8009334:	6824      	ldr	r4, [r4, #0]
 8009336:	2c00      	cmp	r4, #0
 8009338:	d1f7      	bne.n	800932a <_fwalk_reent+0xe>
 800933a:	4638      	mov	r0, r7
 800933c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009340:	89ab      	ldrh	r3, [r5, #12]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d907      	bls.n	8009356 <_fwalk_reent+0x3a>
 8009346:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800934a:	3301      	adds	r3, #1
 800934c:	d003      	beq.n	8009356 <_fwalk_reent+0x3a>
 800934e:	4629      	mov	r1, r5
 8009350:	4630      	mov	r0, r6
 8009352:	47c0      	blx	r8
 8009354:	4307      	orrs	r7, r0
 8009356:	3568      	adds	r5, #104	; 0x68
 8009358:	e7e9      	b.n	800932e <_fwalk_reent+0x12>

0800935a <__retarget_lock_init_recursive>:
 800935a:	4770      	bx	lr

0800935c <__retarget_lock_acquire_recursive>:
 800935c:	4770      	bx	lr

0800935e <__retarget_lock_release_recursive>:
 800935e:	4770      	bx	lr

08009360 <__swhatbuf_r>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	460e      	mov	r6, r1
 8009364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009368:	2900      	cmp	r1, #0
 800936a:	b096      	sub	sp, #88	; 0x58
 800936c:	4614      	mov	r4, r2
 800936e:	461d      	mov	r5, r3
 8009370:	da08      	bge.n	8009384 <__swhatbuf_r+0x24>
 8009372:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	602a      	str	r2, [r5, #0]
 800937a:	061a      	lsls	r2, r3, #24
 800937c:	d410      	bmi.n	80093a0 <__swhatbuf_r+0x40>
 800937e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009382:	e00e      	b.n	80093a2 <__swhatbuf_r+0x42>
 8009384:	466a      	mov	r2, sp
 8009386:	f000 f907 	bl	8009598 <_fstat_r>
 800938a:	2800      	cmp	r0, #0
 800938c:	dbf1      	blt.n	8009372 <__swhatbuf_r+0x12>
 800938e:	9a01      	ldr	r2, [sp, #4]
 8009390:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009394:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009398:	425a      	negs	r2, r3
 800939a:	415a      	adcs	r2, r3
 800939c:	602a      	str	r2, [r5, #0]
 800939e:	e7ee      	b.n	800937e <__swhatbuf_r+0x1e>
 80093a0:	2340      	movs	r3, #64	; 0x40
 80093a2:	2000      	movs	r0, #0
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	b016      	add	sp, #88	; 0x58
 80093a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080093ac <__smakebuf_r>:
 80093ac:	898b      	ldrh	r3, [r1, #12]
 80093ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093b0:	079d      	lsls	r5, r3, #30
 80093b2:	4606      	mov	r6, r0
 80093b4:	460c      	mov	r4, r1
 80093b6:	d507      	bpl.n	80093c8 <__smakebuf_r+0x1c>
 80093b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	6123      	str	r3, [r4, #16]
 80093c0:	2301      	movs	r3, #1
 80093c2:	6163      	str	r3, [r4, #20]
 80093c4:	b002      	add	sp, #8
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	ab01      	add	r3, sp, #4
 80093ca:	466a      	mov	r2, sp
 80093cc:	f7ff ffc8 	bl	8009360 <__swhatbuf_r>
 80093d0:	9900      	ldr	r1, [sp, #0]
 80093d2:	4605      	mov	r5, r0
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff f9cf 	bl	8008778 <_malloc_r>
 80093da:	b948      	cbnz	r0, 80093f0 <__smakebuf_r+0x44>
 80093dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e0:	059a      	lsls	r2, r3, #22
 80093e2:	d4ef      	bmi.n	80093c4 <__smakebuf_r+0x18>
 80093e4:	f023 0303 	bic.w	r3, r3, #3
 80093e8:	f043 0302 	orr.w	r3, r3, #2
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	e7e3      	b.n	80093b8 <__smakebuf_r+0xc>
 80093f0:	4b0d      	ldr	r3, [pc, #52]	; (8009428 <__smakebuf_r+0x7c>)
 80093f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	6020      	str	r0, [r4, #0]
 80093f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	9b00      	ldr	r3, [sp, #0]
 8009400:	6163      	str	r3, [r4, #20]
 8009402:	9b01      	ldr	r3, [sp, #4]
 8009404:	6120      	str	r0, [r4, #16]
 8009406:	b15b      	cbz	r3, 8009420 <__smakebuf_r+0x74>
 8009408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800940c:	4630      	mov	r0, r6
 800940e:	f000 f8d5 	bl	80095bc <_isatty_r>
 8009412:	b128      	cbz	r0, 8009420 <__smakebuf_r+0x74>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	89a0      	ldrh	r0, [r4, #12]
 8009422:	4305      	orrs	r5, r0
 8009424:	81a5      	strh	r5, [r4, #12]
 8009426:	e7cd      	b.n	80093c4 <__smakebuf_r+0x18>
 8009428:	080091b9 	.word	0x080091b9

0800942c <__malloc_lock>:
 800942c:	4801      	ldr	r0, [pc, #4]	; (8009434 <__malloc_lock+0x8>)
 800942e:	f7ff bf95 	b.w	800935c <__retarget_lock_acquire_recursive>
 8009432:	bf00      	nop
 8009434:	200006e0 	.word	0x200006e0

08009438 <__malloc_unlock>:
 8009438:	4801      	ldr	r0, [pc, #4]	; (8009440 <__malloc_unlock+0x8>)
 800943a:	f7ff bf90 	b.w	800935e <__retarget_lock_release_recursive>
 800943e:	bf00      	nop
 8009440:	200006e0 	.word	0x200006e0

08009444 <_raise_r>:
 8009444:	291f      	cmp	r1, #31
 8009446:	b538      	push	{r3, r4, r5, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	d904      	bls.n	8009458 <_raise_r+0x14>
 800944e:	2316      	movs	r3, #22
 8009450:	6003      	str	r3, [r0, #0]
 8009452:	f04f 30ff 	mov.w	r0, #4294967295
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800945a:	b112      	cbz	r2, 8009462 <_raise_r+0x1e>
 800945c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009460:	b94b      	cbnz	r3, 8009476 <_raise_r+0x32>
 8009462:	4620      	mov	r0, r4
 8009464:	f000 f830 	bl	80094c8 <_getpid_r>
 8009468:	462a      	mov	r2, r5
 800946a:	4601      	mov	r1, r0
 800946c:	4620      	mov	r0, r4
 800946e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009472:	f000 b817 	b.w	80094a4 <_kill_r>
 8009476:	2b01      	cmp	r3, #1
 8009478:	d00a      	beq.n	8009490 <_raise_r+0x4c>
 800947a:	1c59      	adds	r1, r3, #1
 800947c:	d103      	bne.n	8009486 <_raise_r+0x42>
 800947e:	2316      	movs	r3, #22
 8009480:	6003      	str	r3, [r0, #0]
 8009482:	2001      	movs	r0, #1
 8009484:	e7e7      	b.n	8009456 <_raise_r+0x12>
 8009486:	2400      	movs	r4, #0
 8009488:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800948c:	4628      	mov	r0, r5
 800948e:	4798      	blx	r3
 8009490:	2000      	movs	r0, #0
 8009492:	e7e0      	b.n	8009456 <_raise_r+0x12>

08009494 <raise>:
 8009494:	4b02      	ldr	r3, [pc, #8]	; (80094a0 <raise+0xc>)
 8009496:	4601      	mov	r1, r0
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	f7ff bfd3 	b.w	8009444 <_raise_r>
 800949e:	bf00      	nop
 80094a0:	20000220 	.word	0x20000220

080094a4 <_kill_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4d07      	ldr	r5, [pc, #28]	; (80094c4 <_kill_r+0x20>)
 80094a8:	2300      	movs	r3, #0
 80094aa:	4604      	mov	r4, r0
 80094ac:	4608      	mov	r0, r1
 80094ae:	4611      	mov	r1, r2
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	f7fa ffe9 	bl	8004488 <_kill>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	d102      	bne.n	80094c0 <_kill_r+0x1c>
 80094ba:	682b      	ldr	r3, [r5, #0]
 80094bc:	b103      	cbz	r3, 80094c0 <_kill_r+0x1c>
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	bd38      	pop	{r3, r4, r5, pc}
 80094c2:	bf00      	nop
 80094c4:	200006e4 	.word	0x200006e4

080094c8 <_getpid_r>:
 80094c8:	f7fa bfd6 	b.w	8004478 <_getpid>

080094cc <__sread>:
 80094cc:	b510      	push	{r4, lr}
 80094ce:	460c      	mov	r4, r1
 80094d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d4:	f000 f894 	bl	8009600 <_read_r>
 80094d8:	2800      	cmp	r0, #0
 80094da:	bfab      	itete	ge
 80094dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094de:	89a3      	ldrhlt	r3, [r4, #12]
 80094e0:	181b      	addge	r3, r3, r0
 80094e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094e6:	bfac      	ite	ge
 80094e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ea:	81a3      	strhlt	r3, [r4, #12]
 80094ec:	bd10      	pop	{r4, pc}

080094ee <__swrite>:
 80094ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f2:	461f      	mov	r7, r3
 80094f4:	898b      	ldrh	r3, [r1, #12]
 80094f6:	05db      	lsls	r3, r3, #23
 80094f8:	4605      	mov	r5, r0
 80094fa:	460c      	mov	r4, r1
 80094fc:	4616      	mov	r6, r2
 80094fe:	d505      	bpl.n	800950c <__swrite+0x1e>
 8009500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009504:	2302      	movs	r3, #2
 8009506:	2200      	movs	r2, #0
 8009508:	f000 f868 	bl	80095dc <_lseek_r>
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009516:	81a3      	strh	r3, [r4, #12]
 8009518:	4632      	mov	r2, r6
 800951a:	463b      	mov	r3, r7
 800951c:	4628      	mov	r0, r5
 800951e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009522:	f000 b817 	b.w	8009554 <_write_r>

08009526 <__sseek>:
 8009526:	b510      	push	{r4, lr}
 8009528:	460c      	mov	r4, r1
 800952a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952e:	f000 f855 	bl	80095dc <_lseek_r>
 8009532:	1c43      	adds	r3, r0, #1
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	bf15      	itete	ne
 8009538:	6560      	strne	r0, [r4, #84]	; 0x54
 800953a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800953e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009542:	81a3      	strheq	r3, [r4, #12]
 8009544:	bf18      	it	ne
 8009546:	81a3      	strhne	r3, [r4, #12]
 8009548:	bd10      	pop	{r4, pc}

0800954a <__sclose>:
 800954a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954e:	f000 b813 	b.w	8009578 <_close_r>
	...

08009554 <_write_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d07      	ldr	r5, [pc, #28]	; (8009574 <_write_r+0x20>)
 8009558:	4604      	mov	r4, r0
 800955a:	4608      	mov	r0, r1
 800955c:	4611      	mov	r1, r2
 800955e:	2200      	movs	r2, #0
 8009560:	602a      	str	r2, [r5, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	f7fa ffc7 	bl	80044f6 <_write>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_write_r+0x1e>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_write_r+0x1e>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	200006e4 	.word	0x200006e4

08009578 <_close_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d06      	ldr	r5, [pc, #24]	; (8009594 <_close_r+0x1c>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7fa ffd3 	bl	800452e <_close>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_close_r+0x1a>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_close_r+0x1a>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	200006e4 	.word	0x200006e4

08009598 <_fstat_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4d07      	ldr	r5, [pc, #28]	; (80095b8 <_fstat_r+0x20>)
 800959c:	2300      	movs	r3, #0
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	602b      	str	r3, [r5, #0]
 80095a6:	f7fa ffce 	bl	8004546 <_fstat>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	d102      	bne.n	80095b4 <_fstat_r+0x1c>
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	b103      	cbz	r3, 80095b4 <_fstat_r+0x1c>
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
 80095b6:	bf00      	nop
 80095b8:	200006e4 	.word	0x200006e4

080095bc <_isatty_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d06      	ldr	r5, [pc, #24]	; (80095d8 <_isatty_r+0x1c>)
 80095c0:	2300      	movs	r3, #0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f7fa ffcd 	bl	8004566 <_isatty>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_isatty_r+0x1a>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_isatty_r+0x1a>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	200006e4 	.word	0x200006e4

080095dc <_lseek_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4d07      	ldr	r5, [pc, #28]	; (80095fc <_lseek_r+0x20>)
 80095e0:	4604      	mov	r4, r0
 80095e2:	4608      	mov	r0, r1
 80095e4:	4611      	mov	r1, r2
 80095e6:	2200      	movs	r2, #0
 80095e8:	602a      	str	r2, [r5, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	f7fa ffc6 	bl	800457c <_lseek>
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d102      	bne.n	80095fa <_lseek_r+0x1e>
 80095f4:	682b      	ldr	r3, [r5, #0]
 80095f6:	b103      	cbz	r3, 80095fa <_lseek_r+0x1e>
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	200006e4 	.word	0x200006e4

08009600 <_read_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4d07      	ldr	r5, [pc, #28]	; (8009620 <_read_r+0x20>)
 8009604:	4604      	mov	r4, r0
 8009606:	4608      	mov	r0, r1
 8009608:	4611      	mov	r1, r2
 800960a:	2200      	movs	r2, #0
 800960c:	602a      	str	r2, [r5, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	f7fa ff54 	bl	80044bc <_read>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d102      	bne.n	800961e <_read_r+0x1e>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b103      	cbz	r3, 800961e <_read_r+0x1e>
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	200006e4 	.word	0x200006e4

08009624 <_init>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	bf00      	nop
 8009628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962a:	bc08      	pop	{r3}
 800962c:	469e      	mov	lr, r3
 800962e:	4770      	bx	lr

08009630 <_fini>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	bf00      	nop
 8009634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009636:	bc08      	pop	{r3}
 8009638:	469e      	mov	lr, r3
 800963a:	4770      	bx	lr
