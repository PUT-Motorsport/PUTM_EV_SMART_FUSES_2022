
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034dc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003704  08003704  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003704  08003704  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003704  08003704  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08003784  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003784  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166da  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003129  00000000  00000000  0003677a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  000398a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  0003a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003073e  00000000  00000000  0003af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee2a  00000000  00000000  0006b68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011296d  00000000  00000000  0007a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ce25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003124  00000000  00000000  0018ce78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003680 	.word	0x08003680

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	08003680 	.word	0x08003680

080001fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN1_Init+0x60>)
 8000202:	4a17      	ldr	r2, [pc, #92]	; (8000260 <MX_CAN1_Init+0x64>)
 8000204:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <MX_CAN1_Init+0x60>)
 8000208:	2210      	movs	r2, #16
 800020a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN1_Init+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <MX_CAN1_Init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <MX_CAN1_Init+0x60>)
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN1_Init+0x60>)
 8000220:	2200      	movs	r2, #0
 8000222:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN1_Init+0x60>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN1_Init+0x60>)
 800022c:	2200      	movs	r2, #0
 800022e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN1_Init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN1_Init+0x60>)
 8000238:	2200      	movs	r2, #0
 800023a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN1_Init+0x60>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN1_Init+0x60>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN1_Init+0x60>)
 800024a:	f001 fd91 	bl	8001d70 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000254:	f001 fa86 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000008c 	.word	0x2000008c
 8000260:	40006400 	.word	0x40006400

08000264 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <HAL_CAN_MspInit+0x80>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d129      	bne.n	80002da <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800028a:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 800028c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000290:	6593      	str	r3, [r2, #88]	; 0x58
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002bc:	2302      	movs	r3, #2
 80002be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c4:	2303      	movs	r3, #3
 80002c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002c8:	2309      	movs	r3, #9
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f001 ff2d 	bl	8002134 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002da:	bf00      	nop
 80002dc:	3728      	adds	r7, #40	; 0x28
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40006400 	.word	0x40006400
 80002e8:	40021000 	.word	0x40021000

080002ec <_ZN16SmartFuseHandlerILm4EE10handle_allEv>:
{
	return this->fuses[size_t(fuse)].current;
}

template <uint32_t num_of_sf>
bool SmartFuseHandler<num_of_sf>::handle_all()
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b0a6      	sub	sp, #152	; 0x98
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
{
	bool result = true;
 80002f4:	2301      	movs	r3, #1
 80002f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	for(auto smart_fuse : smart_fuses)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fe72 	bl	8000fee <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 800030a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800030e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000312:	4618      	mov	r0, r3
 8000314:	f000 fe77 	bl	8001006 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 8000318:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 800031c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000324:	429a      	cmp	r2, r3
 8000326:	d01c      	beq.n	8000362 <_ZN16SmartFuseHandlerILm4EE10handle_allEv+0x76>
 8000328:	f107 0308 	add.w	r3, r7, #8
 800032c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fdcb 	bl	8000ecc <_ZN9SmartFuseC1ERKS_>
		if(smart_fuse.handle() != SmartFuseState::Ok) result = false;
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fbc6 	bl	8000acc <_ZN9SmartFuse6handleEv>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	bf14      	ite	ne
 8000346:	2301      	movne	r3, #1
 8000348:	2300      	moveq	r3, #0
 800034a:	b2db      	uxtb	r3, r3
 800034c:	2b00      	cmp	r3, #0
 800034e:	d002      	beq.n	8000356 <_ZN16SmartFuseHandlerILm4EE10handle_allEv+0x6a>
 8000350:	2300      	movs	r3, #0
 8000352:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(auto smart_fuse : smart_fuses)
 8000356:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800035a:	3380      	adds	r3, #128	; 0x80
 800035c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000360:	e7dc      	b.n	800031c <_ZN16SmartFuseHandlerILm4EE10handle_allEv+0x30>

	return result;
 8000362:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8000366:	4618      	mov	r0, r3
 8000368:	3798      	adds	r7, #152	; 0x98
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <_ZN16SmartFuseHandlerILm4EE8init_allEv>:

template <uint32_t num_of_sf>
bool SmartFuseHandler<num_of_sf>::init_all()
 800036e:	b580      	push	{r7, lr}
 8000370:	b0a8      	sub	sp, #160	; 0xa0
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
{
	bool result = true;
 8000376:	2301      	movs	r3, #1
 8000378:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	int buff = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	for(auto smart_fuse : smart_fuses)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800038c:	4618      	mov	r0, r3
 800038e:	f000 fe2e 	bl	8000fee <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 8000392:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8000396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fe33 	bl	8001006 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 80003a0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 80003a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80003a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d03b      	beq.n	8000428 <_ZN16SmartFuseHandlerILm4EE8init_allEv+0xba>
 80003b0:	f107 0308 	add.w	r3, r7, #8
 80003b4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fd87 	bl	8000ecc <_ZN9SmartFuseC1ERKS_>
	{
		for(int i = 0; i < buff; i++) this->smart_fuses[i].handle_timer();
 80003be:	2300      	movs	r3, #0
 80003c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80003c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80003c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80003cc:	429a      	cmp	r2, r3
 80003ce:	da10      	bge.n	80003f2 <_ZN16SmartFuseHandlerILm4EE8init_allEv+0x84>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80003d6:	4611      	mov	r1, r2
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 fe20 	bl	800101e <_ZN3etl7ivectorI9SmartFuseEixEj>
 80003de:	4603      	mov	r3, r0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fc41 	bl	8000c68 <_ZN9SmartFuse12handle_timerEv>
 80003e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80003ea:	3301      	adds	r3, #1
 80003ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80003f0:	e7e8      	b.n	80003c4 <_ZN16SmartFuseHandlerILm4EE8init_allEv+0x56>
		if(smart_fuse.init() != SmartFuseState::Ok) result = false;
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 f9ca 	bl	8000790 <_ZN9SmartFuse4initEv>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bf14      	ite	ne
 8000402:	2301      	movne	r3, #1
 8000404:	2300      	moveq	r3, #0
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d002      	beq.n	8000412 <_ZN16SmartFuseHandlerILm4EE8init_allEv+0xa4>
 800040c:	2300      	movs	r3, #0
 800040e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		buff++;
 8000412:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000416:	3301      	adds	r3, #1
 8000418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	for(auto smart_fuse : smart_fuses)
 800041c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000420:	3380      	adds	r3, #128	; 0x80
 8000422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000426:	e7bd      	b.n	80003a4 <_ZN16SmartFuseHandlerILm4EE8init_allEv+0x36>
	}

	this->handle_all();
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f7ff ff5f 	bl	80002ec <_ZN16SmartFuseHandlerILm4EE10handle_allEv>

	return result;
 800042e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8000432:	4618      	mov	r0, r3
 8000434:	37a0      	adds	r7, #160	; 0xa0
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <_ZL11checkParitySt5arrayIhLj3EE>:
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b086      	sub	sp, #24
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
	uint8_t buff = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 3; i++) for(int j = 0; j < 8; j++) if(x[i] & 1 << j) buff++;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	2b02      	cmp	r3, #2
 800044e:	dc24      	bgt.n	800049a <_ZL11checkParitySt5arrayIhLj3EE+0x60>
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	2b07      	cmp	r3, #7
 8000458:	dc1b      	bgt.n	8000492 <_ZL11checkParitySt5arrayIhLj3EE+0x58>
 800045a:	693a      	ldr	r2, [r7, #16]
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	4611      	mov	r1, r2
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fd6d 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000466:	4603      	mov	r3, r0
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	fa42 f303 	asr.w	r3, r2, r3
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	2b00      	cmp	r3, #0
 8000478:	bf14      	ite	ne
 800047a:	2301      	movne	r3, #1
 800047c:	2300      	moveq	r3, #0
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d002      	beq.n	800048a <_ZL11checkParitySt5arrayIhLj3EE+0x50>
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	3301      	adds	r3, #1
 8000488:	75fb      	strb	r3, [r7, #23]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	3301      	adds	r3, #1
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	e7e0      	b.n	8000454 <_ZL11checkParitySt5arrayIhLj3EE+0x1a>
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	3301      	adds	r3, #1
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	e7d7      	b.n	800044a <_ZL11checkParitySt5arrayIhLj3EE+0x10>
	return (buff % 2 == 0 ? true : false);
 800049a:	7dfb      	ldrb	r3, [r7, #23]
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	bf0c      	ite	eq
 80004a4:	2301      	moveq	r3, #1
 80004a6:	2300      	movne	r3, #0
 80004a8:	b2db      	uxtb	r3, r3
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <_ZL18calculateParityBitRSt5arrayIhLj3EE>:
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
	data[2] &= ~(1 << 0);
 80004ba:	2102      	movs	r1, #2
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f000 fd3f 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 80004c2:	4603      	mov	r3, r0
 80004c4:	781a      	ldrb	r2, [r3, #0]
 80004c6:	f022 0201 	bic.w	r2, r2, #1
 80004ca:	b2d2      	uxtb	r2, r2
 80004cc:	701a      	strb	r2, [r3, #0]
	if (checkParity(data)) data[2] |= (1 << 0);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	7859      	ldrb	r1, [r3, #1]
 80004d4:	0209      	lsls	r1, r1, #8
 80004d6:	430a      	orrs	r2, r1
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	041b      	lsls	r3, r3, #16
 80004dc:	431a      	orrs	r2, r3
 80004de:	2300      	movs	r3, #0
 80004e0:	f362 0317 	bfi	r3, r2, #0, #24
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ffa8 	bl	800043a <_ZL11checkParitySt5arrayIhLj3EE>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d009      	beq.n	8000504 <_ZL18calculateParityBitRSt5arrayIhLj3EE+0x52>
 80004f0:	2102      	movs	r1, #2
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 fd24 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 80004f8:	4603      	mov	r3, r0
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	f042 0201 	orr.w	r2, r2, #1
 8000500:	b2d2      	uxtb	r2, r2
 8000502:	701a      	strb	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <_ZL9modifyTabRSt5arrayIhLj3EEhhh>:
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	4608      	mov	r0, r1
 8000516:	4611      	mov	r1, r2
 8000518:	461a      	mov	r2, r3
 800051a:	4603      	mov	r3, r0
 800051c:	70fb      	strb	r3, [r7, #3]
 800051e:	460b      	mov	r3, r1
 8000520:	70bb      	strb	r3, [r7, #2]
 8000522:	4613      	mov	r3, r2
 8000524:	707b      	strb	r3, [r7, #1]
	tab[0] = dat_1;
 8000526:	2100      	movs	r1, #0
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f000 fd09 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 800052e:	4602      	mov	r2, r0
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	7013      	strb	r3, [r2, #0]
	tab[1] = dat_2;
 8000534:	2101      	movs	r1, #1
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 fd02 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 800053c:	4602      	mov	r2, r0
 800053e:	78bb      	ldrb	r3, [r7, #2]
 8000540:	7013      	strb	r3, [r2, #0]
	tab[2] = dat_3;
 8000542:	2102      	movs	r1, #2
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 fcfb 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 800054a:	4602      	mov	r2, r0
 800054c:	787b      	ldrb	r3, [r7, #1]
 800054e:	7013      	strb	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <_ZL8checkGSBh>:
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	da01      	bge.n	800056e <_ZL8checkGSBh+0x16>
 800056a:	2300      	movs	r3, #0
 800056c:	e031      	b.n	80005d2 <_ZL8checkGSBh+0x7a>
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <_ZL8checkGSBh+0x24>
 8000578:	2307      	movs	r3, #7
 800057a:	e02a      	b.n	80005d2 <_ZL8checkGSBh+0x7a>
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_ZL8checkGSBh+0x32>
 8000586:	2306      	movs	r3, #6
 8000588:	e023      	b.n	80005d2 <_ZL8checkGSBh+0x7a>
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <_ZL8checkGSBh+0x40>
 8000594:	2305      	movs	r3, #5
 8000596:	e01c      	b.n	80005d2 <_ZL8checkGSBh+0x7a>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f003 0308 	and.w	r3, r3, #8
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <_ZL8checkGSBh+0x4e>
 80005a2:	2304      	movs	r3, #4
 80005a4:	e015      	b.n	80005d2 <_ZL8checkGSBh+0x7a>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f003 0310 	and.w	r3, r3, #16
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <_ZL8checkGSBh+0x5c>
 80005b0:	2303      	movs	r3, #3
 80005b2:	e00e      	b.n	80005d2 <_ZL8checkGSBh+0x7a>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f003 0320 	and.w	r3, r3, #32
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <_ZL8checkGSBh+0x6a>
 80005be:	2302      	movs	r3, #2
 80005c0:	e007      	b.n	80005d2 <_ZL8checkGSBh+0x7a>
	if(gsb & 0b01000000) return SmartFuseState::ResetState;
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <_ZL8checkGSBh+0x78>
 80005cc:	2301      	movs	r3, #1
 80005ce:	e000      	b.n	80005d2 <_ZL8checkGSBh+0x7a>
	return SmartFuseState::NotResponding;
 80005d0:	2308      	movs	r3, #8
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <_ZN9SmartFuse4FuseC1Ev>:
SmartFuse::Fuse::Fuse()
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3304      	adds	r3, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fcb7 	bl	8000f5e <_ZN3etl4pairIttEC1Ev>
	active = false;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
	current = 0x0000;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	805a      	strh	r2, [r3, #2]
}
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  Nm  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 8000606:	b5b0      	push	{r4, r5, r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2405      	movs	r4, #5
 8000612:	461d      	mov	r5, r3
 8000614:	2c00      	cmp	r4, #0
 8000616:	db05      	blt.n	8000624 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1Ev+0x1e>
 8000618:	4628      	mov	r0, r5
 800061a:	f7ff ffe0 	bl	80005de <_ZN9SmartFuse4FuseC1Ev>
 800061e:	3508      	adds	r5, #8
 8000620:	3c01      	subs	r4, #1
 8000622:	e7f7      	b.n	8000614 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1Ev+0xe>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bdb0      	pop	{r4, r5, r7, pc}

0800062e <_ZN13FusesSettingsC1ERKS_>:
	f3,
	f4,
	f5
};

struct FusesSettings
 800062e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	6039      	str	r1, [r7, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	6811      	ldr	r1, [r2, #0]
 800063e:	6019      	str	r1, [r3, #0]
 8000640:	8892      	ldrh	r2, [r2, #4]
 8000642:	809a      	strh	r2, [r3, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	3306      	adds	r3, #6
 800064a:	3206      	adds	r2, #6
 800064c:	6811      	ldr	r1, [r2, #0]
 800064e:	6019      	str	r1, [r3, #0]
 8000650:	8892      	ldrh	r2, [r2, #4]
 8000652:	809a      	strh	r2, [r3, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	330c      	adds	r3, #12
 800065a:	320c      	adds	r2, #12
 800065c:	6811      	ldr	r1, [r2, #0]
 800065e:	6019      	str	r1, [r3, #0]
 8000660:	8892      	ldrh	r2, [r2, #4]
 8000662:	809a      	strh	r2, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	3312      	adds	r3, #18
 800066a:	3212      	adds	r2, #18
 800066c:	6810      	ldr	r0, [r2, #0]
 800066e:	6851      	ldr	r1, [r2, #4]
 8000670:	6892      	ldr	r2, [r2, #8]
 8000672:	6018      	str	r0, [r3, #0]
 8000674:	6059      	str	r1, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f103 021e 	add.w	r2, r3, #30
 800067e:	2505      	movs	r5, #5
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	f103 041e 	add.w	r4, r3, #30
 8000686:	4616      	mov	r6, r2
 8000688:	2d00      	cmp	r5, #0
 800068a:	db07      	blt.n	800069c <_ZN13FusesSettingsC1ERKS_+0x6e>
 800068c:	4621      	mov	r1, r4
 800068e:	4630      	mov	r0, r6
 8000690:	f000 fc76 	bl	8000f80 <_ZN3etl4pairIttEC1ERKS1_>
 8000694:	3604      	adds	r6, #4
 8000696:	3404      	adds	r4, #4
 8000698:	3d01      	subs	r5, #1
 800069a:	e7f5      	b.n	8000688 <_ZN13FusesSettingsC1ERKS_+0x5a>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006a6 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, const FusesSettings &fuses_settings) :
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	603b      	str	r3, [r7, #0]
					 port(port), pin(pin), hspi(hspi), fuses_settings(fuses_settings)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3308      	adds	r3, #8
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffa1 	bl	8000606 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1Ev>
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	639a      	str	r2, [r3, #56]	; 0x38
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3340      	adds	r3, #64	; 0x40
 80006d4:	6a39      	ldr	r1, [r7, #32]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffa9 	bl	800062e <_ZN13FusesSettingsC1ERKS_>
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3378      	adds	r3, #120	; 0x78
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fa59 	bl	8001b98 <_ZN5TimerC1Ev>
	this->toggle = false;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	dc22      	bgt.n	800073c <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0x96>
		this->fuses[i].clamping_currents = fuses_settings.clamping_currents[i];
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3308      	adds	r3, #8
 80006fa:	697a      	ldr	r2, [r7, #20]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fc52 	bl	8000fa8 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000704:	4603      	mov	r3, r0
 8000706:	1d18      	adds	r0, r3, #4
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3306      	adds	r3, #6
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	6a3a      	ldr	r2, [r7, #32]
 8000710:	4413      	add	r3, r2
 8000712:	3306      	adds	r3, #6
 8000714:	4619      	mov	r1, r3
 8000716:	f000 fc56 	bl	8000fc6 <_ZN3etl4pairIttEaSERKS1_>
		this->fuses[i].active = fuses_settings.active[i];
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3308      	adds	r3, #8
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fc40 	bl	8000fa8 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000728:	4601      	mov	r1, r0
 800072a:	6a3a      	ldr	r2, [r7, #32]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	700b      	strb	r3, [r1, #0]
	for (int i = 0; i < 6; i++)
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	3301      	adds	r3, #1
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	e7d9      	b.n	80006f0 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0x4a>
	slaveDeselect();
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f000 f816 	bl	800076e <_ZN9SmartFuse13slaveDeselectEv>
}
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	4618      	mov	r0, r3
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <_ZN9SmartFuse11slaveSelectEv>:
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( (GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	b29b      	uxth	r3, r3
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	f001 fe79 	bl	8002458 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <_ZN9SmartFuse13slaveDeselectEv>:
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	b29b      	uxth	r3, r3
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	f001 fe68 	bl	8002458 <HAL_GPIO_WritePin>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <_ZN9SmartFuse4initEv>:
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	std::array<uint8_t, 3> tx_data { 0, 0, 0 };
 8000798:	4ab5      	ldr	r2, [pc, #724]	; (8000a70 <_ZN9SmartFuse4initEv+0x2e0>)
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	6812      	ldr	r2, [r2, #0]
 80007a0:	4611      	mov	r1, r2
 80007a2:	8019      	strh	r1, [r3, #0]
 80007a4:	3302      	adds	r3, #2
 80007a6:	0c12      	lsrs	r2, r2, #16
 80007a8:	701a      	strb	r2, [r3, #0]
	std::array<uint8_t, 3> rx_data { 0, 0, 0 };
 80007aa:	4ab1      	ldr	r2, [pc, #708]	; (8000a70 <_ZN9SmartFuse4initEv+0x2e0>)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	6812      	ldr	r2, [r2, #0]
 80007b2:	4611      	mov	r1, r2
 80007b4:	8019      	strh	r1, [r3, #0]
 80007b6:	3302      	adds	r3, #2
 80007b8:	0c12      	lsrs	r2, r2, #16
 80007ba:	701a      	strb	r2, [r3, #0]
	modifyTab(tx_data, RESET_SMARTFUSE(), 0, 0);
 80007bc:	f107 0010 	add.w	r0, r7, #16
 80007c0:	2300      	movs	r3, #0
 80007c2:	2200      	movs	r2, #0
 80007c4:	21ff      	movs	r1, #255	; 0xff
 80007c6:	f7ff fea1 	bl	800050c <_ZL9modifyTabRSt5arrayIhLj3EEhhh>
	transmitReceiveData(tx_data, rx_data);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	461a      	mov	r2, r3
 80007d0:	6939      	ldr	r1, [r7, #16]
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 fad4 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	modifyTab(tx_data, READ_ROM(0x01), 0, 0);
 80007d8:	f107 0010 	add.w	r0, r7, #16
 80007dc:	2300      	movs	r3, #0
 80007de:	2200      	movs	r2, #0
 80007e0:	21c1      	movs	r1, #193	; 0xc1
 80007e2:	f7ff fe93 	bl	800050c <_ZL9modifyTabRSt5arrayIhLj3EEhhh>
	for (int i = 0; i < FUSE_TIMEOUT; i++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	dc45      	bgt.n	800087c <_ZN9SmartFuse4initEv+0xec>
		if(!IF_RESET_STATE(rx_data)) break;
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fba2 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 80007fc:	4603      	mov	r3, r0
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d113      	bne.n	800082c <_ZN9SmartFuse4initEv+0x9c>
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2101      	movs	r1, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fb98 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000810:	4603      	mov	r3, r0
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <_ZN9SmartFuse4initEv+0x9c>
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2102      	movs	r1, #2
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fb8e 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000824:	4603      	mov	r3, r0
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00d      	beq.n	8000848 <_ZN9SmartFuse4initEv+0xb8>
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fb84 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000838:	4603      	mov	r3, r0
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <_ZN9SmartFuse4initEv+0xb8>
 8000844:	2301      	movs	r3, #1
 8000846:	e000      	b.n	800084a <_ZN9SmartFuse4initEv+0xba>
 8000848:	2300      	movs	r3, #0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d115      	bne.n	800087a <_ZN9SmartFuse4initEv+0xea>
		else if(i == FUSE_TIMEOUT - 1)
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	2b05      	cmp	r3, #5
 8000852:	d104      	bne.n	800085e <_ZN9SmartFuse4initEv+0xce>
			this->state = SmartFuseState::NotResponding;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2208      	movs	r2, #8
 8000858:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			goto end;
 800085c:	e11e      	b.n	8000a9c <_ZN9SmartFuse4initEv+0x30c>
		transmitReceiveData(tx_data, rx_data);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	461a      	mov	r2, r3
 8000864:	6939      	ldr	r1, [r7, #16]
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f000 fa8a 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		HAL_Delay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f001 fa5b 	bl	8001d28 <HAL_Delay>
	for (int i = 0; i < FUSE_TIMEOUT; i++)
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3301      	adds	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	e7b7      	b.n	80007ea <_ZN9SmartFuse4initEv+0x5a>
		if(!IF_RESET_STATE(rx_data)) break;
 800087a:	bf00      	nop
	modifyTab(tx_data, WRITE_RAM(0x14), 1 << 6, 0);
 800087c:	f107 0010 	add.w	r0, r7, #16
 8000880:	2300      	movs	r3, #0
 8000882:	2240      	movs	r2, #64	; 0x40
 8000884:	2114      	movs	r1, #20
 8000886:	f7ff fe41 	bl	800050c <_ZL9modifyTabRSt5arrayIhLj3EEhhh>
	transmitReceiveData(tx_data, rx_data);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	461a      	mov	r2, r3
 8000890:	6939      	ldr	r1, [r7, #16]
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 fa74 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	modifyTab(tx_data, WRITE_RAM(0x14), 1 << 3, 0);
 8000898:	f107 0010 	add.w	r0, r7, #16
 800089c:	2300      	movs	r3, #0
 800089e:	2208      	movs	r2, #8
 80008a0:	2114      	movs	r1, #20
 80008a2:	f7ff fe33 	bl	800050c <_ZL9modifyTabRSt5arrayIhLj3EEhhh>
	transmitReceiveData(tx_data, rx_data);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	461a      	mov	r2, r3
 80008ac:	6939      	ldr	r1, [r7, #16]
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 fa66 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->watch_dog.restart();
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3378      	adds	r3, #120	; 0x78
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 f97b 	bl	8001bb4 <_ZN5Timer7restartEv>
	this->toggle = false;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	f300 809a 	bgt.w	8000a04 <_ZN9SmartFuse4initEv+0x274>
		tx_data[0] = WRITE_RAM(0x00 + i);
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fb32 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 80008dc:	4603      	mov	r3, r0
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	701a      	strb	r2, [r3, #0]
		tx_data[1] = uint8_t(this->fuses_settings.duty_cykle[i] >> 4);
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	3328      	adds	r3, #40	; 0x28
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	885b      	ldrh	r3, [r3, #2]
 80008f0:	091b      	lsrs	r3, r3, #4
 80008f2:	b29c      	uxth	r4, r3
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	2101      	movs	r1, #1
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fb20 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000900:	4603      	mov	r3, r0
 8000902:	b2e2      	uxtb	r2, r4
 8000904:	701a      	strb	r2, [r3, #0]
		tx_data[2] = uint8_t(this->fuses_settings.duty_cykle[i] << 4) | this->toggle << 1;
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	3328      	adds	r3, #40	; 0x28
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4413      	add	r3, r2
 8000910:	885b      	ldrh	r3, [r3, #2]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	011b      	lsls	r3, r3, #4
 8000916:	b2db      	uxtb	r3, r3
 8000918:	b25a      	sxtb	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	b25b      	sxtb	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b25c      	sxtb	r4, r3
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	2102      	movs	r1, #2
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fb07 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000932:	4603      	mov	r3, r0
 8000934:	b2e2      	uxtb	r2, r4
 8000936:	701a      	strb	r2, [r3, #0]
		transmitReceiveData(tx_data, rx_data);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	461a      	mov	r2, r3
 800093e:	6939      	ldr	r1, [r7, #16]
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f000 fa1d 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		tx_data[0] = WRITE_RAM(0x08 + i);
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	b2dc      	uxtb	r4, r3
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f000 faf5 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000956:	4603      	mov	r3, r0
 8000958:	f104 0208 	add.w	r2, r4, #8
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0x00;
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	2101      	movs	r1, #1
 8000966:	4618      	mov	r0, r3
 8000968:	f000 faea 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 800096c:	4603      	mov	r3, r0
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
		switch (this->fuses_settings.sampling_mode[i])
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	4413      	add	r3, r2
 8000978:	334c      	adds	r3, #76	; 0x4c
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b03      	cmp	r3, #3
 800097e:	d833      	bhi.n	80009e8 <_ZN9SmartFuse4initEv+0x258>
 8000980:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <_ZN9SmartFuse4initEv+0x1f8>)
 8000982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000986:	bf00      	nop
 8000988:	08000999 	.word	0x08000999
 800098c:	080009ad 	.word	0x080009ad
 8000990:	080009c1 	.word	0x080009c1
 8000994:	080009d5 	.word	0x080009d5
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 face 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e01d      	b.n	80009e8 <_ZN9SmartFuse4initEv+0x258>
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	2102      	movs	r1, #2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fac4 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2240      	movs	r2, #64	; 0x40
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e013      	b.n	80009e8 <_ZN9SmartFuse4initEv+0x258>
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	2102      	movs	r1, #2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 faba 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e009      	b.n	80009e8 <_ZN9SmartFuse4initEv+0x258>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	2102      	movs	r1, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fab0 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 80009e0:	4603      	mov	r3, r0
 80009e2:	22c0      	movs	r2, #192	; 0xc0
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	bf00      	nop
		transmitReceiveData(tx_data, rx_data);
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	461a      	mov	r2, r3
 80009ee:	6939      	ldr	r1, [r7, #16]
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f9c5 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->handle_timer();
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 f936 	bl	8000c68 <_ZN9SmartFuse12handle_timerEv>
	for(int i = 0; i < 6; i++)
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	3301      	adds	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	e761      	b.n	80008c8 <_ZN9SmartFuse4initEv+0x138>
	tx_data[0] = WRITE_RAM(0x13);
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fa98 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2213      	movs	r2, #19
 8000a14:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 fa8f 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++) tx_data[1] |= this->fuses[i].active << i;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	2b05      	cmp	r3, #5
 8000a30:	dc20      	bgt.n	8000a74 <_ZN9SmartFuse4initEv+0x2e4>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3308      	adds	r3, #8
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fab4 	bl	8000fa8 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000a40:	4603      	mov	r3, r0
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	fa02 f403 	lsl.w	r4, r2, r3
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2101      	movs	r1, #1
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fa74 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	b251      	sxtb	r1, r2
 8000a5e:	b262      	sxtb	r2, r4
 8000a60:	430a      	orrs	r2, r1
 8000a62:	b252      	sxtb	r2, r2
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	e7dd      	b.n	8000a2c <_ZN9SmartFuse4initEv+0x29c>
 8000a70:	08003698 	.word	0x08003698
	tx_data[2] = this->toggle << 1;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461c      	mov	r4, r3
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fa5d 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000a86:	4603      	mov	r3, r0
 8000a88:	0062      	lsls	r2, r4, #1
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	701a      	strb	r2, [r3, #0]
	transmitReceiveData(tx_data, rx_data);
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	461a      	mov	r2, r3
 8000a94:	6939      	ldr	r1, [r7, #16]
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 f972 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = checkGSB(rx_data[0]);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fa4c 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd53 	bl	8000558 <_ZL8checkGSBh>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	return this->state;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	bf00      	nop

08000acc <_ZN9SmartFuse6handleEv>:
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 8000ad4:	4a63      	ldr	r2, [pc, #396]	; (8000c64 <_ZN9SmartFuse6handleEv+0x198>)
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	4611      	mov	r1, r2
 8000ade:	8019      	strh	r1, [r3, #0]
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	0c12      	lsrs	r2, r2, #16
 8000ae4:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 > rx_data { 0, 0, 0 };
 8000ae6:	4a5f      	ldr	r2, [pc, #380]	; (8000c64 <_ZN9SmartFuse6handleEv+0x198>)
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	4611      	mov	r1, r2
 8000af0:	8019      	strh	r1, [r3, #0]
 8000af2:	3302      	adds	r3, #2
 8000af4:	0c12      	lsrs	r2, r2, #16
 8000af6:	701a      	strb	r2, [r3, #0]
	if(watch_dog.getPassedTime() >= 40)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3378      	adds	r3, #120	; 0x78
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f866 	bl	8001bce <_ZN5Timer13getPassedTimeEv>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b27      	cmp	r3, #39	; 0x27
 8000b06:	bf8c      	ite	hi
 8000b08:	2301      	movhi	r3, #1
 8000b0a:	2300      	movls	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d04e      	beq.n	8000bb0 <_ZN9SmartFuse6handleEv+0xe4>
		this->toggle = !this->toggle;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	f083 0301 	eor.w	r3, r3, #1
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	701a      	strb	r2, [r3, #0]
		tx_data[0] = READ_RAM(0x13);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fa0a 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2253      	movs	r2, #83	; 0x53
 8000b30:	701a      	strb	r2, [r3, #0]
		transmitReceiveData(tx_data, rx_data);
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	461a      	mov	r2, r3
 8000b38:	6939      	ldr	r1, [r7, #16]
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 f920 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		rx_data[2] &= ~(1 << 1);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2102      	movs	r1, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f9fa 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	f022 0202 	bic.w	r2, r2, #2
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	701a      	strb	r2, [r3, #0]
		modifyTab(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1));
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f9ee 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000b64:	4603      	mov	r3, r0
 8000b66:	781c      	ldrb	r4, [r3, #0]
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f9e6 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000b74:	4603      	mov	r3, r0
 8000b76:	781a      	ldrb	r2, [r3, #0]
 8000b78:	b251      	sxtb	r1, r2
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	0052      	lsls	r2, r2, #1
 8000b80:	b252      	sxtb	r2, r2
 8000b82:	430a      	orrs	r2, r1
 8000b84:	b252      	sxtb	r2, r2
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	f107 0010 	add.w	r0, r7, #16
 8000b90:	4622      	mov	r2, r4
 8000b92:	2113      	movs	r1, #19
 8000b94:	f7ff fcba 	bl	800050c <_ZL9modifyTabRSt5arrayIhLj3EEhhh>
		transmitReceiveData(tx_data, rx_data);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	6939      	ldr	r1, [r7, #16]
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f8ed 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3378      	adds	r3, #120	; 0x78
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 f802 	bl	8001bb4 <_ZN5Timer7restartEv>
	for(int i = 0; i < 6; i++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	2b05      	cmp	r3, #5
 8000bb8:	dc3c      	bgt.n	8000c34 <_ZN9SmartFuse6handleEv+0x168>
		tx_data[0] = READ_RAM(0x28 + i);
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	3328      	adds	r3, #40	; 0x28
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc8:	b25c      	sxtb	r4, r3
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f9b5 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b2e2      	uxtb	r2, r4
 8000bda:	701a      	strb	r2, [r3, #0]
		transmitReceiveData(tx_data, rx_data);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	461a      	mov	r2, r3
 8000be2:	6939      	ldr	r1, [r7, #16]
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f000 f8cb 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->fuses[i].current = uint16_t(rx_data[1]) << 4 | uint16_t(rx_data[2]) >> 4;
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f9a5 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	b21c      	sxth	r4, r3
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2102      	movs	r1, #2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f99b 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4323      	orrs	r3, r4
 8000c16:	b21c      	sxth	r4, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f9c1 	bl	8000fa8 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b2a2      	uxth	r2, r4
 8000c2a:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i < 6; i++)
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e7bf      	b.n	8000bb4 <_ZN9SmartFuse6handleEv+0xe8>
	this->state = checkGSB(rx_data[0]);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f980 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000c40:	4603      	mov	r3, r0
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fc87 	bl	8000558 <_ZL8checkGSBh>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	return this->state;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	371c      	adds	r7, #28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd90      	pop	{r4, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	08003698 	.word	0x08003698

08000c68 <_ZN9SmartFuse12handle_timerEv>:
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	if(watch_dog.getPassedTime() >= 40)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3378      	adds	r3, #120	; 0x78
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 ffaa 	bl	8001bce <_ZN5Timer13getPassedTimeEv>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b27      	cmp	r3, #39	; 0x27
 8000c7e:	bf8c      	ite	hi
 8000c80:	2301      	movhi	r3, #1
 8000c82:	2300      	movls	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d070      	beq.n	8000d6c <_ZN9SmartFuse12handle_timerEv+0x104>
		std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 8000c8a:	4a3c      	ldr	r2, [pc, #240]	; (8000d7c <_ZN9SmartFuse12handle_timerEv+0x114>)
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	6812      	ldr	r2, [r2, #0]
 8000c92:	4611      	mov	r1, r2
 8000c94:	8019      	strh	r1, [r3, #0]
 8000c96:	3302      	adds	r3, #2
 8000c98:	0c12      	lsrs	r2, r2, #16
 8000c9a:	701a      	strb	r2, [r3, #0]
		std::array < uint8_t, 3 > rx_data { 0, 0, 0 };
 8000c9c:	4a37      	ldr	r2, [pc, #220]	; (8000d7c <_ZN9SmartFuse12handle_timerEv+0x114>)
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	6812      	ldr	r2, [r2, #0]
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	8019      	strh	r1, [r3, #0]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	0c12      	lsrs	r2, r2, #16
 8000cac:	701a      	strb	r2, [r3, #0]
		this->toggle = !this->toggle;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	f083 0301 	eor.w	r3, r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	701a      	strb	r2, [r3, #0]
		tx_data[0] = READ_RAM(0x13);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f93c 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2253      	movs	r2, #83	; 0x53
 8000ccc:	701a      	strb	r2, [r3, #0]
		transmitReceiveData(tx_data, rx_data);
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68f9      	ldr	r1, [r7, #12]
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f852 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		rx_data[2] &= ~(1 << 1);
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f92c 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	f022 0202 	bic.w	r2, r2, #2
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	701a      	strb	r2, [r3, #0]
		modifyTab(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1));
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f920 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000d00:	4603      	mov	r3, r0
 8000d02:	781c      	ldrb	r4, [r3, #0]
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f918 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000d10:	4603      	mov	r3, r0
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	b251      	sxtb	r1, r2
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	0052      	lsls	r2, r2, #1
 8000d1c:	b252      	sxtb	r2, r2
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	b252      	sxtb	r2, r2
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	f107 000c 	add.w	r0, r7, #12
 8000d2c:	4622      	mov	r2, r4
 8000d2e:	2113      	movs	r1, #19
 8000d30:	f7ff fbec 	bl	800050c <_ZL9modifyTabRSt5arrayIhLj3EEhhh>
		transmitReceiveData(tx_data, rx_data);
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68f9      	ldr	r1, [r7, #12]
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 f81f 	bl	8000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3378      	adds	r3, #120	; 0x78
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 ff34 	bl	8001bb4 <_ZN5Timer7restartEv>
		this->state = checkGSB(rx_data[2]);
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	2102      	movs	r1, #2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f8f4 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fbfb 	bl	8000558 <_ZL8checkGSBh>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	return this->state;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd90      	pop	{r4, r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	08003698 	.word	0x08003698

08000d80 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>:
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d96:	2b40      	cmp	r3, #64	; 0x40
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d007      	beq.n	8000db4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x34>
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000db2:	601a      	str	r2, [r3, #0]
	calculateParityBit(tx_data);
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fb7a 	bl	80004b2 <_ZL18calculateParityBitRSt5arrayIhLj3EE>
	this->slaveSelect();
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f7ff fcc4 	bl	800074c <_ZN9SmartFuse11slaveSelectEv>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	75fb      	strb	r3, [r7, #23]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	75bb      	strb	r3, [r7, #22]
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d902      	bls.n	8000dd8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x58>
 8000dd2:	7dbb      	ldrb	r3, [r7, #22]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d83e      	bhi.n	8000e56 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xd6>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d104      	bne.n	8000df0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8000de6:	7dbb      	ldrb	r3, [r7, #22]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d801      	bhi.n	8000df0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x72>
 8000df0:	2300      	movs	r3, #0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d00f      	beq.n	8000e16 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x96>
			(*(uint8_t*) &rx_data[rx]) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f103 040c 	add.w	r4, r3, #12
 8000dfe:	7dbb      	ldrb	r3, [r7, #22]
 8000e00:	4619      	mov	r1, r3
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f89c 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	7822      	ldrb	r2, [r4, #0]
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	701a      	strb	r2, [r3, #0]
			rx++;
 8000e10:	7dbb      	ldrb	r3, [r7, #22]
 8000e12:	3301      	adds	r3, #1
 8000e14:	75bb      	strb	r3, [r7, #22]
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d104      	bne.n	8000e2e <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d801      	bhi.n	8000e2e <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xb0>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0cb      	beq.n	8000dcc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = tx_data[tx];
 8000e34:	7dfa      	ldrb	r2, [r7, #23]
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f87f 	bl	8000f40 <_ZNSt5arrayIhLj3EEixEj>
 8000e42:	4602      	mov	r2, r0
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	330c      	adds	r3, #12
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	701a      	strb	r2, [r3, #0]
			tx++;
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
 8000e50:	3301      	adds	r3, #1
 8000e52:	75fb      	strb	r3, [r7, #23]
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8000e54:	e7ba      	b.n	8000dcc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
	this->slaveDeselect();
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f7ff fc89 	bl	800076e <_ZN9SmartFuse13slaveDeselectEv>
}
 8000e5c:	bf00      	nop
 8000e5e:	371c      	adds	r7, #28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd90      	pop	{r4, r7, pc}
 8000e64:	200000fc 	.word	0x200000fc

08000e68 <_ZN9SmartFuse4FuseC1ERKS0_>:

	private:
		/*
		 * helps the management of fuses
		 */
		struct Fuse
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	885a      	ldrh	r2, [r3, #2]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	805a      	strh	r2, [r3, #2]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	1d1a      	adds	r2, r3, #4
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	f000 f877 	bl	8000f80 <_ZN3etl4pairIttEC1ERKS1_>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1ERKS2_>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2505      	movs	r5, #5
 8000eaa:	683c      	ldr	r4, [r7, #0]
 8000eac:	461e      	mov	r6, r3
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	db07      	blt.n	8000ec2 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1ERKS2_+0x26>
 8000eb2:	4621      	mov	r1, r4
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	f7ff ffd7 	bl	8000e68 <_ZN9SmartFuse4FuseC1ERKS0_>
 8000eba:	3608      	adds	r6, #8
 8000ebc:	3408      	adds	r4, #8
 8000ebe:	3d01      	subs	r5, #1
 8000ec0:	e7f5      	b.n	8000eae <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1ERKS2_+0x12>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ecc <_ZN9SmartFuseC1ERKS_>:
class SmartFuse
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	785a      	ldrb	r2, [r3, #1]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	705a      	strb	r2, [r3, #1]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f103 0208 	add.w	r2, r3, #8
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4610      	mov	r0, r2
 8000efc:	f7ff ffce 	bl	8000e9c <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1ERKS2_>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3340      	adds	r3, #64	; 0x40
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	f7ff fb86 	bl	800062e <_ZN13FusesSettingsC1ERKS_>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8000f28:	679a      	str	r2, [r3, #120]	; 0x78
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_ZNSt5arrayIhLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6839      	ldr	r1, [r7, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f875 	bl	800103e <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZN3etl4pairIttEC1Ev>:

    T1 first;
    T2 second;

    /// Default constructor
    ETL_CONSTEXPR pair()
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
      : first(T1())
      , second(T2())
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	801a      	strh	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	805a      	strh	r2, [r3, #2]
    {
    }
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_ZN3etl4pairIttEC1ERKS1_>:
      , second(other.second)
    {
    }

    /// Copy constructor
    pair(const pair<T1, T2>& other)
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
      : first(other.first)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	881a      	ldrh	r2, [r3, #0]
      , second(other.second)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	801a      	strh	r2, [r3, #0]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	885a      	ldrh	r2, [r3, #2]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	805a      	strh	r2, [r3, #2]
    {
    }
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>:
      operator[](size_type __n) noexcept
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f84f 	bl	800105a <_ZNSt14__array_traitsIN9SmartFuse4FuseELj6EE6_S_refERA6_KS1_j>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZN3etl4pairIttEaSERKS1_>:

      swap(first, other.first);
      swap(second, other.second);
    }

    pair<T1, T2>& operator =(const pair<T1, T2>& other)
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
    {
      first = other.first;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	881a      	ldrh	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	801a      	strh	r2, [r3, #0]
      second = other.second;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	885a      	ldrh	r2, [r3, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	805a      	strh	r2, [r3, #2]

      return *this;
 8000fe0:	687b      	ldr	r3, [r7, #4]
    }
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_ZN3etl7ivectorI9SmartFuseE5beginEv>:

    //*********************************************************************
    /// Returns an iterator to the beginning of the vector.
    ///\return An iterator to the beginning of the vector.
    //*********************************************************************
    iterator begin()
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
    {
      return p_buffer;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
    }
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_ZN3etl7ivectorI9SmartFuseE3endEv>:

    //*********************************************************************
    /// Returns an iterator to the end of the vector.
    ///\return An iterator to the end of the vector.
    //*********************************************************************
    iterator end()
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
    {
      return p_end;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
    }
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_ZN3etl7ivectorI9SmartFuseEixEj>:
    //*********************************************************************
    /// Returns a reference to the value at index 'i'
    ///\param i The index.
    ///\return A reference to the value at index 'i'
    //*********************************************************************
    reference operator [](size_t i)
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
    {
      return p_buffer[i];
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	01db      	lsls	r3, r3, #7
 8001030:	4413      	add	r3, r2
    }
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	4413      	add	r3, r2
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_ZNSt14__array_traitsIN9SmartFuse4FuseELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZN11GpioElementD1Ev>:
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		//virtual void handle();
		virtual ~GpioElement() { };
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <_ZN11GpioElementD1Ev+0x1c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	080036bc 	.word	0x080036bc

08001098 <_ZN11GpioElementD0Ev>:
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffe9 	bl	8001078 <_ZN11GpioElementD1Ev>
 80010a6:	2110      	movs	r1, #16
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f002 fa56 	bl	800355a <_ZdlPvj>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
 *      Author: Piotr Lesicki
 */

#include "gpio elements.hpp"

GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	70fb      	strb	r3, [r7, #3]
						 port(port), pin(pin), is_inverted(is_inverted) { }
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x34>)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	78fa      	ldrb	r2, [r7, #3]
 80010d0:	715a      	strb	r2, [r3, #5]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	080036bc 	.word	0x080036bc

080010f0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin) :
							   GpioElement(port, pin, false) { }

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	70fb      	strb	r3, [r7, #3]
							   GpioElement(port, pin, is_inverted) { }
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	f7ff ffd7 	bl	80010b8 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x2c>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	080036ac 	.word	0x080036ac

08001120 <_ZN14GpioOutElement8activateEv>:

void GpioOutElement::activate()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68d8      	ldr	r0, [r3, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	b299      	uxth	r1, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	795b      	ldrb	r3, [r3, #5]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <_ZN14GpioOutElement8activateEv+0x1e>
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <_ZN14GpioOutElement8activateEv+0x20>
 800113e:	2301      	movs	r3, #1
 8001140:	461a      	mov	r2, r3
 8001142:	f001 f989 	bl	8002458 <HAL_GPIO_WritePin>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZN14GpioOutElement10deactivateEv>:

void GpioOutElement::deactivate()
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68d8      	ldr	r0, [r3, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	b299      	uxth	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <_ZN14GpioOutElement10deactivateEv+0x1e>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <_ZN14GpioOutElement10deactivateEv+0x20>
 800116c:	2300      	movs	r3, #0
 800116e:	461a      	mov	r2, r3
 8001170:	f001 f972 	bl	8002458 <HAL_GPIO_WritePin>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_ZN14GpioOutElementD1Ev>:
		const uint32_t pin;

		const GPIO_TypeDef * const port;
};

class GpioOutElement : public GpioElement
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <_ZN14GpioOutElementD1Ev+0x20>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff73 	bl	8001078 <_ZN11GpioElementD1Ev>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	080036ac 	.word	0x080036ac

080011a0 <_ZN14GpioOutElementD0Ev>:
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffe7 	bl	800117c <_ZN14GpioOutElementD1Ev>
 80011ae:	2110      	movs	r1, #16
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f002 f9d2 	bl	800355a <_ZdlPvj>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b64      	ldr	r3, [pc, #400]	; (8001368 <MX_GPIO_Init+0x1a8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a63      	ldr	r2, [pc, #396]	; (8001368 <MX_GPIO_Init+0x1a8>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b61      	ldr	r3, [pc, #388]	; (8001368 <MX_GPIO_Init+0x1a8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	4b5e      	ldr	r3, [pc, #376]	; (8001368 <MX_GPIO_Init+0x1a8>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a5d      	ldr	r2, [pc, #372]	; (8001368 <MX_GPIO_Init+0x1a8>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <MX_GPIO_Init+0x1a8>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b58      	ldr	r3, [pc, #352]	; (8001368 <MX_GPIO_Init+0x1a8>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a57      	ldr	r2, [pc, #348]	; (8001368 <MX_GPIO_Init+0x1a8>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b55      	ldr	r3, [pc, #340]	; (8001368 <MX_GPIO_Init+0x1a8>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b52      	ldr	r3, [pc, #328]	; (8001368 <MX_GPIO_Init+0x1a8>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a51      	ldr	r2, [pc, #324]	; (8001368 <MX_GPIO_Init+0x1a8>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b4f      	ldr	r3, [pc, #316]	; (8001368 <MX_GPIO_Init+0x1a8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <MX_GPIO_Init+0x1a8>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <MX_GPIO_Init+0x1a8>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b49      	ldr	r3, [pc, #292]	; (8001368 <MX_GPIO_Init+0x1a8>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	210f      	movs	r1, #15
 8001252:	4846      	ldr	r0, [pc, #280]	; (800136c <MX_GPIO_Init+0x1ac>)
 8001254:	f001 f900 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	211e      	movs	r1, #30
 800125c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001260:	f001 f8fa 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 800126a:	4841      	ldr	r0, [pc, #260]	; (8001370 <MX_GPIO_Init+0x1b0>)
 800126c:	f001 f8f4 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001270:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001274:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001276:	2303      	movs	r3, #3
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4839      	ldr	r0, [pc, #228]	; (800136c <MX_GPIO_Init+0x1ac>)
 8001286:	f000 ff55 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800128a:	230f      	movs	r3, #15
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4832      	ldr	r0, [pc, #200]	; (800136c <MX_GPIO_Init+0x1ac>)
 80012a2:	f000 ff47 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80012a6:	f248 7301 	movw	r3, #34561	; 0x8701
 80012aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f000 ff39 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80012c2:	231e      	movs	r3, #30
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f000 ff2a 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80012e0:	2357      	movs	r3, #87	; 0x57
 80012e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	481f      	ldr	r0, [pc, #124]	; (8001370 <MX_GPIO_Init+0x1b0>)
 80012f4:	f000 ff1e 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80012f8:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 80012fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4818      	ldr	r0, [pc, #96]	; (8001370 <MX_GPIO_Init+0x1b0>)
 800130e:	f000 ff11 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001312:	2304      	movs	r3, #4
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <MX_GPIO_Init+0x1b4>)
 8001326:	f000 ff05 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 800132a:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	480b      	ldr	r0, [pc, #44]	; (8001370 <MX_GPIO_Init+0x1b0>)
 8001344:	f000 fef6 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001348:	2308      	movs	r3, #8
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134c:	2303      	movs	r3, #3
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_GPIO_Init+0x1b8>)
 800135c:	f000 feea 	bl	8002134 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	48000800 	.word	0x48000800
 8001370:	48000400 	.word	0x48000400
 8001374:	48000c00 	.word	0x48000c00
 8001378:	48001c00 	.word	0x48001c00

0800137c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]
    {
    }
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <_ZN16SmartFuseHandlerILm4EEC1Ev>:


};

template <uint32_t num_of_sf>
class SmartFuseHandler
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f9eb 	bl	8001798 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <main>:
/**
 *@brief  The application entry point.
 *@retval int
 */
int main(void)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80013d2:	af02      	add	r7, sp, #8
	/*USER CODE BEGIN 1 */

	SmartFuseHandler<4> sf_handler;
 80013d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ffea 	bl	80013b2 <_ZN16SmartFuseHandlerILm4EEC1Ev>

	FusesSettings fuses_settings
 80013de:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80013e2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80013ee:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80013f2:	2201      	movs	r2, #1
 80013f4:	705a      	strb	r2, [r3, #1]
 80013f6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80013fa:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80013fe:	2201      	movs	r2, #1
 8001400:	709a      	strb	r2, [r3, #2]
 8001402:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001406:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800140a:	2201      	movs	r2, #1
 800140c:	70da      	strb	r2, [r3, #3]
 800140e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001412:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001416:	2201      	movs	r2, #1
 8001418:	711a      	strb	r2, [r3, #4]
 800141a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800141e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001422:	2201      	movs	r2, #1
 8001424:	715a      	strb	r2, [r3, #5]
 8001426:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800142a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800142e:	4a9c      	ldr	r2, [pc, #624]	; (80016a0 <main+0x2d4>)
 8001430:	3306      	adds	r3, #6
 8001432:	6810      	ldr	r0, [r2, #0]
 8001434:	6018      	str	r0, [r3, #0]
 8001436:	8892      	ldrh	r2, [r2, #4]
 8001438:	809a      	strh	r2, [r3, #4]
 800143a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800143e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001442:	2202      	movs	r2, #2
 8001444:	731a      	strb	r2, [r3, #12]
 8001446:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800144a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800144e:	2202      	movs	r2, #2
 8001450:	735a      	strb	r2, [r3, #13]
 8001452:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001456:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800145a:	2202      	movs	r2, #2
 800145c:	739a      	strb	r2, [r3, #14]
 800145e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001462:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001466:	2202      	movs	r2, #2
 8001468:	73da      	strb	r2, [r3, #15]
 800146a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800146e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001472:	2202      	movs	r2, #2
 8001474:	741a      	strb	r2, [r3, #16]
 8001476:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800147a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800147e:	2202      	movs	r2, #2
 8001480:	745a      	strb	r2, [r3, #17]
 8001482:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001486:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800148a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800148e:	825a      	strh	r2, [r3, #18]
 8001490:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001494:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001498:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800149c:	829a      	strh	r2, [r3, #20]
 800149e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014a2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80014a6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80014aa:	82da      	strh	r2, [r3, #22]
 80014ac:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014b0:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80014b4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80014b8:	831a      	strh	r2, [r3, #24]
 80014ba:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014be:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80014c2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80014c6:	835a      	strh	r2, [r3, #26]
 80014c8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014cc:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80014d0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80014d4:	839a      	strh	r2, [r3, #28]
 80014d6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014da:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80014de:	2200      	movs	r2, #0
 80014e0:	83da      	strh	r2, [r3, #30]
 80014e2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014e6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80014ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ee:	841a      	strh	r2, [r3, #32]
 80014f0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014f4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80014f8:	2200      	movs	r2, #0
 80014fa:	845a      	strh	r2, [r3, #34]	; 0x22
 80014fc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001500:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001508:	849a      	strh	r2, [r3, #36]	; 0x24
 800150a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800150e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001512:	2200      	movs	r2, #0
 8001514:	84da      	strh	r2, [r3, #38]	; 0x26
 8001516:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800151a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800151e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001522:	851a      	strh	r2, [r3, #40]	; 0x28
 8001524:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001528:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800152c:	2200      	movs	r2, #0
 800152e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001530:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001534:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800153c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800153e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001542:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001546:	2200      	movs	r2, #0
 8001548:	85da      	strh	r2, [r3, #46]	; 0x2e
 800154a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800154e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001556:	861a      	strh	r2, [r3, #48]	; 0x30
 8001558:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800155c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001560:	2200      	movs	r2, #0
 8001562:	865a      	strh	r2, [r3, #50]	; 0x32
 8001564:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001568:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800156c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001570:	869a      	strh	r2, [r3, #52]	; 0x34
		  SamplingMode::Continuous, SamplingMode::Continuous, SamplingMode::Continuous },
		{ 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff },
		{ { 0x0000, 0xffff },  { 0x0000, 0xffff }, { 0x0000, 0xffff }, { 0x0000, 0xffff }, { 0x0000, 0xffff }, { 0x0000, 0xffff } }
	};

	sf_handler.smart_fuses.emplace_back(GPIOA, GPIO_PIN_1, &hspi1, fuses_settings);
 8001572:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001576:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800157a:	2302      	movs	r3, #2
 800157c:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
 8001580:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <main+0x2d8>)
 8001582:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8001586:	f507 7416 	add.w	r4, r7, #600	; 0x258
 800158a:	f207 2256 	addw	r2, r7, #598	; 0x256
 800158e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8001592:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	4623      	mov	r3, r4
 800159e:	f000 f930 	bl	8001802 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJP12GPIO_TypeDeftP19__SPI_HandleTypeDefR13FusesSettingsEEEvDpOT_>
	sf_handler.smart_fuses.emplace_back(GPIOA, GPIO_PIN_2, &hspi1, fuses_settings);
 80015a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015a6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80015aa:	2304      	movs	r3, #4
 80015ac:	f8a7 3262 	strh.w	r3, [r7, #610]	; 0x262
 80015b0:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <main+0x2d8>)
 80015b2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80015b6:	f507 7419 	add.w	r4, r7, #612	; 0x264
 80015ba:	f207 2262 	addw	r2, r7, #610	; 0x262
 80015be:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 80015c2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	4623      	mov	r3, r4
 80015ce:	f000 f918 	bl	8001802 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJP12GPIO_TypeDeftP19__SPI_HandleTypeDefR13FusesSettingsEEEvDpOT_>
	sf_handler.smart_fuses.emplace_back(GPIOA, GPIO_PIN_3, &hspi1, fuses_settings);
 80015d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015d6:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80015da:	2308      	movs	r3, #8
 80015dc:	f8a7 326e 	strh.w	r3, [r7, #622]	; 0x26e
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <main+0x2d8>)
 80015e2:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 80015e6:	f507 741c 	add.w	r4, r7, #624	; 0x270
 80015ea:	f207 226e 	addw	r2, r7, #622	; 0x26e
 80015ee:	f507 711a 	add.w	r1, r7, #616	; 0x268
 80015f2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4623      	mov	r3, r4
 80015fe:	f000 f900 	bl	8001802 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJP12GPIO_TypeDeftP19__SPI_HandleTypeDefR13FusesSettingsEEEvDpOT_>
	sf_handler.smart_fuses.emplace_back(GPIOA, GPIO_PIN_4, &hspi1, fuses_settings);
 8001602:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001606:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800160a:	2310      	movs	r3, #16
 800160c:	f8a7 327a 	strh.w	r3, [r7, #634]	; 0x27a
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <main+0x2d8>)
 8001612:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8001616:	f507 741f 	add.w	r4, r7, #636	; 0x27c
 800161a:	f207 227a 	addw	r2, r7, #634	; 0x27a
 800161e:	f507 711d 	add.w	r1, r7, #628	; 0x274
 8001622:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4623      	mov	r3, r4
 800162e:	f000 f8e8 	bl	8001802 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJP12GPIO_TypeDeftP19__SPI_HandleTypeDefR13FusesSettingsEEEvDpOT_>
	/*USER CODE END 1 */

	/*MCU Configuration--------------------------------------------------------*/

	/*Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001632:	f000 fb04 	bl	8001c3e <HAL_Init>
	/*USER CODE BEGIN Init */

	/*USER CODE END Init */

	/*Configure the system clock */
	SystemClock_Config();
 8001636:	f000 f83f 	bl	80016b8 <_Z18SystemClock_Configv>
	/*USER CODE BEGIN SysInit */

	/*USER CODE END SysInit */

	/*Initialize all configured peripherals */
	MX_GPIO_Init();
 800163a:	f7ff fdc1 	bl	80011c0 <MX_GPIO_Init>
	MX_CAN1_Init();
 800163e:	f7fe fddd 	bl	80001fc <MX_CAN1_Init>
	MX_SPI1_Init();
 8001642:	f000 f9b3 	bl	80019ac <MX_SPI1_Init>
	/*USER CODE BEGIN 2 */

	sf_handler.init_all();
 8001646:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fe8f 	bl	800036e <_ZN16SmartFuseHandlerILm4EE8init_allEv>
	//const int fuse_num = 2;
	//sf_handler.smart_fuses[fuse_num].init();

	led_ok.deactivate();
 8001650:	4815      	ldr	r0, [pc, #84]	; (80016a8 <main+0x2dc>)
 8001652:	f7ff fd7c 	bl	800114e <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 8001656:	4815      	ldr	r0, [pc, #84]	; (80016ac <main+0x2e0>)
 8001658:	f7ff fd79 	bl	800114e <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 800165c:	4814      	ldr	r0, [pc, #80]	; (80016b0 <main+0x2e4>)
 800165e:	f7ff fd76 	bl	800114e <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <main+0x2e8>)
 8001664:	f7ff fd73 	bl	800114e <_ZN14GpioOutElement10deactivateEv>

	/*USER CODE END 2 */

	/*Infinite loop */
	/*USER CODE BEGIN WHILE */
	Timer tim;
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fa93 	bl	8001b98 <_ZN5TimerC1Ev>
	Timer tim2;
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fa8f 	bl	8001b98 <_ZN5TimerC1Ev>
	{
		//sf_handler.smart_fuses[fuse_num].handle();
		//state = sf_handler.smart_fuses[fuse_num].getSmartFuseState();
//		if(state != SmartFuseState::Ok ) led_error.activate();
//		state_kek = sf_handler.smart_fuses[fuse_num].getSmartFuseState();
		if(!sf_handler.handle_all()) led_error.activate();
 800167a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fe34 	bl	80002ec <_ZN16SmartFuseHandlerILm4EE10handle_allEv>
 8001684:	4603      	mov	r3, r0
 8001686:	f083 0301 	eor.w	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <main+0x2cc>
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <main+0x2e8>)
 8001692:	f7ff fd45 	bl	8001120 <_ZN14GpioOutElement8activateEv>
 8001696:	e7f0      	b.n	800167a <main+0x2ae>
		else led_error.deactivate();
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <main+0x2e8>)
 800169a:	f7ff fd58 	bl	800114e <_ZN14GpioOutElement10deactivateEv>
		if(!sf_handler.handle_all()) led_error.activate();
 800169e:	e7ec      	b.n	800167a <main+0x2ae>
 80016a0:	0800369c 	.word	0x0800369c
 80016a4:	200000fc 	.word	0x200000fc
 80016a8:	200000bc 	.word	0x200000bc
 80016ac:	200000cc 	.word	0x200000cc
 80016b0:	200000dc 	.word	0x200000dc
 80016b4:	200000ec 	.word	0x200000ec

080016b8 <_Z18SystemClock_Configv>:
/**
 *@brief System Clock Configuration
 *@retval None
 */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b098      	sub	sp, #96	; 0x60
 80016bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016be:	f107 0318 	add.w	r3, r7, #24
 80016c2:	2248      	movs	r2, #72	; 0x48
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f001 ff78 	bl	80035bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

	/*
	 * Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016de:	f000 fef3 	bl	80024c8 <HAL_PWREx_ControlVoltageScaling>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_Z18SystemClock_Configv+0x3e>
	{
		Error_Handler();
 80016f2:	f000 f837 	bl	8001764 <Error_Handler>

	/*
	 * Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016f6:	2310      	movs	r3, #16
 80016f8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016fa:	2301      	movs	r3, #1
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001702:	2360      	movs	r3, #96	; 0x60
 8001704:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001706:	2300      	movs	r3, #0
 8001708:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170a:	f107 0318 	add.w	r3, r7, #24
 800170e:	4618      	mov	r0, r3
 8001710:	f000 ff7e 	bl	8002610 <HAL_RCC_OscConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <_Z18SystemClock_Configv+0x70>
	{
		Error_Handler();
 8001724:	f000 f81e 	bl	8001764 <Error_Handler>
	}

	/**Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001728:	230f      	movs	r3, #15
 800172a:	607b      	str	r3, [r7, #4]
		RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f001 fbed 	bl	8002f20 <HAL_RCC_ClockConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	bf14      	ite	ne
 800174c:	2301      	movne	r3, #1
 800174e:	2300      	moveq	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <_Z18SystemClock_Configv+0xa2>
	{
		Error_Handler();
 8001756:	f000 f805 	bl	8001764 <Error_Handler>
	}
}
 800175a:	bf00      	nop
 800175c:	3760      	adds	r7, #96	; 0x60
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <Error_Handler>:
/**
 *@brief  This function is executed in case of error occurrence.
 *@retval None
 */
void Error_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	/*USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	led_ok.deactivate();
 8001768:	4807      	ldr	r0, [pc, #28]	; (8001788 <Error_Handler+0x24>)
 800176a:	f7ff fcf0 	bl	800114e <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <Error_Handler+0x28>)
 8001770:	f7ff fced 	bl	800114e <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <Error_Handler+0x2c>)
 8001776:	f7ff fcea 	bl	800114e <_ZN14GpioOutElement10deactivateEv>
	led_error.activate();
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <Error_Handler+0x30>)
 800177c:	f7ff fcd0 	bl	8001120 <_ZN14GpioOutElement8activateEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop

	__disable_irq();
	while (1) {}
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x20>
 8001786:	bf00      	nop
 8001788:	200000bc 	.word	0x200000bc
 800178c:	200000cc 	.word	0x200000cc
 8001790:	200000dc 	.word	0x200000dc
 8001794:	200000ec 	.word	0x200000ec

08001798 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	330c      	adds	r3, #12
 80017a6:	2204      	movs	r2, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	f000 f85d 	bl	8001868 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>
    {
      this->initialise();
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f86f 	bl	8001894 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_ZN3etl7forwardIP12GPIO_TypeDefEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 80017c8:	687b      	ldr	r3, [r7, #4]
  }
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_ZN3etl7forwardItEEOT_RNS_16remove_referenceIS1_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 80017de:	687b      	ldr	r3, [r7, #4]
  }
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_ZN3etl7forwardIP19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 80017f4:	687b      	ldr	r3, [r7, #4]
  }
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJP12GPIO_TypeDeftP19__SPI_HandleTypeDefR13FusesSettingsEEEvDpOT_>:
    void emplace_back(Args && ... args)
 8001802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001812:	68b8      	ldr	r0, [r7, #8]
 8001814:	f7ff ffd4 	bl	80017c0 <_ZN3etl7forwardIP12GPIO_TypeDefEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001818:	4603      	mov	r3, r0
 800181a:	681c      	ldr	r4, [r3, #0]
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffda 	bl	80017d6 <_ZN3etl7forwardItEEOT_RNS_16remove_referenceIS1_E4typeE>
 8001822:	4603      	mov	r3, r0
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	4698      	mov	r8, r3
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f7ff ffdf 	bl	80017ec <_ZN3etl7forwardIP19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS3_E4typeE>
 800182e:	4603      	mov	r3, r0
 8001830:	681d      	ldr	r5, [r3, #0]
 8001832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001834:	f000 f842 	bl	80018bc <_ZN3etl7forwardIR13FusesSettingsEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001838:	4606      	mov	r6, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4619      	mov	r1, r3
 8001840:	2080      	movs	r0, #128	; 0x80
 8001842:	f7ff fd9b 	bl	800137c <_ZnwjPv>
 8001846:	9600      	str	r6, [sp, #0]
 8001848:	462b      	mov	r3, r5
 800184a:	4642      	mov	r2, r8
 800184c:	4621      	mov	r1, r4
 800184e:	f7fe ff2a 	bl	80006a6 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	609a      	str	r2, [r3, #8]
    }
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001868 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fd8b 	bl	8001394 <_ZN3etl11vector_baseC1Ej>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	609a      	str	r2, [r3, #8]
    }
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>:
    void initialise()
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4610      	mov	r0, r2
 80018a8:	f000 f813 	bl	80018d2 <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>
      p_end = p_buffer;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]
    }
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_ZN3etl7forwardIR13FusesSettingsEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 80018c4:	687b      	ldr	r3, [r7, #4]
  }
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>:
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  typename etl::enable_if<etl::is_trivially_destructible<typename etl::iterator_traits<TIterator>::value_type>::value, void>::type
    destroy(TIterator /*i_begin*/, TIterator /*i_end*/)
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
  {
  }
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_Z41__static_initialization_and_destruction_0ii>:

	/*USER CODE END Error_Handler_Debug */
}
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d122      	bne.n	800193e <_Z41__static_initialization_and_destruction_0ii+0x56>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fe:	4293      	cmp	r3, r2
 8001900:	d11d      	bne.n	800193e <_Z41__static_initialization_and_destruction_0ii+0x56>
Timer fuse_watch_dog;
 8001902:	481b      	ldr	r0, [pc, #108]	; (8001970 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001904:	f000 f948 	bl	8001b98 <_ZN5TimerC1Ev>
Timer fuses_cotrol;
 8001908:	481a      	ldr	r0, [pc, #104]	; (8001974 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800190a:	f000 f945 	bl	8001b98 <_ZN5TimerC1Ev>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 800190e:	2301      	movs	r3, #1
 8001910:	2201      	movs	r2, #1
 8001912:	4919      	ldr	r1, [pc, #100]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001914:	4819      	ldr	r0, [pc, #100]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001916:	f7ff fbeb 	bl	80010f0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 800191a:	2301      	movs	r3, #1
 800191c:	2202      	movs	r2, #2
 800191e:	4916      	ldr	r1, [pc, #88]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001920:	4817      	ldr	r0, [pc, #92]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001922:	f7ff fbe5 	bl	80010f0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 8001926:	2301      	movs	r3, #1
 8001928:	2204      	movs	r2, #4
 800192a:	4913      	ldr	r1, [pc, #76]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800192c:	4815      	ldr	r0, [pc, #84]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800192e:	f7ff fbdf 	bl	80010f0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 8001932:	2301      	movs	r3, #1
 8001934:	2208      	movs	r2, #8
 8001936:	4910      	ldr	r1, [pc, #64]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001938:	4813      	ldr	r0, [pc, #76]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800193a:	f7ff fbd9 	bl	80010f0 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d110      	bne.n	8001966 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194a:	4293      	cmp	r3, r2
 800194c:	d10b      	bne.n	8001966 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 800194e:	480e      	ldr	r0, [pc, #56]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001950:	f7ff fc14 	bl	800117c <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001956:	f7ff fc11 	bl	800117c <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 800195a:	4809      	ldr	r0, [pc, #36]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800195c:	f7ff fc0e 	bl	800117c <_ZN14GpioOutElementD1Ev>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 8001960:	4806      	ldr	r0, [pc, #24]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001962:	f7ff fc0b 	bl	800117c <_ZN14GpioOutElementD1Ev>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200000b4 	.word	0x200000b4
 8001974:	200000b8 	.word	0x200000b8
 8001978:	48000800 	.word	0x48000800
 800197c:	200000bc 	.word	0x200000bc
 8001980:	200000cc 	.word	0x200000cc
 8001984:	200000dc 	.word	0x200000dc
 8001988:	200000ec 	.word	0x200000ec

0800198c <_GLOBAL__sub_I_fuse_watch_dog>:
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
 8001990:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff ffa7 	bl	80018e8 <_Z41__static_initialization_and_destruction_0ii>
 800199a:	bd80      	pop	{r7, pc}

0800199c <_GLOBAL__sub_D_fuse_watch_dog>:
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
 80019a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff ff9f 	bl	80018e8 <_Z41__static_initialization_and_destruction_0ii>
 80019aa:	bd80      	pop	{r7, pc}

080019ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019b2:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <MX_SPI1_Init+0xa4>)
 80019b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d2:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019e2:	2218      	movs	r2, #24
 80019e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_SPI1_Init+0xa0>)
 80019fa:	2207      	movs	r2, #7
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_SPI1_Init+0xa0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_SPI1_Init+0xa0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a0a:	4810      	ldr	r0, [pc, #64]	; (8001a4c <MX_SPI1_Init+0xa0>)
 8001a0c:	f001 fd02 	bl	8003414 <HAL_SPI_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a16:	f7ff fea5 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_SPI1_Init+0xa0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <MX_SPI1_Init+0xa0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a28:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_SPI1_Init+0xa0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a34:	2b40      	cmp	r3, #64	; 0x40
 8001a36:	d007      	beq.n	8001a48 <MX_SPI1_Init+0x9c>
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <MX_SPI1_Init+0xa0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <MX_SPI1_Init+0xa0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a46:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200000fc 	.word	0x200000fc
 8001a50:	40013000 	.word	0x40013000

08001a54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <HAL_SPI_MspInit+0x7c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d128      	bne.n	8001ac8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7a:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a80:	6613      	str	r3, [r2, #96]	; 0x60
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aa6:	23e0      	movs	r3, #224	; 0xe0
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac4:	f000 fb36 	bl	8002134 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40013000 	.word	0x40013000
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_MspInit+0x44>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_MspInit+0x44>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_MspInit+0x44>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_MspInit+0x44>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_MspInit+0x44>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6593      	str	r3, [r2, #88]	; 0x58
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_MspInit+0x44>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x4>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 f8bc 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SystemInit+0x20>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <SystemInit+0x20>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
{
	this->start_time = HAL_GetTick();
 8001ba0:	f000 f8b6 	bl	8001d10 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	601a      	str	r2, [r3, #0]
}
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_ZN5Timer7restartEv>:

void Timer::restart()
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	this->start_time = HAL_GetTick();
 8001bbc:	f000 f8a8 	bl	8001d10 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - this->start_time;
 8001bd6:	f000 f89b 	bl	8001d10 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1ad3      	subs	r3, r2, r3
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf0:	f7ff ffc0 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf6:	490d      	ldr	r1, [pc, #52]	; (8001c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <LoopForever+0xe>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c0c:	4c0a      	ldr	r4, [pc, #40]	; (8001c38 <LoopForever+0x16>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f001 fca3 	bl	8003564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c1e:	f7ff fbd5 	bl	80013cc <main>

08001c22 <LoopForever>:

LoopForever:
    b LoopForever
 8001c22:	e7fe      	b.n	8001c22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c24:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c30:	08003714 	.word	0x08003714
  ldr r2, =_sbss
 8001c34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c38:	2000016c 	.word	0x2000016c

08001c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_2_IRQHandler>

08001c3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 fa3f 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c4e:	200f      	movs	r0, #15
 8001c50:	f000 f80e 	bl	8001c70 <HAL_InitTick>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	e001      	b.n	8001c64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c60:	f7ff ff3a 	bl	8001ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c64:	79fb      	ldrb	r3, [r7, #7]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c7c:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_InitTick+0x6c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d023      	beq.n	8001ccc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_InitTick+0x70>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_InitTick+0x6c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fa3d 	bl	800211a <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10f      	bne.n	8001cc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d809      	bhi.n	8001cc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 fa15 	bl	80020e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_InitTick+0x74>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e007      	b.n	8001cd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	e004      	b.n	8001cd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e001      	b.n	8001cd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x24>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_IncTick+0x24>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	20000160 	.word	0x20000160

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000160 	.word	0x20000160

08001d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff ffee 	bl	8001d10 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d005      	beq.n	8001d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_Delay+0x44>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d4e:	bf00      	nop
 8001d50:	f7ff ffde 	bl	8001d10 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d8f7      	bhi.n	8001d50 <HAL_Delay+0x28>
  {
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008

08001d70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0ed      	b.n	8001f5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fa68 	bl	8000264 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da4:	f7ff ffb4 	bl	8001d10 <HAL_GetTick>
 8001da8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001daa:	e012      	b.n	8001dd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dac:	f7ff ffb0 	bl	8001d10 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b0a      	cmp	r3, #10
 8001db8:	d90b      	bls.n	8001dd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2205      	movs	r2, #5
 8001dca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0c5      	b.n	8001f5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0e5      	beq.n	8001dac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0202 	bic.w	r2, r2, #2
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df0:	f7ff ff8e 	bl	8001d10 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001df6:	e012      	b.n	8001e1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df8:	f7ff ff8a 	bl	8001d10 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b0a      	cmp	r3, #10
 8001e04:	d90b      	bls.n	8001e1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2205      	movs	r2, #5
 8001e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e09f      	b.n	8001f5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e5      	bne.n	8001df8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e1b      	ldrb	r3, [r3, #24]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e007      	b.n	8001e56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7e5b      	ldrb	r3, [r3, #25]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e007      	b.n	8001e80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7e9b      	ldrb	r3, [r3, #26]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d108      	bne.n	8001e9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0220 	orr.w	r2, r2, #32
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e007      	b.n	8001eaa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0220 	bic.w	r2, r2, #32
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7edb      	ldrb	r3, [r3, #27]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d108      	bne.n	8001ec4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0210 	bic.w	r2, r2, #16
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e007      	b.n	8001ed4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0210 	orr.w	r2, r2, #16
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7f1b      	ldrb	r3, [r3, #28]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d108      	bne.n	8001eee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0208 	orr.w	r2, r2, #8
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e007      	b.n	8001efe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0208 	bic.w	r2, r2, #8
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7f5b      	ldrb	r3, [r3, #29]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d108      	bne.n	8001f18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0204 	orr.w	r2, r2, #4
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e007      	b.n	8001f28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0204 	bic.w	r2, r2, #4
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	ea42 0103 	orr.w	r1, r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	1e5a      	subs	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff8e 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff47 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff5c 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff8e 	bl	8002020 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5d 	bl	8001fcc <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffb0 	bl	8002088 <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002142:	e166      	b.n	8002412 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8158 	beq.w	800240c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d005      	beq.n	8002174 <HAL_GPIO_Init+0x40>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d130      	bne.n	80021d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021aa:	2201      	movs	r2, #1
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 0201 	and.w	r2, r3, #1
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d017      	beq.n	8002212 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d123      	bne.n	8002266 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	08da      	lsrs	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3208      	adds	r2, #8
 8002226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0203 	and.w	r2, r3, #3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80b2 	beq.w	800240c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a8:	4b61      	ldr	r3, [pc, #388]	; (8002430 <HAL_GPIO_Init+0x2fc>)
 80022aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ac:	4a60      	ldr	r2, [pc, #384]	; (8002430 <HAL_GPIO_Init+0x2fc>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6613      	str	r3, [r2, #96]	; 0x60
 80022b4:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <HAL_GPIO_Init+0x2fc>)
 80022b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022c0:	4a5c      	ldr	r2, [pc, #368]	; (8002434 <HAL_GPIO_Init+0x300>)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022ea:	d02b      	beq.n	8002344 <HAL_GPIO_Init+0x210>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a52      	ldr	r2, [pc, #328]	; (8002438 <HAL_GPIO_Init+0x304>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d025      	beq.n	8002340 <HAL_GPIO_Init+0x20c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a51      	ldr	r2, [pc, #324]	; (800243c <HAL_GPIO_Init+0x308>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d01f      	beq.n	800233c <HAL_GPIO_Init+0x208>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a50      	ldr	r2, [pc, #320]	; (8002440 <HAL_GPIO_Init+0x30c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d019      	beq.n	8002338 <HAL_GPIO_Init+0x204>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a4f      	ldr	r2, [pc, #316]	; (8002444 <HAL_GPIO_Init+0x310>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_GPIO_Init+0x200>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a4e      	ldr	r2, [pc, #312]	; (8002448 <HAL_GPIO_Init+0x314>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00d      	beq.n	8002330 <HAL_GPIO_Init+0x1fc>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a4d      	ldr	r2, [pc, #308]	; (800244c <HAL_GPIO_Init+0x318>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x1f8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a4c      	ldr	r2, [pc, #304]	; (8002450 <HAL_GPIO_Init+0x31c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_GPIO_Init+0x1f4>
 8002324:	2307      	movs	r3, #7
 8002326:	e00e      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002328:	2308      	movs	r3, #8
 800232a:	e00c      	b.n	8002346 <HAL_GPIO_Init+0x212>
 800232c:	2306      	movs	r3, #6
 800232e:	e00a      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002330:	2305      	movs	r3, #5
 8002332:	e008      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002334:	2304      	movs	r3, #4
 8002336:	e006      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002338:	2303      	movs	r3, #3
 800233a:	e004      	b.n	8002346 <HAL_GPIO_Init+0x212>
 800233c:	2302      	movs	r3, #2
 800233e:	e002      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_GPIO_Init+0x212>
 8002344:	2300      	movs	r3, #0
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	f002 0203 	and.w	r2, r2, #3
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	4093      	lsls	r3, r2
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002356:	4937      	ldr	r1, [pc, #220]	; (8002434 <HAL_GPIO_Init+0x300>)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002364:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <HAL_GPIO_Init+0x320>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002388:	4a32      	ldr	r2, [pc, #200]	; (8002454 <HAL_GPIO_Init+0x320>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_GPIO_Init+0x320>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023b2:	4a28      	ldr	r2, [pc, #160]	; (8002454 <HAL_GPIO_Init+0x320>)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_GPIO_Init+0x320>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_GPIO_Init+0x320>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_GPIO_Init+0x320>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_GPIO_Init+0x320>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	f47f ae91 	bne.w	8002144 <HAL_GPIO_Init+0x10>
  }
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40021000 	.word	0x40021000
 8002434:	40010000 	.word	0x40010000
 8002438:	48000400 	.word	0x48000400
 800243c:	48000800 	.word	0x48000800
 8002440:	48000c00 	.word	0x48000c00
 8002444:	48001000 	.word	0x48001000
 8002448:	48001400 	.word	0x48001400
 800244c:	48001800 	.word	0x48001800
 8002450:	48001c00 	.word	0x48001c00
 8002454:	40010400 	.word	0x40010400

08002458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
 8002464:	4613      	mov	r3, r2
 8002466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002468:	787b      	ldrb	r3, [r7, #1]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002474:	e002      	b.n	800247c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002498:	d102      	bne.n	80024a0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800249a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800249e:	e00b      	b.n	80024b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80024a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ae:	d102      	bne.n	80024b6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80024b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b4:	e000      	b.n	80024b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80024b6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40007000 	.word	0x40007000

080024c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d141      	bne.n	800255a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024d6:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e2:	d131      	bne.n	8002548 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024e4:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024ea:	4a46      	ldr	r2, [pc, #280]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f4:	4b43      	ldr	r3, [pc, #268]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024fc:	4a41      	ldr	r2, [pc, #260]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002502:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002504:	4b40      	ldr	r3, [pc, #256]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2232      	movs	r2, #50	; 0x32
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	4a3f      	ldr	r2, [pc, #252]	; (800260c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	0c9b      	lsrs	r3, r3, #18
 8002516:	3301      	adds	r3, #1
 8002518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800251a:	e002      	b.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3b01      	subs	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002522:	4b38      	ldr	r3, [pc, #224]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252e:	d102      	bne.n	8002536 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f2      	bne.n	800251c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002536:	4b33      	ldr	r3, [pc, #204]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002542:	d158      	bne.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e057      	b.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254e:	4a2d      	ldr	r2, [pc, #180]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002558:	e04d      	b.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002560:	d141      	bne.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800256a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800256e:	d131      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002576:	4a23      	ldr	r2, [pc, #140]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002588:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2232      	movs	r2, #50	; 0x32
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	0c9b      	lsrs	r3, r3, #18
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a6:	e002      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ba:	d102      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f2      	bne.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ce:	d112      	bne.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e011      	b.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025e4:	e007      	b.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40007000 	.word	0x40007000
 8002608:	20000000 	.word	0x20000000
 800260c:	431bde83 	.word	0x431bde83

08002610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f000 bc76 	b.w	8002f10 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002624:	4b97      	ldr	r3, [pc, #604]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800262e:	4b95      	ldr	r3, [pc, #596]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80e6 	beq.w	8002812 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_RCC_OscConfig+0x4c>
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	f040 808d 	bne.w	800276e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b01      	cmp	r3, #1
 8002658:	f040 8089 	bne.w	800276e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800265c:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <HAL_RCC_OscConfig+0x66>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f000 bc4d 	b.w	8002f10 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267a:	4b82      	ldr	r3, [pc, #520]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <HAL_RCC_OscConfig+0x80>
 8002686:	4b7f      	ldr	r3, [pc, #508]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268e:	e005      	b.n	800269c <HAL_RCC_OscConfig+0x8c>
 8002690:	4b7c      	ldr	r3, [pc, #496]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269c:	4293      	cmp	r3, r2
 800269e:	d224      	bcs.n	80026ea <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fdf3 	bl	8003290 <RCC_SetFlashLatencyFromMSIRange>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f000 bc2d 	b.w	8002f10 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b6:	4b73      	ldr	r3, [pc, #460]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a72      	ldr	r2, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80026bc:	f043 0308 	orr.w	r3, r3, #8
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b70      	ldr	r3, [pc, #448]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	496d      	ldr	r1, [pc, #436]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	4968      	ldr	r1, [pc, #416]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
 80026e8:	e025      	b.n	8002736 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ea:	4b66      	ldr	r3, [pc, #408]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a65      	ldr	r2, [pc, #404]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	4960      	ldr	r1, [pc, #384]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002708:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	495b      	ldr	r1, [pc, #364]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fdb2 	bl	8003290 <RCC_SetFlashLatencyFromMSIRange>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e3ec      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002736:	f000 fd1f 	bl	8003178 <HAL_RCC_GetSysClockFreq>
 800273a:	4602      	mov	r2, r0
 800273c:	4b51      	ldr	r3, [pc, #324]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	4950      	ldr	r1, [pc, #320]	; (8002888 <HAL_RCC_OscConfig+0x278>)
 8002748:	5ccb      	ldrb	r3, [r1, r3]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a4e      	ldr	r2, [pc, #312]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002754:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002756:	4b4e      	ldr	r3, [pc, #312]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fa88 	bl	8001c70 <HAL_InitTick>
 8002760:	4603      	mov	r3, r0
 8002762:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d052      	beq.n	8002810 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	e3d0      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d032      	beq.n	80027dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a42      	ldr	r2, [pc, #264]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002782:	f7ff fac5 	bl	8001d10 <HAL_GetTick>
 8002786:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800278a:	f7ff fac1 	bl	8001d10 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e3b9      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800279c:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a35      	ldr	r2, [pc, #212]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80027ae:	f043 0308 	orr.w	r3, r3, #8
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	4b33      	ldr	r3, [pc, #204]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	4930      	ldr	r1, [pc, #192]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c6:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	492b      	ldr	r1, [pc, #172]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
 80027da:	e01a      	b.n	8002812 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a28      	ldr	r2, [pc, #160]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fa92 	bl	8001d10 <HAL_GetTick>
 80027ec:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f0:	f7ff fa8e 	bl	8001d10 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e386      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1e0>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d073      	beq.n	8002906 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d005      	beq.n	8002830 <HAL_RCC_OscConfig+0x220>
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d10e      	bne.n	8002848 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d10b      	bne.n	8002848 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d063      	beq.n	8002904 <HAL_RCC_OscConfig+0x2f4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d15f      	bne.n	8002904 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e363      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x250>
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e025      	b.n	80028ac <HAL_RCC_OscConfig+0x29c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002868:	d114      	bne.n	8002894 <HAL_RCC_OscConfig+0x284>
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a05      	ldr	r2, [pc, #20]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a02      	ldr	r2, [pc, #8]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e013      	b.n	80028ac <HAL_RCC_OscConfig+0x29c>
 8002884:	40021000 	.word	0x40021000
 8002888:	080036c4 	.word	0x080036c4
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004
 8002894:	4b8f      	ldr	r3, [pc, #572]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a8e      	ldr	r2, [pc, #568]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b8c      	ldr	r3, [pc, #560]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a8b      	ldr	r2, [pc, #556]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff fa2c 	bl	8001d10 <HAL_GetTick>
 80028b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff fa28 	bl	8001d10 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e320      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ce:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x2ac>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7ff fa18 	bl	8001d10 <HAL_GetTick>
 80028e0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff fa14 	bl	8001d10 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e30c      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f6:	4b77      	ldr	r3, [pc, #476]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2d4>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d060      	beq.n	80029d4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x314>
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d119      	bne.n	8002952 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d116      	bne.n	8002952 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002924:	4b6b      	ldr	r3, [pc, #428]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_OscConfig+0x32c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e2e9      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	4962      	ldr	r1, [pc, #392]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002950:	e040      	b.n	80029d4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d023      	beq.n	80029a2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295a:	4b5e      	ldr	r3, [pc, #376]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5d      	ldr	r2, [pc, #372]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7ff f9d3 	bl	8001d10 <HAL_GetTick>
 800296a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296e:	f7ff f9cf 	bl	8001d10 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e2c7      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002980:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	494e      	ldr	r1, [pc, #312]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
 80029a0:	e018      	b.n	80029d4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b4c      	ldr	r3, [pc, #304]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a4b      	ldr	r2, [pc, #300]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7ff f9af 	bl	8001d10 <HAL_GetTick>
 80029b2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b6:	f7ff f9ab 	bl	8001d10 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e2a3      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c8:	4b42      	ldr	r3, [pc, #264]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8082 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d05f      	beq.n	8002aaa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80029ea:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d037      	beq.n	8002a70 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e27b      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01b      	beq.n	8002a5a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a22:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a28:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a32:	f7ff f96d 	bl	8001d10 <HAL_GetTick>
 8002a36:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7ff f969 	bl	8001d10 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b11      	cmp	r3, #17
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e261      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a4c:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ef      	bne.n	8002a3a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a60:	f023 0210 	bic.w	r2, r3, #16
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	491a      	ldr	r1, [pc, #104]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a70:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a76:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7ff f946 	bl	8001d10 <HAL_GetTick>
 8002a84:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a88:	f7ff f942 	bl	8001d10 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b11      	cmp	r3, #17
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e23a      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ef      	beq.n	8002a88 <HAL_RCC_OscConfig+0x478>
 8002aa8:	e01d      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab0:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aba:	f7ff f929 	bl	8001d10 <HAL_GetTick>
 8002abe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7ff f925 	bl	8001d10 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b11      	cmp	r3, #17
 8002ace:	d903      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e21d      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
 8002ad4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad8:	4b83      	ldr	r3, [pc, #524]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ed      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80bd 	beq.w	8002c6e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002afa:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10e      	bne.n	8002b24 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b78      	ldr	r3, [pc, #480]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4a77      	ldr	r2, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
 8002b12:	4b75      	ldr	r3, [pc, #468]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b24:	4b71      	ldr	r3, [pc, #452]	; (8002cec <HAL_RCC_OscConfig+0x6dc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d118      	bne.n	8002b62 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b30:	4b6e      	ldr	r3, [pc, #440]	; (8002cec <HAL_RCC_OscConfig+0x6dc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6d      	ldr	r2, [pc, #436]	; (8002cec <HAL_RCC_OscConfig+0x6dc>)
 8002b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3c:	f7ff f8e8 	bl	8001d10 <HAL_GetTick>
 8002b40:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b44:	f7ff f8e4 	bl	8001d10 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e1dc      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b56:	4b65      	ldr	r3, [pc, #404]	; (8002cec <HAL_RCC_OscConfig+0x6dc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002b6e:	4b5e      	ldr	r3, [pc, #376]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	4959      	ldr	r1, [pc, #356]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b94:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	4a53      	ldr	r2, [pc, #332]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	4a4f      	ldr	r2, [pc, #316]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb4:	e018      	b.n	8002be8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bb6:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	4a4a      	ldr	r2, [pc, #296]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc6:	e00f      	b.n	8002be8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bc8:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	4a46      	ldr	r2, [pc, #280]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bd8:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	4a42      	ldr	r2, [pc, #264]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d016      	beq.n	8002c1e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7ff f88e 	bl	8001d10 <HAL_GetTick>
 8002bf4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7ff f88a 	bl	8001d10 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e180      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0e:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ed      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x5e8>
 8002c1c:	e01d      	b.n	8002c5a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7ff f877 	bl	8001d10 <HAL_GetTick>
 8002c22:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7ff f873 	bl	8001d10 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e169      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ed      	bne.n	8002c26 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d105      	bne.n	8002c6e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d041      	beq.n	8002cfe <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01c      	beq.n	8002cbc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c88:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c92:	f7ff f83d 	bl	8001d10 <HAL_GetTick>
 8002c96:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c9a:	f7ff f839 	bl	8001d10 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e131      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ef      	beq.n	8002c9a <HAL_RCC_OscConfig+0x68a>
 8002cba:	e020      	b.n	8002cfe <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_OscConfig+0x6d8>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7ff f820 	bl	8001d10 <HAL_GetTick>
 8002cd0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cd2:	e00d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd4:	f7ff f81c 	bl	8001d10 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d906      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e114      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cf0:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ea      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8103 	beq.w	8002f0e <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	f040 80cb 	bne.w	8002ea8 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d12:	4b81      	ldr	r3, [pc, #516]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0203 	and.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d12c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	3b01      	subs	r3, #1
 8002d32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d123      	bne.n	8002d80 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d11b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d113      	bne.n	8002d80 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	3b01      	subs	r3, #1
 8002d66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d06d      	beq.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d068      	beq.n	8002e58 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d86:	4b64      	ldr	r3, [pc, #400]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d92:	4b61      	ldr	r3, [pc, #388]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0b6      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002da2:	4b5d      	ldr	r3, [pc, #372]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a5c      	ldr	r2, [pc, #368]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dae:	f7fe ffaf 	bl	8001d10 <HAL_GetTick>
 8002db2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fe ffab 	bl	8001d10 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0a3      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc8:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd4:	4b50      	ldr	r3, [pc, #320]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <HAL_RCC_OscConfig+0x90c>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002de4:	3a01      	subs	r2, #1
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	4311      	orrs	r1, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dee:	0212      	lsls	r2, r2, #8
 8002df0:	4311      	orrs	r1, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002df6:	0852      	lsrs	r2, r2, #1
 8002df8:	3a01      	subs	r2, #1
 8002dfa:	0552      	lsls	r2, r2, #21
 8002dfc:	4311      	orrs	r1, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e02:	0852      	lsrs	r2, r2, #1
 8002e04:	3a01      	subs	r2, #1
 8002e06:	0652      	lsls	r2, r2, #25
 8002e08:	4311      	orrs	r1, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e0e:	06d2      	lsls	r2, r2, #27
 8002e10:	430a      	orrs	r2, r1
 8002e12:	4941      	ldr	r1, [pc, #260]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e18:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3e      	ldr	r2, [pc, #248]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e24:	4b3c      	ldr	r3, [pc, #240]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a3b      	ldr	r2, [pc, #236]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e30:	f7fe ff6e 	bl	8001d10 <HAL_GetTick>
 8002e34:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fe ff6a 	bl	8001d10 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e062      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4a:	4b33      	ldr	r3, [pc, #204]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e56:	e05a      	b.n	8002f0e <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e059      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d152      	bne.n	8002f0e <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e80:	f7fe ff46 	bl	8001d10 <HAL_GetTick>
 8002e84:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe ff42 	bl	8001d10 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e03a      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x878>
 8002ea6:	e032      	b.n	8002f0e <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d02d      	beq.n	8002f0a <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002eba:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ec6:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002ecc:	f023 0303 	bic.w	r3, r3, #3
 8002ed0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	4a10      	ldr	r2, [pc, #64]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002ed8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe ff15 	bl	8001d10 <HAL_GetTick>
 8002ee6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fe ff11 	bl	8001d10 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e009      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_OscConfig+0x908>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x8da>
 8002f08:	e001      	b.n	8002f0e <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	019d800c 	.word	0x019d800c

08002f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e10f      	b.n	8003158 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b89      	ldr	r3, [pc, #548]	; (8003160 <HAL_RCC_ClockConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d910      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b86      	ldr	r3, [pc, #536]	; (8003160 <HAL_RCC_ClockConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 020f 	bic.w	r2, r3, #15
 8002f4e:	4984      	ldr	r1, [pc, #528]	; (8003160 <HAL_RCC_ClockConfig+0x240>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b82      	ldr	r3, [pc, #520]	; (8003160 <HAL_RCC_ClockConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0f7      	b.n	8003158 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8089 	beq.w	8003088 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d133      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7e:	4b79      	ldr	r3, [pc, #484]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0e4      	b.n	8003158 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002f8e:	f000 f9d9 	bl	8003344 <RCC_GetSysClockFreqFromPLLSource>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4a74      	ldr	r2, [pc, #464]	; (8003168 <HAL_RCC_ClockConfig+0x248>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d955      	bls.n	8003046 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002f9a:	4b72      	ldr	r3, [pc, #456]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fa6:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fae:	4a6d      	ldr	r2, [pc, #436]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e044      	b.n	8003046 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d03e      	beq.n	8003046 <HAL_RCC_ClockConfig+0x126>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d13a      	bne.n	8003046 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fd0:	4b64      	ldr	r3, [pc, #400]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd8:	4a62      	ldr	r2, [pc, #392]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8002fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fde:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	e02f      	b.n	8003046 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fee:	4b5d      	ldr	r3, [pc, #372]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d115      	bne.n	8003026 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e0ac      	b.n	8003158 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003006:	4b57      	ldr	r3, [pc, #348]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e0a0      	b.n	8003158 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003016:	4b53      	ldr	r3, [pc, #332]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e098      	b.n	8003158 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003026:	f000 f8a7 	bl	8003178 <HAL_RCC_GetSysClockFreq>
 800302a:	4603      	mov	r3, r0
 800302c:	4a4e      	ldr	r2, [pc, #312]	; (8003168 <HAL_RCC_ClockConfig+0x248>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d909      	bls.n	8003046 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003032:	4b4c      	ldr	r3, [pc, #304]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800303a:	4a4a      	ldr	r2, [pc, #296]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 800303c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003040:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f023 0203 	bic.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4944      	ldr	r1, [pc, #272]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003054:	4313      	orrs	r3, r2
 8003056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003058:	f7fe fe5a 	bl	8001d10 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	e00a      	b.n	8003076 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fe fe56 	bl	8001d10 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e070      	b.n	8003158 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 020c 	and.w	r2, r3, #12
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d1eb      	bne.n	8003060 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003094:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4930      	ldr	r1, [pc, #192]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
 80030a6:	e008      	b.n	80030ba <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d105      	bne.n	80030ba <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030ae:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	4a2c      	ldr	r2, [pc, #176]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 80030b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030b8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <HAL_RCC_ClockConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d210      	bcs.n	80030ea <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_RCC_ClockConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 020f 	bic.w	r2, r3, #15
 80030d0:	4923      	ldr	r1, [pc, #140]	; (8003160 <HAL_RCC_ClockConfig+0x240>)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d8:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_RCC_ClockConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e036      	b.n	8003158 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4918      	ldr	r1, [pc, #96]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d009      	beq.n	8003128 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4910      	ldr	r1, [pc, #64]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003124:	4313      	orrs	r3, r2
 8003126:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003128:	f000 f826 	bl	8003178 <HAL_RCC_GetSysClockFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_RCC_ClockConfig+0x244>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	490c      	ldr	r1, [pc, #48]	; (800316c <HAL_RCC_ClockConfig+0x24c>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
 8003144:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x250>)
 8003146:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_ClockConfig+0x254>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe fd8f 	bl	8001c70 <HAL_InitTick>
 8003152:	4603      	mov	r3, r0
 8003154:	73fb      	strb	r3, [r7, #15]

  return status;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40022000 	.word	0x40022000
 8003164:	40021000 	.word	0x40021000
 8003168:	04c4b400 	.word	0x04c4b400
 800316c:	080036c4 	.word	0x080036c4
 8003170:	20000000 	.word	0x20000000
 8003174:	20000004 	.word	0x20000004

08003178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003186:	4b3e      	ldr	r3, [pc, #248]	; (8003280 <HAL_RCC_GetSysClockFreq+0x108>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003190:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_RCC_GetSysClockFreq+0x108>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x34>
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d121      	bne.n	80031ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d11e      	bne.n	80031ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031ac:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d107      	bne.n	80031c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	e005      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031d4:	4a2b      	ldr	r2, [pc, #172]	; (8003284 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d102      	bne.n	80031f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031f0:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_RCC_GetSysClockFreq+0x110>)
 80031f2:	61bb      	str	r3, [r7, #24]
 80031f4:	e004      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031fc:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_RCC_GetSysClockFreq+0x114>)
 80031fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b0c      	cmp	r3, #12
 8003204:	d134      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_RCC_GetSysClockFreq+0x108>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d003      	beq.n	800321e <HAL_RCC_GetSysClockFreq+0xa6>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d003      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0xac>
 800321c:	e005      	b.n	800322a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <HAL_RCC_GetSysClockFreq+0x110>)
 8003220:	617b      	str	r3, [r7, #20]
      break;
 8003222:	e005      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_RCC_GetSysClockFreq+0x114>)
 8003226:	617b      	str	r3, [r7, #20]
      break;
 8003228:	e002      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	617b      	str	r3, [r7, #20]
      break;
 800322e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <HAL_RCC_GetSysClockFreq+0x108>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3301      	adds	r3, #1
 800323c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <HAL_RCC_GetSysClockFreq+0x108>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	fb03 f202 	mul.w	r2, r3, r2
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_RCC_GetSysClockFreq+0x108>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	0e5b      	lsrs	r3, r3, #25
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	3301      	adds	r3, #1
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003270:	69bb      	ldr	r3, [r7, #24]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3724      	adds	r7, #36	; 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	080036d4 	.word	0x080036d4
 8003288:	00f42400 	.word	0x00f42400
 800328c:	007a1200 	.word	0x007a1200

08003290 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800329c:	4b27      	ldr	r3, [pc, #156]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032a8:	f7ff f8ee 	bl	8002488 <HAL_PWREx_GetVoltageRange>
 80032ac:	6178      	str	r0, [r7, #20]
 80032ae:	e014      	b.n	80032da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ba:	6593      	str	r3, [r2, #88]	; 0x58
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032c8:	f7ff f8de 	bl	8002488 <HAL_PWREx_GetVoltageRange>
 80032cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b1b      	ldr	r3, [pc, #108]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	4a1a      	ldr	r2, [pc, #104]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e0:	d10b      	bne.n	80032fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b80      	cmp	r3, #128	; 0x80
 80032e6:	d913      	bls.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2ba0      	cmp	r3, #160	; 0xa0
 80032ec:	d902      	bls.n	80032f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032ee:	2302      	movs	r3, #2
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	e00d      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032f4:	2301      	movs	r3, #1
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	e00a      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b7f      	cmp	r3, #127	; 0x7f
 80032fe:	d902      	bls.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003300:	2302      	movs	r3, #2
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e004      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b70      	cmp	r3, #112	; 0x70
 800330a:	d101      	bne.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800330c:	2301      	movs	r3, #1
 800330e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 020f 	bic.w	r2, r3, #15
 8003318:	4909      	ldr	r1, [pc, #36]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	40022000 	.word	0x40022000

08003344 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d118      	bne.n	800338c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800335a:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003366:	4b27      	ldr	r3, [pc, #156]	; (8003404 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e005      	b.n	8003382 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003376:	4b23      	ldr	r3, [pc, #140]	; (8003404 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003382:	4a21      	ldr	r2, [pc, #132]	; (8003408 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d003      	beq.n	80033a4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d003      	beq.n	80033aa <RCC_GetSysClockFreqFromPLLSource+0x66>
 80033a2:	e005      	b.n	80033b0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80033a6:	613b      	str	r3, [r7, #16]
    break;
 80033a8:	e005      	b.n	80033b6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80033ac:	613b      	str	r3, [r7, #16]
    break;
 80033ae:	e002      	b.n	80033b6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	613b      	str	r3, [r7, #16]
    break;
 80033b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	3301      	adds	r3, #1
 80033c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033c4:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	fb03 f202 	mul.w	r2, r3, r2
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	0e5b      	lsrs	r3, r3, #25
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	3301      	adds	r3, #1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80033f6:	683b      	ldr	r3, [r7, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	40021000 	.word	0x40021000
 8003408:	080036d4 	.word	0x080036d4
 800340c:	00f42400 	.word	0x00f42400
 8003410:	007a1200 	.word	0x007a1200

08003414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e095      	b.n	8003552 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	2b00      	cmp	r3, #0
 800342c:	d108      	bne.n	8003440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003436:	d009      	beq.n	800344c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	61da      	str	r2, [r3, #28]
 800343e:	e005      	b.n	800344c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe faf4 	bl	8001a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003482:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800348c:	d902      	bls.n	8003494 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e002      	b.n	800349a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003498:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034a2:	d007      	beq.n	80034b4 <HAL_SPI_Init+0xa0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ac:	d002      	beq.n	80034b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	ea42 0103 	orr.w	r1, r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	f003 0204 	and.w	r2, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003530:	ea42 0103 	orr.w	r1, r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <_ZdlPvj>:
 800355a:	f000 b800 	b.w	800355e <_ZdlPv>

0800355e <_ZdlPv>:
 800355e:	f000 b825 	b.w	80035ac <free>
	...

08003564 <__libc_init_array>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	4d0d      	ldr	r5, [pc, #52]	; (800359c <__libc_init_array+0x38>)
 8003568:	4c0d      	ldr	r4, [pc, #52]	; (80035a0 <__libc_init_array+0x3c>)
 800356a:	1b64      	subs	r4, r4, r5
 800356c:	10a4      	asrs	r4, r4, #2
 800356e:	2600      	movs	r6, #0
 8003570:	42a6      	cmp	r6, r4
 8003572:	d109      	bne.n	8003588 <__libc_init_array+0x24>
 8003574:	4d0b      	ldr	r5, [pc, #44]	; (80035a4 <__libc_init_array+0x40>)
 8003576:	4c0c      	ldr	r4, [pc, #48]	; (80035a8 <__libc_init_array+0x44>)
 8003578:	f000 f882 	bl	8003680 <_init>
 800357c:	1b64      	subs	r4, r4, r5
 800357e:	10a4      	asrs	r4, r4, #2
 8003580:	2600      	movs	r6, #0
 8003582:	42a6      	cmp	r6, r4
 8003584:	d105      	bne.n	8003592 <__libc_init_array+0x2e>
 8003586:	bd70      	pop	{r4, r5, r6, pc}
 8003588:	f855 3b04 	ldr.w	r3, [r5], #4
 800358c:	4798      	blx	r3
 800358e:	3601      	adds	r6, #1
 8003590:	e7ee      	b.n	8003570 <__libc_init_array+0xc>
 8003592:	f855 3b04 	ldr.w	r3, [r5], #4
 8003596:	4798      	blx	r3
 8003598:	3601      	adds	r6, #1
 800359a:	e7f2      	b.n	8003582 <__libc_init_array+0x1e>
 800359c:	08003704 	.word	0x08003704
 80035a0:	08003704 	.word	0x08003704
 80035a4:	08003704 	.word	0x08003704
 80035a8:	0800370c 	.word	0x0800370c

080035ac <free>:
 80035ac:	4b02      	ldr	r3, [pc, #8]	; (80035b8 <free+0xc>)
 80035ae:	4601      	mov	r1, r0
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	f000 b80b 	b.w	80035cc <_free_r>
 80035b6:	bf00      	nop
 80035b8:	2000000c 	.word	0x2000000c

080035bc <memset>:
 80035bc:	4402      	add	r2, r0
 80035be:	4603      	mov	r3, r0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d100      	bne.n	80035c6 <memset+0xa>
 80035c4:	4770      	bx	lr
 80035c6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ca:	e7f9      	b.n	80035c0 <memset+0x4>

080035cc <_free_r>:
 80035cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035ce:	2900      	cmp	r1, #0
 80035d0:	d044      	beq.n	800365c <_free_r+0x90>
 80035d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d6:	9001      	str	r0, [sp, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f1a1 0404 	sub.w	r4, r1, #4
 80035de:	bfb8      	it	lt
 80035e0:	18e4      	addlt	r4, r4, r3
 80035e2:	f000 f83f 	bl	8003664 <__malloc_lock>
 80035e6:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <_free_r+0x94>)
 80035e8:	9801      	ldr	r0, [sp, #4]
 80035ea:	6813      	ldr	r3, [r2, #0]
 80035ec:	b933      	cbnz	r3, 80035fc <_free_r+0x30>
 80035ee:	6063      	str	r3, [r4, #4]
 80035f0:	6014      	str	r4, [r2, #0]
 80035f2:	b003      	add	sp, #12
 80035f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035f8:	f000 b83a 	b.w	8003670 <__malloc_unlock>
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	d908      	bls.n	8003612 <_free_r+0x46>
 8003600:	6825      	ldr	r5, [r4, #0]
 8003602:	1961      	adds	r1, r4, r5
 8003604:	428b      	cmp	r3, r1
 8003606:	bf01      	itttt	eq
 8003608:	6819      	ldreq	r1, [r3, #0]
 800360a:	685b      	ldreq	r3, [r3, #4]
 800360c:	1949      	addeq	r1, r1, r5
 800360e:	6021      	streq	r1, [r4, #0]
 8003610:	e7ed      	b.n	80035ee <_free_r+0x22>
 8003612:	461a      	mov	r2, r3
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	b10b      	cbz	r3, 800361c <_free_r+0x50>
 8003618:	42a3      	cmp	r3, r4
 800361a:	d9fa      	bls.n	8003612 <_free_r+0x46>
 800361c:	6811      	ldr	r1, [r2, #0]
 800361e:	1855      	adds	r5, r2, r1
 8003620:	42a5      	cmp	r5, r4
 8003622:	d10b      	bne.n	800363c <_free_r+0x70>
 8003624:	6824      	ldr	r4, [r4, #0]
 8003626:	4421      	add	r1, r4
 8003628:	1854      	adds	r4, r2, r1
 800362a:	42a3      	cmp	r3, r4
 800362c:	6011      	str	r1, [r2, #0]
 800362e:	d1e0      	bne.n	80035f2 <_free_r+0x26>
 8003630:	681c      	ldr	r4, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	6053      	str	r3, [r2, #4]
 8003636:	4421      	add	r1, r4
 8003638:	6011      	str	r1, [r2, #0]
 800363a:	e7da      	b.n	80035f2 <_free_r+0x26>
 800363c:	d902      	bls.n	8003644 <_free_r+0x78>
 800363e:	230c      	movs	r3, #12
 8003640:	6003      	str	r3, [r0, #0]
 8003642:	e7d6      	b.n	80035f2 <_free_r+0x26>
 8003644:	6825      	ldr	r5, [r4, #0]
 8003646:	1961      	adds	r1, r4, r5
 8003648:	428b      	cmp	r3, r1
 800364a:	bf04      	itt	eq
 800364c:	6819      	ldreq	r1, [r3, #0]
 800364e:	685b      	ldreq	r3, [r3, #4]
 8003650:	6063      	str	r3, [r4, #4]
 8003652:	bf04      	itt	eq
 8003654:	1949      	addeq	r1, r1, r5
 8003656:	6021      	streq	r1, [r4, #0]
 8003658:	6054      	str	r4, [r2, #4]
 800365a:	e7ca      	b.n	80035f2 <_free_r+0x26>
 800365c:	b003      	add	sp, #12
 800365e:	bd30      	pop	{r4, r5, pc}
 8003660:	20000164 	.word	0x20000164

08003664 <__malloc_lock>:
 8003664:	4801      	ldr	r0, [pc, #4]	; (800366c <__malloc_lock+0x8>)
 8003666:	f000 b809 	b.w	800367c <__retarget_lock_acquire_recursive>
 800366a:	bf00      	nop
 800366c:	20000168 	.word	0x20000168

08003670 <__malloc_unlock>:
 8003670:	4801      	ldr	r0, [pc, #4]	; (8003678 <__malloc_unlock+0x8>)
 8003672:	f000 b804 	b.w	800367e <__retarget_lock_release_recursive>
 8003676:	bf00      	nop
 8003678:	20000168 	.word	0x20000168

0800367c <__retarget_lock_acquire_recursive>:
 800367c:	4770      	bx	lr

0800367e <__retarget_lock_release_recursive>:
 800367e:	4770      	bx	lr

08003680 <_init>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	bf00      	nop
 8003684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003686:	bc08      	pop	{r3}
 8003688:	469e      	mov	lr, r3
 800368a:	4770      	bx	lr

0800368c <_fini>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr
