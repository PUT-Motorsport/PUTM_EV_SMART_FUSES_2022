
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002910  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002acc  08002acc  00012acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b18  08002b18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b18  08002b18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b18  08002b18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002b2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002b2c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094a9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa1  00000000  00000000  000294e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002af88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002b8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c3cb  00000000  00000000  0002c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5e5  00000000  00000000  0005851b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102432  00000000  00000000  00062b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164f32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002474  00000000  00000000  00164f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002ab4 	.word	0x08002ab4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08002ab4 	.word	0x08002ab4

080001fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN1_Init+0x60>)
 8000202:	4a17      	ldr	r2, [pc, #92]	; (8000260 <MX_CAN1_Init+0x64>)
 8000204:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <MX_CAN1_Init+0x60>)
 8000208:	2210      	movs	r2, #16
 800020a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN1_Init+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <MX_CAN1_Init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <MX_CAN1_Init+0x60>)
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN1_Init+0x60>)
 8000220:	2200      	movs	r2, #0
 8000222:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN1_Init+0x60>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN1_Init+0x60>)
 800022c:	2200      	movs	r2, #0
 800022e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN1_Init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN1_Init+0x60>)
 8000238:	2200      	movs	r2, #0
 800023a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN1_Init+0x60>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN1_Init+0x60>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN1_Init+0x60>)
 800024a:	f000 fc9b 	bl	8000b84 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000254:	f000 fad8 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028
 8000260:	40006400 	.word	0x40006400

08000264 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <HAL_CAN_MspInit+0x80>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d129      	bne.n	80002da <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800028a:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 800028c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000290:	6593      	str	r3, [r2, #88]	; 0x58
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002bc:	2302      	movs	r3, #2
 80002be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c4:	2303      	movs	r3, #3
 80002c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002c8:	2309      	movs	r3, #9
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f000 fe37 	bl	8000f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002da:	bf00      	nop
 80002dc:	3728      	adds	r7, #40	; 0x28
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40006400 	.word	0x40006400
 80002e8:	40021000 	.word	0x40021000

080002ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000302:	4b64      	ldr	r3, [pc, #400]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	4a63      	ldr	r2, [pc, #396]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030e:	4b61      	ldr	r3, [pc, #388]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	613b      	str	r3, [r7, #16]
 8000318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800031a:	4b5e      	ldr	r3, [pc, #376]	; (8000494 <MX_GPIO_Init+0x1a8>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	4a5d      	ldr	r2, [pc, #372]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000326:	4b5b      	ldr	r3, [pc, #364]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000332:	4b58      	ldr	r3, [pc, #352]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	4a57      	ldr	r2, [pc, #348]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033e:	4b55      	ldr	r3, [pc, #340]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034a:	4b52      	ldr	r3, [pc, #328]	; (8000494 <MX_GPIO_Init+0x1a8>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	4a51      	ldr	r2, [pc, #324]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000350:	f043 0302 	orr.w	r3, r3, #2
 8000354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000356:	4b4f      	ldr	r3, [pc, #316]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	f003 0302 	and.w	r3, r3, #2
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000362:	4b4c      	ldr	r3, [pc, #304]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	4a4b      	ldr	r2, [pc, #300]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000368:	f043 0308 	orr.w	r3, r3, #8
 800036c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036e:	4b49      	ldr	r3, [pc, #292]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	f003 0308 	and.w	r3, r3, #8
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	210f      	movs	r1, #15
 800037e:	4846      	ldr	r0, [pc, #280]	; (8000498 <MX_GPIO_Init+0x1ac>)
 8000380:	f000 ff74 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	211e      	movs	r1, #30
 8000388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038c:	f000 ff6e 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000396:	4841      	ldr	r0, [pc, #260]	; (800049c <MX_GPIO_Init+0x1b0>)
 8000398:	f000 ff68 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 800039c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80003a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003a2:	2303      	movs	r3, #3
 80003a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	4619      	mov	r1, r3
 80003b0:	4839      	ldr	r0, [pc, #228]	; (8000498 <MX_GPIO_Init+0x1ac>)
 80003b2:	f000 fdc9 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80003b6:	230f      	movs	r3, #15
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	2301      	movs	r3, #1
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	2300      	movs	r3, #0
 80003c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	4619      	mov	r1, r3
 80003cc:	4832      	ldr	r0, [pc, #200]	; (8000498 <MX_GPIO_Init+0x1ac>)
 80003ce:	f000 fdbb 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80003d2:	f248 7301 	movw	r3, #34561	; 0x8701
 80003d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d8:	2303      	movs	r3, #3
 80003da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	4619      	mov	r1, r3
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ea:	f000 fdad 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80003ee:	231e      	movs	r3, #30
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fa:	2300      	movs	r3, #0
 80003fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fe:	f107 0314 	add.w	r3, r7, #20
 8000402:	4619      	mov	r1, r3
 8000404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000408:	f000 fd9e 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800040c:	2357      	movs	r3, #87	; 0x57
 800040e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4619      	mov	r1, r3
 800041e:	481f      	ldr	r0, [pc, #124]	; (800049c <MX_GPIO_Init+0x1b0>)
 8000420:	f000 fd92 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000424:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000428:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800042a:	2303      	movs	r3, #3
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4619      	mov	r1, r3
 8000438:	4818      	ldr	r0, [pc, #96]	; (800049c <MX_GPIO_Init+0x1b0>)
 800043a:	f000 fd85 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800043e:	2304      	movs	r3, #4
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000442:	2303      	movs	r3, #3
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4619      	mov	r1, r3
 8000450:	4813      	ldr	r0, [pc, #76]	; (80004a0 <MX_GPIO_Init+0x1b4>)
 8000452:	f000 fd79 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000456:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	480b      	ldr	r0, [pc, #44]	; (800049c <MX_GPIO_Init+0x1b0>)
 8000470:	f000 fd6a 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000474:	2308      	movs	r3, #8
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000478:	2303      	movs	r3, #3
 800047a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4619      	mov	r1, r3
 8000486:	4807      	ldr	r0, [pc, #28]	; (80004a4 <MX_GPIO_Init+0x1b8>)
 8000488:	f000 fd5e 	bl	8000f48 <HAL_GPIO_Init>

}
 800048c:	bf00      	nop
 800048e:	3728      	adds	r7, #40	; 0x28
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000
 8000498:	48000800 	.word	0x48000800
 800049c:	48000400 	.word	0x48000400
 80004a0:	48000c00 	.word	0x48000c00
 80004a4:	48001c00 	.word	0x48001c00

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08c      	sub	sp, #48	; 0x30
 80004ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fad0 	bl	8000a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f919 	bl	80006e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f7ff ff19 	bl	80002ec <MX_GPIO_Init>
  MX_CAN1_Init();
 80004ba:	f7ff fe9f 	bl	80001fc <MX_CAN1_Init>
  MX_SPI1_Init();
 80004be:	f000 f9bf 	bl	8000840 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_SPI_MspInit(&hspi1);
 80004c2:	4884      	ldr	r0, [pc, #528]	; (80006d4 <main+0x22c>)
 80004c4:	f000 f9fa 	bl	80008bc <HAL_SPI_MspInit>

  HAL_GPIO_WritePin(LED_OK, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2101      	movs	r1, #1
 80004cc:	4882      	ldr	r0, [pc, #520]	; (80006d8 <main+0x230>)
 80004ce:	f000 fecd 	bl	800126c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_WARNING1, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2102      	movs	r1, #2
 80004d6:	4880      	ldr	r0, [pc, #512]	; (80006d8 <main+0x230>)
 80004d8:	f000 fec8 	bl	800126c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_WARNING2, SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	2104      	movs	r1, #4
 80004e0:	487d      	ldr	r0, [pc, #500]	; (80006d8 <main+0x230>)
 80004e2:	f000 fec3 	bl	800126c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ERROR, SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2108      	movs	r1, #8
 80004ea:	487b      	ldr	r0, [pc, #492]	; (80006d8 <main+0x230>)
 80004ec:	f000 febe 	bl	800126c <HAL_GPIO_WritePin>

  for(int i = 0; i < 4; i++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
 80004f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f6:	2b03      	cmp	r3, #3
 80004f8:	f300 808c 	bgt.w	8000614 <main+0x16c>
  {
	  selectFuse(i + 1);
 80004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fe:	3301      	adds	r3, #1
 8000500:	4618      	mov	r0, r3
 8000502:	f000 f946 	bl	8000792 <_Z10selectFusei>
	  uint8_t tx_init[3] = { READ_RAM(0x14), 0, 0 };
 8000506:	4a75      	ldr	r2, [pc, #468]	; (80006dc <main+0x234>)
 8000508:	f107 0318 	add.w	r3, r7, #24
 800050c:	6812      	ldr	r2, [r2, #0]
 800050e:	4611      	mov	r1, r2
 8000510:	8019      	strh	r1, [r3, #0]
 8000512:	3302      	adds	r3, #2
 8000514:	0c12      	lsrs	r2, r2, #16
 8000516:	701a      	strb	r2, [r3, #0]
	  uint8_t rx_init[3] = { 0, 0, 0 };
 8000518:	4a71      	ldr	r2, [pc, #452]	; (80006e0 <main+0x238>)
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	6812      	ldr	r2, [r2, #0]
 8000520:	4611      	mov	r1, r2
 8000522:	8019      	strh	r1, [r3, #0]
 8000524:	3302      	adds	r3, #2
 8000526:	0c12      	lsrs	r2, r2, #16
 8000528:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(10);
 800052a:	200a      	movs	r0, #10
 800052c:	f000 fb06 	bl	8000b3c <HAL_Delay>
	  if (HAL_SPI_TransmitReceive(&hspi1, tx_init, rx_init, 3, 100) != HAL_OK) Error_Handler();
 8000530:	f107 0214 	add.w	r2, r7, #20
 8000534:	f107 0118 	add.w	r1, r7, #24
 8000538:	2364      	movs	r3, #100	; 0x64
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2303      	movs	r3, #3
 800053e:	4865      	ldr	r0, [pc, #404]	; (80006d4 <main+0x22c>)
 8000540:	f001 ff15 	bl	800236e <HAL_SPI_TransmitReceive>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	bf14      	ite	ne
 800054a:	2301      	movne	r3, #1
 800054c:	2300      	moveq	r3, #0
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <main+0xb0>
 8000554:	f000 f958 	bl	8000808 <Error_Handler>
	  HAL_Delay(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f000 faef 	bl	8000b3c <HAL_Delay>
	  MODIFY(tx_init, WRITE_RAM(0x14), 1 << 6, 0);
 800055e:	2314      	movs	r3, #20
 8000560:	763b      	strb	r3, [r7, #24]
 8000562:	2340      	movs	r3, #64	; 0x40
 8000564:	767b      	strb	r3, [r7, #25]
 8000566:	2300      	movs	r3, #0
 8000568:	76bb      	strb	r3, [r7, #26]
	  if (HAL_SPI_TransmitReceive(&hspi1, tx_init, rx_init, 3, 100) != HAL_OK) Error_Handler();
 800056a:	f107 0214 	add.w	r2, r7, #20
 800056e:	f107 0118 	add.w	r1, r7, #24
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2303      	movs	r3, #3
 8000578:	4856      	ldr	r0, [pc, #344]	; (80006d4 <main+0x22c>)
 800057a:	f001 fef8 	bl	800236e <HAL_SPI_TransmitReceive>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	bf14      	ite	ne
 8000584:	2301      	movne	r3, #1
 8000586:	2300      	moveq	r3, #0
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0xea>
 800058e:	f000 f93b 	bl	8000808 <Error_Handler>
	  HAL_Delay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f000 fad2 	bl	8000b3c <HAL_Delay>
	  MODIFY(tx_init, WRITE_RAM(0x14), 1 << 3, 0);
 8000598:	2314      	movs	r3, #20
 800059a:	763b      	strb	r3, [r7, #24]
 800059c:	2308      	movs	r3, #8
 800059e:	767b      	strb	r3, [r7, #25]
 80005a0:	2300      	movs	r3, #0
 80005a2:	76bb      	strb	r3, [r7, #26]
	  if (HAL_SPI_TransmitReceive(&hspi1, tx_init, rx_init, 3, 100) != HAL_OK) Error_Handler();
 80005a4:	f107 0214 	add.w	r2, r7, #20
 80005a8:	f107 0118 	add.w	r1, r7, #24
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2303      	movs	r3, #3
 80005b2:	4848      	ldr	r0, [pc, #288]	; (80006d4 <main+0x22c>)
 80005b4:	f001 fedb 	bl	800236e <HAL_SPI_TransmitReceive>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	bf14      	ite	ne
 80005be:	2301      	movne	r3, #1
 80005c0:	2300      	moveq	r3, #0
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <main+0x124>
 80005c8:	f000 f91e 	bl	8000808 <Error_Handler>
	  HAL_Delay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fab5 	bl	8000b3c <HAL_Delay>
	  MODIFY(tx_init, READ_RAM(0x14), 0, 0);
 80005d2:	2354      	movs	r3, #84	; 0x54
 80005d4:	763b      	strb	r3, [r7, #24]
 80005d6:	2300      	movs	r3, #0
 80005d8:	767b      	strb	r3, [r7, #25]
 80005da:	2300      	movs	r3, #0
 80005dc:	76bb      	strb	r3, [r7, #26]
	  if (HAL_SPI_TransmitReceive(&hspi1, tx_init, rx_init, 3, 100) != HAL_OK) Error_Handler();
 80005de:	f107 0214 	add.w	r2, r7, #20
 80005e2:	f107 0118 	add.w	r1, r7, #24
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2303      	movs	r3, #3
 80005ec:	4839      	ldr	r0, [pc, #228]	; (80006d4 <main+0x22c>)
 80005ee:	f001 febe 	bl	800236e <HAL_SPI_TransmitReceive>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <main+0x15e>
 8000602:	f000 f901 	bl	8000808 <Error_Handler>
	  HAL_Delay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f000 fa98 	bl	8000b3c <HAL_Delay>
  for(int i = 0; i < 4; i++)
 800060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060e:	3301      	adds	r3, #1
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
 8000612:	e76f      	b.n	80004f4 <main+0x4c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i = 0; i < 4; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
 800061a:	2b03      	cmp	r3, #3
 800061c:	dcfa      	bgt.n	8000614 <main+0x16c>
	  {
		  HAL_Delay(500);
 800061e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000622:	f000 fa8b 	bl	8000b3c <HAL_Delay>
		  selectFuse(i + 1);
 8000626:	6a3b      	ldr	r3, [r7, #32]
 8000628:	3301      	adds	r3, #1
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f8b1 	bl	8000792 <_Z10selectFusei>
		  uint8_t transmit[3] = { READ_ROM(0x03), 0, 0 };
 8000630:	4a2c      	ldr	r2, [pc, #176]	; (80006e4 <main+0x23c>)
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	6812      	ldr	r2, [r2, #0]
 8000638:	4611      	mov	r1, r2
 800063a:	8019      	strh	r1, [r3, #0]
 800063c:	3302      	adds	r3, #2
 800063e:	0c12      	lsrs	r2, r2, #16
 8000640:	701a      	strb	r2, [r3, #0]
		  uint8_t recive[3];
		  if (HAL_SPI_TransmitReceive(&hspi1, transmit, recive, 3, 100) != HAL_OK) Error_Handler();
 8000642:	f107 020c 	add.w	r2, r7, #12
 8000646:	f107 0110 	add.w	r1, r7, #16
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2303      	movs	r3, #3
 8000650:	4820      	ldr	r0, [pc, #128]	; (80006d4 <main+0x22c>)
 8000652:	f001 fe8c 	bl	800236e <HAL_SPI_TransmitReceive>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf14      	ite	ne
 800065c:	2301      	movne	r3, #1
 800065e:	2300      	moveq	r3, #0
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <main+0x1c2>
 8000666:	f000 f8cf 	bl	8000808 <Error_Handler>
		  int con = 0x56;
 800066a:	2356      	movs	r3, #86	; 0x56
 800066c:	61fb      	str	r3, [r7, #28]
		  if (recive[1] != con) HAL_GPIO_WritePin(LED_WARNING1, RESET);
 800066e:	7b7b      	ldrb	r3, [r7, #13]
 8000670:	461a      	mov	r2, r3
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	4293      	cmp	r3, r2
 8000676:	d005      	beq.n	8000684 <main+0x1dc>
 8000678:	2200      	movs	r2, #0
 800067a:	2102      	movs	r1, #2
 800067c:	4816      	ldr	r0, [pc, #88]	; (80006d8 <main+0x230>)
 800067e:	f000 fdf5 	bl	800126c <HAL_GPIO_WritePin>
 8000682:	e004      	b.n	800068e <main+0x1e6>
		  else HAL_GPIO_WritePin(LED_WARNING1, SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2102      	movs	r1, #2
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <main+0x230>)
 800068a:	f000 fdef 	bl	800126c <HAL_GPIO_WritePin>
		  MODIFY(transmit, READ_RAM(0x14), 0, 0);
 800068e:	2354      	movs	r3, #84	; 0x54
 8000690:	743b      	strb	r3, [r7, #16]
 8000692:	2300      	movs	r3, #0
 8000694:	747b      	strb	r3, [r7, #17]
 8000696:	2300      	movs	r3, #0
 8000698:	74bb      	strb	r3, [r7, #18]
		  if (HAL_SPI_TransmitReceive(&hspi1, transmit, recive, 3, 100) != HAL_OK) Error_Handler();
 800069a:	f107 020c 	add.w	r2, r7, #12
 800069e:	f107 0110 	add.w	r1, r7, #16
 80006a2:	2364      	movs	r3, #100	; 0x64
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2303      	movs	r3, #3
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <main+0x22c>)
 80006aa:	f001 fe60 	bl	800236e <HAL_SPI_TransmitReceive>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	bf14      	ite	ne
 80006b4:	2301      	movne	r3, #1
 80006b6:	2300      	moveq	r3, #0
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <main+0x21a>
 80006be:	f000 f8a3 	bl	8000808 <Error_Handler>
		  volatile int rec1 = recive[1];
 80006c2:	7b7b      	ldrb	r3, [r7, #13]
 80006c4:	60bb      	str	r3, [r7, #8]
		  volatile int rec2 = recive[2];
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	607b      	str	r3, [r7, #4]
	  for(int i = 0; i < 4; i++)
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	3301      	adds	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	e7a2      	b.n	8000618 <main+0x170>
 80006d2:	bf00      	nop
 80006d4:	20000050 	.word	0x20000050
 80006d8:	48000800 	.word	0x48000800
 80006dc:	08002acc 	.word	0x08002acc
 80006e0:	08002ad0 	.word	0x08002ad0
 80006e4:	08002ad4 	.word	0x08002ad4

080006e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b098      	sub	sp, #96	; 0x60
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0318 	add.w	r3, r7, #24
 80006f2:	2248      	movs	r2, #72	; 0x48
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 f9d4 	bl	8002aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800070e:	f000 fde5 	bl	80012dc <HAL_PWREx_ControlVoltageScaling>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	bf14      	ite	ne
 8000718:	2301      	movne	r3, #1
 800071a:	2300      	moveq	r3, #0
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000722:	f000 f871 	bl	8000808 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000726:	2310      	movs	r3, #16
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072a:	2301      	movs	r3, #1
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000732:	2360      	movs	r3, #96	; 0x60
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000736:	2300      	movs	r3, #0
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0318 	add.w	r3, r7, #24
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fe70 	bl	8001424 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf14      	ite	ne
 800074a:	2301      	movne	r3, #1
 800074c:	2300      	moveq	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000754:	f000 f858 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fadf 	bl	8001d34 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000786:	f000 f83f 	bl	8000808 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3760      	adds	r7, #96	; 0x60
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_Z10selectFusei>:

/* USER CODE BEGIN 4 */

void selectFuse(int num)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(FUSE0, ( num == 1 ? RESET : SET));
	//HAL_GPIO_WritePin(FUSE1, ( num == 2 ? RESET : SET));
	//HAL_GPIO_WritePin(FUSE2, ( num == 3 ? RESET : SET));
	//HAL_GPIO_WritePin(FUSE3, ( num == 4 ? RESET : SET));
	HAL_GPIO_WritePin(FUSE0, ( num == 1 ? SET : RESET));
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d101      	bne.n	80007a4 <_Z10selectFusei+0x12>
 80007a0:	2301      	movs	r3, #1
 80007a2:	e000      	b.n	80007a6 <_Z10selectFusei+0x14>
 80007a4:	2300      	movs	r3, #0
 80007a6:	461a      	mov	r2, r3
 80007a8:	2102      	movs	r1, #2
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 fd5d 	bl	800126c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FUSE1, ( num == 2 ? SET : RESET));
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d101      	bne.n	80007bc <_Z10selectFusei+0x2a>
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <_Z10selectFusei+0x2c>
 80007bc:	2300      	movs	r3, #0
 80007be:	461a      	mov	r2, r3
 80007c0:	2104      	movs	r1, #4
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f000 fd51 	bl	800126c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FUSE2, ( num == 3 ? SET : RESET));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b03      	cmp	r3, #3
 80007ce:	d101      	bne.n	80007d4 <_Z10selectFusei+0x42>
 80007d0:	2301      	movs	r3, #1
 80007d2:	e000      	b.n	80007d6 <_Z10selectFusei+0x44>
 80007d4:	2300      	movs	r3, #0
 80007d6:	461a      	mov	r2, r3
 80007d8:	2108      	movs	r1, #8
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f000 fd45 	bl	800126c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FUSE3, ( num == 4 ? SET : RESET));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d101      	bne.n	80007ec <_Z10selectFusei+0x5a>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e000      	b.n	80007ee <_Z10selectFusei+0x5c>
 80007ec:	2300      	movs	r3, #0
 80007ee:	461a      	mov	r2, r3
 80007f0:	2110      	movs	r1, #16
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f000 fd39 	bl	800126c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 f99e 	bl	8000b3c <HAL_Delay>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_OK, SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2101      	movs	r1, #1
 8000810:	480a      	ldr	r0, [pc, #40]	; (800083c <Error_Handler+0x34>)
 8000812:	f000 fd2b 	bl	800126c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING1, SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2102      	movs	r1, #2
 800081a:	4808      	ldr	r0, [pc, #32]	; (800083c <Error_Handler+0x34>)
 800081c:	f000 fd26 	bl	800126c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING2, SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2104      	movs	r1, #4
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <Error_Handler+0x34>)
 8000826:	f000 fd21 	bl	800126c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR, RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <Error_Handler+0x34>)
 8000830:	f000 fd1c 	bl	800126c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x30>
 800083a:	bf00      	nop
 800083c:	48000800 	.word	0x48000800

08000840 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_SPI1_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_SPI1_Init+0x74>)
 800084c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI1_Init+0x74>)
 800085a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800085e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI1_Init+0x74>)
 800086e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000872:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000876:	2210      	movs	r2, #16
 8000878:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI1_Init+0x74>)
 800088e:	2207      	movs	r2, #7
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_SPI1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI1_Init+0x74>)
 800089a:	2208      	movs	r2, #8
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_SPI1_Init+0x74>)
 80008a0:	f001 fcc2 	bl	8002228 <HAL_SPI_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f7ff ffad 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000050 	.word	0x20000050
 80008b8:	40013000 	.word	0x40013000

080008bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <HAL_SPI_MspInit+0x7c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d128      	bne.n	8000930 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008e8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_SPI_MspInit+0x80>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800090e:	23e0      	movs	r3, #224	; 0xe0
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800091e:	2305      	movs	r3, #5
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f000 fb0c 	bl	8000f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40013000 	.word	0x40013000
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f892 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <SystemInit+0x20>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <SystemInit+0x20>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a04:	f7ff ffea 	bl	80009dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	; (8000a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <LoopForever+0xe>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	; (8000a4c <LoopForever+0x16>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f002 f815 	bl	8002a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a32:	f7ff fd39 	bl	80004a8 <main>

08000a36 <LoopForever>:

LoopForever:
    b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a44:	08002b20 	.word	0x08002b20
  ldr r2, =_sbss
 8000a48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a4c:	200000b8 	.word	0x200000b8

08000a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_2_IRQHandler>

08000a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 fa3f 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f80e 	bl	8000a84 <HAL_InitTick>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	e001      	b.n	8000a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a74:	f7ff ff64 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_InitTick+0x6c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d023      	beq.n	8000ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_InitTick+0x70>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_InitTick+0x6c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fa3d 	bl	8000f2e <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10f      	bne.n	8000ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d809      	bhi.n	8000ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 fa15 	bl	8000ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_InitTick+0x74>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e007      	b.n	8000ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e004      	b.n	8000ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e001      	b.n	8000ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	200000b4 	.word	0x200000b4

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200000b4 	.word	0x200000b4

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_Delay+0x44>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffde 	bl	8000b24 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008

08000b84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0ed      	b.n	8000d72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fb5e 	bl	8000264 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0201 	orr.w	r2, r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb8:	f7ff ffb4 	bl	8000b24 <HAL_GetTick>
 8000bbc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bbe:	e012      	b.n	8000be6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc0:	f7ff ffb0 	bl	8000b24 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b0a      	cmp	r3, #10
 8000bcc:	d90b      	bls.n	8000be6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2205      	movs	r2, #5
 8000bde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e0c5      	b.n	8000d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0e5      	beq.n	8000bc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f022 0202 	bic.w	r2, r2, #2
 8000c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c04:	f7ff ff8e 	bl	8000b24 <HAL_GetTick>
 8000c08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c0a:	e012      	b.n	8000c32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c0c:	f7ff ff8a 	bl	8000b24 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d90b      	bls.n	8000c32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2205      	movs	r2, #5
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e09f      	b.n	8000d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1e5      	bne.n	8000c0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7e1b      	ldrb	r3, [r3, #24]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d108      	bne.n	8000c5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7e5b      	ldrb	r3, [r3, #25]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d108      	bne.n	8000c84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e007      	b.n	8000c94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e9b      	ldrb	r3, [r3, #26]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d108      	bne.n	8000cae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0220 	orr.w	r2, r2, #32
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e007      	b.n	8000cbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0220 	bic.w	r2, r2, #32
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7edb      	ldrb	r3, [r3, #27]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d108      	bne.n	8000cd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0210 	bic.w	r2, r2, #16
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	e007      	b.n	8000ce8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0210 	orr.w	r2, r2, #16
 8000ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7f1b      	ldrb	r3, [r3, #28]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d108      	bne.n	8000d02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0208 	orr.w	r2, r2, #8
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	e007      	b.n	8000d12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 0208 	bic.w	r2, r2, #8
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7f5b      	ldrb	r3, [r3, #29]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f042 0204 	orr.w	r2, r2, #4
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0204 	bic.w	r2, r2, #4
 8000d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	ea42 0103 	orr.w	r1, r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	1e5a      	subs	r2, r3, #1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f7ff ff8e 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff47 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff5c 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff8e 	bl	8000e34 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5d 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffb0 	bl	8000e9c <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f56:	e166      	b.n	8001226 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8158 	beq.w	8001220 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d005      	beq.n	8000f88 <HAL_GPIO_Init+0x40>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d017      	beq.n	8001026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d123      	bne.n	800107a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	691a      	ldr	r2, [r3, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	6939      	ldr	r1, [r7, #16]
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0203 	and.w	r2, r3, #3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80b2 	beq.w	8001220 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010bc:	4b61      	ldr	r3, [pc, #388]	; (8001244 <HAL_GPIO_Init+0x2fc>)
 80010be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c0:	4a60      	ldr	r2, [pc, #384]	; (8001244 <HAL_GPIO_Init+0x2fc>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6613      	str	r3, [r2, #96]	; 0x60
 80010c8:	4b5e      	ldr	r3, [pc, #376]	; (8001244 <HAL_GPIO_Init+0x2fc>)
 80010ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010d4:	4a5c      	ldr	r2, [pc, #368]	; (8001248 <HAL_GPIO_Init+0x300>)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010fe:	d02b      	beq.n	8001158 <HAL_GPIO_Init+0x210>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_GPIO_Init+0x304>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d025      	beq.n	8001154 <HAL_GPIO_Init+0x20c>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a51      	ldr	r2, [pc, #324]	; (8001250 <HAL_GPIO_Init+0x308>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d01f      	beq.n	8001150 <HAL_GPIO_Init+0x208>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a50      	ldr	r2, [pc, #320]	; (8001254 <HAL_GPIO_Init+0x30c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d019      	beq.n	800114c <HAL_GPIO_Init+0x204>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4f      	ldr	r2, [pc, #316]	; (8001258 <HAL_GPIO_Init+0x310>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d013      	beq.n	8001148 <HAL_GPIO_Init+0x200>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a4e      	ldr	r2, [pc, #312]	; (800125c <HAL_GPIO_Init+0x314>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d00d      	beq.n	8001144 <HAL_GPIO_Init+0x1fc>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a4d      	ldr	r2, [pc, #308]	; (8001260 <HAL_GPIO_Init+0x318>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d007      	beq.n	8001140 <HAL_GPIO_Init+0x1f8>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4c      	ldr	r2, [pc, #304]	; (8001264 <HAL_GPIO_Init+0x31c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d101      	bne.n	800113c <HAL_GPIO_Init+0x1f4>
 8001138:	2307      	movs	r3, #7
 800113a:	e00e      	b.n	800115a <HAL_GPIO_Init+0x212>
 800113c:	2308      	movs	r3, #8
 800113e:	e00c      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001140:	2306      	movs	r3, #6
 8001142:	e00a      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001144:	2305      	movs	r3, #5
 8001146:	e008      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001148:	2304      	movs	r3, #4
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x212>
 800114c:	2303      	movs	r3, #3
 800114e:	e004      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001150:	2302      	movs	r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001158:	2300      	movs	r3, #0
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	f002 0203 	and.w	r2, r2, #3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4093      	lsls	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800116a:	4937      	ldr	r1, [pc, #220]	; (8001248 <HAL_GPIO_Init+0x300>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001178:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_GPIO_Init+0x320>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800119c:	4a32      	ldr	r2, [pc, #200]	; (8001268 <HAL_GPIO_Init+0x320>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011a2:	4b31      	ldr	r3, [pc, #196]	; (8001268 <HAL_GPIO_Init+0x320>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011c6:	4a28      	ldr	r2, [pc, #160]	; (8001268 <HAL_GPIO_Init+0x320>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_GPIO_Init+0x320>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_GPIO_Init+0x320>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_GPIO_Init+0x320>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <HAL_GPIO_Init+0x320>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	f47f ae91 	bne.w	8000f58 <HAL_GPIO_Init+0x10>
  }
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000800 	.word	0x48000800
 8001254:	48000c00 	.word	0x48000c00
 8001258:	48001000 	.word	0x48001000
 800125c:	48001400 	.word	0x48001400
 8001260:	48001800 	.word	0x48001800
 8001264:	48001c00 	.word	0x48001c00
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001288:	e002      	b.n	8001290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ac:	d102      	bne.n	80012b4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80012ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b2:	e00b      	b.n	80012cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c2:	d102      	bne.n	80012ca <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80012c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c8:	e000      	b.n	80012cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80012ca:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40007000 	.word	0x40007000

080012dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d141      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ea:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f6:	d131      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012fe:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001308:	4b43      	ldr	r3, [pc, #268]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001310:	4a41      	ldr	r2, [pc, #260]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001318:	4b40      	ldr	r3, [pc, #256]	; (800141c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2232      	movs	r2, #50	; 0x32
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	4a3f      	ldr	r2, [pc, #252]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001324:	fba2 2303 	umull	r2, r3, r2, r3
 8001328:	0c9b      	lsrs	r3, r3, #18
 800132a:	3301      	adds	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132e:	e002      	b.n	8001336 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3b01      	subs	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001342:	d102      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f2      	bne.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001356:	d158      	bne.n	800140a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e057      	b.n	800140c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001362:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800136c:	e04d      	b.n	800140a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001374:	d141      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800137e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001382:	d131      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800138a:	4a23      	ldr	r2, [pc, #140]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2232      	movs	r2, #50	; 0x32
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	0c9b      	lsrs	r3, r3, #18
 80013b6:	3301      	adds	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ba:	e002      	b.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3b01      	subs	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ce:	d102      	bne.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f2      	bne.n	80013bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e2:	d112      	bne.n	800140a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e011      	b.n	800140c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013f8:	e007      	b.n	800140a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001408:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40007000 	.word	0x40007000
 800141c:	20000000 	.word	0x20000000
 8001420:	431bde83 	.word	0x431bde83

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	f000 bc76 	b.w	8001d24 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001438:	4b97      	ldr	r3, [pc, #604]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001442:	4b95      	ldr	r3, [pc, #596]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80e6 	beq.w	8001626 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d007      	beq.n	8001470 <HAL_RCC_OscConfig+0x4c>
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	f040 808d 	bne.w	8001582 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b01      	cmp	r3, #1
 800146c:	f040 8089 	bne.w	8001582 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001470:	4b89      	ldr	r3, [pc, #548]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <HAL_RCC_OscConfig+0x66>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	f000 bc4d 	b.w	8001d24 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800148e:	4b82      	ldr	r3, [pc, #520]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d004      	beq.n	80014a4 <HAL_RCC_OscConfig+0x80>
 800149a:	4b7f      	ldr	r3, [pc, #508]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a2:	e005      	b.n	80014b0 <HAL_RCC_OscConfig+0x8c>
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80014a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d224      	bcs.n	80014fe <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fdf3 	bl	80020a4 <RCC_SetFlashLatencyFromMSIRange>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	f000 bc2d 	b.w	8001d24 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ca:	4b73      	ldr	r3, [pc, #460]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a72      	ldr	r2, [pc, #456]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b70      	ldr	r3, [pc, #448]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	496d      	ldr	r1, [pc, #436]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e8:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	4968      	ldr	r1, [pc, #416]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
 80014fc:	e025      	b.n	800154a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014fe:	4b66      	ldr	r3, [pc, #408]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a65      	ldr	r2, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b63      	ldr	r3, [pc, #396]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	4960      	ldr	r1, [pc, #384]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800151c:	4b5e      	ldr	r3, [pc, #376]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	495b      	ldr	r1, [pc, #364]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fdb2 	bl	80020a4 <RCC_SetFlashLatencyFromMSIRange>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e3ec      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800154a:	f000 fd1f 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 800154e:	4602      	mov	r2, r0
 8001550:	4b51      	ldr	r3, [pc, #324]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4950      	ldr	r1, [pc, #320]	; (800169c <HAL_RCC_OscConfig+0x278>)
 800155c:	5ccb      	ldrb	r3, [r1, r3]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	fa22 f303 	lsr.w	r3, r2, r3
 8001566:	4a4e      	ldr	r2, [pc, #312]	; (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001568:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800156a:	4b4e      	ldr	r3, [pc, #312]	; (80016a4 <HAL_RCC_OscConfig+0x280>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fa88 	bl	8000a84 <HAL_InitTick>
 8001574:	4603      	mov	r3, r0
 8001576:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d052      	beq.n	8001624 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	e3d0      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d032      	beq.n	80015f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800158a:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a42      	ldr	r2, [pc, #264]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001596:	f7ff fac5 	bl	8000b24 <HAL_GetTick>
 800159a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800159e:	f7ff fac1 	bl	8000b24 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e3b9      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015bc:	4b36      	ldr	r3, [pc, #216]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a35      	ldr	r2, [pc, #212]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	4930      	ldr	r1, [pc, #192]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	492b      	ldr	r1, [pc, #172]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
 80015ee:	e01a      	b.n	8001626 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a28      	ldr	r2, [pc, #160]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fa92 	bl	8000b24 <HAL_GetTick>
 8001600:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001604:	f7ff fa8e 	bl	8000b24 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e386      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x1e0>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d073      	beq.n	800171a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b08      	cmp	r3, #8
 8001636:	d005      	beq.n	8001644 <HAL_RCC_OscConfig+0x220>
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	2b0c      	cmp	r3, #12
 800163c:	d10e      	bne.n	800165c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d10b      	bne.n	800165c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d063      	beq.n	8001718 <HAL_RCC_OscConfig+0x2f4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d15f      	bne.n	8001718 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e363      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d106      	bne.n	8001674 <HAL_RCC_OscConfig+0x250>
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e025      	b.n	80016c0 <HAL_RCC_OscConfig+0x29c>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167c:	d114      	bne.n	80016a8 <HAL_RCC_OscConfig+0x284>
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a02      	ldr	r2, [pc, #8]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e013      	b.n	80016c0 <HAL_RCC_OscConfig+0x29c>
 8001698:	40021000 	.word	0x40021000
 800169c:	08002ad8 	.word	0x08002ad8
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004
 80016a8:	4b8f      	ldr	r3, [pc, #572]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a8e      	ldr	r2, [pc, #568]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b8c      	ldr	r3, [pc, #560]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a8b      	ldr	r2, [pc, #556]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fa2c 	bl	8000b24 <HAL_GetTick>
 80016cc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fa28 	bl	8000b24 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e320      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	4b81      	ldr	r3, [pc, #516]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x2ac>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fa18 	bl	8000b24 <HAL_GetTick>
 80016f4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fa14 	bl	8000b24 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e30c      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2d4>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d060      	beq.n	80017e8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d005      	beq.n	8001738 <HAL_RCC_OscConfig+0x314>
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	2b0c      	cmp	r3, #12
 8001730:	d119      	bne.n	8001766 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d116      	bne.n	8001766 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001738:	4b6b      	ldr	r3, [pc, #428]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_OscConfig+0x32c>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e2e9      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	4962      	ldr	r1, [pc, #392]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001764:	e040      	b.n	80017e8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d023      	beq.n	80017b6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176e:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a5d      	ldr	r2, [pc, #372]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff f9d3 	bl	8000b24 <HAL_GetTick>
 800177e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff f9cf 	bl	8000b24 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e2c7      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001794:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b51      	ldr	r3, [pc, #324]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	494e      	ldr	r1, [pc, #312]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
 80017b4:	e018      	b.n	80017e8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b6:	4b4c      	ldr	r3, [pc, #304]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a4b      	ldr	r2, [pc, #300]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff f9af 	bl	8000b24 <HAL_GetTick>
 80017c6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff f9ab 	bl	8000b24 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e2a3      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017dc:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8082 	beq.w	80018fa <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d05f      	beq.n	80018be <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001804:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699a      	ldr	r2, [r3, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	429a      	cmp	r2, r3
 8001812:	d037      	beq.n	8001884 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e27b      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01b      	beq.n	800186e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001836:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183c:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001846:	f7ff f96d 	bl	8000b24 <HAL_GetTick>
 800184a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff f969 	bl	8000b24 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b11      	cmp	r3, #17
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e261      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ef      	bne.n	800184e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800186e:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001874:	f023 0210 	bic.w	r2, r3, #16
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	491a      	ldr	r1, [pc, #104]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	4313      	orrs	r3, r2
 8001880:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188a:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff f946 	bl	8000b24 <HAL_GetTick>
 8001898:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff f942 	bl	8000b24 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b11      	cmp	r3, #17
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e23a      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ef      	beq.n	800189c <HAL_RCC_OscConfig+0x478>
 80018bc:	e01d      	b.n	80018fa <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c4:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff f929 	bl	8000b24 <HAL_GetTick>
 80018d2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d6:	f7ff f925 	bl	8000b24 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b11      	cmp	r3, #17
 80018e2:	d903      	bls.n	80018ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e21d      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
 80018e8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ec:	4b83      	ldr	r3, [pc, #524]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ed      	bne.n	80018d6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80bd 	beq.w	8001a82 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800190e:	4b7b      	ldr	r3, [pc, #492]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10e      	bne.n	8001938 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b78      	ldr	r3, [pc, #480]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	4a77      	ldr	r2, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
 8001926:	4b75      	ldr	r3, [pc, #468]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001932:	2301      	movs	r3, #1
 8001934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001938:	4b71      	ldr	r3, [pc, #452]	; (8001b00 <HAL_RCC_OscConfig+0x6dc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d118      	bne.n	8001976 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001944:	4b6e      	ldr	r3, [pc, #440]	; (8001b00 <HAL_RCC_OscConfig+0x6dc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6d      	ldr	r2, [pc, #436]	; (8001b00 <HAL_RCC_OscConfig+0x6dc>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001950:	f7ff f8e8 	bl	8000b24 <HAL_GetTick>
 8001954:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001958:	f7ff f8e4 	bl	8000b24 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1dc      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196a:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <HAL_RCC_OscConfig+0x6dc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d02c      	beq.n	80019dc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001982:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001988:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001994:	4959      	ldr	r1, [pc, #356]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001996:	4313      	orrs	r3, r2
 8001998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d010      	beq.n	80019ca <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019a8:	4b54      	ldr	r3, [pc, #336]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	4a53      	ldr	r2, [pc, #332]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019b8:	4b50      	ldr	r3, [pc, #320]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	4a4f      	ldr	r2, [pc, #316]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c8:	e018      	b.n	80019fc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019ca:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019da:	e00f      	b.n	80019fc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019dc:	4b47      	ldr	r3, [pc, #284]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e2:	4a46      	ldr	r2, [pc, #280]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019ec:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80019ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f2:	4a42      	ldr	r2, [pc, #264]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 80019f4:	f023 0304 	bic.w	r3, r3, #4
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d016      	beq.n	8001a32 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff f88e 	bl	8000b24 <HAL_GetTick>
 8001a08:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f88a 	bl	8000b24 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e180      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a22:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ed      	beq.n	8001a0c <HAL_RCC_OscConfig+0x5e8>
 8001a30:	e01d      	b.n	8001a6e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a32:	f7ff f877 	bl	8000b24 <HAL_GetTick>
 8001a36:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff f873 	bl	8000b24 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e169      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ed      	bne.n	8001a3a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001a5e:	4b27      	ldr	r3, [pc, #156]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a64:	4a25      	ldr	r2, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d105      	bne.n	8001a82 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a76:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	4a20      	ldr	r2, [pc, #128]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d041      	beq.n	8001b12 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d01c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a9c:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f83d 	bl	8000b24 <HAL_GetTick>
 8001aaa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aae:	f7ff f839 	bl	8000b24 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e131      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0ef      	beq.n	8001aae <HAL_RCC_OscConfig+0x68a>
 8001ace:	e020      	b.n	8001b12 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_RCC_OscConfig+0x6d8>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f820 	bl	8000b24 <HAL_GetTick>
 8001ae4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae6:	e00d      	b.n	8001b04 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae8:	f7ff f81c 	bl	8000b24 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d906      	bls.n	8001b04 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e114      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b04:	4b89      	ldr	r3, [pc, #548]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1ea      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8103 	beq.w	8001d22 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	f040 80cb 	bne.w	8001cbc <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b26:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0203 	and.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d12c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b44:	3b01      	subs	r3, #1
 8001b46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d123      	bne.n	8001b94 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d11b      	bne.n	8001b94 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d113      	bne.n	8001b94 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	085b      	lsrs	r3, r3, #1
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d109      	bne.n	8001b94 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	085b      	lsrs	r3, r3, #1
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d06d      	beq.n	8001c70 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d068      	beq.n	8001c6c <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b9a:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d105      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ba6:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0b6      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a5c      	ldr	r2, [pc, #368]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc2:	f7fe ffaf 	bl	8000b24 <HAL_GetTick>
 8001bc6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bca:	f7fe ffab 	bl	8000b24 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0a3      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_OscConfig+0x90c>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bf8:	3a01      	subs	r2, #1
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c02:	0212      	lsls	r2, r2, #8
 8001c04:	4311      	orrs	r1, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c0a:	0852      	lsrs	r2, r2, #1
 8001c0c:	3a01      	subs	r2, #1
 8001c0e:	0552      	lsls	r2, r2, #21
 8001c10:	4311      	orrs	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c16:	0852      	lsrs	r2, r2, #1
 8001c18:	3a01      	subs	r2, #1
 8001c1a:	0652      	lsls	r2, r2, #25
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c22:	06d2      	lsls	r2, r2, #27
 8001c24:	430a      	orrs	r2, r1
 8001c26:	4941      	ldr	r1, [pc, #260]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a3e      	ldr	r2, [pc, #248]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c38:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a3b      	ldr	r2, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c44:	f7fe ff6e 	bl	8000b24 <HAL_GetTick>
 8001c48:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7fe ff6a 	bl	8000b24 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e062      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5e:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6a:	e05a      	b.n	8001d22 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e059      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d152      	bne.n	8001d22 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2a      	ldr	r2, [pc, #168]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c94:	f7fe ff46 	bl	8000b24 <HAL_GetTick>
 8001c98:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7fe ff42 	bl	8000b24 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e03a      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x878>
 8001cba:	e032      	b.n	8001d22 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d02d      	beq.n	8001d1e <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001ce0:	f023 0303 	bic.w	r3, r3, #3
 8001ce4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001cec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7fe ff15 	bl	8000b24 <HAL_GetTick>
 8001cfa:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe ff11 	bl	8000b24 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e009      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_RCC_OscConfig+0x908>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f0      	bne.n	8001cfe <HAL_RCC_OscConfig+0x8da>
 8001d1c:	e001      	b.n	8001d22 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	019d800c 	.word	0x019d800c

08001d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e10f      	b.n	8001f6c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b89      	ldr	r3, [pc, #548]	; (8001f74 <HAL_RCC_ClockConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d910      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b86      	ldr	r3, [pc, #536]	; (8001f74 <HAL_RCC_ClockConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 020f 	bic.w	r2, r3, #15
 8001d62:	4984      	ldr	r1, [pc, #528]	; (8001f74 <HAL_RCC_ClockConfig+0x240>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b82      	ldr	r3, [pc, #520]	; (8001f74 <HAL_RCC_ClockConfig+0x240>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0f7      	b.n	8001f6c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 8089 	beq.w	8001e9c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d133      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d92:	4b79      	ldr	r3, [pc, #484]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0e4      	b.n	8001f6c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001da2:	f000 f9d9 	bl	8002158 <RCC_GetSysClockFreqFromPLLSource>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a74      	ldr	r2, [pc, #464]	; (8001f7c <HAL_RCC_ClockConfig+0x248>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d955      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001dae:	4b72      	ldr	r3, [pc, #456]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10a      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dba:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc2:	4a6d      	ldr	r2, [pc, #436]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e044      	b.n	8001e5a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d03e      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x126>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d13a      	bne.n	8001e5a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001de4:	4b64      	ldr	r3, [pc, #400]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dec:	4a62      	ldr	r2, [pc, #392]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e02f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d115      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0ac      	b.n	8001f6c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e1a:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0a0      	b.n	8001f6c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2a:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e098      	b.n	8001f6c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001e3a:	f000 f8a7 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a4e      	ldr	r2, [pc, #312]	; (8001f7c <HAL_RCC_ClockConfig+0x248>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d909      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e46:	4b4c      	ldr	r3, [pc, #304]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4944      	ldr	r1, [pc, #272]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6c:	f7fe fe5a 	bl	8000b24 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7fe fe56 	bl	8000b24 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e070      	b.n	8001f6c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4930      	ldr	r1, [pc, #192]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
 8001eba:	e008      	b.n	8001ece <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b80      	cmp	r3, #128	; 0x80
 8001ec0:	d105      	bne.n	8001ece <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ecc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_RCC_ClockConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d210      	bcs.n	8001efe <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_RCC_ClockConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 020f 	bic.w	r2, r3, #15
 8001ee4:	4923      	ldr	r1, [pc, #140]	; (8001f74 <HAL_RCC_ClockConfig+0x240>)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_RCC_ClockConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e036      	b.n	8001f6c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4918      	ldr	r1, [pc, #96]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4910      	ldr	r1, [pc, #64]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f3c:	f000 f826 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_RCC_ClockConfig+0x244>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <HAL_RCC_ClockConfig+0x24c>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
 8001f58:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_RCC_ClockConfig+0x250>)
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x254>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fd8f 	bl	8000a84 <HAL_InitTick>
 8001f66:	4603      	mov	r3, r0
 8001f68:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	04c4b400 	.word	0x04c4b400
 8001f80:	08002ad8 	.word	0x08002ad8
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9a:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa4:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d121      	bne.n	8001ffe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d11e      	bne.n	8001ffe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fc0:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e005      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d102      	bne.n	800200a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <HAL_RCC_GetSysClockFreq+0x110>)
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	e004      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b08      	cmp	r3, #8
 800200e:	d101      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002012:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d134      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d003      	beq.n	8002032 <HAL_RCC_GetSysClockFreq+0xa6>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d003      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0xac>
 8002030:	e005      	b.n	800203e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_RCC_GetSysClockFreq+0x110>)
 8002034:	617b      	str	r3, [r7, #20]
      break;
 8002036:	e005      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800203a:	617b      	str	r3, [r7, #20]
      break;
 800203c:	e002      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	617b      	str	r3, [r7, #20]
      break;
 8002042:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3301      	adds	r3, #1
 8002050:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	fb03 f202 	mul.w	r2, r3, r2
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_GetSysClockFreq+0x108>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	0e5b      	lsrs	r3, r3, #25
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	3301      	adds	r3, #1
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002084:	69bb      	ldr	r3, [r7, #24]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	08002ae8 	.word	0x08002ae8
 800209c:	00f42400 	.word	0x00f42400
 80020a0:	007a1200 	.word	0x007a1200

080020a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020bc:	f7ff f8ee 	bl	800129c <HAL_PWREx_GetVoltageRange>
 80020c0:	6178      	str	r0, [r7, #20]
 80020c2:	e014      	b.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a21      	ldr	r2, [pc, #132]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020dc:	f7ff f8de 	bl	800129c <HAL_PWREx_GetVoltageRange>
 80020e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f4:	d10b      	bne.n	800210e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b80      	cmp	r3, #128	; 0x80
 80020fa:	d913      	bls.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002100:	d902      	bls.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002102:	2302      	movs	r3, #2
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	e00d      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002108:	2301      	movs	r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	e00a      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b7f      	cmp	r3, #127	; 0x7f
 8002112:	d902      	bls.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002114:	2302      	movs	r3, #2
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	e004      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b70      	cmp	r3, #112	; 0x70
 800211e:	d101      	bne.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002120:	2301      	movs	r3, #1
 8002122:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 020f 	bic.w	r2, r3, #15
 800212c:	4909      	ldr	r1, [pc, #36]	; (8002154 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	429a      	cmp	r2, r3
 8002140:	d001      	beq.n	8002146 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	40022000 	.word	0x40022000

08002158 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002162:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d118      	bne.n	80021a0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800217c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e005      	b.n	8002196 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002196:	4a21      	ldr	r2, [pc, #132]	; (800221c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021a0:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d003      	beq.n	80021b8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d003      	beq.n	80021be <RCC_GetSysClockFreqFromPLLSource+0x66>
 80021b6:	e005      	b.n	80021c4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80021ba:	613b      	str	r3, [r7, #16]
    break;
 80021bc:	e005      	b.n	80021ca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80021c0:	613b      	str	r3, [r7, #16]
    break;
 80021c2:	e002      	b.n	80021ca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
    break;
 80021c8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	3301      	adds	r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	fb03 f202 	mul.w	r2, r3, r2
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0e5b      	lsrs	r3, r3, #25
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	3301      	adds	r3, #1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800220a:	683b      	ldr	r3, [r7, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40021000 	.word	0x40021000
 800221c:	08002ae8 	.word	0x08002ae8
 8002220:	00f42400 	.word	0x00f42400
 8002224:	007a1200 	.word	0x007a1200

08002228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e095      	b.n	8002366 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2b00      	cmp	r3, #0
 8002240:	d108      	bne.n	8002254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800224a:	d009      	beq.n	8002260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
 8002252:	e005      	b.n	8002260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fb1e 	bl	80008bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002296:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022a0:	d902      	bls.n	80022a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e002      	b.n	80022ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80022a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80022b6:	d007      	beq.n	80022c8 <HAL_SPI_Init+0xa0>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022c0:	d002      	beq.n	80022c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	ea42 0103 	orr.w	r1, r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	f003 0204 	and.w	r2, r3, #4
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002344:	ea42 0103 	orr.w	r1, r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b08a      	sub	sp, #40	; 0x28
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800237c:	2301      	movs	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_SPI_TransmitReceive+0x26>
 8002390:	2302      	movs	r3, #2
 8002392:	e1fb      	b.n	800278c <HAL_SPI_TransmitReceive+0x41e>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800239c:	f7fe fbc2 	bl	8000b24 <HAL_GetTick>
 80023a0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80023a8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023b8:	7efb      	ldrb	r3, [r7, #27]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d00e      	beq.n	80023dc <HAL_SPI_TransmitReceive+0x6e>
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023c4:	d106      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x66>
 80023ce:	7efb      	ldrb	r3, [r7, #27]
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d003      	beq.n	80023dc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
 80023d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80023da:	e1cd      	b.n	8002778 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_SPI_TransmitReceive+0x80>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_SPI_TransmitReceive+0x80>
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80023f4:	e1c0      	b.n	8002778 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d003      	beq.n	800240a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2205      	movs	r2, #5
 8002406:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	887a      	ldrh	r2, [r7, #2]
 800241a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	887a      	ldrh	r2, [r7, #2]
 8002422:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	887a      	ldrh	r2, [r7, #2]
 8002436:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800244c:	d802      	bhi.n	8002454 <HAL_SPI_TransmitReceive+0xe6>
 800244e:	8a3b      	ldrh	r3, [r7, #16]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d908      	bls.n	8002466 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	e007      	b.n	8002476 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002474:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002480:	2b40      	cmp	r3, #64	; 0x40
 8002482:	d007      	beq.n	8002494 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800249c:	d97c      	bls.n	8002598 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_SPI_TransmitReceive+0x13e>
 80024a6:	8a7b      	ldrh	r3, [r7, #18]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d169      	bne.n	8002580 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b0:	881a      	ldrh	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	1c9a      	adds	r2, r3, #2
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024d0:	e056      	b.n	8002580 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11b      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x1aa>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <HAL_SPI_TransmitReceive+0x1aa>
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d113      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	881a      	ldrh	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	1c9a      	adds	r2, r3, #2
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d11c      	bne.n	8002560 <HAL_SPI_TransmitReceive+0x1f2>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d016      	beq.n	8002560 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	b292      	uxth	r2, r2
 800253e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	1c9a      	adds	r2, r3, #2
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800255c:	2301      	movs	r3, #1
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002560:	f7fe fae0 	bl	8000b24 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800256c:	429a      	cmp	r2, r3
 800256e:	d807      	bhi.n	8002580 <HAL_SPI_TransmitReceive+0x212>
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d003      	beq.n	8002580 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800257e:	e0fb      	b.n	8002778 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1a3      	bne.n	80024d2 <HAL_SPI_TransmitReceive+0x164>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d19d      	bne.n	80024d2 <HAL_SPI_TransmitReceive+0x164>
 8002596:	e0df      	b.n	8002758 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_SPI_TransmitReceive+0x23a>
 80025a0:	8a7b      	ldrh	r3, [r7, #18]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	f040 80cb 	bne.w	800273e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d912      	bls.n	80025d8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	881a      	ldrh	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c2:	1c9a      	adds	r2, r3, #2
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b02      	subs	r3, #2
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025d6:	e0b2      	b.n	800273e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025fe:	e09e      	b.n	800273e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b02      	cmp	r3, #2
 800260c:	d134      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x30a>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d02f      	beq.n	8002678 <HAL_SPI_TransmitReceive+0x30a>
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	2b01      	cmp	r3, #1
 800261c:	d12c      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d912      	bls.n	800264e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b02      	subs	r3, #2
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800264c:	e012      	b.n	8002674 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	7812      	ldrb	r2, [r2, #0]
 800265a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d148      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x3aa>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d042      	beq.n	8002718 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d923      	bls.n	80026e6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	b292      	uxth	r2, r2
 80026aa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	1c9a      	adds	r2, r3, #2
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b02      	subs	r3, #2
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d81f      	bhi.n	8002714 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	e016      	b.n	8002714 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f103 020c 	add.w	r2, r3, #12
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	7812      	ldrb	r2, [r2, #0]
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002714:	2301      	movs	r3, #1
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002718:	f7fe fa04 	bl	8000b24 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002724:	429a      	cmp	r2, r3
 8002726:	d803      	bhi.n	8002730 <HAL_SPI_TransmitReceive+0x3c2>
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d102      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x3c8>
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	2b00      	cmp	r3, #0
 8002734:	d103      	bne.n	800273e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800273c:	e01c      	b.n	8002778 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	f47f af5b 	bne.w	8002600 <HAL_SPI_TransmitReceive+0x292>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	f47f af54 	bne.w	8002600 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f937 	bl	80029d0 <SPI_EndRxTxTransaction>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	661a      	str	r2, [r3, #96]	; 0x60
 8002774:	e000      	b.n	8002778 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002776:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800278c:	4618      	mov	r0, r3
 800278e:	3728      	adds	r7, #40	; 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027a4:	f7fe f9be 	bl	8000b24 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	4413      	add	r3, r2
 80027b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027b4:	f7fe f9b6 	bl	8000b24 <HAL_GetTick>
 80027b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	015b      	lsls	r3, r3, #5
 80027c0:	0d1b      	lsrs	r3, r3, #20
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ca:	e054      	b.n	8002876 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d2:	d050      	beq.n	8002876 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027d4:	f7fe f9a6 	bl	8000b24 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d902      	bls.n	80027ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d13d      	bne.n	8002866 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002802:	d111      	bne.n	8002828 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280c:	d004      	beq.n	8002818 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002816:	d107      	bne.n	8002828 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002826:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002830:	d10f      	bne.n	8002852 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002850:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e017      	b.n	8002896 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3b01      	subs	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4013      	ands	r3, r2
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	429a      	cmp	r2, r3
 8002892:	d19b      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000000 	.word	0x20000000

080028a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80028b6:	f7fe f935 	bl	8000b24 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80028c6:	f7fe f92d 	bl	8000b24 <HAL_GetTick>
 80028ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80028d4:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	00da      	lsls	r2, r3, #3
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	0d1b      	lsrs	r3, r3, #20
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80028ec:	e060      	b.n	80029b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028f4:	d107      	bne.n	8002906 <SPI_WaitFifoStateUntilTimeout+0x62>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d104      	bne.n	8002906 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002904:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d050      	beq.n	80029b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800290e:	f7fe f909 	bl	8000b24 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291a:	429a      	cmp	r2, r3
 800291c:	d902      	bls.n	8002924 <SPI_WaitFifoStateUntilTimeout+0x80>
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d13d      	bne.n	80029a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002932:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293c:	d111      	bne.n	8002962 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002946:	d004      	beq.n	8002952 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	d107      	bne.n	8002962 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002960:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296a:	d10f      	bne.n	800298c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800298a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e010      	b.n	80029c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d196      	bne.n	80028ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000000 	.word	0x20000000

080029d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7ff ff5b 	bl	80028a4 <SPI_WaitFifoStateUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e027      	b.n	8002a54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff fec0 	bl	8002794 <SPI_WaitFlagStateUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1e:	f043 0220 	orr.w	r2, r3, #32
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e014      	b.n	8002a54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff ff34 	bl	80028a4 <SPI_WaitFifoStateUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e000      	b.n	8002a54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <__libc_init_array>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	4d0d      	ldr	r5, [pc, #52]	; (8002a94 <__libc_init_array+0x38>)
 8002a60:	4c0d      	ldr	r4, [pc, #52]	; (8002a98 <__libc_init_array+0x3c>)
 8002a62:	1b64      	subs	r4, r4, r5
 8002a64:	10a4      	asrs	r4, r4, #2
 8002a66:	2600      	movs	r6, #0
 8002a68:	42a6      	cmp	r6, r4
 8002a6a:	d109      	bne.n	8002a80 <__libc_init_array+0x24>
 8002a6c:	4d0b      	ldr	r5, [pc, #44]	; (8002a9c <__libc_init_array+0x40>)
 8002a6e:	4c0c      	ldr	r4, [pc, #48]	; (8002aa0 <__libc_init_array+0x44>)
 8002a70:	f000 f820 	bl	8002ab4 <_init>
 8002a74:	1b64      	subs	r4, r4, r5
 8002a76:	10a4      	asrs	r4, r4, #2
 8002a78:	2600      	movs	r6, #0
 8002a7a:	42a6      	cmp	r6, r4
 8002a7c:	d105      	bne.n	8002a8a <__libc_init_array+0x2e>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a84:	4798      	blx	r3
 8002a86:	3601      	adds	r6, #1
 8002a88:	e7ee      	b.n	8002a68 <__libc_init_array+0xc>
 8002a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8e:	4798      	blx	r3
 8002a90:	3601      	adds	r6, #1
 8002a92:	e7f2      	b.n	8002a7a <__libc_init_array+0x1e>
 8002a94:	08002b18 	.word	0x08002b18
 8002a98:	08002b18 	.word	0x08002b18
 8002a9c:	08002b18 	.word	0x08002b18
 8002aa0:	08002b1c 	.word	0x08002b1c

08002aa4 <memset>:
 8002aa4:	4402      	add	r2, r0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d100      	bne.n	8002aae <memset+0xa>
 8002aac:	4770      	bx	lr
 8002aae:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab2:	e7f9      	b.n	8002aa8 <memset+0x4>

08002ab4 <_init>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr

08002ac0 <_fini>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr
