
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009410  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d0  080099d0  0002026c  2**0
                  CONTENTS
  4 .ARM          00000000  080099d0  080099d0  0002026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099d0  080099d0  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  080099e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  2000026c  08009c4c  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  08009c4c  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d297  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045e6  00000000  00000000  0004d533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00051b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  00053180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034c32  00000000  00000000  00054668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017faa  00000000  00000000  0008929a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00136a1c  00000000  00000000  000a1244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d7c60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a0  00000000  00000000  001d7cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080095b8 	.word	0x080095b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000270 	.word	0x20000270
 80001fc:	080095b8 	.word	0x080095b8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002a6:	f107 031c 	add.w	r3, r7, #28
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002c4:	4a2f      	ldr	r2, [pc, #188]	; (8000384 <MX_ADC1_Init+0xe4>)
 80002c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c8:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ce:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d4:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002da:	4b29      	ldr	r3, [pc, #164]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002e0:	4b27      	ldr	r3, [pc, #156]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002e2:	2204      	movs	r2, #4
 80002e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002e6:	4b26      	ldr	r3, [pc, #152]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ec:	4b24      	ldr	r3, [pc, #144]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f8:	4b21      	ldr	r3, [pc, #132]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000300:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000302:	2200      	movs	r2, #0
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000306:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000308:	2200      	movs	r2, #0
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800030c:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_ADC1_Init+0xe0>)
 800030e:	2200      	movs	r2, #0
 8000310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000316:	2200      	movs	r2, #0
 8000318:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_ADC1_Init+0xe0>)
 800031c:	2200      	movs	r2, #0
 800031e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000324:	f004 fc14 	bl	8004b50 <HAL_ADC_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800032e:	f003 f993 	bl	8003658 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000336:	f107 031c 	add.w	r3, r7, #28
 800033a:	4619      	mov	r1, r3
 800033c:	4810      	ldr	r0, [pc, #64]	; (8000380 <MX_ADC1_Init+0xe0>)
 800033e:	f005 f97b 	bl	8005638 <HAL_ADCEx_MultiModeConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000348:	f003 f986 	bl	8003658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_ADC1_Init+0xe8>)
 800034e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000350:	2306      	movs	r3, #6
 8000352:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000358:	237f      	movs	r3, #127	; 0x7f
 800035a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800035c:	2304      	movs	r3, #4
 800035e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_ADC1_Init+0xe0>)
 800036a:	f004 fd43 	bl	8004df4 <HAL_ADC_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000374:	f003 f970 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000378:	bf00      	nop
 800037a:	3728      	adds	r7, #40	; 0x28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000288 	.word	0x20000288
 8000384:	50040000 	.word	0x50040000
 8000388:	36902000 	.word	0x36902000

0800038c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b0b2      	sub	sp, #200	; 0xc8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a4:	f107 031c 	add.w	r3, r7, #28
 80003a8:	2298      	movs	r2, #152	; 0x98
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f008 f939 	bl	8008624 <memset>
  if(adcHandle->Instance==ADC1)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <HAL_ADC_MspInit+0x134>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d17d      	bne.n	80004b8 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80003d2:	2308      	movs	r3, #8
 80003d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003da:	2302      	movs	r3, #2
 80003dc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003de:	2302      	movs	r3, #2
 80003e0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003e6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	4618      	mov	r0, r3
 80003ee:	f007 faad 	bl	800794c <HAL_RCCEx_PeriphCLKConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80003f8:	f003 f92e 	bl	8003658 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003fc:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a30      	ldr	r2, [pc, #192]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000408:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000410:	61bb      	str	r3, [r7, #24]
 8000412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000418:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800042e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000430:	4a24      	ldr	r2, [pc, #144]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800043a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000448:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800044a:	f043 0302 	orr.w	r3, r3, #2
 800044e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000454:	f003 0302 	and.w	r3, r3, #2
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800045c:	2301      	movs	r3, #1
 800045e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000462:	230b      	movs	r3, #11
 8000464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000472:	4619      	mov	r1, r3
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f006 f8e0 	bl	800663c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800047c:	2330      	movs	r3, #48	; 0x30
 800047e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000482:	230b      	movs	r3, #11
 8000484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000492:	4619      	mov	r1, r3
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <HAL_ADC_MspInit+0x13c>)
 8000496:	f006 f8d1 	bl	800663c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800049a:	2303      	movs	r3, #3
 800049c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004a0:	230b      	movs	r3, #11
 80004a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80004b0:	4619      	mov	r1, r3
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <HAL_ADC_MspInit+0x140>)
 80004b4:	f006 f8c2 	bl	800663c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004b8:	bf00      	nop
 80004ba:	37c8      	adds	r7, #200	; 0xc8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	50040000 	.word	0x50040000
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000800 	.word	0x48000800
 80004cc:	48000400 	.word	0x48000400

080004d0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MX_CAN1_Init+0x64>)
 80004d6:	4a18      	ldr	r2, [pc, #96]	; (8000538 <MX_CAN1_Init+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_CAN1_Init+0x64>)
 80004dc:	2206      	movs	r2, #6
 80004de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_CAN1_Init+0x64>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_CAN1_Init+0x64>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_CAN1_Init+0x64>)
 80004ee:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80004f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_CAN1_Init+0x64>)
 80004f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80004fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <MX_CAN1_Init+0x64>)
 800050a:	2200      	movs	r2, #0
 800050c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_CAN1_Init+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <MX_CAN1_Init+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_CAN1_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <MX_CAN1_Init+0x64>)
 8000522:	f005 f92d 	bl	8005780 <HAL_CAN_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800052c:	f003 f894 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200002f0 	.word	0x200002f0
 8000538:	40006400 	.word	0x40006400

0800053c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <HAL_CAN_MspInit+0xa0>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d139      	bne.n	80005d2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800058e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005a0:	2309      	movs	r3, #9
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f006 f845 	bl	800663c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2014      	movs	r0, #20
 80005b8:	f006 f809 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005bc:	2014      	movs	r0, #20
 80005be:	f006 f822 	bl	8006606 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2015      	movs	r0, #21
 80005c8:	f006 f801 	bl	80065ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005cc:	2015      	movs	r0, #21
 80005ce:	f006 f81a 	bl	8006606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d2:	bf00      	nop
 80005d4:	3728      	adds	r7, #40	; 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40006400 	.word	0x40006400
 80005e0:	40021000 	.word	0x40021000

080005e4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>:
{
	return this->channels[size_t(channel)].current;
}

template <uint32_t num_of_sf>
void SmartFuseHandler<num_of_sf>::emplaceBack(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef *const hspi, std::array < ChannelSettings, number_of_channels_per_fuse >channels_settings)
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b087      	sub	sp, #28
 8000600:	af02      	add	r7, sp, #8
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	603b      	str	r3, [r7, #0]
{
	this->smart_fuses.emplace_back(port, pin, hspi, channels_settings);
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	463b      	mov	r3, r7
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	f107 0108 	add.w	r1, r7, #8
 8000614:	f107 0420 	add.w	r4, r7, #32
 8000618:	9400      	str	r4, [sp, #0]
 800061a:	f001 fd1d 	bl	8002058 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EEEEEvDpOT_>
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bd90      	pop	{r4, r7, pc}

08000626 <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvP9SmartFuseEEE>:
template <uint32_t num_of_sf>
void SmartFuseHandler<num_of_sf>::emplaceBack(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef *const hspi, std::array < ChannelSettings, number_of_channels_per_fuse >channels_settings, const uint32_t interval, etl::delegate<void(SmartFuse*)> action)
 8000626:	b590      	push	{r4, r7, lr}
 8000628:	b089      	sub	sp, #36	; 0x24
 800062a:	af04      	add	r7, sp, #16
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	603b      	str	r3, [r7, #0]
{
	this->smart_fuses.emplace_back(port, pin, hspi, channels_settings, interval, action);
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	463c      	mov	r4, r7
 8000638:	1d3a      	adds	r2, r7, #4
 800063a:	f107 0108 	add.w	r1, r7, #8
 800063e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	4623      	mov	r3, r4
 8000652:	f001 fd43 	bl	80020dc <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EESA_RNS_8delegateIFvPS1_EEEEEEvDpOT_>
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}

0800065e <_ZN16SmartFuseHandlerILm4EE9handleAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::handleAll()
 800065e:	b580      	push	{r7, lr}
 8000660:	b088      	sub	sp, #32
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 8000666:	2300      	movs	r3, #0
 8000668:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fd8f 	bl	8002194 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 8000676:	61b8      	str	r0, [r7, #24]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fd96 	bl	80021ac <_ZN3etl7ivectorI9SmartFuseE3endEv>
 8000680:	6138      	str	r0, [r7, #16]
 8000682:	69ba      	ldr	r2, [r7, #24]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	429a      	cmp	r2, r3
 8000688:	d00f      	beq.n	80006aa <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x4c>
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.handle();
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f000 fd8c 	bl	80011ac <_ZN9SmartFuse6handleEv>
 8000694:	4603      	mov	r3, r0
 8000696:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 8000698:	7afb      	ldrb	r3, [r7, #11]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x44>
 800069e:	7afb      	ldrb	r3, [r7, #11]
 80006a0:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	33a4      	adds	r3, #164	; 0xa4
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	e7eb      	b.n	8000682 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x24>
	}

	return result;
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <_ZN16SmartFuseHandlerILm4EE7initAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::initAll()
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 80006bc:	2300      	movs	r3, #0
 80006be:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fd64 	bl	8002194 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 80006cc:	61b8      	str	r0, [r7, #24]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fd6b 	bl	80021ac <_ZN3etl7ivectorI9SmartFuseE3endEv>
 80006d6:	6138      	str	r0, [r7, #16]
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d00f      	beq.n	8000700 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x4c>
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.init();
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f000 fd06 	bl	80010f6 <_ZN9SmartFuse4initEv>
 80006ea:	4603      	mov	r3, r0
 80006ec:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 80006ee:	7afb      	ldrb	r3, [r7, #11]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x44>
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	33a4      	adds	r3, #164	; 0xa4
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	e7eb      	b.n	80006d8 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x24>
	}

	return result;
 8000700:	7ffb      	ldrb	r3, [r7, #31]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <_ZN16SmartFuseHandlerILm4EE9enableAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::enableAll()
 800070a:	b580      	push	{r7, lr}
 800070c:	b088      	sub	sp, #32
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 8000712:	2300      	movs	r3, #0
 8000714:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fd39 	bl	8002194 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 8000722:	61b8      	str	r0, [r7, #24]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd40 	bl	80021ac <_ZN3etl7ivectorI9SmartFuseE3endEv>
 800072c:	6138      	str	r0, [r7, #16]
 800072e:	69ba      	ldr	r2, [r7, #24]
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	429a      	cmp	r2, r3
 8000734:	d012      	beq.n	800075c <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x52>
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.enable();
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f000 fcf6 	bl	800112c <_ZN9SmartFuse6enableEv>
 8000740:	4603      	mov	r3, r0
 8000742:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(5);
 8000744:	2005      	movs	r0, #5
 8000746:	f004 f83f 	bl	80047c8 <HAL_Delay>
		if(x != SmartFuseState::Ok) result = x;
 800074a:	7afb      	ldrb	r3, [r7, #11]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x4a>
 8000750:	7afb      	ldrb	r3, [r7, #11]
 8000752:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	33a4      	adds	r3, #164	; 0xa4
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	e7e8      	b.n	800072e <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x24>
	}

	return result;
 800075c:	7ffb      	ldrb	r3, [r7, #31]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <_ZN16SmartFuseHandlerILm4EE9getStatesEv>:

	return result;
}

template <uint32_t num_of_sf>
std::array < SmartFuseState, num_of_sf >  SmartFuseHandler<num_of_sf>::getStates()
 8000766:	b590      	push	{r4, r7, lr}
 8000768:	b087      	sub	sp, #28
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
{
	std::array < SmartFuseState, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d817      	bhi.n	80007a8 <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0x42>
	{
		x[i] = this->smart_fuses[i].getState();
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6979      	ldr	r1, [r7, #20]
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fd30 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8000782:	4603      	mov	r3, r0
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fff9 	bl	800177c <_ZNK9SmartFuse8getStateEv>
 800078a:	4603      	mov	r3, r0
 800078c:	461c      	mov	r4, r3
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	6979      	ldr	r1, [r7, #20]
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fd15 	bl	80021c4 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 800079a:	4603      	mov	r3, r0
 800079c:	4622      	mov	r2, r4
 800079e:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < num_of_sf; i++)
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	3301      	adds	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	e7e4      	b.n	8000772 <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0xc>
	}

	return x;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	2300      	movs	r3, #0
 80007ae:	7c3a      	ldrb	r2, [r7, #16]
 80007b0:	f362 0307 	bfi	r3, r2, #0, #8
 80007b4:	7c7a      	ldrb	r2, [r7, #17]
 80007b6:	f362 230f 	bfi	r3, r2, #8, #8
 80007ba:	7cba      	ldrb	r2, [r7, #18]
 80007bc:	f362 4317 	bfi	r3, r2, #16, #8
 80007c0:	7cfa      	ldrb	r2, [r7, #19]
 80007c2:	f362 631f 	bfi	r3, r2, #24, #8
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	371c      	adds	r7, #28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd90      	pop	{r4, r7, pc}

080007ce <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>:

template <uint32_t num_of_sf>
std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsStates()
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	6039      	str	r1, [r7, #0]
{
	std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d81b      	bhi.n	800081a <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0x4c>
	{
		x[i] = this->smart_fuses[i].getChannelsStates();
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	6979      	ldr	r1, [r7, #20]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fcfb 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 ffe1 	bl	80017bc <_ZN9SmartFuse17getChannelsStatesEv>
 80007fa:	6979      	ldr	r1, [r7, #20]
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f001 fd02 	bl	8002206 <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	6010      	str	r0, [r2, #0]
 800080e:	889b      	ldrh	r3, [r3, #4]
 8000810:	8093      	strh	r3, [r2, #4]
	for(size_t i = 0; i < num_of_sf; i++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e7e0      	b.n	80007dc <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0xe>
	}

	return x;
 800081a:	bf00      	nop
}
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>:

template <uint32_t num_of_sf>
std::array < std::array < float, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsCurrents()
 8000824:	b5b0      	push	{r4, r5, r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
{
	std::array < std::array < float, number_of_channels_per_fuse >, num_of_sf > x;
	for(size_t i = 0; i < num_of_sf; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	2b03      	cmp	r3, #3
 8000836:	d81d      	bhi.n	8000874 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0x50>
	{
		x[i] = this->smart_fuses[i].getChannelsCurrents();
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800083c:	4618      	mov	r0, r3
 800083e:	f001 fcd0 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8000842:	4602      	mov	r2, r0
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fffb 	bl	8001846 <_ZN9SmartFuse19getChannelsCurrentsEv>
 8000850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f001 fce6 	bl	8002224 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 8000858:	4603      	mov	r3, r0
 800085a:	461d      	mov	r5, r3
 800085c:	f107 040c 	add.w	r4, r7, #12
 8000860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000864:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000868:	e885 0003 	stmia.w	r5, {r0, r1}
	for(size_t i = 0; i < num_of_sf; i++)
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	3301      	adds	r3, #1
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
 8000872:	e7de      	b.n	8000832 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0xe>
	}

	return x;
 8000874:	bf00      	nop
}
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bdb0      	pop	{r4, r5, r7, pc}

0800087e <_ZNK3etl7ibitset5countEv>:
    }

    //*************************************************************************
    /// Count the number of bits set.
    //*************************************************************************
    size_t count() const
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
    {
      size_t n = 0UL;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]

      for (size_t i = 0UL; i < SIZE; ++i)
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	429a      	cmp	r2, r3
 8000896:	d210      	bcs.n	80008ba <_ZNK3etl7ibitset5countEv+0x3c>
      {
        n += etl::count_bits(pdata[i]);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	68da      	ldr	r2, [r3, #12]
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4413      	add	r3, r2
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 face 	bl	8001e44 <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
      for (size_t i = 0UL; i < SIZE; ++i)
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	e7e9      	b.n	800088e <_ZNK3etl7ibitset5countEv+0x10>
      }

      return n;
 80008ba:	68fb      	ldr	r3, [r7, #12]
    }
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN3etl7ibitset5resetEv>:
    }

    //*************************************************************************
    /// Resets the bitset.
    //*************************************************************************
    ibitset& reset()
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    {
      for (size_t i = 0UL; i < SIZE; ++i)
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d209      	bcs.n	80008ee <_ZN3etl7ibitset5resetEv+0x2a>
      {
        pdata[i] = ALL_CLEAR;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68da      	ldr	r2, [r3, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
      for (size_t i = 0UL; i < SIZE; ++i)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	e7f0      	b.n	80008d0 <_ZN3etl7ibitset5resetEv+0xc>
      }

      return *this;
 80008ee:	687b      	ldr	r3, [r7, #4]
    }
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <_ZN3etl7ibitset10initialiseEy>:
  protected:

    //*************************************************************************
    /// Initialise from an unsigned long long.
    //*************************************************************************
    ibitset& initialise(unsigned long long value)
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	e9c7 2300 	strd	r2, r3, [r7]
    {
      reset();
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f7ff ffdb 	bl	80008c4 <_ZN3etl7ibitset5resetEv>

      const size_t SHIFT = (integral_limits<unsigned long long>::bits <= (int)BITS_PER_ELEMENT) ? 0 : BITS_PER_ELEMENT;
 800090e:	2308      	movs	r3, #8
 8000910:	613b      	str	r3, [r7, #16]
      {
        pdata[0] = element_t(value);
      }
      else
      {
        size_t i = 0UL;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

        while ((value != 0) && (i < SIZE))
 8000916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800091a:	4313      	orrs	r3, r2
 800091c:	d01a      	beq.n	8000954 <_ZN3etl7ibitset10initialiseEy+0x58>
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	429a      	cmp	r2, r3
 8000926:	d215      	bcs.n	8000954 <_ZN3etl7ibitset10initialiseEy+0x58>
        {
          pdata[i++] = value & ALL_SET;
 8000928:	7838      	ldrb	r0, [r7, #0]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	68da      	ldr	r2, [r3, #12]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	1c59      	adds	r1, r3, #1
 8000932:	6179      	str	r1, [r7, #20]
 8000934:	4413      	add	r3, r2
 8000936:	4602      	mov	r2, r0
 8000938:	701a      	strb	r2, [r3, #0]
          value = value >> SHIFT;
 800093a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800093e:	f04f 0200 	mov.w	r2, #0
 8000942:	f04f 0300 	mov.w	r3, #0
 8000946:	0a02      	lsrs	r2, r0, #8
 8000948:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800094c:	0a0b      	lsrs	r3, r1, #8
 800094e:	e9c7 2300 	strd	r2, r3, [r7]
        while ((value != 0) && (i < SIZE))
 8000952:	e7e0      	b.n	8000916 <_ZN3etl7ibitset10initialiseEy+0x1a>
        }
      }

      pdata[SIZE - 1] &= TOP_MASK;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	3b01      	subs	r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	7819      	ldrb	r1, [r3, #0]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	68d8      	ldr	r0, [r3, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	3b01      	subs	r3, #1
 8000970:	4403      	add	r3, r0
 8000972:	400a      	ands	r2, r1
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	701a      	strb	r2, [r3, #0]

      return *this;
 8000978:	68fb      	ldr	r3, [r7, #12]
    }
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_ZN3etl7ibitsetC1EjjPh>:
    }

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    ibitset(size_t nbits_, size_t size_, element_t* pdata_)
 8000982:	b480      	push	{r7}
 8000984:	b087      	sub	sp, #28
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	603b      	str	r3, [r7, #0]
      : NBITS(nbits_),
        SIZE(size_),
        pdata(pdata_)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	60da      	str	r2, [r3, #12]
    {
      size_t allocated_bits = SIZE * BITS_PER_ELEMENT;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	617b      	str	r3, [r7, #20]
      size_t top_mask_shift = ((BITS_PER_ELEMENT - (allocated_bits - NBITS)) % BITS_PER_ELEMENT);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	613b      	str	r3, [r7, #16]
      TOP_MASK = element_t(top_mask_shift == 0 ? ALL_SET : ~(ALL_SET << top_mask_shift));
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d007      	beq.n	80009ce <_ZN3etl7ibitsetC1EjjPh+0x4c>
 80009be:	22ff      	movs	r2, #255	; 0xff
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	e000      	b.n	80009d0 <_ZN3etl7ibitsetC1EjjPh+0x4e>
 80009ce:	22ff      	movs	r2, #255	; 0xff
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	701a      	strb	r2, [r3, #0]
    }
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4618      	mov	r0, r3
 80009d8:	371c      	adds	r7, #28
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_ZN3etl7ibitsetD1Ev>:
    virtual ~ibitset()
    {
    }
#else
  protected:
    ~ibitset()
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
    {
    }
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_ZNSt5arrayIhLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f805 	bl	8000a16 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	4413      	add	r3, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_ZN3etl6bitsetILj8EED1Ev>:
  /// Does not use std::string.
  ///\tparam MAXN The number of bits.
  ///\ingroup bitset
  //*************************************************************************
  template <const size_t MAXN>
  class bitset : public etl::ibitset
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffd0 	bl	80009e2 <_ZN3etl7ibitsetD1Ev>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>:
    struct array
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00a      	beq.n	8000a70 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	429c      	cmp	r4, r3
 8000a64:	d004      	beq.n	8000a70 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 8000a66:	3c14      	subs	r4, #20
 8000a68:	4620      	mov	r0, r4
 8000a6a:	f7ff ffe2 	bl	8000a32 <_ZN3etl6bitsetILj8EED1Ev>
 8000a6e:	e7f7      	b.n	8000a60 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x14>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd90      	pop	{r4, r7, pc}

08000a7a <_ZL11checkParitySt5arrayIhLj3EE>:
{
 8000a7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a7e:	b097      	sub	sp, #92	; 0x5c
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	size_t buff = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	657b      	str	r3, [r7, #84]	; 0x54
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000a88:	f107 0408 	add.w	r4, r7, #8
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffb1 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000a96:	4603      	mov	r3, r0
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	461d      	mov	r5, r3
 8000aa0:	4616      	mov	r6, r2
 8000aa2:	462a      	mov	r2, r5
 8000aa4:	4633      	mov	r3, r6
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f001 f9f3 	bl	8001e92 <_ZN3etl6bitsetILj8EEC1Ey>
 8000aac:	3414      	adds	r4, #20
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ffa0 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2200      	movs	r2, #0
 8000ac0:	469a      	mov	sl, r3
 8000ac2:	4693      	mov	fp, r2
 8000ac4:	4652      	mov	r2, sl
 8000ac6:	465b      	mov	r3, fp
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f001 f9e2 	bl	8001e92 <_ZN3etl6bitsetILj8EEC1Ey>
 8000ace:	3414      	adds	r4, #20
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff8f 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000ada:	4603      	mov	r3, r0
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4698      	mov	r8, r3
 8000ae4:	4691      	mov	r9, r2
 8000ae6:	4642      	mov	r2, r8
 8000ae8:	464b      	mov	r3, r9
 8000aea:	4620      	mov	r0, r4
 8000aec:	f001 f9d1 	bl	8001e92 <_ZN3etl6bitsetILj8EEC1Ey>
	for (auto &bit : bits) buff += bit.count();
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000af6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000af8:	f001 f9e3 	bl	8001ec2 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>
 8000afc:	6538      	str	r0, [r7, #80]	; 0x50
 8000afe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000b00:	f001 f9eb 	bl	8001eda <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>
 8000b04:	64b8      	str	r0, [r7, #72]	; 0x48
 8000b06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d00d      	beq.n	8000b2a <_ZL11checkParitySt5arrayIhLj3EE+0xb0>
 8000b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b10:	647b      	str	r3, [r7, #68]	; 0x44
 8000b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff feb2 	bl	800087e <_ZNK3etl7ibitset5countEv>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b1e:	4413      	add	r3, r2
 8000b20:	657b      	str	r3, [r7, #84]	; 0x54
 8000b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b24:	3314      	adds	r3, #20
 8000b26:	653b      	str	r3, [r7, #80]	; 0x50
 8000b28:	e7ed      	b.n	8000b06 <_ZL11checkParitySt5arrayIhLj3EE+0x8c>
	return (buff % 2 == 0);
 8000b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf0c      	ite	eq
 8000b34:	2301      	moveq	r3, #1
 8000b36:	2300      	movne	r3, #0
 8000b38:	b2dc      	uxtb	r4, r3
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff84 	bl	8000a4c <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>
	return (buff % 2 == 0);
 8000b44:	4623      	mov	r3, r4
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	375c      	adds	r7, #92	; 0x5c
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b50 <_ZL18calculateParityBitRSt5arrayIhLj3EE>:
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	data[2] &= ~(1 << 0);
 8000b58:	2102      	movs	r1, #2
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff4c 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000b60:	4603      	mov	r3, r0
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	f022 0201 	bic.w	r2, r2, #1
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	701a      	strb	r2, [r3, #0]
	if (checkParity(data)) data[2] |= (1 << 0);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	7859      	ldrb	r1, [r3, #1]
 8000b72:	0209      	lsls	r1, r1, #8
 8000b74:	430a      	orrs	r2, r1
 8000b76:	789b      	ldrb	r3, [r3, #2]
 8000b78:	041b      	lsls	r3, r3, #16
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f362 0317 	bfi	r3, r2, #0, #24
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff79 	bl	8000a7a <_ZL11checkParitySt5arrayIhLj3EE>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d009      	beq.n	8000ba2 <_ZL18calculateParityBitRSt5arrayIhLj3EE+0x52>
 8000b8e:	2102      	movs	r1, #2
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff31 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000b96:	4603      	mov	r3, r0
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	f042 0201 	orr.w	r2, r2, #1
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	701a      	strb	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>:
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
	this->last_gsb = x[0];
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff1d 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	781a      	ldrb	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	709a      	strb	r2, [r3, #2]
	if(x[0] & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff14 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	09db      	lsrs	r3, r3, #7
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x3a>
 8000be0:	2300      	movs	r3, #0
 8000be2:	e07e      	b.n	8000ce2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000001) return SmartFuseState::FailSafe;
 8000be4:	463b      	mov	r3, r7
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff05 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x5e>
 8000c04:	2307      	movs	r3, #7
 8000c06:	e06c      	b.n	8000ce2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000010) return SmartFuseState::OLOFF;
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fef3 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000c12:	4603      	mov	r3, r0
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf14      	ite	ne
 8000c1e:	2301      	movne	r3, #1
 8000c20:	2300      	moveq	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x82>
 8000c28:	2306      	movs	r3, #6
 8000c2a:	e05a      	b.n	8000ce2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000100) return SmartFuseState::LatchOff;
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fee1 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000c36:	4603      	mov	r3, r0
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bf14      	ite	ne
 8000c42:	2301      	movne	r3, #1
 8000c44:	2300      	moveq	r3, #0
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xa6>
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	e048      	b.n	8000ce2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00001000) return SmartFuseState::TempFail;
 8000c50:	463b      	mov	r3, r7
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fecf 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xca>
 8000c70:	2304      	movs	r3, #4
 8000c72:	e036      	b.n	8000ce2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00010000) return SmartFuseState::OTPLVDS;
 8000c74:	463b      	mov	r3, r7
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff febd 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xee>
 8000c94:	2303      	movs	r3, #3
 8000c96:	e024      	b.n	8000ce2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00100000) return SmartFuseState::SPIError;
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff feab 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x112>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e012      	b.n	8000ce2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b01000000) return SmartFuseState::ResetState;
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fe99 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x136>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	return SmartFuseState::NotResponding;
 8000ce0:	2308      	movs	r3, #8
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_ZN9SmartFuse22ChannelSettingsAndDataC1Ev>:
SmartFuse::ChannelSettingsAndData::ChannelSettingsAndData()
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3308      	adds	r3, #8
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 f8fc 	bl	8001ef4 <_ZNSt4pairIffEC1IffLb1EEEv>
	current = 0x0000;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
	state = ChannelState::Ok;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	745a      	strb	r2, [r3, #17]
}
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev>:
 8000d14:	b5b0      	push	{r4, r5, r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2405      	movs	r4, #5
 8000d20:	461d      	mov	r5, r3
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	db05      	blt.n	8000d32 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev+0x1e>
 8000d26:	4628      	mov	r0, r5
 8000d28:	f7ff ffdf 	bl	8000cea <_ZN9SmartFuse22ChannelSettingsAndDataC1Ev>
 8000d2c:	3514      	adds	r5, #20
 8000d2e:	3c01      	subs	r4, #1
 8000d30:	e7f7      	b.n	8000d22 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev+0xe>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bdb0      	pop	{r4, r5, r7, pc}

08000d3c <_ZNSt4pairIffEaSERKS0_>:
      template<typename... _Args1, typename... _Args2>
	_GLIBCXX20_CONSTEXPR
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      _GLIBCXX20_CONSTEXPR pair&
      operator=(typename conditional<
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
		__and_<is_copy_assignable<_T1>,
		       is_copy_assignable<_T2>>::value,
		const pair&, const __nonesuch&>::type __p)
      {
	first = __p.first;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
	second = __p.second;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	605a      	str	r2, [r3, #4]
	return *this;
 8000d56:	687b      	ldr	r3, [r7, #4]
      }
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, std::array < ChannelSettings, number_of_channels_per_fuse > channels_settings) :
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
					 port(port), pin(pin), hspi(hspi), toggle(false)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3308      	adds	r3, #8
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ffc6 	bl	8000d14 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev>
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3388      	adds	r3, #136	; 0x88
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fc03 	bl	80045a8 <_ZN5TimerC1Ev>
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3390      	adds	r3, #144	; 0x90
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 fbfe 	bl	80045a8 <_ZN5TimerC1Ev>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	339c      	adds	r3, #156	; 0x9c
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 f8c3 	bl	8001f3c <_ZN3etl8delegateIFvP9SmartFuseEEC1Ev>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	f200 808f 	bhi.w	8000ee0 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x17c>
		this->channels[i].active = channels_settings[i].active;
 8000dc2:	6979      	ldr	r1, [r7, #20]
 8000dc4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000dc8:	f001 f8d4 	bl	8001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	781c      	ldrb	r4, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3308      	adds	r3, #8
 8000dd4:	6979      	ldr	r1, [r7, #20]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f8bd 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4622      	mov	r2, r4
 8000de0:	701a      	strb	r2, [r3, #0]
		this->channels[i].clamping_currents = channels_settings[i].clamping_currents;
 8000de2:	6979      	ldr	r1, [r7, #20]
 8000de4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000de8:	f001 f8c4 	bl	8001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f103 0408 	add.w	r4, r3, #8
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3308      	adds	r3, #8
 8000df6:	6979      	ldr	r1, [r7, #20]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 f8ac 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	3308      	adds	r3, #8
 8000e02:	4621      	mov	r1, r4
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff99 	bl	8000d3c <_ZNSt4pairIffEaSERKS0_>
		this->channels[i].duty_cycle = channels_settings[i].duty_cycle;
 8000e0a:	6979      	ldr	r1, [r7, #20]
 8000e0c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000e10:	f001 f8b0 	bl	8001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000e14:	4603      	mov	r3, r0
 8000e16:	889b      	ldrh	r3, [r3, #4]
 8000e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	461c      	mov	r4, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3308      	adds	r3, #8
 8000e24:	6979      	ldr	r1, [r7, #20]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 f895 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4622      	mov	r2, r4
 8000e30:	805a      	strh	r2, [r3, #2]
		this->channels[i].latch_off_time_out = channels_settings[i].latch_off_time_out;
 8000e32:	6979      	ldr	r1, [r7, #20]
 8000e34:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000e38:	f001 f89c 	bl	8001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	785c      	ldrb	r4, [r3, #1]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3308      	adds	r3, #8
 8000e44:	6979      	ldr	r1, [r7, #20]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 f885 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4622      	mov	r2, r4
 8000e50:	705a      	strb	r2, [r3, #1]
		this->channels[i].sampling_mode = channels_settings[i].sampling_mode;
 8000e52:	6979      	ldr	r1, [r7, #20]
 8000e54:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000e58:	f001 f88c 	bl	8001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	789c      	ldrb	r4, [r3, #2]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3308      	adds	r3, #8
 8000e64:	6979      	ldr	r1, [r7, #20]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 f875 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4622      	mov	r2, r4
 8000e70:	741a      	strb	r2, [r3, #16]
		if(this->channels[i].duty_cycle > 0x3ff) this->channels[i].duty_cycle = 0x3ff;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3308      	adds	r3, #8
 8000e76:	6979      	ldr	r1, [r7, #20]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 f86c 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	885b      	ldrh	r3, [r3, #2]
 8000e82:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000e86:	4293      	cmp	r3, r2
 8000e88:	bf8c      	ite	hi
 8000e8a:	2301      	movhi	r3, #1
 8000e8c:	2300      	movls	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d009      	beq.n	8000ea8 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x144>
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3308      	adds	r3, #8
 8000e98:	6979      	ldr	r1, [r7, #20]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 f85b 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ea6:	805a      	strh	r2, [r3, #2]
		if(this->channels[i].latch_off_time_out > 0xf) this->channels[i].latch_off_time_out = 0xf;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3308      	adds	r3, #8
 8000eac:	6979      	ldr	r1, [r7, #20]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 f851 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	bf8c      	ite	hi
 8000ebc:	2301      	movhi	r3, #1
 8000ebe:	2300      	movls	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d008      	beq.n	8000ed8 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x174>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3308      	adds	r3, #8
 8000eca:	6979      	ldr	r1, [r7, #20]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 f842 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	705a      	strb	r2, [r3, #1]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	e76c      	b.n	8000dba <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x56>
	this->watch_dog.setTimeOut(31);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3388      	adds	r3, #136	; 0x88
 8000ee4:	211f      	movs	r1, #31
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 fb81 	bl	80045ee <_ZN5Timer10setTimeOutEm>
	slaveDeselect();
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f8f0 	bl	80010d2 <_ZN9SmartFuse13slaveDeselectEv>
}
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}

08000efc <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, std::array < ChannelSettings, number_of_channels_per_fuse > channels_settings, const uint32_t interval, etl::delegate<void(SmartFuse*)> action) :
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
					 port(port), pin(pin), hspi(hspi), toggle(false), action(action)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3308      	adds	r3, #8
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fefa 	bl	8000d14 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3388      	adds	r3, #136	; 0x88
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fb37 	bl	80045a8 <_ZN5TimerC1Ev>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3390      	adds	r3, #144	; 0x90
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fb32 	bl	80045a8 <_ZN5TimerC1Ev>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	339c      	adds	r3, #156	; 0x9c
 8000f48:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f50:	e883 0003 	stmia.w	r3, {r0, r1}
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	f200 808f 	bhi.w	800107e <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE+0x182>
		this->channels[i].active = channels_settings[i].active;
 8000f60:	6979      	ldr	r1, [r7, #20]
 8000f62:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f66:	f001 f805 	bl	8001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	781c      	ldrb	r4, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3308      	adds	r3, #8
 8000f72:	6979      	ldr	r1, [r7, #20]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 ffee 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4622      	mov	r2, r4
 8000f7e:	701a      	strb	r2, [r3, #0]
		this->channels[i].clamping_currents = channels_settings[i].clamping_currents;
 8000f80:	6979      	ldr	r1, [r7, #20]
 8000f82:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f86:	f000 fff5 	bl	8001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f103 0408 	add.w	r4, r3, #8
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3308      	adds	r3, #8
 8000f94:	6979      	ldr	r1, [r7, #20]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 ffdd 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	3308      	adds	r3, #8
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff feca 	bl	8000d3c <_ZNSt4pairIffEaSERKS0_>
		this->channels[i].duty_cycle = channels_settings[i].duty_cycle;
 8000fa8:	6979      	ldr	r1, [r7, #20]
 8000faa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000fae:	f000 ffe1 	bl	8001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	889b      	ldrh	r3, [r3, #4]
 8000fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	461c      	mov	r4, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3308      	adds	r3, #8
 8000fc2:	6979      	ldr	r1, [r7, #20]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 ffc6 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4622      	mov	r2, r4
 8000fce:	805a      	strh	r2, [r3, #2]
		this->channels[i].latch_off_time_out = channels_settings[i].latch_off_time_out;
 8000fd0:	6979      	ldr	r1, [r7, #20]
 8000fd2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000fd6:	f000 ffcd 	bl	8001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	785c      	ldrb	r4, [r3, #1]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	6979      	ldr	r1, [r7, #20]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 ffb6 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4622      	mov	r2, r4
 8000fee:	705a      	strb	r2, [r3, #1]
		this->channels[i].sampling_mode = channels_settings[i].sampling_mode;
 8000ff0:	6979      	ldr	r1, [r7, #20]
 8000ff2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000ff6:	f000 ffbd 	bl	8001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	789c      	ldrb	r4, [r3, #2]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3308      	adds	r3, #8
 8001002:	6979      	ldr	r1, [r7, #20]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 ffa6 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800100a:	4603      	mov	r3, r0
 800100c:	4622      	mov	r2, r4
 800100e:	741a      	strb	r2, [r3, #16]
		if(this->channels[i].duty_cycle > 0x3ff) this->channels[i].duty_cycle = 0x3ff;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3308      	adds	r3, #8
 8001014:	6979      	ldr	r1, [r7, #20]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 ff9d 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800101c:	4603      	mov	r3, r0
 800101e:	885b      	ldrh	r3, [r3, #2]
 8001020:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001024:	4293      	cmp	r3, r2
 8001026:	bf8c      	ite	hi
 8001028:	2301      	movhi	r3, #1
 800102a:	2300      	movls	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d009      	beq.n	8001046 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE+0x14a>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3308      	adds	r3, #8
 8001036:	6979      	ldr	r1, [r7, #20]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 ff8c 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800103e:	4603      	mov	r3, r0
 8001040:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001044:	805a      	strh	r2, [r3, #2]
		if(this->channels[i].latch_off_time_out > 0xf) this->channels[i].latch_off_time_out = 0xf;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3308      	adds	r3, #8
 800104a:	6979      	ldr	r1, [r7, #20]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 ff82 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001052:	4603      	mov	r3, r0
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	bf8c      	ite	hi
 800105a:	2301      	movhi	r3, #1
 800105c:	2300      	movls	r3, #0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE+0x17a>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3308      	adds	r3, #8
 8001068:	6979      	ldr	r1, [r7, #20]
 800106a:	4618      	mov	r0, r3
 800106c:	f000 ff73 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001070:	4603      	mov	r3, r0
 8001072:	220f      	movs	r2, #15
 8001074:	705a      	strb	r2, [r3, #1]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e76c      	b.n	8000f58 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE+0x5c>
	this->action_timer.setTimeOut(interval);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3390      	adds	r3, #144	; 0x90
 8001082:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001086:	4618      	mov	r0, r3
 8001088:	f003 fab1 	bl	80045ee <_ZN5Timer10setTimeOutEm>
	this->watch_dog.setTimeOut(31);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3388      	adds	r3, #136	; 0x88
 8001090:	211f      	movs	r1, #31
 8001092:	4618      	mov	r0, r3
 8001094:	f003 faab 	bl	80045ee <_ZN5Timer10setTimeOutEm>
	this->action_defined = true;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2201      	movs	r2, #1
 800109c:	705a      	strb	r2, [r3, #1]
	slaveDeselect();
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 f817 	bl	80010d2 <_ZN9SmartFuse13slaveDeselectEv>
}
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}

080010ae <_ZN9SmartFuse11slaveSelectEv>:
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f005 fc63 	bl	8006990 <HAL_GPIO_WritePin>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_ZN9SmartFuse13slaveDeselectEv>:
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	2201      	movs	r2, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	f005 fc51 	bl	8006990 <HAL_GPIO_WritePin>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZN9SmartFuse4initEv>:
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	this->reset();
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 fbe6 	bl	80018d0 <_ZN9SmartFuse5resetEv>
	this->setUpAllDutyCycles();
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fc51 	bl	80019ac <_ZN9SmartFuse18setUpAllDutyCyclesEv>
	this->setUpAllSamplingModes();
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 fcaa 	bl	8001a64 <_ZN9SmartFuse21setUpAllSamplingModesEv>
	this->setUpAllLatchOffTimers();
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fd1d 	bl	8001b50 <_ZN9SmartFuse22setUpAllLatchOffTimersEv>
	this->setUpAllChannelsStates();
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 fdc4 	bl	8001ca4 <_ZN9SmartFuse22setUpAllChannelsStatesEv>
	return this->state;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <_ZN9SmartFuse6enableEv>:
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	tx_data = { WRITE_RAM(0x14), 1 << 6, 0 };
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <_ZN9SmartFuse6enableEv+0x78>)
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	4611      	mov	r1, r2
 800113e:	8019      	strh	r1, [r3, #0]
 8001140:	3302      	adds	r3, #2
 8001142:	0c12      	lsrs	r2, r2, #16
 8001144:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	461a      	mov	r2, r3
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fe04 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { WRITE_RAM(0x14), 1 << 3, 0 };
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_ZN9SmartFuse6enableEv+0x7c>)
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	461a      	mov	r2, r3
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fdf4 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->watch_dog.restart();
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3388      	adds	r3, #136	; 0x88
 8001178:	4618      	mov	r0, r3
 800117a:	f003 fa46 	bl	800460a <_ZN5Timer7restartEv>
	this->toggle = false;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
	this->state = getGSB(rx_data);
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fd0f 	bl	8000baa <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	return this->state;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	080095d0 	.word	0x080095d0
 80011a8:	080095d4 	.word	0x080095d4

080011ac <_ZN9SmartFuse6handleEv>:
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	ed2d 8b02 	vpush	{d8}
 80011b2:	b093      	sub	sp, #76	; 0x4c
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	bool lock_state = false;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	bool fuse_state_changed = false;
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	std::array < bool, number_of_channels_per_fuse > read_fuses_states { false };
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	809a      	strh	r2, [r3, #4]
	std::array < uint8_t, 3 > tx_data { };
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	2100      	movs	r1, #0
 80011d4:	460a      	mov	r2, r1
 80011d6:	801a      	strh	r2, [r3, #0]
 80011d8:	460a      	mov	r2, r1
 80011da:	709a      	strb	r2, [r3, #2]
	std::array < uint8_t, 3 > rx_data { };
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2100      	movs	r1, #0
 80011e2:	460a      	mov	r2, r1
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	460a      	mov	r2, r1
 80011e8:	709a      	strb	r2, [r3, #2]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++) this->channels[i].state = ChannelState::Ok;
 80011ea:	2300      	movs	r3, #0
 80011ec:	643b      	str	r3, [r7, #64]	; 0x40
 80011ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d80c      	bhi.n	800120e <_ZN9SmartFuse6handleEv+0x62>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3308      	adds	r3, #8
 80011f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 feab 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001200:	4603      	mov	r3, r0
 8001202:	2200      	movs	r2, #0
 8001204:	745a      	strb	r2, [r3, #17]
 8001206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001208:	3301      	adds	r3, #1
 800120a:	643b      	str	r3, [r7, #64]	; 0x40
 800120c:	e7ef      	b.n	80011ee <_ZN9SmartFuse6handleEv+0x42>
	if(watch_dog.getPassedTime() >= 31)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3388      	adds	r3, #136	; 0x88
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fa2c 	bl	8004670 <_ZN5Timer13getPassedTimeEv>
 8001218:	4603      	mov	r3, r0
 800121a:	2b1e      	cmp	r3, #30
 800121c:	bf8c      	ite	hi
 800121e:	2301      	movhi	r3, #1
 8001220:	2300      	movls	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d04d      	beq.n	80012c4 <_ZN9SmartFuse6handleEv+0x118>
		this->toggle = !this->toggle;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f083 0301 	eor.w	r3, r3, #1
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	701a      	strb	r2, [r3, #0]
		tx_data[0] = READ_RAM(0x13);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fbdb 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001242:	4603      	mov	r3, r0
 8001244:	2253      	movs	r2, #83	; 0x53
 8001246:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	461a      	mov	r2, r3
 800124e:	6939      	ldr	r1, [r7, #16]
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fd83 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		rx_data[2] &= ~(1 << 1);
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2102      	movs	r1, #2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fbcb 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001262:	4603      	mov	r3, r0
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	f022 0202 	bic.w	r2, r2, #2
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]
		tx_data = { WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1) };
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2101      	movs	r1, #1
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fbbf 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 800127a:	4603      	mov	r3, r0
 800127c:	781c      	ldrb	r4, [r3, #0]
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2102      	movs	r1, #2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fbb7 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 800128a:	4603      	mov	r3, r0
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	b251      	sxtb	r1, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	0052      	lsls	r2, r2, #1
 8001296:	b252      	sxtb	r2, r2
 8001298:	430a      	orrs	r2, r1
 800129a:	b252      	sxtb	r2, r2
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2213      	movs	r2, #19
 80012a4:	743a      	strb	r2, [r7, #16]
 80012a6:	4622      	mov	r2, r4
 80012a8:	747a      	strb	r2, [r7, #17]
 80012aa:	74bb      	strb	r3, [r7, #18]
		this->transmitReceiveData(tx_data, rx_data);
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	461a      	mov	r2, r3
 80012b2:	6939      	ldr	r1, [r7, #16]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fd51 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3388      	adds	r3, #136	; 0x88
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 f9a3 	bl	800460a <_ZN5Timer7restartEv>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d863      	bhi.n	8001396 <_ZN9SmartFuse6handleEv+0x1ea>
		float K  = (i == 0 || i == 5 ? 112.f : 200.f);
 80012ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <_ZN9SmartFuse6handleEv+0x12e>
 80012d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d101      	bne.n	80012de <_ZN9SmartFuse6handleEv+0x132>
 80012da:	4b93      	ldr	r3, [pc, #588]	; (8001528 <_ZN9SmartFuse6handleEv+0x37c>)
 80012dc:	e000      	b.n	80012e0 <_ZN9SmartFuse6handleEv+0x134>
 80012de:	4b93      	ldr	r3, [pc, #588]	; (800152c <_ZN9SmartFuse6handleEv+0x380>)
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
		tx_data[0] = READ_RAM(0x28 + i);
 80012e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	3328      	adds	r3, #40	; 0x28
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ee:	b2dc      	uxtb	r4, r3
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fb7e 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4622      	mov	r2, r4
 8001300:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	461a      	mov	r2, r3
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fd26 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->channels[i].current = float(uint16_t(rx_data[1] & 0b00111111) << 4 | uint16_t(rx_data[2]) >> 4) / K;
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2101      	movs	r1, #1
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fb6e 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 800131c:	4603      	mov	r3, r0
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	f403 747c 	and.w	r4, r3, #1008	; 0x3f0
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2102      	movs	r1, #2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fb63 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001332:	4603      	mov	r3, r0
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4323      	orrs	r3, r4
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001344:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001348:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3308      	adds	r3, #8
 8001350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fdff 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001358:	4603      	mov	r3, r0
 800135a:	ed83 8a01 	vstr	s16, [r3, #4]
		read_fuses_states[i] = bool(rx_data[2] & (1 << 2));
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2102      	movs	r1, #2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fb47 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 800136a:	4603      	mov	r3, r0
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2dc      	uxtb	r4, r3
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fe05 	bl	8001f92 <_ZNSt5arrayIbLj6EEixEj>
 8001388:	4603      	mov	r3, r0
 800138a:	4622      	mov	r2, r4
 800138c:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 800138e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001390:	3301      	adds	r3, #1
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001394:	e798      	b.n	80012c8 <_ZN9SmartFuse6handleEv+0x11c>
	for(auto& channel : this->channels)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3308      	adds	r3, #8
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
 800139c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800139e:	f000 fe07 	bl	8001fb0 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE5beginEv>
 80013a2:	63b8      	str	r0, [r7, #56]	; 0x38
 80013a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a6:	f000 fe0f 	bl	8001fc8 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE3endEv>
 80013aa:	6238      	str	r0, [r7, #32]
 80013ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d03b      	beq.n	800142c <_ZN9SmartFuse6handleEv+0x280>
 80013b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b6:	61fb      	str	r3, [r7, #28]
		if (channel.current < channel.clamping_currents.first)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80013c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	d50f      	bpl.n	80013ee <_ZN9SmartFuse6handleEv+0x242>
			channel.active = false;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 80013d4:	2301      	movs	r3, #1
 80013d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			fuse_state_changed = true;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			this->state = SmartFuseState::OTPLVDS;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2203      	movs	r2, #3
 80013e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			channel.state = ChannelState::UnderCurrent;
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2201      	movs	r2, #1
 80013ec:	745a      	strb	r2, [r3, #17]
		if (channel.current > channel.clamping_currents.second)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	dd0f      	ble.n	8001424 <_ZN9SmartFuse6handleEv+0x278>
			channel.active = false;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			fuse_state_changed = true;
 8001410:	2301      	movs	r3, #1
 8001412:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			this->state = SmartFuseState::OTPLVDS;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2203      	movs	r2, #3
 800141a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			channel.state = ChannelState::OverCurrent;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2202      	movs	r2, #2
 8001422:	745a      	strb	r2, [r3, #17]
	for(auto& channel : this->channels)
 8001424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001426:	3314      	adds	r3, #20
 8001428:	63bb      	str	r3, [r7, #56]	; 0x38
 800142a:	e7bf      	b.n	80013ac <_ZN9SmartFuse6handleEv+0x200>
	if(fuse_state_changed)
 800142c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001430:	2b00      	cmp	r3, #0
 8001432:	d049      	beq.n	80014c8 <_ZN9SmartFuse6handleEv+0x31c>
		tx_data[0] = WRITE_RAM(0x13);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fadc 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001440:	4603      	mov	r3, r0
 8001442:	2213      	movs	r2, #19
 8001444:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0x00;
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	2101      	movs	r1, #1
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fad3 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001452:	4603      	mov	r3, r0
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 8001458:	2300      	movs	r3, #0
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
 800145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145e:	2b05      	cmp	r3, #5
 8001460:	d81e      	bhi.n	80014a0 <_ZN9SmartFuse6handleEv+0x2f4>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3308      	adds	r3, #8
 8001466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fd73 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001470:	4603      	mov	r3, r0
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001478:	fa02 f403 	lsl.w	r4, r2, r3
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2101      	movs	r1, #1
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fab8 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001488:	4603      	mov	r3, r0
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	b251      	sxtb	r1, r2
 800148e:	b262      	sxtb	r2, r4
 8001490:	430a      	orrs	r2, r1
 8001492:	b252      	sxtb	r2, r2
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149a:	3301      	adds	r3, #1
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
 800149e:	e7dd      	b.n	800145c <_ZN9SmartFuse6handleEv+0x2b0>
		tx_data[2] = this->toggle << 1;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	b2dc      	uxtb	r4, r3
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	2102      	movs	r1, #2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff faa2 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4622      	mov	r2, r4
 80014b8:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	461a      	mov	r2, r3
 80014c0:	6939      	ldr	r1, [r7, #16]
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fc4a 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
 80014cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d82e      	bhi.n	8001530 <_ZN9SmartFuse6handleEv+0x384>
		if(this->channels[i].active != read_fuses_states[i])
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3308      	adds	r3, #8
 80014d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fd3c 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80014de:	4603      	mov	r3, r0
 80014e0:	781c      	ldrb	r4, [r3, #0]
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fd52 	bl	8001f92 <_ZNSt5arrayIbLj6EEixEj>
 80014ee:	4603      	mov	r3, r0
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	429c      	cmp	r4, r3
 80014f4:	bf14      	ite	ne
 80014f6:	2301      	movne	r3, #1
 80014f8:	2300      	moveq	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00f      	beq.n	8001520 <_ZN9SmartFuse6handleEv+0x374>
			this->channels[i].state = ChannelState::STKFLTR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3308      	adds	r3, #8
 8001504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fd25 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800150c:	4603      	mov	r3, r0
 800150e:	2204      	movs	r2, #4
 8001510:	745a      	strb	r2, [r3, #17]
			lock_state = true;
 8001512:	2301      	movs	r3, #1
 8001514:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			this->state = SmartFuseState::OLOFF;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2206      	movs	r2, #6
 800151c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001522:	3301      	adds	r3, #1
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
 8001526:	e7d1      	b.n	80014cc <_ZN9SmartFuse6handleEv+0x320>
 8001528:	42e00000 	.word	0x42e00000
 800152c:	43480000 	.word	0x43480000
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	2b05      	cmp	r3, #5
 8001538:	f200 8083 	bhi.w	8001642 <_ZN9SmartFuse6handleEv+0x496>
		tx_data[0] = READ_AND_CLEAR(0x20 + i);
 800153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153e:	b2db      	uxtb	r3, r3
 8001540:	3320      	adds	r3, #32
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001548:	b2dc      	uxtb	r4, r3
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fa51 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001556:	4603      	mov	r3, r0
 8001558:	4622      	mov	r2, r4
 800155a:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	461a      	mov	r2, r3
 8001562:	6939      	ldr	r1, [r7, #16]
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fbf9 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		if(rx_data[1] & (1 << 0)) this->channels[i].state = ChannelState::LatchOff;
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2101      	movs	r1, #1
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fa41 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001576:	4603      	mov	r3, r0
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <_ZN9SmartFuse6handleEv+0x3f2>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3308      	adds	r3, #8
 8001590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fcdf 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001598:	4603      	mov	r3, r0
 800159a:	2203      	movs	r2, #3
 800159c:	745a      	strb	r2, [r3, #17]
		if(rx_data[1] & (1 << 2)) this->channels[i].state = ChannelState::STKFLTR;
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	2101      	movs	r1, #1
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fa27 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 80015aa:	4603      	mov	r3, r0
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf14      	ite	ne
 80015b6:	2301      	movne	r3, #1
 80015b8:	2300      	moveq	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <_ZN9SmartFuse6handleEv+0x426>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3308      	adds	r3, #8
 80015c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fcc5 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2204      	movs	r2, #4
 80015d0:	745a      	strb	r2, [r3, #17]
		if(rx_data[1] & (1 << 3)) this->channels[i].state = ChannelState::VDSFS;
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	2101      	movs	r1, #1
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fa0d 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 80015de:	4603      	mov	r3, r0
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <_ZN9SmartFuse6handleEv+0x45a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3308      	adds	r3, #8
 80015f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fcab 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001600:	4603      	mov	r3, r0
 8001602:	2205      	movs	r2, #5
 8001604:	745a      	strb	r2, [r3, #17]
		if(rx_data[1] & (1 << 4)) this->channels[i].state = ChannelState::CHFBSR;
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2101      	movs	r1, #1
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f9f3 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001612:	4603      	mov	r3, r0
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	bf14      	ite	ne
 800161e:	2301      	movne	r3, #1
 8001620:	2300      	moveq	r3, #0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <_ZN9SmartFuse6handleEv+0x48e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3308      	adds	r3, #8
 800162c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fc91 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001634:	4603      	mov	r3, r0
 8001636:	2206      	movs	r2, #6
 8001638:	745a      	strb	r2, [r3, #17]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	3301      	adds	r3, #1
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001640:	e778      	b.n	8001534 <_ZN9SmartFuse6handleEv+0x388>
	if(this->action_defined)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	785b      	ldrb	r3, [r3, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00d      	beq.n	8001666 <_ZN9SmartFuse6handleEv+0x4ba>
		if(this->action_timer.checkIfTimedOutAndReset())
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3390      	adds	r3, #144	; 0x90
 800164e:	4618      	mov	r0, r3
 8001650:	f002 ffe8 	bl	8004624 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <_ZN9SmartFuse6handleEv+0x4ba>
			this->action(this);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	339c      	adds	r3, #156	; 0x9c
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fccf 	bl	8002004 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_>
	if (!lock_state) this->state = getGSB(rx_data);
 8001666:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <_ZN9SmartFuse6handleEv+0x4da>
 8001674:	68f9      	ldr	r1, [r7, #12]
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fa97 	bl	8000baa <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	return this->state;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
}
 800168c:	4618      	mov	r0, r3
 800168e:	374c      	adds	r7, #76	; 0x4c
 8001690:	46bd      	mov	sp, r7
 8001692:	ecbd 8b02 	vpop	{d8}
 8001696:	bd90      	pop	{r4, r7, pc}

08001698 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>:
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
 80016a4:	4613      	mov	r3, r2
 80016a6:	803b      	strh	r3, [r7, #0]
	std::array < uint8_t, 3 >  tx_data { 0, 0, 0 };
 80016a8:	4a33      	ldr	r2, [pc, #204]	; (8001778 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0xe0>)
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	4611      	mov	r1, r2
 80016b2:	8019      	strh	r1, [r3, #0]
 80016b4:	3302      	adds	r3, #2
 80016b6:	0c12      	lsrs	r2, r2, #16
 80016b8:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 >  rx_data { 0, 0, 0 };
 80016ba:	4a2f      	ldr	r2, [pc, #188]	; (8001778 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0xe0>)
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	4611      	mov	r1, r2
 80016c4:	8019      	strh	r1, [r3, #0]
 80016c6:	3302      	adds	r3, #2
 80016c8:	0c12      	lsrs	r2, r2, #16
 80016ca:	701a      	strb	r2, [r3, #0]
	if(duty_cykle > 1023) duty_cykle = 1023;
 80016cc:	883b      	ldrh	r3, [r7, #0]
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d302      	bcc.n	80016da <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0x42>
 80016d4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80016d8:	803b      	strh	r3, [r7, #0]
	this->channels[size_t(channel)].duty_cycle = duty_cykle;
 80016da:	883c      	ldrh	r4, [r7, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3308      	adds	r3, #8
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fc36 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4622      	mov	r2, r4
 80016ee:	805a      	strh	r2, [r3, #2]
	tx_data[0] = WRITE_RAM(0x00 + size_t(channel));
 80016f0:	78fc      	ldrb	r4, [r7, #3]
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f97d 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 80016fe:	4603      	mov	r3, r0
 8001700:	4622      	mov	r2, r4
 8001702:	701a      	strb	r2, [r3, #0]
	tx_data[1] = uint8_t(duty_cykle >> 4);
 8001704:	883b      	ldrh	r3, [r7, #0]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	b29b      	uxth	r3, r3
 800170a:	b2dc      	uxtb	r4, r3
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2101      	movs	r1, #1
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f970 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001718:	4603      	mov	r3, r0
 800171a:	4622      	mov	r2, r4
 800171c:	701a      	strb	r2, [r3, #0]
	tx_data[2] = uint8_t(duty_cykle << 4) | this->toggle << 1;
 800171e:	883b      	ldrh	r3, [r7, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b25a      	sxtb	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	b25b      	sxtb	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b25b      	sxtb	r3, r3
 8001734:	b2dc      	uxtb	r4, r3
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	2102      	movs	r1, #2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff f95b 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001742:	4603      	mov	r3, r0
 8001744:	4622      	mov	r2, r4
 8001746:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	461a      	mov	r2, r3
 800174e:	68f9      	ldr	r1, [r7, #12]
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fb03 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fa26 	bl	8000baa <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	return this->state;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	bf00      	nop
 8001778:	080095d8 	.word	0x080095d8

0800177c <_ZNK9SmartFuse8getStateEv>:
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	return this->state;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_ZN9SmartFuse15getChannelStateE7Channel>:
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	70fb      	strb	r3, [r7, #3]
	return this->channels[size_t(channel)].state;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3308      	adds	r3, #8
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fbd3 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80017b0:	4603      	mov	r3, r0
 80017b2:	7c5b      	ldrb	r3, [r3, #17]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_ZN9SmartFuse17getChannelsStatesEv>:
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	3308      	adds	r3, #8
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fbc2 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80017d2:	4603      	mov	r3, r0
 80017d4:	7c5a      	ldrb	r2, [r3, #17]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	701a      	strb	r2, [r3, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3308      	adds	r3, #8
 80017de:	2101      	movs	r1, #1
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fbb8 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80017e6:	4603      	mov	r3, r0
 80017e8:	7c5a      	ldrb	r2, [r3, #17]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	705a      	strb	r2, [r3, #1]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	3308      	adds	r3, #8
 80017f2:	2102      	movs	r1, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fbae 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80017fa:	4603      	mov	r3, r0
 80017fc:	7c5a      	ldrb	r2, [r3, #17]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	709a      	strb	r2, [r3, #2]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	3308      	adds	r3, #8
 8001806:	2103      	movs	r1, #3
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fba4 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800180e:	4603      	mov	r3, r0
 8001810:	7c5a      	ldrb	r2, [r3, #17]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	70da      	strb	r2, [r3, #3]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3308      	adds	r3, #8
 800181a:	2104      	movs	r1, #4
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fb9a 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001822:	4603      	mov	r3, r0
 8001824:	7c5a      	ldrb	r2, [r3, #17]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	711a      	strb	r2, [r3, #4]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	3308      	adds	r3, #8
 800182e:	2105      	movs	r1, #5
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fb90 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001836:	4603      	mov	r3, r0
 8001838:	7c5a      	ldrb	r2, [r3, #17]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	715a      	strb	r2, [r3, #5]
}
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_ZN9SmartFuse19getChannelsCurrentsEv>:
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	3308      	adds	r3, #8
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fb7d 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800185c:	4603      	mov	r3, r0
 800185e:	685a      	ldr	r2, [r3, #4]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	601a      	str	r2, [r3, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	3308      	adds	r3, #8
 8001868:	2101      	movs	r1, #1
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fb73 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001870:	4603      	mov	r3, r0
 8001872:	685a      	ldr	r2, [r3, #4]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	3308      	adds	r3, #8
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fb69 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001884:	4603      	mov	r3, r0
 8001886:	685a      	ldr	r2, [r3, #4]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	3308      	adds	r3, #8
 8001890:	2103      	movs	r1, #3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fb5f 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001898:	4603      	mov	r3, r0
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	3308      	adds	r3, #8
 80018a4:	2104      	movs	r1, #4
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fb55 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80018ac:	4603      	mov	r3, r0
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	3308      	adds	r3, #8
 80018b8:	2105      	movs	r1, #5
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fb4b 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80018c0:	4603      	mov	r3, r0
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	615a      	str	r2, [r3, #20]
}
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_ZN9SmartFuse5resetEv>:
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	tx_data = { RESET_SMARTFUSE(), 0, 0 };
 80018d8:	23ff      	movs	r3, #255	; 0xff
 80018da:	743b      	strb	r3, [r7, #16]
 80018dc:	2300      	movs	r3, #0
 80018de:	747b      	strb	r3, [r7, #17]
 80018e0:	2300      	movs	r3, #0
 80018e2:	74bb      	strb	r3, [r7, #18]
	this->transmitReceiveData(tx_data, rx_data);
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	461a      	mov	r2, r3
 80018ea:	6939      	ldr	r1, [r7, #16]
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fa35 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { READ_ROM(0x01), 0, 0 };
 80018f2:	23c1      	movs	r3, #193	; 0xc1
 80018f4:	743b      	strb	r3, [r7, #16]
 80018f6:	2300      	movs	r3, #0
 80018f8:	747b      	strb	r3, [r7, #17]
 80018fa:	2300      	movs	r3, #0
 80018fc:	74bb      	strb	r3, [r7, #18]
	for (size_t i = 0; i < fuse_timeout; i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2b05      	cmp	r3, #5
 8001906:	d845      	bhi.n	8001994 <_ZN9SmartFuse5resetEv+0xc4>
		if(!IF_RESET_STATE(rx_data)) break;
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f872 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001914:	4603      	mov	r3, r0
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d113      	bne.n	8001944 <_ZN9SmartFuse5resetEv+0x74>
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f868 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001928:	4603      	mov	r3, r0
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <_ZN9SmartFuse5resetEv+0x74>
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2102      	movs	r1, #2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f85e 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 800193c:	4603      	mov	r3, r0
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00d      	beq.n	8001960 <_ZN9SmartFuse5resetEv+0x90>
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f854 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001950:	4603      	mov	r3, r0
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <_ZN9SmartFuse5resetEv+0x90>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <_ZN9SmartFuse5resetEv+0x92>
 8001960:	2300      	movs	r3, #0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <_ZN9SmartFuse5resetEv+0xc2>
		else if(i == fuse_timeout - 1)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b05      	cmp	r3, #5
 800196a:	d104      	bne.n	8001976 <_ZN9SmartFuse5resetEv+0xa6>
			this->state = SmartFuseState::NotResponding;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2208      	movs	r2, #8
 8001970:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001974:	e017      	b.n	80019a6 <_ZN9SmartFuse5resetEv+0xd6>
		this->transmitReceiveData(tx_data, rx_data);
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	461a      	mov	r2, r3
 800197c:	6939      	ldr	r1, [r7, #16]
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f9ec 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		HAL_Delay(1);
 8001984:	2001      	movs	r0, #1
 8001986:	f002 ff1f 	bl	80047c8 <HAL_Delay>
	for (size_t i = 0; i < fuse_timeout; i++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e7b7      	b.n	8001902 <_ZN9SmartFuse5resetEv+0x32>
		if(!IF_RESET_STATE(rx_data)) break;
 8001992:	bf00      	nop
	this->state = getGSB(rx_data);
 8001994:	68f9      	ldr	r1, [r7, #12]
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff f907 	bl	8000baa <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_ZN9SmartFuse18setUpAllDutyCyclesEv>:
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < 6; i++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d845      	bhi.n	8001a4a <_ZN9SmartFuse18setUpAllDutyCyclesEv+0x9e>
		tx_data[0] = WRITE_RAM(0x00 + i);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	b2dc      	uxtb	r4, r3
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f815 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4622      	mov	r2, r4
 80019d2:	701a      	strb	r2, [r3, #0]
		tx_data[1] = uint8_t(this->channels[i].duty_cycle >> 4);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3308      	adds	r3, #8
 80019d8:	6979      	ldr	r1, [r7, #20]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fabb 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80019e0:	4603      	mov	r3, r0
 80019e2:	885b      	ldrh	r3, [r3, #2]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	b2dc      	uxtb	r4, r3
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	2101      	movs	r1, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f801 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4622      	mov	r2, r4
 80019fa:	701a      	strb	r2, [r3, #0]
		tx_data[2] = uint8_t(this->channels[i].duty_cycle << 4) | this->toggle << 1;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3308      	adds	r3, #8
 8001a00:	6979      	ldr	r1, [r7, #20]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 faa7 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	885b      	ldrh	r3, [r3, #2]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b25b      	sxtb	r3, r3
 8001a20:	b2dc      	uxtb	r4, r3
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	2102      	movs	r1, #2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe ffe5 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4622      	mov	r2, r4
 8001a32:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6939      	ldr	r1, [r7, #16]
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f98d 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < 6; i++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e7b6      	b.n	80019b8 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0xc>
	this->state = getGSB(rx_data);
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff f8ac 	bl	8000baa <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8001a5c:	bf00      	nop
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd90      	pop	{r4, r7, pc}

08001a64 <_ZN9SmartFuse21setUpAllSamplingModesEv>:
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data = { 0, 0, 0 };
 8001a6c:	4a37      	ldr	r2, [pc, #220]	; (8001b4c <_ZN9SmartFuse21setUpAllSamplingModesEv+0xe8>)
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	4611      	mov	r1, r2
 8001a76:	8019      	strh	r1, [r3, #0]
 8001a78:	3302      	adds	r3, #2
 8001a7a:	0c12      	lsrs	r2, r2, #16
 8001a7c:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d854      	bhi.n	8001b32 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xce>
		tx_data[0] = WRITE_RAM(0x08 + i);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	b2dc      	uxtb	r4, r3
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe ffae 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	701a      	strb	r2, [r3, #0]
		switch (this->channels[i].sampling_mode)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3308      	adds	r3, #8
 8001aa6:	6979      	ldr	r1, [r7, #20]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fa54 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	7c1b      	ldrb	r3, [r3, #16]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d832      	bhi.n	8001b1c <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <_ZN9SmartFuse21setUpAllSamplingModesEv+0x58>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001ae1 	.word	0x08001ae1
 8001ac4:	08001af5 	.word	0x08001af5
 8001ac8:	08001b09 	.word	0x08001b09
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe ff90 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e01d      	b.n	8001b1c <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe ff86 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	e013      	b.n	8001b1c <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe ff7c 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e009      	b.n	8001b1c <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe ff72 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001b14:	4603      	mov	r3, r0
 8001b16:	22c0      	movs	r2, #192	; 0xc0
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	bf00      	nop
		this->transmitReceiveData(tx_data, rx_data);
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	461a      	mov	r2, r3
 8001b22:	6939      	ldr	r1, [r7, #16]
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f919 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e7a7      	b.n	8001a82 <_ZN9SmartFuse21setUpAllSamplingModesEv+0x1e>
	this->state = getGSB(rx_data);
 8001b32:	68f9      	ldr	r1, [r7, #12]
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff f838 	bl	8000baa <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	080095d8 	.word	0x080095d8

08001b50 <_ZN9SmartFuse22setUpAllLatchOffTimersEv>:
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 8001b58:	4a51      	ldr	r2, [pc, #324]	; (8001ca0 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x150>)
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	4611      	mov	r1, r2
 8001b62:	8019      	strh	r1, [r3, #0]
 8001b64:	3302      	adds	r3, #2
 8001b66:	0c12      	lsrs	r2, r2, #16
 8001b68:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 > rx_data { 0, 0, 0 };
 8001b6a:	4a4d      	ldr	r2, [pc, #308]	; (8001ca0 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x150>)
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	4611      	mov	r1, r2
 8001b74:	8019      	strh	r1, [r3, #0]
 8001b76:	3302      	adds	r3, #2
 8001b78:	0c12      	lsrs	r2, r2, #16
 8001b7a:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x10);
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe ff38 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = this->channels[2].latch_off_time_out << 4 |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3308      	adds	r3, #8
 8001b92:	2102      	movs	r1, #2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f9de 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	785b      	ldrb	r3, [r3, #1]
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	b25c      	sxtb	r4, r3
			     this->channels[1].latch_off_time_out;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3308      	adds	r3, #8
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f9d4 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	785b      	ldrb	r3, [r3, #1]
 8001bb2:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels[2].latch_off_time_out << 4 |
 8001bb4:	4323      	orrs	r3, r4
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	b2dc      	uxtb	r4, r3
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe ff19 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4622      	mov	r2, r4
 8001bca:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels[0].latch_off_time_out << 4;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3308      	adds	r3, #8
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f9bf 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	785b      	ldrb	r3, [r3, #1]
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	b2dc      	uxtb	r4, r3
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	2102      	movs	r1, #2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe ff06 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4622      	mov	r2, r4
 8001bf0:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8ae 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data[0] = WRITE_RAM(0x11);
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fef6 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2211      	movs	r2, #17
 8001c10:	701a      	strb	r2, [r3, #0]
	tx_data[1] = this->channels[5].latch_off_time_out << 4 |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3308      	adds	r3, #8
 8001c16:	2105      	movs	r1, #5
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f99c 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	785b      	ldrb	r3, [r3, #1]
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	b25c      	sxtb	r4, r3
	             this->channels[4].latch_off_time_out;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3308      	adds	r3, #8
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f992 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001c32:	4603      	mov	r3, r0
 8001c34:	785b      	ldrb	r3, [r3, #1]
 8001c36:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels[5].latch_off_time_out << 4 |
 8001c38:	4323      	orrs	r3, r4
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	b2dc      	uxtb	r4, r3
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	2101      	movs	r1, #1
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fed7 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4622      	mov	r2, r4
 8001c4e:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels[3].latch_off_time_out << 4;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3308      	adds	r3, #8
 8001c54:	2103      	movs	r1, #3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f97d 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	785b      	ldrb	r3, [r3, #1]
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	b2dc      	uxtb	r4, r3
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	2102      	movs	r1, #2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fec4 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4622      	mov	r2, r4
 8001c74:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f86c 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe ff8f 	bl	8000baa <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	080095d8 	.word	0x080095d8

08001ca4 <_ZN9SmartFuse22setUpAllChannelsStatesEv>:
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	tx_data[0] = WRITE_RAM(0x13);
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fea0 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2213      	movs	r2, #19
 8001cbc:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fe97 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d81e      	bhi.n	8001d18 <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x74>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3308      	adds	r3, #8
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f937 	bl	8001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	fa02 f403 	lsl.w	r4, r2, r3
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fe7c 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001d00:	4603      	mov	r3, r0
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	b251      	sxtb	r1, r2
 8001d06:	b262      	sxtb	r2, r4
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	b252      	sxtb	r2, r2
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e7dd      	b.n	8001cd4 <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x30>
	tx_data[2] = this->toggle << 1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	b2dc      	uxtb	r4, r3
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	2102      	movs	r1, #2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fe66 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4622      	mov	r2, r4
 8001d30:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	461a      	mov	r2, r3
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f80e 	bl	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7fe ff31 	bl	8000baa <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd90      	pop	{r4, r7, pc}
	...

08001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>:
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8001d68:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d72:	2b40      	cmp	r3, #64	; 0x40
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x34>
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d8e:	601a      	str	r2, [r3, #0]
	calculateParityBit(tx_data);
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fedb 	bl	8000b50 <_ZL18calculateParityBitRSt5arrayIhLj3EE>
	this->slaveSelect();
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f7ff f987 	bl	80010ae <_ZN9SmartFuse11slaveSelectEv>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001da0:	2300      	movs	r3, #0
 8001da2:	75fb      	strb	r3, [r7, #23]
 8001da4:	2300      	movs	r3, #0
 8001da6:	75bb      	strb	r3, [r7, #22]
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d902      	bls.n	8001db4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x58>
 8001dae:	7dbb      	ldrb	r3, [r7, #22]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d83e      	bhi.n	8001e32 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xd6>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d104      	bne.n	8001dcc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8001dc2:	7dbb      	ldrb	r3, [r7, #22]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d801      	bhi.n	8001dcc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x72>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00f      	beq.n	8001df2 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x96>
			(*(uint8_t*) &rx_data[rx]) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	330c      	adds	r3, #12
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b2dc      	uxtb	r4, r3
 8001ddc:	7dbb      	ldrb	r3, [r7, #22]
 8001dde:	4619      	mov	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7fe fe09 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4622      	mov	r2, r4
 8001dea:	701a      	strb	r2, [r3, #0]
			rx++;
 8001dec:	7dbb      	ldrb	r3, [r7, #22]
 8001dee:	3301      	adds	r3, #1
 8001df0:	75bb      	strb	r3, [r7, #22]
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d104      	bne.n	8001e0a <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d801      	bhi.n	8001e0a <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xb0>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0cb      	beq.n	8001da8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = tx_data[tx];
 8001e10:	7dfa      	ldrb	r2, [r7, #23]
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fded 	bl	80009f8 <_ZNSt5arrayIhLj3EEixEj>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	330c      	adds	r3, #12
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	701a      	strb	r2, [r3, #0]
			tx++;
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001e30:	e7ba      	b.n	8001da8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
	this->slaveDeselect();
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f7ff f94d 	bl	80010d2 <_ZN9SmartFuse13slaveDeselectEv>
}
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	20000798 	.word	0x20000798

08001e44 <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>:
  ///\ingroup binary
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR14
    typename etl::enable_if<etl::is_integral<T>::value && etl::is_unsigned<T>::value && (etl::integral_limits<T>::bits == 8U), uint_least8_t>::type
    count_bits(T value)
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  {
#if ETL_CPP23_SUPPORTED && ETL_USING_STL
    return std::popcount(value);
#else
    uint32_t count = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]

    count = value - ((value >> 1U) & 0x55U);
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	60fb      	str	r3, [r7, #12]
    count = ((count >> 2U) & 0x33U) + (count & 0x33U);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    count = ((count >> 4U) + count) & 0x0FU;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	091a      	lsrs	r2, r3, #4
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	60fb      	str	r3, [r7, #12]

    return uint_least8_t(count);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	b2db      	uxtb	r3, r3
#endif
  }
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_ZN3etl6bitsetILj8EEC1Ey>:
    }

    //*************************************************************************
    /// Construct from a value.
    //*************************************************************************
    bitset(unsigned long long value)
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	e9c7 2300 	strd	r2, r3, [r7]
      : etl::ibitset(MAXN, ARRAY_SIZE, data)
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3310      	adds	r3, #16
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2108      	movs	r1, #8
 8001ea8:	f7fe fd6b 	bl	8000982 <_ZN3etl7ibitsetC1EjjPh>
    {
      initialise(value);
 8001eac:	68f9      	ldr	r1, [r7, #12]
 8001eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eb2:	4608      	mov	r0, r1
 8001eb4:	f7fe fd22 	bl	80008fc <_ZN3etl7ibitset10initialiseEy>
    }
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>:
      begin() noexcept
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f9b9 	bl	8002242 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>:
      end() noexcept
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f9ad 	bl	8002242 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	333c      	adds	r3, #60	; 0x3c
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_ZNSt4pairIffEC1IffLb1EEEv>:
      _GLIBCXX_CONSTEXPR pair()
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>:
    //*************************************************************************
    /// The internal invocation object.
    //*************************************************************************
    struct invocation_element
    {
      invocation_element() = default;
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_ZN3etl8delegateIFvP9SmartFuseEEC1Ev>:
    ETL_CONSTEXPR14 delegate()
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
    {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ffe7 	bl	8001f1a <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>
    }
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>:
      operator[](size_type __n) noexcept
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6839      	ldr	r1, [r7, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f979 	bl	800225c <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_refERA6_KS1_j>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>:
      operator[](size_type __n) noexcept
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6839      	ldr	r1, [r7, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f97c 	bl	8002280 <_ZNSt14__array_traitsI15ChannelSettingsLj6EE6_S_refERA6_KS0_j>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <_ZNSt5arrayIbLj6EEixEj>:
      operator[](size_type __n) noexcept
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6839      	ldr	r1, [r7, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f97c 	bl	800229e <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE5beginEv>:
      begin() noexcept
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f97e 	bl	80022ba <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE4dataEv>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE3endEv>:
      end() noexcept
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f972 	bl	80022ba <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE4dataEv>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	3378      	adds	r3, #120	; 0x78
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_ZNK3etl8delegateIFvP9SmartFuseEE8is_validEv>:
    ETL_CONSTEXPR14 bool is_valid() const
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
      return invocation.stub != ETL_NULLPTR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
    }
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_>:
    TReturn operator()(TParams... args) const
 8002004:	b5b0      	push	{r4, r5, r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
      ETL_ASSERT(is_valid(), ETL_ERROR(delegate_uninitialised));
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffe7 	bl	8001fe2 <_ZNK3etl8delegateIFvP9SmartFuseEE8is_validEv>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x24>
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x48>)
 800201c:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x4c>)
 800201e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002022:	480c      	ldr	r0, [pc, #48]	; (8002054 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x50>)
 8002024:	f006 fa8e 	bl	8008544 <__assert_func>
      return (*invocation.stub)(invocation.object, etl::forward<TParams>(args)...);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685c      	ldr	r4, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681d      	ldr	r5, [r3, #0]
 8002030:	463b      	mov	r3, r7
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f94e 	bl	80022d4 <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>
 8002038:	4603      	mov	r3, r0
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	4628      	mov	r0, r5
 8002040:	47a0      	blx	r4
 8002042:	bf00      	nop
    }
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bdb0      	pop	{r4, r5, r7, pc}
 800204a:	bf00      	nop
 800204c:	080095dc 	.word	0x080095dc
 8002050:	080095ec 	.word	0x080095ec
 8002054:	08009668 	.word	0x08009668

08002058 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EEEEEvDpOT_>:
    /// Constructs a value at the end of the vector.
    /// If asserts or exceptions are enabled, emits vector_full if the vector is already full.
    ///\param value The value to add.
    //*********************************************************************
    template <typename ... Args>
    void emplace_back(Args && ... args)
 8002058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800205c:	b0b4      	sub	sp, #208	; 0xd0
 800205e:	af18      	add	r7, sp, #96	; 0x60
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	603b      	str	r3, [r7, #0]
    {
#if defined(ETL_CHECK_PUSH_POP)
      ETL_ASSERT(size() != CAPACITY, ETL_ERROR(vector_full));
#endif
      ::new (p_end) T(etl::forward<Args>(args)...);
 8002068:	68b8      	ldr	r0, [r7, #8]
 800206a:	f000 f93e 	bl	80022ea <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 800206e:	4603      	mov	r3, r0
 8002070:	681c      	ldr	r4, [r3, #0]
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f944 	bl	8002300 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 8002078:	4603      	mov	r3, r0
 800207a:	681d      	ldr	r5, [r3, #0]
 800207c:	6838      	ldr	r0, [r7, #0]
 800207e:	f000 f94a 	bl	8002316 <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8002082:	4603      	mov	r3, r0
 8002084:	681e      	ldr	r6, [r3, #0]
 8002086:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800208a:	f000 f94f 	bl	800232c <_ZN3etl7forwardIRSt5arrayI15ChannelSettingsLj6EEEEOT_RNS_16remove_referenceIS5_E4typeE>
 800208e:	4602      	mov	r2, r0
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	4611      	mov	r1, r2
 8002096:	2260      	movs	r2, #96	; 0x60
 8002098:	4618      	mov	r0, r3
 800209a:	f006 fab5 	bl	8008608 <memcpy>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4619      	mov	r1, r3
 80020a4:	20a4      	movs	r0, #164	; 0xa4
 80020a6:	f7fe fa9d 	bl	80005e4 <_ZnwjPv>
 80020aa:	4680      	mov	r8, r0
 80020ac:	4668      	mov	r0, sp
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	2260      	movs	r2, #96	; 0x60
 80020b4:	4619      	mov	r1, r3
 80020b6:	f006 faa7 	bl	8008608 <memcpy>
 80020ba:	4633      	mov	r3, r6
 80020bc:	462a      	mov	r2, r5
 80020be:	4621      	mov	r1, r4
 80020c0:	4640      	mov	r0, r8
 80020c2:	f7fe fe4f 	bl	8000d64 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
      ++p_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	609a      	str	r2, [r3, #8]
      ETL_INCREMENT_DEBUG_COUNT
    }
 80020d2:	bf00      	nop
 80020d4:	3770      	adds	r7, #112	; 0x70
 80020d6:	46bd      	mov	sp, r7
 80020d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080020dc <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EESA_RNS_8delegateIFvPS1_EEEEEEvDpOT_>:
    void emplace_back(Args && ... args)
 80020dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e0:	b0bc      	sub	sp, #240	; 0xf0
 80020e2:	af1c      	add	r7, sp, #112	; 0x70
 80020e4:	6178      	str	r0, [r7, #20]
 80020e6:	6139      	str	r1, [r7, #16]
 80020e8:	60fa      	str	r2, [r7, #12]
 80020ea:	60bb      	str	r3, [r7, #8]
      ::new (p_end) T(etl::forward<Args>(args)...);
 80020ec:	6938      	ldr	r0, [r7, #16]
 80020ee:	f000 f8fc 	bl	80022ea <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 80020f2:	4603      	mov	r3, r0
 80020f4:	681d      	ldr	r5, [r3, #0]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f902 	bl	8002300 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 80020fc:	4603      	mov	r3, r0
 80020fe:	681e      	ldr	r6, [r3, #0]
 8002100:	68b8      	ldr	r0, [r7, #8]
 8002102:	f000 f908 	bl	8002316 <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8002106:	4603      	mov	r3, r0
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002110:	f000 f90c 	bl	800232c <_ZN3etl7forwardIRSt5arrayI15ChannelSettingsLj6EEEEOT_RNS_16remove_referenceIS5_E4typeE>
 8002114:	4602      	mov	r2, r0
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	4611      	mov	r1, r2
 800211c:	2260      	movs	r2, #96	; 0x60
 800211e:	4618      	mov	r0, r3
 8002120:	f006 fa72 	bl	8008608 <memcpy>
 8002124:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002128:	f000 f8ea 	bl	8002300 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 800212c:	4603      	mov	r3, r0
 800212e:	681c      	ldr	r4, [r3, #0]
 8002130:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002134:	f000 f905 	bl	8002342 <_ZN3etl7forwardIRNS_8delegateIFvP9SmartFuseEEEEEOT_RNS_16remove_referenceIS7_E4typeE>
 8002138:	4602      	mov	r2, r0
 800213a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800213e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002142:	e883 0003 	stmia.w	r3, {r0, r1}
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	4619      	mov	r1, r3
 800214c:	20a4      	movs	r0, #164	; 0xa4
 800214e:	f7fe fa49 	bl	80005e4 <_ZnwjPv>
 8002152:	4680      	mov	r8, r0
 8002154:	aa19      	add	r2, sp, #100	; 0x64
 8002156:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800215a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800215e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002162:	9418      	str	r4, [sp, #96]	; 0x60
 8002164:	4668      	mov	r0, sp
 8002166:	f107 0318 	add.w	r3, r7, #24
 800216a:	2260      	movs	r2, #96	; 0x60
 800216c:	4619      	mov	r1, r3
 800216e:	f006 fa4b 	bl	8008608 <memcpy>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4632      	mov	r2, r6
 8002176:	4629      	mov	r1, r5
 8002178:	4640      	mov	r0, r8
 800217a:	f7fe febf 	bl	8000efc <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE>
      ++p_end;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	609a      	str	r2, [r3, #8]
    }
 800218a:	bf00      	nop
 800218c:	3780      	adds	r7, #128	; 0x80
 800218e:	46bd      	mov	sp, r7
 8002190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002194 <_ZN3etl7ivectorI9SmartFuseE5beginEv>:
    iterator begin()
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
      return p_buffer;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
    }
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_ZN3etl7ivectorI9SmartFuseE3endEv>:
    iterator end()
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
      return p_end;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
    }
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>:
      operator[](size_type __n) noexcept
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f8c0 	bl	8002358 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>
 80021d8:	4603      	mov	r3, r0
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>:
    reference operator [](size_t i)
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
      return p_buffer[i];
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	21a4      	movs	r1, #164	; 0xa4
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
    }
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f8ad 	bl	8002374 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>
 800221a:	4603      	mov	r3, r0
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f8b0 	bl	8002398 <_ZNSt14__array_traitsISt5arrayIfLj6EELj4EE6_S_refERA4_KS1_j>
 8002238:	4603      	mov	r3, r0
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f8b5 	bl	80023bc <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>
 8002252:	4603      	mov	r3, r0
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_ZNSt14__array_traitsI15ChannelSettingsLj6EE6_S_refERA6_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE4dataEv>:
      data() noexcept
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f884 	bl	80023d2 <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_ptrERA6_KS1_>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 80022dc:	687b      	ldr	r3, [r7, #4]
  }
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 80022f2:	687b      	ldr	r3, [r7, #4]
  }
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8002308:	687b      	ldr	r3, [r7, #4]
  }
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800231e:	687b      	ldr	r3, [r7, #4]
  }
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_ZN3etl7forwardIRSt5arrayI15ChannelSettingsLj6EEEEOT_RNS_16remove_referenceIS5_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8002334:	687b      	ldr	r3, [r7, #4]
  }
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <_ZN3etl7forwardIRNS_8delegateIFvP9SmartFuseEEEEEOT_RNS_16remove_referenceIS7_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800234a:	687b      	ldr	r3, [r7, #4]
  }
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4413      	add	r3, r2
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_ZNSt14__array_traitsISt5arrayIfLj6EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_ptrERA6_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_ZN11GpioElementD1Ev>:
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		//virtual void handle();
		virtual ~GpioElement() { };
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <_ZN11GpioElementD1Ev+0x1c>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	080096bc 	.word	0x080096bc

08002408 <_ZN11GpioElementD0Ev>:
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ffe9 	bl	80023e8 <_ZN11GpioElementD1Ev>
 8002416:	2110      	movs	r1, #16
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f006 f88e 	bl	800853a <_ZdlPvj>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
 *      Author: Piotr Lesicki
 */

#include "gpio elements.hpp"

GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	70fb      	strb	r3, [r7, #3]
						 port(port), pin(pin), is_inverted(is_inverted) { }
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x34>)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	715a      	strb	r2, [r3, #5]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	080096bc 	.word	0x080096bc

08002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin) :
							   GpioElement(port, pin, false) { }

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	70fb      	strb	r3, [r7, #3]
							   GpioElement(port, pin, is_inverted) { }
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	f7ff ffd7 	bl	8002428 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 800247a:	4a04      	ldr	r2, [pc, #16]	; (800248c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x2c>)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	080096ac 	.word	0x080096ac

08002490 <_ZN14GpioOutElement8activateEv>:

void GpioOutElement::activate()
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68d8      	ldr	r0, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	b299      	uxth	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	795b      	ldrb	r3, [r3, #5]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <_ZN14GpioOutElement8activateEv+0x1e>
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <_ZN14GpioOutElement8activateEv+0x20>
 80024ae:	2301      	movs	r3, #1
 80024b0:	461a      	mov	r2, r3
 80024b2:	f004 fa6d 	bl	8006990 <HAL_GPIO_WritePin>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <_ZN14GpioOutElement10deactivateEv>:

void GpioOutElement::deactivate()
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68d8      	ldr	r0, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	b299      	uxth	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	795b      	ldrb	r3, [r3, #5]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <_ZN14GpioOutElement10deactivateEv+0x1e>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <_ZN14GpioOutElement10deactivateEv+0x20>
 80024dc:	2300      	movs	r3, #0
 80024de:	461a      	mov	r2, r3
 80024e0:	f004 fa56 	bl	8006990 <HAL_GPIO_WritePin>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>:
}

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin) :
							 GpioElement(port, pin, false) { }

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	70fb      	strb	r3, [r7, #3]
							 GpioElement(port, pin, is_inverted) { }
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	f7ff ff91 	bl	8002428 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb+0x2c>)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	0800969c 	.word	0x0800969c

0800251c <_ZN13GpioInElement8isActiveEv>:

bool GpioInElement::isActive()
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	 *		  1  |    1   |  0
	 *
	 *	  basically a XOR operation
	 *
	 */
	return ((HAL_GPIO_ReadPin((GPIO_TypeDef*)(this->port), this->pin) == GPIO_PIN_SET) != this->is_inverted);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	4610      	mov	r0, r2
 8002532:	f004 fa15 	bl	8006960 <HAL_GPIO_ReadPin>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	795b      	ldrb	r3, [r3, #5]
 8002548:	429a      	cmp	r2, r3
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <_ZN13GpioInElementD1Ev>:

		//void handle() override;
		void toggle();
};

class GpioInElement : public GpioElement
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	4a05      	ldr	r2, [pc, #20]	; (800257c <_ZN13GpioInElementD1Ev+0x20>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff3b 	bl	80023e8 <_ZN11GpioElementD1Ev>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	0800969c 	.word	0x0800969c

08002580 <_ZN13GpioInElementD0Ev>:
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffe7 	bl	800255c <_ZN13GpioInElementD1Ev>
 800258e:	2110      	movs	r1, #16
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f005 ffd2 	bl	800853a <_ZdlPvj>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZN14GpioOutElementD1Ev>:
class GpioOutElement : public GpioElement
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <_ZN14GpioOutElementD1Ev+0x20>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff19 	bl	80023e8 <_ZN11GpioElementD1Ev>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	080096ac 	.word	0x080096ac

080025c4 <_ZN14GpioOutElementD0Ev>:
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ffe7 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
 80025d2:	2110      	movs	r1, #16
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f005 ffb0 	bl	800853a <_ZdlPvj>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a71      	ldr	r2, [pc, #452]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002612:	4b6c      	ldr	r3, [pc, #432]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	4a6b      	ldr	r2, [pc, #428]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800261e:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b60      	ldr	r3, [pc, #384]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	4a5f      	ldr	r2, [pc, #380]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800265a:	4b5a      	ldr	r3, [pc, #360]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	4a59      	ldr	r2, [pc, #356]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002660:	f043 0308 	orr.w	r3, r3, #8
 8002664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002666:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002672:	2200      	movs	r2, #0
 8002674:	210f      	movs	r1, #15
 8002676:	4854      	ldr	r0, [pc, #336]	; (80027c8 <MX_GPIO_Init+0x1e4>)
 8002678:	f004 f98a 	bl	8006990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800267c:	2200      	movs	r2, #0
 800267e:	211e      	movs	r1, #30
 8002680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002684:	f004 f984 	bl	8006990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_7
 8002688:	2200      	movs	r2, #0
 800268a:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800268e:	484f      	ldr	r0, [pc, #316]	; (80027cc <MX_GPIO_Init+0x1e8>)
 8002690:	f004 f97e 	bl	8006990 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002694:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8002698:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	4847      	ldr	r0, [pc, #284]	; (80027c8 <MX_GPIO_Init+0x1e4>)
 80026aa:	f003 ffc7 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026b4:	2303      	movs	r3, #3
 80026b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4619      	mov	r1, r3
 80026c2:	4841      	ldr	r0, [pc, #260]	; (80027c8 <MX_GPIO_Init+0x1e4>)
 80026c4:	f003 ffba 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80026c8:	230f      	movs	r3, #15
 80026ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026cc:	2301      	movs	r3, #1
 80026ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	483a      	ldr	r0, [pc, #232]	; (80027c8 <MX_GPIO_Init+0x1e4>)
 80026e0:	f003 ffac 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80026e4:	231e      	movs	r3, #30
 80026e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e8:	2301      	movs	r3, #1
 80026ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fe:	f003 ff9d 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002702:	2304      	movs	r3, #4
 8002704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800270a:	2301      	movs	r3, #1
 800270c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	482c      	ldr	r0, [pc, #176]	; (80027cc <MX_GPIO_Init+0x1e8>)
 800271a:	f003 ff8f 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 800271e:	f44f 63d4 	mov.w	r3, #1696	; 0x6a0
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	4825      	ldr	r0, [pc, #148]	; (80027cc <MX_GPIO_Init+0x1e8>)
 8002738:	f003 ff80 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14
                           PB15 PB6 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800273c:	f64f 1340 	movw	r3, #63808	; 0xf940
 8002740:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002742:	2303      	movs	r3, #3
 8002744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	481e      	ldr	r0, [pc, #120]	; (80027cc <MX_GPIO_Init+0x1e8>)
 8002752:	f003 ff73 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8002756:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 800275a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800275c:	2303      	movs	r3, #3
 800275e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4619      	mov	r1, r3
 800276a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800276e:	f003 ff65 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002772:	2304      	movs	r3, #4
 8002774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002776:	2303      	movs	r3, #3
 8002778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4812      	ldr	r0, [pc, #72]	; (80027d0 <MX_GPIO_Init+0x1ec>)
 8002786:	f003 ff59 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800278a:	2310      	movs	r3, #16
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	480b      	ldr	r0, [pc, #44]	; (80027cc <MX_GPIO_Init+0x1e8>)
 800279e:	f003 ff4d 	bl	800663c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027a2:	2308      	movs	r3, #8
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a6:	2303      	movs	r3, #3
 80027a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4807      	ldr	r0, [pc, #28]	; (80027d4 <MX_GPIO_Init+0x1f0>)
 80027b6:	f003 ff41 	bl	800663c <HAL_GPIO_Init>

}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	; 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	48000800 	.word	0x48000800
 80027cc:	48000400 	.word	0x48000400
 80027d0:	48000c00 	.word	0x48000c00
 80027d4:	48001c00 	.word	0x48001c00

080027d8 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
 80027dc:	2300      	movs	r3, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	601a      	str	r2, [r3, #0]
    {
    }
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
    {
    }
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	461a      	mov	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	6053      	str	r3, [r2, #4]
 8002832:	6093      	str	r3, [r2, #8]
 8002834:	60d3      	str	r3, [r2, #12]
 8002836:	6113      	str	r3, [r2, #16]
 8002838:	6153      	str	r3, [r2, #20]
 800283a:	6193      	str	r3, [r2, #24]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	331c      	adds	r3, #28
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	331c      	adds	r3, #28
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	68b8      	ldr	r0, [r7, #8]
 8002850:	f003 fa7a 	bl	8005d48 <HAL_CAN_GetRxMessage>
 8002854:	4603      	mov	r3, r0
 8002856:	461a      	mov	r2, r3
    this->status =
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	791a      	ldrb	r2, [r3, #4]
 8002874:	795b      	ldrb	r3, [r3, #5]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	4313      	orrs	r3, r2
 800287e:	b29b      	uxth	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	6938      	ldr	r0, [r7, #16]
 80028a0:	f000 fef4 	bl	800368c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE5beginEv>
 80028a4:	6178      	str	r0, [r7, #20]
 80028a6:	6938      	ldr	r0, [r7, #16]
 80028a8:	f000 fefc 	bl	80036a4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE3endEv>
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d01f      	beq.n	80028f6 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ffd2 	bl	8002868 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80028c4:	4602      	mov	r2, r0
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	6839      	ldr	r1, [r7, #0]
 80028e6:	4610      	mov	r0, r2
 80028e8:	4798      	blx	r3
        return true;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e004      	b.n	80028f8 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3304      	adds	r3, #4
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e7db      	b.n	80028ae <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 80028f6:	2300      	movs	r3, #0
  }
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_ZN8PUTM_CAN13Can_interface11get_tc_mainEv>:
    return steering_wheel_main.data;
  }
  Steering_Wheel_event get_steering_wheel_event() {
    return steering_wheel_event.data;
  }
  TC_main get_tc_main() { return tc_main.data; }
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f203 1315 	addw	r3, r3, #277	; 0x115
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	6011      	str	r1, [r2, #0]
 8002918:	6053      	str	r3, [r2, #4]
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	2200      	movs	r2, #0
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff6f 	bl	800281c <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 800293e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	4619      	mov	r1, r3
 800294c:	4803      	ldr	r0, [pc, #12]	; (800295c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800294e:	f7ff ff9d 	bl	800288c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 8002952:	bf00      	nop
 8002954:	3730      	adds	r7, #48	; 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000

08002960 <_ZN16SmartFuseHandlerILm4EEC1Ev>:

		SmartFuseState getGSB(std::array < uint8_t, 3 > x);
};

template <uint32_t num_of_sf>
class SmartFuseHandler
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 feb4 	bl	80036d8 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <_ZZ4mainENKUlP9SmartFuseE_clES0_>:
			.duty_cycle = 0x000,
			.clamping_currents = { 0.f, 5.f}
		},
		std_channel_setting
	};
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_2, &hspi1, fuse_1_channels_settings, 100, [](SmartFuse* sf)
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	{

		static uint16_t previous_setting = 0;

		uint16_t setting = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	82fb      	strh	r3, [r7, #22]
				previous_setting = setting;
			}
		}
		else
		{
			auto tc_on = PUTM_CAN::can.get_tc_main().tractive_system_on;
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	4914      	ldr	r1, [pc, #80]	; (80029e0 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x64>)
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ffb5 	bl	8002900 <_ZN8PUTM_CAN13Can_interface11get_tc_mainEv>
 8002996:	7c7b      	ldrb	r3, [r7, #17]
 8002998:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800299c:	757b      	strb	r3, [r7, #21]

			if(tc_on) setting = 1023;
 800299e:	7d7b      	ldrb	r3, [r7, #21]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x30>
 80029a4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80029a8:	82fb      	strh	r3, [r7, #22]
 80029aa:	e001      	b.n	80029b0 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x34>
			else setting = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	82fb      	strh	r3, [r7, #22]

			if(setting != previous_setting)
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x68>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	8afa      	ldrh	r2, [r7, #22]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d00e      	beq.n	80029d8 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x5c>
			{
				// fan left
				sf->setChannelDutyCykle(Channel::c3, setting);
 80029ba:	8afb      	ldrh	r3, [r7, #22]
 80029bc:	461a      	mov	r2, r3
 80029be:	2103      	movs	r1, #3
 80029c0:	6838      	ldr	r0, [r7, #0]
 80029c2:	f7fe fe69 	bl	8001698 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>
				// fan right
				sf->setChannelDutyCykle(Channel::c4, setting);
 80029c6:	8afb      	ldrh	r3, [r7, #22]
 80029c8:	461a      	mov	r2, r3
 80029ca:	2104      	movs	r1, #4
 80029cc:	6838      	ldr	r0, [r7, #0]
 80029ce:	f7fe fe63 	bl	8001698 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>

				previous_setting = setting;
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x68>)
 80029d4:	8afb      	ldrh	r3, [r7, #22]
 80029d6:	8013      	strh	r3, [r2, #0]
			}
		}
	});
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000000 	.word	0x20000000
 80029e4:	2000077c 	.word	0x2000077c

080029e8 <_ZN11GpioElementC1ERKS_>:
class GpioElement
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <_ZN11GpioElementC1ERKS_+0x40>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	791a      	ldrb	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	711a      	strb	r2, [r3, #4]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	795a      	ldrb	r2, [r3, #5]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	715a      	strb	r2, [r3, #5]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	080096bc 	.word	0x080096bc

08002a2c <_ZN13GpioInElementC1ERKS_>:
class GpioInElement : public GpioElement
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ffd3 	bl	80029e8 <_ZN11GpioElementC1ERKS_>
 8002a42:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <_ZN13GpioInElementC1ERKS_+0x28>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	0800969c 	.word	0x0800969c

08002a58 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4614      	mov	r4, r2
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a74:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f005 fdc1 	bl	8008608 <memcpy>
  }
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bdb0      	pop	{r4, r5, r7, pc}

08002a90 <main>:
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 8002a96:	af1c      	add	r7, sp, #112	; 0x70
	ChannelSettings std_channel_setting
 8002a98:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 31f0 	strb.w	r3, [r7, #496]	; 0x1f0
 8002aac:	2302      	movs	r3, #2
 8002aae:	f887 31f1 	strb.w	r3, [r7, #497]	; 0x1f1
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f887 31f2 	strb.w	r3, [r7, #498]	; 0x1f2
 8002ab8:	f8b7 31f4 	ldrh.w	r3, [r7, #500]	; 0x1f4
 8002abc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002ac0:	f362 0309 	bfi	r3, r2, #0, #10
 8002ac4:	f8a7 31f4 	strh.w	r3, [r7, #500]	; 0x1f4
 8002ac8:	4bbe      	ldr	r3, [pc, #760]	; (8002dc4 <main+0x334>)
 8002aca:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	};
 8002ace:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 8002ad2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002adc:	f507 74d0 	add.w	r4, r7, #416	; 0x1a0
 8002ae0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002ae4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002aea:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 8002aee:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002af8:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8002afc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b06:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8002b0a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b14:	f507 74f0 	add.w	r4, r7, #480	; 0x1e0
 8002b18:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_1, &hspi1, std_fuse_channels_settings);
 8002b22:	4668      	mov	r0, sp
 8002b24:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002b28:	2260      	movs	r2, #96	; 0x60
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f005 fd6c 	bl	8008608 <memcpy>
 8002b30:	4ba5      	ldr	r3, [pc, #660]	; (8002dc8 <main+0x338>)
 8002b32:	2202      	movs	r2, #2
 8002b34:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002b38:	48a4      	ldr	r0, [pc, #656]	; (8002dcc <main+0x33c>)
 8002b3a:	f7fd fd5f 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
	std::array < ChannelSettings, number_of_channels_per_fuse > fuse_1_channels_settings
 8002b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b42:	2260      	movs	r2, #96	; 0x60
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f005 fd6c 	bl	8008624 <memset>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3160 	strb.w	r3, [r7, #352]	; 0x160
 8002b52:	2302      	movs	r3, #2
 8002b54:	f887 3161 	strb.w	r3, [r7, #353]	; 0x161
 8002b58:	2302      	movs	r3, #2
 8002b5a:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
 8002b5e:	4b99      	ldr	r3, [pc, #612]	; (8002dc4 <main+0x334>)
 8002b60:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002b64:	2301      	movs	r3, #1
 8002b66:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	f887 3171 	strb.w	r3, [r7, #369]	; 0x171
 8002b70:	2302      	movs	r3, #2
 8002b72:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
 8002b76:	4b93      	ldr	r3, [pc, #588]	; (8002dc4 <main+0x334>)
 8002b78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	};
 8002b7c:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8002b80:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b8a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8002b8e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b98:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 8002b9c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ba6:	f507 74c0 	add.w	r4, r7, #384	; 0x180
 8002baa:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_2, &hspi1, fuse_1_channels_settings, 100, [](SmartFuse* sf)
 8002bb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fdb0 	bl	8003724 <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_>
 8002bc4:	aa19      	add	r2, sp, #100	; 0x64
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bce:	e882 0003 	stmia.w	r2, {r0, r1}
 8002bd2:	2364      	movs	r3, #100	; 0x64
 8002bd4:	9318      	str	r3, [sp, #96]	; 0x60
 8002bd6:	4668      	mov	r0, sp
 8002bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002bdc:	2260      	movs	r2, #96	; 0x60
 8002bde:	4619      	mov	r1, r3
 8002be0:	f005 fd12 	bl	8008608 <memcpy>
 8002be4:	4b78      	ldr	r3, [pc, #480]	; (8002dc8 <main+0x338>)
 8002be6:	2204      	movs	r2, #4
 8002be8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002bec:	4877      	ldr	r0, [pc, #476]	; (8002dcc <main+0x33c>)
 8002bee:	f7fd fd1a 	bl	8000626 <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvP9SmartFuseEEE>
	 * channel 2: lidar
	 * channel 3: wheel speed
	 * channel 4: box dv
	 * channel 5: jetson
	 */
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_3, &hspi1, std_fuse_channels_settings);
 8002bf2:	4668      	mov	r0, sp
 8002bf4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002bf8:	2260      	movs	r2, #96	; 0x60
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f005 fd04 	bl	8008608 <memcpy>
 8002c00:	4b71      	ldr	r3, [pc, #452]	; (8002dc8 <main+0x338>)
 8002c02:	2208      	movs	r2, #8
 8002c04:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002c08:	4870      	ldr	r0, [pc, #448]	; (8002dcc <main+0x33c>)
 8002c0a:	f7fd fcf7 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
	 * channel 2: bat hv
	 * channel 3: spare 2
	 * channel 4: diagport
	 * channel 5: pump
	 */
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_4, &hspi1, std_fuse_channels_settings);
 8002c0e:	4668      	mov	r0, sp
 8002c10:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002c14:	2260      	movs	r2, #96	; 0x60
 8002c16:	4619      	mov	r1, r3
 8002c18:	f005 fcf6 	bl	8008608 <memcpy>
 8002c1c:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <main+0x338>)
 8002c1e:	2210      	movs	r2, #16
 8002c20:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002c24:	4869      	ldr	r0, [pc, #420]	; (8002dcc <main+0x33c>)
 8002c26:	f7fd fce9 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c2a:	f001 fd58 	bl	80046de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c2e:	f000 f9b1 	bl	8002f94 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c32:	f7ff fcd7 	bl	80025e4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002c36:	f7fd fc4b 	bl	80004d0 <MX_CAN1_Init>
  MX_SPI1_Init();
 8002c3a:	f001 fae5 	bl	8004208 <MX_SPI1_Init>
  MX_ADC1_Init();
 8002c3e:	f7fd fb2f 	bl	80002a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	sf_handler.initAll();
 8002c42:	4862      	ldr	r0, [pc, #392]	; (8002dcc <main+0x33c>)
 8002c44:	f7fd fd36 	bl	80006b4 <_ZN16SmartFuseHandlerILm4EE7initAllEv>
	initCAN();
 8002c48:	f000 fa6a 	bl	8003120 <_Z7initCANv>
	water_pot_enable.activate();
 8002c4c:	4860      	ldr	r0, [pc, #384]	; (8002dd0 <main+0x340>)
 8002c4e:	f7ff fc1f 	bl	8002490 <_ZN14GpioOutElement8activateEv>
	led_2_control.deactivate();
 8002c52:	4860      	ldr	r0, [pc, #384]	; (8002dd4 <main+0x344>)
 8002c54:	f7ff fc33 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_1_control.deactivate();
 8002c58:	485f      	ldr	r0, [pc, #380]	; (8002dd8 <main+0x348>)
 8002c5a:	f7ff fc30 	bl	80024be <_ZN14GpioOutElement10deactivateEv>

	led_ok.deactivate();
 8002c5e:	485f      	ldr	r0, [pc, #380]	; (8002ddc <main+0x34c>)
 8002c60:	f7ff fc2d 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 8002c64:	485e      	ldr	r0, [pc, #376]	; (8002de0 <main+0x350>)
 8002c66:	f7ff fc2a 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8002c6a:	485e      	ldr	r0, [pc, #376]	; (8002de4 <main+0x354>)
 8002c6c:	f7ff fc27 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 8002c70:	485d      	ldr	r0, [pc, #372]	; (8002de8 <main+0x358>)
 8002c72:	f7ff fc24 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	sf_handler.enableAll();
 8002c76:	4855      	ldr	r0, [pc, #340]	; (8002dcc <main+0x33c>)
 8002c78:	f7fd fd47 	bl	800070a <_ZN16SmartFuseHandlerILm4EE9enableAllEv>

	led_ok.activate();
 8002c7c:	4857      	ldr	r0, [pc, #348]	; (8002ddc <main+0x34c>)
 8002c7e:	f7ff fc07 	bl	8002490 <_ZN14GpioOutElement8activateEv>

	Timer timer_can_send_main_frame(10);
 8002c82:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c86:	210a      	movs	r1, #10
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f001 fc9e 	bl	80045ca <_ZN5TimerC1Em>
	Timer timer_can_send_other_frames(25);
 8002c8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c92:	2119      	movs	r1, #25
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 fc98 	bl	80045ca <_ZN5TimerC1Em>
		hvd_sense_sig,
		inverter_sense_sig,
		firewall_sense_sig,
		dv_sense_sig,
		spare_1_sense_sig
	};
 8002c9a:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8002c9e:	4953      	ldr	r1, [pc, #332]	; (8002dec <main+0x35c>)
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f7ff fec3 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002ca6:	3410      	adds	r4, #16
 8002ca8:	4951      	ldr	r1, [pc, #324]	; (8002df0 <main+0x360>)
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7ff febe 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002cb0:	3410      	adds	r4, #16
 8002cb2:	4950      	ldr	r1, [pc, #320]	; (8002df4 <main+0x364>)
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7ff feb9 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002cba:	3410      	adds	r4, #16
 8002cbc:	494e      	ldr	r1, [pc, #312]	; (8002df8 <main+0x368>)
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f7ff feb4 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002cc4:	3410      	adds	r4, #16
 8002cc6:	494d      	ldr	r1, [pc, #308]	; (8002dfc <main+0x36c>)
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f7ff feaf 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002cce:	3410      	adds	r4, #16
 8002cd0:	494b      	ldr	r1, [pc, #300]	; (8002e00 <main+0x370>)
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7ff feaa 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002cd8:	3410      	adds	r4, #16
 8002cda:	494a      	ldr	r1, [pc, #296]	; (8002e04 <main+0x374>)
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7ff fea5 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002ce2:	f104 0310 	add.w	r3, r4, #16
 8002ce6:	4948      	ldr	r1, [pc, #288]	; (8002e08 <main+0x378>)
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fe9f 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>

	while (true)
	{
		//----------------------------------------------------------------------------------------
		// handle smart fuses and show as Ok/Warnings/Error
		Device::handleState();
 8002cee:	f000 f9b1 	bl	8003054 <_ZN6Device11handleStateEv>
		auto state = sf_handler.handleAll();
 8002cf2:	4836      	ldr	r0, [pc, #216]	; (8002dcc <main+0x33c>)
 8002cf4:	f7fd fcb3 	bl	800065e <_ZN16SmartFuseHandlerILm4EE9handleAllEv>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
		if(state != SmartFuseState::Ok) Device::raise(PUTM_CAN::SF_states::Warning_1);
 8002cfe:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <main+0x27e>
 8002d06:	2001      	movs	r0, #1
 8002d08:	f000 f9de 	bl	80030c8 <_ZN6Device5raiseEN8PUTM_CAN9SF_statesE>
 8002d0c:	e002      	b.n	8002d14 <main+0x284>
		else Device::clear(PUTM_CAN::SF_states::Warning_1);
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f000 f9f0 	bl	80030f4 <_ZN6Device5clearEN8PUTM_CAN9SF_statesE>

		// debug stuff
		fuses_states = sf_handler.getStates();
 8002d14:	482d      	ldr	r0, [pc, #180]	; (8002dcc <main+0x33c>)
 8002d16:	f7fd fd26 	bl	8000766 <_ZN16SmartFuseHandlerILm4EE9getStatesEv>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <main+0x37c>)
 8002d1e:	6013      	str	r3, [r2, #0]
		channels_states = sf_handler.getChannelsStates();
 8002d20:	4c3b      	ldr	r4, [pc, #236]	; (8002e10 <main+0x380>)
 8002d22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d26:	4929      	ldr	r1, [pc, #164]	; (8002dcc <main+0x33c>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fd50 	bl	80007ce <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>
 8002d2e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002d32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d36:	461d      	mov	r5, r3
 8002d38:	6828      	ldr	r0, [r5, #0]
 8002d3a:	6869      	ldr	r1, [r5, #4]
 8002d3c:	68aa      	ldr	r2, [r5, #8]
 8002d3e:	68eb      	ldr	r3, [r5, #12]
 8002d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d42:	6928      	ldr	r0, [r5, #16]
 8002d44:	6969      	ldr	r1, [r5, #20]
 8002d46:	c403      	stmia	r4!, {r0, r1}
		channels_currents = sf_handler.getChannelsCurrents();
 8002d48:	4c32      	ldr	r4, [pc, #200]	; (8002e14 <main+0x384>)
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	491f      	ldr	r1, [pc, #124]	; (8002dcc <main+0x33c>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fd68 	bl	8000824 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>
 8002d54:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002d58:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	4619      	mov	r1, r3
 8002d60:	2360      	movs	r3, #96	; 0x60
 8002d62:	461a      	mov	r2, r3
 8002d64:	f005 fc50 	bl	8008608 <memcpy>

		//----------------------------------------------------------------------------------------
		// handle safety
		for (size_t i = 0; i < optos.size(); i++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002d6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fcec 	bl	8003750 <_ZNKSt5arrayI13GpioInElementLj8EE4sizeEv>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	bf34      	ite	cc
 8002d82:	2301      	movcc	r3, #1
 8002d84:	2300      	movcs	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d047      	beq.n	8002e1c <main+0x38c>
			safeties[i] = optos[i].isActive();
 8002d8c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d90:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fce6 	bl	8003766 <_ZNSt5arrayI13GpioInElementLj8EEixEj>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fbbd 	bl	800251c <_ZN13GpioInElement8isActiveEv>
 8002da2:	4603      	mov	r3, r0
 8002da4:	461c      	mov	r4, r3
 8002da6:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8002daa:	481b      	ldr	r0, [pc, #108]	; (8002e18 <main+0x388>)
 8002dac:	f000 fbd8 	bl	8003560 <_ZNSt5arrayIbLj8EEixEj>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4622      	mov	r2, r4
 8002db4:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < optos.size(); i++)
 8002db6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002dc0:	e7d5      	b.n	8002d6e <main+0x2de>
 8002dc2:	bf00      	nop
 8002dc4:	40a00000 	.word	0x40a00000
 8002dc8:	20000798 	.word	0x20000798
 8002dcc:	200004e0 	.word	0x200004e0
 8002dd0:	2000038c 	.word	0x2000038c
 8002dd4:	2000036c 	.word	0x2000036c
 8002dd8:	2000035c 	.word	0x2000035c
 8002ddc:	2000034c 	.word	0x2000034c
 8002de0:	2000033c 	.word	0x2000033c
 8002de4:	2000032c 	.word	0x2000032c
 8002de8:	2000031c 	.word	0x2000031c
 8002dec:	200003ac 	.word	0x200003ac
 8002df0:	200003bc 	.word	0x200003bc
 8002df4:	200003cc 	.word	0x200003cc
 8002df8:	200003dc 	.word	0x200003dc
 8002dfc:	200003ec 	.word	0x200003ec
 8002e00:	200003fc 	.word	0x200003fc
 8002e04:	2000040c 	.word	0x2000040c
 8002e08:	2000041c 	.word	0x2000041c
 8002e0c:	20000454 	.word	0x20000454
 8002e10:	20000458 	.word	0x20000458
 8002e14:	20000470 	.word	0x20000470
 8002e18:	200004d0 	.word	0x200004d0

		//----------------------------------------------------------------------------------------
		// transmit receive can and handle
		// main frame
		if(timer_can_send_main_frame.checkIfTimedOutAndReset())
 8002e1c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fbff 	bl	8004624 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d04f      	beq.n	8002ecc <main+0x43c>
				.device_state =	device_state,
				.fuse_0_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[0]),
				.fuse_1_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[1]),
				.fuse_2_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[2]),
				.fuse_3_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[3])
			};
 8002e2c:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <main+0x4ec>)
 8002e2e:	781a      	ldrb	r2, [r3, #0]
 8002e30:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002e34:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e38:	701a      	strb	r2, [r3, #0]
				.fuse_0_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[0]),
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4850      	ldr	r0, [pc, #320]	; (8002f80 <main+0x4f0>)
 8002e3e:	f7ff f9c1 	bl	80021c4 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002e42:	4603      	mov	r3, r0
 8002e44:	781a      	ldrb	r2, [r3, #0]
			};
 8002e46:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002e4a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e4e:	705a      	strb	r2, [r3, #1]
				.fuse_1_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[1]),
 8002e50:	2101      	movs	r1, #1
 8002e52:	484b      	ldr	r0, [pc, #300]	; (8002f80 <main+0x4f0>)
 8002e54:	f7ff f9b6 	bl	80021c4 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	781a      	ldrb	r2, [r3, #0]
			};
 8002e5c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002e60:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e64:	709a      	strb	r2, [r3, #2]
				.fuse_2_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[2]),
 8002e66:	2102      	movs	r1, #2
 8002e68:	4845      	ldr	r0, [pc, #276]	; (8002f80 <main+0x4f0>)
 8002e6a:	f7ff f9ab 	bl	80021c4 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	781a      	ldrb	r2, [r3, #0]
			};
 8002e72:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002e76:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e7a:	70da      	strb	r2, [r3, #3]
				.fuse_3_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[3])
 8002e7c:	2103      	movs	r1, #3
 8002e7e:	4840      	ldr	r0, [pc, #256]	; (8002f80 <main+0x4f0>)
 8002e80:	f7ff f9a0 	bl	80021c4 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002e84:	4603      	mov	r3, r0
 8002e86:	781a      	ldrb	r2, [r3, #0]
			};
 8002e88:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002e8c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e90:	711a      	strb	r2, [r3, #4]

			PUTM_CAN::Can_tx_message<PUTM_CAN::SF_main> can_sender(sf_main, PUTM_CAN::can_tx_header_SF_MAIN);
 8002e92:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002e96:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e9a:	4a3a      	ldr	r2, [pc, #232]	; (8002f84 <main+0x4f4>)
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fddb 	bl	8002a58 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

			if(can_sender.send(hcan1) != HAL_StatusTypeDef::HAL_OK)
 8002ea2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ea6:	4938      	ldr	r1, [pc, #224]	; (8002f88 <main+0x4f8>)
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fc6b 	bl	8003784 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <main+0x436>
				Device::raise(PUTM_CAN::SF_states::Error);
 8002ebe:	2003      	movs	r0, #3
 8002ec0:	f000 f902 	bl	80030c8 <_ZN6Device5raiseEN8PUTM_CAN9SF_statesE>
 8002ec4:	e002      	b.n	8002ecc <main+0x43c>
			else Device::clear(PUTM_CAN::SF_states::Error);
 8002ec6:	2003      	movs	r0, #3
 8002ec8:	f000 f914 	bl	80030f4 <_ZN6Device5clearEN8PUTM_CAN9SF_statesE>
		}

		// other frames
		if(timer_can_send_other_frames.checkIfTimedOutAndReset())
 8002ecc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 fba7 	bl	8004624 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f43f af08 	beq.w	8002cee <main+0x25e>
		{
			auto can_state = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
			static size_t send_frame = 0;

			switch (send_frame)
 8002ee4:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <main+0x4fc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d823      	bhi.n	8002f34 <main+0x4a4>
 8002eec:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <main+0x464>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f11 	.word	0x08002f11
 8002efc:	08002f1d 	.word	0x08002f1d
 8002f00:	08002f29 	.word	0x08002f29
			{
				case 0: can_state = sendCanFramePassiveElements(); break;
 8002f04:	f000 f978 	bl	80031f8 <_Z27sendCanFramePassiveElementsv>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 8002f0e:	e011      	b.n	8002f34 <main+0x4a4>
				case 1: can_state = sendCanFrameLegendaryDVAndSupply(); break;
 8002f10:	f000 fa16 	bl	8003340 <_Z32sendCanFrameLegendaryDVAndSupplyv>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 8002f1a:	e00b      	b.n	8002f34 <main+0x4a4>
				case 2: can_state = sendCanFrameSupply(); break;
 8002f1c:	f000 fa9c 	bl	8003458 <_Z18sendCanFrameSupplyv>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 8002f26:	e005      	b.n	8002f34 <main+0x4a4>
				case 3: can_state = sendCanFrameSafety(); break;
 8002f28:	f000 fb54 	bl	80035d4 <_Z18sendCanFrameSafetyv>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
 8002f32:	bf00      	nop
			}

			frame_send_fail[send_frame] = can_state;
 8002f34:	f897 420b 	ldrb.w	r4, [r7, #523]	; 0x20b
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <main+0x4fc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4814      	ldr	r0, [pc, #80]	; (8002f90 <main+0x500>)
 8002f40:	f000 fc34 	bl	80037ac <_ZNSt5arrayI17HAL_StatusTypeDefLj6EEixEj>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4622      	mov	r2, r4
 8002f48:	701a      	strb	r2, [r3, #0]

			if(can_state != HAL_OK)
 8002f4a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <main+0x4ca>
				Device::raise(PUTM_CAN::SF_states::Warning_2);
 8002f52:	2002      	movs	r0, #2
 8002f54:	f000 f8b8 	bl	80030c8 <_ZN6Device5raiseEN8PUTM_CAN9SF_statesE>
 8002f58:	e002      	b.n	8002f60 <main+0x4d0>
			else Device::clear(PUTM_CAN::SF_states::Warning_2);
 8002f5a:	2002      	movs	r0, #2
 8002f5c:	f000 f8ca 	bl	80030f4 <_ZN6Device5clearEN8PUTM_CAN9SF_statesE>

			send_frame++;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <main+0x4fc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <main+0x4fc>)
 8002f68:	6013      	str	r3, [r2, #0]
			if(send_frame > 5) send_frame = 0;
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <main+0x4fc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	f67f aebd 	bls.w	8002cee <main+0x25e>
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <main+0x4fc>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 8002f7a:	e6b8      	b.n	8002cee <main+0x25e>
 8002f7c:	200004de 	.word	0x200004de
 8002f80:	20000454 	.word	0x20000454
 8002f84:	080096c4 	.word	0x080096c4
 8002f88:	200002f0 	.word	0x200002f0
 8002f8c:	20000780 	.word	0x20000780
 8002f90:	200004d8 	.word	0x200004d8

08002f94 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b098      	sub	sp, #96	; 0x60
 8002f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f9a:	f107 0318 	add.w	r3, r7, #24
 8002f9e:	2248      	movs	r2, #72	; 0x48
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 fb3e 	bl	8008624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f003 fd22 	bl	8006a00 <HAL_PWREx_ControlVoltageScaling>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf14      	ite	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	2300      	moveq	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002fcc:	f000 fb44 	bl	8003658 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fda:	2340      	movs	r3, #64	; 0x40
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002fea:	231e      	movs	r3, #30
 8002fec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ffa:	f107 0318 	add.w	r3, r7, #24
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 fda2 	bl	8006b48 <HAL_RCC_OscConfig>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf14      	ite	ne
 800300a:	2301      	movne	r3, #1
 800300c:	2300      	moveq	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 8003014:	f000 fb20 	bl	8003658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003018:	230f      	movs	r3, #15
 800301a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800301c:	2303      	movs	r3, #3
 800301e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003024:	2300      	movs	r3, #0
 8003026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	2105      	movs	r1, #5
 8003030:	4618      	mov	r0, r3
 8003032:	f004 fa11 	bl	8007458 <HAL_RCC_ClockConfig>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8003046:	f000 fb07 	bl	8003658 <Error_Handler>
  }
}
 800304a:	bf00      	nop
 800304c:	3760      	adds	r7, #96	; 0x60
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <_ZN6Device11handleStateEv>:

/* USER CODE BEGIN 4 */

void Device::handleState()
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	led_ok.deactivate();
 8003058:	4816      	ldr	r0, [pc, #88]	; (80030b4 <_ZN6Device11handleStateEv+0x60>)
 800305a:	f7ff fa30 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 800305e:	4816      	ldr	r0, [pc, #88]	; (80030b8 <_ZN6Device11handleStateEv+0x64>)
 8003060:	f7ff fa2d 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8003064:	4815      	ldr	r0, [pc, #84]	; (80030bc <_ZN6Device11handleStateEv+0x68>)
 8003066:	f7ff fa2a 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 800306a:	4815      	ldr	r0, [pc, #84]	; (80030c0 <_ZN6Device11handleStateEv+0x6c>)
 800306c:	f7ff fa27 	bl	80024be <_ZN14GpioOutElement10deactivateEv>

	switch (Device::state)
 8003070:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <_ZN6Device11handleStateEv+0x70>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d81b      	bhi.n	80030b0 <_ZN6Device11handleStateEv+0x5c>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <_ZN6Device11handleStateEv+0x2c>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	08003091 	.word	0x08003091
 8003084:	08003099 	.word	0x08003099
 8003088:	080030a1 	.word	0x080030a1
 800308c:	080030a9 	.word	0x080030a9
	{
		case PUTM_CAN::SF_states::Ok:
			led_ok.activate(); break;
 8003090:	4808      	ldr	r0, [pc, #32]	; (80030b4 <_ZN6Device11handleStateEv+0x60>)
 8003092:	f7ff f9fd 	bl	8002490 <_ZN14GpioOutElement8activateEv>
 8003096:	e00b      	b.n	80030b0 <_ZN6Device11handleStateEv+0x5c>
		case PUTM_CAN::SF_states::Warning_1:
			led_warning_1.activate(); break;
 8003098:	4807      	ldr	r0, [pc, #28]	; (80030b8 <_ZN6Device11handleStateEv+0x64>)
 800309a:	f7ff f9f9 	bl	8002490 <_ZN14GpioOutElement8activateEv>
 800309e:	e007      	b.n	80030b0 <_ZN6Device11handleStateEv+0x5c>
		case PUTM_CAN::SF_states::Warning_2:
			led_warning_2.activate(); break;
 80030a0:	4806      	ldr	r0, [pc, #24]	; (80030bc <_ZN6Device11handleStateEv+0x68>)
 80030a2:	f7ff f9f5 	bl	8002490 <_ZN14GpioOutElement8activateEv>
 80030a6:	e003      	b.n	80030b0 <_ZN6Device11handleStateEv+0x5c>
		case PUTM_CAN::SF_states::Error:
			led_error.activate();
 80030a8:	4805      	ldr	r0, [pc, #20]	; (80030c0 <_ZN6Device11handleStateEv+0x6c>)
 80030aa:	f7ff f9f1 	bl	8002490 <_ZN14GpioOutElement8activateEv>
	}
}
 80030ae:	e7ff      	b.n	80030b0 <_ZN6Device11handleStateEv+0x5c>
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	2000034c 	.word	0x2000034c
 80030b8:	2000033c 	.word	0x2000033c
 80030bc:	2000032c 	.word	0x2000032c
 80030c0:	2000031c 	.word	0x2000031c
 80030c4:	20000318 	.word	0x20000318

080030c8 <_ZN6Device5raiseEN8PUTM_CAN9SF_statesE>:

void Device::raise(PUTM_CAN::SF_states state)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
	if (int(state) <= int(Device::state)) return;
 80030d2:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <_ZN6Device5raiseEN8PUTM_CAN9SF_statesE+0x28>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	79fa      	ldrb	r2, [r7, #7]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d903      	bls.n	80030e4 <_ZN6Device5raiseEN8PUTM_CAN9SF_statesE+0x1c>
	Device::state = state;
 80030dc:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <_ZN6Device5raiseEN8PUTM_CAN9SF_statesE+0x28>)
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	7013      	strb	r3, [r2, #0]
 80030e2:	e000      	b.n	80030e6 <_ZN6Device5raiseEN8PUTM_CAN9SF_statesE+0x1e>
	if (int(state) <= int(Device::state)) return;
 80030e4:	bf00      	nop
}
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	20000318 	.word	0x20000318

080030f4 <_ZN6Device5clearEN8PUTM_CAN9SF_statesE>:

void Device::clear(PUTM_CAN::SF_states state)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
	if (state != Device::state) return;
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <_ZN6Device5clearEN8PUTM_CAN9SF_statesE+0x28>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	79fa      	ldrb	r2, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d103      	bne.n	8003110 <_ZN6Device5clearEN8PUTM_CAN9SF_statesE+0x1c>
	Device::state = PUTM_CAN::SF_states::Ok;
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <_ZN6Device5clearEN8PUTM_CAN9SF_statesE+0x28>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e000      	b.n	8003112 <_ZN6Device5clearEN8PUTM_CAN9SF_statesE+0x1e>
	if (state != Device::state) return;
 8003110:	bf00      	nop
}
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	20000318 	.word	0x20000318

08003120 <_Z7initCANv>:

void initCAN()
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
	can_filtering_config.FilterBank = 0;
 8003124:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <_Z7initCANv+0x98>)
 8003126:	2200      	movs	r2, #0
 8003128:	615a      	str	r2, [r3, #20]
	can_filtering_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800312a:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <_Z7initCANv+0x98>)
 800312c:	2200      	movs	r2, #0
 800312e:	619a      	str	r2, [r3, #24]
	can_filtering_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8003130:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <_Z7initCANv+0x98>)
 8003132:	2201      	movs	r2, #1
 8003134:	61da      	str	r2, [r3, #28]
	can_filtering_config.FilterIdHigh = 0x0000;
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <_Z7initCANv+0x98>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
	can_filtering_config.FilterIdLow = 0x0000;
 800313c:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <_Z7initCANv+0x98>)
 800313e:	2200      	movs	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
	can_filtering_config.FilterMaskIdHigh = 0x0000;
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <_Z7initCANv+0x98>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
	can_filtering_config.FilterMaskIdLow = 0x0000;
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <_Z7initCANv+0x98>)
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
	can_filtering_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <_Z7initCANv+0x98>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
	can_filtering_config.FilterActivation = ENABLE;
 8003154:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <_Z7initCANv+0x98>)
 8003156:	2201      	movs	r2, #1
 8003158:	621a      	str	r2, [r3, #32]
	can_filtering_config.SlaveStartFilterBank = 14;
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <_Z7initCANv+0x98>)
 800315c:	220e      	movs	r2, #14
 800315e:	625a      	str	r2, [r3, #36]	; 0x24

	if ( HAL_CAN_ConfigFilter(&hcan1, &can_filtering_config) != HAL_OK )
 8003160:	4915      	ldr	r1, [pc, #84]	; (80031b8 <_Z7initCANv+0x98>)
 8003162:	4816      	ldr	r0, [pc, #88]	; (80031bc <_Z7initCANv+0x9c>)
 8003164:	f002 fc07 	bl	8005976 <HAL_CAN_ConfigFilter>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <_Z7initCANv+0x5c>
		Error_Handler();
 8003178:	f000 fa6e 	bl	8003658 <Error_Handler>

	if ( HAL_CAN_Start(&hcan1) != HAL_OK )
 800317c:	480f      	ldr	r0, [pc, #60]	; (80031bc <_Z7initCANv+0x9c>)
 800317e:	f002 fcc4 	bl	8005b0a <HAL_CAN_Start>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <_Z7initCANv+0x76>
		Error_Handler();
 8003192:	f000 fa61 	bl	8003658 <Error_Handler>

	if ( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8003196:	2102      	movs	r1, #2
 8003198:	4808      	ldr	r0, [pc, #32]	; (80031bc <_Z7initCANv+0x9c>)
 800319a:	f002 fee7 	bl	8005f6c <HAL_CAN_ActivateNotification>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <_Z7initCANv+0x92>
		Error_Handler();
 80031ae:	f000 fa53 	bl	8003658 <Error_Handler>
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000042c 	.word	0x2000042c
 80031bc:	200002f0 	.word	0x200002f0

080031c0 <_ZN8PUTM_CAN14Can_tx_messageINS_18SF_PassiveElementsEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80031c0:	b5b0      	push	{r4, r5, r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4614      	mov	r4, r2
 80031d2:	461d      	mov	r5, r3
 80031d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031dc:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3318      	adds	r3, #24
 80031e4:	2208      	movs	r2, #8
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f005 fa0d 	bl	8008608 <memcpy>
  }
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bdb0      	pop	{r4, r5, r7, pc}

080031f8 <_Z27sendCanFramePassiveElementsv>:

HAL_StatusTypeDef sendCanFramePassiveElements()
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	; 0x30
 80031fc:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 80031fe:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <_Z27sendCanFramePassiveElementsv+0x100>)
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
	auto wat_pot_state = (water_pot_state.isActive() ? PUTM_CAN::ChannelState::Ok : PUTM_CAN::ChannelState::Error);
 8003202:	483e      	ldr	r0, [pc, #248]	; (80032fc <_Z27sendCanFramePassiveElementsv+0x104>)
 8003204:	f7ff f98a 	bl	800251c <_ZN13GpioInElement8isActiveEv>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <_Z27sendCanFramePassiveElementsv+0x1a>
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <_Z27sendCanFramePassiveElementsv+0x1c>
 8003212:	2307      	movs	r3, #7
 8003214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		PUTM_CAN::SF_PassiveElements frame
		{
			.break_light = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_break_light)),
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe ffe0 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003222:	4603      	mov	r3, r0
 8003224:	2104      	movs	r1, #4
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fab5 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 800322c:	4603      	mov	r3, r0
			.fan_r = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_fan_r)),
			.wheel_speed_1 = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_wheel_speed_1)), // idk which is left and which is right
			.wheel_speed_2 = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_wheel_speed_2)), // idk which is left and which is right or front or whatever
			.water_potentiometer = wat_pot_state, // they are together
			.tsal_assi = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_tsal_assi)) // supply for leds ex.
		};
 800322e:	f887 3020 	strb.w	r3, [r7, #32]
			.fan_mono = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_fan_mono)),
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe ffd3 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800323c:	4603      	mov	r3, r0
 800323e:	2105      	movs	r1, #5
 8003240:	4618      	mov	r0, r3
 8003242:	f7fe faa8 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003246:	4603      	mov	r3, r0
		};
 8003248:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			.fan_l = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_fan_l)),
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe ffc6 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003256:	4603      	mov	r3, r0
 8003258:	2103      	movs	r1, #3
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fa9b 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003260:	4603      	mov	r3, r0
		};
 8003262:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			.fan_r = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_fan_r)),
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2101      	movs	r1, #1
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe ffb9 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003270:	4603      	mov	r3, r0
 8003272:	2104      	movs	r1, #4
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe fa8e 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 800327a:	4603      	mov	r3, r0
		};
 800327c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			.wheel_speed_1 = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_wheel_speed_1)), // idk which is left and which is right
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe ffac 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800328a:	4603      	mov	r3, r0
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe fa81 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003294:	4603      	mov	r3, r0
		};
 8003296:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.wheel_speed_2 = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_wheel_speed_2)), // idk which is left and which is right or front or whatever
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	2102      	movs	r1, #2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe ff9f 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2103      	movs	r1, #3
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe fa74 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 80032ae:	4603      	mov	r3, r0
		};
 80032b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80032b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.tsal_assi = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_tsal_assi)) // supply for leds ex.
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe ff8e 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2102      	movs	r1, #2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fa63 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 80032d0:	4603      	mov	r3, r0
		};
 80032d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		PUTM_CAN::Can_tx_message<PUTM_CAN::SF_PassiveElements> sender(frame, PUTM_CAN::can_tx_header_SF_PASSIVEELEMENTS);
 80032d6:	f107 0120 	add.w	r1, r7, #32
 80032da:	463b      	mov	r3, r7
 80032dc:	4a08      	ldr	r2, [pc, #32]	; (8003300 <_Z27sendCanFramePassiveElementsv+0x108>)
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ff6e 	bl	80031c0 <_ZN8PUTM_CAN14Can_tx_messageINS_18SF_PassiveElementsEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		return sender.send(hcan1);
 80032e4:	463b      	mov	r3, r7
 80032e6:	4907      	ldr	r1, [pc, #28]	; (8003304 <_Z27sendCanFramePassiveElementsv+0x10c>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fa6f 	bl	80037cc <_ZN8PUTM_CAN14Can_tx_messageINS_18SF_PassiveElementsEE4sendER19__CAN_HandleTypeDef>
 80032ee:	4603      	mov	r3, r0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3730      	adds	r7, #48	; 0x30
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	200004e0 	.word	0x200004e0
 80032fc:	2000039c 	.word	0x2000039c
 8003300:	080096dc 	.word	0x080096dc
 8003304:	200002f0 	.word	0x200002f0

08003308 <_ZN8PUTM_CAN14Can_tx_messageINS_23SF_LegendaryDVAndSupplyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4614      	mov	r4, r2
 800331a:	461d      	mov	r5, r3
 800331c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800331e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003320:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003324:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3318      	adds	r3, #24
 800332c:	2208      	movs	r2, #8
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	4618      	mov	r0, r3
 8003332:	f005 f969 	bl	8008608 <memcpy>
  }
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bdb0      	pop	{r4, r5, r7, pc}

08003340 <_Z32sendCanFrameLegendaryDVAndSupplyv>:

HAL_StatusTypeDef sendCanFrameLegendaryDVAndSupply()
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08c      	sub	sp, #48	; 0x30
 8003344:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 8003346:	4b33      	ldr	r3, [pc, #204]	; (8003414 <_Z32sendCanFrameLegendaryDVAndSupplyv+0xd4>)
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c

		PUTM_CAN::SF_LegendaryDVAndSupply frame
 800334a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
		{
			.lidar = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_lidar)),
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe ff42 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800335e:	4603      	mov	r3, r0
 8003360:	2102      	movs	r1, #2
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fa17 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003368:	4603      	mov	r3, r0
			.odrive = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_odrive)),
			.tsal = static_cast<PUTM_CAN::ChannelState>(ChannelState::Ok),
			.bspd_esb = static_cast<PUTM_CAN::ChannelState>(ChannelState::Ok),
			.spare_1 = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_spare_1)),
			.spare_2 = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_spare_2))
		};
 800336a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.box_dv = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_box_dv)),
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	2102      	movs	r1, #2
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe ff35 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003378:	4603      	mov	r3, r0
 800337a:	2104      	movs	r1, #4
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe fa0a 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003382:	4603      	mov	r3, r0
		};
 8003384:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			.jetson = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_jetson)),
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	2102      	movs	r1, #2
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe ff28 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003392:	4603      	mov	r3, r0
 8003394:	2105      	movs	r1, #5
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe f9fd 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 800339c:	4603      	mov	r3, r0
		};
 800339e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.odrive = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_odrive)),
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	2101      	movs	r1, #1
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe ff1b 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2105      	movs	r1, #5
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe f9f0 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 80033b6:	4603      	mov	r3, r0
		};
 80033b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			.spare_1 = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_spare_1)),
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	2102      	movs	r1, #2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe ff0e 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe f9e3 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 80033d0:	4603      	mov	r3, r0
		};
 80033d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.spare_2 = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_spare_2))
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	2103      	movs	r1, #3
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe ff01 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2103      	movs	r1, #3
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe f9d6 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 80033ea:	4603      	mov	r3, r0
		};
 80033ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		PUTM_CAN::Can_tx_message<PUTM_CAN::SF_LegendaryDVAndSupply> sender(frame, PUTM_CAN::can_tx_header_SF_LEGENDARYDVANDSUPPLY);
 80033f0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	4a08      	ldr	r2, [pc, #32]	; (8003418 <_Z32sendCanFrameLegendaryDVAndSupplyv+0xd8>)
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff85 	bl	8003308 <_ZN8PUTM_CAN14Can_tx_messageINS_23SF_LegendaryDVAndSupplyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		return sender.send(hcan1);
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	4906      	ldr	r1, [pc, #24]	; (800341c <_Z32sendCanFrameLegendaryDVAndSupplyv+0xdc>)
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f9f6 	bl	80037f4 <_ZN8PUTM_CAN14Can_tx_messageINS_23SF_LegendaryDVAndSupplyEE4sendER19__CAN_HandleTypeDef>
 8003408:	4603      	mov	r3, r0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3730      	adds	r7, #48	; 0x30
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200004e0 	.word	0x200004e0
 8003418:	080096f4 	.word	0x080096f4
 800341c:	200002f0 	.word	0x200002f0

08003420 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_SupplyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8003420:	b5b0      	push	{r4, r5, r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4614      	mov	r4, r2
 8003432:	461d      	mov	r5, r3
 8003434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003438:	e895 0003 	ldmia.w	r5, {r0, r1}
 800343c:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3318      	adds	r3, #24
 8003444:	2208      	movs	r2, #8
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	4618      	mov	r0, r3
 800344a:	f005 f8dd 	bl	8008608 <memcpy>
  }
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bdb0      	pop	{r4, r5, r7, pc}

08003458 <_Z18sendCanFrameSupplyv>:

HAL_StatusTypeDef sendCanFrameSupply()
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08c      	sub	sp, #48	; 0x30
 800345c:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 800345e:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <_Z18sendCanFrameSupplyv+0xfc>)
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c

		PUTM_CAN::SF_Supply frame
		{
			.inverter = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_inverter)),
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe febb 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800346c:	4603      	mov	r3, r0
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe f990 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003476:	4603      	mov	r3, r0
			.laptimer = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_lapimer)),
			.bat_hv = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_bat_hv)),
			.diagport = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_diagport)),
			.pomp = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_pump)),
			.motec = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_motec))
		};
 8003478:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.front_box = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_front_box)),
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe feae 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003486:	4603      	mov	r3, r0
 8003488:	2101      	movs	r1, #1
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe f983 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003490:	4603      	mov	r3, r0
		};
 8003492:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			.dash = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_dash)),
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fea1 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2101      	movs	r1, #1
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe f976 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 80034aa:	4603      	mov	r3, r0
		};
 80034ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.laptimer = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_lapimer)),
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe fe94 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2102      	movs	r1, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe f969 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 80034c4:	4603      	mov	r3, r0
		};
 80034c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			.bat_hv = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_bat_hv)),
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	2103      	movs	r1, #3
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fe87 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe f95c 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 80034de:	4603      	mov	r3, r0
		};
 80034e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			.diagport = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_diagport)),
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	2103      	movs	r1, #3
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fe7a 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2104      	movs	r1, #4
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe f94f 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 80034f8:	4603      	mov	r3, r0
		};
 80034fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			.pomp = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_pump)),
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	2103      	movs	r1, #3
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fe6d 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003508:	4603      	mov	r3, r0
 800350a:	2105      	movs	r1, #5
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe f942 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003512:	4603      	mov	r3, r0
		};
 8003514:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.motec = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_motec))
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe fe60 	bl	80021e2 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003522:	4603      	mov	r3, r0
 8003524:	2103      	movs	r1, #3
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe f935 	bl	8001796 <_ZN9SmartFuse15getChannelStateE7Channel>
 800352c:	4603      	mov	r3, r0
		};
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		PUTM_CAN::Can_tx_message<PUTM_CAN::SF_Supply> sender(frame, PUTM_CAN::can_tx_header_SF_SUPPLY);
 8003532:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	4a07      	ldr	r2, [pc, #28]	; (8003558 <_Z18sendCanFrameSupplyv+0x100>)
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff70 	bl	8003420 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_SupplyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		return sender.send(hcan1);
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	4906      	ldr	r1, [pc, #24]	; (800355c <_Z18sendCanFrameSupplyv+0x104>)
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f969 	bl	800381c <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_SupplyEE4sendER19__CAN_HandleTypeDef>
 800354a:	4603      	mov	r3, r0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3730      	adds	r7, #48	; 0x30
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200004e0 	.word	0x200004e0
 8003558:	0800970c 	.word	0x0800970c
 800355c:	200002f0 	.word	0x200002f0

08003560 <_ZNSt5arrayIbLj8EEixEj>:
      operator[](size_type __n) noexcept
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f805 	bl	800357e <_ZNSt14__array_traitsIbLj8EE6_S_refERA8_Kbj>
 8003574:	4603      	mov	r3, r0
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_ZNSt14__array_traitsIbLj8EE6_S_refERA8_Kbj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	4413      	add	r3, r2
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800359a:	b5b0      	push	{r4, r5, r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4614      	mov	r4, r2
 80035ac:	461d      	mov	r5, r3
 80035ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80035b6:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3318      	adds	r3, #24
 80035be:	2205      	movs	r2, #5
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f005 f820 	bl	8008608 <memcpy>
  }
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080035d4 <_Z18sendCanFrameSafetyv>:

HAL_StatusTypeDef sendCanFrameSafety()
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
		PUTM_CAN::SF_safety frame
		{
			.firewall = safeties[safety_firewall],
 80035da:	2105      	movs	r1, #5
 80035dc:	481b      	ldr	r0, [pc, #108]	; (800364c <_Z18sendCanFrameSafetyv+0x78>)
 80035de:	f7ff ffbf 	bl	8003560 <_ZNSt5arrayIbLj8EEixEj>
 80035e2:	4603      	mov	r3, r0
			.dv = safeties[safety_dv],
			/*
			 * TODO: tsms not present should be hv_sense i guess
			 */
			.tsms = safeties[safety_inverter]
		};
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	f887 3020 	strb.w	r3, [r7, #32]
			.hvd = safeties[safety_hvd],
 80035ea:	2103      	movs	r1, #3
 80035ec:	4817      	ldr	r0, [pc, #92]	; (800364c <_Z18sendCanFrameSafetyv+0x78>)
 80035ee:	f7ff ffb7 	bl	8003560 <_ZNSt5arrayIbLj8EEixEj>
 80035f2:	4603      	mov	r3, r0
		};
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			.inverter = safeties[safety_inverter],
 80035fa:	2104      	movs	r1, #4
 80035fc:	4813      	ldr	r0, [pc, #76]	; (800364c <_Z18sendCanFrameSafetyv+0x78>)
 80035fe:	f7ff ffaf 	bl	8003560 <_ZNSt5arrayIbLj8EEixEj>
 8003602:	4603      	mov	r3, r0
		};
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			.dv = safeties[safety_dv],
 800360a:	2106      	movs	r1, #6
 800360c:	480f      	ldr	r0, [pc, #60]	; (800364c <_Z18sendCanFrameSafetyv+0x78>)
 800360e:	f7ff ffa7 	bl	8003560 <_ZNSt5arrayIbLj8EEixEj>
 8003612:	4603      	mov	r3, r0
		};
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			.tsms = safeties[safety_inverter]
 800361a:	2104      	movs	r1, #4
 800361c:	480b      	ldr	r0, [pc, #44]	; (800364c <_Z18sendCanFrameSafetyv+0x78>)
 800361e:	f7ff ff9f 	bl	8003560 <_ZNSt5arrayIbLj8EEixEj>
 8003622:	4603      	mov	r3, r0
		};
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PUTM_CAN::Can_tx_message<PUTM_CAN::SF_safety> sender(frame, PUTM_CAN::can_tx_header_SF_SAFETY);
 800362a:	f107 0120 	add.w	r1, r7, #32
 800362e:	463b      	mov	r3, r7
 8003630:	4a07      	ldr	r2, [pc, #28]	; (8003650 <_Z18sendCanFrameSafetyv+0x7c>)
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ffb1 	bl	800359a <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		return sender.send(hcan1);
 8003638:	463b      	mov	r3, r7
 800363a:	4906      	ldr	r1, [pc, #24]	; (8003654 <_Z18sendCanFrameSafetyv+0x80>)
 800363c:	4618      	mov	r0, r3
 800363e:	f000 f901 	bl	8003844 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>
 8003642:	4603      	mov	r3, r0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3728      	adds	r7, #40	; 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	200004d0 	.word	0x200004d0
 8003650:	08009724 	.word	0x08009724
 8003654:	200002f0 	.word	0x200002f0

08003658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	led_ok.deactivate();
 800365c:	4807      	ldr	r0, [pc, #28]	; (800367c <Error_Handler+0x24>)
 800365e:	f7fe ff2e 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 8003662:	4807      	ldr	r0, [pc, #28]	; (8003680 <Error_Handler+0x28>)
 8003664:	f7fe ff2b 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8003668:	4806      	ldr	r0, [pc, #24]	; (8003684 <Error_Handler+0x2c>)
 800366a:	f7fe ff28 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_error.activate();
 800366e:	4806      	ldr	r0, [pc, #24]	; (8003688 <Error_Handler+0x30>)
 8003670:	f7fe ff0e 	bl	8002490 <_ZN14GpioOutElement8activateEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003674:	b672      	cpsid	i
}
 8003676:	bf00      	nop

	__disable_irq();
	while (1) {}
 8003678:	e7fe      	b.n	8003678 <Error_Handler+0x20>
 800367a:	bf00      	nop
 800367c:	2000034c 	.word	0x2000034c
 8003680:	2000033c 	.word	0x2000033c
 8003684:	2000032c 	.word	0x2000032c
 8003688:	2000031c 	.word	0x2000031c

0800368c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE5beginEv>:
      begin() noexcept
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8e9 	bl	800386c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE4dataEv>
 800369a:	4603      	mov	r3, r0
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE3endEv>:
      end() noexcept
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8dd 	bl	800386c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE4dataEv>
 80036b2:	4603      	mov	r3, r0
 80036b4:	3380      	adds	r3, #128	; 0x80
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <_ZN3etl7ivectorI9SmartFuseED1Ev>:
  class ivector : public etl::vector_base
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff f89c 	bl	8002806 <_ZN3etl11vector_baseD1Ev>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	330c      	adds	r3, #12
 80036e6:	2204      	movs	r2, #4
 80036e8:	4619      	mov	r1, r3
 80036ea:	f000 f8cc 	bl	8003886 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>
    {
      this->initialise();
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f8de 	bl	80038b2 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f8e5 	bl	80038da <_ZN3etl7ivectorI9SmartFuseE5clearEv>
    }
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff ffd3 	bl	80036be <_ZN3etl7ivectorI9SmartFuseED1Ev>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_>:
    ETL_CONSTEXPR14 delegate(const TLambda& instance)
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
    {
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe fbf2 	bl	8001f1a <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>
      assign((void*)(&instance), lambda_stub<TLambda>);
 8003736:	4a05      	ldr	r2, [pc, #20]	; (800374c <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_+0x28>)
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8d8 	bl	80038f0 <_ZN3etl8delegateIFvP9SmartFuseEE6assignEPvPFvS5_S2_E>
    }
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	08003915 	.word	0x08003915

08003750 <_ZNKSt5arrayI13GpioInElementLj8EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	2308      	movs	r3, #8
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <_ZNSt5arrayI13GpioInElementLj8EEixEj>:
      operator[](size_type __n) noexcept
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6839      	ldr	r1, [r7, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f8e2 	bl	800393e <_ZNSt14__array_traitsI13GpioInElementLj8EE6_S_refERA8_KS0_j>
 800377a:	4603      	mov	r3, r0
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f103 0218 	add.w	r2, r3, #24
 8003796:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003798:	6838      	ldr	r0, [r7, #0]
 800379a:	f002 f9fa 	bl	8005b92 <HAL_CAN_AddTxMessage>
 800379e:	4603      	mov	r3, r0
  }
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000784 	.word	0x20000784

080037ac <_ZNSt5arrayI17HAL_StatusTypeDefLj6EEixEj>:
      operator[](size_type __n) noexcept
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6839      	ldr	r1, [r7, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f8ce 	bl	800395c <_ZNSt14__array_traitsI17HAL_StatusTypeDefLj6EE6_S_refERA6_KS0_j>
 80037c0:	4603      	mov	r3, r0
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <_ZN8PUTM_CAN14Can_tx_messageINS_18SF_PassiveElementsEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f103 0218 	add.w	r2, r3, #24
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <_ZN8PUTM_CAN14Can_tx_messageINS_18SF_PassiveElementsEE4sendER19__CAN_HandleTypeDef+0x24>)
 80037e0:	6838      	ldr	r0, [r7, #0]
 80037e2:	f002 f9d6 	bl	8005b92 <HAL_CAN_AddTxMessage>
 80037e6:	4603      	mov	r3, r0
  }
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000788 	.word	0x20000788

080037f4 <_ZN8PUTM_CAN14Can_tx_messageINS_23SF_LegendaryDVAndSupplyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f103 0218 	add.w	r2, r3, #24
 8003806:	4b04      	ldr	r3, [pc, #16]	; (8003818 <_ZN8PUTM_CAN14Can_tx_messageINS_23SF_LegendaryDVAndSupplyEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003808:	6838      	ldr	r0, [r7, #0]
 800380a:	f002 f9c2 	bl	8005b92 <HAL_CAN_AddTxMessage>
 800380e:	4603      	mov	r3, r0
  }
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	2000078c 	.word	0x2000078c

0800381c <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_SupplyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f103 0218 	add.w	r2, r3, #24
 800382e:	4b04      	ldr	r3, [pc, #16]	; (8003840 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_SupplyEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003830:	6838      	ldr	r0, [r7, #0]
 8003832:	f002 f9ae 	bl	8005b92 <HAL_CAN_AddTxMessage>
 8003836:	4603      	mov	r3, r0
  }
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000790 	.word	0x20000790

08003844 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f103 0218 	add.w	r2, r3, #24
 8003856:	4b04      	ldr	r3, [pc, #16]	; (8003868 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003858:	6838      	ldr	r0, [r7, #0]
 800385a:	f002 f99a 	bl	8005b92 <HAL_CAN_AddTxMessage>
 800385e:	4603      	mov	r3, r0
  }
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000794 	.word	0x20000794

0800386c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE4dataEv>:
      data() noexcept
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f87e 	bl	8003978 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj32EE6_S_ptrERA32_KS2_>
 800387c:	4603      	mov	r3, r0
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe ffa6 	bl	80027e8 <_ZN3etl11vector_baseC1Ej>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
    }
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>:
    void initialise()
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f000 f862 	bl	800398e <_ZN3etl7destroyIP9SmartFuseEEvT_S3_>
      p_end = p_buffer;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	609a      	str	r2, [r3, #8]
    }
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <_ZN3etl7ivectorI9SmartFuseE5clearEv>:
    void clear()
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
      initialise();
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff ffe5 	bl	80038b2 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_ZN3etl8delegateIFvP9SmartFuseEE6assignEPvPFvS5_S2_E>:
    }

    //*************************************************************************
    /// Assign from an object and stub.
    //*************************************************************************
    ETL_CONSTEXPR14 void assign(void* object, stub_type stub)
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
    {
      invocation.object = object;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	601a      	str	r2, [r3, #0]
      invocation.stub   = stub;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	605a      	str	r2, [r3, #4]
    }
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <_ZN3etl8delegateIFvP9SmartFuseEE11lambda_stubIZ4mainEUlS2_E_EEvPvS2_>:

    //*************************************************************************
    /// Stub call for a lambda or functor function.
    //*************************************************************************
    template <typename TLambda>
    static ETL_CONSTEXPR14 TReturn lambda_stub(void* object, TParams... arg)
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
    {
      TLambda* p = static_cast<TLambda*>(object);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	60fb      	str	r3, [r7, #12]
      return (p->operator())(etl::forward<TParams>(arg)...);
 8003922:	463b      	mov	r3, r7
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fcd5 	bl	80022d4 <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>
 800392a:	4603      	mov	r3, r0
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4619      	mov	r1, r3
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff f823 	bl	800297c <_ZZ4mainENKUlP9SmartFuseE_clES0_>
 8003936:	bf00      	nop
    }
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <_ZNSt14__array_traitsI13GpioInElementLj8EE6_S_refERA8_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <_ZNSt14__array_traitsI17HAL_StatusTypeDefLj6EE6_S_refERA6_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4413      	add	r3, r2
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj32EE6_S_ptrERA32_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <_ZN3etl7destroyIP9SmartFuseEEvT_S3_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f804 	bl	80039a8 <_ZSt7destroyIP9SmartFuseEvT_S2_>
  }
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <_ZSt7destroyIP9SmartFuseEvT_S2_>:
    }

#if __cplusplus >= 201703L
  template <typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 80039b2:	6839      	ldr	r1, [r7, #0]
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f804 	bl	80039c2 <_ZSt8_DestroyIP9SmartFuseEvT_S2_>
    }
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <_ZSt8_DestroyIP9SmartFuseEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80039cc:	f7fe ff04 	bl	80027d8 <_ZSt21is_constant_evaluatedv>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <_ZSt8_DestroyIP9SmartFuseEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80039d6:	6839      	ldr	r1, [r7, #0]
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f808 	bl	80039ee <_ZNSt12_Destroy_auxILb0EE9__destroyIP9SmartFuseEEvT_S4_>
 80039de:	e003      	b.n	80039e8 <_ZSt8_DestroyIP9SmartFuseEvT_S2_+0x26>
	__destroy(__first, __last);
 80039e0:	6839      	ldr	r1, [r7, #0]
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f81b 	bl	8003a1e <_ZNSt12_Destroy_auxILb1EE9__destroyIP9SmartFuseEEvT_S4_>
    }
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <_ZNSt12_Destroy_auxILb0EE9__destroyIP9SmartFuseEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d00a      	beq.n	8003a16 <_ZNSt12_Destroy_auxILb0EE9__destroyIP9SmartFuseEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f817 	bl	8003a34 <_ZSt11__addressofI9SmartFuseEPT_RS1_>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f81e 	bl	8003a4a <_ZSt8_DestroyI9SmartFuseEvPT_>
	  for (; __first != __last; ++__first)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	33a4      	adds	r3, #164	; 0xa4
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	e7f0      	b.n	80039f8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP9SmartFuseEEvT_S4_+0xa>
	}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <_ZNSt12_Destroy_auxILb1EE9__destroyIP9SmartFuseEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <_ZSt11__addressofI9SmartFuseEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <_ZSt8_DestroyI9SmartFuseEvPT_>:
    _Destroy(_Tp* __pointer)
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f804 	bl	8003a60 <_ZSt10destroy_atI9SmartFuseEvPT_>
    }
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <_ZSt10destroy_atI9SmartFuseEvPT_>:
    destroy_at(_Tp* __location)
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
    }
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <_ZN16SmartFuseHandlerILm4EED1Ev>:
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fe3e 	bl	8003700 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <_Z41__static_initialization_and_destruction_0ii>:

  /* USER CODE END Error_Handler_Debug */
}
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d174      	bne.n	8003b8a <_Z41__static_initialization_and_destruction_0ii+0xfa>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d16f      	bne.n	8003b8a <_Z41__static_initialization_and_destruction_0ii+0xfa>
GpioOutElement led_error(GPIOC, GPIO_PIN_0, true);
 8003aaa:	2301      	movs	r3, #1
 8003aac:	2201      	movs	r2, #1
 8003aae:	4958      	ldr	r1, [pc, #352]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003ab0:	4858      	ldr	r0, [pc, #352]	; (8003c14 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8003ab2:	f7fe fcd5 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_1, true);
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	2202      	movs	r2, #2
 8003aba:	4955      	ldr	r1, [pc, #340]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003abc:	4856      	ldr	r0, [pc, #344]	; (8003c18 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8003abe:	f7fe fccf 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_2, true);
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	4952      	ldr	r1, [pc, #328]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003ac8:	4854      	ldr	r0, [pc, #336]	; (8003c1c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8003aca:	f7fe fcc9 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_ok(GPIOC, GPIO_PIN_3, true);
 8003ace:	2301      	movs	r3, #1
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	494f      	ldr	r1, [pc, #316]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003ad4:	4852      	ldr	r0, [pc, #328]	; (8003c20 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8003ad6:	f7fe fcc3 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 8003ada:	2300      	movs	r3, #0
 8003adc:	2220      	movs	r2, #32
 8003ade:	4951      	ldr	r1, [pc, #324]	; (8003c24 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8003ae0:	4851      	ldr	r0, [pc, #324]	; (8003c28 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8003ae2:	f7fe fcbd 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	494e      	ldr	r1, [pc, #312]	; (8003c24 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8003aec:	484f      	ldr	r0, [pc, #316]	; (8003c2c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8003aee:	f7fe fcb7 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003af2:	2300      	movs	r3, #0
 8003af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003af8:	494a      	ldr	r1, [pc, #296]	; (8003c24 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8003afa:	484d      	ldr	r0, [pc, #308]	; (8003c30 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8003afc:	f7fe fcb0 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement water_pot_enable(GPIOB, GPIO_PIN_2, true);
 8003b00:	2301      	movs	r3, #1
 8003b02:	2204      	movs	r2, #4
 8003b04:	4947      	ldr	r1, [pc, #284]	; (8003c24 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8003b06:	484b      	ldr	r0, [pc, #300]	; (8003c34 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8003b08:	f7fe fcaa 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioInElement water_pot_state(GPIOB, GPIO_PIN_4, false);
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2210      	movs	r2, #16
 8003b10:	4944      	ldr	r1, [pc, #272]	; (8003c24 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8003b12:	4849      	ldr	r0, [pc, #292]	; (8003c38 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8003b14:	f7fe fcea 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement spare_2_sense_sig(GPIOC, GPIO_PIN_6, false);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2240      	movs	r2, #64	; 0x40
 8003b1c:	493c      	ldr	r1, [pc, #240]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003b1e:	4847      	ldr	r0, [pc, #284]	; (8003c3c <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8003b20:	f7fe fce4 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement spare_3_sense_sig(GPIOC, GPIO_PIN_7, false);
 8003b24:	2300      	movs	r3, #0
 8003b26:	2280      	movs	r2, #128	; 0x80
 8003b28:	4939      	ldr	r1, [pc, #228]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003b2a:	4845      	ldr	r0, [pc, #276]	; (8003c40 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8003b2c:	f7fe fcde 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement hv_sense_sig(GPIOC, GPIO_PIN_8, false);
 8003b30:	2300      	movs	r3, #0
 8003b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b36:	4936      	ldr	r1, [pc, #216]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003b38:	4842      	ldr	r0, [pc, #264]	; (8003c44 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8003b3a:	f7fe fcd7 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement hvd_sense_sig(GPIOC, GPIO_PIN_9, false);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b44:	4932      	ldr	r1, [pc, #200]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003b46:	4840      	ldr	r0, [pc, #256]	; (8003c48 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8003b48:	f7fe fcd0 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement inverter_sense_sig(GPIOC, GPIO_PIN_10, false);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b52:	492f      	ldr	r1, [pc, #188]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003b54:	483d      	ldr	r0, [pc, #244]	; (8003c4c <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8003b56:	f7fe fcc9 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement firewall_sense_sig(GPIOC, GPIO_PIN_11, false);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b60:	492b      	ldr	r1, [pc, #172]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003b62:	483b      	ldr	r0, [pc, #236]	; (8003c50 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8003b64:	f7fe fcc2 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement dv_sense_sig(GPIOC, GPIO_PIN_12, false);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b6e:	4928      	ldr	r1, [pc, #160]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003b70:	4838      	ldr	r0, [pc, #224]	; (8003c54 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8003b72:	f7fe fcbb 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement spare_1_sense_sig(GPIOC, GPIO_PIN_13, false);
 8003b76:	2300      	movs	r3, #0
 8003b78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b7c:	4924      	ldr	r1, [pc, #144]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8003b7e:	4836      	ldr	r0, [pc, #216]	; (8003c58 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003b80:	f7fe fcb4 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
SmartFuseHandler < number_of_fuses > sf_handler;
 8003b84:	4835      	ldr	r0, [pc, #212]	; (8003c5c <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8003b86:	f7fe feeb 	bl	8002960 <_ZN16SmartFuseHandlerILm4EEC1Ev>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d13a      	bne.n	8003c06 <_Z41__static_initialization_and_destruction_0ii+0x176>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d135      	bne.n	8003c06 <_Z41__static_initialization_and_destruction_0ii+0x176>
 8003b9a:	4830      	ldr	r0, [pc, #192]	; (8003c5c <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8003b9c:	f7ff ff6a 	bl	8003a74 <_ZN16SmartFuseHandlerILm4EED1Ev>
GpioInElement spare_1_sense_sig(GPIOC, GPIO_PIN_13, false);
 8003ba0:	482d      	ldr	r0, [pc, #180]	; (8003c58 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003ba2:	f7fe fcdb 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement dv_sense_sig(GPIOC, GPIO_PIN_12, false);
 8003ba6:	482b      	ldr	r0, [pc, #172]	; (8003c54 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8003ba8:	f7fe fcd8 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement firewall_sense_sig(GPIOC, GPIO_PIN_11, false);
 8003bac:	4828      	ldr	r0, [pc, #160]	; (8003c50 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8003bae:	f7fe fcd5 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement inverter_sense_sig(GPIOC, GPIO_PIN_10, false);
 8003bb2:	4826      	ldr	r0, [pc, #152]	; (8003c4c <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8003bb4:	f7fe fcd2 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement hvd_sense_sig(GPIOC, GPIO_PIN_9, false);
 8003bb8:	4823      	ldr	r0, [pc, #140]	; (8003c48 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8003bba:	f7fe fccf 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement hv_sense_sig(GPIOC, GPIO_PIN_8, false);
 8003bbe:	4821      	ldr	r0, [pc, #132]	; (8003c44 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8003bc0:	f7fe fccc 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement spare_3_sense_sig(GPIOC, GPIO_PIN_7, false);
 8003bc4:	481e      	ldr	r0, [pc, #120]	; (8003c40 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8003bc6:	f7fe fcc9 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement spare_2_sense_sig(GPIOC, GPIO_PIN_6, false);
 8003bca:	481c      	ldr	r0, [pc, #112]	; (8003c3c <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8003bcc:	f7fe fcc6 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement water_pot_state(GPIOB, GPIO_PIN_4, false);
 8003bd0:	4819      	ldr	r0, [pc, #100]	; (8003c38 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8003bd2:	f7fe fcc3 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioOutElement water_pot_enable(GPIOB, GPIO_PIN_2, true);
 8003bd6:	4817      	ldr	r0, [pc, #92]	; (8003c34 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8003bd8:	f7fe fce2 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003bdc:	4814      	ldr	r0, [pc, #80]	; (8003c30 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8003bde:	f7fe fcdf 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003be2:	4812      	ldr	r0, [pc, #72]	; (8003c2c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8003be4:	f7fe fcdc 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 8003be8:	480f      	ldr	r0, [pc, #60]	; (8003c28 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8003bea:	f7fe fcd9 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_ok(GPIOC, GPIO_PIN_3, true);
 8003bee:	480c      	ldr	r0, [pc, #48]	; (8003c20 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8003bf0:	f7fe fcd6 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_2, true);
 8003bf4:	4809      	ldr	r0, [pc, #36]	; (8003c1c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8003bf6:	f7fe fcd3 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_1, true);
 8003bfa:	4807      	ldr	r0, [pc, #28]	; (8003c18 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8003bfc:	f7fe fcd0 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_error(GPIOC, GPIO_PIN_0, true);
 8003c00:	4804      	ldr	r0, [pc, #16]	; (8003c14 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8003c02:	f7fe fccd 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	48000800 	.word	0x48000800
 8003c14:	2000031c 	.word	0x2000031c
 8003c18:	2000032c 	.word	0x2000032c
 8003c1c:	2000033c 	.word	0x2000033c
 8003c20:	2000034c 	.word	0x2000034c
 8003c24:	48000400 	.word	0x48000400
 8003c28:	2000035c 	.word	0x2000035c
 8003c2c:	2000036c 	.word	0x2000036c
 8003c30:	2000037c 	.word	0x2000037c
 8003c34:	2000038c 	.word	0x2000038c
 8003c38:	2000039c 	.word	0x2000039c
 8003c3c:	200003ac 	.word	0x200003ac
 8003c40:	200003bc 	.word	0x200003bc
 8003c44:	200003cc 	.word	0x200003cc
 8003c48:	200003dc 	.word	0x200003dc
 8003c4c:	200003ec 	.word	0x200003ec
 8003c50:	200003fc 	.word	0x200003fc
 8003c54:	2000040c 	.word	0x2000040c
 8003c58:	2000041c 	.word	0x2000041c
 8003c5c:	200004e0 	.word	0x200004e0

08003c60 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	7993      	ldrb	r3, [r2, #6]
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	1dd8      	adds	r0, r3, #7
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	331c      	adds	r3, #28
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f004 fcc2 	bl	8008608 <memcpy>
  }
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	7993      	ldrb	r3, [r2, #6]
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3307      	adds	r3, #7
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	321c      	adds	r2, #28
 8003ca8:	8812      	ldrh	r2, [r2, #0]
 8003caa:	b292      	uxth	r2, r2
 8003cac:	801a      	strh	r2, [r3, #0]
  }
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	7993      	ldrb	r3, [r2, #6]
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3307      	adds	r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	321c      	adds	r2, #28
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	601a      	str	r2, [r3, #0]
  }
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	7993      	ldrb	r3, [r2, #6]
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	1dd8      	adds	r0, r3, #7
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	331c      	adds	r3, #28
 8003d02:	2206      	movs	r2, #6
 8003d04:	4619      	mov	r1, r3
 8003d06:	f004 fc7f 	bl	8008608 <memcpy>
  }
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	7993      	ldrb	r3, [r2, #6]
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	1dd8      	adds	r0, r3, #7
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	331c      	adds	r3, #28
 8003d2e:	2206      	movs	r2, #6
 8003d30:	4619      	mov	r1, r3
 8003d32:	f004 fc69 	bl	8008608 <memcpy>
  }
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	7993      	ldrb	r3, [r2, #6]
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	1dd8      	adds	r0, r3, #7
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	331c      	adds	r3, #28
 8003d5a:	2206      	movs	r2, #6
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f004 fc53 	bl	8008608 <memcpy>
  }
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	7993      	ldrb	r3, [r2, #6]
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	1dd8      	adds	r0, r3, #7
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	331c      	adds	r3, #28
 8003d86:	2208      	movs	r2, #8
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f004 fc3d 	bl	8008608 <memcpy>
  }
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	7993      	ldrb	r3, [r2, #6]
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3307      	adds	r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	321c      	adds	r2, #28
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	601a      	str	r2, [r3, #0]
  }
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	7993      	ldrb	r3, [r2, #6]
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	1dd8      	adds	r0, r3, #7
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	331c      	adds	r3, #28
 8003dde:	2208      	movs	r2, #8
 8003de0:	4619      	mov	r1, r3
 8003de2:	f004 fc11 	bl	8008608 <memcpy>
  }
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	7993      	ldrb	r3, [r2, #6]
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	1dd8      	adds	r0, r3, #7
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	331c      	adds	r3, #28
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f004 fbfb 	bl	8008608 <memcpy>
  }
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	7993      	ldrb	r3, [r2, #6]
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	1dd8      	adds	r0, r3, #7
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	331c      	adds	r3, #28
 8003e36:	2203      	movs	r2, #3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f004 fbe5 	bl	8008608 <memcpy>
  }
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	7993      	ldrb	r3, [r2, #6]
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	1dd8      	adds	r0, r3, #7
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	331c      	adds	r3, #28
 8003e62:	2205      	movs	r2, #5
 8003e64:	4619      	mov	r1, r3
 8003e66:	f004 fbcf 	bl	8008608 <memcpy>
  }
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <_ZN8PUTM_CAN6DeviceINS_18SF_PassiveElementsEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	7993      	ldrb	r3, [r2, #6]
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	1dd8      	adds	r0, r3, #7
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	331c      	adds	r3, #28
 8003e8e:	2208      	movs	r2, #8
 8003e90:	4619      	mov	r1, r3
 8003e92:	f004 fbb9 	bl	8008608 <memcpy>
  }
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_ZN8PUTM_CAN6DeviceINS_9SF_SupplyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	7993      	ldrb	r3, [r2, #6]
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	1dd8      	adds	r0, r3, #7
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	331c      	adds	r3, #28
 8003eba:	2208      	movs	r2, #8
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f004 fba3 	bl	8008608 <memcpy>
  }
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_ZN8PUTM_CAN6DeviceINS_23SF_LegendaryDVAndSupplyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	7993      	ldrb	r3, [r2, #6]
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	1dd8      	adds	r0, r3, #7
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	331c      	adds	r3, #28
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f004 fb8d 	bl	8008608 <memcpy>
  }
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	7993      	ldrb	r3, [r2, #6]
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	1dd8      	adds	r0, r3, #7
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	331c      	adds	r3, #28
 8003f12:	2205      	movs	r2, #5
 8003f14:	4619      	mov	r1, r3
 8003f16:	f004 fb77 	bl	8008608 <memcpy>
  }
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	7993      	ldrb	r3, [r2, #6]
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3307      	adds	r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	321c      	adds	r2, #28
 8003f3e:	8812      	ldrh	r2, [r2, #0]
 8003f40:	b292      	uxth	r2, r2
 8003f42:	801a      	strh	r2, [r3, #0]
  }
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	7993      	ldrb	r3, [r2, #6]
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3307      	adds	r3, #7
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	321c      	adds	r2, #28
 8003f6c:	7812      	ldrb	r2, [r2, #0]
 8003f6e:	701a      	strb	r2, [r3, #0]
  }
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_ZN8PUTM_CAN6DeviceINS_25Dash_steering_wheel_angleEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	7993      	ldrb	r3, [r2, #6]
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3307      	adds	r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	321c      	adds	r2, #28
 8003f98:	8812      	ldrh	r2, [r2, #0]
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	801a      	strh	r2, [r3, #0]
  }
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	7993      	ldrb	r3, [r2, #6]
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3307      	adds	r3, #7
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	321c      	adds	r2, #28
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	601a      	str	r2, [r3, #0]
  }
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	7993      	ldrb	r3, [r2, #6]
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3307      	adds	r3, #7
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	321c      	adds	r2, #28
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	701a      	strb	r2, [r3, #0]
  }
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	7993      	ldrb	r3, [r2, #6]
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3307      	adds	r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	321c      	adds	r2, #28
 800401e:	8812      	ldrh	r2, [r2, #0]
 8004020:	b292      	uxth	r2, r2
 8004022:	801a      	strh	r2, [r3, #0]
  }
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
    new_data = true;
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	7993      	ldrb	r3, [r2, #6]
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	1dd8      	adds	r0, r3, #7
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	331c      	adds	r3, #28
 800404c:	2208      	movs	r2, #8
 800404e:	4619      	mov	r1, r3
 8004050:	f004 fada 	bl	8008608 <memcpy>
  }
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	7993      	ldrb	r3, [r2, #6]
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3307      	adds	r3, #7
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	321c      	adds	r2, #28
 8004078:	7812      	ldrb	r2, [r2, #0]
 800407a:	701a      	strb	r2, [r3, #0]
  }
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	7993      	ldrb	r3, [r2, #6]
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	1dd8      	adds	r0, r3, #7
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	331c      	adds	r3, #28
 80040a4:	2208      	movs	r2, #8
 80040a6:	4619      	mov	r1, r3
 80040a8:	f004 faae 	bl	8008608 <memcpy>
  }
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	7993      	ldrb	r3, [r2, #6]
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	1dd8      	adds	r0, r3, #7
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	331c      	adds	r3, #28
 80040d0:	2206      	movs	r2, #6
 80040d2:	4619      	mov	r1, r3
 80040d4:	f004 fa98 	bl	8008608 <memcpy>
  }
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	7993      	ldrb	r3, [r2, #6]
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	1dd8      	adds	r0, r3, #7
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	331c      	adds	r3, #28
 80040fc:	2208      	movs	r2, #8
 80040fe:	4619      	mov	r1, r3
 8004100:	f004 fa82 	bl	8008608 <memcpy>
  }
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	7993      	ldrb	r3, [r2, #6]
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3307      	adds	r3, #7
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	321c      	adds	r2, #28
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	701a      	strb	r2, [r3, #0]
  }
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	7993      	ldrb	r3, [r2, #6]
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1dd8      	adds	r0, r3, #7
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	331c      	adds	r3, #28
 8004154:	2206      	movs	r2, #6
 8004156:	4619      	mov	r1, r3
 8004158:	f004 fa56 	bl	8008608 <memcpy>
  }
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	7993      	ldrb	r3, [r2, #6]
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	1dd8      	adds	r0, r3, #7
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	331c      	adds	r3, #28
 8004180:	2206      	movs	r2, #6
 8004182:	4619      	mov	r1, r3
 8004184:	f004 fa40 	bl	8008608 <memcpy>
  }
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
    new_data = true;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	7993      	ldrb	r3, [r2, #6]
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	1dd8      	adds	r0, r3, #7
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	331c      	adds	r3, #28
 80041ac:	2208      	movs	r2, #8
 80041ae:	4619      	mov	r1, r3
 80041b0:	f004 fa2a 	bl	8008608 <memcpy>
  }
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	7993      	ldrb	r3, [r2, #6]
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1dd8      	adds	r0, r3, #7
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	331c      	adds	r3, #28
 80041d8:	2205      	movs	r2, #5
 80041da:	4619      	mov	r1, r3
 80041dc:	f004 fa14 	bl	8008608 <memcpy>
  }
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041f0:	2001      	movs	r0, #1
 80041f2:	f7ff fc4d 	bl	8003a90 <_Z41__static_initialization_and_destruction_0ii>
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_GLOBAL__sub_D__ZN8PUTM_CAN3canE>:
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004200:	2000      	movs	r0, #0
 8004202:	f7ff fc45 	bl	8003a90 <_Z41__static_initialization_and_destruction_0ii>
 8004206:	bd80      	pop	{r7, pc}

08004208 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800420c:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <MX_SPI1_Init+0xa0>)
 800420e:	4a27      	ldr	r2, [pc, #156]	; (80042ac <MX_SPI1_Init+0xa4>)
 8004210:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004212:	4b25      	ldr	r3, [pc, #148]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004218:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800421a:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <MX_SPI1_Init+0xa0>)
 800421c:	2200      	movs	r2, #0
 800421e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004220:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004222:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004226:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004228:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <MX_SPI1_Init+0xa0>)
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800422e:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004230:	2200      	movs	r2, #0
 8004232:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004234:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800423c:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <MX_SPI1_Init+0xa0>)
 800423e:	2218      	movs	r2, #24
 8004240:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004242:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004244:	2200      	movs	r2, #0
 8004246:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <MX_SPI1_Init+0xa0>)
 800424a:	2200      	movs	r2, #0
 800424c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800424e:	4b16      	ldr	r3, [pc, #88]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004250:	2200      	movs	r2, #0
 8004252:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004254:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004256:	2207      	movs	r2, #7
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <MX_SPI1_Init+0xa0>)
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004262:	2200      	movs	r2, #0
 8004264:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004266:	4810      	ldr	r0, [pc, #64]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004268:	f004 f8c4 	bl	80083f4 <HAL_SPI_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004272:	f7ff f9f1 	bl	8003658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <MX_SPI1_Init+0xa0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004284:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d007      	beq.n	80042a4 <MX_SPI1_Init+0x9c>
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <MX_SPI1_Init+0xa0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <MX_SPI1_Init+0xa0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a2:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 80042a4:	bf00      	nop
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000798 	.word	0x20000798
 80042ac:	40013000 	.word	0x40013000

080042b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a17      	ldr	r2, [pc, #92]	; (800432c <HAL_SPI_MspInit+0x7c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d128      	bne.n	8004324 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042d2:	4b17      	ldr	r3, [pc, #92]	; (8004330 <HAL_SPI_MspInit+0x80>)
 80042d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_SPI_MspInit+0x80>)
 80042d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042dc:	6613      	str	r3, [r2, #96]	; 0x60
 80042de:	4b14      	ldr	r3, [pc, #80]	; (8004330 <HAL_SPI_MspInit+0x80>)
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ea:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_SPI_MspInit+0x80>)
 80042ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <HAL_SPI_MspInit+0x80>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <HAL_SPI_MspInit+0x80>)
 80042f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004302:	23e0      	movs	r3, #224	; 0xe0
 8004304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004306:	2302      	movs	r3, #2
 8004308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800430a:	2302      	movs	r3, #2
 800430c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800430e:	2303      	movs	r3, #3
 8004310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004312:	2305      	movs	r3, #5
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004316:	f107 0314 	add.w	r3, r7, #20
 800431a:	4619      	mov	r1, r3
 800431c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004320:	f002 f98c 	bl	800663c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004324:	bf00      	nop
 8004326:	3728      	adds	r7, #40	; 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40013000 	.word	0x40013000
 8004330:	40021000 	.word	0x40021000

08004334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800433a:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_MspInit+0x44>)
 800433c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433e:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <HAL_MspInit+0x44>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	6613      	str	r3, [r2, #96]	; 0x60
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <HAL_MspInit+0x44>)
 8004348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_MspInit+0x44>)
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <HAL_MspInit+0x44>)
 8004358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435c:	6593      	str	r3, [r2, #88]	; 0x58
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_MspInit+0x44>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000

0800437c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004380:	e7fe      	b.n	8004380 <NMI_Handler+0x4>

08004382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004382:	b480      	push	{r7}
 8004384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004386:	e7fe      	b.n	8004386 <HardFault_Handler+0x4>

08004388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800438c:	e7fe      	b.n	800438c <MemManage_Handler+0x4>

0800438e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800438e:	b480      	push	{r7}
 8004390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004392:	e7fe      	b.n	8004392 <BusFault_Handler+0x4>

08004394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004398:	e7fe      	b.n	8004398 <UsageFault_Handler+0x4>

0800439a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043c8:	f000 f9de 	bl	8004788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043cc:	bf00      	nop
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80043d4:	4802      	ldr	r0, [pc, #8]	; (80043e0 <CAN1_RX0_IRQHandler+0x10>)
 80043d6:	f001 fdef 	bl	8005fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	200002f0 	.word	0x200002f0

080043e4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80043e8:	4802      	ldr	r0, [pc, #8]	; (80043f4 <CAN1_RX1_IRQHandler+0x10>)
 80043ea:	f001 fde5 	bl	8005fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	200002f0 	.word	0x200002f0

080043f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
	return 1;
 80043fc:	2301      	movs	r3, #1
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <_kill>:

int _kill(int pid, int sig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004412:	f004 f8b5 	bl	8008580 <__errno>
 8004416:	4603      	mov	r3, r0
 8004418:	2216      	movs	r2, #22
 800441a:	601a      	str	r2, [r3, #0]
	return -1;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_exit>:

void _exit (int status)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004430:	f04f 31ff 	mov.w	r1, #4294967295
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff ffe7 	bl	8004408 <_kill>
	while (1) {}		/* Make sure we hang here */
 800443a:	e7fe      	b.n	800443a <_exit+0x12>

0800443c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e00a      	b.n	8004464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800444e:	f3af 8000 	nop.w
 8004452:	4601      	mov	r1, r0
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	60ba      	str	r2, [r7, #8]
 800445a:	b2ca      	uxtb	r2, r1
 800445c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	3301      	adds	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	dbf0      	blt.n	800444e <_read+0x12>
	}

return len;
 800446c:	687b      	ldr	r3, [r7, #4]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e009      	b.n	800449c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	60ba      	str	r2, [r7, #8]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	3301      	adds	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	dbf1      	blt.n	8004488 <_write+0x12>
	}
	return len;
 80044a4:	687b      	ldr	r3, [r7, #4]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <_close>:

int _close(int file)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
	return -1;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044d6:	605a      	str	r2, [r3, #4]
	return 0;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <_isatty>:

int _isatty(int file)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
	return 1;
 80044ee:	2301      	movs	r3, #1
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
	return 0;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <_sbrk+0x5c>)
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <_sbrk+0x60>)
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800452c:	4b13      	ldr	r3, [pc, #76]	; (800457c <_sbrk+0x64>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d102      	bne.n	800453a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <_sbrk+0x64>)
 8004536:	4a12      	ldr	r2, [pc, #72]	; (8004580 <_sbrk+0x68>)
 8004538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <_sbrk+0x64>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	429a      	cmp	r2, r3
 8004546:	d207      	bcs.n	8004558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004548:	f004 f81a 	bl	8008580 <__errno>
 800454c:	4603      	mov	r3, r0
 800454e:	220c      	movs	r2, #12
 8004550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004552:	f04f 33ff 	mov.w	r3, #4294967295
 8004556:	e009      	b.n	800456c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004558:	4b08      	ldr	r3, [pc, #32]	; (800457c <_sbrk+0x64>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <_sbrk+0x64>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4413      	add	r3, r2
 8004566:	4a05      	ldr	r2, [pc, #20]	; (800457c <_sbrk+0x64>)
 8004568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800456a:	68fb      	ldr	r3, [r7, #12]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20050000 	.word	0x20050000
 8004578:	00000400 	.word	0x00000400
 800457c:	200007fc 	.word	0x200007fc
 8004580:	20000818 	.word	0x20000818

08004584 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <SystemInit+0x20>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <SystemInit+0x20>)
 8004590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 80045b6:	f000 f8fb 	bl	80047b0 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	601a      	str	r2, [r3, #0]
}
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_ZN5TimerC1Em>:

Timer::Timer(uint32_t timeout) : timeout(timeout)
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 80045da:	f000 f8e9 	bl	80047b0 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <_ZN5Timer10setTimeOutEm>:

void Timer::setTimeOut(uint32_t timeout)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
	this->timeout = timeout;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	605a      	str	r2, [r3, #4]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <_ZN5Timer7restartEv>:

void Timer::restart()
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
	this->start_time = HAL_GetTick();
 8004612:	f000 f8cd 	bl	80047b0 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <_ZN5Timer23checkIfTimedOutAndResetEv>:

bool Timer::checkIfTimedOutAndReset()
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
	if(this->timeout == 0) return false;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <_ZN5Timer23checkIfTimedOutAndResetEv+0x1e>
 800463e:	2300      	movs	r3, #0
 8004640:	e012      	b.n	8004668 <_ZN5Timer23checkIfTimedOutAndResetEv+0x44>

	if(this->getPassedTime() >= this->timeout)
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f814 	bl	8004670 <_ZN5Timer13getPassedTimeEv>
 8004648:	4602      	mov	r2, r0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	429a      	cmp	r2, r3
 8004650:	bf2c      	ite	cs
 8004652:	2301      	movcs	r3, #1
 8004654:	2300      	movcc	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <_ZN5Timer23checkIfTimedOutAndResetEv+0x42>
	{
		this->restart();
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ffd4 	bl	800460a <_ZN5Timer7restartEv>
		return true;
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <_ZN5Timer23checkIfTimedOutAndResetEv+0x44>
	}

	return false;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - this->start_time;
 8004678:	f000 f89a 	bl	80047b0 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	1ad3      	subs	r3, r2, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800468c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004690:	f7ff ff78 	bl	8004584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004694:	480c      	ldr	r0, [pc, #48]	; (80046c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004696:	490d      	ldr	r1, [pc, #52]	; (80046cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004698:	4a0d      	ldr	r2, [pc, #52]	; (80046d0 <LoopForever+0xe>)
  movs r3, #0
 800469a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800469c:	e002      	b.n	80046a4 <LoopCopyDataInit>

0800469e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800469e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046a2:	3304      	adds	r3, #4

080046a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046a8:	d3f9      	bcc.n	800469e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046aa:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046ac:	4c0a      	ldr	r4, [pc, #40]	; (80046d8 <LoopForever+0x16>)
  movs r3, #0
 80046ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046b0:	e001      	b.n	80046b6 <LoopFillZerobss>

080046b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046b4:	3204      	adds	r2, #4

080046b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046b8:	d3fb      	bcc.n	80046b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046ba:	f003 ff79 	bl	80085b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046be:	f7fe f9e7 	bl	8002a90 <main>

080046c2 <LoopForever>:

LoopForever:
    b LoopForever
 80046c2:	e7fe      	b.n	80046c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80046c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80046c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046cc:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 80046d0:	080099e0 	.word	0x080099e0
  ldr r2, =_sbss
 80046d4:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 80046d8:	20000814 	.word	0x20000814

080046dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046dc:	e7fe      	b.n	80046dc <ADC1_2_IRQHandler>

080046de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e8:	2003      	movs	r0, #3
 80046ea:	f001 ff65 	bl	80065b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046ee:	200f      	movs	r0, #15
 80046f0:	f000 f80e 	bl	8004710 <HAL_InitTick>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	71fb      	strb	r3, [r7, #7]
 80046fe:	e001      	b.n	8004704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004700:	f7ff fe18 	bl	8004334 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004704:	79fb      	ldrb	r3, [r7, #7]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800471c:	4b17      	ldr	r3, [pc, #92]	; (800477c <HAL_InitTick+0x6c>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d023      	beq.n	800476c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <HAL_InitTick+0x70>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <HAL_InitTick+0x6c>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	4619      	mov	r1, r3
 800472e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004732:	fbb3 f3f1 	udiv	r3, r3, r1
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	4618      	mov	r0, r3
 800473c:	f001 ff71 	bl	8006622 <HAL_SYSTICK_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10f      	bne.n	8004766 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b0f      	cmp	r3, #15
 800474a:	d809      	bhi.n	8004760 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800474c:	2200      	movs	r2, #0
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	f001 ff3b 	bl	80065ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004758:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <HAL_InitTick+0x74>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e007      	b.n	8004770 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
 8004764:	e004      	b.n	8004770 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
 800476a:	e001      	b.n	8004770 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000204 	.word	0x20000204
 8004780:	200001fc 	.word	0x200001fc
 8004784:	20000200 	.word	0x20000200

08004788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_IncTick+0x20>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_IncTick+0x24>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4413      	add	r3, r2
 8004798:	4a04      	ldr	r2, [pc, #16]	; (80047ac <HAL_IncTick+0x24>)
 800479a:	6013      	str	r3, [r2, #0]
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000204 	.word	0x20000204
 80047ac:	20000800 	.word	0x20000800

080047b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  return uwTick;
 80047b4:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <HAL_GetTick+0x14>)
 80047b6:	681b      	ldr	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000800 	.word	0x20000800

080047c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047d0:	f7ff ffee 	bl	80047b0 <HAL_GetTick>
 80047d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d005      	beq.n	80047ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <HAL_Delay+0x44>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047ee:	bf00      	nop
 80047f0:	f7ff ffde 	bl	80047b0 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d8f7      	bhi.n	80047f0 <HAL_Delay+0x28>
  {
  }
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000204 	.word	0x20000204

08004810 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	609a      	str	r2, [r3, #8]
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	609a      	str	r2, [r3, #8]
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3360      	adds	r3, #96	; 0x60
 800488a:	461a      	mov	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b08      	ldr	r3, [pc, #32]	; (80048bc <LL_ADC_SetOffset+0x44>)
 800489a:	4013      	ands	r3, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	03fff000 	.word	0x03fff000

080048c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3360      	adds	r3, #96	; 0x60
 80048ce:	461a      	mov	r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3360      	adds	r3, #96	; 0x60
 80048fc:	461a      	mov	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	431a      	orrs	r2, r3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004916:	bf00      	nop
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	615a      	str	r2, [r3, #20]
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3330      	adds	r3, #48	; 0x30
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	4413      	add	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	211f      	movs	r1, #31
 8004974:	fa01 f303 	lsl.w	r3, r1, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	401a      	ands	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	0e9b      	lsrs	r3, r3, #26
 8004980:	f003 011f 	and.w	r1, r3, #31
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	fa01 f303 	lsl.w	r3, r1, r3
 800498e:	431a      	orrs	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3314      	adds	r3, #20
 80049b0:	461a      	mov	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	0e5b      	lsrs	r3, r3, #25
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	4413      	add	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	0d1b      	lsrs	r3, r3, #20
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	2107      	movs	r1, #7
 80049ce:	fa01 f303 	lsl.w	r3, r1, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	401a      	ands	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	0d1b      	lsrs	r3, r3, #20
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	431a      	orrs	r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a10:	43db      	mvns	r3, r3
 8004a12:	401a      	ands	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0318 	and.w	r3, r3, #24
 8004a1a:	4908      	ldr	r1, [pc, #32]	; (8004a3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a1c:	40d9      	lsrs	r1, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	400b      	ands	r3, r1
 8004a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a26:	431a      	orrs	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	0007ffff 	.word	0x0007ffff

08004a40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6093      	str	r3, [r2, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a78:	d101      	bne.n	8004a7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004aa0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ac8:	d101      	bne.n	8004ace <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <LL_ADC_IsEnabled+0x18>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <LL_ADC_IsEnabled+0x1a>
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d101      	bne.n	8004b1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d101      	bne.n	8004b40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b089      	sub	sp, #36	; 0x24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e134      	b.n	8004dd4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fb fc07 	bl	800038c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff67 	bl	8004a64 <LL_ADC_IsDeepPowerDownEnabled>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff4d 	bl	8004a40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff ff82 	bl	8004ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d115      	bne.n	8004be2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff ff66 	bl	8004a8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bc0:	4b86      	ldr	r3, [pc, #536]	; (8004ddc <HAL_ADC_Init+0x28c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	099b      	lsrs	r3, r3, #6
 8004bc6:	4a86      	ldr	r2, [pc, #536]	; (8004de0 <HAL_ADC_Init+0x290>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	099b      	lsrs	r3, r3, #6
 8004bce:	3301      	adds	r3, #1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004bd4:	e002      	b.n	8004bdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f9      	bne.n	8004bd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff ff64 	bl	8004ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10d      	bne.n	8004c0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	f043 0210 	orr.w	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c02:	f043 0201 	orr.w	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff ff75 	bl	8004b02 <LL_ADC_REG_IsConversionOngoing>
 8004c18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 80cd 	bne.w	8004dc2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 80c9 	bne.w	8004dc2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004c38:	f043 0202 	orr.w	r2, r3, #2
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ff49 	bl	8004adc <LL_ADC_IsEnabled>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d110      	bne.n	8004c72 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c50:	4864      	ldr	r0, [pc, #400]	; (8004de4 <HAL_ADC_Init+0x294>)
 8004c52:	f7ff ff43 	bl	8004adc <LL_ADC_IsEnabled>
 8004c56:	4604      	mov	r4, r0
 8004c58:	4863      	ldr	r0, [pc, #396]	; (8004de8 <HAL_ADC_Init+0x298>)
 8004c5a:	f7ff ff3f 	bl	8004adc <LL_ADC_IsEnabled>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4323      	orrs	r3, r4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d105      	bne.n	8004c72 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	485f      	ldr	r0, [pc, #380]	; (8004dec <HAL_ADC_Init+0x29c>)
 8004c6e:	f7ff fdcf 	bl	8004810 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	7e5b      	ldrb	r3, [r3, #25]
 8004c76:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c7c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004c82:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004c88:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c90:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d106      	bne.n	8004cae <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	045b      	lsls	r3, r3, #17
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_ADC_Init+0x2a0>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	69b9      	ldr	r1, [r7, #24]
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff ff0d 	bl	8004b02 <LL_ADC_REG_IsConversionOngoing>
 8004ce8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff ff1a 	bl	8004b28 <LL_ADC_INJ_IsConversionOngoing>
 8004cf4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d140      	bne.n	8004d7e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d13d      	bne.n	8004d7e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	7e1b      	ldrb	r3, [r3, #24]
 8004d0a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d0c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d14:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d24:	f023 0306 	bic.w	r3, r3, #6
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	69b9      	ldr	r1, [r7, #24]
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d118      	bne.n	8004d6e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d46:	f023 0304 	bic.w	r3, r3, #4
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d52:	4311      	orrs	r1, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d58:	4311      	orrs	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	611a      	str	r2, [r3, #16]
 8004d6c:	e007      	b.n	8004d7e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0201 	bic.w	r2, r2, #1
 8004d7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d10c      	bne.n	8004da0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	f023 010f 	bic.w	r1, r3, #15
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	1e5a      	subs	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d9e:	e007      	b.n	8004db0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 020f 	bic.w	r2, r2, #15
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db4:	f023 0303 	bic.w	r3, r3, #3
 8004db8:	f043 0201 	orr.w	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	659a      	str	r2, [r3, #88]	; 0x58
 8004dc0:	e007      	b.n	8004dd2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc6:	f043 0210 	orr.w	r2, r3, #16
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004dd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3724      	adds	r7, #36	; 0x24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd90      	pop	{r4, r7, pc}
 8004ddc:	200001fc 	.word	0x200001fc
 8004de0:	053e2d63 	.word	0x053e2d63
 8004de4:	50040000 	.word	0x50040000
 8004de8:	50040100 	.word	0x50040100
 8004dec:	50040300 	.word	0x50040300
 8004df0:	fff0c007 	.word	0xfff0c007

08004df4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b0b6      	sub	sp, #216	; 0xd8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x22>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e3d5      	b.n	80055c2 <HAL_ADC_ConfigChannel+0x7ce>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fe6d 	bl	8004b02 <LL_ADC_REG_IsConversionOngoing>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 83ba 	bne.w	80055a4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b05      	cmp	r3, #5
 8004e36:	d824      	bhi.n	8004e82 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	3b02      	subs	r3, #2
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d81b      	bhi.n	8004e7a <HAL_ADC_ConfigChannel+0x86>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <HAL_ADC_ConfigChannel+0x54>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e61 	.word	0x08004e61
 8004e50:	08004e69 	.word	0x08004e69
 8004e54:	08004e71 	.word	0x08004e71
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	220c      	movs	r2, #12
 8004e5c:	605a      	str	r2, [r3, #4]
          break;
 8004e5e:	e011      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2212      	movs	r2, #18
 8004e64:	605a      	str	r2, [r3, #4]
          break;
 8004e66:	e00d      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2218      	movs	r2, #24
 8004e6c:	605a      	str	r2, [r3, #4]
          break;
 8004e6e:	e009      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e76:	605a      	str	r2, [r3, #4]
          break;
 8004e78:	e004      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2206      	movs	r2, #6
 8004e7e:	605a      	str	r2, [r3, #4]
          break;
 8004e80:	e000      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004e82:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f7ff fd59 	bl	8004948 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff fe31 	bl	8004b02 <LL_ADC_REG_IsConversionOngoing>
 8004ea0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff fe3d 	bl	8004b28 <LL_ADC_INJ_IsConversionOngoing>
 8004eae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f040 81c1 	bne.w	800523e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f040 81bc 	bne.w	800523e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ece:	d10f      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4619      	mov	r1, r3
 8004edc:	f7ff fd60 	bl	80049a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fd1a 	bl	8004922 <LL_ADC_SetSamplingTimeCommonConfig>
 8004eee:	e00e      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6819      	ldr	r1, [r3, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f7ff fd4f 	bl	80049a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fd0a 	bl	8004922 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	08db      	lsrs	r3, r3, #3
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d00a      	beq.n	8004f46 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	6919      	ldr	r1, [r3, #16]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f40:	f7ff fc9a 	bl	8004878 <LL_ADC_SetOffset>
 8004f44:	e17b      	b.n	800523e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fcb7 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <HAL_ADC_ConfigChannel+0x17e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fcac 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	0e9b      	lsrs	r3, r3, #26
 8004f6c:	f003 021f 	and.w	r2, r3, #31
 8004f70:	e01e      	b.n	8004fb0 <HAL_ADC_ConfigChannel+0x1bc>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff fca1 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f88:	fa93 f3a3 	rbit	r3, r3
 8004f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	e004      	b.n	8004fae <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fa8:	fab3 f383 	clz	r3, r3
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x1d4>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	0e9b      	lsrs	r3, r3, #26
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	e018      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x206>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fd4:	fa93 f3a3 	rbit	r3, r3
 8004fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004fec:	2320      	movs	r3, #32
 8004fee:	e004      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004ff0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ff4:	fab3 f383 	clz	r3, r3
 8004ff8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d106      	bne.n	800500c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2200      	movs	r2, #0
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fc70 	bl	80048ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2101      	movs	r1, #1
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff fc54 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 8005018:	4603      	mov	r3, r0
 800501a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <HAL_ADC_ConfigChannel+0x244>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2101      	movs	r1, #1
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fc49 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 800502e:	4603      	mov	r3, r0
 8005030:	0e9b      	lsrs	r3, r3, #26
 8005032:	f003 021f 	and.w	r2, r3, #31
 8005036:	e01e      	b.n	8005076 <HAL_ADC_ConfigChannel+0x282>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2101      	movs	r1, #1
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff fc3e 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 8005044:	4603      	mov	r3, r0
 8005046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800504e:	fa93 f3a3 	rbit	r3, r3
 8005052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800505a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800505e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8005066:	2320      	movs	r3, #32
 8005068:	e004      	b.n	8005074 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800506a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800506e:	fab3 f383 	clz	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <HAL_ADC_ConfigChannel+0x29a>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	0e9b      	lsrs	r3, r3, #26
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	e018      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x2cc>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800509a:	fa93 f3a3 	rbit	r3, r3
 800509e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80050a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80050aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80050b2:	2320      	movs	r3, #32
 80050b4:	e004      	b.n	80050c0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80050b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050ba:	fab3 f383 	clz	r3, r3
 80050be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d106      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2101      	movs	r1, #1
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fc0d 	bl	80048ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2102      	movs	r1, #2
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fbf1 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 80050de:	4603      	mov	r3, r0
 80050e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x30a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2102      	movs	r1, #2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fbe6 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 80050f4:	4603      	mov	r3, r0
 80050f6:	0e9b      	lsrs	r3, r3, #26
 80050f8:	f003 021f 	and.w	r2, r3, #31
 80050fc:	e01e      	b.n	800513c <HAL_ADC_ConfigChannel+0x348>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2102      	movs	r1, #2
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fbdb 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 800510a:	4603      	mov	r3, r0
 800510c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005114:	fa93 f3a3 	rbit	r3, r3
 8005118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800511c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005120:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005124:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800512c:	2320      	movs	r3, #32
 800512e:	e004      	b.n	800513a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8005130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005134:	fab3 f383 	clz	r3, r3
 8005138:	b2db      	uxtb	r3, r3
 800513a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x360>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	0e9b      	lsrs	r3, r3, #26
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	e016      	b.n	8005182 <HAL_ADC_ConfigChannel+0x38e>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005160:	fa93 f3a3 	rbit	r3, r3
 8005164:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005166:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800516c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8005174:	2320      	movs	r3, #32
 8005176:	e004      	b.n	8005182 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800517c:	fab3 f383 	clz	r3, r3
 8005180:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005182:	429a      	cmp	r2, r3
 8005184:	d106      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	2102      	movs	r1, #2
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fbac 	bl	80048ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2103      	movs	r1, #3
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fb90 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x3cc>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2103      	movs	r1, #3
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fb85 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 80051b6:	4603      	mov	r3, r0
 80051b8:	0e9b      	lsrs	r3, r3, #26
 80051ba:	f003 021f 	and.w	r2, r3, #31
 80051be:	e017      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x3fc>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2103      	movs	r1, #3
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fb7a 	bl	80048c0 <LL_ADC_GetOffsetChannel>
 80051cc:	4603      	mov	r3, r0
 80051ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80051d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051da:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80051dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80051e2:	2320      	movs	r3, #32
 80051e4:	e003      	b.n	80051ee <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80051e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d105      	bne.n	8005208 <HAL_ADC_ConfigChannel+0x414>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	0e9b      	lsrs	r3, r3, #26
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	e011      	b.n	800522c <HAL_ADC_ConfigChannel+0x438>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005210:	fa93 f3a3 	rbit	r3, r3
 8005214:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005218:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8005220:	2320      	movs	r3, #32
 8005222:	e003      	b.n	800522c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8005224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005226:	fab3 f383 	clz	r3, r3
 800522a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800522c:	429a      	cmp	r2, r3
 800522e:	d106      	bne.n	800523e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2200      	movs	r2, #0
 8005236:	2103      	movs	r1, #3
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fb57 	bl	80048ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fc4a 	bl	8004adc <LL_ADC_IsEnabled>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	f040 8140 	bne.w	80054d0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	461a      	mov	r2, r3
 800525e:	f7ff fbcb 	bl	80049f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	4a8f      	ldr	r2, [pc, #572]	; (80054a4 <HAL_ADC_ConfigChannel+0x6b0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	f040 8131 	bne.w	80054d0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <HAL_ADC_ConfigChannel+0x4a2>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	0e9b      	lsrs	r3, r3, #26
 8005284:	3301      	adds	r3, #1
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	2b09      	cmp	r3, #9
 800528c:	bf94      	ite	ls
 800528e:	2301      	movls	r3, #1
 8005290:	2300      	movhi	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	e019      	b.n	80052ca <HAL_ADC_ConfigChannel+0x4d6>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80052a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052a6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80052a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80052ae:	2320      	movs	r3, #32
 80052b0:	e003      	b.n	80052ba <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80052b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052b4:	fab3 f383 	clz	r3, r3
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	3301      	adds	r3, #1
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	2b09      	cmp	r3, #9
 80052c2:	bf94      	ite	ls
 80052c4:	2301      	movls	r3, #1
 80052c6:	2300      	movhi	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d079      	beq.n	80053c2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d107      	bne.n	80052ea <HAL_ADC_ConfigChannel+0x4f6>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	0e9b      	lsrs	r3, r3, #26
 80052e0:	3301      	adds	r3, #1
 80052e2:	069b      	lsls	r3, r3, #26
 80052e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052e8:	e015      	b.n	8005316 <HAL_ADC_ConfigChannel+0x522>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f2:	fa93 f3a3 	rbit	r3, r3
 80052f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80052f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80052fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8005302:	2320      	movs	r3, #32
 8005304:	e003      	b.n	800530e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8005306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005308:	fab3 f383 	clz	r3, r3
 800530c:	b2db      	uxtb	r3, r3
 800530e:	3301      	adds	r3, #1
 8005310:	069b      	lsls	r3, r3, #26
 8005312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x542>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	0e9b      	lsrs	r3, r3, #26
 8005328:	3301      	adds	r3, #1
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2101      	movs	r1, #1
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	e017      	b.n	8005366 <HAL_ADC_ConfigChannel+0x572>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533e:	fa93 f3a3 	rbit	r3, r3
 8005342:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005346:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800534e:	2320      	movs	r3, #32
 8005350:	e003      	b.n	800535a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8005352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	3301      	adds	r3, #1
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	2101      	movs	r1, #1
 8005362:	fa01 f303 	lsl.w	r3, r1, r3
 8005366:	ea42 0103 	orr.w	r1, r2, r3
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <HAL_ADC_ConfigChannel+0x598>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	0e9b      	lsrs	r3, r3, #26
 800537c:	3301      	adds	r3, #1
 800537e:	f003 021f 	and.w	r2, r3, #31
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	051b      	lsls	r3, r3, #20
 800538a:	e018      	b.n	80053be <HAL_ADC_ConfigChannel+0x5ca>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	fa93 f3a3 	rbit	r3, r3
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800539e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80053a4:	2320      	movs	r3, #32
 80053a6:	e003      	b.n	80053b0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80053a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	3301      	adds	r3, #1
 80053b2:	f003 021f 	and.w	r2, r3, #31
 80053b6:	4613      	mov	r3, r2
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053be:	430b      	orrs	r3, r1
 80053c0:	e081      	b.n	80054c6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <HAL_ADC_ConfigChannel+0x5ea>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	0e9b      	lsrs	r3, r3, #26
 80053d4:	3301      	adds	r3, #1
 80053d6:	069b      	lsls	r3, r3, #26
 80053d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053dc:	e015      	b.n	800540a <HAL_ADC_ConfigChannel+0x616>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	fa93 f3a3 	rbit	r3, r3
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80053f6:	2320      	movs	r3, #32
 80053f8:	e003      	b.n	8005402 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	fab3 f383 	clz	r3, r3
 8005400:	b2db      	uxtb	r3, r3
 8005402:	3301      	adds	r3, #1
 8005404:	069b      	lsls	r3, r3, #26
 8005406:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_ADC_ConfigChannel+0x636>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	0e9b      	lsrs	r3, r3, #26
 800541c:	3301      	adds	r3, #1
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	2101      	movs	r1, #1
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	e017      	b.n	800545a <HAL_ADC_ConfigChannel+0x666>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	fa93 f3a3 	rbit	r3, r3
 8005436:	61fb      	str	r3, [r7, #28]
  return result;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8005442:	2320      	movs	r3, #32
 8005444:	e003      	b.n	800544e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	fab3 f383 	clz	r3, r3
 800544c:	b2db      	uxtb	r3, r3
 800544e:	3301      	adds	r3, #1
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	2101      	movs	r1, #1
 8005456:	fa01 f303 	lsl.w	r3, r1, r3
 800545a:	ea42 0103 	orr.w	r1, r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x692>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	0e9b      	lsrs	r3, r3, #26
 8005470:	3301      	adds	r3, #1
 8005472:	f003 021f 	and.w	r2, r3, #31
 8005476:	4613      	mov	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4413      	add	r3, r2
 800547c:	3b1e      	subs	r3, #30
 800547e:	051b      	lsls	r3, r3, #20
 8005480:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005484:	e01e      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x6d0>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	fa93 f3a3 	rbit	r3, r3
 8005492:	613b      	str	r3, [r7, #16]
  return result;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d104      	bne.n	80054a8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800549e:	2320      	movs	r3, #32
 80054a0:	e006      	b.n	80054b0 <HAL_ADC_ConfigChannel+0x6bc>
 80054a2:	bf00      	nop
 80054a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	fab3 f383 	clz	r3, r3
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	3301      	adds	r3, #1
 80054b2:	f003 021f 	and.w	r2, r3, #31
 80054b6:	4613      	mov	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4413      	add	r3, r2
 80054bc:	3b1e      	subs	r3, #30
 80054be:	051b      	lsls	r3, r3, #20
 80054c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054c4:	430b      	orrs	r3, r1
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	6892      	ldr	r2, [r2, #8]
 80054ca:	4619      	mov	r1, r3
 80054cc:	f7ff fa68 	bl	80049a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b3d      	ldr	r3, [pc, #244]	; (80055cc <HAL_ADC_ConfigChannel+0x7d8>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d06c      	beq.n	80055b6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054dc:	483c      	ldr	r0, [pc, #240]	; (80055d0 <HAL_ADC_ConfigChannel+0x7dc>)
 80054de:	f7ff f9bd 	bl	800485c <LL_ADC_GetCommonPathInternalCh>
 80054e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a3a      	ldr	r2, [pc, #232]	; (80055d4 <HAL_ADC_ConfigChannel+0x7e0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d127      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d121      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a35      	ldr	r2, [pc, #212]	; (80055d8 <HAL_ADC_ConfigChannel+0x7e4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d157      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800550a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800550e:	4619      	mov	r1, r3
 8005510:	482f      	ldr	r0, [pc, #188]	; (80055d0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005512:	f7ff f990 	bl	8004836 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005516:	4b31      	ldr	r3, [pc, #196]	; (80055dc <HAL_ADC_ConfigChannel+0x7e8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	099b      	lsrs	r3, r3, #6
 800551c:	4a30      	ldr	r2, [pc, #192]	; (80055e0 <HAL_ADC_ConfigChannel+0x7ec>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	099b      	lsrs	r3, r3, #6
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	4613      	mov	r3, r2
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005530:	e002      	b.n	8005538 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3b01      	subs	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f9      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800553e:	e03a      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a27      	ldr	r2, [pc, #156]	; (80055e4 <HAL_ADC_ConfigChannel+0x7f0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d113      	bne.n	8005572 <HAL_ADC_ConfigChannel+0x77e>
 800554a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800554e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10d      	bne.n	8005572 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d12a      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005568:	4619      	mov	r1, r3
 800556a:	4819      	ldr	r0, [pc, #100]	; (80055d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800556c:	f7ff f963 	bl	8004836 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005570:	e021      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <HAL_ADC_ConfigChannel+0x7f4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d11c      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800557c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d116      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a12      	ldr	r2, [pc, #72]	; (80055d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d111      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005592:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800559a:	4619      	mov	r1, r3
 800559c:	480c      	ldr	r0, [pc, #48]	; (80055d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800559e:	f7ff f94a 	bl	8004836 <LL_ADC_SetCommonPathInternalCh>
 80055a2:	e008      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f043 0220 	orr.w	r2, r3, #32
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80055be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	37d8      	adds	r7, #216	; 0xd8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	80080000 	.word	0x80080000
 80055d0:	50040300 	.word	0x50040300
 80055d4:	c7520000 	.word	0xc7520000
 80055d8:	50040000 	.word	0x50040000
 80055dc:	200001fc 	.word	0x200001fc
 80055e0:	053e2d63 	.word	0x053e2d63
 80055e4:	cb840000 	.word	0xcb840000
 80055e8:	80000001 	.word	0x80000001

080055ec <LL_ADC_IsEnabled>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <LL_ADC_IsEnabled+0x18>
 8005600:	2301      	movs	r3, #1
 8005602:	e000      	b.n	8005606 <LL_ADC_IsEnabled+0x1a>
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <LL_ADC_REG_IsConversionOngoing>:
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b04      	cmp	r3, #4
 8005624:	d101      	bne.n	800562a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005638:	b590      	push	{r4, r7, lr}
 800563a:	b0a1      	sub	sp, #132	; 0x84
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005652:	2302      	movs	r3, #2
 8005654:	e089      	b.n	800576a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800565e:	2300      	movs	r3, #0
 8005660:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005662:	2300      	movs	r3, #0
 8005664:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a42      	ldr	r2, [pc, #264]	; (8005774 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d102      	bne.n	8005676 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005670:	4b41      	ldr	r3, [pc, #260]	; (8005778 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e001      	b.n	800567a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10b      	bne.n	8005698 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e068      	b.n	800576a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff ffb9 	bl	8005612 <LL_ADC_REG_IsConversionOngoing>
 80056a0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff ffb3 	bl	8005612 <LL_ADC_REG_IsConversionOngoing>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d14a      	bne.n	8005748 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80056b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d147      	bne.n	8005748 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80056b8:	4b30      	ldr	r3, [pc, #192]	; (800577c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80056ba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d027      	beq.n	8005714 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80056c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056d6:	035b      	lsls	r3, r3, #13
 80056d8:	430b      	orrs	r3, r1
 80056da:	431a      	orrs	r2, r3
 80056dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056e0:	4824      	ldr	r0, [pc, #144]	; (8005774 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80056e2:	f7ff ff83 	bl	80055ec <LL_ADC_IsEnabled>
 80056e6:	4604      	mov	r4, r0
 80056e8:	4823      	ldr	r0, [pc, #140]	; (8005778 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80056ea:	f7ff ff7f 	bl	80055ec <LL_ADC_IsEnabled>
 80056ee:	4603      	mov	r3, r0
 80056f0:	4323      	orrs	r3, r4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d132      	bne.n	800575c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80056f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80056fe:	f023 030f 	bic.w	r3, r3, #15
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	6811      	ldr	r1, [r2, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	6892      	ldr	r2, [r2, #8]
 800570a:	430a      	orrs	r2, r1
 800570c:	431a      	orrs	r2, r3
 800570e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005710:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005712:	e023      	b.n	800575c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800571c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800571e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005720:	4814      	ldr	r0, [pc, #80]	; (8005774 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005722:	f7ff ff63 	bl	80055ec <LL_ADC_IsEnabled>
 8005726:	4604      	mov	r4, r0
 8005728:	4813      	ldr	r0, [pc, #76]	; (8005778 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800572a:	f7ff ff5f 	bl	80055ec <LL_ADC_IsEnabled>
 800572e:	4603      	mov	r3, r0
 8005730:	4323      	orrs	r3, r4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d112      	bne.n	800575c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800573e:	f023 030f 	bic.w	r3, r3, #15
 8005742:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005744:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005746:	e009      	b.n	800575c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	f043 0220 	orr.w	r2, r3, #32
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800575a:	e000      	b.n	800575e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800575c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005766:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800576a:	4618      	mov	r0, r3
 800576c:	3784      	adds	r7, #132	; 0x84
 800576e:	46bd      	mov	sp, r7
 8005770:	bd90      	pop	{r4, r7, pc}
 8005772:	bf00      	nop
 8005774:	50040000 	.word	0x50040000
 8005778:	50040100 	.word	0x50040100
 800577c:	50040300 	.word	0x50040300

08005780 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0ed      	b.n	800596e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d102      	bne.n	80057a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fa fecc 	bl	800053c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057b4:	f7fe fffc 	bl	80047b0 <HAL_GetTick>
 80057b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80057ba:	e012      	b.n	80057e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80057bc:	f7fe fff8 	bl	80047b0 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b0a      	cmp	r3, #10
 80057c8:	d90b      	bls.n	80057e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2205      	movs	r2, #5
 80057da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e0c5      	b.n	800596e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0e5      	beq.n	80057bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0202 	bic.w	r2, r2, #2
 80057fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005800:	f7fe ffd6 	bl	80047b0 <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005806:	e012      	b.n	800582e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005808:	f7fe ffd2 	bl	80047b0 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b0a      	cmp	r3, #10
 8005814:	d90b      	bls.n	800582e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2205      	movs	r2, #5
 8005826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e09f      	b.n	800596e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e5      	bne.n	8005808 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	7e1b      	ldrb	r3, [r3, #24]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d108      	bne.n	8005856 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e007      	b.n	8005866 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	7e5b      	ldrb	r3, [r3, #25]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d108      	bne.n	8005880 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e007      	b.n	8005890 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800588e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	7e9b      	ldrb	r3, [r3, #26]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d108      	bne.n	80058aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0220 	orr.w	r2, r2, #32
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	e007      	b.n	80058ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0220 	bic.w	r2, r2, #32
 80058b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	7edb      	ldrb	r3, [r3, #27]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d108      	bne.n	80058d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0210 	bic.w	r2, r2, #16
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e007      	b.n	80058e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0210 	orr.w	r2, r2, #16
 80058e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	7f1b      	ldrb	r3, [r3, #28]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d108      	bne.n	80058fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0208 	orr.w	r2, r2, #8
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	e007      	b.n	800590e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0208 	bic.w	r2, r2, #8
 800590c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	7f5b      	ldrb	r3, [r3, #29]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d108      	bne.n	8005928 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0204 	orr.w	r2, r2, #4
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e007      	b.n	8005938 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0204 	bic.w	r2, r2, #4
 8005936:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	ea42 0103 	orr.w	r1, r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005976:	b480      	push	{r7}
 8005978:	b087      	sub	sp, #28
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800598c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800598e:	7cfb      	ldrb	r3, [r7, #19]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d003      	beq.n	800599c <HAL_CAN_ConfigFilter+0x26>
 8005994:	7cfb      	ldrb	r3, [r7, #19]
 8005996:	2b02      	cmp	r3, #2
 8005998:	f040 80aa 	bne.w	8005af0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059a2:	f043 0201 	orr.w	r2, r3, #1
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2201      	movs	r2, #1
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	401a      	ands	r2, r3
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d123      	bne.n	8005a1e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	43db      	mvns	r3, r3
 80059e0:	401a      	ands	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80059f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	3248      	adds	r2, #72	; 0x48
 80059fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a12:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a14:	6979      	ldr	r1, [r7, #20]
 8005a16:	3348      	adds	r3, #72	; 0x48
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	440b      	add	r3, r1
 8005a1c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d122      	bne.n	8005a6c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005a46:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	3248      	adds	r2, #72	; 0x48
 8005a4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a62:	6979      	ldr	r1, [r7, #20]
 8005a64:	3348      	adds	r3, #72	; 0x48
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	440b      	add	r3, r1
 8005a6a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	401a      	ands	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005a86:	e007      	b.n	8005a98 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	401a      	ands	r2, r3
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005ab2:	e007      	b.n	8005ac4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d107      	bne.n	8005adc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ae2:	f023 0201 	bic.w	r2, r3, #1
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e006      	b.n	8005afe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
  }
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d12e      	bne.n	8005b7c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b36:	f7fe fe3b 	bl	80047b0 <HAL_GetTick>
 8005b3a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005b3c:	e012      	b.n	8005b64 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005b3e:	f7fe fe37 	bl	80047b0 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b0a      	cmp	r3, #10
 8005b4a:	d90b      	bls.n	8005b64 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2205      	movs	r2, #5
 8005b5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e012      	b.n	8005b8a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e5      	bne.n	8005b3e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e006      	b.n	8005b8a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
  }
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b089      	sub	sp, #36	; 0x24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ba6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005bb0:	7ffb      	ldrb	r3, [r7, #31]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d003      	beq.n	8005bbe <HAL_CAN_AddTxMessage+0x2c>
 8005bb6:	7ffb      	ldrb	r3, [r7, #31]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	f040 80b8 	bne.w	8005d2e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10a      	bne.n	8005bde <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d105      	bne.n	8005bde <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80a0 	beq.w	8005d1e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	0e1b      	lsrs	r3, r3, #24
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d907      	bls.n	8005bfe <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e09e      	b.n	8005d3c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005bfe:	2201      	movs	r2, #1
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	409a      	lsls	r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10d      	bne.n	8005c2c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	6809      	ldr	r1, [r1, #0]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3318      	adds	r3, #24
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	440b      	add	r3, r1
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e00f      	b.n	8005c4c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005c36:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005c40:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	3318      	adds	r3, #24
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	440b      	add	r3, r1
 8005c4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	3318      	adds	r3, #24
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	7d1b      	ldrb	r3, [r3, #20]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d111      	bne.n	8005c8c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3318      	adds	r3, #24
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	4413      	add	r3, r2
 8005c74:	3304      	adds	r3, #4
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	6811      	ldr	r1, [r2, #0]
 8005c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	3318      	adds	r3, #24
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	440b      	add	r3, r1
 8005c88:	3304      	adds	r3, #4
 8005c8a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3307      	adds	r3, #7
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	061a      	lsls	r2, r3, #24
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3306      	adds	r3, #6
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	041b      	lsls	r3, r3, #16
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3305      	adds	r3, #5
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	3204      	adds	r2, #4
 8005cac:	7812      	ldrb	r2, [r2, #0]
 8005cae:	4610      	mov	r0, r2
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	6811      	ldr	r1, [r2, #0]
 8005cb4:	ea43 0200 	orr.w	r2, r3, r0
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	440b      	add	r3, r1
 8005cbe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005cc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3303      	adds	r3, #3
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	061a      	lsls	r2, r3, #24
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3302      	adds	r3, #2
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	7812      	ldrb	r2, [r2, #0]
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	6811      	ldr	r1, [r2, #0]
 8005cea:	ea43 0200 	orr.w	r2, r3, r0
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	440b      	add	r3, r1
 8005cf4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005cf8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	3318      	adds	r3, #24
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	4413      	add	r3, r2
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	6811      	ldr	r1, [r2, #0]
 8005d0c:	f043 0201 	orr.w	r2, r3, #1
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	3318      	adds	r3, #24
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	440b      	add	r3, r1
 8005d18:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e00e      	b.n	8005d3c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e006      	b.n	8005d3c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
  }
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3724      	adds	r7, #36	; 0x24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d5c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d003      	beq.n	8005d6c <HAL_CAN_GetRxMessage+0x24>
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	f040 80f3 	bne.w	8005f52 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10e      	bne.n	8005d90 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d116      	bne.n	8005dae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0e7      	b.n	8005f60 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d107      	bne.n	8005dae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e0d8      	b.n	8005f60 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	331b      	adds	r3, #27
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	4413      	add	r3, r2
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0204 	and.w	r2, r3, #4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10c      	bne.n	8005de6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	331b      	adds	r3, #27
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	4413      	add	r3, r2
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	0d5b      	lsrs	r3, r3, #21
 8005ddc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	e00b      	b.n	8005dfe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	331b      	adds	r3, #27
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	4413      	add	r3, r2
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	331b      	adds	r3, #27
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	4413      	add	r3, r2
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0202 	and.w	r2, r3, #2
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	331b      	adds	r3, #27
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	4413      	add	r3, r2
 8005e20:	3304      	adds	r3, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 020f 	and.w	r2, r3, #15
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	331b      	adds	r3, #27
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	4413      	add	r3, r2
 8005e38:	3304      	adds	r3, #4
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	0a1b      	lsrs	r3, r3, #8
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	331b      	adds	r3, #27
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	4413      	add	r3, r2
 8005e50:	3304      	adds	r3, #4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	0a1a      	lsrs	r2, r3, #8
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	3301      	adds	r3, #1
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	0c1a      	lsrs	r2, r3, #16
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	0e1a      	lsrs	r2, r3, #24
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	3303      	adds	r3, #3
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	0a1a      	lsrs	r2, r3, #8
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	3305      	adds	r3, #5
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	0c1a      	lsrs	r2, r3, #16
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	3306      	adds	r3, #6
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	0e1a      	lsrs	r2, r3, #24
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	3307      	adds	r3, #7
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d108      	bne.n	8005f3e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0220 	orr.w	r2, r2, #32
 8005f3a:	60da      	str	r2, [r3, #12]
 8005f3c:	e007      	b.n	8005f4e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0220 	orr.w	r2, r2, #32
 8005f4c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e006      	b.n	8005f60 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f7c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d002      	beq.n	8005f8a <HAL_CAN_ActivateNotification+0x1e>
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d109      	bne.n	8005f9e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6959      	ldr	r1, [r3, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e006      	b.n	8005fac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
  }
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d07c      	beq.n	80060f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d023      	beq.n	8006050 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2201      	movs	r2, #1
 800600e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f983 	bl	8006326 <HAL_CAN_TxMailbox0CompleteCallback>
 8006020:	e016      	b.n	8006050 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
 8006034:	e00c      	b.n	8006050 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
 8006048:	e002      	b.n	8006050 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f989 	bl	8006362 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d024      	beq.n	80060a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006062:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f963 	bl	800633a <HAL_CAN_TxMailbox1CompleteCallback>
 8006074:	e016      	b.n	80060a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
 8006088:	e00c      	b.n	80060a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
 800609c:	e002      	b.n	80060a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f969 	bl	8006376 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d024      	beq.n	80060f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80060b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f943 	bl	800634e <HAL_CAN_TxMailbox2CompleteCallback>
 80060c8:	e016      	b.n	80060f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
 80060dc:	e00c      	b.n	80060f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d004      	beq.n	80060f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
 80060f0:	e002      	b.n	80060f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f949 	bl	800638a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00c      	beq.n	800611c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006112:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2210      	movs	r2, #16
 800611a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2208      	movs	r2, #8
 8006136:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f930 	bl	800639e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d009      	beq.n	800615c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fc fbe6 	bl	8002928 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00c      	beq.n	8006180 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b00      	cmp	r3, #0
 800616e:	d007      	beq.n	8006180 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006176:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2210      	movs	r2, #16
 800617e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2208      	movs	r2, #8
 800619a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f912 	bl	80063c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d009      	beq.n	80061c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f8f9 	bl	80063b2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2210      	movs	r2, #16
 80061da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f8fc 	bl	80063da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d006      	beq.n	8006204 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2208      	movs	r2, #8
 80061fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f8f5 	bl	80063ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d07b      	beq.n	8006306 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d072      	beq.n	80062fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621e:	2b00      	cmp	r3, #0
 8006220:	d008      	beq.n	8006234 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	f043 0301 	orr.w	r3, r3, #1
 8006232:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	f043 0302 	orr.w	r3, r3, #2
 800624e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006256:	2b00      	cmp	r3, #0
 8006258:	d008      	beq.n	800626c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	f043 0304 	orr.w	r3, r3, #4
 800626a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006272:	2b00      	cmp	r3, #0
 8006274:	d043      	beq.n	80062fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800627c:	2b00      	cmp	r3, #0
 800627e:	d03e      	beq.n	80062fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006286:	2b60      	cmp	r3, #96	; 0x60
 8006288:	d02b      	beq.n	80062e2 <HAL_CAN_IRQHandler+0x32a>
 800628a:	2b60      	cmp	r3, #96	; 0x60
 800628c:	d82e      	bhi.n	80062ec <HAL_CAN_IRQHandler+0x334>
 800628e:	2b50      	cmp	r3, #80	; 0x50
 8006290:	d022      	beq.n	80062d8 <HAL_CAN_IRQHandler+0x320>
 8006292:	2b50      	cmp	r3, #80	; 0x50
 8006294:	d82a      	bhi.n	80062ec <HAL_CAN_IRQHandler+0x334>
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	d019      	beq.n	80062ce <HAL_CAN_IRQHandler+0x316>
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d826      	bhi.n	80062ec <HAL_CAN_IRQHandler+0x334>
 800629e:	2b30      	cmp	r3, #48	; 0x30
 80062a0:	d010      	beq.n	80062c4 <HAL_CAN_IRQHandler+0x30c>
 80062a2:	2b30      	cmp	r3, #48	; 0x30
 80062a4:	d822      	bhi.n	80062ec <HAL_CAN_IRQHandler+0x334>
 80062a6:	2b10      	cmp	r3, #16
 80062a8:	d002      	beq.n	80062b0 <HAL_CAN_IRQHandler+0x2f8>
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d005      	beq.n	80062ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80062ae:	e01d      	b.n	80062ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	f043 0308 	orr.w	r3, r3, #8
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062b8:	e019      	b.n	80062ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	f043 0310 	orr.w	r3, r3, #16
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062c2:	e014      	b.n	80062ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	f043 0320 	orr.w	r3, r3, #32
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062cc:	e00f      	b.n	80062ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062d6:	e00a      	b.n	80062ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062e0:	e005      	b.n	80062ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062ea:	e000      	b.n	80062ee <HAL_CAN_IRQHandler+0x336>
            break;
 80062ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2204      	movs	r2, #4
 8006304:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f872 	bl	8006402 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800631e:	bf00      	nop
 8006320:	3728      	adds	r7, #40	; 0x28
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
	...

08006418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <__NVIC_SetPriorityGrouping+0x44>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006434:	4013      	ands	r3, r2
 8006436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800644a:	4a04      	ldr	r2, [pc, #16]	; (800645c <__NVIC_SetPriorityGrouping+0x44>)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	60d3      	str	r3, [r2, #12]
}
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	e000ed00 	.word	0xe000ed00

08006460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006464:	4b04      	ldr	r3, [pc, #16]	; (8006478 <__NVIC_GetPriorityGrouping+0x18>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	f003 0307 	and.w	r3, r3, #7
}
 800646e:	4618      	mov	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	e000ed00 	.word	0xe000ed00

0800647c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648a:	2b00      	cmp	r3, #0
 800648c:	db0b      	blt.n	80064a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	f003 021f 	and.w	r2, r3, #31
 8006494:	4907      	ldr	r1, [pc, #28]	; (80064b4 <__NVIC_EnableIRQ+0x38>)
 8006496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	2001      	movs	r0, #1
 800649e:	fa00 f202 	lsl.w	r2, r0, r2
 80064a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	e000e100 	.word	0xe000e100

080064b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	6039      	str	r1, [r7, #0]
 80064c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db0a      	blt.n	80064e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	490c      	ldr	r1, [pc, #48]	; (8006504 <__NVIC_SetPriority+0x4c>)
 80064d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d6:	0112      	lsls	r2, r2, #4
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	440b      	add	r3, r1
 80064dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064e0:	e00a      	b.n	80064f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	4908      	ldr	r1, [pc, #32]	; (8006508 <__NVIC_SetPriority+0x50>)
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	3b04      	subs	r3, #4
 80064f0:	0112      	lsls	r2, r2, #4
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	440b      	add	r3, r1
 80064f6:	761a      	strb	r2, [r3, #24]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	e000e100 	.word	0xe000e100
 8006508:	e000ed00 	.word	0xe000ed00

0800650c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	; 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f1c3 0307 	rsb	r3, r3, #7
 8006526:	2b04      	cmp	r3, #4
 8006528:	bf28      	it	cs
 800652a:	2304      	movcs	r3, #4
 800652c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	3304      	adds	r3, #4
 8006532:	2b06      	cmp	r3, #6
 8006534:	d902      	bls.n	800653c <NVIC_EncodePriority+0x30>
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	3b03      	subs	r3, #3
 800653a:	e000      	b.n	800653e <NVIC_EncodePriority+0x32>
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006540:	f04f 32ff 	mov.w	r2, #4294967295
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	43da      	mvns	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	401a      	ands	r2, r3
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006554:	f04f 31ff 	mov.w	r1, #4294967295
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	fa01 f303 	lsl.w	r3, r1, r3
 800655e:	43d9      	mvns	r1, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006564:	4313      	orrs	r3, r2
         );
}
 8006566:	4618      	mov	r0, r3
 8006568:	3724      	adds	r7, #36	; 0x24
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3b01      	subs	r3, #1
 8006580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006584:	d301      	bcc.n	800658a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006586:	2301      	movs	r3, #1
 8006588:	e00f      	b.n	80065aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800658a:	4a0a      	ldr	r2, [pc, #40]	; (80065b4 <SysTick_Config+0x40>)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3b01      	subs	r3, #1
 8006590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006592:	210f      	movs	r1, #15
 8006594:	f04f 30ff 	mov.w	r0, #4294967295
 8006598:	f7ff ff8e 	bl	80064b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <SysTick_Config+0x40>)
 800659e:	2200      	movs	r2, #0
 80065a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065a2:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <SysTick_Config+0x40>)
 80065a4:	2207      	movs	r2, #7
 80065a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	e000e010 	.word	0xe000e010

080065b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff ff29 	bl	8006418 <__NVIC_SetPriorityGrouping>
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b086      	sub	sp, #24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	4603      	mov	r3, r0
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80065e0:	f7ff ff3e 	bl	8006460 <__NVIC_GetPriorityGrouping>
 80065e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	6978      	ldr	r0, [r7, #20]
 80065ec:	f7ff ff8e 	bl	800650c <NVIC_EncodePriority>
 80065f0:	4602      	mov	r2, r0
 80065f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f6:	4611      	mov	r1, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff ff5d 	bl	80064b8 <__NVIC_SetPriority>
}
 80065fe:	bf00      	nop
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	4603      	mov	r3, r0
 800660e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff ff31 	bl	800647c <__NVIC_EnableIRQ>
}
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff ffa2 	bl	8006574 <SysTick_Config>
 8006630:	4603      	mov	r3, r0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800664a:	e166      	b.n	800691a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	2101      	movs	r1, #1
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	fa01 f303 	lsl.w	r3, r1, r3
 8006658:	4013      	ands	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8158 	beq.w	8006914 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d005      	beq.n	800667c <HAL_GPIO_Init+0x40>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d130      	bne.n	80066de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	2203      	movs	r2, #3
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	43db      	mvns	r3, r3
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4013      	ands	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066b2:	2201      	movs	r2, #1
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	43db      	mvns	r3, r3
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4013      	ands	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	091b      	lsrs	r3, r3, #4
 80066c8:	f003 0201 	and.w	r2, r3, #1
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d017      	beq.n	800671a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	2203      	movs	r2, #3
 80066f6:	fa02 f303 	lsl.w	r3, r2, r3
 80066fa:	43db      	mvns	r3, r3
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4013      	ands	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d123      	bne.n	800676e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	08da      	lsrs	r2, r3, #3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3208      	adds	r2, #8
 800672e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006732:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	220f      	movs	r2, #15
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43db      	mvns	r3, r3
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4013      	ands	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	08da      	lsrs	r2, r3, #3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3208      	adds	r2, #8
 8006768:	6939      	ldr	r1, [r7, #16]
 800676a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	2203      	movs	r2, #3
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43db      	mvns	r3, r3
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4013      	ands	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f003 0203 	and.w	r2, r3, #3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 80b2 	beq.w	8006914 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067b0:	4b61      	ldr	r3, [pc, #388]	; (8006938 <HAL_GPIO_Init+0x2fc>)
 80067b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b4:	4a60      	ldr	r2, [pc, #384]	; (8006938 <HAL_GPIO_Init+0x2fc>)
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	6613      	str	r3, [r2, #96]	; 0x60
 80067bc:	4b5e      	ldr	r3, [pc, #376]	; (8006938 <HAL_GPIO_Init+0x2fc>)
 80067be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80067c8:	4a5c      	ldr	r2, [pc, #368]	; (800693c <HAL_GPIO_Init+0x300>)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	089b      	lsrs	r3, r3, #2
 80067ce:	3302      	adds	r3, #2
 80067d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	220f      	movs	r2, #15
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	43db      	mvns	r3, r3
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4013      	ands	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80067f2:	d02b      	beq.n	800684c <HAL_GPIO_Init+0x210>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a52      	ldr	r2, [pc, #328]	; (8006940 <HAL_GPIO_Init+0x304>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d025      	beq.n	8006848 <HAL_GPIO_Init+0x20c>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a51      	ldr	r2, [pc, #324]	; (8006944 <HAL_GPIO_Init+0x308>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01f      	beq.n	8006844 <HAL_GPIO_Init+0x208>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a50      	ldr	r2, [pc, #320]	; (8006948 <HAL_GPIO_Init+0x30c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d019      	beq.n	8006840 <HAL_GPIO_Init+0x204>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a4f      	ldr	r2, [pc, #316]	; (800694c <HAL_GPIO_Init+0x310>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d013      	beq.n	800683c <HAL_GPIO_Init+0x200>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a4e      	ldr	r2, [pc, #312]	; (8006950 <HAL_GPIO_Init+0x314>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00d      	beq.n	8006838 <HAL_GPIO_Init+0x1fc>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a4d      	ldr	r2, [pc, #308]	; (8006954 <HAL_GPIO_Init+0x318>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d007      	beq.n	8006834 <HAL_GPIO_Init+0x1f8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a4c      	ldr	r2, [pc, #304]	; (8006958 <HAL_GPIO_Init+0x31c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d101      	bne.n	8006830 <HAL_GPIO_Init+0x1f4>
 800682c:	2307      	movs	r3, #7
 800682e:	e00e      	b.n	800684e <HAL_GPIO_Init+0x212>
 8006830:	2308      	movs	r3, #8
 8006832:	e00c      	b.n	800684e <HAL_GPIO_Init+0x212>
 8006834:	2306      	movs	r3, #6
 8006836:	e00a      	b.n	800684e <HAL_GPIO_Init+0x212>
 8006838:	2305      	movs	r3, #5
 800683a:	e008      	b.n	800684e <HAL_GPIO_Init+0x212>
 800683c:	2304      	movs	r3, #4
 800683e:	e006      	b.n	800684e <HAL_GPIO_Init+0x212>
 8006840:	2303      	movs	r3, #3
 8006842:	e004      	b.n	800684e <HAL_GPIO_Init+0x212>
 8006844:	2302      	movs	r3, #2
 8006846:	e002      	b.n	800684e <HAL_GPIO_Init+0x212>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <HAL_GPIO_Init+0x212>
 800684c:	2300      	movs	r3, #0
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	f002 0203 	and.w	r2, r2, #3
 8006854:	0092      	lsls	r2, r2, #2
 8006856:	4093      	lsls	r3, r2
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800685e:	4937      	ldr	r1, [pc, #220]	; (800693c <HAL_GPIO_Init+0x300>)
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	089b      	lsrs	r3, r3, #2
 8006864:	3302      	adds	r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800686c:	4b3b      	ldr	r3, [pc, #236]	; (800695c <HAL_GPIO_Init+0x320>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	43db      	mvns	r3, r3
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4013      	ands	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006890:	4a32      	ldr	r2, [pc, #200]	; (800695c <HAL_GPIO_Init+0x320>)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006896:	4b31      	ldr	r3, [pc, #196]	; (800695c <HAL_GPIO_Init+0x320>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	43db      	mvns	r3, r3
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4013      	ands	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80068ba:	4a28      	ldr	r2, [pc, #160]	; (800695c <HAL_GPIO_Init+0x320>)
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80068c0:	4b26      	ldr	r3, [pc, #152]	; (800695c <HAL_GPIO_Init+0x320>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	43db      	mvns	r3, r3
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4013      	ands	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068e4:	4a1d      	ldr	r2, [pc, #116]	; (800695c <HAL_GPIO_Init+0x320>)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80068ea:	4b1c      	ldr	r3, [pc, #112]	; (800695c <HAL_GPIO_Init+0x320>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	43db      	mvns	r3, r3
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4013      	ands	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800690e:	4a13      	ldr	r2, [pc, #76]	; (800695c <HAL_GPIO_Init+0x320>)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	3301      	adds	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	f47f ae91 	bne.w	800664c <HAL_GPIO_Init+0x10>
  }
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	40021000 	.word	0x40021000
 800693c:	40010000 	.word	0x40010000
 8006940:	48000400 	.word	0x48000400
 8006944:	48000800 	.word	0x48000800
 8006948:	48000c00 	.word	0x48000c00
 800694c:	48001000 	.word	0x48001000
 8006950:	48001400 	.word	0x48001400
 8006954:	48001800 	.word	0x48001800
 8006958:	48001c00 	.word	0x48001c00
 800695c:	40010400 	.word	0x40010400

08006960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	887b      	ldrh	r3, [r7, #2]
 8006972:	4013      	ands	r3, r2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006978:	2301      	movs	r3, #1
 800697a:	73fb      	strb	r3, [r7, #15]
 800697c:	e001      	b.n	8006982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800697e:	2300      	movs	r3, #0
 8006980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	807b      	strh	r3, [r7, #2]
 800699c:	4613      	mov	r3, r2
 800699e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069a0:	787b      	ldrb	r3, [r7, #1]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069a6:	887a      	ldrh	r2, [r7, #2]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069ac:	e002      	b.n	80069b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069ae:	887a      	ldrh	r2, [r7, #2]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80069c4:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d0:	d102      	bne.n	80069d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80069d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d6:	e00b      	b.n	80069f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80069d8:	4b08      	ldr	r3, [pc, #32]	; (80069fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80069da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e6:	d102      	bne.n	80069ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80069e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069ec:	e000      	b.n	80069f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80069ee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40007000 	.word	0x40007000

08006a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d141      	bne.n	8006a92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a0e:	4b4b      	ldr	r3, [pc, #300]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a1a:	d131      	bne.n	8006a80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a1c:	4b47      	ldr	r3, [pc, #284]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a22:	4a46      	ldr	r2, [pc, #280]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a2c:	4b43      	ldr	r3, [pc, #268]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a34:	4a41      	ldr	r2, [pc, #260]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006a3c:	4b40      	ldr	r3, [pc, #256]	; (8006b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2232      	movs	r2, #50	; 0x32
 8006a42:	fb02 f303 	mul.w	r3, r2, r3
 8006a46:	4a3f      	ldr	r2, [pc, #252]	; (8006b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a48:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4c:	0c9b      	lsrs	r3, r3, #18
 8006a4e:	3301      	adds	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a52:	e002      	b.n	8006a5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a5a:	4b38      	ldr	r3, [pc, #224]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a66:	d102      	bne.n	8006a6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f2      	bne.n	8006a54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a6e:	4b33      	ldr	r3, [pc, #204]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7a:	d158      	bne.n	8006b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e057      	b.n	8006b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a80:	4b2e      	ldr	r3, [pc, #184]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a86:	4a2d      	ldr	r2, [pc, #180]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006a90:	e04d      	b.n	8006b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a98:	d141      	bne.n	8006b1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a9a:	4b28      	ldr	r3, [pc, #160]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa6:	d131      	bne.n	8006b0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006aa8:	4b24      	ldr	r3, [pc, #144]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aae:	4a23      	ldr	r2, [pc, #140]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ab8:	4b20      	ldr	r3, [pc, #128]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ac0:	4a1e      	ldr	r2, [pc, #120]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ac6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006ac8:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2232      	movs	r2, #50	; 0x32
 8006ace:	fb02 f303 	mul.w	r3, r2, r3
 8006ad2:	4a1c      	ldr	r2, [pc, #112]	; (8006b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad8:	0c9b      	lsrs	r3, r3, #18
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ade:	e002      	b.n	8006ae6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ae6:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af2:	d102      	bne.n	8006afa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f2      	bne.n	8006ae0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006afa:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b06:	d112      	bne.n	8006b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e011      	b.n	8006b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b12:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006b1c:	e007      	b.n	8006b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b1e:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b26:	4a05      	ldr	r2, [pc, #20]	; (8006b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b2c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40007000 	.word	0x40007000
 8006b40:	200001fc 	.word	0x200001fc
 8006b44:	431bde83 	.word	0x431bde83

08006b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08a      	sub	sp, #40	; 0x28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f000 bc76 	b.w	8007448 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b5c:	4b97      	ldr	r3, [pc, #604]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f003 030c 	and.w	r3, r3, #12
 8006b64:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b66:	4b95      	ldr	r3, [pc, #596]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80e6 	beq.w	8006d4a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <HAL_RCC_OscConfig+0x4c>
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	2b0c      	cmp	r3, #12
 8006b88:	f040 808d 	bne.w	8006ca6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	f040 8089 	bne.w	8006ca6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b94:	4b89      	ldr	r3, [pc, #548]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d006      	beq.n	8006bae <HAL_RCC_OscConfig+0x66>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d102      	bne.n	8006bae <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f000 bc4d 	b.w	8007448 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bb2:	4b82      	ldr	r3, [pc, #520]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d004      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x80>
 8006bbe:	4b7f      	ldr	r3, [pc, #508]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc6:	e005      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8c>
 8006bc8:	4b7c      	ldr	r3, [pc, #496]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d224      	bcs.n	8006c22 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fdf3 	bl	80077c8 <RCC_SetFlashLatencyFromMSIRange>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f000 bc2d 	b.w	8007448 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bee:	4b73      	ldr	r3, [pc, #460]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a72      	ldr	r2, [pc, #456]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006bf4:	f043 0308 	orr.w	r3, r3, #8
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	4b70      	ldr	r3, [pc, #448]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	496d      	ldr	r1, [pc, #436]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c0c:	4b6b      	ldr	r3, [pc, #428]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	021b      	lsls	r3, r3, #8
 8006c1a:	4968      	ldr	r1, [pc, #416]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	604b      	str	r3, [r1, #4]
 8006c20:	e025      	b.n	8006c6e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c22:	4b66      	ldr	r3, [pc, #408]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a65      	ldr	r2, [pc, #404]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006c28:	f043 0308 	orr.w	r3, r3, #8
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	4b63      	ldr	r3, [pc, #396]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	4960      	ldr	r1, [pc, #384]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c40:	4b5e      	ldr	r3, [pc, #376]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	495b      	ldr	r1, [pc, #364]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fdb2 	bl	80077c8 <RCC_SetFlashLatencyFromMSIRange>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e3ec      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c6e:	f000 fd1f 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 8006c72:	4602      	mov	r2, r0
 8006c74:	4b51      	ldr	r3, [pc, #324]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	091b      	lsrs	r3, r3, #4
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	4950      	ldr	r1, [pc, #320]	; (8006dc0 <HAL_RCC_OscConfig+0x278>)
 8006c80:	5ccb      	ldrb	r3, [r1, r3]
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8a:	4a4e      	ldr	r2, [pc, #312]	; (8006dc4 <HAL_RCC_OscConfig+0x27c>)
 8006c8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c8e:	4b4e      	ldr	r3, [pc, #312]	; (8006dc8 <HAL_RCC_OscConfig+0x280>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fd fd3c 	bl	8004710 <HAL_InitTick>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d052      	beq.n	8006d48 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	e3d0      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d032      	beq.n	8006d14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006cae:	4b43      	ldr	r3, [pc, #268]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a42      	ldr	r2, [pc, #264]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006cb4:	f043 0301 	orr.w	r3, r3, #1
 8006cb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cba:	f7fd fd79 	bl	80047b0 <HAL_GetTick>
 8006cbe:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006cc2:	f7fd fd75 	bl	80047b0 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e3b9      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006cd4:	4b39      	ldr	r3, [pc, #228]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0f0      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ce0:	4b36      	ldr	r3, [pc, #216]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a35      	ldr	r2, [pc, #212]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006ce6:	f043 0308 	orr.w	r3, r3, #8
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	4b33      	ldr	r3, [pc, #204]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	4930      	ldr	r1, [pc, #192]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cfe:	4b2f      	ldr	r3, [pc, #188]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	492b      	ldr	r1, [pc, #172]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	604b      	str	r3, [r1, #4]
 8006d12:	e01a      	b.n	8006d4a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006d14:	4b29      	ldr	r3, [pc, #164]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a28      	ldr	r2, [pc, #160]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006d1a:	f023 0301 	bic.w	r3, r3, #1
 8006d1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d20:	f7fd fd46 	bl	80047b0 <HAL_GetTick>
 8006d24:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d28:	f7fd fd42 	bl	80047b0 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e386      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d3a:	4b20      	ldr	r3, [pc, #128]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f0      	bne.n	8006d28 <HAL_RCC_OscConfig+0x1e0>
 8006d46:	e000      	b.n	8006d4a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d073      	beq.n	8006e3e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d005      	beq.n	8006d68 <HAL_RCC_OscConfig+0x220>
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	2b0c      	cmp	r3, #12
 8006d60:	d10e      	bne.n	8006d80 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d10b      	bne.n	8006d80 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d68:	4b14      	ldr	r3, [pc, #80]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d063      	beq.n	8006e3c <HAL_RCC_OscConfig+0x2f4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d15f      	bne.n	8006e3c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e363      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d88:	d106      	bne.n	8006d98 <HAL_RCC_OscConfig+0x250>
 8006d8a:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a0b      	ldr	r2, [pc, #44]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e025      	b.n	8006de4 <HAL_RCC_OscConfig+0x29c>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006da0:	d114      	bne.n	8006dcc <HAL_RCC_OscConfig+0x284>
 8006da2:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a05      	ldr	r2, [pc, #20]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	4b03      	ldr	r3, [pc, #12]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a02      	ldr	r2, [pc, #8]	; (8006dbc <HAL_RCC_OscConfig+0x274>)
 8006db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	e013      	b.n	8006de4 <HAL_RCC_OscConfig+0x29c>
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	080098bc 	.word	0x080098bc
 8006dc4:	200001fc 	.word	0x200001fc
 8006dc8:	20000200 	.word	0x20000200
 8006dcc:	4b8f      	ldr	r3, [pc, #572]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a8e      	ldr	r2, [pc, #568]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	4b8c      	ldr	r3, [pc, #560]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a8b      	ldr	r2, [pc, #556]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d013      	beq.n	8006e14 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dec:	f7fd fce0 	bl	80047b0 <HAL_GetTick>
 8006df0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df4:	f7fd fcdc 	bl	80047b0 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b64      	cmp	r3, #100	; 0x64
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e320      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e06:	4b81      	ldr	r3, [pc, #516]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0f0      	beq.n	8006df4 <HAL_RCC_OscConfig+0x2ac>
 8006e12:	e014      	b.n	8006e3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e14:	f7fd fccc 	bl	80047b0 <HAL_GetTick>
 8006e18:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e1c:	f7fd fcc8 	bl	80047b0 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b64      	cmp	r3, #100	; 0x64
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e30c      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e2e:	4b77      	ldr	r3, [pc, #476]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x2d4>
 8006e3a:	e000      	b.n	8006e3e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d060      	beq.n	8006f0c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d005      	beq.n	8006e5c <HAL_RCC_OscConfig+0x314>
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	2b0c      	cmp	r3, #12
 8006e54:	d119      	bne.n	8006e8a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d116      	bne.n	8006e8a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e5c:	4b6b      	ldr	r3, [pc, #428]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_RCC_OscConfig+0x32c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e2e9      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e74:	4b65      	ldr	r3, [pc, #404]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	061b      	lsls	r3, r3, #24
 8006e82:	4962      	ldr	r1, [pc, #392]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e88:	e040      	b.n	8006f0c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d023      	beq.n	8006eda <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e92:	4b5e      	ldr	r3, [pc, #376]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a5d      	ldr	r2, [pc, #372]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9e:	f7fd fc87 	bl	80047b0 <HAL_GetTick>
 8006ea2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ea6:	f7fd fc83 	bl	80047b0 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e2c7      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eb8:	4b54      	ldr	r3, [pc, #336]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec4:	4b51      	ldr	r3, [pc, #324]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	061b      	lsls	r3, r3, #24
 8006ed2:	494e      	ldr	r1, [pc, #312]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	604b      	str	r3, [r1, #4]
 8006ed8:	e018      	b.n	8006f0c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eda:	4b4c      	ldr	r3, [pc, #304]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a4b      	ldr	r2, [pc, #300]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee6:	f7fd fc63 	bl	80047b0 <HAL_GetTick>
 8006eea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006eec:	e008      	b.n	8006f00 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eee:	f7fd fc5f 	bl	80047b0 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e2a3      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f00:	4b42      	ldr	r3, [pc, #264]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f0      	bne.n	8006eee <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8082 	beq.w	800701e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d05f      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8006f22:	4b3a      	ldr	r3, [pc, #232]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f28:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d037      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d006      	beq.n	8006f50 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e27b      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01b      	beq.n	8006f92 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8006f5a:	4b2c      	ldr	r3, [pc, #176]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f60:	4a2a      	ldr	r2, [pc, #168]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006f62:	f023 0301 	bic.w	r3, r3, #1
 8006f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f6a:	f7fd fc21 	bl	80047b0 <HAL_GetTick>
 8006f6e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f70:	e008      	b.n	8006f84 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f72:	f7fd fc1d 	bl	80047b0 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b11      	cmp	r3, #17
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e261      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f84:	4b21      	ldr	r3, [pc, #132]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1ef      	bne.n	8006f72 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006f92:	4b1e      	ldr	r3, [pc, #120]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f98:	f023 0210 	bic.w	r2, r3, #16
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	491a      	ldr	r1, [pc, #104]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fa8:	4b18      	ldr	r3, [pc, #96]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fae:	4a17      	ldr	r2, [pc, #92]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006fb0:	f043 0301 	orr.w	r3, r3, #1
 8006fb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb8:	f7fd fbfa 	bl	80047b0 <HAL_GetTick>
 8006fbc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fc0:	f7fd fbf6 	bl	80047b0 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b11      	cmp	r3, #17
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e23a      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fd2:	4b0e      	ldr	r3, [pc, #56]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0ef      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x478>
 8006fe0:	e01d      	b.n	800701e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fe2:	4b0a      	ldr	r3, [pc, #40]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fe8:	4a08      	ldr	r2, [pc, #32]	; (800700c <HAL_RCC_OscConfig+0x4c4>)
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff2:	f7fd fbdd 	bl	80047b0 <HAL_GetTick>
 8006ff6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ff8:	e00a      	b.n	8007010 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ffa:	f7fd fbd9 	bl	80047b0 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b11      	cmp	r3, #17
 8007006:	d903      	bls.n	8007010 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e21d      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
 800700c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007010:	4b83      	ldr	r3, [pc, #524]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1ed      	bne.n	8006ffa <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80bd 	beq.w	80071a6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800702c:	2300      	movs	r3, #0
 800702e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007032:	4b7b      	ldr	r3, [pc, #492]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10e      	bne.n	800705c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800703e:	4b78      	ldr	r3, [pc, #480]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007042:	4a77      	ldr	r2, [pc, #476]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007048:	6593      	str	r3, [r2, #88]	; 0x58
 800704a:	4b75      	ldr	r3, [pc, #468]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 800704c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800705c:	4b71      	ldr	r3, [pc, #452]	; (8007224 <HAL_RCC_OscConfig+0x6dc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007064:	2b00      	cmp	r3, #0
 8007066:	d118      	bne.n	800709a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007068:	4b6e      	ldr	r3, [pc, #440]	; (8007224 <HAL_RCC_OscConfig+0x6dc>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a6d      	ldr	r2, [pc, #436]	; (8007224 <HAL_RCC_OscConfig+0x6dc>)
 800706e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007072:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007074:	f7fd fb9c 	bl	80047b0 <HAL_GetTick>
 8007078:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800707c:	f7fd fb98 	bl	80047b0 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e1dc      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800708e:	4b65      	ldr	r3, [pc, #404]	; (8007224 <HAL_RCC_OscConfig+0x6dc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f0      	beq.n	800707c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d02c      	beq.n	8007100 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80070a6:	4b5e      	ldr	r3, [pc, #376]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80070a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b8:	4959      	ldr	r1, [pc, #356]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d010      	beq.n	80070ee <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80070cc:	4b54      	ldr	r3, [pc, #336]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80070ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d2:	4a53      	ldr	r2, [pc, #332]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80070d4:	f043 0304 	orr.w	r3, r3, #4
 80070d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80070dc:	4b50      	ldr	r3, [pc, #320]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e2:	4a4f      	ldr	r2, [pc, #316]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070ec:	e018      	b.n	8007120 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80070ee:	4b4c      	ldr	r3, [pc, #304]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f4:	4a4a      	ldr	r2, [pc, #296]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070fe:	e00f      	b.n	8007120 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007100:	4b47      	ldr	r3, [pc, #284]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007106:	4a46      	ldr	r2, [pc, #280]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007108:	f023 0301 	bic.w	r3, r3, #1
 800710c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007110:	4b43      	ldr	r3, [pc, #268]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007116:	4a42      	ldr	r2, [pc, #264]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007118:	f023 0304 	bic.w	r3, r3, #4
 800711c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d016      	beq.n	8007156 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007128:	f7fd fb42 	bl	80047b0 <HAL_GetTick>
 800712c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800712e:	e00a      	b.n	8007146 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007130:	f7fd fb3e 	bl	80047b0 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f241 3288 	movw	r2, #5000	; 0x1388
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e180      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007146:	4b36      	ldr	r3, [pc, #216]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0ed      	beq.n	8007130 <HAL_RCC_OscConfig+0x5e8>
 8007154:	e01d      	b.n	8007192 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007156:	f7fd fb2b 	bl	80047b0 <HAL_GetTick>
 800715a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800715c:	e00a      	b.n	8007174 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800715e:	f7fd fb27 	bl	80047b0 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	f241 3288 	movw	r2, #5000	; 0x1388
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e169      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007174:	4b2a      	ldr	r3, [pc, #168]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1ed      	bne.n	800715e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8007182:	4b27      	ldr	r3, [pc, #156]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007188:	4a25      	ldr	r2, [pc, #148]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 800718a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800718e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007196:	2b01      	cmp	r3, #1
 8007198:	d105      	bne.n	80071a6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800719a:	4b21      	ldr	r3, [pc, #132]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 800719c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719e:	4a20      	ldr	r2, [pc, #128]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80071a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d041      	beq.n	8007236 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d01c      	beq.n	80071f4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071ba:	4b19      	ldr	r3, [pc, #100]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80071bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071c0:	4a17      	ldr	r2, [pc, #92]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80071c2:	f043 0301 	orr.w	r3, r3, #1
 80071c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ca:	f7fd faf1 	bl	80047b0 <HAL_GetTick>
 80071ce:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071d2:	f7fd faed 	bl	80047b0 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e131      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80071e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0ef      	beq.n	80071d2 <HAL_RCC_OscConfig+0x68a>
 80071f2:	e020      	b.n	8007236 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071f4:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80071f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071fa:	4a09      	ldr	r2, [pc, #36]	; (8007220 <HAL_RCC_OscConfig+0x6d8>)
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007204:	f7fd fad4 	bl	80047b0 <HAL_GetTick>
 8007208:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800720a:	e00d      	b.n	8007228 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800720c:	f7fd fad0 	bl	80047b0 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d906      	bls.n	8007228 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e114      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
 800721e:	bf00      	nop
 8007220:	40021000 	.word	0x40021000
 8007224:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007228:	4b89      	ldr	r3, [pc, #548]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 800722a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1ea      	bne.n	800720c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8103 	beq.w	8007446 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	2b02      	cmp	r3, #2
 8007246:	f040 80cb 	bne.w	80073e0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800724a:	4b81      	ldr	r3, [pc, #516]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f003 0203 	and.w	r2, r3, #3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	429a      	cmp	r2, r3
 800725c:	d12c      	bne.n	80072b8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007268:	3b01      	subs	r3, #1
 800726a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800726c:	429a      	cmp	r2, r3
 800726e:	d123      	bne.n	80072b8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800727c:	429a      	cmp	r2, r3
 800727e:	d11b      	bne.n	80072b8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800728c:	429a      	cmp	r2, r3
 800728e:	d113      	bne.n	80072b8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	3b01      	subs	r3, #1
 800729e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d109      	bne.n	80072b8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	3b01      	subs	r3, #1
 80072b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d06d      	beq.n	8007394 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2b0c      	cmp	r3, #12
 80072bc:	d068      	beq.n	8007390 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80072be:	4b64      	ldr	r3, [pc, #400]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80072ca:	4b61      	ldr	r3, [pc, #388]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e0b6      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80072da:	4b5d      	ldr	r3, [pc, #372]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a5c      	ldr	r2, [pc, #368]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80072e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80072e6:	f7fd fa63 	bl	80047b0 <HAL_GetTick>
 80072ea:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072ec:	e008      	b.n	8007300 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ee:	f7fd fa5f 	bl	80047b0 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e0a3      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007300:	4b53      	ldr	r3, [pc, #332]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f0      	bne.n	80072ee <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800730c:	4b50      	ldr	r3, [pc, #320]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	4b50      	ldr	r3, [pc, #320]	; (8007454 <HAL_RCC_OscConfig+0x90c>)
 8007312:	4013      	ands	r3, r2
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800731c:	3a01      	subs	r2, #1
 800731e:	0112      	lsls	r2, r2, #4
 8007320:	4311      	orrs	r1, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007326:	0212      	lsls	r2, r2, #8
 8007328:	4311      	orrs	r1, r2
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800732e:	0852      	lsrs	r2, r2, #1
 8007330:	3a01      	subs	r2, #1
 8007332:	0552      	lsls	r2, r2, #21
 8007334:	4311      	orrs	r1, r2
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800733a:	0852      	lsrs	r2, r2, #1
 800733c:	3a01      	subs	r2, #1
 800733e:	0652      	lsls	r2, r2, #25
 8007340:	4311      	orrs	r1, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007346:	06d2      	lsls	r2, r2, #27
 8007348:	430a      	orrs	r2, r1
 800734a:	4941      	ldr	r1, [pc, #260]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 800734c:	4313      	orrs	r3, r2
 800734e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007350:	4b3f      	ldr	r3, [pc, #252]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a3e      	ldr	r2, [pc, #248]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 8007356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800735a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800735c:	4b3c      	ldr	r3, [pc, #240]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	4a3b      	ldr	r2, [pc, #236]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 8007362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007366:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007368:	f7fd fa22 	bl	80047b0 <HAL_GetTick>
 800736c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007370:	f7fd fa1e 	bl	80047b0 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e062      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007382:	4b33      	ldr	r3, [pc, #204]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0f0      	beq.n	8007370 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800738e:	e05a      	b.n	8007446 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e059      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007394:	4b2e      	ldr	r3, [pc, #184]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d152      	bne.n	8007446 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80073a0:	4b2b      	ldr	r3, [pc, #172]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2a      	ldr	r2, [pc, #168]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80073a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073ac:	4b28      	ldr	r3, [pc, #160]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	4a27      	ldr	r2, [pc, #156]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80073b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80073b8:	f7fd f9fa 	bl	80047b0 <HAL_GetTick>
 80073bc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073c0:	f7fd f9f6 	bl	80047b0 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e03a      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073d2:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0f0      	beq.n	80073c0 <HAL_RCC_OscConfig+0x878>
 80073de:	e032      	b.n	8007446 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	2b0c      	cmp	r3, #12
 80073e4:	d02d      	beq.n	8007442 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e6:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a19      	ldr	r2, [pc, #100]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80073ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80073f2:	4b17      	ldr	r3, [pc, #92]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d105      	bne.n	800740a <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	4a13      	ldr	r2, [pc, #76]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 8007404:	f023 0303 	bic.w	r3, r3, #3
 8007408:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800740a:	4b11      	ldr	r3, [pc, #68]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	4a10      	ldr	r2, [pc, #64]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 8007410:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007418:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741a:	f7fd f9c9 	bl	80047b0 <HAL_GetTick>
 800741e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007420:	e008      	b.n	8007434 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007422:	f7fd f9c5 	bl	80047b0 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d901      	bls.n	8007434 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e009      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007434:	4b06      	ldr	r3, [pc, #24]	; (8007450 <HAL_RCC_OscConfig+0x908>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1f0      	bne.n	8007422 <HAL_RCC_OscConfig+0x8da>
 8007440:	e001      	b.n	8007446 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3728      	adds	r7, #40	; 0x28
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	40021000 	.word	0x40021000
 8007454:	019d800c 	.word	0x019d800c

08007458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e10f      	b.n	8007690 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007470:	4b89      	ldr	r3, [pc, #548]	; (8007698 <HAL_RCC_ClockConfig+0x240>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d910      	bls.n	80074a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800747e:	4b86      	ldr	r3, [pc, #536]	; (8007698 <HAL_RCC_ClockConfig+0x240>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f023 020f 	bic.w	r2, r3, #15
 8007486:	4984      	ldr	r1, [pc, #528]	; (8007698 <HAL_RCC_ClockConfig+0x240>)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	4313      	orrs	r3, r2
 800748c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800748e:	4b82      	ldr	r3, [pc, #520]	; (8007698 <HAL_RCC_ClockConfig+0x240>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	429a      	cmp	r2, r3
 800749a:	d001      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e0f7      	b.n	8007690 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 8089 	beq.w	80075c0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d133      	bne.n	800751e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074b6:	4b79      	ldr	r3, [pc, #484]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e0e4      	b.n	8007690 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80074c6:	f000 f9d9 	bl	800787c <RCC_GetSysClockFreqFromPLLSource>
 80074ca:	4603      	mov	r3, r0
 80074cc:	4a74      	ldr	r2, [pc, #464]	; (80076a0 <HAL_RCC_ClockConfig+0x248>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d955      	bls.n	800757e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80074d2:	4b72      	ldr	r3, [pc, #456]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074de:	4b6f      	ldr	r3, [pc, #444]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074e6:	4a6d      	ldr	r2, [pc, #436]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 80074e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80074ee:	2380      	movs	r3, #128	; 0x80
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e044      	b.n	800757e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d03e      	beq.n	800757e <HAL_RCC_ClockConfig+0x126>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d13a      	bne.n	800757e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007508:	4b64      	ldr	r3, [pc, #400]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007510:	4a62      	ldr	r2, [pc, #392]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 8007512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007516:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007518:	2380      	movs	r3, #128	; 0x80
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	e02f      	b.n	800757e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d107      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007526:	4b5d      	ldr	r3, [pc, #372]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d115      	bne.n	800755e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e0ac      	b.n	8007690 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d107      	bne.n	800754e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800753e:	4b57      	ldr	r3, [pc, #348]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e0a0      	b.n	8007690 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800754e:	4b53      	ldr	r3, [pc, #332]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e098      	b.n	8007690 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800755e:	f000 f8a7 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 8007562:	4603      	mov	r3, r0
 8007564:	4a4e      	ldr	r2, [pc, #312]	; (80076a0 <HAL_RCC_ClockConfig+0x248>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d909      	bls.n	800757e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800756a:	4b4c      	ldr	r3, [pc, #304]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007572:	4a4a      	ldr	r2, [pc, #296]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 8007574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007578:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800757a:	2380      	movs	r3, #128	; 0x80
 800757c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800757e:	4b47      	ldr	r3, [pc, #284]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f023 0203 	bic.w	r2, r3, #3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	4944      	ldr	r1, [pc, #272]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 800758c:	4313      	orrs	r3, r2
 800758e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007590:	f7fd f90e 	bl	80047b0 <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007596:	e00a      	b.n	80075ae <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007598:	f7fd f90a 	bl	80047b0 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e070      	b.n	8007690 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ae:	4b3b      	ldr	r3, [pc, #236]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 020c 	and.w	r2, r3, #12
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	429a      	cmp	r2, r3
 80075be:	d1eb      	bne.n	8007598 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075cc:	4b33      	ldr	r3, [pc, #204]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	4930      	ldr	r1, [pc, #192]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
 80075de:	e008      	b.n	80075f2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2b80      	cmp	r3, #128	; 0x80
 80075e4:	d105      	bne.n	80075f2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80075e6:	4b2d      	ldr	r3, [pc, #180]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	4a2c      	ldr	r2, [pc, #176]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 80075ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075f2:	4b29      	ldr	r3, [pc, #164]	; (8007698 <HAL_RCC_ClockConfig+0x240>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d210      	bcs.n	8007622 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007600:	4b25      	ldr	r3, [pc, #148]	; (8007698 <HAL_RCC_ClockConfig+0x240>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f023 020f 	bic.w	r2, r3, #15
 8007608:	4923      	ldr	r1, [pc, #140]	; (8007698 <HAL_RCC_ClockConfig+0x240>)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	4313      	orrs	r3, r2
 800760e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007610:	4b21      	ldr	r3, [pc, #132]	; (8007698 <HAL_RCC_ClockConfig+0x240>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d001      	beq.n	8007622 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e036      	b.n	8007690 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	2b00      	cmp	r3, #0
 800762c:	d008      	beq.n	8007640 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800762e:	4b1b      	ldr	r3, [pc, #108]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	4918      	ldr	r1, [pc, #96]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 800763c:	4313      	orrs	r3, r2
 800763e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d009      	beq.n	8007660 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800764c:	4b13      	ldr	r3, [pc, #76]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	4910      	ldr	r1, [pc, #64]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 800765c:	4313      	orrs	r3, r2
 800765e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007660:	f000 f826 	bl	80076b0 <HAL_RCC_GetSysClockFreq>
 8007664:	4602      	mov	r2, r0
 8007666:	4b0d      	ldr	r3, [pc, #52]	; (800769c <HAL_RCC_ClockConfig+0x244>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	091b      	lsrs	r3, r3, #4
 800766c:	f003 030f 	and.w	r3, r3, #15
 8007670:	490c      	ldr	r1, [pc, #48]	; (80076a4 <HAL_RCC_ClockConfig+0x24c>)
 8007672:	5ccb      	ldrb	r3, [r1, r3]
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
 800767c:	4a0a      	ldr	r2, [pc, #40]	; (80076a8 <HAL_RCC_ClockConfig+0x250>)
 800767e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <HAL_RCC_ClockConfig+0x254>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f7fd f843 	bl	8004710 <HAL_InitTick>
 800768a:	4603      	mov	r3, r0
 800768c:	73fb      	strb	r3, [r7, #15]

  return status;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40022000 	.word	0x40022000
 800769c:	40021000 	.word	0x40021000
 80076a0:	04c4b400 	.word	0x04c4b400
 80076a4:	080098bc 	.word	0x080098bc
 80076a8:	200001fc 	.word	0x200001fc
 80076ac:	20000200 	.word	0x20000200

080076b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b089      	sub	sp, #36	; 0x24
 80076b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	2300      	movs	r3, #0
 80076bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076be:	4b3e      	ldr	r3, [pc, #248]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 030c 	and.w	r3, r3, #12
 80076c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076c8:	4b3b      	ldr	r3, [pc, #236]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f003 0303 	and.w	r3, r3, #3
 80076d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <HAL_RCC_GetSysClockFreq+0x34>
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b0c      	cmp	r3, #12
 80076dc:	d121      	bne.n	8007722 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d11e      	bne.n	8007722 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80076e4:	4b34      	ldr	r3, [pc, #208]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d107      	bne.n	8007700 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80076f0:	4b31      	ldr	r3, [pc, #196]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076f6:	0a1b      	lsrs	r3, r3, #8
 80076f8:	f003 030f 	and.w	r3, r3, #15
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	e005      	b.n	800770c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007700:	4b2d      	ldr	r3, [pc, #180]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	091b      	lsrs	r3, r3, #4
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800770c:	4a2b      	ldr	r2, [pc, #172]	; (80077bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007714:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10d      	bne.n	8007738 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007720:	e00a      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b04      	cmp	r3, #4
 8007726:	d102      	bne.n	800772e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007728:	4b25      	ldr	r3, [pc, #148]	; (80077c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	e004      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b08      	cmp	r3, #8
 8007732:	d101      	bne.n	8007738 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007734:	4b23      	ldr	r3, [pc, #140]	; (80077c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007736:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	2b0c      	cmp	r3, #12
 800773c:	d134      	bne.n	80077a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800773e:	4b1e      	ldr	r3, [pc, #120]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b02      	cmp	r3, #2
 800774c:	d003      	beq.n	8007756 <HAL_RCC_GetSysClockFreq+0xa6>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2b03      	cmp	r3, #3
 8007752:	d003      	beq.n	800775c <HAL_RCC_GetSysClockFreq+0xac>
 8007754:	e005      	b.n	8007762 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007756:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007758:	617b      	str	r3, [r7, #20]
      break;
 800775a:	e005      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800775c:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800775e:	617b      	str	r3, [r7, #20]
      break;
 8007760:	e002      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	617b      	str	r3, [r7, #20]
      break;
 8007766:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007768:	4b13      	ldr	r3, [pc, #76]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	091b      	lsrs	r3, r3, #4
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	3301      	adds	r3, #1
 8007774:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007776:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	0a1b      	lsrs	r3, r3, #8
 800777c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	fb03 f202 	mul.w	r2, r3, r2
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	fbb2 f3f3 	udiv	r3, r2, r3
 800778c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800778e:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	0e5b      	lsrs	r3, r3, #25
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	3301      	adds	r3, #1
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80077a8:	69bb      	ldr	r3, [r7, #24]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3724      	adds	r7, #36	; 0x24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	40021000 	.word	0x40021000
 80077bc:	080098cc 	.word	0x080098cc
 80077c0:	00f42400 	.word	0x00f42400
 80077c4:	007a1200 	.word	0x007a1200

080077c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80077d0:	2300      	movs	r3, #0
 80077d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80077d4:	4b27      	ldr	r3, [pc, #156]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80077e0:	f7ff f8ee 	bl	80069c0 <HAL_PWREx_GetVoltageRange>
 80077e4:	6178      	str	r0, [r7, #20]
 80077e6:	e014      	b.n	8007812 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80077e8:	4b22      	ldr	r3, [pc, #136]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ec:	4a21      	ldr	r2, [pc, #132]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f2:	6593      	str	r3, [r2, #88]	; 0x58
 80077f4:	4b1f      	ldr	r3, [pc, #124]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007800:	f7ff f8de 	bl	80069c0 <HAL_PWREx_GetVoltageRange>
 8007804:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007806:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	4a1a      	ldr	r2, [pc, #104]	; (8007874 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800780c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007810:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007818:	d10b      	bne.n	8007832 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b80      	cmp	r3, #128	; 0x80
 800781e:	d913      	bls.n	8007848 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2ba0      	cmp	r3, #160	; 0xa0
 8007824:	d902      	bls.n	800782c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007826:	2302      	movs	r3, #2
 8007828:	613b      	str	r3, [r7, #16]
 800782a:	e00d      	b.n	8007848 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800782c:	2301      	movs	r3, #1
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	e00a      	b.n	8007848 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b7f      	cmp	r3, #127	; 0x7f
 8007836:	d902      	bls.n	800783e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007838:	2302      	movs	r3, #2
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	e004      	b.n	8007848 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b70      	cmp	r3, #112	; 0x70
 8007842:	d101      	bne.n	8007848 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007844:	2301      	movs	r3, #1
 8007846:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007848:	4b0b      	ldr	r3, [pc, #44]	; (8007878 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f023 020f 	bic.w	r2, r3, #15
 8007850:	4909      	ldr	r1, [pc, #36]	; (8007878 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	4313      	orrs	r3, r2
 8007856:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007858:	4b07      	ldr	r3, [pc, #28]	; (8007878 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	429a      	cmp	r2, r3
 8007864:	d001      	beq.n	800786a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40021000 	.word	0x40021000
 8007878:	40022000 	.word	0x40022000

0800787c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8007886:	4b2d      	ldr	r3, [pc, #180]	; (800793c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d118      	bne.n	80078c4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007892:	4b2a      	ldr	r3, [pc, #168]	; (800793c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d107      	bne.n	80078ae <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800789e:	4b27      	ldr	r3, [pc, #156]	; (800793c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80078a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a4:	0a1b      	lsrs	r3, r3, #8
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	e005      	b.n	80078ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80078ae:	4b23      	ldr	r3, [pc, #140]	; (800793c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	091b      	lsrs	r3, r3, #4
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80078ba:	4a21      	ldr	r2, [pc, #132]	; (8007940 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078c4:	4b1d      	ldr	r3, [pc, #116]	; (800793c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d003      	beq.n	80078dc <RCC_GetSysClockFreqFromPLLSource+0x60>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d003      	beq.n	80078e2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80078da:	e005      	b.n	80078e8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80078dc:	4b19      	ldr	r3, [pc, #100]	; (8007944 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80078de:	613b      	str	r3, [r7, #16]
    break;
 80078e0:	e005      	b.n	80078ee <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80078e2:	4b19      	ldr	r3, [pc, #100]	; (8007948 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80078e4:	613b      	str	r3, [r7, #16]
    break;
 80078e6:	e002      	b.n	80078ee <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	613b      	str	r3, [r7, #16]
    break;
 80078ec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078ee:	4b13      	ldr	r3, [pc, #76]	; (800793c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	091b      	lsrs	r3, r3, #4
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	3301      	adds	r3, #1
 80078fa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80078fc:	4b0f      	ldr	r3, [pc, #60]	; (800793c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	0a1b      	lsrs	r3, r3, #8
 8007902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	fb03 f202 	mul.w	r2, r3, r2
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007912:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007914:	4b09      	ldr	r3, [pc, #36]	; (800793c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	0e5b      	lsrs	r3, r3, #25
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	3301      	adds	r3, #1
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800792e:	683b      	ldr	r3, [r7, #0]
}
 8007930:	4618      	mov	r0, r3
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	40021000 	.word	0x40021000
 8007940:	080098cc 	.word	0x080098cc
 8007944:	00f42400 	.word	0x00f42400
 8007948:	007a1200 	.word	0x007a1200

0800794c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007954:	2300      	movs	r3, #0
 8007956:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007958:	2300      	movs	r3, #0
 800795a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007964:	2b00      	cmp	r3, #0
 8007966:	d040      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800796c:	2b80      	cmp	r3, #128	; 0x80
 800796e:	d02a      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007970:	2b80      	cmp	r3, #128	; 0x80
 8007972:	d825      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007974:	2b60      	cmp	r3, #96	; 0x60
 8007976:	d026      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007978:	2b60      	cmp	r3, #96	; 0x60
 800797a:	d821      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d006      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	d81d      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007988:	2b20      	cmp	r3, #32
 800798a:	d010      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x62>
 800798c:	e018      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800798e:	4b89      	ldr	r3, [pc, #548]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	4a88      	ldr	r2, [pc, #544]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007998:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800799a:	e015      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fb3e 	bl	8008024 <RCCEx_PLLSAI1_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079ac:	e00c      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3320      	adds	r3, #32
 80079b2:	2100      	movs	r1, #0
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 fc29 	bl	800820c <RCCEx_PLLSAI2_Config>
 80079ba:	4603      	mov	r3, r0
 80079bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079be:	e003      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	74fb      	strb	r3, [r7, #19]
      break;
 80079c4:	e000      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80079c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c8:	7cfb      	ldrb	r3, [r7, #19]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10b      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079ce:	4b79      	ldr	r3, [pc, #484]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079d4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079dc:	4975      	ldr	r1, [pc, #468]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80079e4:	e001      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e6:	7cfb      	ldrb	r3, [r7, #19]
 80079e8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d047      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fe:	d030      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a04:	d82a      	bhi.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a0a:	d02a      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a10:	d824      	bhi.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a16:	d008      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a1c:	d81e      	bhi.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a26:	d010      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a28:	e018      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a2a:	4b62      	ldr	r3, [pc, #392]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	4a61      	ldr	r2, [pc, #388]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a34:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a36:	e015      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 faf0 	bl	8008024 <RCCEx_PLLSAI1_Config>
 8007a44:	4603      	mov	r3, r0
 8007a46:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a48:	e00c      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	3320      	adds	r3, #32
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fbdb 	bl	800820c <RCCEx_PLLSAI2_Config>
 8007a56:	4603      	mov	r3, r0
 8007a58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a5a:	e003      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	74fb      	strb	r3, [r7, #19]
      break;
 8007a60:	e000      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a64:	7cfb      	ldrb	r3, [r7, #19]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10b      	bne.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a6a:	4b52      	ldr	r3, [pc, #328]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a78:	494e      	ldr	r1, [pc, #312]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007a80:	e001      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a82:	7cfb      	ldrb	r3, [r7, #19]
 8007a84:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 809f 	beq.w	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a94:	2300      	movs	r3, #0
 8007a96:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a98:	4b46      	ldr	r3, [pc, #280]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00d      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aae:	4b41      	ldr	r3, [pc, #260]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab2:	4a40      	ldr	r2, [pc, #256]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8007aba:	4b3e      	ldr	r3, [pc, #248]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	60bb      	str	r3, [r7, #8]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aca:	4b3b      	ldr	r3, [pc, #236]	; (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a3a      	ldr	r2, [pc, #232]	; (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ad4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ad6:	f7fc fe6b 	bl	80047b0 <HAL_GetTick>
 8007ada:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007adc:	e009      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ade:	f7fc fe67 	bl	80047b0 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d902      	bls.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	74fb      	strb	r3, [r7, #19]
        break;
 8007af0:	e005      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007af2:	4b31      	ldr	r3, [pc, #196]	; (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0ef      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007afe:	7cfb      	ldrb	r3, [r7, #19]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d15b      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b04:	4b2b      	ldr	r3, [pc, #172]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b0e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01f      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d019      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b22:	4b24      	ldr	r3, [pc, #144]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b2e:	4b21      	ldr	r3, [pc, #132]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b34:	4a1f      	ldr	r2, [pc, #124]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b3e:	4b1d      	ldr	r3, [pc, #116]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b44:	4a1b      	ldr	r2, [pc, #108]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b4e:	4a19      	ldr	r2, [pc, #100]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d016      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b60:	f7fc fe26 	bl	80047b0 <HAL_GetTick>
 8007b64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b66:	e00b      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b68:	f7fc fe22 	bl	80047b0 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d902      	bls.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	74fb      	strb	r3, [r7, #19]
            break;
 8007b7e:	e006      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b80:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0ec      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007b8e:	7cfb      	ldrb	r3, [r7, #19]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10c      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ba4:	4903      	ldr	r1, [pc, #12]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007bac:	e008      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bae:	7cfb      	ldrb	r3, [r7, #19]
 8007bb0:	74bb      	strb	r3, [r7, #18]
 8007bb2:	e005      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007bb4:	40021000 	.word	0x40021000
 8007bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbc:	7cfb      	ldrb	r3, [r7, #19]
 8007bbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bc0:	7c7b      	ldrb	r3, [r7, #17]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d105      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bc6:	4ba0      	ldr	r3, [pc, #640]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	4a9f      	ldr	r2, [pc, #636]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bde:	4b9a      	ldr	r3, [pc, #616]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be4:	f023 0203 	bic.w	r2, r3, #3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bec:	4996      	ldr	r1, [pc, #600]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c00:	4b91      	ldr	r3, [pc, #580]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c06:	f023 020c 	bic.w	r2, r3, #12
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	498e      	ldr	r1, [pc, #568]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c22:	4b89      	ldr	r3, [pc, #548]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c30:	4985      	ldr	r1, [pc, #532]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00a      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c44:	4b80      	ldr	r3, [pc, #512]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c52:	497d      	ldr	r1, [pc, #500]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c66:	4b78      	ldr	r3, [pc, #480]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c74:	4974      	ldr	r1, [pc, #464]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0320 	and.w	r3, r3, #32
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00a      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c88:	4b6f      	ldr	r3, [pc, #444]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c96:	496c      	ldr	r1, [pc, #432]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00a      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007caa:	4b67      	ldr	r3, [pc, #412]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb8:	4963      	ldr	r1, [pc, #396]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00a      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ccc:	4b5e      	ldr	r3, [pc, #376]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cda:	495b      	ldr	r1, [pc, #364]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cee:	4b56      	ldr	r3, [pc, #344]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfc:	4952      	ldr	r1, [pc, #328]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00a      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d10:	4b4d      	ldr	r3, [pc, #308]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1e:	494a      	ldr	r1, [pc, #296]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d32:	4b45      	ldr	r3, [pc, #276]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d40:	4941      	ldr	r1, [pc, #260]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d54:	4b3c      	ldr	r3, [pc, #240]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d5a:	f023 0203 	bic.w	r2, r3, #3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d62:	4939      	ldr	r1, [pc, #228]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d028      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d76:	4b34      	ldr	r3, [pc, #208]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d84:	4930      	ldr	r1, [pc, #192]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d94:	d106      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d96:	4b2c      	ldr	r3, [pc, #176]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	4a2b      	ldr	r2, [pc, #172]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007da0:	60d3      	str	r3, [r2, #12]
 8007da2:	e011      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dac:	d10c      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3304      	adds	r3, #4
 8007db2:	2101      	movs	r1, #1
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 f935 	bl	8008024 <RCCEx_PLLSAI1_Config>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007dbe:	7cfb      	ldrb	r3, [r7, #19]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007dc4:	7cfb      	ldrb	r3, [r7, #19]
 8007dc6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d04d      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ddc:	d108      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007dde:	4b1a      	ldr	r3, [pc, #104]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007de4:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007dee:	e012      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007df0:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007df6:	4a14      	ldr	r2, [pc, #80]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dfc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007e00:	4b11      	ldr	r3, [pc, #68]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e0e:	490e      	ldr	r1, [pc, #56]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e1e:	d106      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e20:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	4a08      	ldr	r2, [pc, #32]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e2a:	60d3      	str	r3, [r2, #12]
 8007e2c:	e020      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e36:	d109      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e38:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	4a02      	ldr	r2, [pc, #8]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e42:	60d3      	str	r3, [r2, #12]
 8007e44:	e014      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007e46:	bf00      	nop
 8007e48:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e54:	d10c      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f8e1 	bl	8008024 <RCCEx_PLLSAI1_Config>
 8007e62:	4603      	mov	r3, r0
 8007e64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e66:	7cfb      	ldrb	r3, [r7, #19]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007e6c:	7cfb      	ldrb	r3, [r7, #19]
 8007e6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d028      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e7c:	4b68      	ldr	r3, [pc, #416]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e8a:	4965      	ldr	r1, [pc, #404]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e9a:	d106      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e9c:	4b60      	ldr	r3, [pc, #384]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	4a5f      	ldr	r2, [pc, #380]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ea6:	60d3      	str	r3, [r2, #12]
 8007ea8:	e011      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eb2:	d10c      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	2101      	movs	r1, #1
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 f8b2 	bl	8008024 <RCCEx_PLLSAI1_Config>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ec4:	7cfb      	ldrb	r3, [r7, #19]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007eca:	7cfb      	ldrb	r3, [r7, #19]
 8007ecc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01e      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007eda:	4b51      	ldr	r3, [pc, #324]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eea:	494d      	ldr	r1, [pc, #308]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007efc:	d10c      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3304      	adds	r3, #4
 8007f02:	2102      	movs	r1, #2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 f88d 	bl	8008024 <RCCEx_PLLSAI1_Config>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f0e:	7cfb      	ldrb	r3, [r7, #19]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007f14:	7cfb      	ldrb	r3, [r7, #19]
 8007f16:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00b      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f24:	4b3e      	ldr	r3, [pc, #248]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f2a:	f023 0204 	bic.w	r2, r3, #4
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f34:	493a      	ldr	r1, [pc, #232]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007f48:	4b35      	ldr	r3, [pc, #212]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f4e:	f023 0218 	bic.w	r2, r3, #24
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f58:	4931      	ldr	r1, [pc, #196]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d035      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007f6c:	4b2c      	ldr	r3, [pc, #176]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a2b      	ldr	r2, [pc, #172]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f78:	f7fc fc1a 	bl	80047b0 <HAL_GetTick>
 8007f7c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f7e:	e009      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007f80:	f7fc fc16 	bl	80047b0 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d902      	bls.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	74fb      	strb	r3, [r7, #19]
        break;
 8007f92:	e005      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f94:	4b22      	ldr	r3, [pc, #136]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1ef      	bne.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8007fa0:	7cfb      	ldrb	r3, [r7, #19]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d113      	bne.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8007fa6:	4b1e      	ldr	r3, [pc, #120]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb6:	491a      	ldr	r1, [pc, #104]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3320      	adds	r3, #32
 8007fc2:	2102      	movs	r1, #2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 f921 	bl	800820c <RCCEx_PLLSAI2_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8007fce:	7cfb      	ldrb	r3, [r7, #19]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8007fd4:	7cfb      	ldrb	r3, [r7, #19]
 8007fd6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d017      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007fe4:	4b0e      	ldr	r3, [pc, #56]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff4:	490a      	ldr	r1, [pc, #40]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008006:	d105      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008008:	4b05      	ldr	r3, [pc, #20]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	4a04      	ldr	r2, [pc, #16]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800800e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008012:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008014:	7cbb      	ldrb	r3, [r7, #18]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	40021000 	.word	0x40021000

08008024 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008032:	4b72      	ldr	r3, [pc, #456]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00e      	beq.n	800805c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800803e:	4b6f      	ldr	r3, [pc, #444]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f003 0203 	and.w	r2, r3, #3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d103      	bne.n	8008056 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
       ||
 8008052:	2b00      	cmp	r3, #0
 8008054:	d142      	bne.n	80080dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	73fb      	strb	r3, [r7, #15]
 800805a:	e03f      	b.n	80080dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b03      	cmp	r3, #3
 8008062:	d018      	beq.n	8008096 <RCCEx_PLLSAI1_Config+0x72>
 8008064:	2b03      	cmp	r3, #3
 8008066:	d825      	bhi.n	80080b4 <RCCEx_PLLSAI1_Config+0x90>
 8008068:	2b01      	cmp	r3, #1
 800806a:	d002      	beq.n	8008072 <RCCEx_PLLSAI1_Config+0x4e>
 800806c:	2b02      	cmp	r3, #2
 800806e:	d009      	beq.n	8008084 <RCCEx_PLLSAI1_Config+0x60>
 8008070:	e020      	b.n	80080b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008072:	4b62      	ldr	r3, [pc, #392]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d11d      	bne.n	80080ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008082:	e01a      	b.n	80080ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008084:	4b5d      	ldr	r3, [pc, #372]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800808c:	2b00      	cmp	r3, #0
 800808e:	d116      	bne.n	80080be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008094:	e013      	b.n	80080be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008096:	4b59      	ldr	r3, [pc, #356]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10f      	bne.n	80080c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80080a2:	4b56      	ldr	r3, [pc, #344]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080b2:	e006      	b.n	80080c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
      break;
 80080b8:	e004      	b.n	80080c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80080ba:	bf00      	nop
 80080bc:	e002      	b.n	80080c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80080be:	bf00      	nop
 80080c0:	e000      	b.n	80080c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80080c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d108      	bne.n	80080dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80080ca:	4b4c      	ldr	r3, [pc, #304]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f023 0203 	bic.w	r2, r3, #3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4949      	ldr	r1, [pc, #292]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f040 8086 	bne.w	80081f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80080e4:	4b45      	ldr	r3, [pc, #276]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a44      	ldr	r2, [pc, #272]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80080ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f0:	f7fc fb5e 	bl	80047b0 <HAL_GetTick>
 80080f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80080f6:	e009      	b.n	800810c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080f8:	f7fc fb5a 	bl	80047b0 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d902      	bls.n	800810c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	73fb      	strb	r3, [r7, #15]
        break;
 800810a:	e005      	b.n	8008118 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800810c:	4b3b      	ldr	r3, [pc, #236]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1ef      	bne.n	80080f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d168      	bne.n	80081f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d113      	bne.n	800814c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008124:	4b35      	ldr	r3, [pc, #212]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	4b35      	ldr	r3, [pc, #212]	; (8008200 <RCCEx_PLLSAI1_Config+0x1dc>)
 800812a:	4013      	ands	r3, r2
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6892      	ldr	r2, [r2, #8]
 8008130:	0211      	lsls	r1, r2, #8
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	68d2      	ldr	r2, [r2, #12]
 8008136:	06d2      	lsls	r2, r2, #27
 8008138:	4311      	orrs	r1, r2
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6852      	ldr	r2, [r2, #4]
 800813e:	3a01      	subs	r2, #1
 8008140:	0112      	lsls	r2, r2, #4
 8008142:	430a      	orrs	r2, r1
 8008144:	492d      	ldr	r1, [pc, #180]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008146:	4313      	orrs	r3, r2
 8008148:	610b      	str	r3, [r1, #16]
 800814a:	e02d      	b.n	80081a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d115      	bne.n	800817e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008152:	4b2a      	ldr	r3, [pc, #168]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008154:	691a      	ldr	r2, [r3, #16]
 8008156:	4b2b      	ldr	r3, [pc, #172]	; (8008204 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008158:	4013      	ands	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6892      	ldr	r2, [r2, #8]
 800815e:	0211      	lsls	r1, r2, #8
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6912      	ldr	r2, [r2, #16]
 8008164:	0852      	lsrs	r2, r2, #1
 8008166:	3a01      	subs	r2, #1
 8008168:	0552      	lsls	r2, r2, #21
 800816a:	4311      	orrs	r1, r2
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	6852      	ldr	r2, [r2, #4]
 8008170:	3a01      	subs	r2, #1
 8008172:	0112      	lsls	r2, r2, #4
 8008174:	430a      	orrs	r2, r1
 8008176:	4921      	ldr	r1, [pc, #132]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008178:	4313      	orrs	r3, r2
 800817a:	610b      	str	r3, [r1, #16]
 800817c:	e014      	b.n	80081a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800817e:	4b1f      	ldr	r3, [pc, #124]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	4b21      	ldr	r3, [pc, #132]	; (8008208 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008184:	4013      	ands	r3, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	6892      	ldr	r2, [r2, #8]
 800818a:	0211      	lsls	r1, r2, #8
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6952      	ldr	r2, [r2, #20]
 8008190:	0852      	lsrs	r2, r2, #1
 8008192:	3a01      	subs	r2, #1
 8008194:	0652      	lsls	r2, r2, #25
 8008196:	4311      	orrs	r1, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6852      	ldr	r2, [r2, #4]
 800819c:	3a01      	subs	r2, #1
 800819e:	0112      	lsls	r2, r2, #4
 80081a0:	430a      	orrs	r2, r1
 80081a2:	4916      	ldr	r1, [pc, #88]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80081a8:	4b14      	ldr	r3, [pc, #80]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a13      	ldr	r2, [pc, #76]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80081ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b4:	f7fc fafc 	bl	80047b0 <HAL_GetTick>
 80081b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081ba:	e009      	b.n	80081d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081bc:	f7fc faf8 	bl	80047b0 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d902      	bls.n	80081d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	73fb      	strb	r3, [r7, #15]
          break;
 80081ce:	e005      	b.n	80081dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0ef      	beq.n	80081bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80081e2:	4b06      	ldr	r3, [pc, #24]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	4904      	ldr	r1, [pc, #16]	; (80081fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	40021000 	.word	0x40021000
 8008200:	07ff800f 	.word	0x07ff800f
 8008204:	ff9f800f 	.word	0xff9f800f
 8008208:	f9ff800f 	.word	0xf9ff800f

0800820c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800821a:	4b72      	ldr	r3, [pc, #456]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00e      	beq.n	8008244 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008226:	4b6f      	ldr	r3, [pc, #444]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f003 0203 	and.w	r2, r3, #3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d103      	bne.n	800823e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
       ||
 800823a:	2b00      	cmp	r3, #0
 800823c:	d142      	bne.n	80082c4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
 8008242:	e03f      	b.n	80082c4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b03      	cmp	r3, #3
 800824a:	d018      	beq.n	800827e <RCCEx_PLLSAI2_Config+0x72>
 800824c:	2b03      	cmp	r3, #3
 800824e:	d825      	bhi.n	800829c <RCCEx_PLLSAI2_Config+0x90>
 8008250:	2b01      	cmp	r3, #1
 8008252:	d002      	beq.n	800825a <RCCEx_PLLSAI2_Config+0x4e>
 8008254:	2b02      	cmp	r3, #2
 8008256:	d009      	beq.n	800826c <RCCEx_PLLSAI2_Config+0x60>
 8008258:	e020      	b.n	800829c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800825a:	4b62      	ldr	r3, [pc, #392]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d11d      	bne.n	80082a2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800826a:	e01a      	b.n	80082a2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800826c:	4b5d      	ldr	r3, [pc, #372]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008274:	2b00      	cmp	r3, #0
 8008276:	d116      	bne.n	80082a6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800827c:	e013      	b.n	80082a6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800827e:	4b59      	ldr	r3, [pc, #356]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10f      	bne.n	80082aa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800828a:	4b56      	ldr	r3, [pc, #344]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d109      	bne.n	80082aa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800829a:	e006      	b.n	80082aa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
      break;
 80082a0:	e004      	b.n	80082ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80082a2:	bf00      	nop
 80082a4:	e002      	b.n	80082ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80082a6:	bf00      	nop
 80082a8:	e000      	b.n	80082ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80082aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d108      	bne.n	80082c4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80082b2:	4b4c      	ldr	r3, [pc, #304]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f023 0203 	bic.w	r2, r3, #3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4949      	ldr	r1, [pc, #292]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f040 8086 	bne.w	80083d8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80082cc:	4b45      	ldr	r3, [pc, #276]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a44      	ldr	r2, [pc, #272]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082d8:	f7fc fa6a 	bl	80047b0 <HAL_GetTick>
 80082dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80082de:	e009      	b.n	80082f4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80082e0:	f7fc fa66 	bl	80047b0 <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d902      	bls.n	80082f4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	73fb      	strb	r3, [r7, #15]
        break;
 80082f2:	e005      	b.n	8008300 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80082f4:	4b3b      	ldr	r3, [pc, #236]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1ef      	bne.n	80082e0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d168      	bne.n	80083d8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d113      	bne.n	8008334 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800830c:	4b35      	ldr	r3, [pc, #212]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800830e:	695a      	ldr	r2, [r3, #20]
 8008310:	4b35      	ldr	r3, [pc, #212]	; (80083e8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008312:	4013      	ands	r3, r2
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6892      	ldr	r2, [r2, #8]
 8008318:	0211      	lsls	r1, r2, #8
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	68d2      	ldr	r2, [r2, #12]
 800831e:	06d2      	lsls	r2, r2, #27
 8008320:	4311      	orrs	r1, r2
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6852      	ldr	r2, [r2, #4]
 8008326:	3a01      	subs	r2, #1
 8008328:	0112      	lsls	r2, r2, #4
 800832a:	430a      	orrs	r2, r1
 800832c:	492d      	ldr	r1, [pc, #180]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800832e:	4313      	orrs	r3, r2
 8008330:	614b      	str	r3, [r1, #20]
 8008332:	e02d      	b.n	8008390 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d115      	bne.n	8008366 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800833a:	4b2a      	ldr	r3, [pc, #168]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800833c:	695a      	ldr	r2, [r3, #20]
 800833e:	4b2b      	ldr	r3, [pc, #172]	; (80083ec <RCCEx_PLLSAI2_Config+0x1e0>)
 8008340:	4013      	ands	r3, r2
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6892      	ldr	r2, [r2, #8]
 8008346:	0211      	lsls	r1, r2, #8
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6912      	ldr	r2, [r2, #16]
 800834c:	0852      	lsrs	r2, r2, #1
 800834e:	3a01      	subs	r2, #1
 8008350:	0552      	lsls	r2, r2, #21
 8008352:	4311      	orrs	r1, r2
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6852      	ldr	r2, [r2, #4]
 8008358:	3a01      	subs	r2, #1
 800835a:	0112      	lsls	r2, r2, #4
 800835c:	430a      	orrs	r2, r1
 800835e:	4921      	ldr	r1, [pc, #132]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008360:	4313      	orrs	r3, r2
 8008362:	614b      	str	r3, [r1, #20]
 8008364:	e014      	b.n	8008390 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008366:	4b1f      	ldr	r3, [pc, #124]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008368:	695a      	ldr	r2, [r3, #20]
 800836a:	4b21      	ldr	r3, [pc, #132]	; (80083f0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800836c:	4013      	ands	r3, r2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6892      	ldr	r2, [r2, #8]
 8008372:	0211      	lsls	r1, r2, #8
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6952      	ldr	r2, [r2, #20]
 8008378:	0852      	lsrs	r2, r2, #1
 800837a:	3a01      	subs	r2, #1
 800837c:	0652      	lsls	r2, r2, #25
 800837e:	4311      	orrs	r1, r2
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6852      	ldr	r2, [r2, #4]
 8008384:	3a01      	subs	r2, #1
 8008386:	0112      	lsls	r2, r2, #4
 8008388:	430a      	orrs	r2, r1
 800838a:	4916      	ldr	r1, [pc, #88]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800838c:	4313      	orrs	r3, r2
 800838e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008390:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a13      	ldr	r2, [pc, #76]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800839a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839c:	f7fc fa08 	bl	80047b0 <HAL_GetTick>
 80083a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80083a2:	e009      	b.n	80083b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80083a4:	f7fc fa04 	bl	80047b0 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d902      	bls.n	80083b8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	73fb      	strb	r3, [r7, #15]
          break;
 80083b6:	e005      	b.n	80083c4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80083b8:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0ef      	beq.n	80083a4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80083ca:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	4904      	ldr	r1, [pc, #16]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	40021000 	.word	0x40021000
 80083e8:	07ff800f 	.word	0x07ff800f
 80083ec:	ff9f800f 	.word	0xff9f800f
 80083f0:	f9ff800f 	.word	0xf9ff800f

080083f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e095      	b.n	8008532 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	2b00      	cmp	r3, #0
 800840c:	d108      	bne.n	8008420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008416:	d009      	beq.n	800842c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	61da      	str	r2, [r3, #28]
 800841e:	e005      	b.n	800842c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d106      	bne.n	800844c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fb ff32 	bl	80042b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008462:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800846c:	d902      	bls.n	8008474 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	e002      	b.n	800847a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008478:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008482:	d007      	beq.n	8008494 <HAL_SPI_Init+0xa0>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800848c:	d002      	beq.n	8008494 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80084a4:	431a      	orrs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	431a      	orrs	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084c2:	431a      	orrs	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084cc:	431a      	orrs	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d6:	ea42 0103 	orr.w	r1, r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	f003 0204 	and.w	r2, r3, #4
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	f003 0310 	and.w	r3, r3, #16
 80084fc:	431a      	orrs	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008502:	f003 0308 	and.w	r3, r3, #8
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008510:	ea42 0103 	orr.w	r1, r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <_ZdlPvj>:
 800853a:	f000 b800 	b.w	800853e <_ZdlPv>

0800853e <_ZdlPv>:
 800853e:	f000 b85b 	b.w	80085f8 <free>
	...

08008544 <__assert_func>:
 8008544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008546:	4614      	mov	r4, r2
 8008548:	461a      	mov	r2, r3
 800854a:	4b09      	ldr	r3, [pc, #36]	; (8008570 <__assert_func+0x2c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4605      	mov	r5, r0
 8008550:	68d8      	ldr	r0, [r3, #12]
 8008552:	b14c      	cbz	r4, 8008568 <__assert_func+0x24>
 8008554:	4b07      	ldr	r3, [pc, #28]	; (8008574 <__assert_func+0x30>)
 8008556:	9100      	str	r1, [sp, #0]
 8008558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800855c:	4906      	ldr	r1, [pc, #24]	; (8008578 <__assert_func+0x34>)
 800855e:	462b      	mov	r3, r5
 8008560:	f000 f814 	bl	800858c <fiprintf>
 8008564:	f000 fd04 	bl	8008f70 <abort>
 8008568:	4b04      	ldr	r3, [pc, #16]	; (800857c <__assert_func+0x38>)
 800856a:	461c      	mov	r4, r3
 800856c:	e7f3      	b.n	8008556 <__assert_func+0x12>
 800856e:	bf00      	nop
 8008570:	20000208 	.word	0x20000208
 8008574:	080098fc 	.word	0x080098fc
 8008578:	08009909 	.word	0x08009909
 800857c:	08009937 	.word	0x08009937

08008580 <__errno>:
 8008580:	4b01      	ldr	r3, [pc, #4]	; (8008588 <__errno+0x8>)
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	20000208 	.word	0x20000208

0800858c <fiprintf>:
 800858c:	b40e      	push	{r1, r2, r3}
 800858e:	b503      	push	{r0, r1, lr}
 8008590:	4601      	mov	r1, r0
 8008592:	ab03      	add	r3, sp, #12
 8008594:	4805      	ldr	r0, [pc, #20]	; (80085ac <fiprintf+0x20>)
 8008596:	f853 2b04 	ldr.w	r2, [r3], #4
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	f000 f953 	bl	8008848 <_vfiprintf_r>
 80085a2:	b002      	add	sp, #8
 80085a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085a8:	b003      	add	sp, #12
 80085aa:	4770      	bx	lr
 80085ac:	20000208 	.word	0x20000208

080085b0 <__libc_init_array>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	4d0d      	ldr	r5, [pc, #52]	; (80085e8 <__libc_init_array+0x38>)
 80085b4:	4c0d      	ldr	r4, [pc, #52]	; (80085ec <__libc_init_array+0x3c>)
 80085b6:	1b64      	subs	r4, r4, r5
 80085b8:	10a4      	asrs	r4, r4, #2
 80085ba:	2600      	movs	r6, #0
 80085bc:	42a6      	cmp	r6, r4
 80085be:	d109      	bne.n	80085d4 <__libc_init_array+0x24>
 80085c0:	4d0b      	ldr	r5, [pc, #44]	; (80085f0 <__libc_init_array+0x40>)
 80085c2:	4c0c      	ldr	r4, [pc, #48]	; (80085f4 <__libc_init_array+0x44>)
 80085c4:	f000 fff8 	bl	80095b8 <_init>
 80085c8:	1b64      	subs	r4, r4, r5
 80085ca:	10a4      	asrs	r4, r4, #2
 80085cc:	2600      	movs	r6, #0
 80085ce:	42a6      	cmp	r6, r4
 80085d0:	d105      	bne.n	80085de <__libc_init_array+0x2e>
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d8:	4798      	blx	r3
 80085da:	3601      	adds	r6, #1
 80085dc:	e7ee      	b.n	80085bc <__libc_init_array+0xc>
 80085de:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e2:	4798      	blx	r3
 80085e4:	3601      	adds	r6, #1
 80085e6:	e7f2      	b.n	80085ce <__libc_init_array+0x1e>
 80085e8:	080099d0 	.word	0x080099d0
 80085ec:	080099d0 	.word	0x080099d0
 80085f0:	080099d0 	.word	0x080099d0
 80085f4:	080099d8 	.word	0x080099d8

080085f8 <free>:
 80085f8:	4b02      	ldr	r3, [pc, #8]	; (8008604 <free+0xc>)
 80085fa:	4601      	mov	r1, r0
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	f000 b819 	b.w	8008634 <_free_r>
 8008602:	bf00      	nop
 8008604:	20000208 	.word	0x20000208

08008608 <memcpy>:
 8008608:	440a      	add	r2, r1
 800860a:	4291      	cmp	r1, r2
 800860c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008610:	d100      	bne.n	8008614 <memcpy+0xc>
 8008612:	4770      	bx	lr
 8008614:	b510      	push	{r4, lr}
 8008616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800861a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800861e:	4291      	cmp	r1, r2
 8008620:	d1f9      	bne.n	8008616 <memcpy+0xe>
 8008622:	bd10      	pop	{r4, pc}

08008624 <memset>:
 8008624:	4402      	add	r2, r0
 8008626:	4603      	mov	r3, r0
 8008628:	4293      	cmp	r3, r2
 800862a:	d100      	bne.n	800862e <memset+0xa>
 800862c:	4770      	bx	lr
 800862e:	f803 1b01 	strb.w	r1, [r3], #1
 8008632:	e7f9      	b.n	8008628 <memset+0x4>

08008634 <_free_r>:
 8008634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008636:	2900      	cmp	r1, #0
 8008638:	d044      	beq.n	80086c4 <_free_r+0x90>
 800863a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800863e:	9001      	str	r0, [sp, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f1a1 0404 	sub.w	r4, r1, #4
 8008646:	bfb8      	it	lt
 8008648:	18e4      	addlt	r4, r4, r3
 800864a:	f000 feb9 	bl	80093c0 <__malloc_lock>
 800864e:	4a1e      	ldr	r2, [pc, #120]	; (80086c8 <_free_r+0x94>)
 8008650:	9801      	ldr	r0, [sp, #4]
 8008652:	6813      	ldr	r3, [r2, #0]
 8008654:	b933      	cbnz	r3, 8008664 <_free_r+0x30>
 8008656:	6063      	str	r3, [r4, #4]
 8008658:	6014      	str	r4, [r2, #0]
 800865a:	b003      	add	sp, #12
 800865c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008660:	f000 beb4 	b.w	80093cc <__malloc_unlock>
 8008664:	42a3      	cmp	r3, r4
 8008666:	d908      	bls.n	800867a <_free_r+0x46>
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	1961      	adds	r1, r4, r5
 800866c:	428b      	cmp	r3, r1
 800866e:	bf01      	itttt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	1949      	addeq	r1, r1, r5
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	e7ed      	b.n	8008656 <_free_r+0x22>
 800867a:	461a      	mov	r2, r3
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	b10b      	cbz	r3, 8008684 <_free_r+0x50>
 8008680:	42a3      	cmp	r3, r4
 8008682:	d9fa      	bls.n	800867a <_free_r+0x46>
 8008684:	6811      	ldr	r1, [r2, #0]
 8008686:	1855      	adds	r5, r2, r1
 8008688:	42a5      	cmp	r5, r4
 800868a:	d10b      	bne.n	80086a4 <_free_r+0x70>
 800868c:	6824      	ldr	r4, [r4, #0]
 800868e:	4421      	add	r1, r4
 8008690:	1854      	adds	r4, r2, r1
 8008692:	42a3      	cmp	r3, r4
 8008694:	6011      	str	r1, [r2, #0]
 8008696:	d1e0      	bne.n	800865a <_free_r+0x26>
 8008698:	681c      	ldr	r4, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	6053      	str	r3, [r2, #4]
 800869e:	4421      	add	r1, r4
 80086a0:	6011      	str	r1, [r2, #0]
 80086a2:	e7da      	b.n	800865a <_free_r+0x26>
 80086a4:	d902      	bls.n	80086ac <_free_r+0x78>
 80086a6:	230c      	movs	r3, #12
 80086a8:	6003      	str	r3, [r0, #0]
 80086aa:	e7d6      	b.n	800865a <_free_r+0x26>
 80086ac:	6825      	ldr	r5, [r4, #0]
 80086ae:	1961      	adds	r1, r4, r5
 80086b0:	428b      	cmp	r3, r1
 80086b2:	bf04      	itt	eq
 80086b4:	6819      	ldreq	r1, [r3, #0]
 80086b6:	685b      	ldreq	r3, [r3, #4]
 80086b8:	6063      	str	r3, [r4, #4]
 80086ba:	bf04      	itt	eq
 80086bc:	1949      	addeq	r1, r1, r5
 80086be:	6021      	streq	r1, [r4, #0]
 80086c0:	6054      	str	r4, [r2, #4]
 80086c2:	e7ca      	b.n	800865a <_free_r+0x26>
 80086c4:	b003      	add	sp, #12
 80086c6:	bd30      	pop	{r4, r5, pc}
 80086c8:	20000804 	.word	0x20000804

080086cc <sbrk_aligned>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	4e0e      	ldr	r6, [pc, #56]	; (8008708 <sbrk_aligned+0x3c>)
 80086d0:	460c      	mov	r4, r1
 80086d2:	6831      	ldr	r1, [r6, #0]
 80086d4:	4605      	mov	r5, r0
 80086d6:	b911      	cbnz	r1, 80086de <sbrk_aligned+0x12>
 80086d8:	f000 fb7a 	bl	8008dd0 <_sbrk_r>
 80086dc:	6030      	str	r0, [r6, #0]
 80086de:	4621      	mov	r1, r4
 80086e0:	4628      	mov	r0, r5
 80086e2:	f000 fb75 	bl	8008dd0 <_sbrk_r>
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	d00a      	beq.n	8008700 <sbrk_aligned+0x34>
 80086ea:	1cc4      	adds	r4, r0, #3
 80086ec:	f024 0403 	bic.w	r4, r4, #3
 80086f0:	42a0      	cmp	r0, r4
 80086f2:	d007      	beq.n	8008704 <sbrk_aligned+0x38>
 80086f4:	1a21      	subs	r1, r4, r0
 80086f6:	4628      	mov	r0, r5
 80086f8:	f000 fb6a 	bl	8008dd0 <_sbrk_r>
 80086fc:	3001      	adds	r0, #1
 80086fe:	d101      	bne.n	8008704 <sbrk_aligned+0x38>
 8008700:	f04f 34ff 	mov.w	r4, #4294967295
 8008704:	4620      	mov	r0, r4
 8008706:	bd70      	pop	{r4, r5, r6, pc}
 8008708:	20000808 	.word	0x20000808

0800870c <_malloc_r>:
 800870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008710:	1ccd      	adds	r5, r1, #3
 8008712:	f025 0503 	bic.w	r5, r5, #3
 8008716:	3508      	adds	r5, #8
 8008718:	2d0c      	cmp	r5, #12
 800871a:	bf38      	it	cc
 800871c:	250c      	movcc	r5, #12
 800871e:	2d00      	cmp	r5, #0
 8008720:	4607      	mov	r7, r0
 8008722:	db01      	blt.n	8008728 <_malloc_r+0x1c>
 8008724:	42a9      	cmp	r1, r5
 8008726:	d905      	bls.n	8008734 <_malloc_r+0x28>
 8008728:	230c      	movs	r3, #12
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	2600      	movs	r6, #0
 800872e:	4630      	mov	r0, r6
 8008730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008734:	4e2e      	ldr	r6, [pc, #184]	; (80087f0 <_malloc_r+0xe4>)
 8008736:	f000 fe43 	bl	80093c0 <__malloc_lock>
 800873a:	6833      	ldr	r3, [r6, #0]
 800873c:	461c      	mov	r4, r3
 800873e:	bb34      	cbnz	r4, 800878e <_malloc_r+0x82>
 8008740:	4629      	mov	r1, r5
 8008742:	4638      	mov	r0, r7
 8008744:	f7ff ffc2 	bl	80086cc <sbrk_aligned>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	4604      	mov	r4, r0
 800874c:	d14d      	bne.n	80087ea <_malloc_r+0xde>
 800874e:	6834      	ldr	r4, [r6, #0]
 8008750:	4626      	mov	r6, r4
 8008752:	2e00      	cmp	r6, #0
 8008754:	d140      	bne.n	80087d8 <_malloc_r+0xcc>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	4631      	mov	r1, r6
 800875a:	4638      	mov	r0, r7
 800875c:	eb04 0803 	add.w	r8, r4, r3
 8008760:	f000 fb36 	bl	8008dd0 <_sbrk_r>
 8008764:	4580      	cmp	r8, r0
 8008766:	d13a      	bne.n	80087de <_malloc_r+0xd2>
 8008768:	6821      	ldr	r1, [r4, #0]
 800876a:	3503      	adds	r5, #3
 800876c:	1a6d      	subs	r5, r5, r1
 800876e:	f025 0503 	bic.w	r5, r5, #3
 8008772:	3508      	adds	r5, #8
 8008774:	2d0c      	cmp	r5, #12
 8008776:	bf38      	it	cc
 8008778:	250c      	movcc	r5, #12
 800877a:	4629      	mov	r1, r5
 800877c:	4638      	mov	r0, r7
 800877e:	f7ff ffa5 	bl	80086cc <sbrk_aligned>
 8008782:	3001      	adds	r0, #1
 8008784:	d02b      	beq.n	80087de <_malloc_r+0xd2>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	442b      	add	r3, r5
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	e00e      	b.n	80087ac <_malloc_r+0xa0>
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	1b52      	subs	r2, r2, r5
 8008792:	d41e      	bmi.n	80087d2 <_malloc_r+0xc6>
 8008794:	2a0b      	cmp	r2, #11
 8008796:	d916      	bls.n	80087c6 <_malloc_r+0xba>
 8008798:	1961      	adds	r1, r4, r5
 800879a:	42a3      	cmp	r3, r4
 800879c:	6025      	str	r5, [r4, #0]
 800879e:	bf18      	it	ne
 80087a0:	6059      	strne	r1, [r3, #4]
 80087a2:	6863      	ldr	r3, [r4, #4]
 80087a4:	bf08      	it	eq
 80087a6:	6031      	streq	r1, [r6, #0]
 80087a8:	5162      	str	r2, [r4, r5]
 80087aa:	604b      	str	r3, [r1, #4]
 80087ac:	4638      	mov	r0, r7
 80087ae:	f104 060b 	add.w	r6, r4, #11
 80087b2:	f000 fe0b 	bl	80093cc <__malloc_unlock>
 80087b6:	f026 0607 	bic.w	r6, r6, #7
 80087ba:	1d23      	adds	r3, r4, #4
 80087bc:	1af2      	subs	r2, r6, r3
 80087be:	d0b6      	beq.n	800872e <_malloc_r+0x22>
 80087c0:	1b9b      	subs	r3, r3, r6
 80087c2:	50a3      	str	r3, [r4, r2]
 80087c4:	e7b3      	b.n	800872e <_malloc_r+0x22>
 80087c6:	6862      	ldr	r2, [r4, #4]
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	bf0c      	ite	eq
 80087cc:	6032      	streq	r2, [r6, #0]
 80087ce:	605a      	strne	r2, [r3, #4]
 80087d0:	e7ec      	b.n	80087ac <_malloc_r+0xa0>
 80087d2:	4623      	mov	r3, r4
 80087d4:	6864      	ldr	r4, [r4, #4]
 80087d6:	e7b2      	b.n	800873e <_malloc_r+0x32>
 80087d8:	4634      	mov	r4, r6
 80087da:	6876      	ldr	r6, [r6, #4]
 80087dc:	e7b9      	b.n	8008752 <_malloc_r+0x46>
 80087de:	230c      	movs	r3, #12
 80087e0:	603b      	str	r3, [r7, #0]
 80087e2:	4638      	mov	r0, r7
 80087e4:	f000 fdf2 	bl	80093cc <__malloc_unlock>
 80087e8:	e7a1      	b.n	800872e <_malloc_r+0x22>
 80087ea:	6025      	str	r5, [r4, #0]
 80087ec:	e7de      	b.n	80087ac <_malloc_r+0xa0>
 80087ee:	bf00      	nop
 80087f0:	20000804 	.word	0x20000804

080087f4 <__sfputc_r>:
 80087f4:	6893      	ldr	r3, [r2, #8]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	b410      	push	{r4}
 80087fc:	6093      	str	r3, [r2, #8]
 80087fe:	da08      	bge.n	8008812 <__sfputc_r+0x1e>
 8008800:	6994      	ldr	r4, [r2, #24]
 8008802:	42a3      	cmp	r3, r4
 8008804:	db01      	blt.n	800880a <__sfputc_r+0x16>
 8008806:	290a      	cmp	r1, #10
 8008808:	d103      	bne.n	8008812 <__sfputc_r+0x1e>
 800880a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800880e:	f000 baef 	b.w	8008df0 <__swbuf_r>
 8008812:	6813      	ldr	r3, [r2, #0]
 8008814:	1c58      	adds	r0, r3, #1
 8008816:	6010      	str	r0, [r2, #0]
 8008818:	7019      	strb	r1, [r3, #0]
 800881a:	4608      	mov	r0, r1
 800881c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008820:	4770      	bx	lr

08008822 <__sfputs_r>:
 8008822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008824:	4606      	mov	r6, r0
 8008826:	460f      	mov	r7, r1
 8008828:	4614      	mov	r4, r2
 800882a:	18d5      	adds	r5, r2, r3
 800882c:	42ac      	cmp	r4, r5
 800882e:	d101      	bne.n	8008834 <__sfputs_r+0x12>
 8008830:	2000      	movs	r0, #0
 8008832:	e007      	b.n	8008844 <__sfputs_r+0x22>
 8008834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008838:	463a      	mov	r2, r7
 800883a:	4630      	mov	r0, r6
 800883c:	f7ff ffda 	bl	80087f4 <__sfputc_r>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d1f3      	bne.n	800882c <__sfputs_r+0xa>
 8008844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008848 <_vfiprintf_r>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	460d      	mov	r5, r1
 800884e:	b09d      	sub	sp, #116	; 0x74
 8008850:	4614      	mov	r4, r2
 8008852:	4698      	mov	r8, r3
 8008854:	4606      	mov	r6, r0
 8008856:	b118      	cbz	r0, 8008860 <_vfiprintf_r+0x18>
 8008858:	6983      	ldr	r3, [r0, #24]
 800885a:	b90b      	cbnz	r3, 8008860 <_vfiprintf_r+0x18>
 800885c:	f000 fcaa 	bl	80091b4 <__sinit>
 8008860:	4b89      	ldr	r3, [pc, #548]	; (8008a88 <_vfiprintf_r+0x240>)
 8008862:	429d      	cmp	r5, r3
 8008864:	d11b      	bne.n	800889e <_vfiprintf_r+0x56>
 8008866:	6875      	ldr	r5, [r6, #4]
 8008868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800886a:	07d9      	lsls	r1, r3, #31
 800886c:	d405      	bmi.n	800887a <_vfiprintf_r+0x32>
 800886e:	89ab      	ldrh	r3, [r5, #12]
 8008870:	059a      	lsls	r2, r3, #22
 8008872:	d402      	bmi.n	800887a <_vfiprintf_r+0x32>
 8008874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008876:	f000 fd3b 	bl	80092f0 <__retarget_lock_acquire_recursive>
 800887a:	89ab      	ldrh	r3, [r5, #12]
 800887c:	071b      	lsls	r3, r3, #28
 800887e:	d501      	bpl.n	8008884 <_vfiprintf_r+0x3c>
 8008880:	692b      	ldr	r3, [r5, #16]
 8008882:	b9eb      	cbnz	r3, 80088c0 <_vfiprintf_r+0x78>
 8008884:	4629      	mov	r1, r5
 8008886:	4630      	mov	r0, r6
 8008888:	f000 fb04 	bl	8008e94 <__swsetup_r>
 800888c:	b1c0      	cbz	r0, 80088c0 <_vfiprintf_r+0x78>
 800888e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008890:	07dc      	lsls	r4, r3, #31
 8008892:	d50e      	bpl.n	80088b2 <_vfiprintf_r+0x6a>
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	b01d      	add	sp, #116	; 0x74
 800889a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889e:	4b7b      	ldr	r3, [pc, #492]	; (8008a8c <_vfiprintf_r+0x244>)
 80088a0:	429d      	cmp	r5, r3
 80088a2:	d101      	bne.n	80088a8 <_vfiprintf_r+0x60>
 80088a4:	68b5      	ldr	r5, [r6, #8]
 80088a6:	e7df      	b.n	8008868 <_vfiprintf_r+0x20>
 80088a8:	4b79      	ldr	r3, [pc, #484]	; (8008a90 <_vfiprintf_r+0x248>)
 80088aa:	429d      	cmp	r5, r3
 80088ac:	bf08      	it	eq
 80088ae:	68f5      	ldreq	r5, [r6, #12]
 80088b0:	e7da      	b.n	8008868 <_vfiprintf_r+0x20>
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	0598      	lsls	r0, r3, #22
 80088b6:	d4ed      	bmi.n	8008894 <_vfiprintf_r+0x4c>
 80088b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ba:	f000 fd1a 	bl	80092f2 <__retarget_lock_release_recursive>
 80088be:	e7e9      	b.n	8008894 <_vfiprintf_r+0x4c>
 80088c0:	2300      	movs	r3, #0
 80088c2:	9309      	str	r3, [sp, #36]	; 0x24
 80088c4:	2320      	movs	r3, #32
 80088c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ce:	2330      	movs	r3, #48	; 0x30
 80088d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a94 <_vfiprintf_r+0x24c>
 80088d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088d8:	f04f 0901 	mov.w	r9, #1
 80088dc:	4623      	mov	r3, r4
 80088de:	469a      	mov	sl, r3
 80088e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088e4:	b10a      	cbz	r2, 80088ea <_vfiprintf_r+0xa2>
 80088e6:	2a25      	cmp	r2, #37	; 0x25
 80088e8:	d1f9      	bne.n	80088de <_vfiprintf_r+0x96>
 80088ea:	ebba 0b04 	subs.w	fp, sl, r4
 80088ee:	d00b      	beq.n	8008908 <_vfiprintf_r+0xc0>
 80088f0:	465b      	mov	r3, fp
 80088f2:	4622      	mov	r2, r4
 80088f4:	4629      	mov	r1, r5
 80088f6:	4630      	mov	r0, r6
 80088f8:	f7ff ff93 	bl	8008822 <__sfputs_r>
 80088fc:	3001      	adds	r0, #1
 80088fe:	f000 80aa 	beq.w	8008a56 <_vfiprintf_r+0x20e>
 8008902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008904:	445a      	add	r2, fp
 8008906:	9209      	str	r2, [sp, #36]	; 0x24
 8008908:	f89a 3000 	ldrb.w	r3, [sl]
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 80a2 	beq.w	8008a56 <_vfiprintf_r+0x20e>
 8008912:	2300      	movs	r3, #0
 8008914:	f04f 32ff 	mov.w	r2, #4294967295
 8008918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800891c:	f10a 0a01 	add.w	sl, sl, #1
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	9307      	str	r3, [sp, #28]
 8008924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008928:	931a      	str	r3, [sp, #104]	; 0x68
 800892a:	4654      	mov	r4, sl
 800892c:	2205      	movs	r2, #5
 800892e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008932:	4858      	ldr	r0, [pc, #352]	; (8008a94 <_vfiprintf_r+0x24c>)
 8008934:	f7f7 fc64 	bl	8000200 <memchr>
 8008938:	9a04      	ldr	r2, [sp, #16]
 800893a:	b9d8      	cbnz	r0, 8008974 <_vfiprintf_r+0x12c>
 800893c:	06d1      	lsls	r1, r2, #27
 800893e:	bf44      	itt	mi
 8008940:	2320      	movmi	r3, #32
 8008942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008946:	0713      	lsls	r3, r2, #28
 8008948:	bf44      	itt	mi
 800894a:	232b      	movmi	r3, #43	; 0x2b
 800894c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008950:	f89a 3000 	ldrb.w	r3, [sl]
 8008954:	2b2a      	cmp	r3, #42	; 0x2a
 8008956:	d015      	beq.n	8008984 <_vfiprintf_r+0x13c>
 8008958:	9a07      	ldr	r2, [sp, #28]
 800895a:	4654      	mov	r4, sl
 800895c:	2000      	movs	r0, #0
 800895e:	f04f 0c0a 	mov.w	ip, #10
 8008962:	4621      	mov	r1, r4
 8008964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008968:	3b30      	subs	r3, #48	; 0x30
 800896a:	2b09      	cmp	r3, #9
 800896c:	d94e      	bls.n	8008a0c <_vfiprintf_r+0x1c4>
 800896e:	b1b0      	cbz	r0, 800899e <_vfiprintf_r+0x156>
 8008970:	9207      	str	r2, [sp, #28]
 8008972:	e014      	b.n	800899e <_vfiprintf_r+0x156>
 8008974:	eba0 0308 	sub.w	r3, r0, r8
 8008978:	fa09 f303 	lsl.w	r3, r9, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	9304      	str	r3, [sp, #16]
 8008980:	46a2      	mov	sl, r4
 8008982:	e7d2      	b.n	800892a <_vfiprintf_r+0xe2>
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	1d19      	adds	r1, r3, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	9103      	str	r1, [sp, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	bfbb      	ittet	lt
 8008990:	425b      	neglt	r3, r3
 8008992:	f042 0202 	orrlt.w	r2, r2, #2
 8008996:	9307      	strge	r3, [sp, #28]
 8008998:	9307      	strlt	r3, [sp, #28]
 800899a:	bfb8      	it	lt
 800899c:	9204      	strlt	r2, [sp, #16]
 800899e:	7823      	ldrb	r3, [r4, #0]
 80089a0:	2b2e      	cmp	r3, #46	; 0x2e
 80089a2:	d10c      	bne.n	80089be <_vfiprintf_r+0x176>
 80089a4:	7863      	ldrb	r3, [r4, #1]
 80089a6:	2b2a      	cmp	r3, #42	; 0x2a
 80089a8:	d135      	bne.n	8008a16 <_vfiprintf_r+0x1ce>
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	1d1a      	adds	r2, r3, #4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	9203      	str	r2, [sp, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfb8      	it	lt
 80089b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80089ba:	3402      	adds	r4, #2
 80089bc:	9305      	str	r3, [sp, #20]
 80089be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008aa4 <_vfiprintf_r+0x25c>
 80089c2:	7821      	ldrb	r1, [r4, #0]
 80089c4:	2203      	movs	r2, #3
 80089c6:	4650      	mov	r0, sl
 80089c8:	f7f7 fc1a 	bl	8000200 <memchr>
 80089cc:	b140      	cbz	r0, 80089e0 <_vfiprintf_r+0x198>
 80089ce:	2340      	movs	r3, #64	; 0x40
 80089d0:	eba0 000a 	sub.w	r0, r0, sl
 80089d4:	fa03 f000 	lsl.w	r0, r3, r0
 80089d8:	9b04      	ldr	r3, [sp, #16]
 80089da:	4303      	orrs	r3, r0
 80089dc:	3401      	adds	r4, #1
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e4:	482c      	ldr	r0, [pc, #176]	; (8008a98 <_vfiprintf_r+0x250>)
 80089e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ea:	2206      	movs	r2, #6
 80089ec:	f7f7 fc08 	bl	8000200 <memchr>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d03f      	beq.n	8008a74 <_vfiprintf_r+0x22c>
 80089f4:	4b29      	ldr	r3, [pc, #164]	; (8008a9c <_vfiprintf_r+0x254>)
 80089f6:	bb1b      	cbnz	r3, 8008a40 <_vfiprintf_r+0x1f8>
 80089f8:	9b03      	ldr	r3, [sp, #12]
 80089fa:	3307      	adds	r3, #7
 80089fc:	f023 0307 	bic.w	r3, r3, #7
 8008a00:	3308      	adds	r3, #8
 8008a02:	9303      	str	r3, [sp, #12]
 8008a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a06:	443b      	add	r3, r7
 8008a08:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0a:	e767      	b.n	80088dc <_vfiprintf_r+0x94>
 8008a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a10:	460c      	mov	r4, r1
 8008a12:	2001      	movs	r0, #1
 8008a14:	e7a5      	b.n	8008962 <_vfiprintf_r+0x11a>
 8008a16:	2300      	movs	r3, #0
 8008a18:	3401      	adds	r4, #1
 8008a1a:	9305      	str	r3, [sp, #20]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	f04f 0c0a 	mov.w	ip, #10
 8008a22:	4620      	mov	r0, r4
 8008a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a28:	3a30      	subs	r2, #48	; 0x30
 8008a2a:	2a09      	cmp	r2, #9
 8008a2c:	d903      	bls.n	8008a36 <_vfiprintf_r+0x1ee>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0c5      	beq.n	80089be <_vfiprintf_r+0x176>
 8008a32:	9105      	str	r1, [sp, #20]
 8008a34:	e7c3      	b.n	80089be <_vfiprintf_r+0x176>
 8008a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e7f0      	b.n	8008a22 <_vfiprintf_r+0x1da>
 8008a40:	ab03      	add	r3, sp, #12
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	462a      	mov	r2, r5
 8008a46:	4b16      	ldr	r3, [pc, #88]	; (8008aa0 <_vfiprintf_r+0x258>)
 8008a48:	a904      	add	r1, sp, #16
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f3af 8000 	nop.w
 8008a50:	4607      	mov	r7, r0
 8008a52:	1c78      	adds	r0, r7, #1
 8008a54:	d1d6      	bne.n	8008a04 <_vfiprintf_r+0x1bc>
 8008a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a58:	07d9      	lsls	r1, r3, #31
 8008a5a:	d405      	bmi.n	8008a68 <_vfiprintf_r+0x220>
 8008a5c:	89ab      	ldrh	r3, [r5, #12]
 8008a5e:	059a      	lsls	r2, r3, #22
 8008a60:	d402      	bmi.n	8008a68 <_vfiprintf_r+0x220>
 8008a62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a64:	f000 fc45 	bl	80092f2 <__retarget_lock_release_recursive>
 8008a68:	89ab      	ldrh	r3, [r5, #12]
 8008a6a:	065b      	lsls	r3, r3, #25
 8008a6c:	f53f af12 	bmi.w	8008894 <_vfiprintf_r+0x4c>
 8008a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a72:	e711      	b.n	8008898 <_vfiprintf_r+0x50>
 8008a74:	ab03      	add	r3, sp, #12
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	462a      	mov	r2, r5
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <_vfiprintf_r+0x258>)
 8008a7c:	a904      	add	r1, sp, #16
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f000 f880 	bl	8008b84 <_printf_i>
 8008a84:	e7e4      	b.n	8008a50 <_vfiprintf_r+0x208>
 8008a86:	bf00      	nop
 8008a88:	08009990 	.word	0x08009990
 8008a8c:	080099b0 	.word	0x080099b0
 8008a90:	08009970 	.word	0x08009970
 8008a94:	0800993c 	.word	0x0800993c
 8008a98:	08009946 	.word	0x08009946
 8008a9c:	00000000 	.word	0x00000000
 8008aa0:	08008823 	.word	0x08008823
 8008aa4:	08009942 	.word	0x08009942

08008aa8 <_printf_common>:
 8008aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aac:	4616      	mov	r6, r2
 8008aae:	4699      	mov	r9, r3
 8008ab0:	688a      	ldr	r2, [r1, #8]
 8008ab2:	690b      	ldr	r3, [r1, #16]
 8008ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	bfb8      	it	lt
 8008abc:	4613      	movlt	r3, r2
 8008abe:	6033      	str	r3, [r6, #0]
 8008ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	b10a      	cbz	r2, 8008ace <_printf_common+0x26>
 8008aca:	3301      	adds	r3, #1
 8008acc:	6033      	str	r3, [r6, #0]
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	0699      	lsls	r1, r3, #26
 8008ad2:	bf42      	ittt	mi
 8008ad4:	6833      	ldrmi	r3, [r6, #0]
 8008ad6:	3302      	addmi	r3, #2
 8008ad8:	6033      	strmi	r3, [r6, #0]
 8008ada:	6825      	ldr	r5, [r4, #0]
 8008adc:	f015 0506 	ands.w	r5, r5, #6
 8008ae0:	d106      	bne.n	8008af0 <_printf_common+0x48>
 8008ae2:	f104 0a19 	add.w	sl, r4, #25
 8008ae6:	68e3      	ldr	r3, [r4, #12]
 8008ae8:	6832      	ldr	r2, [r6, #0]
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	42ab      	cmp	r3, r5
 8008aee:	dc26      	bgt.n	8008b3e <_printf_common+0x96>
 8008af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008af4:	1e13      	subs	r3, r2, #0
 8008af6:	6822      	ldr	r2, [r4, #0]
 8008af8:	bf18      	it	ne
 8008afa:	2301      	movne	r3, #1
 8008afc:	0692      	lsls	r2, r2, #26
 8008afe:	d42b      	bmi.n	8008b58 <_printf_common+0xb0>
 8008b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b04:	4649      	mov	r1, r9
 8008b06:	4638      	mov	r0, r7
 8008b08:	47c0      	blx	r8
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	d01e      	beq.n	8008b4c <_printf_common+0xa4>
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	68e5      	ldr	r5, [r4, #12]
 8008b12:	6832      	ldr	r2, [r6, #0]
 8008b14:	f003 0306 	and.w	r3, r3, #6
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	bf08      	it	eq
 8008b1c:	1aad      	subeq	r5, r5, r2
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	6922      	ldr	r2, [r4, #16]
 8008b22:	bf0c      	ite	eq
 8008b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b28:	2500      	movne	r5, #0
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	bfc4      	itt	gt
 8008b2e:	1a9b      	subgt	r3, r3, r2
 8008b30:	18ed      	addgt	r5, r5, r3
 8008b32:	2600      	movs	r6, #0
 8008b34:	341a      	adds	r4, #26
 8008b36:	42b5      	cmp	r5, r6
 8008b38:	d11a      	bne.n	8008b70 <_printf_common+0xc8>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e008      	b.n	8008b50 <_printf_common+0xa8>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4652      	mov	r2, sl
 8008b42:	4649      	mov	r1, r9
 8008b44:	4638      	mov	r0, r7
 8008b46:	47c0      	blx	r8
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d103      	bne.n	8008b54 <_printf_common+0xac>
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b54:	3501      	adds	r5, #1
 8008b56:	e7c6      	b.n	8008ae6 <_printf_common+0x3e>
 8008b58:	18e1      	adds	r1, r4, r3
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	2030      	movs	r0, #48	; 0x30
 8008b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b62:	4422      	add	r2, r4
 8008b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b6c:	3302      	adds	r3, #2
 8008b6e:	e7c7      	b.n	8008b00 <_printf_common+0x58>
 8008b70:	2301      	movs	r3, #1
 8008b72:	4622      	mov	r2, r4
 8008b74:	4649      	mov	r1, r9
 8008b76:	4638      	mov	r0, r7
 8008b78:	47c0      	blx	r8
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d0e6      	beq.n	8008b4c <_printf_common+0xa4>
 8008b7e:	3601      	adds	r6, #1
 8008b80:	e7d9      	b.n	8008b36 <_printf_common+0x8e>
	...

08008b84 <_printf_i>:
 8008b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b88:	7e0f      	ldrb	r7, [r1, #24]
 8008b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b8c:	2f78      	cmp	r7, #120	; 0x78
 8008b8e:	4691      	mov	r9, r2
 8008b90:	4680      	mov	r8, r0
 8008b92:	460c      	mov	r4, r1
 8008b94:	469a      	mov	sl, r3
 8008b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b9a:	d807      	bhi.n	8008bac <_printf_i+0x28>
 8008b9c:	2f62      	cmp	r7, #98	; 0x62
 8008b9e:	d80a      	bhi.n	8008bb6 <_printf_i+0x32>
 8008ba0:	2f00      	cmp	r7, #0
 8008ba2:	f000 80d8 	beq.w	8008d56 <_printf_i+0x1d2>
 8008ba6:	2f58      	cmp	r7, #88	; 0x58
 8008ba8:	f000 80a3 	beq.w	8008cf2 <_printf_i+0x16e>
 8008bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bb4:	e03a      	b.n	8008c2c <_printf_i+0xa8>
 8008bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bba:	2b15      	cmp	r3, #21
 8008bbc:	d8f6      	bhi.n	8008bac <_printf_i+0x28>
 8008bbe:	a101      	add	r1, pc, #4	; (adr r1, 8008bc4 <_printf_i+0x40>)
 8008bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bc4:	08008c1d 	.word	0x08008c1d
 8008bc8:	08008c31 	.word	0x08008c31
 8008bcc:	08008bad 	.word	0x08008bad
 8008bd0:	08008bad 	.word	0x08008bad
 8008bd4:	08008bad 	.word	0x08008bad
 8008bd8:	08008bad 	.word	0x08008bad
 8008bdc:	08008c31 	.word	0x08008c31
 8008be0:	08008bad 	.word	0x08008bad
 8008be4:	08008bad 	.word	0x08008bad
 8008be8:	08008bad 	.word	0x08008bad
 8008bec:	08008bad 	.word	0x08008bad
 8008bf0:	08008d3d 	.word	0x08008d3d
 8008bf4:	08008c61 	.word	0x08008c61
 8008bf8:	08008d1f 	.word	0x08008d1f
 8008bfc:	08008bad 	.word	0x08008bad
 8008c00:	08008bad 	.word	0x08008bad
 8008c04:	08008d5f 	.word	0x08008d5f
 8008c08:	08008bad 	.word	0x08008bad
 8008c0c:	08008c61 	.word	0x08008c61
 8008c10:	08008bad 	.word	0x08008bad
 8008c14:	08008bad 	.word	0x08008bad
 8008c18:	08008d27 	.word	0x08008d27
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	1d1a      	adds	r2, r3, #4
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	602a      	str	r2, [r5, #0]
 8008c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e0a3      	b.n	8008d78 <_printf_i+0x1f4>
 8008c30:	6820      	ldr	r0, [r4, #0]
 8008c32:	6829      	ldr	r1, [r5, #0]
 8008c34:	0606      	lsls	r6, r0, #24
 8008c36:	f101 0304 	add.w	r3, r1, #4
 8008c3a:	d50a      	bpl.n	8008c52 <_printf_i+0xce>
 8008c3c:	680e      	ldr	r6, [r1, #0]
 8008c3e:	602b      	str	r3, [r5, #0]
 8008c40:	2e00      	cmp	r6, #0
 8008c42:	da03      	bge.n	8008c4c <_printf_i+0xc8>
 8008c44:	232d      	movs	r3, #45	; 0x2d
 8008c46:	4276      	negs	r6, r6
 8008c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c4c:	485e      	ldr	r0, [pc, #376]	; (8008dc8 <_printf_i+0x244>)
 8008c4e:	230a      	movs	r3, #10
 8008c50:	e019      	b.n	8008c86 <_printf_i+0x102>
 8008c52:	680e      	ldr	r6, [r1, #0]
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c5a:	bf18      	it	ne
 8008c5c:	b236      	sxthne	r6, r6
 8008c5e:	e7ef      	b.n	8008c40 <_printf_i+0xbc>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	1d19      	adds	r1, r3, #4
 8008c66:	6029      	str	r1, [r5, #0]
 8008c68:	0601      	lsls	r1, r0, #24
 8008c6a:	d501      	bpl.n	8008c70 <_printf_i+0xec>
 8008c6c:	681e      	ldr	r6, [r3, #0]
 8008c6e:	e002      	b.n	8008c76 <_printf_i+0xf2>
 8008c70:	0646      	lsls	r6, r0, #25
 8008c72:	d5fb      	bpl.n	8008c6c <_printf_i+0xe8>
 8008c74:	881e      	ldrh	r6, [r3, #0]
 8008c76:	4854      	ldr	r0, [pc, #336]	; (8008dc8 <_printf_i+0x244>)
 8008c78:	2f6f      	cmp	r7, #111	; 0x6f
 8008c7a:	bf0c      	ite	eq
 8008c7c:	2308      	moveq	r3, #8
 8008c7e:	230a      	movne	r3, #10
 8008c80:	2100      	movs	r1, #0
 8008c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c86:	6865      	ldr	r5, [r4, #4]
 8008c88:	60a5      	str	r5, [r4, #8]
 8008c8a:	2d00      	cmp	r5, #0
 8008c8c:	bfa2      	ittt	ge
 8008c8e:	6821      	ldrge	r1, [r4, #0]
 8008c90:	f021 0104 	bicge.w	r1, r1, #4
 8008c94:	6021      	strge	r1, [r4, #0]
 8008c96:	b90e      	cbnz	r6, 8008c9c <_printf_i+0x118>
 8008c98:	2d00      	cmp	r5, #0
 8008c9a:	d04d      	beq.n	8008d38 <_printf_i+0x1b4>
 8008c9c:	4615      	mov	r5, r2
 8008c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ca6:	5dc7      	ldrb	r7, [r0, r7]
 8008ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cac:	4637      	mov	r7, r6
 8008cae:	42bb      	cmp	r3, r7
 8008cb0:	460e      	mov	r6, r1
 8008cb2:	d9f4      	bls.n	8008c9e <_printf_i+0x11a>
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d10b      	bne.n	8008cd0 <_printf_i+0x14c>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	07de      	lsls	r6, r3, #31
 8008cbc:	d508      	bpl.n	8008cd0 <_printf_i+0x14c>
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	6861      	ldr	r1, [r4, #4]
 8008cc2:	4299      	cmp	r1, r3
 8008cc4:	bfde      	ittt	le
 8008cc6:	2330      	movle	r3, #48	; 0x30
 8008cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ccc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cd0:	1b52      	subs	r2, r2, r5
 8008cd2:	6122      	str	r2, [r4, #16]
 8008cd4:	f8cd a000 	str.w	sl, [sp]
 8008cd8:	464b      	mov	r3, r9
 8008cda:	aa03      	add	r2, sp, #12
 8008cdc:	4621      	mov	r1, r4
 8008cde:	4640      	mov	r0, r8
 8008ce0:	f7ff fee2 	bl	8008aa8 <_printf_common>
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d14c      	bne.n	8008d82 <_printf_i+0x1fe>
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	b004      	add	sp, #16
 8008cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf2:	4835      	ldr	r0, [pc, #212]	; (8008dc8 <_printf_i+0x244>)
 8008cf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cf8:	6829      	ldr	r1, [r5, #0]
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d00:	6029      	str	r1, [r5, #0]
 8008d02:	061d      	lsls	r5, r3, #24
 8008d04:	d514      	bpl.n	8008d30 <_printf_i+0x1ac>
 8008d06:	07df      	lsls	r7, r3, #31
 8008d08:	bf44      	itt	mi
 8008d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d0e:	6023      	strmi	r3, [r4, #0]
 8008d10:	b91e      	cbnz	r6, 8008d1a <_printf_i+0x196>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	f023 0320 	bic.w	r3, r3, #32
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	2310      	movs	r3, #16
 8008d1c:	e7b0      	b.n	8008c80 <_printf_i+0xfc>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	f043 0320 	orr.w	r3, r3, #32
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	2378      	movs	r3, #120	; 0x78
 8008d28:	4828      	ldr	r0, [pc, #160]	; (8008dcc <_printf_i+0x248>)
 8008d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d2e:	e7e3      	b.n	8008cf8 <_printf_i+0x174>
 8008d30:	0659      	lsls	r1, r3, #25
 8008d32:	bf48      	it	mi
 8008d34:	b2b6      	uxthmi	r6, r6
 8008d36:	e7e6      	b.n	8008d06 <_printf_i+0x182>
 8008d38:	4615      	mov	r5, r2
 8008d3a:	e7bb      	b.n	8008cb4 <_printf_i+0x130>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	6826      	ldr	r6, [r4, #0]
 8008d40:	6961      	ldr	r1, [r4, #20]
 8008d42:	1d18      	adds	r0, r3, #4
 8008d44:	6028      	str	r0, [r5, #0]
 8008d46:	0635      	lsls	r5, r6, #24
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	d501      	bpl.n	8008d50 <_printf_i+0x1cc>
 8008d4c:	6019      	str	r1, [r3, #0]
 8008d4e:	e002      	b.n	8008d56 <_printf_i+0x1d2>
 8008d50:	0670      	lsls	r0, r6, #25
 8008d52:	d5fb      	bpl.n	8008d4c <_printf_i+0x1c8>
 8008d54:	8019      	strh	r1, [r3, #0]
 8008d56:	2300      	movs	r3, #0
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	4615      	mov	r5, r2
 8008d5c:	e7ba      	b.n	8008cd4 <_printf_i+0x150>
 8008d5e:	682b      	ldr	r3, [r5, #0]
 8008d60:	1d1a      	adds	r2, r3, #4
 8008d62:	602a      	str	r2, [r5, #0]
 8008d64:	681d      	ldr	r5, [r3, #0]
 8008d66:	6862      	ldr	r2, [r4, #4]
 8008d68:	2100      	movs	r1, #0
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f7f7 fa48 	bl	8000200 <memchr>
 8008d70:	b108      	cbz	r0, 8008d76 <_printf_i+0x1f2>
 8008d72:	1b40      	subs	r0, r0, r5
 8008d74:	6060      	str	r0, [r4, #4]
 8008d76:	6863      	ldr	r3, [r4, #4]
 8008d78:	6123      	str	r3, [r4, #16]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d80:	e7a8      	b.n	8008cd4 <_printf_i+0x150>
 8008d82:	6923      	ldr	r3, [r4, #16]
 8008d84:	462a      	mov	r2, r5
 8008d86:	4649      	mov	r1, r9
 8008d88:	4640      	mov	r0, r8
 8008d8a:	47d0      	blx	sl
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d0ab      	beq.n	8008ce8 <_printf_i+0x164>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	079b      	lsls	r3, r3, #30
 8008d94:	d413      	bmi.n	8008dbe <_printf_i+0x23a>
 8008d96:	68e0      	ldr	r0, [r4, #12]
 8008d98:	9b03      	ldr	r3, [sp, #12]
 8008d9a:	4298      	cmp	r0, r3
 8008d9c:	bfb8      	it	lt
 8008d9e:	4618      	movlt	r0, r3
 8008da0:	e7a4      	b.n	8008cec <_printf_i+0x168>
 8008da2:	2301      	movs	r3, #1
 8008da4:	4632      	mov	r2, r6
 8008da6:	4649      	mov	r1, r9
 8008da8:	4640      	mov	r0, r8
 8008daa:	47d0      	blx	sl
 8008dac:	3001      	adds	r0, #1
 8008dae:	d09b      	beq.n	8008ce8 <_printf_i+0x164>
 8008db0:	3501      	adds	r5, #1
 8008db2:	68e3      	ldr	r3, [r4, #12]
 8008db4:	9903      	ldr	r1, [sp, #12]
 8008db6:	1a5b      	subs	r3, r3, r1
 8008db8:	42ab      	cmp	r3, r5
 8008dba:	dcf2      	bgt.n	8008da2 <_printf_i+0x21e>
 8008dbc:	e7eb      	b.n	8008d96 <_printf_i+0x212>
 8008dbe:	2500      	movs	r5, #0
 8008dc0:	f104 0619 	add.w	r6, r4, #25
 8008dc4:	e7f5      	b.n	8008db2 <_printf_i+0x22e>
 8008dc6:	bf00      	nop
 8008dc8:	0800994d 	.word	0x0800994d
 8008dcc:	0800995e 	.word	0x0800995e

08008dd0 <_sbrk_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4d06      	ldr	r5, [pc, #24]	; (8008dec <_sbrk_r+0x1c>)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	602b      	str	r3, [r5, #0]
 8008ddc:	f7fb fb9c 	bl	8004518 <_sbrk>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_sbrk_r+0x1a>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_sbrk_r+0x1a>
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	20000810 	.word	0x20000810

08008df0 <__swbuf_r>:
 8008df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df2:	460e      	mov	r6, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	4605      	mov	r5, r0
 8008df8:	b118      	cbz	r0, 8008e02 <__swbuf_r+0x12>
 8008dfa:	6983      	ldr	r3, [r0, #24]
 8008dfc:	b90b      	cbnz	r3, 8008e02 <__swbuf_r+0x12>
 8008dfe:	f000 f9d9 	bl	80091b4 <__sinit>
 8008e02:	4b21      	ldr	r3, [pc, #132]	; (8008e88 <__swbuf_r+0x98>)
 8008e04:	429c      	cmp	r4, r3
 8008e06:	d12b      	bne.n	8008e60 <__swbuf_r+0x70>
 8008e08:	686c      	ldr	r4, [r5, #4]
 8008e0a:	69a3      	ldr	r3, [r4, #24]
 8008e0c:	60a3      	str	r3, [r4, #8]
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	071a      	lsls	r2, r3, #28
 8008e12:	d52f      	bpl.n	8008e74 <__swbuf_r+0x84>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	b36b      	cbz	r3, 8008e74 <__swbuf_r+0x84>
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	6820      	ldr	r0, [r4, #0]
 8008e1c:	1ac0      	subs	r0, r0, r3
 8008e1e:	6963      	ldr	r3, [r4, #20]
 8008e20:	b2f6      	uxtb	r6, r6
 8008e22:	4283      	cmp	r3, r0
 8008e24:	4637      	mov	r7, r6
 8008e26:	dc04      	bgt.n	8008e32 <__swbuf_r+0x42>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 f92e 	bl	800908c <_fflush_r>
 8008e30:	bb30      	cbnz	r0, 8008e80 <__swbuf_r+0x90>
 8008e32:	68a3      	ldr	r3, [r4, #8]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	1c5a      	adds	r2, r3, #1
 8008e3c:	6022      	str	r2, [r4, #0]
 8008e3e:	701e      	strb	r6, [r3, #0]
 8008e40:	6963      	ldr	r3, [r4, #20]
 8008e42:	3001      	adds	r0, #1
 8008e44:	4283      	cmp	r3, r0
 8008e46:	d004      	beq.n	8008e52 <__swbuf_r+0x62>
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	07db      	lsls	r3, r3, #31
 8008e4c:	d506      	bpl.n	8008e5c <__swbuf_r+0x6c>
 8008e4e:	2e0a      	cmp	r6, #10
 8008e50:	d104      	bne.n	8008e5c <__swbuf_r+0x6c>
 8008e52:	4621      	mov	r1, r4
 8008e54:	4628      	mov	r0, r5
 8008e56:	f000 f919 	bl	800908c <_fflush_r>
 8008e5a:	b988      	cbnz	r0, 8008e80 <__swbuf_r+0x90>
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e60:	4b0a      	ldr	r3, [pc, #40]	; (8008e8c <__swbuf_r+0x9c>)
 8008e62:	429c      	cmp	r4, r3
 8008e64:	d101      	bne.n	8008e6a <__swbuf_r+0x7a>
 8008e66:	68ac      	ldr	r4, [r5, #8]
 8008e68:	e7cf      	b.n	8008e0a <__swbuf_r+0x1a>
 8008e6a:	4b09      	ldr	r3, [pc, #36]	; (8008e90 <__swbuf_r+0xa0>)
 8008e6c:	429c      	cmp	r4, r3
 8008e6e:	bf08      	it	eq
 8008e70:	68ec      	ldreq	r4, [r5, #12]
 8008e72:	e7ca      	b.n	8008e0a <__swbuf_r+0x1a>
 8008e74:	4621      	mov	r1, r4
 8008e76:	4628      	mov	r0, r5
 8008e78:	f000 f80c 	bl	8008e94 <__swsetup_r>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d0cb      	beq.n	8008e18 <__swbuf_r+0x28>
 8008e80:	f04f 37ff 	mov.w	r7, #4294967295
 8008e84:	e7ea      	b.n	8008e5c <__swbuf_r+0x6c>
 8008e86:	bf00      	nop
 8008e88:	08009990 	.word	0x08009990
 8008e8c:	080099b0 	.word	0x080099b0
 8008e90:	08009970 	.word	0x08009970

08008e94 <__swsetup_r>:
 8008e94:	4b32      	ldr	r3, [pc, #200]	; (8008f60 <__swsetup_r+0xcc>)
 8008e96:	b570      	push	{r4, r5, r6, lr}
 8008e98:	681d      	ldr	r5, [r3, #0]
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	b125      	cbz	r5, 8008eaa <__swsetup_r+0x16>
 8008ea0:	69ab      	ldr	r3, [r5, #24]
 8008ea2:	b913      	cbnz	r3, 8008eaa <__swsetup_r+0x16>
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	f000 f985 	bl	80091b4 <__sinit>
 8008eaa:	4b2e      	ldr	r3, [pc, #184]	; (8008f64 <__swsetup_r+0xd0>)
 8008eac:	429c      	cmp	r4, r3
 8008eae:	d10f      	bne.n	8008ed0 <__swsetup_r+0x3c>
 8008eb0:	686c      	ldr	r4, [r5, #4]
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eb8:	0719      	lsls	r1, r3, #28
 8008eba:	d42c      	bmi.n	8008f16 <__swsetup_r+0x82>
 8008ebc:	06dd      	lsls	r5, r3, #27
 8008ebe:	d411      	bmi.n	8008ee4 <__swsetup_r+0x50>
 8008ec0:	2309      	movs	r3, #9
 8008ec2:	6033      	str	r3, [r6, #0]
 8008ec4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	f04f 30ff 	mov.w	r0, #4294967295
 8008ece:	e03e      	b.n	8008f4e <__swsetup_r+0xba>
 8008ed0:	4b25      	ldr	r3, [pc, #148]	; (8008f68 <__swsetup_r+0xd4>)
 8008ed2:	429c      	cmp	r4, r3
 8008ed4:	d101      	bne.n	8008eda <__swsetup_r+0x46>
 8008ed6:	68ac      	ldr	r4, [r5, #8]
 8008ed8:	e7eb      	b.n	8008eb2 <__swsetup_r+0x1e>
 8008eda:	4b24      	ldr	r3, [pc, #144]	; (8008f6c <__swsetup_r+0xd8>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	bf08      	it	eq
 8008ee0:	68ec      	ldreq	r4, [r5, #12]
 8008ee2:	e7e6      	b.n	8008eb2 <__swsetup_r+0x1e>
 8008ee4:	0758      	lsls	r0, r3, #29
 8008ee6:	d512      	bpl.n	8008f0e <__swsetup_r+0x7a>
 8008ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eea:	b141      	cbz	r1, 8008efe <__swsetup_r+0x6a>
 8008eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ef0:	4299      	cmp	r1, r3
 8008ef2:	d002      	beq.n	8008efa <__swsetup_r+0x66>
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f7ff fb9d 	bl	8008634 <_free_r>
 8008efa:	2300      	movs	r3, #0
 8008efc:	6363      	str	r3, [r4, #52]	; 0x34
 8008efe:	89a3      	ldrh	r3, [r4, #12]
 8008f00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f04:	81a3      	strh	r3, [r4, #12]
 8008f06:	2300      	movs	r3, #0
 8008f08:	6063      	str	r3, [r4, #4]
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	f043 0308 	orr.w	r3, r3, #8
 8008f14:	81a3      	strh	r3, [r4, #12]
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	b94b      	cbnz	r3, 8008f2e <__swsetup_r+0x9a>
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f24:	d003      	beq.n	8008f2e <__swsetup_r+0x9a>
 8008f26:	4621      	mov	r1, r4
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f000 fa09 	bl	8009340 <__smakebuf_r>
 8008f2e:	89a0      	ldrh	r0, [r4, #12]
 8008f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f34:	f010 0301 	ands.w	r3, r0, #1
 8008f38:	d00a      	beq.n	8008f50 <__swsetup_r+0xbc>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60a3      	str	r3, [r4, #8]
 8008f3e:	6963      	ldr	r3, [r4, #20]
 8008f40:	425b      	negs	r3, r3
 8008f42:	61a3      	str	r3, [r4, #24]
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	b943      	cbnz	r3, 8008f5a <__swsetup_r+0xc6>
 8008f48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f4c:	d1ba      	bne.n	8008ec4 <__swsetup_r+0x30>
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	0781      	lsls	r1, r0, #30
 8008f52:	bf58      	it	pl
 8008f54:	6963      	ldrpl	r3, [r4, #20]
 8008f56:	60a3      	str	r3, [r4, #8]
 8008f58:	e7f4      	b.n	8008f44 <__swsetup_r+0xb0>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	e7f7      	b.n	8008f4e <__swsetup_r+0xba>
 8008f5e:	bf00      	nop
 8008f60:	20000208 	.word	0x20000208
 8008f64:	08009990 	.word	0x08009990
 8008f68:	080099b0 	.word	0x080099b0
 8008f6c:	08009970 	.word	0x08009970

08008f70 <abort>:
 8008f70:	b508      	push	{r3, lr}
 8008f72:	2006      	movs	r0, #6
 8008f74:	f000 fa58 	bl	8009428 <raise>
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f7fb fa55 	bl	8004428 <_exit>
	...

08008f80 <__sflush_r>:
 8008f80:	898a      	ldrh	r2, [r1, #12]
 8008f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f86:	4605      	mov	r5, r0
 8008f88:	0710      	lsls	r0, r2, #28
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	d458      	bmi.n	8009040 <__sflush_r+0xc0>
 8008f8e:	684b      	ldr	r3, [r1, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	dc05      	bgt.n	8008fa0 <__sflush_r+0x20>
 8008f94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	dc02      	bgt.n	8008fa0 <__sflush_r+0x20>
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa2:	2e00      	cmp	r6, #0
 8008fa4:	d0f9      	beq.n	8008f9a <__sflush_r+0x1a>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fac:	682f      	ldr	r7, [r5, #0]
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	d032      	beq.n	8009018 <__sflush_r+0x98>
 8008fb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	075a      	lsls	r2, r3, #29
 8008fb8:	d505      	bpl.n	8008fc6 <__sflush_r+0x46>
 8008fba:	6863      	ldr	r3, [r4, #4]
 8008fbc:	1ac0      	subs	r0, r0, r3
 8008fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fc0:	b10b      	cbz	r3, 8008fc6 <__sflush_r+0x46>
 8008fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fc4:	1ac0      	subs	r0, r0, r3
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	4602      	mov	r2, r0
 8008fca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fcc:	6a21      	ldr	r1, [r4, #32]
 8008fce:	4628      	mov	r0, r5
 8008fd0:	47b0      	blx	r6
 8008fd2:	1c43      	adds	r3, r0, #1
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	d106      	bne.n	8008fe6 <__sflush_r+0x66>
 8008fd8:	6829      	ldr	r1, [r5, #0]
 8008fda:	291d      	cmp	r1, #29
 8008fdc:	d82c      	bhi.n	8009038 <__sflush_r+0xb8>
 8008fde:	4a2a      	ldr	r2, [pc, #168]	; (8009088 <__sflush_r+0x108>)
 8008fe0:	40ca      	lsrs	r2, r1
 8008fe2:	07d6      	lsls	r6, r2, #31
 8008fe4:	d528      	bpl.n	8009038 <__sflush_r+0xb8>
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	6062      	str	r2, [r4, #4]
 8008fea:	04d9      	lsls	r1, r3, #19
 8008fec:	6922      	ldr	r2, [r4, #16]
 8008fee:	6022      	str	r2, [r4, #0]
 8008ff0:	d504      	bpl.n	8008ffc <__sflush_r+0x7c>
 8008ff2:	1c42      	adds	r2, r0, #1
 8008ff4:	d101      	bne.n	8008ffa <__sflush_r+0x7a>
 8008ff6:	682b      	ldr	r3, [r5, #0]
 8008ff8:	b903      	cbnz	r3, 8008ffc <__sflush_r+0x7c>
 8008ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8008ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ffe:	602f      	str	r7, [r5, #0]
 8009000:	2900      	cmp	r1, #0
 8009002:	d0ca      	beq.n	8008f9a <__sflush_r+0x1a>
 8009004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009008:	4299      	cmp	r1, r3
 800900a:	d002      	beq.n	8009012 <__sflush_r+0x92>
 800900c:	4628      	mov	r0, r5
 800900e:	f7ff fb11 	bl	8008634 <_free_r>
 8009012:	2000      	movs	r0, #0
 8009014:	6360      	str	r0, [r4, #52]	; 0x34
 8009016:	e7c1      	b.n	8008f9c <__sflush_r+0x1c>
 8009018:	6a21      	ldr	r1, [r4, #32]
 800901a:	2301      	movs	r3, #1
 800901c:	4628      	mov	r0, r5
 800901e:	47b0      	blx	r6
 8009020:	1c41      	adds	r1, r0, #1
 8009022:	d1c7      	bne.n	8008fb4 <__sflush_r+0x34>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0c4      	beq.n	8008fb4 <__sflush_r+0x34>
 800902a:	2b1d      	cmp	r3, #29
 800902c:	d001      	beq.n	8009032 <__sflush_r+0xb2>
 800902e:	2b16      	cmp	r3, #22
 8009030:	d101      	bne.n	8009036 <__sflush_r+0xb6>
 8009032:	602f      	str	r7, [r5, #0]
 8009034:	e7b1      	b.n	8008f9a <__sflush_r+0x1a>
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	e7ad      	b.n	8008f9c <__sflush_r+0x1c>
 8009040:	690f      	ldr	r7, [r1, #16]
 8009042:	2f00      	cmp	r7, #0
 8009044:	d0a9      	beq.n	8008f9a <__sflush_r+0x1a>
 8009046:	0793      	lsls	r3, r2, #30
 8009048:	680e      	ldr	r6, [r1, #0]
 800904a:	bf08      	it	eq
 800904c:	694b      	ldreq	r3, [r1, #20]
 800904e:	600f      	str	r7, [r1, #0]
 8009050:	bf18      	it	ne
 8009052:	2300      	movne	r3, #0
 8009054:	eba6 0807 	sub.w	r8, r6, r7
 8009058:	608b      	str	r3, [r1, #8]
 800905a:	f1b8 0f00 	cmp.w	r8, #0
 800905e:	dd9c      	ble.n	8008f9a <__sflush_r+0x1a>
 8009060:	6a21      	ldr	r1, [r4, #32]
 8009062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009064:	4643      	mov	r3, r8
 8009066:	463a      	mov	r2, r7
 8009068:	4628      	mov	r0, r5
 800906a:	47b0      	blx	r6
 800906c:	2800      	cmp	r0, #0
 800906e:	dc06      	bgt.n	800907e <__sflush_r+0xfe>
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	e78e      	b.n	8008f9c <__sflush_r+0x1c>
 800907e:	4407      	add	r7, r0
 8009080:	eba8 0800 	sub.w	r8, r8, r0
 8009084:	e7e9      	b.n	800905a <__sflush_r+0xda>
 8009086:	bf00      	nop
 8009088:	20400001 	.word	0x20400001

0800908c <_fflush_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	690b      	ldr	r3, [r1, #16]
 8009090:	4605      	mov	r5, r0
 8009092:	460c      	mov	r4, r1
 8009094:	b913      	cbnz	r3, 800909c <_fflush_r+0x10>
 8009096:	2500      	movs	r5, #0
 8009098:	4628      	mov	r0, r5
 800909a:	bd38      	pop	{r3, r4, r5, pc}
 800909c:	b118      	cbz	r0, 80090a6 <_fflush_r+0x1a>
 800909e:	6983      	ldr	r3, [r0, #24]
 80090a0:	b90b      	cbnz	r3, 80090a6 <_fflush_r+0x1a>
 80090a2:	f000 f887 	bl	80091b4 <__sinit>
 80090a6:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <_fflush_r+0x6c>)
 80090a8:	429c      	cmp	r4, r3
 80090aa:	d11b      	bne.n	80090e4 <_fflush_r+0x58>
 80090ac:	686c      	ldr	r4, [r5, #4]
 80090ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0ef      	beq.n	8009096 <_fflush_r+0xa>
 80090b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090b8:	07d0      	lsls	r0, r2, #31
 80090ba:	d404      	bmi.n	80090c6 <_fflush_r+0x3a>
 80090bc:	0599      	lsls	r1, r3, #22
 80090be:	d402      	bmi.n	80090c6 <_fflush_r+0x3a>
 80090c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c2:	f000 f915 	bl	80092f0 <__retarget_lock_acquire_recursive>
 80090c6:	4628      	mov	r0, r5
 80090c8:	4621      	mov	r1, r4
 80090ca:	f7ff ff59 	bl	8008f80 <__sflush_r>
 80090ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090d0:	07da      	lsls	r2, r3, #31
 80090d2:	4605      	mov	r5, r0
 80090d4:	d4e0      	bmi.n	8009098 <_fflush_r+0xc>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	059b      	lsls	r3, r3, #22
 80090da:	d4dd      	bmi.n	8009098 <_fflush_r+0xc>
 80090dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090de:	f000 f908 	bl	80092f2 <__retarget_lock_release_recursive>
 80090e2:	e7d9      	b.n	8009098 <_fflush_r+0xc>
 80090e4:	4b05      	ldr	r3, [pc, #20]	; (80090fc <_fflush_r+0x70>)
 80090e6:	429c      	cmp	r4, r3
 80090e8:	d101      	bne.n	80090ee <_fflush_r+0x62>
 80090ea:	68ac      	ldr	r4, [r5, #8]
 80090ec:	e7df      	b.n	80090ae <_fflush_r+0x22>
 80090ee:	4b04      	ldr	r3, [pc, #16]	; (8009100 <_fflush_r+0x74>)
 80090f0:	429c      	cmp	r4, r3
 80090f2:	bf08      	it	eq
 80090f4:	68ec      	ldreq	r4, [r5, #12]
 80090f6:	e7da      	b.n	80090ae <_fflush_r+0x22>
 80090f8:	08009990 	.word	0x08009990
 80090fc:	080099b0 	.word	0x080099b0
 8009100:	08009970 	.word	0x08009970

08009104 <std>:
 8009104:	2300      	movs	r3, #0
 8009106:	b510      	push	{r4, lr}
 8009108:	4604      	mov	r4, r0
 800910a:	e9c0 3300 	strd	r3, r3, [r0]
 800910e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009112:	6083      	str	r3, [r0, #8]
 8009114:	8181      	strh	r1, [r0, #12]
 8009116:	6643      	str	r3, [r0, #100]	; 0x64
 8009118:	81c2      	strh	r2, [r0, #14]
 800911a:	6183      	str	r3, [r0, #24]
 800911c:	4619      	mov	r1, r3
 800911e:	2208      	movs	r2, #8
 8009120:	305c      	adds	r0, #92	; 0x5c
 8009122:	f7ff fa7f 	bl	8008624 <memset>
 8009126:	4b05      	ldr	r3, [pc, #20]	; (800913c <std+0x38>)
 8009128:	6263      	str	r3, [r4, #36]	; 0x24
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <std+0x3c>)
 800912c:	62a3      	str	r3, [r4, #40]	; 0x28
 800912e:	4b05      	ldr	r3, [pc, #20]	; (8009144 <std+0x40>)
 8009130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009132:	4b05      	ldr	r3, [pc, #20]	; (8009148 <std+0x44>)
 8009134:	6224      	str	r4, [r4, #32]
 8009136:	6323      	str	r3, [r4, #48]	; 0x30
 8009138:	bd10      	pop	{r4, pc}
 800913a:	bf00      	nop
 800913c:	08009461 	.word	0x08009461
 8009140:	08009483 	.word	0x08009483
 8009144:	080094bb 	.word	0x080094bb
 8009148:	080094df 	.word	0x080094df

0800914c <_cleanup_r>:
 800914c:	4901      	ldr	r1, [pc, #4]	; (8009154 <_cleanup_r+0x8>)
 800914e:	f000 b8af 	b.w	80092b0 <_fwalk_reent>
 8009152:	bf00      	nop
 8009154:	0800908d 	.word	0x0800908d

08009158 <__sfmoreglue>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	2268      	movs	r2, #104	; 0x68
 800915c:	1e4d      	subs	r5, r1, #1
 800915e:	4355      	muls	r5, r2
 8009160:	460e      	mov	r6, r1
 8009162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009166:	f7ff fad1 	bl	800870c <_malloc_r>
 800916a:	4604      	mov	r4, r0
 800916c:	b140      	cbz	r0, 8009180 <__sfmoreglue+0x28>
 800916e:	2100      	movs	r1, #0
 8009170:	e9c0 1600 	strd	r1, r6, [r0]
 8009174:	300c      	adds	r0, #12
 8009176:	60a0      	str	r0, [r4, #8]
 8009178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800917c:	f7ff fa52 	bl	8008624 <memset>
 8009180:	4620      	mov	r0, r4
 8009182:	bd70      	pop	{r4, r5, r6, pc}

08009184 <__sfp_lock_acquire>:
 8009184:	4801      	ldr	r0, [pc, #4]	; (800918c <__sfp_lock_acquire+0x8>)
 8009186:	f000 b8b3 	b.w	80092f0 <__retarget_lock_acquire_recursive>
 800918a:	bf00      	nop
 800918c:	2000080d 	.word	0x2000080d

08009190 <__sfp_lock_release>:
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <__sfp_lock_release+0x8>)
 8009192:	f000 b8ae 	b.w	80092f2 <__retarget_lock_release_recursive>
 8009196:	bf00      	nop
 8009198:	2000080d 	.word	0x2000080d

0800919c <__sinit_lock_acquire>:
 800919c:	4801      	ldr	r0, [pc, #4]	; (80091a4 <__sinit_lock_acquire+0x8>)
 800919e:	f000 b8a7 	b.w	80092f0 <__retarget_lock_acquire_recursive>
 80091a2:	bf00      	nop
 80091a4:	2000080e 	.word	0x2000080e

080091a8 <__sinit_lock_release>:
 80091a8:	4801      	ldr	r0, [pc, #4]	; (80091b0 <__sinit_lock_release+0x8>)
 80091aa:	f000 b8a2 	b.w	80092f2 <__retarget_lock_release_recursive>
 80091ae:	bf00      	nop
 80091b0:	2000080e 	.word	0x2000080e

080091b4 <__sinit>:
 80091b4:	b510      	push	{r4, lr}
 80091b6:	4604      	mov	r4, r0
 80091b8:	f7ff fff0 	bl	800919c <__sinit_lock_acquire>
 80091bc:	69a3      	ldr	r3, [r4, #24]
 80091be:	b11b      	cbz	r3, 80091c8 <__sinit+0x14>
 80091c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c4:	f7ff bff0 	b.w	80091a8 <__sinit_lock_release>
 80091c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091cc:	6523      	str	r3, [r4, #80]	; 0x50
 80091ce:	4b13      	ldr	r3, [pc, #76]	; (800921c <__sinit+0x68>)
 80091d0:	4a13      	ldr	r2, [pc, #76]	; (8009220 <__sinit+0x6c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80091d6:	42a3      	cmp	r3, r4
 80091d8:	bf04      	itt	eq
 80091da:	2301      	moveq	r3, #1
 80091dc:	61a3      	streq	r3, [r4, #24]
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 f820 	bl	8009224 <__sfp>
 80091e4:	6060      	str	r0, [r4, #4]
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 f81c 	bl	8009224 <__sfp>
 80091ec:	60a0      	str	r0, [r4, #8]
 80091ee:	4620      	mov	r0, r4
 80091f0:	f000 f818 	bl	8009224 <__sfp>
 80091f4:	2200      	movs	r2, #0
 80091f6:	60e0      	str	r0, [r4, #12]
 80091f8:	2104      	movs	r1, #4
 80091fa:	6860      	ldr	r0, [r4, #4]
 80091fc:	f7ff ff82 	bl	8009104 <std>
 8009200:	68a0      	ldr	r0, [r4, #8]
 8009202:	2201      	movs	r2, #1
 8009204:	2109      	movs	r1, #9
 8009206:	f7ff ff7d 	bl	8009104 <std>
 800920a:	68e0      	ldr	r0, [r4, #12]
 800920c:	2202      	movs	r2, #2
 800920e:	2112      	movs	r1, #18
 8009210:	f7ff ff78 	bl	8009104 <std>
 8009214:	2301      	movs	r3, #1
 8009216:	61a3      	str	r3, [r4, #24]
 8009218:	e7d2      	b.n	80091c0 <__sinit+0xc>
 800921a:	bf00      	nop
 800921c:	08009938 	.word	0x08009938
 8009220:	0800914d 	.word	0x0800914d

08009224 <__sfp>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	4607      	mov	r7, r0
 8009228:	f7ff ffac 	bl	8009184 <__sfp_lock_acquire>
 800922c:	4b1e      	ldr	r3, [pc, #120]	; (80092a8 <__sfp+0x84>)
 800922e:	681e      	ldr	r6, [r3, #0]
 8009230:	69b3      	ldr	r3, [r6, #24]
 8009232:	b913      	cbnz	r3, 800923a <__sfp+0x16>
 8009234:	4630      	mov	r0, r6
 8009236:	f7ff ffbd 	bl	80091b4 <__sinit>
 800923a:	3648      	adds	r6, #72	; 0x48
 800923c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009240:	3b01      	subs	r3, #1
 8009242:	d503      	bpl.n	800924c <__sfp+0x28>
 8009244:	6833      	ldr	r3, [r6, #0]
 8009246:	b30b      	cbz	r3, 800928c <__sfp+0x68>
 8009248:	6836      	ldr	r6, [r6, #0]
 800924a:	e7f7      	b.n	800923c <__sfp+0x18>
 800924c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009250:	b9d5      	cbnz	r5, 8009288 <__sfp+0x64>
 8009252:	4b16      	ldr	r3, [pc, #88]	; (80092ac <__sfp+0x88>)
 8009254:	60e3      	str	r3, [r4, #12]
 8009256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800925a:	6665      	str	r5, [r4, #100]	; 0x64
 800925c:	f000 f847 	bl	80092ee <__retarget_lock_init_recursive>
 8009260:	f7ff ff96 	bl	8009190 <__sfp_lock_release>
 8009264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800926c:	6025      	str	r5, [r4, #0]
 800926e:	61a5      	str	r5, [r4, #24]
 8009270:	2208      	movs	r2, #8
 8009272:	4629      	mov	r1, r5
 8009274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009278:	f7ff f9d4 	bl	8008624 <memset>
 800927c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009284:	4620      	mov	r0, r4
 8009286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009288:	3468      	adds	r4, #104	; 0x68
 800928a:	e7d9      	b.n	8009240 <__sfp+0x1c>
 800928c:	2104      	movs	r1, #4
 800928e:	4638      	mov	r0, r7
 8009290:	f7ff ff62 	bl	8009158 <__sfmoreglue>
 8009294:	4604      	mov	r4, r0
 8009296:	6030      	str	r0, [r6, #0]
 8009298:	2800      	cmp	r0, #0
 800929a:	d1d5      	bne.n	8009248 <__sfp+0x24>
 800929c:	f7ff ff78 	bl	8009190 <__sfp_lock_release>
 80092a0:	230c      	movs	r3, #12
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	e7ee      	b.n	8009284 <__sfp+0x60>
 80092a6:	bf00      	nop
 80092a8:	08009938 	.word	0x08009938
 80092ac:	ffff0001 	.word	0xffff0001

080092b0 <_fwalk_reent>:
 80092b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b4:	4606      	mov	r6, r0
 80092b6:	4688      	mov	r8, r1
 80092b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092bc:	2700      	movs	r7, #0
 80092be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092c2:	f1b9 0901 	subs.w	r9, r9, #1
 80092c6:	d505      	bpl.n	80092d4 <_fwalk_reent+0x24>
 80092c8:	6824      	ldr	r4, [r4, #0]
 80092ca:	2c00      	cmp	r4, #0
 80092cc:	d1f7      	bne.n	80092be <_fwalk_reent+0xe>
 80092ce:	4638      	mov	r0, r7
 80092d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d4:	89ab      	ldrh	r3, [r5, #12]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d907      	bls.n	80092ea <_fwalk_reent+0x3a>
 80092da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092de:	3301      	adds	r3, #1
 80092e0:	d003      	beq.n	80092ea <_fwalk_reent+0x3a>
 80092e2:	4629      	mov	r1, r5
 80092e4:	4630      	mov	r0, r6
 80092e6:	47c0      	blx	r8
 80092e8:	4307      	orrs	r7, r0
 80092ea:	3568      	adds	r5, #104	; 0x68
 80092ec:	e7e9      	b.n	80092c2 <_fwalk_reent+0x12>

080092ee <__retarget_lock_init_recursive>:
 80092ee:	4770      	bx	lr

080092f0 <__retarget_lock_acquire_recursive>:
 80092f0:	4770      	bx	lr

080092f2 <__retarget_lock_release_recursive>:
 80092f2:	4770      	bx	lr

080092f4 <__swhatbuf_r>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	460e      	mov	r6, r1
 80092f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fc:	2900      	cmp	r1, #0
 80092fe:	b096      	sub	sp, #88	; 0x58
 8009300:	4614      	mov	r4, r2
 8009302:	461d      	mov	r5, r3
 8009304:	da08      	bge.n	8009318 <__swhatbuf_r+0x24>
 8009306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	602a      	str	r2, [r5, #0]
 800930e:	061a      	lsls	r2, r3, #24
 8009310:	d410      	bmi.n	8009334 <__swhatbuf_r+0x40>
 8009312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009316:	e00e      	b.n	8009336 <__swhatbuf_r+0x42>
 8009318:	466a      	mov	r2, sp
 800931a:	f000 f907 	bl	800952c <_fstat_r>
 800931e:	2800      	cmp	r0, #0
 8009320:	dbf1      	blt.n	8009306 <__swhatbuf_r+0x12>
 8009322:	9a01      	ldr	r2, [sp, #4]
 8009324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800932c:	425a      	negs	r2, r3
 800932e:	415a      	adcs	r2, r3
 8009330:	602a      	str	r2, [r5, #0]
 8009332:	e7ee      	b.n	8009312 <__swhatbuf_r+0x1e>
 8009334:	2340      	movs	r3, #64	; 0x40
 8009336:	2000      	movs	r0, #0
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	b016      	add	sp, #88	; 0x58
 800933c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009340 <__smakebuf_r>:
 8009340:	898b      	ldrh	r3, [r1, #12]
 8009342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009344:	079d      	lsls	r5, r3, #30
 8009346:	4606      	mov	r6, r0
 8009348:	460c      	mov	r4, r1
 800934a:	d507      	bpl.n	800935c <__smakebuf_r+0x1c>
 800934c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	6123      	str	r3, [r4, #16]
 8009354:	2301      	movs	r3, #1
 8009356:	6163      	str	r3, [r4, #20]
 8009358:	b002      	add	sp, #8
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	ab01      	add	r3, sp, #4
 800935e:	466a      	mov	r2, sp
 8009360:	f7ff ffc8 	bl	80092f4 <__swhatbuf_r>
 8009364:	9900      	ldr	r1, [sp, #0]
 8009366:	4605      	mov	r5, r0
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff f9cf 	bl	800870c <_malloc_r>
 800936e:	b948      	cbnz	r0, 8009384 <__smakebuf_r+0x44>
 8009370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009374:	059a      	lsls	r2, r3, #22
 8009376:	d4ef      	bmi.n	8009358 <__smakebuf_r+0x18>
 8009378:	f023 0303 	bic.w	r3, r3, #3
 800937c:	f043 0302 	orr.w	r3, r3, #2
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	e7e3      	b.n	800934c <__smakebuf_r+0xc>
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <__smakebuf_r+0x7c>)
 8009386:	62b3      	str	r3, [r6, #40]	; 0x28
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	6020      	str	r0, [r4, #0]
 800938c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	9b00      	ldr	r3, [sp, #0]
 8009394:	6163      	str	r3, [r4, #20]
 8009396:	9b01      	ldr	r3, [sp, #4]
 8009398:	6120      	str	r0, [r4, #16]
 800939a:	b15b      	cbz	r3, 80093b4 <__smakebuf_r+0x74>
 800939c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a0:	4630      	mov	r0, r6
 80093a2:	f000 f8d5 	bl	8009550 <_isatty_r>
 80093a6:	b128      	cbz	r0, 80093b4 <__smakebuf_r+0x74>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f023 0303 	bic.w	r3, r3, #3
 80093ae:	f043 0301 	orr.w	r3, r3, #1
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	89a0      	ldrh	r0, [r4, #12]
 80093b6:	4305      	orrs	r5, r0
 80093b8:	81a5      	strh	r5, [r4, #12]
 80093ba:	e7cd      	b.n	8009358 <__smakebuf_r+0x18>
 80093bc:	0800914d 	.word	0x0800914d

080093c0 <__malloc_lock>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__malloc_lock+0x8>)
 80093c2:	f7ff bf95 	b.w	80092f0 <__retarget_lock_acquire_recursive>
 80093c6:	bf00      	nop
 80093c8:	2000080c 	.word	0x2000080c

080093cc <__malloc_unlock>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__malloc_unlock+0x8>)
 80093ce:	f7ff bf90 	b.w	80092f2 <__retarget_lock_release_recursive>
 80093d2:	bf00      	nop
 80093d4:	2000080c 	.word	0x2000080c

080093d8 <_raise_r>:
 80093d8:	291f      	cmp	r1, #31
 80093da:	b538      	push	{r3, r4, r5, lr}
 80093dc:	4604      	mov	r4, r0
 80093de:	460d      	mov	r5, r1
 80093e0:	d904      	bls.n	80093ec <_raise_r+0x14>
 80093e2:	2316      	movs	r3, #22
 80093e4:	6003      	str	r3, [r0, #0]
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093ee:	b112      	cbz	r2, 80093f6 <_raise_r+0x1e>
 80093f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093f4:	b94b      	cbnz	r3, 800940a <_raise_r+0x32>
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 f830 	bl	800945c <_getpid_r>
 80093fc:	462a      	mov	r2, r5
 80093fe:	4601      	mov	r1, r0
 8009400:	4620      	mov	r0, r4
 8009402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009406:	f000 b817 	b.w	8009438 <_kill_r>
 800940a:	2b01      	cmp	r3, #1
 800940c:	d00a      	beq.n	8009424 <_raise_r+0x4c>
 800940e:	1c59      	adds	r1, r3, #1
 8009410:	d103      	bne.n	800941a <_raise_r+0x42>
 8009412:	2316      	movs	r3, #22
 8009414:	6003      	str	r3, [r0, #0]
 8009416:	2001      	movs	r0, #1
 8009418:	e7e7      	b.n	80093ea <_raise_r+0x12>
 800941a:	2400      	movs	r4, #0
 800941c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009420:	4628      	mov	r0, r5
 8009422:	4798      	blx	r3
 8009424:	2000      	movs	r0, #0
 8009426:	e7e0      	b.n	80093ea <_raise_r+0x12>

08009428 <raise>:
 8009428:	4b02      	ldr	r3, [pc, #8]	; (8009434 <raise+0xc>)
 800942a:	4601      	mov	r1, r0
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	f7ff bfd3 	b.w	80093d8 <_raise_r>
 8009432:	bf00      	nop
 8009434:	20000208 	.word	0x20000208

08009438 <_kill_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d07      	ldr	r5, [pc, #28]	; (8009458 <_kill_r+0x20>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	4611      	mov	r1, r2
 8009444:	602b      	str	r3, [r5, #0]
 8009446:	f7fa ffdf 	bl	8004408 <_kill>
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	d102      	bne.n	8009454 <_kill_r+0x1c>
 800944e:	682b      	ldr	r3, [r5, #0]
 8009450:	b103      	cbz	r3, 8009454 <_kill_r+0x1c>
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	bd38      	pop	{r3, r4, r5, pc}
 8009456:	bf00      	nop
 8009458:	20000810 	.word	0x20000810

0800945c <_getpid_r>:
 800945c:	f7fa bfcc 	b.w	80043f8 <_getpid>

08009460 <__sread>:
 8009460:	b510      	push	{r4, lr}
 8009462:	460c      	mov	r4, r1
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	f000 f894 	bl	8009594 <_read_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	bfab      	itete	ge
 8009470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009472:	89a3      	ldrhlt	r3, [r4, #12]
 8009474:	181b      	addge	r3, r3, r0
 8009476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800947a:	bfac      	ite	ge
 800947c:	6563      	strge	r3, [r4, #84]	; 0x54
 800947e:	81a3      	strhlt	r3, [r4, #12]
 8009480:	bd10      	pop	{r4, pc}

08009482 <__swrite>:
 8009482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	461f      	mov	r7, r3
 8009488:	898b      	ldrh	r3, [r1, #12]
 800948a:	05db      	lsls	r3, r3, #23
 800948c:	4605      	mov	r5, r0
 800948e:	460c      	mov	r4, r1
 8009490:	4616      	mov	r6, r2
 8009492:	d505      	bpl.n	80094a0 <__swrite+0x1e>
 8009494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009498:	2302      	movs	r3, #2
 800949a:	2200      	movs	r2, #0
 800949c:	f000 f868 	bl	8009570 <_lseek_r>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094aa:	81a3      	strh	r3, [r4, #12]
 80094ac:	4632      	mov	r2, r6
 80094ae:	463b      	mov	r3, r7
 80094b0:	4628      	mov	r0, r5
 80094b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b6:	f000 b817 	b.w	80094e8 <_write_r>

080094ba <__sseek>:
 80094ba:	b510      	push	{r4, lr}
 80094bc:	460c      	mov	r4, r1
 80094be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c2:	f000 f855 	bl	8009570 <_lseek_r>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	bf15      	itete	ne
 80094cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094d6:	81a3      	strheq	r3, [r4, #12]
 80094d8:	bf18      	it	ne
 80094da:	81a3      	strhne	r3, [r4, #12]
 80094dc:	bd10      	pop	{r4, pc}

080094de <__sclose>:
 80094de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e2:	f000 b813 	b.w	800950c <_close_r>
	...

080094e8 <_write_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d07      	ldr	r5, [pc, #28]	; (8009508 <_write_r+0x20>)
 80094ec:	4604      	mov	r4, r0
 80094ee:	4608      	mov	r0, r1
 80094f0:	4611      	mov	r1, r2
 80094f2:	2200      	movs	r2, #0
 80094f4:	602a      	str	r2, [r5, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	f7fa ffbd 	bl	8004476 <_write>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_write_r+0x1e>
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	b103      	cbz	r3, 8009506 <_write_r+0x1e>
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	20000810 	.word	0x20000810

0800950c <_close_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d06      	ldr	r5, [pc, #24]	; (8009528 <_close_r+0x1c>)
 8009510:	2300      	movs	r3, #0
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	f7fa ffc9 	bl	80044ae <_close>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_close_r+0x1a>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_close_r+0x1a>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	20000810 	.word	0x20000810

0800952c <_fstat_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d07      	ldr	r5, [pc, #28]	; (800954c <_fstat_r+0x20>)
 8009530:	2300      	movs	r3, #0
 8009532:	4604      	mov	r4, r0
 8009534:	4608      	mov	r0, r1
 8009536:	4611      	mov	r1, r2
 8009538:	602b      	str	r3, [r5, #0]
 800953a:	f7fa ffc4 	bl	80044c6 <_fstat>
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	d102      	bne.n	8009548 <_fstat_r+0x1c>
 8009542:	682b      	ldr	r3, [r5, #0]
 8009544:	b103      	cbz	r3, 8009548 <_fstat_r+0x1c>
 8009546:	6023      	str	r3, [r4, #0]
 8009548:	bd38      	pop	{r3, r4, r5, pc}
 800954a:	bf00      	nop
 800954c:	20000810 	.word	0x20000810

08009550 <_isatty_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4d06      	ldr	r5, [pc, #24]	; (800956c <_isatty_r+0x1c>)
 8009554:	2300      	movs	r3, #0
 8009556:	4604      	mov	r4, r0
 8009558:	4608      	mov	r0, r1
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	f7fa ffc3 	bl	80044e6 <_isatty>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_isatty_r+0x1a>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_isatty_r+0x1a>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20000810 	.word	0x20000810

08009570 <_lseek_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4d07      	ldr	r5, [pc, #28]	; (8009590 <_lseek_r+0x20>)
 8009574:	4604      	mov	r4, r0
 8009576:	4608      	mov	r0, r1
 8009578:	4611      	mov	r1, r2
 800957a:	2200      	movs	r2, #0
 800957c:	602a      	str	r2, [r5, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	f7fa ffbc 	bl	80044fc <_lseek>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d102      	bne.n	800958e <_lseek_r+0x1e>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	b103      	cbz	r3, 800958e <_lseek_r+0x1e>
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	20000810 	.word	0x20000810

08009594 <_read_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d07      	ldr	r5, [pc, #28]	; (80095b4 <_read_r+0x20>)
 8009598:	4604      	mov	r4, r0
 800959a:	4608      	mov	r0, r1
 800959c:	4611      	mov	r1, r2
 800959e:	2200      	movs	r2, #0
 80095a0:	602a      	str	r2, [r5, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f7fa ff4a 	bl	800443c <_read>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_read_r+0x1e>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_read_r+0x1e>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	20000810 	.word	0x20000810

080095b8 <_init>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	bf00      	nop
 80095bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095be:	bc08      	pop	{r3}
 80095c0:	469e      	mov	lr, r3
 80095c2:	4770      	bx	lr

080095c4 <_fini>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	bf00      	nop
 80095c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ca:	bc08      	pop	{r3}
 80095cc:	469e      	mov	lr, r3
 80095ce:	4770      	bx	lr
