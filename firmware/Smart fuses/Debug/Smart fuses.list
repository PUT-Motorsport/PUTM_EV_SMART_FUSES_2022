
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002404  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080025c0  080025c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002600  08002600  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002600  08002600  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002600  08002600  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002608  08002608  00012608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800260c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002618  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002618  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0df  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db3  00000000  00000000  0002a11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002c878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8e2  00000000  00000000  0002d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b10b  00000000  00000000  00057a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001026d7  00000000  00000000  00062b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165234  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002518  00000000  00000000  00165284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000002fc  00000000  00000000  0016779c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080025a8 	.word	0x080025a8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080025a8 	.word	0x080025a8

080001fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN1_Init+0x60>)
 8000202:	4a17      	ldr	r2, [pc, #92]	; (8000260 <MX_CAN1_Init+0x64>)
 8000204:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <MX_CAN1_Init+0x60>)
 8000208:	2210      	movs	r2, #16
 800020a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN1_Init+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <MX_CAN1_Init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <MX_CAN1_Init+0x60>)
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN1_Init+0x60>)
 8000220:	2200      	movs	r2, #0
 8000222:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN1_Init+0x60>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN1_Init+0x60>)
 800022c:	2200      	movs	r2, #0
 800022e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN1_Init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN1_Init+0x60>)
 8000238:	2200      	movs	r2, #0
 800023a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN1_Init+0x60>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN1_Init+0x60>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN1_Init+0x60>)
 800024a:	f000 fd8b 	bl	8000d64 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000254:	f000 f9c8 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028
 8000260:	40006400 	.word	0x40006400

08000264 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <HAL_CAN_MspInit+0x80>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d129      	bne.n	80002da <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800028a:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 800028c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000290:	6593      	str	r3, [r2, #88]	; 0x58
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002bc:	2302      	movs	r3, #2
 80002be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c4:	2303      	movs	r3, #3
 80002c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002c8:	2309      	movs	r3, #9
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f000 ff27 	bl	8001128 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002da:	bf00      	nop
 80002dc:	3728      	adds	r7, #40	; 0x28
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40006400 	.word	0x40006400
 80002e8:	40021000 	.word	0x40021000

080002ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000302:	4b64      	ldr	r3, [pc, #400]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	4a63      	ldr	r2, [pc, #396]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030e:	4b61      	ldr	r3, [pc, #388]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	613b      	str	r3, [r7, #16]
 8000318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800031a:	4b5e      	ldr	r3, [pc, #376]	; (8000494 <MX_GPIO_Init+0x1a8>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	4a5d      	ldr	r2, [pc, #372]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000326:	4b5b      	ldr	r3, [pc, #364]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000332:	4b58      	ldr	r3, [pc, #352]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	4a57      	ldr	r2, [pc, #348]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033e:	4b55      	ldr	r3, [pc, #340]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034a:	4b52      	ldr	r3, [pc, #328]	; (8000494 <MX_GPIO_Init+0x1a8>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	4a51      	ldr	r2, [pc, #324]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000350:	f043 0302 	orr.w	r3, r3, #2
 8000354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000356:	4b4f      	ldr	r3, [pc, #316]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	f003 0302 	and.w	r3, r3, #2
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000362:	4b4c      	ldr	r3, [pc, #304]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	4a4b      	ldr	r2, [pc, #300]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000368:	f043 0308 	orr.w	r3, r3, #8
 800036c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036e:	4b49      	ldr	r3, [pc, #292]	; (8000494 <MX_GPIO_Init+0x1a8>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	f003 0308 	and.w	r3, r3, #8
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	210f      	movs	r1, #15
 800037e:	4846      	ldr	r0, [pc, #280]	; (8000498 <MX_GPIO_Init+0x1ac>)
 8000380:	f001 f864 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	211e      	movs	r1, #30
 8000388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038c:	f001 f85e 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000396:	4841      	ldr	r0, [pc, #260]	; (800049c <MX_GPIO_Init+0x1b0>)
 8000398:	f001 f858 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 800039c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80003a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003a2:	2303      	movs	r3, #3
 80003a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	4619      	mov	r1, r3
 80003b0:	4839      	ldr	r0, [pc, #228]	; (8000498 <MX_GPIO_Init+0x1ac>)
 80003b2:	f000 feb9 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80003b6:	230f      	movs	r3, #15
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	2301      	movs	r3, #1
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	2300      	movs	r3, #0
 80003c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	4619      	mov	r1, r3
 80003cc:	4832      	ldr	r0, [pc, #200]	; (8000498 <MX_GPIO_Init+0x1ac>)
 80003ce:	f000 feab 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80003d2:	f248 7301 	movw	r3, #34561	; 0x8701
 80003d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d8:	2303      	movs	r3, #3
 80003da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	4619      	mov	r1, r3
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ea:	f000 fe9d 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80003ee:	231e      	movs	r3, #30
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fa:	2300      	movs	r3, #0
 80003fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fe:	f107 0314 	add.w	r3, r7, #20
 8000402:	4619      	mov	r1, r3
 8000404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000408:	f000 fe8e 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800040c:	2357      	movs	r3, #87	; 0x57
 800040e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4619      	mov	r1, r3
 800041e:	481f      	ldr	r0, [pc, #124]	; (800049c <MX_GPIO_Init+0x1b0>)
 8000420:	f000 fe82 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000424:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000428:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800042a:	2303      	movs	r3, #3
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4619      	mov	r1, r3
 8000438:	4818      	ldr	r0, [pc, #96]	; (800049c <MX_GPIO_Init+0x1b0>)
 800043a:	f000 fe75 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800043e:	2304      	movs	r3, #4
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000442:	2303      	movs	r3, #3
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4619      	mov	r1, r3
 8000450:	4813      	ldr	r0, [pc, #76]	; (80004a0 <MX_GPIO_Init+0x1b4>)
 8000452:	f000 fe69 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000456:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	480b      	ldr	r0, [pc, #44]	; (800049c <MX_GPIO_Init+0x1b0>)
 8000470:	f000 fe5a 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000474:	2308      	movs	r3, #8
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000478:	2303      	movs	r3, #3
 800047a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4619      	mov	r1, r3
 8000486:	4807      	ldr	r0, [pc, #28]	; (80004a4 <MX_GPIO_Init+0x1b8>)
 8000488:	f000 fe4e 	bl	8001128 <HAL_GPIO_Init>

}
 800048c:	bf00      	nop
 800048e:	3728      	adds	r7, #40	; 0x28
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000
 8000498:	48000800 	.word	0x48000800
 800049c:	48000400 	.word	0x48000400
 80004a0:	48000c00 	.word	0x48000c00
 80004a4:	48001c00 	.word	0x48001c00

080004a8 <_Z10selectFusei>:
}

/*USER CODE BEGIN 4 */

void selectFuse(int num)
{
 80004a8:	b510      	push	{r4, lr}
 80004aa:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(FUSE0, (num == 1 ? RESET : SET));
 80004ac:	1e42      	subs	r2, r0, #1
 80004ae:	bf18      	it	ne
 80004b0:	2201      	movne	r2, #1
 80004b2:	2102      	movs	r1, #2
 80004b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b8:	f000 ffc8 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FUSE1, (num == 2 ? RESET : SET));
 80004bc:	1ea2      	subs	r2, r4, #2
 80004be:	bf18      	it	ne
 80004c0:	2201      	movne	r2, #1
 80004c2:	2104      	movs	r1, #4
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c8:	f000 ffc0 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FUSE2, (num == 3 ? RESET : SET));
 80004cc:	1ee2      	subs	r2, r4, #3
 80004ce:	bf18      	it	ne
 80004d0:	2201      	movne	r2, #1
 80004d2:	2108      	movs	r1, #8
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d8:	f000 ffb8 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FUSE3, (num == 4 ? RESET : SET));
 80004dc:	1f22      	subs	r2, r4, #4
 80004de:	bf18      	it	ne
 80004e0:	2201      	movne	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f000 ffb0 	bl	800144c <HAL_GPIO_WritePin>
}
 80004ec:	bd10      	pop	{r4, pc}

080004ee <_Z16deselectAllFusesv>:

void deselectAllFuses()
{
 80004ee:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FUSE0, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2102      	movs	r1, #2
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f000 ffa8 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FUSE1, SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2104      	movs	r1, #4
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f000 ffa2 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FUSE2, SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2108      	movs	r1, #8
 800050c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000510:	f000 ff9c 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FUSE3, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2110      	movs	r1, #16
 8000518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051c:	f000 ff96 	bl	800144c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
}
 8000520:	bd08      	pop	{r3, pc}
	...

08000524 <_Z14sendDataToFusehPhS_>:
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE));
	(*(uint8_t*) rx_data) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
}

void sendDataToFuse(uint8_t fuse, uint8_t *tx_data, uint8_t *rx_data)
{
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	460d      	mov	r5, r1
 8000528:	4616      	mov	r6, r2
	/// just check
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 800052a:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <_Z14sendDataToFusehPhS_+0x80>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000534:	d103      	bne.n	800053e <_Z14sendDataToFusehPhS_+0x1a>
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800053c:	601a      	str	r2, [r3, #0]

	selectFuse(fuse);
 800053e:	f7ff ffb3 	bl	80004a8 <_Z10selectFusei>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8000542:	2100      	movs	r1, #0
 8000544:	4608      	mov	r0, r1
			(*(uint8_t*) rx_data) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
			rx_data++;
			rx++;
		}

		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000546:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <_Z14sendDataToFusehPhS_+0x80>)
 8000548:	e00b      	b.n	8000562 <_Z14sendDataToFusehPhS_+0x3e>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 800054a:	6813      	ldr	r3, [r2, #0]
 800054c:	689c      	ldr	r4, [r3, #8]
 800054e:	f014 0f01 	tst.w	r4, #1
 8000552:	d001      	beq.n	8000558 <_Z14sendDataToFusehPhS_+0x34>
 8000554:	2902      	cmp	r1, #2
 8000556:	d90f      	bls.n	8000578 <_Z14sendDataToFusehPhS_+0x54>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000558:	6813      	ldr	r3, [r2, #0]
 800055a:	689c      	ldr	r4, [r3, #8]
 800055c:	f014 0f02 	tst.w	r4, #2
 8000560:	d116      	bne.n	8000590 <_Z14sendDataToFusehPhS_+0x6c>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8000562:	2802      	cmp	r0, #2
 8000564:	d9f1      	bls.n	800054a <_Z14sendDataToFusehPhS_+0x26>
 8000566:	2902      	cmp	r1, #2
 8000568:	d818      	bhi.n	800059c <_Z14sendDataToFusehPhS_+0x78>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 800056a:	6813      	ldr	r3, [r2, #0]
 800056c:	689c      	ldr	r4, [r3, #8]
 800056e:	f014 0f01 	tst.w	r4, #1
 8000572:	d101      	bne.n	8000578 <_Z14sendDataToFusehPhS_+0x54>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	e7f4      	b.n	8000562 <_Z14sendDataToFusehPhS_+0x3e>
			(*(uint8_t*) rx_data) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 8000578:	7b1b      	ldrb	r3, [r3, #12]
 800057a:	f806 3b01 	strb.w	r3, [r6], #1
			rx++;
 800057e:	3101      	adds	r1, #1
 8000580:	b2c9      	uxtb	r1, r1
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000582:	6813      	ldr	r3, [r2, #0]
 8000584:	689c      	ldr	r4, [r3, #8]
 8000586:	f014 0f02 	tst.w	r4, #2
 800058a:	d0ea      	beq.n	8000562 <_Z14sendDataToFusehPhS_+0x3e>
 800058c:	2802      	cmp	r0, #2
 800058e:	d8e8      	bhi.n	8000562 <_Z14sendDataToFusehPhS_+0x3e>
		{
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = (*tx_data);
 8000590:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000594:	731c      	strb	r4, [r3, #12]
			tx_data++;
			tx++;
 8000596:	3001      	adds	r0, #1
 8000598:	b2c0      	uxtb	r0, r0
 800059a:	e7e2      	b.n	8000562 <_Z14sendDataToFusehPhS_+0x3e>
		}
	}
	deselectAllFuses();
 800059c:	f7ff ffa7 	bl	80004ee <_Z16deselectAllFusesv>
}
 80005a0:	bd70      	pop	{r4, r5, r6, pc}
 80005a2:	bf00      	nop
 80005a4:	20000058 	.word	0x20000058

080005a8 <_Z18calculateParityBitPh>:

void calculateParityBit(uint8_t* x)
{
 80005a8:	b530      	push	{r4, r5, lr}
	///clear parity bit
	*(x + 2) &= ~(1 << 0);
 80005aa:	7884      	ldrb	r4, [r0, #2]
 80005ac:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
 80005b0:	7084      	strb	r4, [r0, #2]

	uint8_t num_of_bits = 0;
	for (int i = 0; i < 3; i++)
 80005b2:	f100 3eff 	add.w	lr, r0, #4294967295
 80005b6:	1c85      	adds	r5, r0, #2
	uint8_t num_of_bits = 0;
 80005b8:	2200      	movs	r2, #0
	{
		uint8_t bit = *(x + i);
 80005ba:	f81e cf01 	ldrb.w	ip, [lr, #1]!
		for (int j = 0; j < 8; j++)
 80005be:	2300      	movs	r3, #0
		{
			if (bit & (1 << j)) num_of_bits++;
 80005c0:	fa4c f103 	asr.w	r1, ip, r3
 80005c4:	f011 0f01 	tst.w	r1, #1
 80005c8:	bf1c      	itt	ne
 80005ca:	3201      	addne	r2, #1
 80005cc:	b2d2      	uxtbne	r2, r2
		for (int j = 0; j < 8; j++)
 80005ce:	3301      	adds	r3, #1
 80005d0:	2b08      	cmp	r3, #8
 80005d2:	d1f5      	bne.n	80005c0 <_Z18calculateParityBitPh+0x18>
	for (int i = 0; i < 3; i++)
 80005d4:	45ae      	cmp	lr, r5
 80005d6:	d1f0      	bne.n	80005ba <_Z18calculateParityBitPh+0x12>
		}
	}
	if(num_of_bits % 2 == 0 )
 80005d8:	f012 0f01 	tst.w	r2, #1
	{
		*(x + 2) |= (1 << 0);
 80005dc:	bf04      	itt	eq
 80005de:	f044 0401 	orreq.w	r4, r4, #1
 80005e2:	7084      	strbeq	r4, [r0, #2]
	}
}
 80005e4:	bd30      	pop	{r4, r5, pc}
	...

080005e8 <Error_Handler>:
/**
 *@brief  This function is executed in case of error occurrence.
 *@retval None
 */
void Error_Handler(void)
{
 80005e8:	b508      	push	{r3, lr}
	/*USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_OK, SET);
 80005ea:	4c0b      	ldr	r4, [pc, #44]	; (8000618 <Error_Handler+0x30>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	4611      	mov	r1, r2
 80005f0:	4620      	mov	r0, r4
 80005f2:	f000 ff2b 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING1, SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2102      	movs	r1, #2
 80005fa:	4620      	mov	r0, r4
 80005fc:	f000 ff26 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING2, SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2104      	movs	r1, #4
 8000604:	4620      	mov	r0, r4
 8000606:	f000 ff21 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2108      	movs	r1, #8
 800060e:	4620      	mov	r0, r4
 8000610:	f000 ff1c 	bl	800144c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
	__disable_irq();
	while (1) {}
 8000616:	e7fe      	b.n	8000616 <Error_Handler+0x2e>
 8000618:	48000800 	.word	0x48000800

0800061c <_Z18SystemClock_Configv>:
{
 800061c:	b500      	push	{lr}
 800061e:	b099      	sub	sp, #100	; 0x64
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000620:	2248      	movs	r2, #72	; 0x48
 8000622:	2100      	movs	r1, #0
 8000624:	a806      	add	r0, sp, #24
 8000626:	f001 ffb7 	bl	8002598 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800062a:	2300      	movs	r3, #0
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	9303      	str	r3, [sp, #12]
 8000632:	9304      	str	r3, [sp, #16]
 8000634:	9305      	str	r3, [sp, #20]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000636:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063a:	f000 ff3f 	bl	80014bc <HAL_PWREx_ControlVoltageScaling>
 800063e:	b9d0      	cbnz	r0, 8000676 <_Z18SystemClock_Configv+0x5a>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000640:	2310      	movs	r3, #16
 8000642:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800064c:	2260      	movs	r2, #96	; 0x60
 800064e:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000650:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	a806      	add	r0, sp, #24
 8000654:	f000 ffd6 	bl	8001604 <HAL_RCC_OscConfig>
 8000658:	b978      	cbnz	r0, 800067a <_Z18SystemClock_Configv+0x5e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800065a:	230f      	movs	r3, #15
 800065c:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800065e:	2100      	movs	r1, #0
 8000660:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	9103      	str	r1, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	9104      	str	r1, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	9105      	str	r1, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	a801      	add	r0, sp, #4
 800066a:	f001 fc53 	bl	8001f14 <HAL_RCC_ClockConfig>
 800066e:	b930      	cbnz	r0, 800067e <_Z18SystemClock_Configv+0x62>
}
 8000670:	b019      	add	sp, #100	; 0x64
 8000672:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8000676:	f7ff ffb7 	bl	80005e8 <Error_Handler>
		Error_Handler();
 800067a:	f7ff ffb5 	bl	80005e8 <Error_Handler>
		Error_Handler();
 800067e:	f7ff ffb3 	bl	80005e8 <Error_Handler>
	...

08000684 <main>:
{
 8000684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000688:	b085      	sub	sp, #20
	HAL_Init();
 800068a:	f000 fad2 	bl	8000c32 <HAL_Init>
	SystemClock_Config();
 800068e:	f7ff ffc5 	bl	800061c <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8000692:	f7ff fe2b 	bl	80002ec <MX_GPIO_Init>
	MX_CAN1_Init();
 8000696:	f7ff fdb1 	bl	80001fc <MX_CAN1_Init>
	MX_SPI1_Init();
 800069a:	f000 f997 	bl	80009cc <MX_SPI1_Init>
	HAL_GPIO_WritePin(LED_OK, RESET);
 800069e:	4cc2      	ldr	r4, [pc, #776]	; (80009a8 <main+0x324>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	2101      	movs	r1, #1
 80006a4:	4620      	mov	r0, r4
 80006a6:	f000 fed1 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING1, SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2102      	movs	r1, #2
 80006ae:	4620      	mov	r0, r4
 80006b0:	f000 fecc 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING2, SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2104      	movs	r1, #4
 80006b8:	4620      	mov	r0, r4
 80006ba:	f000 fec7 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR, SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2108      	movs	r1, #8
 80006c2:	4620      	mov	r0, r4
 80006c4:	f000 fec2 	bl	800144c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80006c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006cc:	f000 fb26 	bl	8000d1c <HAL_Delay>
	MODIFY(tx_data, 0, 0, 0);
 80006d0:	2400      	movs	r4, #0
 80006d2:	f88d 400c 	strb.w	r4, [sp, #12]
 80006d6:	f88d 400d 	strb.w	r4, [sp, #13]
 80006da:	f88d 400e 	strb.w	r4, [sp, #14]
	calculateParityBit(tx_data);
 80006de:	a803      	add	r0, sp, #12
 80006e0:	f7ff ff62 	bl	80005a8 <_Z18calculateParityBitPh>
	sendDataToFuse(fuse__, tx_data, rx_data);
 80006e4:	aa02      	add	r2, sp, #8
 80006e6:	a903      	add	r1, sp, #12
 80006e8:	2002      	movs	r0, #2
 80006ea:	f7ff ff1b 	bl	8000524 <_Z14sendDataToFusehPhS_>
	MODIFY(tx_data, WRITE_RAM(0x14), 1 << 6, 0);
 80006ee:	2514      	movs	r5, #20
 80006f0:	f88d 500c 	strb.w	r5, [sp, #12]
 80006f4:	2340      	movs	r3, #64	; 0x40
 80006f6:	f88d 300d 	strb.w	r3, [sp, #13]
 80006fa:	f88d 400e 	strb.w	r4, [sp, #14]
	calculateParityBit(tx_data);
 80006fe:	a803      	add	r0, sp, #12
 8000700:	f7ff ff52 	bl	80005a8 <_Z18calculateParityBitPh>
	sendDataToFuse(fuse__, tx_data, rx_data);
 8000704:	aa02      	add	r2, sp, #8
 8000706:	a903      	add	r1, sp, #12
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff ff0b 	bl	8000524 <_Z14sendDataToFusehPhS_>
	MODIFY(tx_data, WRITE_RAM(0x14), 1 << 3, 0);
 800070e:	f88d 500c 	strb.w	r5, [sp, #12]
 8000712:	2308      	movs	r3, #8
 8000714:	f88d 300d 	strb.w	r3, [sp, #13]
 8000718:	f88d 400e 	strb.w	r4, [sp, #14]
	calculateParityBit(tx_data);
 800071c:	a803      	add	r0, sp, #12
 800071e:	f7ff ff43 	bl	80005a8 <_Z18calculateParityBitPh>
	sendDataToFuse(fuse__, tx_data, rx_data);
 8000722:	aa02      	add	r2, sp, #8
 8000724:	a903      	add	r1, sp, #12
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff fefc 	bl	8000524 <_Z14sendDataToFusehPhS_>
	MODIFY(tx_data, READ_RAM(0x13), 0, 0);
 800072c:	2353      	movs	r3, #83	; 0x53
 800072e:	f88d 300c 	strb.w	r3, [sp, #12]
 8000732:	f88d 400d 	strb.w	r4, [sp, #13]
 8000736:	f88d 400e 	strb.w	r4, [sp, #14]
	calculateParityBit(tx_data);
 800073a:	a803      	add	r0, sp, #12
 800073c:	f7ff ff34 	bl	80005a8 <_Z18calculateParityBitPh>
	sendDataToFuse(fuse__, tx_data, rx_data);
 8000740:	aa02      	add	r2, sp, #8
 8000742:	a903      	add	r1, sp, #12
 8000744:	2002      	movs	r0, #2
 8000746:	f7ff feed 	bl	8000524 <_Z14sendDataToFusehPhS_>
	uint8_t toggle = (rx_data[2] & (1 << 1)) >> 1;
 800074a:	f89d 700a 	ldrb.w	r7, [sp, #10]
 800074e:	f3c7 0740 	ubfx	r7, r7, #1, #1
	fuse_watch_dog.restart();
 8000752:	4896      	ldr	r0, [pc, #600]	; (80009ac <main+0x328>)
 8000754:	f000 fa3e 	bl	8000bd4 <_ZN5Timer7restartEv>
	fuses_cotrol.restart();
 8000758:	4895      	ldr	r0, [pc, #596]	; (80009b0 <main+0x32c>)
 800075a:	f000 fa3b 	bl	8000bd4 <_ZN5Timer7restartEv>
	bool toggle_fuses = true;
 800075e:	f04f 0901 	mov.w	r9, #1
		if(fuses_cotrol.getPassedTime() >= 1000)
 8000762:	f8df 824c 	ldr.w	r8, [pc, #588]	; 80009b0 <main+0x32c>
				sendDataToFuse(fuse__, tx_data, rx_data);
 8000766:	2602      	movs	r6, #2
 8000768:	e0e3      	b.n	8000932 <main+0x2ae>
			if(toggle_fuses)
 800076a:	f1b9 0f00 	cmp.w	r9, #0
 800076e:	d051      	beq.n	8000814 <main+0x190>
				MODIFY(tx_data, READ_RAM(0x13), 0, 0)
 8000770:	2353      	movs	r3, #83	; 0x53
 8000772:	f88d 300c 	strb.w	r3, [sp, #12]
 8000776:	f88d 400d 	strb.w	r4, [sp, #13]
 800077a:	f88d 400e 	strb.w	r4, [sp, #14]
				calculateParityBit(tx_data);
 800077e:	a803      	add	r0, sp, #12
 8000780:	f7ff ff12 	bl	80005a8 <_Z18calculateParityBitPh>
				sendDataToFuse(fuse__, tx_data, rx_data);
 8000784:	aa02      	add	r2, sp, #8
 8000786:	a903      	add	r1, sp, #12
 8000788:	4630      	mov	r0, r6
 800078a:	f7ff fecb 	bl	8000524 <_Z14sendDataToFusehPhS_>
				MODIFY(tx_data, WRITE_RAM(0x13), rx_data[1] |= 0b00111111, rx_data[2]);
 800078e:	2313      	movs	r3, #19
 8000790:	f88d 300c 	strb.w	r3, [sp, #12]
 8000794:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000798:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800079c:	f88d 3009 	strb.w	r3, [sp, #9]
 80007a0:	f88d 300d 	strb.w	r3, [sp, #13]
 80007a4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80007a8:	f88d 300e 	strb.w	r3, [sp, #14]
				calculateParityBit(tx_data);
 80007ac:	a803      	add	r0, sp, #12
 80007ae:	f7ff fefb 	bl	80005a8 <_Z18calculateParityBitPh>
				sendDataToFuse(fuse__, tx_data, rx_data);
 80007b2:	aa02      	add	r2, sp, #8
 80007b4:	a903      	add	r1, sp, #12
 80007b6:	4630      	mov	r0, r6
 80007b8:	f7ff feb4 	bl	8000524 <_Z14sendDataToFusehPhS_>
				HAL_GPIO_WritePin(LED_WARNING2, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2104      	movs	r1, #4
 80007c0:	4879      	ldr	r0, [pc, #484]	; (80009a8 <main+0x324>)
 80007c2:	f000 fe43 	bl	800144c <HAL_GPIO_WritePin>
				fuses_cotrol.restart();
 80007c6:	4640      	mov	r0, r8
 80007c8:	f000 fa04 	bl	8000bd4 <_ZN5Timer7restartEv>
				toggle_fuses = false;
 80007cc:	46a1      	mov	r9, r4
			for(int i = 0; i < 6; i++)
 80007ce:	2500      	movs	r5, #0
				MODIFY(tx_data, READ_RAM(0x20 + i), 0, 0)
 80007d0:	f105 0320 	add.w	r3, r5, #32
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	f88d 300c 	strb.w	r3, [sp, #12]
 80007dc:	f88d 400d 	strb.w	r4, [sp, #13]
 80007e0:	f88d 400e 	strb.w	r4, [sp, #14]
				calculateParityBit(tx_data);
 80007e4:	a803      	add	r0, sp, #12
 80007e6:	f7ff fedf 	bl	80005a8 <_Z18calculateParityBitPh>
				sendDataToFuse(fuse__, tx_data, rx_data);
 80007ea:	aa02      	add	r2, sp, #8
 80007ec:	a903      	add	r1, sp, #12
 80007ee:	4630      	mov	r0, r6
 80007f0:	f7ff fe98 	bl	8000524 <_Z14sendDataToFusehPhS_>
				kek[i] = rx_data[2];
 80007f4:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80007f8:	f105 0310 	add.w	r3, r5, #16
 80007fc:	446b      	add	r3, sp
 80007fe:	f803 2c10 	strb.w	r2, [r3, #-16]
			for(int i = 0; i < 6; i++)
 8000802:	3501      	adds	r5, #1
 8000804:	2d06      	cmp	r5, #6
 8000806:	d1e3      	bne.n	80007d0 <main+0x14c>
			kek[0] = kek[0];
 8000808:	f89d 3000 	ldrb.w	r3, [sp]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	f88d 3000 	strb.w	r3, [sp]
 8000812:	e095      	b.n	8000940 <main+0x2bc>
				MODIFY(tx_data, READ_RAM(0x13), 0, 0)
 8000814:	2353      	movs	r3, #83	; 0x53
 8000816:	f88d 300c 	strb.w	r3, [sp, #12]
 800081a:	f88d 400d 	strb.w	r4, [sp, #13]
 800081e:	f88d 400e 	strb.w	r4, [sp, #14]
				calculateParityBit(tx_data);
 8000822:	a803      	add	r0, sp, #12
 8000824:	f7ff fec0 	bl	80005a8 <_Z18calculateParityBitPh>
				sendDataToFuse(fuse__, tx_data, rx_data);
 8000828:	aa02      	add	r2, sp, #8
 800082a:	a903      	add	r1, sp, #12
 800082c:	4630      	mov	r0, r6
 800082e:	f7ff fe79 	bl	8000524 <_Z14sendDataToFusehPhS_>
				MODIFY(tx_data, WRITE_RAM(0x13), rx_data[1] &= ~(0b00111111), rx_data[2]);
 8000832:	2313      	movs	r3, #19
 8000834:	f88d 300c 	strb.w	r3, [sp, #12]
 8000838:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800083c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000840:	f88d 3009 	strb.w	r3, [sp, #9]
 8000844:	f88d 300d 	strb.w	r3, [sp, #13]
 8000848:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800084c:	f88d 300e 	strb.w	r3, [sp, #14]
				calculateParityBit(tx_data);
 8000850:	a803      	add	r0, sp, #12
 8000852:	f7ff fea9 	bl	80005a8 <_Z18calculateParityBitPh>
				sendDataToFuse(fuse__, tx_data, rx_data);
 8000856:	aa02      	add	r2, sp, #8
 8000858:	a903      	add	r1, sp, #12
 800085a:	4630      	mov	r0, r6
 800085c:	f7ff fe62 	bl	8000524 <_Z14sendDataToFusehPhS_>
				HAL_GPIO_WritePin(LED_WARNING2, RESET);
 8000860:	4622      	mov	r2, r4
 8000862:	2104      	movs	r1, #4
 8000864:	4850      	ldr	r0, [pc, #320]	; (80009a8 <main+0x324>)
 8000866:	f000 fdf1 	bl	800144c <HAL_GPIO_WritePin>
				fuses_cotrol.restart();
 800086a:	4640      	mov	r0, r8
 800086c:	f000 f9b2 	bl	8000bd4 <_ZN5Timer7restartEv>
				toggle_fuses = true;
 8000870:	f04f 0901 	mov.w	r9, #1
 8000874:	e7ab      	b.n	80007ce <main+0x14a>
		if(toggle == 1 && fuse_watch_dog.getPassedTime() >= 40)
 8000876:	484d      	ldr	r0, [pc, #308]	; (80009ac <main+0x328>)
 8000878:	f000 f9a5 	bl	8000bc6 <_ZN5Timer13getPassedTimeEv>
 800087c:	2827      	cmp	r0, #39	; 0x27
 800087e:	d961      	bls.n	8000944 <main+0x2c0>
			MODIFY(tx_data, READ_RAM(0x13), 0, 0)
 8000880:	2353      	movs	r3, #83	; 0x53
 8000882:	f88d 300c 	strb.w	r3, [sp, #12]
 8000886:	f88d 400d 	strb.w	r4, [sp, #13]
 800088a:	f88d 400e 	strb.w	r4, [sp, #14]
			calculateParityBit(tx_data);
 800088e:	a803      	add	r0, sp, #12
 8000890:	f7ff fe8a 	bl	80005a8 <_Z18calculateParityBitPh>
			sendDataToFuse(fuse__, tx_data, rx_data);
 8000894:	aa02      	add	r2, sp, #8
 8000896:	a903      	add	r1, sp, #12
 8000898:	4630      	mov	r0, r6
 800089a:	f7ff fe43 	bl	8000524 <_Z14sendDataToFusehPhS_>
			MODIFY(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] &= ~(1 << 1));
 800089e:	2313      	movs	r3, #19
 80008a0:	f88d 300c 	strb.w	r3, [sp, #12]
 80008a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80008a8:	f88d 300d 	strb.w	r3, [sp, #13]
 80008ac:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80008b0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80008b4:	f88d 300a 	strb.w	r3, [sp, #10]
 80008b8:	f88d 300e 	strb.w	r3, [sp, #14]
			calculateParityBit(tx_data);
 80008bc:	a803      	add	r0, sp, #12
 80008be:	f7ff fe73 	bl	80005a8 <_Z18calculateParityBitPh>
			sendDataToFuse(fuse__, tx_data, rx_data);
 80008c2:	aa02      	add	r2, sp, #8
 80008c4:	a903      	add	r1, sp, #12
 80008c6:	4630      	mov	r0, r6
 80008c8:	f7ff fe2c 	bl	8000524 <_Z14sendDataToFusehPhS_>
			fuse_watch_dog.restart();
 80008cc:	4837      	ldr	r0, [pc, #220]	; (80009ac <main+0x328>)
 80008ce:	f000 f981 	bl	8000bd4 <_ZN5Timer7restartEv>
			toggle = 0;
 80008d2:	4627      	mov	r7, r4
 80008d4:	e03b      	b.n	800094e <main+0x2ca>
			MODIFY(tx_data, READ_RAM(0x13), 0, 0)
 80008d6:	2353      	movs	r3, #83	; 0x53
 80008d8:	f88d 300c 	strb.w	r3, [sp, #12]
 80008dc:	f88d 400d 	strb.w	r4, [sp, #13]
 80008e0:	f88d 400e 	strb.w	r4, [sp, #14]
			calculateParityBit(tx_data);
 80008e4:	a803      	add	r0, sp, #12
 80008e6:	f7ff fe5f 	bl	80005a8 <_Z18calculateParityBitPh>
			sendDataToFuse(fuse__, tx_data, rx_data);
 80008ea:	aa02      	add	r2, sp, #8
 80008ec:	a903      	add	r1, sp, #12
 80008ee:	4630      	mov	r0, r6
 80008f0:	f7ff fe18 	bl	8000524 <_Z14sendDataToFusehPhS_>
			MODIFY(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] | 1 << 1);
 80008f4:	2313      	movs	r3, #19
 80008f6:	f88d 300c 	strb.w	r3, [sp, #12]
 80008fa:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80008fe:	f88d 300d 	strb.w	r3, [sp, #13]
 8000902:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8000906:	f043 0302 	orr.w	r3, r3, #2
 800090a:	f88d 300e 	strb.w	r3, [sp, #14]
			calculateParityBit(tx_data);
 800090e:	a803      	add	r0, sp, #12
 8000910:	f7ff fe4a 	bl	80005a8 <_Z18calculateParityBitPh>
			sendDataToFuse(fuse__, tx_data, rx_data);
 8000914:	aa02      	add	r2, sp, #8
 8000916:	a903      	add	r1, sp, #12
 8000918:	4630      	mov	r0, r6
 800091a:	f7ff fe03 	bl	8000524 <_Z14sendDataToFusehPhS_>
			fuse_watch_dog.restart();
 800091e:	4823      	ldr	r0, [pc, #140]	; (80009ac <main+0x328>)
 8000920:	f000 f958 	bl	8000bd4 <_ZN5Timer7restartEv>
			toggle = 1;
 8000924:	2701      	movs	r7, #1
 8000926:	e012      	b.n	800094e <main+0x2ca>
			(rx_data[0] & (1 << 5 | 1 << 4 | 1 << 3 | 1 << 2 | 1 << 1))) HAL_GPIO_WritePin(LED_WARNING1, RESET);
 8000928:	4622      	mov	r2, r4
 800092a:	4631      	mov	r1, r6
 800092c:	481e      	ldr	r0, [pc, #120]	; (80009a8 <main+0x324>)
 800092e:	f000 fd8d 	bl	800144c <HAL_GPIO_WritePin>
		if(fuses_cotrol.getPassedTime() >= 1000)
 8000932:	4640      	mov	r0, r8
 8000934:	f000 f947 	bl	8000bc6 <_ZN5Timer13getPassedTimeEv>
 8000938:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800093c:	f4bf af15 	bcs.w	800076a <main+0xe6>
		if(toggle == 1 && fuse_watch_dog.getPassedTime() >= 40)
 8000940:	2f00      	cmp	r7, #0
 8000942:	d198      	bne.n	8000876 <main+0x1f2>
		else if(fuse_watch_dog.getPassedTime() >= 40)
 8000944:	4819      	ldr	r0, [pc, #100]	; (80009ac <main+0x328>)
 8000946:	f000 f93e 	bl	8000bc6 <_ZN5Timer13getPassedTimeEv>
 800094a:	2827      	cmp	r0, #39	; 0x27
 800094c:	d8c3      	bhi.n	80008d6 <main+0x252>
		MODIFY(tx_data, READ_RAM(0x13), 0, 0);
 800094e:	2353      	movs	r3, #83	; 0x53
 8000950:	f88d 300c 	strb.w	r3, [sp, #12]
 8000954:	f88d 400d 	strb.w	r4, [sp, #13]
 8000958:	f88d 400e 	strb.w	r4, [sp, #14]
		calculateParityBit(tx_data);
 800095c:	a803      	add	r0, sp, #12
 800095e:	f7ff fe23 	bl	80005a8 <_Z18calculateParityBitPh>
		sendDataToFuse(fuse__, tx_data, rx_data);
 8000962:	aa02      	add	r2, sp, #8
 8000964:	a903      	add	r1, sp, #12
 8000966:	4630      	mov	r0, r6
 8000968:	f7ff fddc 	bl	8000524 <_Z14sendDataToFusehPhS_>
		MODIFY(tx_data, READ_RAM(0x14), 0, 0);
 800096c:	2354      	movs	r3, #84	; 0x54
 800096e:	f88d 300c 	strb.w	r3, [sp, #12]
 8000972:	f88d 400d 	strb.w	r4, [sp, #13]
 8000976:	f88d 400e 	strb.w	r4, [sp, #14]
		calculateParityBit(tx_data);
 800097a:	a803      	add	r0, sp, #12
 800097c:	f7ff fe14 	bl	80005a8 <_Z18calculateParityBitPh>
		sendDataToFuse(fuse__, tx_data, rx_data);
 8000980:	aa02      	add	r2, sp, #8
 8000982:	a903      	add	r1, sp, #12
 8000984:	4630      	mov	r0, r6
 8000986:	f7ff fdcd 	bl	8000524 <_Z14sendDataToFusehPhS_>
		if (!(rx_data[0] & (1 << 7)) ||
 800098a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800098e:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	dac8      	bge.n	8000928 <main+0x2a4>
 8000996:	f012 0f3e 	tst.w	r2, #62	; 0x3e
 800099a:	d1c5      	bne.n	8000928 <main+0x2a4>
		else HAL_GPIO_WritePin(LED_WARNING1, SET);
 800099c:	2201      	movs	r2, #1
 800099e:	4631      	mov	r1, r6
 80009a0:	4801      	ldr	r0, [pc, #4]	; (80009a8 <main+0x324>)
 80009a2:	f000 fd53 	bl	800144c <HAL_GPIO_WritePin>
 80009a6:	e7c4      	b.n	8000932 <main+0x2ae>
 80009a8:	48000800 	.word	0x48000800
 80009ac:	20000050 	.word	0x20000050
 80009b0:	20000054 	.word	0x20000054

080009b4 <_GLOBAL__sub_I_fuse_watch_dog>:

	/*USER CODE END Error_Handler_Debug */
}
 80009b4:	b508      	push	{r3, lr}
Timer fuse_watch_dog;
 80009b6:	4803      	ldr	r0, [pc, #12]	; (80009c4 <_GLOBAL__sub_I_fuse_watch_dog+0x10>)
 80009b8:	f000 f8fe 	bl	8000bb8 <_ZN5TimerC1Ev>
Timer fuses_cotrol;
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <_GLOBAL__sub_I_fuse_watch_dog+0x14>)
 80009be:	f000 f8fb 	bl	8000bb8 <_ZN5TimerC1Ev>
}
 80009c2:	bd08      	pop	{r3, pc}
 80009c4:	20000050 	.word	0x20000050
 80009c8:	20000054 	.word	0x20000054

080009cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009d0:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <MX_SPI1_Init+0xa0>)
 80009d2:	4a27      	ldr	r2, [pc, #156]	; (8000a70 <MX_SPI1_Init+0xa4>)
 80009d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d6:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <MX_SPI1_Init+0xa0>)
 80009d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009de:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MX_SPI1_Init+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e4:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_SPI1_Init+0xa0>)
 80009e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_SPI1_Init+0xa0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_SPI1_Init+0xa0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_SPI1_Init+0xa0>)
 80009fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a02:	2218      	movs	r2, #24
 8000a04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a2a:	4810      	ldr	r0, [pc, #64]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a2c:	f001 fcec 	bl	8002408 <HAL_SPI_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f7ff fdd7 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a48:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a54:	2b40      	cmp	r3, #64	; 0x40
 8000a56:	d007      	beq.n	8000a68 <MX_SPI1_Init+0x9c>
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <MX_SPI1_Init+0xa0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a66:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000058 	.word	0x20000058
 8000a70:	40013000 	.word	0x40013000

08000a74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_SPI_MspInit+0x7c>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d128      	bne.n	8000ae8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_SPI_MspInit+0x80>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <HAL_SPI_MspInit+0x80>)
 8000a9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_SPI_MspInit+0x80>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_SPI_MspInit+0x80>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_SPI_MspInit+0x80>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_SPI_MspInit+0x80>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ac6:	23e0      	movs	r3, #224	; 0xe0
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f000 fb20 	bl	8001128 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40013000 	.word	0x40013000
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6593      	str	r3, [r2, #88]	; 0x58
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f8a6 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	4604      	mov	r4, r0
{
	this->start_time = HAL_GetTick();
 8000bbc:	f000 f8a2 	bl	8000d04 <HAL_GetTick>
 8000bc0:	6020      	str	r0, [r4, #0]
}
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	bd10      	pop	{r4, pc}

08000bc6 <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 8000bc6:	b510      	push	{r4, lr}
 8000bc8:	4604      	mov	r4, r0
	return HAL_GetTick() - this->start_time;
 8000bca:	f000 f89b 	bl	8000d04 <HAL_GetTick>
 8000bce:	6823      	ldr	r3, [r4, #0]
}
 8000bd0:	1ac0      	subs	r0, r0, r3
 8000bd2:	bd10      	pop	{r4, pc}

08000bd4 <_ZN5Timer7restartEv>:

void Timer::restart()
{
 8000bd4:	b510      	push	{r4, lr}
 8000bd6:	4604      	mov	r4, r0
	this->start_time = HAL_GetTick();
 8000bd8:	f000 f894 	bl	8000d04 <HAL_GetTick>
 8000bdc:	6020      	str	r0, [r4, #0]
}
 8000bde:	bd10      	pop	{r4, pc}

08000be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be4:	f7ff ffd6 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f001 fc9f 	bl	8002550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c12:	f7ff fd37 	bl	8000684 <main>

08000c16 <LoopForever>:

LoopForever:
    b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c24:	0800260c 	.word	0x0800260c
  ldr r2, =_sbss
 8000c28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c2c:	200000c0 	.word	0x200000c0

08000c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_2_IRQHandler>

08000c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 fa3f 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	200f      	movs	r0, #15
 8000c44:	f000 f80e 	bl	8000c64 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	e001      	b.n	8000c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c54:	f7ff ff50 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d023      	beq.n	8000cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_InitTick+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fa3d 	bl	800110e <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10f      	bne.n	8000cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d809      	bhi.n	8000cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 fa15 	bl	80010d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_InitTick+0x74>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e007      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e004      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e001      	b.n	8000cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200000bc 	.word	0x200000bc

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000bc 	.word	0x200000bc

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008

08000d64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e0ed      	b.n	8000f52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fa6e 	bl	8000264 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 0201 	orr.w	r2, r2, #1
 8000d96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d98:	f7ff ffb4 	bl	8000d04 <HAL_GetTick>
 8000d9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d9e:	e012      	b.n	8000dc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000da0:	f7ff ffb0 	bl	8000d04 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b0a      	cmp	r3, #10
 8000dac:	d90b      	bls.n	8000dc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2205      	movs	r2, #5
 8000dbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e0c5      	b.n	8000f52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0e5      	beq.n	8000da0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0202 	bic.w	r2, r2, #2
 8000de2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000de4:	f7ff ff8e 	bl	8000d04 <HAL_GetTick>
 8000de8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dea:	e012      	b.n	8000e12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dec:	f7ff ff8a 	bl	8000d04 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b0a      	cmp	r3, #10
 8000df8:	d90b      	bls.n	8000e12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2205      	movs	r2, #5
 8000e0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e09f      	b.n	8000f52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1e5      	bne.n	8000dec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7e1b      	ldrb	r3, [r3, #24]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d108      	bne.n	8000e3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e007      	b.n	8000e4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7e5b      	ldrb	r3, [r3, #25]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d108      	bne.n	8000e64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e007      	b.n	8000e74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7e9b      	ldrb	r3, [r3, #26]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d108      	bne.n	8000e8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0220 	orr.w	r2, r2, #32
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e007      	b.n	8000e9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0220 	bic.w	r2, r2, #32
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7edb      	ldrb	r3, [r3, #27]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d108      	bne.n	8000eb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0210 	bic.w	r2, r2, #16
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e007      	b.n	8000ec8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0210 	orr.w	r2, r2, #16
 8000ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7f1b      	ldrb	r3, [r3, #28]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d108      	bne.n	8000ee2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0208 	orr.w	r2, r2, #8
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e007      	b.n	8000ef2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0208 	bic.w	r2, r2, #8
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7f5b      	ldrb	r3, [r3, #29]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d108      	bne.n	8000f0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f042 0204 	orr.w	r2, r2, #4
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e007      	b.n	8000f1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0204 	bic.w	r2, r2, #4
 8000f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	ea42 0103 	orr.w	r1, r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	1e5a      	subs	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff47 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff5c 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffb0 	bl	800107c <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	e166      	b.n	8001406 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8158 	beq.w	8001400 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d005      	beq.n	8001168 <HAL_GPIO_Init+0x40>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d130      	bne.n	80011ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119e:	2201      	movs	r2, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	f003 0201 	and.w	r2, r3, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d017      	beq.n	8001206 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d123      	bne.n	800125a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	6939      	ldr	r1, [r7, #16]
 8001256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0203 	and.w	r2, r3, #3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80b2 	beq.w	8001400 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129c:	4b61      	ldr	r3, [pc, #388]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 800129e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a0:	4a60      	ldr	r2, [pc, #384]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6613      	str	r3, [r2, #96]	; 0x60
 80012a8:	4b5e      	ldr	r3, [pc, #376]	; (8001424 <HAL_GPIO_Init+0x2fc>)
 80012aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b4:	4a5c      	ldr	r2, [pc, #368]	; (8001428 <HAL_GPIO_Init+0x300>)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012de:	d02b      	beq.n	8001338 <HAL_GPIO_Init+0x210>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_GPIO_Init+0x304>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d025      	beq.n	8001334 <HAL_GPIO_Init+0x20c>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a51      	ldr	r2, [pc, #324]	; (8001430 <HAL_GPIO_Init+0x308>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d01f      	beq.n	8001330 <HAL_GPIO_Init+0x208>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a50      	ldr	r2, [pc, #320]	; (8001434 <HAL_GPIO_Init+0x30c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d019      	beq.n	800132c <HAL_GPIO_Init+0x204>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <HAL_GPIO_Init+0x310>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d013      	beq.n	8001328 <HAL_GPIO_Init+0x200>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a4e      	ldr	r2, [pc, #312]	; (800143c <HAL_GPIO_Init+0x314>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00d      	beq.n	8001324 <HAL_GPIO_Init+0x1fc>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a4d      	ldr	r2, [pc, #308]	; (8001440 <HAL_GPIO_Init+0x318>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d007      	beq.n	8001320 <HAL_GPIO_Init+0x1f8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a4c      	ldr	r2, [pc, #304]	; (8001444 <HAL_GPIO_Init+0x31c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d101      	bne.n	800131c <HAL_GPIO_Init+0x1f4>
 8001318:	2307      	movs	r3, #7
 800131a:	e00e      	b.n	800133a <HAL_GPIO_Init+0x212>
 800131c:	2308      	movs	r3, #8
 800131e:	e00c      	b.n	800133a <HAL_GPIO_Init+0x212>
 8001320:	2306      	movs	r3, #6
 8001322:	e00a      	b.n	800133a <HAL_GPIO_Init+0x212>
 8001324:	2305      	movs	r3, #5
 8001326:	e008      	b.n	800133a <HAL_GPIO_Init+0x212>
 8001328:	2304      	movs	r3, #4
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x212>
 800132c:	2303      	movs	r3, #3
 800132e:	e004      	b.n	800133a <HAL_GPIO_Init+0x212>
 8001330:	2302      	movs	r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x212>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_GPIO_Init+0x212>
 8001338:	2300      	movs	r3, #0
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	4093      	lsls	r3, r2
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800134a:	4937      	ldr	r1, [pc, #220]	; (8001428 <HAL_GPIO_Init+0x300>)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001358:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_GPIO_Init+0x320>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800137c:	4a32      	ldr	r2, [pc, #200]	; (8001448 <HAL_GPIO_Init+0x320>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001382:	4b31      	ldr	r3, [pc, #196]	; (8001448 <HAL_GPIO_Init+0x320>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013a6:	4a28      	ldr	r2, [pc, #160]	; (8001448 <HAL_GPIO_Init+0x320>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013ac:	4b26      	ldr	r3, [pc, #152]	; (8001448 <HAL_GPIO_Init+0x320>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013d0:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <HAL_GPIO_Init+0x320>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_GPIO_Init+0x320>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <HAL_GPIO_Init+0x320>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f ae91 	bne.w	8001138 <HAL_GPIO_Init+0x10>
  }
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800
 8001434:	48000c00 	.word	0x48000c00
 8001438:	48001000 	.word	0x48001000
 800143c:	48001400 	.word	0x48001400
 8001440:	48001800 	.word	0x48001800
 8001444:	48001c00 	.word	0x48001c00
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001468:	e002      	b.n	8001470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148c:	d102      	bne.n	8001494 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800148e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001492:	e00b      	b.n	80014ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a2:	d102      	bne.n	80014aa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80014a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a8:	e000      	b.n	80014ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80014aa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40007000 	.word	0x40007000

080014bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d141      	bne.n	800154e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d6:	d131      	bne.n	800153c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d8:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014de:	4a46      	ldr	r2, [pc, #280]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014f0:	4a41      	ldr	r2, [pc, #260]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014f8:	4b40      	ldr	r3, [pc, #256]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2232      	movs	r2, #50	; 0x32
 80014fe:	fb02 f303 	mul.w	r3, r2, r3
 8001502:	4a3f      	ldr	r2, [pc, #252]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	0c9b      	lsrs	r3, r3, #18
 800150a:	3301      	adds	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800150e:	e002      	b.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3b01      	subs	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001522:	d102      	bne.n	800152a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f2      	bne.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001536:	d158      	bne.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e057      	b.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001542:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800154c:	e04d      	b.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001554:	d141      	bne.n	80015da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800155e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001562:	d131      	bne.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800157c:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001582:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2232      	movs	r2, #50	; 0x32
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	3301      	adds	r3, #1
 8001598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159a:	e002      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3b01      	subs	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ae:	d102      	bne.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f2      	bne.n	800159c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c2:	d112      	bne.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e011      	b.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015d8:	e007      	b.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40007000 	.word	0x40007000
 80015fc:	20000000 	.word	0x20000000
 8001600:	431bde83 	.word	0x431bde83

08001604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	f000 bc76 	b.w	8001f04 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001618:	4b97      	ldr	r3, [pc, #604]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001622:	4b95      	ldr	r3, [pc, #596]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80e6 	beq.w	8001806 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d007      	beq.n	8001650 <HAL_RCC_OscConfig+0x4c>
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	f040 808d 	bne.w	8001762 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b01      	cmp	r3, #1
 800164c:	f040 8089 	bne.w	8001762 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001650:	4b89      	ldr	r3, [pc, #548]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_RCC_OscConfig+0x66>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	f000 bc4d 	b.w	8001f04 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166e:	4b82      	ldr	r3, [pc, #520]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <HAL_RCC_OscConfig+0x80>
 800167a:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001682:	e005      	b.n	8001690 <HAL_RCC_OscConfig+0x8c>
 8001684:	4b7c      	ldr	r3, [pc, #496]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001690:	4293      	cmp	r3, r2
 8001692:	d224      	bcs.n	80016de <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fdf3 	bl	8002284 <RCC_SetFlashLatencyFromMSIRange>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f000 bc2d 	b.w	8001f04 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016aa:	4b73      	ldr	r3, [pc, #460]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a72      	ldr	r2, [pc, #456]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b70      	ldr	r3, [pc, #448]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	496d      	ldr	r1, [pc, #436]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c8:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	4968      	ldr	r1, [pc, #416]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
 80016dc:	e025      	b.n	800172a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016de:	4b66      	ldr	r3, [pc, #408]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a65      	ldr	r2, [pc, #404]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	4960      	ldr	r1, [pc, #384]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fc:	4b5e      	ldr	r3, [pc, #376]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	495b      	ldr	r1, [pc, #364]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fdb2 	bl	8002284 <RCC_SetFlashLatencyFromMSIRange>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e3ec      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800172a:	f000 fd1f 	bl	800216c <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b51      	ldr	r3, [pc, #324]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	4950      	ldr	r1, [pc, #320]	; (800187c <HAL_RCC_OscConfig+0x278>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	4a4e      	ldr	r2, [pc, #312]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001748:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800174a:	4b4e      	ldr	r3, [pc, #312]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fa88 	bl	8000c64 <HAL_InitTick>
 8001754:	4603      	mov	r3, r0
 8001756:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d052      	beq.n	8001804 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	e3d0      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d032      	beq.n	80017d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800176a:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a42      	ldr	r2, [pc, #264]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001776:	f7ff fac5 	bl	8000d04 <HAL_GetTick>
 800177a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800177e:	f7ff fac1 	bl	8000d04 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e3b9      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001790:	4b39      	ldr	r3, [pc, #228]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179c:	4b36      	ldr	r3, [pc, #216]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a35      	ldr	r2, [pc, #212]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80017a2:	f043 0308 	orr.w	r3, r3, #8
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	4930      	ldr	r1, [pc, #192]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ba:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	492b      	ldr	r1, [pc, #172]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
 80017ce:	e01a      	b.n	8001806 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a28      	ldr	r2, [pc, #160]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fa92 	bl	8000d04 <HAL_GetTick>
 80017e0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e4:	f7ff fa8e 	bl	8000d04 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e386      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1e0>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d073      	beq.n	80018fa <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	2b08      	cmp	r3, #8
 8001816:	d005      	beq.n	8001824 <HAL_RCC_OscConfig+0x220>
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d10e      	bne.n	800183c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d10b      	bne.n	800183c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d063      	beq.n	80018f8 <HAL_RCC_OscConfig+0x2f4>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d15f      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e363      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001844:	d106      	bne.n	8001854 <HAL_RCC_OscConfig+0x250>
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e025      	b.n	80018a0 <HAL_RCC_OscConfig+0x29c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d114      	bne.n	8001888 <HAL_RCC_OscConfig+0x284>
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a02      	ldr	r2, [pc, #8]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e013      	b.n	80018a0 <HAL_RCC_OscConfig+0x29c>
 8001878:	40021000 	.word	0x40021000
 800187c:	080025c0 	.word	0x080025c0
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004
 8001888:	4b8f      	ldr	r3, [pc, #572]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a8e      	ldr	r2, [pc, #568]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b8c      	ldr	r3, [pc, #560]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a8b      	ldr	r2, [pc, #556]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fa2c 	bl	8000d04 <HAL_GetTick>
 80018ac:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fa28 	bl	8000d04 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e320      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c2:	4b81      	ldr	r3, [pc, #516]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2ac>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fa18 	bl	8000d04 <HAL_GetTick>
 80018d4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fa14 	bl	8000d04 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e30c      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ea:	4b77      	ldr	r3, [pc, #476]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2d4>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d060      	beq.n	80019c8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x314>
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d119      	bne.n	8001946 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d116      	bne.n	8001946 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001918:	4b6b      	ldr	r3, [pc, #428]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_OscConfig+0x32c>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e2e9      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	4962      	ldr	r1, [pc, #392]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001944:	e040      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d023      	beq.n	8001996 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194e:	4b5e      	ldr	r3, [pc, #376]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a5d      	ldr	r2, [pc, #372]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f9d3 	bl	8000d04 <HAL_GetTick>
 800195e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff f9cf 	bl	8000d04 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e2c7      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001974:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	494e      	ldr	r1, [pc, #312]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
 8001994:	e018      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff f9af 	bl	8000d04 <HAL_GetTick>
 80019a6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff f9ab 	bl	8000d04 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e2a3      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019bc:	4b42      	ldr	r3, [pc, #264]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 8082 	beq.w	8001ada <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d05f      	beq.n	8001a9e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80019de:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699a      	ldr	r2, [r3, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d037      	beq.n	8001a64 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e27b      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d01b      	beq.n	8001a4e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a16:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1c:	4a2a      	ldr	r2, [pc, #168]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a26:	f7ff f96d 	bl	8000d04 <HAL_GetTick>
 8001a2a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2e:	f7ff f969 	bl	8000d04 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b11      	cmp	r3, #17
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e261      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ef      	bne.n	8001a2e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a54:	f023 0210 	bic.w	r2, r3, #16
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	491a      	ldr	r1, [pc, #104]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff f946 	bl	8000d04 <HAL_GetTick>
 8001a78:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f942 	bl	8000d04 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b11      	cmp	r3, #17
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e23a      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ef      	beq.n	8001a7c <HAL_RCC_OscConfig+0x478>
 8001a9c:	e01d      	b.n	8001ada <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa4:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aae:	f7ff f929 	bl	8000d04 <HAL_GetTick>
 8001ab2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f925 	bl	8000d04 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b11      	cmp	r3, #17
 8001ac2:	d903      	bls.n	8001acc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e21d      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
 8001ac8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001acc:	4b83      	ldr	r3, [pc, #524]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ed      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80bd 	beq.w	8001c62 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001aee:	4b7b      	ldr	r3, [pc, #492]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10e      	bne.n	8001b18 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b78      	ldr	r3, [pc, #480]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a77      	ldr	r2, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
 8001b06:	4b75      	ldr	r3, [pc, #468]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b18:	4b71      	ldr	r3, [pc, #452]	; (8001ce0 <HAL_RCC_OscConfig+0x6dc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d118      	bne.n	8001b56 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b24:	4b6e      	ldr	r3, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x6dc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6d      	ldr	r2, [pc, #436]	; (8001ce0 <HAL_RCC_OscConfig+0x6dc>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b30:	f7ff f8e8 	bl	8000d04 <HAL_GetTick>
 8001b34:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b38:	f7ff f8e4 	bl	8000d04 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e1dc      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4a:	4b65      	ldr	r3, [pc, #404]	; (8001ce0 <HAL_RCC_OscConfig+0x6dc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d02c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001b62:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b74:	4959      	ldr	r1, [pc, #356]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d010      	beq.n	8001baa <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b88:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8e:	4a53      	ldr	r2, [pc, #332]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b98:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9e:	4a4f      	ldr	r2, [pc, #316]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba8:	e018      	b.n	8001bdc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001baa:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	4a4a      	ldr	r2, [pc, #296]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bbc:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc2:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bcc:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a42      	ldr	r2, [pc, #264]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001bd4:	f023 0304 	bic.w	r3, r3, #4
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d016      	beq.n	8001c12 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff f88e 	bl	8000d04 <HAL_GetTick>
 8001be8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff f88a 	bl	8000d04 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e180      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c02:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ed      	beq.n	8001bec <HAL_RCC_OscConfig+0x5e8>
 8001c10:	e01d      	b.n	8001c4e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff f877 	bl	8000d04 <HAL_GetTick>
 8001c16:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff f873 	bl	8000d04 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e169      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ed      	bne.n	8001c1a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d105      	bne.n	8001c62 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	4a20      	ldr	r2, [pc, #128]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d041      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01c      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c7c:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c86:	f7ff f83d 	bl	8000d04 <HAL_GetTick>
 8001c8a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8e:	f7ff f839 	bl	8000d04 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e131      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0ef      	beq.n	8001c8e <HAL_RCC_OscConfig+0x68a>
 8001cae:	e020      	b.n	8001cf2 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <HAL_RCC_OscConfig+0x6d8>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f820 	bl	8000d04 <HAL_GetTick>
 8001cc4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cc6:	e00d      	b.n	8001ce4 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc8:	f7ff f81c 	bl	8000d04 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d906      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e114      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce4:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1ea      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8103 	beq.w	8001f02 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	f040 80cb 	bne.w	8001e9c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d06:	4b81      	ldr	r3, [pc, #516]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0203 	and.w	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d12c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d24:	3b01      	subs	r3, #1
 8001d26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d123      	bne.n	8001d74 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d11b      	bne.n	8001d74 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d113      	bne.n	8001d74 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d109      	bne.n	8001d74 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	085b      	lsrs	r3, r3, #1
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d06d      	beq.n	8001e50 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d068      	beq.n	8001e4c <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d7a:	4b64      	ldr	r3, [pc, #400]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d105      	bne.n	8001d92 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d86:	4b61      	ldr	r3, [pc, #388]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0b6      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d96:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a5c      	ldr	r2, [pc, #368]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da2:	f7fe ffaf 	bl	8000d04 <HAL_GetTick>
 8001da6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7fe ffab 	bl	8000d04 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0a3      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc8:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <HAL_RCC_OscConfig+0x90c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dd8:	3a01      	subs	r2, #1
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001de2:	0212      	lsls	r2, r2, #8
 8001de4:	4311      	orrs	r1, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dea:	0852      	lsrs	r2, r2, #1
 8001dec:	3a01      	subs	r2, #1
 8001dee:	0552      	lsls	r2, r2, #21
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001df6:	0852      	lsrs	r2, r2, #1
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	0652      	lsls	r2, r2, #25
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e02:	06d2      	lsls	r2, r2, #27
 8001e04:	430a      	orrs	r2, r1
 8001e06:	4941      	ldr	r1, [pc, #260]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a3e      	ldr	r2, [pc, #248]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e18:	4b3c      	ldr	r3, [pc, #240]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a3b      	ldr	r2, [pc, #236]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e24:	f7fe ff6e 	bl	8000d04 <HAL_GetTick>
 8001e28:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe ff6a 	bl	8000d04 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e062      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	4b33      	ldr	r3, [pc, #204]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e4a:	e05a      	b.n	8001f02 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e059      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d152      	bne.n	8001f02 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a27      	ldr	r2, [pc, #156]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e74:	f7fe ff46 	bl	8000d04 <HAL_GetTick>
 8001e78:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7fe ff42 	bl	8000d04 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e03a      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x878>
 8001e9a:	e032      	b.n	8001f02 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d02d      	beq.n	8001efe <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001ec0:	f023 0303 	bic.w	r3, r3, #3
 8001ec4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001ecc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7fe ff15 	bl	8000d04 <HAL_GetTick>
 8001eda:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ede:	f7fe ff11 	bl	8000d04 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e009      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCC_OscConfig+0x908>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x8da>
 8001efc:	e001      	b.n	8001f02 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	019d800c 	.word	0x019d800c

08001f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e10f      	b.n	800214c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b89      	ldr	r3, [pc, #548]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b86      	ldr	r3, [pc, #536]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 020f 	bic.w	r2, r3, #15
 8001f42:	4984      	ldr	r1, [pc, #528]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0f7      	b.n	800214c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8089 	beq.w	800207c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d133      	bne.n	8001fda <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f72:	4b79      	ldr	r3, [pc, #484]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0e4      	b.n	800214c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001f82:	f000 f9d9 	bl	8002338 <RCC_GetSysClockFreqFromPLLSource>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4a74      	ldr	r2, [pc, #464]	; (800215c <HAL_RCC_ClockConfig+0x248>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d955      	bls.n	800203a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f8e:	4b72      	ldr	r3, [pc, #456]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10a      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f9a:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa2:	4a6d      	ldr	r2, [pc, #436]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e044      	b.n	800203a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d03e      	beq.n	800203a <HAL_RCC_ClockConfig+0x126>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d13a      	bne.n	800203a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fc4:	4b64      	ldr	r3, [pc, #400]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fcc:	4a62      	ldr	r2, [pc, #392]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e02f      	b.n	800203a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d115      	bne.n	800201a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0ac      	b.n	800214c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffa:	4b57      	ldr	r3, [pc, #348]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0a0      	b.n	800214c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800200a:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e098      	b.n	800214c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800201a:	f000 f8a7 	bl	800216c <HAL_RCC_GetSysClockFreq>
 800201e:	4603      	mov	r3, r0
 8002020:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_RCC_ClockConfig+0x248>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d909      	bls.n	800203a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002026:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800202e:	4a4a      	ldr	r2, [pc, #296]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002034:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f023 0203 	bic.w	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4944      	ldr	r1, [pc, #272]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800204c:	f7fe fe5a 	bl	8000d04 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	e00a      	b.n	800206a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7fe fe56 	bl	8000d04 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e070      	b.n	800214c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 020c 	and.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	429a      	cmp	r2, r3
 800207a:	d1eb      	bne.n	8002054 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d009      	beq.n	800209c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4930      	ldr	r1, [pc, #192]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
 800209a:	e008      	b.n	80020ae <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b80      	cmp	r3, #128	; 0x80
 80020a0:	d105      	bne.n	80020ae <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4a2c      	ldr	r2, [pc, #176]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ac:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d210      	bcs.n	80020de <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020bc:	4b25      	ldr	r3, [pc, #148]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 020f 	bic.w	r2, r3, #15
 80020c4:	4923      	ldr	r1, [pc, #140]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e036      	b.n	800214c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	4918      	ldr	r1, [pc, #96]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4910      	ldr	r1, [pc, #64]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800211c:	f000 f826 	bl	800216c <HAL_RCC_GetSysClockFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	490c      	ldr	r1, [pc, #48]	; (8002160 <HAL_RCC_ClockConfig+0x24c>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x250>)
 800213a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_RCC_ClockConfig+0x254>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fd8f 	bl	8000c64 <HAL_InitTick>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]

  return status;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
 800215c:	04c4b400 	.word	0x04c4b400
 8002160:	080025c0 	.word	0x080025c0
 8002164:	20000000 	.word	0x20000000
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217a:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d121      	bne.n	80021de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d11e      	bne.n	80021de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021a0:	4b34      	ldr	r3, [pc, #208]	; (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e005      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021c8:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10d      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_RCC_GetSysClockFreq+0x110>)
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	e004      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_RCC_GetSysClockFreq+0x114>)
 80021f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d134      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0xa6>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d003      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0xac>
 8002210:	e005      	b.n	800221e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_RCC_GetSysClockFreq+0x110>)
 8002214:	617b      	str	r3, [r7, #20]
      break;
 8002216:	e005      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_GetSysClockFreq+0x114>)
 800221a:	617b      	str	r3, [r7, #20]
      break;
 800221c:	e002      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	617b      	str	r3, [r7, #20]
      break;
 8002222:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3301      	adds	r3, #1
 8002230:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	fb03 f202 	mul.w	r2, r3, r2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_RCC_GetSysClockFreq+0x108>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	0e5b      	lsrs	r3, r3, #25
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	3301      	adds	r3, #1
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002264:	69bb      	ldr	r3, [r7, #24]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	080025d0 	.word	0x080025d0
 800227c:	00f42400 	.word	0x00f42400
 8002280:	007a1200 	.word	0x007a1200

08002284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800229c:	f7ff f8ee 	bl	800147c <HAL_PWREx_GetVoltageRange>
 80022a0:	6178      	str	r0, [r7, #20]
 80022a2:	e014      	b.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a21      	ldr	r2, [pc, #132]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022bc:	f7ff f8de 	bl	800147c <HAL_PWREx_GetVoltageRange>
 80022c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	4a1a      	ldr	r2, [pc, #104]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d4:	d10b      	bne.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d913      	bls.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2ba0      	cmp	r3, #160	; 0xa0
 80022e0:	d902      	bls.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e2:	2302      	movs	r3, #2
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	e00d      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e8:	2301      	movs	r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	e00a      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b7f      	cmp	r3, #127	; 0x7f
 80022f2:	d902      	bls.n	80022fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80022f4:	2302      	movs	r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e004      	b.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b70      	cmp	r3, #112	; 0x70
 80022fe:	d101      	bne.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002300:	2301      	movs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 020f 	bic.w	r2, r3, #15
 800230c:	4909      	ldr	r1, [pc, #36]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	40022000 	.word	0x40022000

08002338 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002342:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d118      	bne.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d107      	bne.n	800236a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800235c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	e005      	b.n	8002376 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d003      	beq.n	8002398 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d003      	beq.n	800239e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002396:	e005      	b.n	80023a4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800239a:	613b      	str	r3, [r7, #16]
    break;
 800239c:	e005      	b.n	80023aa <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80023a0:	613b      	str	r3, [r7, #16]
    break;
 80023a2:	e002      	b.n	80023aa <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	613b      	str	r3, [r7, #16]
    break;
 80023a8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	3301      	adds	r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	fb03 f202 	mul.w	r2, r3, r2
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0e5b      	lsrs	r3, r3, #25
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	3301      	adds	r3, #1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80023ea:	683b      	ldr	r3, [r7, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	40021000 	.word	0x40021000
 80023fc:	080025d0 	.word	0x080025d0
 8002400:	00f42400 	.word	0x00f42400
 8002404:	007a1200 	.word	0x007a1200

08002408 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e095      	b.n	8002546 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d108      	bne.n	8002434 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800242a:	d009      	beq.n	8002440 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
 8002432:	e005      	b.n	8002440 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe fb0a 	bl	8000a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002476:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002480:	d902      	bls.n	8002488 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e002      	b.n	800248e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002496:	d007      	beq.n	80024a8 <HAL_SPI_Init+0xa0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024a0:	d002      	beq.n	80024a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ea:	ea42 0103 	orr.w	r1, r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	0c1b      	lsrs	r3, r3, #16
 8002504:	f003 0204 	and.w	r2, r3, #4
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002524:	ea42 0103 	orr.w	r1, r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <__libc_init_array>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	4d0d      	ldr	r5, [pc, #52]	; (8002588 <__libc_init_array+0x38>)
 8002554:	4c0d      	ldr	r4, [pc, #52]	; (800258c <__libc_init_array+0x3c>)
 8002556:	1b64      	subs	r4, r4, r5
 8002558:	10a4      	asrs	r4, r4, #2
 800255a:	2600      	movs	r6, #0
 800255c:	42a6      	cmp	r6, r4
 800255e:	d109      	bne.n	8002574 <__libc_init_array+0x24>
 8002560:	4d0b      	ldr	r5, [pc, #44]	; (8002590 <__libc_init_array+0x40>)
 8002562:	4c0c      	ldr	r4, [pc, #48]	; (8002594 <__libc_init_array+0x44>)
 8002564:	f000 f820 	bl	80025a8 <_init>
 8002568:	1b64      	subs	r4, r4, r5
 800256a:	10a4      	asrs	r4, r4, #2
 800256c:	2600      	movs	r6, #0
 800256e:	42a6      	cmp	r6, r4
 8002570:	d105      	bne.n	800257e <__libc_init_array+0x2e>
 8002572:	bd70      	pop	{r4, r5, r6, pc}
 8002574:	f855 3b04 	ldr.w	r3, [r5], #4
 8002578:	4798      	blx	r3
 800257a:	3601      	adds	r6, #1
 800257c:	e7ee      	b.n	800255c <__libc_init_array+0xc>
 800257e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002582:	4798      	blx	r3
 8002584:	3601      	adds	r6, #1
 8002586:	e7f2      	b.n	800256e <__libc_init_array+0x1e>
 8002588:	08002600 	.word	0x08002600
 800258c:	08002600 	.word	0x08002600
 8002590:	08002600 	.word	0x08002600
 8002594:	08002608 	.word	0x08002608

08002598 <memset>:
 8002598:	4402      	add	r2, r0
 800259a:	4603      	mov	r3, r0
 800259c:	4293      	cmp	r3, r2
 800259e:	d100      	bne.n	80025a2 <memset+0xa>
 80025a0:	4770      	bx	lr
 80025a2:	f803 1b01 	strb.w	r1, [r3], #1
 80025a6:	e7f9      	b.n	800259c <memset+0x4>

080025a8 <_init>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	bf00      	nop
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr

080025b4 <_fini>:
 80025b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b6:	bf00      	nop
 80025b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ba:	bc08      	pop	{r3}
 80025bc:	469e      	mov	lr, r3
 80025be:	4770      	bx	lr
