
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c8c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee0  08004ee0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004ee0  08004ee0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ee0  08004ee0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004ee0  08004ee0  00014ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08004f60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08004f60  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e8e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363c  00000000  00000000  00040f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00044570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  000453b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030b8c  00000000  00000000  000460d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff34  00000000  00000000  00076c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b56f  00000000  00000000  00086b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c64  00000000  00000000  001a2158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004e30 	.word	0x08004e30

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	08004e30 	.word	0x08004e30

080001fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN1_Init+0x60>)
 8000202:	4a17      	ldr	r2, [pc, #92]	; (8000260 <MX_CAN1_Init+0x64>)
 8000204:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 64;
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <MX_CAN1_Init+0x60>)
 8000208:	2240      	movs	r2, #64	; 0x40
 800020a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN1_Init+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <MX_CAN1_Init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <MX_CAN1_Init+0x60>)
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN1_Init+0x60>)
 8000220:	2200      	movs	r2, #0
 8000222:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN1_Init+0x60>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN1_Init+0x60>)
 800022c:	2200      	movs	r2, #0
 800022e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN1_Init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN1_Init+0x60>)
 8000238:	2200      	movs	r2, #0
 800023a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN1_Init+0x60>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN1_Init+0x60>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN1_Init+0x60>)
 800024a:	f002 fccf 	bl	8002bec <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000254:	f002 f90c 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000008c 	.word	0x2000008c
 8000260:	40006400 	.word	0x40006400

08000264 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a20      	ldr	r2, [pc, #128]	; (8000304 <HAL_CAN_MspInit+0xa0>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d139      	bne.n	80002fa <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <HAL_CAN_MspInit+0xa4>)
 8000288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800028a:	4a1f      	ldr	r2, [pc, #124]	; (8000308 <HAL_CAN_MspInit+0xa4>)
 800028c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000290:	6593      	str	r3, [r2, #88]	; 0x58
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <HAL_CAN_MspInit+0xa4>)
 8000294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <HAL_CAN_MspInit+0xa4>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	4a19      	ldr	r2, [pc, #100]	; (8000308 <HAL_CAN_MspInit+0xa4>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002aa:	4b17      	ldr	r3, [pc, #92]	; (8000308 <HAL_CAN_MspInit+0xa4>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002bc:	2302      	movs	r3, #2
 80002be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c4:	2303      	movs	r3, #3
 80002c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002c8:	2309      	movs	r3, #9
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f003 fadf 	bl	8003898 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2100      	movs	r1, #0
 80002de:	2014      	movs	r0, #20
 80002e0:	f003 faa3 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80002e4:	2014      	movs	r0, #20
 80002e6:	f003 fabc 	bl	8003862 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	2015      	movs	r0, #21
 80002f0:	f003 fa9b 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80002f4:	2015      	movs	r0, #21
 80002f6:	f003 fab4 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002fa:	bf00      	nop
 80002fc:	3728      	adds	r7, #40	; 0x28
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40006400 	.word	0x40006400
 8000308:	40021000 	.word	0x40021000

0800030c <_ZN16SmartFuseHandlerILm4EE9handleAllEv>:
{
	return this->fuses[size_t(fuse)].current;
}

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::handleAll()
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 8000314:	2300      	movs	r3, #0
 8000316:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fa0f 	bl	8001742 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 8000324:	61b8      	str	r0, [r7, #24]
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	4618      	mov	r0, r3
 800032a:	f001 fa16 	bl	800175a <_ZN3etl7ivectorI9SmartFuseE3endEv>
 800032e:	6138      	str	r0, [r7, #16]
 8000330:	69ba      	ldr	r2, [r7, #24]
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	429a      	cmp	r2, r3
 8000336:	d00f      	beq.n	8000358 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x4c>
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.handle();
 800033c:	68f8      	ldr	r0, [r7, #12]
 800033e:	f000 fbed 	bl	8000b1c <_ZN9SmartFuse6handleEv>
 8000342:	4603      	mov	r3, r0
 8000344:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 8000346:	7afb      	ldrb	r3, [r7, #11]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x44>
 800034c:	7afb      	ldrb	r3, [r7, #11]
 800034e:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	3390      	adds	r3, #144	; 0x90
 8000354:	61bb      	str	r3, [r7, #24]
 8000356:	e7eb      	b.n	8000330 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x24>
	}

	return result;
 8000358:	7ffb      	ldrb	r3, [r7, #31]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3720      	adds	r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_ZN16SmartFuseHandlerILm4EE7initAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::initAll()
 8000362:	b580      	push	{r7, lr}
 8000364:	b088      	sub	sp, #32
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 800036a:	2300      	movs	r3, #0
 800036c:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	617b      	str	r3, [r7, #20]
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	4618      	mov	r0, r3
 8000376:	f001 f9e4 	bl	8001742 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 800037a:	61b8      	str	r0, [r7, #24]
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	4618      	mov	r0, r3
 8000380:	f001 f9eb 	bl	800175a <_ZN3etl7ivectorI9SmartFuseE3endEv>
 8000384:	6138      	str	r0, [r7, #16]
 8000386:	69ba      	ldr	r2, [r7, #24]
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	429a      	cmp	r2, r3
 800038c:	d00f      	beq.n	80003ae <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x4c>
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.init();
 8000392:	68f8      	ldr	r0, [r7, #12]
 8000394:	f000 fb67 	bl	8000a66 <_ZN9SmartFuse4initEv>
 8000398:	4603      	mov	r3, r0
 800039a:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 800039c:	7afb      	ldrb	r3, [r7, #11]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x44>
 80003a2:	7afb      	ldrb	r3, [r7, #11]
 80003a4:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 80003a6:	69bb      	ldr	r3, [r7, #24]
 80003a8:	3390      	adds	r3, #144	; 0x90
 80003aa:	61bb      	str	r3, [r7, #24]
 80003ac:	e7eb      	b.n	8000386 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x24>
	}

	return result;
 80003ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3720      	adds	r7, #32
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <_ZN16SmartFuseHandlerILm4EE9enableAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::enableAll()
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 80003c0:	2300      	movs	r3, #0
 80003c2:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 f9b9 	bl	8001742 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 80003d0:	61b8      	str	r0, [r7, #24]
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f001 f9c0 	bl	800175a <_ZN3etl7ivectorI9SmartFuseE3endEv>
 80003da:	6138      	str	r0, [r7, #16]
 80003dc:	69ba      	ldr	r2, [r7, #24]
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d012      	beq.n	800040a <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x52>
 80003e4:	69bb      	ldr	r3, [r7, #24]
 80003e6:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.enable();
 80003e8:	68f8      	ldr	r0, [r7, #12]
 80003ea:	f000 fb57 	bl	8000a9c <_ZN9SmartFuse6enableEv>
 80003ee:	4603      	mov	r3, r0
 80003f0:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(5);
 80003f2:	2005      	movs	r0, #5
 80003f4:	f002 fbd6 	bl	8002ba4 <HAL_Delay>
		if(x != SmartFuseState::Ok) result = x;
 80003f8:	7afb      	ldrb	r3, [r7, #11]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x4a>
 80003fe:	7afb      	ldrb	r3, [r7, #11]
 8000400:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	3390      	adds	r3, #144	; 0x90
 8000406:	61bb      	str	r3, [r7, #24]
 8000408:	e7e8      	b.n	80003dc <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x24>
	}

	return result;
 800040a:	7ffb      	ldrb	r3, [r7, #31]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <_ZN16SmartFuseHandlerILm4EE9getStatesEv>:

	return result;
}

template <uint32_t num_of_sf>
std::array < SmartFuseState, num_of_sf >  SmartFuseHandler<num_of_sf>::getStates()
 8000414:	b5b0      	push	{r4, r5, r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
{
	std::array < SmartFuseState, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	2b03      	cmp	r3, #3
 8000424:	d815      	bhi.n	8000452 <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0x3e>
	{
		x[i] = this->smart_fuses[i].getState();
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6979      	ldr	r1, [r7, #20]
 800042a:	4618      	mov	r0, r3
 800042c:	f001 f9b0 	bl	8001790 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8000430:	4605      	mov	r5, r0
 8000432:	f107 030c 	add.w	r3, r7, #12
 8000436:	6979      	ldr	r1, [r7, #20]
 8000438:	4618      	mov	r0, r3
 800043a:	f001 f99a 	bl	8001772 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 800043e:	4604      	mov	r4, r0
 8000440:	4628      	mov	r0, r5
 8000442:	f000 fddf 	bl	8001004 <_ZNK9SmartFuse8getStateEv>
 8000446:	4603      	mov	r3, r0
 8000448:	7023      	strb	r3, [r4, #0]
	for(size_t i = 0; i < num_of_sf; i++)
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	3301      	adds	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	e7e6      	b.n	8000420 <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0xc>
	}

	return x;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	613b      	str	r3, [r7, #16]
 8000456:	2300      	movs	r3, #0
 8000458:	7c3a      	ldrb	r2, [r7, #16]
 800045a:	f362 0307 	bfi	r3, r2, #0, #8
 800045e:	7c7a      	ldrb	r2, [r7, #17]
 8000460:	f362 230f 	bfi	r3, r2, #8, #8
 8000464:	7cba      	ldrb	r2, [r7, #18]
 8000466:	f362 4317 	bfi	r3, r2, #16, #8
 800046a:	7cfa      	ldrb	r2, [r7, #19]
 800046c:	f362 631f 	bfi	r3, r2, #24, #8
}
 8000470:	4618      	mov	r0, r3
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bdb0      	pop	{r4, r5, r7, pc}

08000478 <_ZN16SmartFuseHandlerILm4EE16getChanelsStatesEv>:

template <uint32_t num_of_sf>
std::array < std::array < FuseState, 6 >, num_of_sf > SmartFuseHandler<num_of_sf>::getChanelsStates()
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
{
	std::array < std::array < FuseState, 6 >, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	2b03      	cmp	r3, #3
 800048a:	d819      	bhi.n	80004c0 <_ZN16SmartFuseHandlerILm4EE16getChanelsStatesEv+0x48>
	{
		x[i] = this->smart_fuses[i].getFuseStates();
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	6979      	ldr	r1, [r7, #20]
 8000490:	4618      	mov	r0, r3
 8000492:	f001 f97d 	bl	8001790 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8000496:	4604      	mov	r4, r0
 8000498:	6979      	ldr	r1, [r7, #20]
 800049a:	68f8      	ldr	r0, [r7, #12]
 800049c:	f001 f98b 	bl	80017b6 <_ZNSt5arrayIS_I9FuseStateLj6EELj4EEixEj>
 80004a0:	4605      	mov	r5, r0
 80004a2:	463b      	mov	r3, r7
 80004a4:	4621      	mov	r1, r4
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 fdb9 	bl	800101e <_ZN9SmartFuse13getFuseStatesEv>
 80004ac:	462a      	mov	r2, r5
 80004ae:	463b      	mov	r3, r7
 80004b0:	6819      	ldr	r1, [r3, #0]
 80004b2:	6011      	str	r1, [r2, #0]
 80004b4:	889b      	ldrh	r3, [r3, #4]
 80004b6:	8093      	strh	r3, [r2, #4]
	for(size_t i = 0; i < num_of_sf; i++)
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	3301      	adds	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	e7e2      	b.n	8000486 <_ZN16SmartFuseHandlerILm4EE16getChanelsStatesEv+0xe>
	}

	return x;
 80004c0:	bf00      	nop
}
 80004c2:	68f8      	ldr	r0, [r7, #12]
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bdb0      	pop	{r4, r5, r7, pc}

080004ca <_ZNK3etl7ibitset5countEv>:
    }

    //*************************************************************************
    /// Count the number of bits set.
    //*************************************************************************
    size_t count() const
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b084      	sub	sp, #16
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
    {
      size_t n = 0UL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]

      for (size_t i = 0UL; i < SIZE; ++i)
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d210      	bcs.n	8000506 <_ZNK3etl7ibitset5countEv+0x3c>
      {
        n += etl::count_bits(pdata[i]);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	68da      	ldr	r2, [r3, #12]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	4413      	add	r3, r2
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 f87d 	bl	80015ee <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>
 80004f4:	4603      	mov	r3, r0
 80004f6:	461a      	mov	r2, r3
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	4413      	add	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
      for (size_t i = 0UL; i < SIZE; ++i)
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	3301      	adds	r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	e7e9      	b.n	80004da <_ZNK3etl7ibitset5countEv+0x10>
      }

      return n;
 8000506:	68fb      	ldr	r3, [r7, #12]
    }
 8000508:	4618      	mov	r0, r3
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <_ZN3etl7ibitset5resetEv>:
    }

    //*************************************************************************
    /// Resets the bitset.
    //*************************************************************************
    ibitset& reset()
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    {
      for (size_t i = 0UL; i < SIZE; ++i)
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	429a      	cmp	r2, r3
 8000524:	d209      	bcs.n	800053a <_ZN3etl7ibitset5resetEv+0x2a>
      {
        pdata[i] = ALL_CLEAR;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	68da      	ldr	r2, [r3, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	4413      	add	r3, r2
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
      for (size_t i = 0UL; i < SIZE; ++i)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	3301      	adds	r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e7f0      	b.n	800051c <_ZN3etl7ibitset5resetEv+0xc>
      }

      return *this;
 800053a:	687b      	ldr	r3, [r7, #4]
    }
 800053c:	4618      	mov	r0, r3
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <_ZN3etl7ibitset10initialiseEy>:
  protected:

    //*************************************************************************
    /// Initialise from an unsigned long long.
    //*************************************************************************
    ibitset& initialise(unsigned long long value)
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	e9c7 2300 	strd	r2, r3, [r7]
    {
      reset();
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f7ff ffdb 	bl	8000510 <_ZN3etl7ibitset5resetEv>

      const size_t SHIFT = (integral_limits<unsigned long long>::bits <= (int)BITS_PER_ELEMENT) ? 0 : BITS_PER_ELEMENT;
 800055a:	2308      	movs	r3, #8
 800055c:	613b      	str	r3, [r7, #16]
      {
        pdata[0] = element_t(value);
      }
      else
      {
        size_t i = 0UL;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]

        while ((value != 0) && (i < SIZE))
 8000562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000566:	4313      	orrs	r3, r2
 8000568:	d019      	beq.n	800059e <_ZN3etl7ibitset10initialiseEy+0x56>
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	429a      	cmp	r2, r3
 8000572:	d214      	bcs.n	800059e <_ZN3etl7ibitset10initialiseEy+0x56>
        {
          pdata[i++] = value & ALL_SET;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	1c59      	adds	r1, r3, #1
 800057c:	6179      	str	r1, [r7, #20]
 800057e:	4413      	add	r3, r2
 8000580:	783a      	ldrb	r2, [r7, #0]
 8000582:	701a      	strb	r2, [r3, #0]
          value = value >> SHIFT;
 8000584:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	f04f 0300 	mov.w	r3, #0
 8000590:	0a02      	lsrs	r2, r0, #8
 8000592:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000596:	0a0b      	lsrs	r3, r1, #8
 8000598:	e9c7 2300 	strd	r2, r3, [r7]
        while ((value != 0) && (i < SIZE))
 800059c:	e7e1      	b.n	8000562 <_ZN3etl7ibitset10initialiseEy+0x1a>
        }
      }

      pdata[SIZE - 1] &= TOP_MASK;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	68da      	ldr	r2, [r3, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	4413      	add	r3, r2
 80005aa:	7819      	ldrb	r1, [r3, #0]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	68d8      	ldr	r0, [r3, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	4403      	add	r3, r0
 80005bc:	400a      	ands	r2, r1
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	701a      	strb	r2, [r3, #0]

      return *this;
 80005c2:	68fb      	ldr	r3, [r7, #12]
    }
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <_ZN3etl7ibitsetC1EjjPh>:
    }

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    ibitset(size_t nbits_, size_t size_, element_t* pdata_)
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
      : NBITS(nbits_),
        SIZE(size_),
        pdata(pdata_)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	68ba      	ldr	r2, [r7, #8]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	60da      	str	r2, [r3, #12]
    {
      size_t allocated_bits = SIZE * BITS_PER_ELEMENT;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	617b      	str	r3, [r7, #20]
      size_t top_mask_shift = ((BITS_PER_ELEMENT - (allocated_bits - NBITS)) % BITS_PER_ELEMENT);
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	f003 0307 	and.w	r3, r3, #7
 8000600:	613b      	str	r3, [r7, #16]
      TOP_MASK = element_t(top_mask_shift == 0 ? ALL_SET : ~(ALL_SET << top_mask_shift));
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d007      	beq.n	8000618 <_ZN3etl7ibitsetC1EjjPh+0x4c>
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	43db      	mvns	r3, r3
 8000614:	b2da      	uxtb	r2, r3
 8000616:	e000      	b.n	800061a <_ZN3etl7ibitsetC1EjjPh+0x4e>
 8000618:	22ff      	movs	r2, #255	; 0xff
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	701a      	strb	r2, [r3, #0]
    }
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	4618      	mov	r0, r3
 8000622:	371c      	adds	r7, #28
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <_ZN3etl7ibitsetD1Ev>:
    virtual ~ibitset()
    {
    }
#else
  protected:
    ~ibitset()
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    {
    }
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <_ZN3etl6bitsetILj8EED1Ev>:
  /// Does not use std::string.
  ///\tparam MAXN The number of bits.
  ///\ingroup bitset
  //*************************************************************************
  template <const size_t MAXN>
  class bitset : public etl::ibitset
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffed 	bl	800062c <_ZN3etl7ibitsetD1Ev>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  Nm  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00a      	beq.n	8000680 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	429c      	cmp	r4, r3
 8000674:	d004      	beq.n	8000680 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 8000676:	3c14      	subs	r4, #20
 8000678:	4620      	mov	r0, r4
 800067a:	f7ff ffe2 	bl	8000642 <_ZN3etl6bitsetILj8EED1Ev>
 800067e:	e7f7      	b.n	8000670 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x14>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bd90      	pop	{r4, r7, pc}

0800068a <_ZL11checkParitySt5arrayIhLj3EE>:
{
 800068a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800068e:	b097      	sub	sp, #92	; 0x5c
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	size_t buff = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	657b      	str	r3, [r7, #84]	; 0x54
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000698:	f107 0408 	add.w	r4, r7, #8
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 ffcb 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80006a6:	4603      	mov	r3, r0
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2200      	movs	r2, #0
 80006ae:	461d      	mov	r5, r3
 80006b0:	4616      	mov	r6, r2
 80006b2:	462a      	mov	r2, r5
 80006b4:	4633      	mov	r3, r6
 80006b6:	4620      	mov	r0, r4
 80006b8:	f000 ffcf 	bl	800165a <_ZN3etl6bitsetILj8EEC1Ey>
 80006bc:	3414      	adds	r4, #20
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2101      	movs	r1, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 ffba 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80006c8:	4603      	mov	r3, r0
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2200      	movs	r2, #0
 80006d0:	469a      	mov	sl, r3
 80006d2:	4693      	mov	fp, r2
 80006d4:	4652      	mov	r2, sl
 80006d6:	465b      	mov	r3, fp
 80006d8:	4620      	mov	r0, r4
 80006da:	f000 ffbe 	bl	800165a <_ZN3etl6bitsetILj8EEC1Ey>
 80006de:	3414      	adds	r4, #20
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 ffa9 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80006ea:	4603      	mov	r3, r0
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2200      	movs	r2, #0
 80006f2:	4698      	mov	r8, r3
 80006f4:	4691      	mov	r9, r2
 80006f6:	4642      	mov	r2, r8
 80006f8:	464b      	mov	r3, r9
 80006fa:	4620      	mov	r0, r4
 80006fc:	f000 ffad 	bl	800165a <_ZN3etl6bitsetILj8EEC1Ey>
	for (auto &bit : bits) buff += bit.count();
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000706:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000708:	f000 ffbf 	bl	800168a <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>
 800070c:	6538      	str	r0, [r7, #80]	; 0x50
 800070e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000710:	f000 ffc7 	bl	80016a2 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>
 8000714:	64b8      	str	r0, [r7, #72]	; 0x48
 8000716:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800071a:	429a      	cmp	r2, r3
 800071c:	d00d      	beq.n	800073a <_ZL11checkParitySt5arrayIhLj3EE+0xb0>
 800071e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
 8000722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fed0 	bl	80004ca <_ZNK3etl7ibitset5countEv>
 800072a:	4602      	mov	r2, r0
 800072c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800072e:	4413      	add	r3, r2
 8000730:	657b      	str	r3, [r7, #84]	; 0x54
 8000732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000734:	3314      	adds	r3, #20
 8000736:	653b      	str	r3, [r7, #80]	; 0x50
 8000738:	e7ed      	b.n	8000716 <_ZL11checkParitySt5arrayIhLj3EE+0x8c>
	return (buff % 2 == 0);
 800073a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	bf0c      	ite	eq
 8000744:	2301      	moveq	r3, #1
 8000746:	2300      	movne	r3, #0
 8000748:	b2dc      	uxtb	r4, r3
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff84 	bl	800065c <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>
	return (buff % 2 == 0);
 8000754:	4623      	mov	r3, r4
}
 8000756:	4618      	mov	r0, r3
 8000758:	375c      	adds	r7, #92	; 0x5c
 800075a:	46bd      	mov	sp, r7
 800075c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000760 <_ZL18calculateParityBitRSt5arrayIhLj3EE>:
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	data[2] &= ~(1 << 0);
 8000768:	2102      	movs	r1, #2
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 ff66 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000770:	4603      	mov	r3, r0
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	f022 0201 	bic.w	r2, r2, #1
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	701a      	strb	r2, [r3, #0]
	if (checkParity(data)) data[2] |= (1 << 0);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	781a      	ldrb	r2, [r3, #0]
 8000780:	7859      	ldrb	r1, [r3, #1]
 8000782:	0209      	lsls	r1, r1, #8
 8000784:	430a      	orrs	r2, r1
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	041b      	lsls	r3, r3, #16
 800078a:	431a      	orrs	r2, r3
 800078c:	2300      	movs	r3, #0
 800078e:	f362 0317 	bfi	r3, r2, #0, #24
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff79 	bl	800068a <_ZL11checkParitySt5arrayIhLj3EE>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d009      	beq.n	80007b2 <_ZL18calculateParityBitRSt5arrayIhLj3EE+0x52>
 800079e:	2102      	movs	r1, #2
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 ff4b 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80007a6:	4603      	mov	r3, r0
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	f042 0201 	orr.w	r2, r2, #1
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	701a      	strb	r2, [r3, #0]
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>:
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	6039      	str	r1, [r7, #0]
	this->last_gsb = x[0];
 80007c4:	463b      	mov	r3, r7
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 ff37 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80007ce:	4603      	mov	r3, r0
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	705a      	strb	r2, [r3, #1]
	if(x[0] & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 80007d6:	463b      	mov	r3, r7
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 ff2e 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80007e0:	4603      	mov	r3, r0
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	09db      	lsrs	r3, r3, #7
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x3a>
 80007f0:	2300      	movs	r3, #0
 80007f2:	e07e      	b.n	80008f2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000001) return SmartFuseState::FailSafe;
 80007f4:	463b      	mov	r3, r7
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 ff1f 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80007fe:	4603      	mov	r3, r0
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf14      	ite	ne
 800080a:	2301      	movne	r3, #1
 800080c:	2300      	moveq	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x5e>
 8000814:	2307      	movs	r3, #7
 8000816:	e06c      	b.n	80008f2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000010) return SmartFuseState::OLOFF;
 8000818:	463b      	mov	r3, r7
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f000 ff0d 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000822:	4603      	mov	r3, r0
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x82>
 8000838:	2306      	movs	r3, #6
 800083a:	e05a      	b.n	80008f2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000100) return SmartFuseState::LatchOff;
 800083c:	463b      	mov	r3, r7
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fefb 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000846:	4603      	mov	r3, r0
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	2b00      	cmp	r3, #0
 8000850:	bf14      	ite	ne
 8000852:	2301      	movne	r3, #1
 8000854:	2300      	moveq	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xa6>
 800085c:	2305      	movs	r3, #5
 800085e:	e048      	b.n	80008f2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00001000) return SmartFuseState::TempFail;
 8000860:	463b      	mov	r3, r7
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fee9 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 800086a:	4603      	mov	r3, r0
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xca>
 8000880:	2304      	movs	r3, #4
 8000882:	e036      	b.n	80008f2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00010000) return SmartFuseState::OTPLVDS;
 8000884:	463b      	mov	r3, r7
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fed7 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 800088e:	4603      	mov	r3, r0
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf14      	ite	ne
 800089a:	2301      	movne	r3, #1
 800089c:	2300      	moveq	r3, #0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xee>
 80008a4:	2303      	movs	r3, #3
 80008a6:	e024      	b.n	80008f2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00100000) return SmartFuseState::SPIError;
 80008a8:	463b      	mov	r3, r7
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fec5 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80008b2:	4603      	mov	r3, r0
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	f003 0320 	and.w	r3, r3, #32
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bf14      	ite	ne
 80008be:	2301      	movne	r3, #1
 80008c0:	2300      	moveq	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x112>
 80008c8:	2302      	movs	r3, #2
 80008ca:	e012      	b.n	80008f2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b01000000) return SmartFuseState::ResetState;
 80008cc:	463b      	mov	r3, r7
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 feb3 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80008d6:	4603      	mov	r3, r0
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf14      	ite	ne
 80008e2:	2301      	movne	r3, #1
 80008e4:	2300      	moveq	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x136>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	return SmartFuseState::NotResponding;
 80008f0:	2308      	movs	r3, #8
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_ZN9SmartFuse4FuseC1Ev>:
SmartFuse::Fuse::Fuse()
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3304      	adds	r3, #4
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fed8 	bl	80016bc <_ZNSt4pairIttEC1IttLb1EEEv>
	active = false;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
	current = 0x0000;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	805a      	strh	r2, [r3, #2]
	state = FuseState::Ok;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	721a      	strb	r2, [r3, #8]
}
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1Ev>:
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2405      	movs	r4, #5
 8000934:	461d      	mov	r5, r3
 8000936:	2c00      	cmp	r4, #0
 8000938:	db05      	blt.n	8000946 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1Ev+0x1e>
 800093a:	4628      	mov	r0, r5
 800093c:	f7ff ffdd 	bl	80008fa <_ZN9SmartFuse4FuseC1Ev>
 8000940:	350a      	adds	r5, #10
 8000942:	3c01      	subs	r4, #1
 8000944:	e7f7      	b.n	8000936 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1Ev+0xe>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bdb0      	pop	{r4, r5, r7, pc}

08000950 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, const FusesSettings &fuses_settings) :
 8000950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000952:	b087      	sub	sp, #28
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	603b      	str	r3, [r7, #0]
					 port(port), pin(pin), hspi(hspi), fuses_settings(fuses_settings), toggle(false)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3308      	adds	r3, #8
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ffda 	bl	8000928 <_ZNSt5arrayIN9SmartFuse4FuseELj6EEC1Ev>
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	645a      	str	r2, [r3, #68]	; 0x44
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	649a      	str	r2, [r3, #72]	; 0x48
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8000986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000988:	4610      	mov	r0, r2
 800098a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800098e:	4602      	mov	r2, r0
 8000990:	4619      	mov	r1, r3
 8000992:	f8d1 c000 	ldr.w	ip, [r1]
 8000996:	684e      	ldr	r6, [r1, #4]
 8000998:	688d      	ldr	r5, [r1, #8]
 800099a:	68c9      	ldr	r1, [r1, #12]
 800099c:	f8c2 c000 	str.w	ip, [r2]
 80009a0:	6056      	str	r6, [r2, #4]
 80009a2:	6095      	str	r5, [r2, #8]
 80009a4:	60d1      	str	r1, [r2, #12]
 80009a6:	3310      	adds	r3, #16
 80009a8:	3010      	adds	r0, #16
 80009aa:	42a3      	cmp	r3, r4
 80009ac:	d1ef      	bne.n	800098e <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0x3e>
 80009ae:	4602      	mov	r2, r0
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	6011      	str	r1, [r2, #0]
 80009b4:	889b      	ldrh	r3, [r3, #4]
 80009b6:	8093      	strh	r3, [r2, #4]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3384      	adds	r3, #132	; 0x84
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 f827 	bl	8002a10 <_ZN5TimerC1Ev>
	for (int i = 0; i < 6; i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	2b05      	cmp	r3, #5
 80009ca:	dc22      	bgt.n	8000a12 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0xc2>
		this->fuses[i].clamping_currents = fuses_settings.clamping_currents[i];
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3308      	adds	r3, #8
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fe82 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 80009da:	4603      	mov	r3, r0
 80009dc:	1d18      	adds	r0, r3, #4
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3306      	adds	r3, #6
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e6:	4413      	add	r3, r2
 80009e8:	3306      	adds	r3, #6
 80009ea:	4619      	mov	r1, r3
 80009ec:	f000 fe86 	bl	80016fc <_ZNSt4pairIttEaSERKS0_>
		this->fuses[i].active = fuses_settings.active[i];
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3308      	adds	r3, #8
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fe70 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 80009fe:	4601      	mov	r1, r0
 8000a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	700b      	strb	r3, [r1, #0]
	for (int i = 0; i < 6; i++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e7d9      	b.n	80009c6 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0x76>
	slaveDeselect();
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f000 f816 	bl	8000a44 <_ZN9SmartFuse13slaveDeselectEv>
}
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	371c      	adds	r7, #28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a22 <_ZN9SmartFuse11slaveSelectEv>:
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	f003 f8d8 	bl	8003bec <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZN9SmartFuse13slaveDeselectEv>:
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f003 f8c7 	bl	8003bec <HAL_GPIO_WritePin>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_ZN9SmartFuse4initEv>:
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	this->reset();
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 fb1a 	bl	80010a8 <_ZN9SmartFuse5resetEv>
	this->setUpAllDutyCycles();
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 fb85 	bl	8001184 <_ZN9SmartFuse18setUpAllDutyCyclesEv>
	this->setUpAllSamplingModes();
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 fbd8 	bl	8001230 <_ZN9SmartFuse21setUpAllSamplingModesEv>
	this->setUpAllLatchOffTimers();
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 fc49 	bl	8001318 <_ZN9SmartFuse22setUpAllLatchOffTimersEv>
	this->setUpAllChanelsStates();
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 fcce 	bl	8001428 <_ZN9SmartFuse21setUpAllChanelsStatesEv>
	return this->state;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <_ZN9SmartFuse6enableEv>:
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	tx_data = { WRITE_RAM(0x14), 1 << 6, 0 };
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <_ZN9SmartFuse6enableEv+0x78>)
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	4611      	mov	r1, r2
 8000aae:	8019      	strh	r1, [r3, #0]
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	0c12      	lsrs	r2, r2, #16
 8000ab4:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	461a      	mov	r2, r3
 8000abc:	68f9      	ldr	r1, [r7, #12]
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 fd0e 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { WRITE_RAM(0x14), 1 << 3, 0 };
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <_ZN9SmartFuse6enableEv+0x7c>)
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	4611      	mov	r1, r2
 8000ace:	8019      	strh	r1, [r3, #0]
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	0c12      	lsrs	r2, r2, #16
 8000ad4:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	461a      	mov	r2, r3
 8000adc:	68f9      	ldr	r1, [r7, #12]
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 fcfe 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->watch_dog.restart();
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3384      	adds	r3, #132	; 0x84
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 ffa2 	bl	8002a32 <_ZN5Timer7restartEv>
	this->toggle = false;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
	this->state = getGSB(rx_data);
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fe5f 	bl	80007ba <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	return this->state;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	08004e48 	.word	0x08004e48
 8000b18:	08004e4c 	.word	0x08004e4c

08000b1c <_ZN9SmartFuse6handleEv>:
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b08f      	sub	sp, #60	; 0x3c
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	bool lock_state = false;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	bool fuse_state_changed = false;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	std::array < bool, 6 > read_fuses_states { false };
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	809a      	strh	r2, [r3, #4]
	std::array < uint8_t, 3 > tx_data { 0 };
 8000b3a:	4aa2      	ldr	r2, [pc, #648]	; (8000dc4 <_ZN9SmartFuse6handleEv+0x2a8>)
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	4611      	mov	r1, r2
 8000b44:	8019      	strh	r1, [r3, #0]
 8000b46:	3302      	adds	r3, #2
 8000b48:	0c12      	lsrs	r2, r2, #16
 8000b4a:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 > rx_data { 0 };
 8000b4c:	4a9d      	ldr	r2, [pc, #628]	; (8000dc4 <_ZN9SmartFuse6handleEv+0x2a8>)
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	4611      	mov	r1, r2
 8000b56:	8019      	strh	r1, [r3, #0]
 8000b58:	3302      	adds	r3, #2
 8000b5a:	0c12      	lsrs	r2, r2, #16
 8000b5c:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 6; i++) this->fuses[i].state = FuseState::Ok;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
 8000b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b64:	2b05      	cmp	r3, #5
 8000b66:	d80c      	bhi.n	8000b82 <_ZN9SmartFuse6handleEv+0x66>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3308      	adds	r3, #8
 8000b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fdb5 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2200      	movs	r2, #0
 8000b78:	721a      	strb	r2, [r3, #8]
 8000b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b80:	e7ef      	b.n	8000b62 <_ZN9SmartFuse6handleEv+0x46>
	if(watch_dog.getPassedTime() >= 31)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3384      	adds	r3, #132	; 0x84
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 ff60 	bl	8002a4c <_ZN5Timer13getPassedTimeEv>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b1e      	cmp	r3, #30
 8000b90:	bf8c      	ite	hi
 8000b92:	2301      	movhi	r3, #1
 8000b94:	2300      	movls	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d04d      	beq.n	8000c38 <_ZN9SmartFuse6handleEv+0x11c>
		this->toggle = !this->toggle;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	f083 0301 	eor.w	r3, r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	701a      	strb	r2, [r3, #0]
		tx_data[0] = READ_RAM(0x13);
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fd43 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2253      	movs	r2, #83	; 0x53
 8000bba:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	6939      	ldr	r1, [r7, #16]
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 fc8b 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		rx_data[2] &= ~(1 << 1);
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	2102      	movs	r1, #2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fd33 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	f022 0202 	bic.w	r2, r2, #2
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	701a      	strb	r2, [r3, #0]
		tx_data = { WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1) };
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2101      	movs	r1, #1
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fd27 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	781c      	ldrb	r4, [r3, #0]
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fd1f 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	b251      	sxtb	r1, r2
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	7812      	ldrb	r2, [r2, #0]
 8000c08:	0052      	lsls	r2, r2, #1
 8000c0a:	b252      	sxtb	r2, r2
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	b252      	sxtb	r2, r2
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2213      	movs	r2, #19
 8000c18:	743a      	strb	r2, [r7, #16]
 8000c1a:	4622      	mov	r2, r4
 8000c1c:	747a      	strb	r2, [r7, #17]
 8000c1e:	74bb      	strb	r3, [r7, #18]
		this->transmitReceiveData(tx_data, rx_data);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	461a      	mov	r2, r3
 8000c26:	6939      	ldr	r1, [r7, #16]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fc59 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3384      	adds	r3, #132	; 0x84
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fefd 	bl	8002a32 <_ZN5Timer7restartEv>
	for(size_t i = 0; i < 6; i++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	2b05      	cmp	r3, #5
 8000c40:	d850      	bhi.n	8000ce4 <_ZN9SmartFuse6handleEv+0x1c8>
		tx_data[0] = READ_RAM(0x28 + i);
 8000c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	3328      	adds	r3, #40	; 0x28
 8000c48:	b2dc      	uxtb	r4, r3
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fcf3 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f044 0240 	orr.w	r2, r4, #64	; 0x40
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	461a      	mov	r2, r3
 8000c66:	6939      	ldr	r1, [r7, #16]
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 fc39 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->fuses[i].current = uint16_t(rx_data[1]) << 4 | uint16_t(rx_data[2]) >> 4;
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	2101      	movs	r1, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fce1 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	011b      	lsls	r3, r3, #4
 8000c80:	b21c      	sxth	r4, r3
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2102      	movs	r1, #2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fcd7 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	4323      	orrs	r3, r4
 8000c9a:	b21c      	sxth	r4, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3308      	adds	r3, #8
 8000ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fd1b 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b2a2      	uxth	r2, r4
 8000cac:	805a      	strh	r2, [r3, #2]
		read_fuses_states[i] = bool(rx_data[2] & (1 << 2));
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fcc1 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	f003 0404 	and.w	r4, r3, #4
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fd2b 	bl	8001724 <_ZNSt5arrayIbLj6EEixEj>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2c00      	cmp	r4, #0
 8000cd2:	bf14      	ite	ne
 8000cd4:	2201      	movne	r2, #1
 8000cd6:	2200      	moveq	r2, #0
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 6; i++)
 8000cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cde:	3301      	adds	r3, #1
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ce2:	e7ab      	b.n	8000c3c <_ZN9SmartFuse6handleEv+0x120>
	for(size_t i = 0; i < 6; i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	d86c      	bhi.n	8000dc8 <_ZN9SmartFuse6handleEv+0x2ac>
		if (this->fuses[i].current < this->fuses[i].clamping_currents.first)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3308      	adds	r3, #8
 8000cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fcf2 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	885c      	ldrh	r4, [r3, #2]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3308      	adds	r3, #8
 8000d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fcea 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	889b      	ldrh	r3, [r3, #4]
 8000d0e:	429c      	cmp	r4, r3
 8000d10:	bf34      	ite	cc
 8000d12:	2301      	movcc	r3, #1
 8000d14:	2300      	movcs	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d01b      	beq.n	8000d54 <_ZN9SmartFuse6handleEv+0x238>
			this->fuses[i].active = false;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3308      	adds	r3, #8
 8000d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fcdb 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			fuse_state_changed = true;
 8000d34:	2301      	movs	r3, #1
 8000d36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			this->state = SmartFuseState::OTPLVDS;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			this->fuses[i].state = FuseState::UnderCurrent;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3308      	adds	r3, #8
 8000d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fcc8 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2201      	movs	r2, #1
 8000d52:	721a      	strb	r2, [r3, #8]
		if (this->fuses[i].current > this->fuses[i].clamping_currents.second)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3308      	adds	r3, #8
 8000d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fcbf 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000d60:	4603      	mov	r3, r0
 8000d62:	885c      	ldrh	r4, [r3, #2]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3308      	adds	r3, #8
 8000d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fcb7 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000d70:	4603      	mov	r3, r0
 8000d72:	88db      	ldrh	r3, [r3, #6]
 8000d74:	429c      	cmp	r4, r3
 8000d76:	bf8c      	ite	hi
 8000d78:	2301      	movhi	r3, #1
 8000d7a:	2300      	movls	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d01b      	beq.n	8000dba <_ZN9SmartFuse6handleEv+0x29e>
			this->fuses[i].active = false;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3308      	adds	r3, #8
 8000d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fca8 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			fuse_state_changed = true;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			this->state = SmartFuseState::OTPLVDS;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			this->fuses[i].state = FuseState::OverCurrent;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3308      	adds	r3, #8
 8000dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 fc95 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2202      	movs	r2, #2
 8000db8:	721a      	strb	r2, [r3, #8]
	for(size_t i = 0; i < 6; i++)
 8000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dc0:	e792      	b.n	8000ce8 <_ZN9SmartFuse6handleEv+0x1cc>
 8000dc2:	bf00      	nop
 8000dc4:	08004e50 	.word	0x08004e50
	if(fuse_state_changed)
 8000dc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d049      	beq.n	8000e64 <_ZN9SmartFuse6handleEv+0x348>
		tx_data[0] = WRITE_RAM(0x13);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fc30 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2213      	movs	r2, #19
 8000de0:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0x00;
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	2101      	movs	r1, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fc27 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 6; i++) tx_data[1] |= this->fuses[i].active << i;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	2b05      	cmp	r3, #5
 8000dfc:	dc1e      	bgt.n	8000e3c <_ZN9SmartFuse6handleEv+0x320>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3308      	adds	r3, #8
 8000e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fc69 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	fa02 f403 	lsl.w	r4, r2, r3
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fc0c 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000e24:	4603      	mov	r3, r0
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	b251      	sxtb	r1, r2
 8000e2a:	b262      	sxtb	r2, r4
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	b252      	sxtb	r2, r2
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	3301      	adds	r3, #1
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3a:	e7dd      	b.n	8000df8 <_ZN9SmartFuse6handleEv+0x2dc>
		tx_data[2] = this->toggle << 1;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461c      	mov	r4, r3
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	2102      	movs	r1, #2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fbf7 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	0062      	lsls	r2, r4, #1
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	6939      	ldr	r1, [r7, #16]
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fb3e 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < 6; i++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	2b05      	cmp	r3, #5
 8000e6c:	d82a      	bhi.n	8000ec4 <_ZN9SmartFuse6handleEv+0x3a8>
		if(this->fuses[i].active != read_fuses_states[i])
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3308      	adds	r3, #8
 8000e72:	6a39      	ldr	r1, [r7, #32]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fc32 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	781c      	ldrb	r4, [r3, #0]
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	6a39      	ldr	r1, [r7, #32]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fc4d 	bl	8001724 <_ZNSt5arrayIbLj6EEixEj>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	429c      	cmp	r4, r3
 8000e90:	bf14      	ite	ne
 8000e92:	2301      	movne	r3, #1
 8000e94:	2300      	moveq	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00f      	beq.n	8000ebc <_ZN9SmartFuse6handleEv+0x3a0>
			this->fuses[i].state = FuseState::ShortedToGround;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3308      	adds	r3, #8
 8000ea0:	6a39      	ldr	r1, [r7, #32]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fc1b 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2203      	movs	r2, #3
 8000eac:	721a      	strb	r2, [r3, #8]
			lock_state = true;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			this->state = SmartFuseState::OLOFF;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2206      	movs	r2, #6
 8000eb8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	for(size_t i = 0; i < 6; i++)
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
 8000ec2:	e7d1      	b.n	8000e68 <_ZN9SmartFuse6handleEv+0x34c>
	for(size_t i = 0; i < 6; i++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	f200 8082 	bhi.w	8000fd4 <_ZN9SmartFuse6handleEv+0x4b8>
		tx_data[0] = READ_AND_CLEAR(0x20 + i);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	3320      	adds	r3, #32
 8000ed6:	b2dc      	uxtb	r4, r3
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fbac 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f064 027f 	orn	r2, r4, #127	; 0x7f
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	6939      	ldr	r1, [r7, #16]
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 faf2 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		if(rx_data[1] & (1 << 0)) this->fuses[i].state = FuseState::LatchOff;
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2101      	movs	r1, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fb9a 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d008      	beq.n	8000f30 <_ZN9SmartFuse6handleEv+0x414>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3308      	adds	r3, #8
 8000f22:	69f9      	ldr	r1, [r7, #28]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fbda 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 2)) this->fuses[i].state = FuseState::STKFLTR;
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2101      	movs	r1, #1
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fb80 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf14      	ite	ne
 8000f48:	2301      	movne	r3, #1
 8000f4a:	2300      	moveq	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d008      	beq.n	8000f64 <_ZN9SmartFuse6handleEv+0x448>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3308      	adds	r3, #8
 8000f56:	69f9      	ldr	r1, [r7, #28]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fbc0 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2205      	movs	r2, #5
 8000f62:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 3)) this->fuses[i].state = FuseState::VDSFS;
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fb66 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000f70:	4603      	mov	r3, r0
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bf14      	ite	ne
 8000f7c:	2301      	movne	r3, #1
 8000f7e:	2300      	moveq	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d008      	beq.n	8000f98 <_ZN9SmartFuse6handleEv+0x47c>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3308      	adds	r3, #8
 8000f8a:	69f9      	ldr	r1, [r7, #28]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fba6 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2206      	movs	r2, #6
 8000f96:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 4)) this->fuses[i].state = FuseState::CHFBSR;
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fb4c 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d008      	beq.n	8000fcc <_ZN9SmartFuse6handleEv+0x4b0>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	69f9      	ldr	r1, [r7, #28]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fb8c 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2207      	movs	r2, #7
 8000fca:	721a      	strb	r2, [r3, #8]
	for(size_t i = 0; i < 6; i++)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e779      	b.n	8000ec8 <_ZN9SmartFuse6handleEv+0x3ac>
	if (!lock_state) this->state = getGSB(rx_data);
 8000fd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fd8:	f083 0301 	eor.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d008      	beq.n	8000ff4 <_ZN9SmartFuse6handleEv+0x4d8>
 8000fe2:	68f9      	ldr	r1, [r7, #12]
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fbe8 	bl	80007ba <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	return this->state;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	373c      	adds	r7, #60	; 0x3c
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop

08001004 <_ZNK9SmartFuse8getStateEv>:
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	return this->state;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_ZN9SmartFuse13getFuseStatesEv>:
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
	return { this->fuses[0].state, this->fuses[1].state, this->fuses[2].state,
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3308      	adds	r3, #8
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fb55 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8001034:	4603      	mov	r3, r0
 8001036:	7a1a      	ldrb	r2, [r3, #8]
			 this->fuses[3].state, this->fuses[4].state, this->fuses[5].state };
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	701a      	strb	r2, [r3, #0]
	return { this->fuses[0].state, this->fuses[1].state, this->fuses[2].state,
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3308      	adds	r3, #8
 8001040:	2101      	movs	r1, #1
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fb4b 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8001048:	4603      	mov	r3, r0
 800104a:	7a1a      	ldrb	r2, [r3, #8]
			 this->fuses[3].state, this->fuses[4].state, this->fuses[5].state };
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	705a      	strb	r2, [r3, #1]
	return { this->fuses[0].state, this->fuses[1].state, this->fuses[2].state,
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3308      	adds	r3, #8
 8001054:	2102      	movs	r1, #2
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fb41 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 800105c:	4603      	mov	r3, r0
 800105e:	7a1a      	ldrb	r2, [r3, #8]
			 this->fuses[3].state, this->fuses[4].state, this->fuses[5].state };
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	709a      	strb	r2, [r3, #2]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3308      	adds	r3, #8
 8001068:	2103      	movs	r1, #3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fb37 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8001070:	4603      	mov	r3, r0
 8001072:	7a1a      	ldrb	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	70da      	strb	r2, [r3, #3]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	3308      	adds	r3, #8
 800107c:	2104      	movs	r1, #4
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fb2d 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8001084:	4603      	mov	r3, r0
 8001086:	7a1a      	ldrb	r2, [r3, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	711a      	strb	r2, [r3, #4]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3308      	adds	r3, #8
 8001090:	2105      	movs	r1, #5
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fb23 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 8001098:	4603      	mov	r3, r0
 800109a:	7a1a      	ldrb	r2, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	715a      	strb	r2, [r3, #5]
}
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZN9SmartFuse5resetEv>:
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	tx_data = { RESET_SMARTFUSE(), 0, 0 };
 80010b0:	23ff      	movs	r3, #255	; 0xff
 80010b2:	743b      	strb	r3, [r7, #16]
 80010b4:	2300      	movs	r3, #0
 80010b6:	747b      	strb	r3, [r7, #17]
 80010b8:	2300      	movs	r3, #0
 80010ba:	74bb      	strb	r3, [r7, #18]
	this->transmitReceiveData(tx_data, rx_data);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	461a      	mov	r2, r3
 80010c2:	6939      	ldr	r1, [r7, #16]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fa0b 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { READ_ROM(0x01), 0, 0 };
 80010ca:	23c1      	movs	r3, #193	; 0xc1
 80010cc:	743b      	strb	r3, [r7, #16]
 80010ce:	2300      	movs	r3, #0
 80010d0:	747b      	strb	r3, [r7, #17]
 80010d2:	2300      	movs	r3, #0
 80010d4:	74bb      	strb	r3, [r7, #18]
	for (size_t i = 0; i < fuse_timeout; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d844      	bhi.n	800116a <_ZN9SmartFuse5resetEv+0xc2>
		if(!IF_RESET_STATE(rx_data)) break;
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 faa8 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80010ec:	4603      	mov	r3, r0
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d113      	bne.n	800111c <_ZN9SmartFuse5resetEv+0x74>
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2101      	movs	r1, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fa9e 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8001100:	4603      	mov	r3, r0
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d109      	bne.n	800111c <_ZN9SmartFuse5resetEv+0x74>
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fa94 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8001114:	4603      	mov	r3, r0
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00d      	beq.n	8001138 <_ZN9SmartFuse5resetEv+0x90>
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fa8a 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8001128:	4603      	mov	r3, r0
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <_ZN9SmartFuse5resetEv+0x90>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <_ZN9SmartFuse5resetEv+0x92>
 8001138:	2300      	movs	r3, #0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d114      	bne.n	8001168 <_ZN9SmartFuse5resetEv+0xc0>
		else if(i == fuse_timeout - 1)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d103      	bne.n	800114c <_ZN9SmartFuse5resetEv+0xa4>
			this->state = SmartFuseState::NotResponding;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2208      	movs	r2, #8
 8001148:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		this->transmitReceiveData(tx_data, rx_data);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	461a      	mov	r2, r3
 8001152:	6939      	ldr	r1, [r7, #16]
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f9c3 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f001 fd22 	bl	8002ba4 <HAL_Delay>
	for (size_t i = 0; i < fuse_timeout; i++)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	e7b8      	b.n	80010da <_ZN9SmartFuse5resetEv+0x32>
		if(!IF_RESET_STATE(rx_data)) break;
 8001168:	bf00      	nop
	this->state = getGSB(rx_data);
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fb24 	bl	80007ba <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <_ZN9SmartFuse18setUpAllDutyCyclesEv>:
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < 6; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b05      	cmp	r3, #5
 8001194:	d83e      	bhi.n	8001214 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0x90>
		tx_data[0] = WRITE_RAM(0x00 + i);
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fa4d 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80011a2:	4603      	mov	r3, r0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
		tx_data[1] = uint8_t(this->fuses_settings.duty_cycle[i] >> 4);
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	332c      	adds	r3, #44	; 0x2c
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	88db      	ldrh	r3, [r3, #6]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	b29c      	uxth	r4, r3
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	2101      	movs	r1, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fa3b 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b2e2      	uxtb	r2, r4
 80011ca:	701a      	strb	r2, [r3, #0]
		tx_data[2] = uint8_t(this->fuses_settings.duty_cycle[i] << 4) | this->toggle << 1;
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	332c      	adds	r3, #44	; 0x2c
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	88db      	ldrh	r3, [r3, #6]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	b25a      	sxtb	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b25c      	sxtb	r4, r3
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	2102      	movs	r1, #2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fa22 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b2e2      	uxtb	r2, r4
 80011fc:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	461a      	mov	r2, r3
 8001204:	6939      	ldr	r1, [r7, #16]
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f96a 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < 6; i++)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e7bd      	b.n	8001190 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0xc>
	this->state = getGSB(rx_data);
 8001214:	68f9      	ldr	r1, [r7, #12]
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff facf 	bl	80007ba <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8001226:	bf00      	nop
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
	...

08001230 <_ZN9SmartFuse21setUpAllSamplingModesEv>:
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data = { 0, 0, 0 };
 8001238:	4a36      	ldr	r2, [pc, #216]	; (8001314 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xe4>)
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	4611      	mov	r1, r2
 8001242:	8019      	strh	r1, [r3, #0]
 8001244:	3302      	adds	r3, #2
 8001246:	0c12      	lsrs	r2, r2, #16
 8001248:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 6; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b05      	cmp	r3, #5
 8001252:	d852      	bhi.n	80012fa <_ZN9SmartFuse21setUpAllSamplingModesEv+0xca>
		tx_data[0] = WRITE_RAM(0x08 + i);
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	b2dc      	uxtb	r4, r3
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f9ec 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8001264:	4603      	mov	r3, r0
 8001266:	f104 0208 	add.w	r2, r4, #8
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]
		switch (this->fuses_settings.sampling_mode[i])
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	4413      	add	r3, r2
 8001274:	3358      	adds	r3, #88	; 0x58
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b03      	cmp	r3, #3
 800127a:	d833      	bhi.n	80012e4 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <_ZN9SmartFuse21setUpAllSamplingModesEv+0x54>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	08001295 	.word	0x08001295
 8001288:	080012a9 	.word	0x080012a9
 800128c:	080012bd 	.word	0x080012bd
 8001290:	080012d1 	.word	0x080012d1
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	2102      	movs	r1, #2
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f9ce 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e01d      	b.n	80012e4 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2102      	movs	r1, #2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f9c4 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2240      	movs	r2, #64	; 0x40
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e013      	b.n	80012e4 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	2102      	movs	r1, #2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f9ba 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	e009      	b.n	80012e4 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	2102      	movs	r1, #2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f9b0 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80012dc:	4603      	mov	r3, r0
 80012de:	22c0      	movs	r2, #192	; 0xc0
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	bf00      	nop
		this->transmitReceiveData(tx_data, rx_data);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	461a      	mov	r2, r3
 80012ea:	6939      	ldr	r1, [r7, #16]
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f8f7 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < 6; i++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e7a9      	b.n	800124e <_ZN9SmartFuse21setUpAllSamplingModesEv+0x1e>
	this->state = getGSB(rx_data);
 80012fa:	68f9      	ldr	r1, [r7, #12]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fa5c 	bl	80007ba <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	08004e54 	.word	0x08004e54

08001318 <_ZN9SmartFuse22setUpAllLatchOffTimersEv>:
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 8001320:	4a40      	ldr	r2, [pc, #256]	; (8001424 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x10c>)
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	4611      	mov	r1, r2
 800132a:	8019      	strh	r1, [r3, #0]
 800132c:	3302      	adds	r3, #2
 800132e:	0c12      	lsrs	r2, r2, #16
 8001330:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 > rx_data { 0, 0, 0 };
 8001332:	4a3c      	ldr	r2, [pc, #240]	; (8001424 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x10c>)
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	4611      	mov	r1, r2
 800133c:	8019      	strh	r1, [r3, #0]
 800133e:	3302      	adds	r3, #2
 8001340:	0c12      	lsrs	r2, r2, #16
 8001342:	701a      	strb	r2, [r3, #0]
	tx_data[1] = this->fuses_settings.latch_off_time_out[2] << 4 |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	b25a      	sxtb	r2, r3
		   this->fuses_settings.latch_off_time_out[1];
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001354:	b25b      	sxtb	r3, r3
	tx_data[1] = this->fuses_settings.latch_off_time_out[2] << 4 |
 8001356:	4313      	orrs	r3, r2
 8001358:	b25c      	sxtb	r4, r3
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2101      	movs	r1, #1
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f96b 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8001366:	4603      	mov	r3, r0
 8001368:	b2e2      	uxtb	r2, r4
 800136a:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->fuses_settings.latch_off_time_out[1] << 4;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 4053 	ldrb.w	r4, [r3, #83]	; 0x53
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2102      	movs	r1, #2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f95f 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 800137e:	4603      	mov	r3, r0
 8001380:	0122      	lsls	r2, r4, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x10);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f955 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8001392:	4603      	mov	r3, r0
 8001394:	2210      	movs	r2, #16
 8001396:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	461a      	mov	r2, r3
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f89d 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data[1] = this->fuses_settings.latch_off_time_out[5] << 4 |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	b25a      	sxtb	r2, r3
	       this->fuses_settings.latch_off_time_out[4];
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80013b6:	b25b      	sxtb	r3, r3
	tx_data[1] = this->fuses_settings.latch_off_time_out[5] << 4 |
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25c      	sxtb	r4, r3
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2101      	movs	r1, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f93a 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b2e2      	uxtb	r2, r4
 80013cc:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->fuses_settings.latch_off_time_out[3] << 4;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 4055 	ldrb.w	r4, [r3, #85]	; 0x55
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2102      	movs	r1, #2
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f92e 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80013e0:	4603      	mov	r3, r0
 80013e2:	0122      	lsls	r2, r4, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x11);
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f924 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2211      	movs	r2, #17
 80013f8:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	461a      	mov	r2, r3
 8001400:	68f9      	ldr	r1, [r7, #12]
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f86c 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff f9d5 	bl	80007ba <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	08004e54 	.word	0x08004e54

08001428 <_ZN9SmartFuse21setUpAllChanelsStatesEv>:
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	tx_data[0] = WRITE_RAM(0x13);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f900 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 800143c:	4603      	mov	r3, r0
 800143e:	2213      	movs	r2, #19
 8001440:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	2101      	movs	r1, #1
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f8f7 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 800144e:	4603      	mov	r3, r0
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++) tx_data[1] |= this->fuses[i].active << i;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b05      	cmp	r3, #5
 800145c:	dc1e      	bgt.n	800149c <_ZN9SmartFuse21setUpAllChanelsStatesEv+0x74>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3308      	adds	r3, #8
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f939 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 800146c:	4603      	mov	r3, r0
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	fa02 f403 	lsl.w	r4, r2, r3
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2101      	movs	r1, #1
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f8dc 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8001484:	4603      	mov	r3, r0
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	b251      	sxtb	r1, r2
 800148a:	b262      	sxtb	r2, r4
 800148c:	430a      	orrs	r2, r1
 800148e:	b252      	sxtb	r2, r2
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	701a      	strb	r2, [r3, #0]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e7dd      	b.n	8001458 <_ZN9SmartFuse21setUpAllChanelsStatesEv+0x30>
	tx_data[2] = this->toggle << 1;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	2102      	movs	r1, #2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f8c7 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80014ae:	4603      	mov	r3, r0
 80014b0:	0062      	lsls	r2, r4, #1
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	461a      	mov	r2, r3
 80014bc:	6939      	ldr	r1, [r7, #16]
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f80e 	bl	80014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff f977 	bl	80007ba <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 80014d6:	bf00      	nop
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}
	...

080014e0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>:
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f6:	2b40      	cmp	r3, #64	; 0x40
 80014f8:	bf14      	ite	ne
 80014fa:	2301      	movne	r3, #1
 80014fc:	2300      	moveq	r3, #0
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x34>
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001512:	601a      	str	r2, [r3, #0]
	calculateParityBit(tx_data);
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f921 	bl	8000760 <_ZL18calculateParityBitRSt5arrayIhLj3EE>
	this->slaveSelect();
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff fa7f 	bl	8000a22 <_ZN9SmartFuse11slaveSelectEv>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001524:	2300      	movs	r3, #0
 8001526:	75fb      	strb	r3, [r7, #23]
 8001528:	2300      	movs	r3, #0
 800152a:	75bb      	strb	r3, [r7, #22]
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d902      	bls.n	8001538 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x58>
 8001532:	7dbb      	ldrb	r3, [r7, #22]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d83e      	bhi.n	80015b6 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xd6>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b01      	cmp	r3, #1
 8001544:	d104      	bne.n	8001550 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8001546:	7dbb      	ldrb	r3, [r7, #22]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d801      	bhi.n	8001550 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x72>
 8001550:	2300      	movs	r3, #0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00f      	beq.n	8001576 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x96>
			(*(uint8_t*) &rx_data[rx]) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f103 040c 	add.w	r4, r3, #12
 800155e:	7dbb      	ldrb	r3, [r7, #22]
 8001560:	4619      	mov	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f86a 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 8001568:	4603      	mov	r3, r0
 800156a:	7822      	ldrb	r2, [r4, #0]
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]
			rx++;
 8001570:	7dbb      	ldrb	r3, [r7, #22]
 8001572:	3301      	adds	r3, #1
 8001574:	75bb      	strb	r3, [r7, #22]
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b02      	cmp	r3, #2
 8001582:	d104      	bne.n	800158e <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d801      	bhi.n	800158e <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xb0>
 800158e:	2300      	movs	r3, #0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0cb      	beq.n	800152c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = tx_data[tx];
 8001594:	7dfa      	ldrb	r2, [r7, #23]
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f84d 	bl	800163c <_ZNSt5arrayIhLj3EEixEj>
 80015a2:	4602      	mov	r2, r0
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	330c      	adds	r3, #12
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	701a      	strb	r2, [r3, #0]
			tx++;
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	3301      	adds	r3, #1
 80015b2:	75fb      	strb	r3, [r7, #23]
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 80015b4:	e7ba      	b.n	800152c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
	this->slaveDeselect();
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f7ff fa44 	bl	8000a44 <_ZN9SmartFuse13slaveDeselectEv>
}
 80015bc:	bf00      	nop
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	200001a4 	.word	0x200001a4

080015c8 <_ZN9SmartFuse14getFuseCurrentE10FuseNumber>:
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
	return this->fuses[size_t(fuse)].current;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3308      	adds	r3, #8
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f87e 	bl	80016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>
 80015e2:	4603      	mov	r3, r0
 80015e4:	885b      	ldrh	r3, [r3, #2]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>:
  ///\ingroup binary
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR14
    typename etl::enable_if<etl::is_integral<T>::value && etl::is_unsigned<T>::value && (etl::integral_limits<T>::bits == 8U), uint_least8_t>::type
    count_bits(T value)
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  {
#if ETL_CPP23_SUPPORTED && ETL_USING_STL
    return std::popcount(value);
#else
    uint32_t count = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]

    count = value - ((value >> 1U) & 0x55U);
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	60fb      	str	r3, [r7, #12]
    count = ((count >> 2U) & 0x33U) + (count & 0x33U);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800161a:	4413      	add	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
    count = ((count >> 4U) + count) & 0x0FU;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	091a      	lsrs	r2, r3, #4
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	60fb      	str	r3, [r7, #12]

    return uint_least8_t(count);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	b2db      	uxtb	r3, r3
#endif
  }
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_ZNSt5arrayIhLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6839      	ldr	r1, [r7, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f8c2 	bl	80017d4 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_ZN3etl6bitsetILj8EEC1Ey>:
    }

    //*************************************************************************
    /// Construct from a value.
    //*************************************************************************
    bitset(unsigned long long value)
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	e9c7 2300 	strd	r2, r3, [r7]
      : etl::ibitset(MAXN, ARRAY_SIZE, data)
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3310      	adds	r3, #16
 800166c:	2201      	movs	r2, #1
 800166e:	2108      	movs	r1, #8
 8001670:	f7fe ffac 	bl	80005cc <_ZN3etl7ibitsetC1EjjPh>
    {
      initialise(value);
 8001674:	68f9      	ldr	r1, [r7, #12]
 8001676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800167a:	4608      	mov	r0, r1
 800167c:	f7fe ff64 	bl	8000548 <_ZN3etl7ibitset10initialiseEy>
    }
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>:
      begin() noexcept
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f8ac 	bl	80017f0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001698:	4603      	mov	r3, r0
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>:
      end() noexcept
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f8a0 	bl	80017f0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 80016b0:	4603      	mov	r3, r0
 80016b2:	333c      	adds	r3, #60	; 0x3c
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_ZNSt4pairIttEC1IttLb1EEEv>:
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>
#endif
      _GLIBCXX_CONSTEXPR pair()
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	801a      	strh	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	805a      	strh	r2, [r3, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_ZNSt5arrayIN9SmartFuse4FuseELj6EEixEj>:
      operator[](size_type __n) noexcept
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f88c 	bl	800180a <_ZNSt14__array_traitsIN9SmartFuse4FuseELj6EE6_S_refERA6_KS1_j>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZNSt4pairIttEaSERKS0_>:
      template<typename... _Args1, typename... _Args2>
	_GLIBCXX20_CONSTEXPR
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      _GLIBCXX20_CONSTEXPR pair&
      operator=(typename conditional<
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
		__and_<is_copy_assignable<_T1>,
		       is_copy_assignable<_T2>>::value,
		const pair&, const __nonesuch&>::type __p)
      {
	first = __p.first;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	881a      	ldrh	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	801a      	strh	r2, [r3, #0]
	second = __p.second;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	885a      	ldrh	r2, [r3, #2]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	805a      	strh	r2, [r3, #2]
	return *this;
 8001716:	687b      	ldr	r3, [r7, #4]
      }
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_ZNSt5arrayIbLj6EEixEj>:
      operator[](size_type __n) noexcept
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6839      	ldr	r1, [r7, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f87b 	bl	800182e <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>
 8001738:	4603      	mov	r3, r0
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_ZN3etl7ivectorI9SmartFuseE5beginEv>:

    //*********************************************************************
    /// Returns an iterator to the beginning of the vector.
    ///\return An iterator to the beginning of the vector.
    //*********************************************************************
    iterator begin()
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
    {
      return p_buffer;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
    }
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_ZN3etl7ivectorI9SmartFuseE3endEv>:

    //*********************************************************************
    /// Returns an iterator to the end of the vector.
    ///\return An iterator to the end of the vector.
    //*********************************************************************
    iterator end()
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
    {
      return p_end;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
    }
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>:
      operator[](size_type __n) noexcept
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f000 f862 	bl	800184a <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>
 8001786:	4603      	mov	r3, r0
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_ZN3etl7ivectorI9SmartFuseEixEj>:
    //*********************************************************************
    /// Returns a reference to the value at index 'i'
    ///\param i The index.
    ///\return A reference to the value at index 'i'
    //*********************************************************************
    reference operator [](size_t i)
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
    {
      return p_buffer[i];
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6859      	ldr	r1, [r3, #4]
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	440b      	add	r3, r1
    }
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_ZNSt5arrayIS_I9FuseStateLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f84e 	bl	8001866 <_ZNSt14__array_traitsISt5arrayI9FuseStateLj6EELj4EE6_S_refERA4_KS2_j>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f845 	bl	800188a <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>
 8001800:	4603      	mov	r3, r0
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_ZNSt14__array_traitsIN9SmartFuse4FuseELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	4413      	add	r3, r2
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	4413      	add	r3, r2
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_ZNSt14__array_traitsISt5arrayI9FuseStateLj6EELj4EE6_S_refERA4_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_ZN11GpioElementD1Ev>:
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		//virtual void handle();
		virtual ~GpioElement() { };
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <_ZN11GpioElementD1Ev+0x1c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	08004e80 	.word	0x08004e80

080018c0 <_ZN11GpioElementD0Ev>:
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffe9 	bl	80018a0 <_ZN11GpioElementD1Ev>
 80018ce:	2110      	movs	r1, #16
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f003 fa0c 	bl	8004cee <_ZdlPvj>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
 *      Author: Piotr Lesicki
 */

#include "gpio elements.hpp"

GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	70fb      	strb	r3, [r7, #3]
						 port(port), pin(pin), is_inverted(is_inverted) { }
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x34>)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	715a      	strb	r2, [r3, #5]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	08004e80 	.word	0x08004e80

08001918 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin) :
							   GpioElement(port, pin, false) { }

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	70fb      	strb	r3, [r7, #3]
							   GpioElement(port, pin, is_inverted) { }
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	f7ff ffd7 	bl	80018e0 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x2c>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	08004e70 	.word	0x08004e70

08001948 <_ZN14GpioOutElement8activateEv>:

void GpioOutElement::activate()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68d8      	ldr	r0, [r3, #12]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	b299      	uxth	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	795b      	ldrb	r3, [r3, #5]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <_ZN14GpioOutElement8activateEv+0x1e>
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <_ZN14GpioOutElement8activateEv+0x20>
 8001966:	2301      	movs	r3, #1
 8001968:	461a      	mov	r2, r3
 800196a:	f002 f93f 	bl	8003bec <HAL_GPIO_WritePin>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <_ZN14GpioOutElement10deactivateEv>:

void GpioOutElement::deactivate()
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68d8      	ldr	r0, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	b299      	uxth	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	795b      	ldrb	r3, [r3, #5]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <_ZN14GpioOutElement10deactivateEv+0x1e>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <_ZN14GpioOutElement10deactivateEv+0x20>
 8001994:	2300      	movs	r3, #0
 8001996:	461a      	mov	r2, r3
 8001998:	f002 f928 	bl	8003bec <HAL_GPIO_WritePin>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>:
}

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin) :
							 GpioElement(port, pin, false) { }

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	70fb      	strb	r3, [r7, #3]
							 GpioElement(port, pin, is_inverted) { }
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	f7ff ff91 	bl	80018e0 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb+0x2c>)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	08004e60 	.word	0x08004e60

080019d4 <_ZN13GpioInElement8isActiveEv>:

bool GpioInElement::isActive()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	 *		  1  |    1   |  0
	 *
	 *	  basically a XOR operation
	 *
	 */
	return ((HAL_GPIO_ReadPin((GPIO_TypeDef*)(this->port), this->pin) == GPIO_PIN_SET) != this->is_inverted);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	4610      	mov	r0, r2
 80019ea:	f002 f8e7 	bl	8003bbc <HAL_GPIO_ReadPin>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	795b      	ldrb	r3, [r3, #5]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	bf14      	ite	ne
 8001a04:	2301      	movne	r3, #1
 8001a06:	2300      	moveq	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <_ZN13GpioInElementD1Ev>:

		//void handle() override;
		void toggle();
};

class GpioInElement : public GpioElement
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_ZN13GpioInElementD1Ev+0x20>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff3b 	bl	80018a0 <_ZN11GpioElementD1Ev>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	08004e60 	.word	0x08004e60

08001a38 <_ZN13GpioInElementD0Ev>:
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffe7 	bl	8001a14 <_ZN13GpioInElementD1Ev>
 8001a46:	2110      	movs	r1, #16
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f003 f950 	bl	8004cee <_ZdlPvj>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZN14GpioOutElementD1Ev>:
class GpioOutElement : public GpioElement
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_ZN14GpioOutElementD1Ev+0x20>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff19 	bl	80018a0 <_ZN11GpioElementD1Ev>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	08004e70 	.word	0x08004e70

08001a7c <_ZN14GpioOutElementD0Ev>:
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ffe7 	bl	8001a58 <_ZN14GpioOutElementD1Ev>
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f003 f92e 	bl	8004cee <_ZdlPvj>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a63      	ldr	r2, [pc, #396]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b61      	ldr	r3, [pc, #388]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aca:	4b5e      	ldr	r3, [pc, #376]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4a5d      	ldr	r2, [pc, #372]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4b5b      	ldr	r3, [pc, #364]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b58      	ldr	r3, [pc, #352]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4a57      	ldr	r2, [pc, #348]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aee:	4b55      	ldr	r3, [pc, #340]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	4b52      	ldr	r3, [pc, #328]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a51      	ldr	r2, [pc, #324]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b06:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a4b      	ldr	r2, [pc, #300]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <MX_GPIO_Init+0x1a8>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	4846      	ldr	r0, [pc, #280]	; (8001c48 <MX_GPIO_Init+0x1ac>)
 8001b30:	f002 f85c 	bl	8003bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	211e      	movs	r1, #30
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f002 f856 	bl	8003bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8001b46:	4841      	ldr	r0, [pc, #260]	; (8001c4c <MX_GPIO_Init+0x1b0>)
 8001b48:	f002 f850 	bl	8003bec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001b4c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001b50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b52:	2303      	movs	r3, #3
 8001b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4839      	ldr	r0, [pc, #228]	; (8001c48 <MX_GPIO_Init+0x1ac>)
 8001b62:	f001 fe99 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b66:	230f      	movs	r3, #15
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4832      	ldr	r0, [pc, #200]	; (8001c48 <MX_GPIO_Init+0x1ac>)
 8001b7e:	f001 fe8b 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b82:	f248 7301 	movw	r3, #34561	; 0x8701
 8001b86:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9a:	f001 fe7d 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001b9e:	231e      	movs	r3, #30
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb8:	f001 fe6e 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001bbc:	2357      	movs	r3, #87	; 0x57
 8001bbe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	481f      	ldr	r0, [pc, #124]	; (8001c4c <MX_GPIO_Init+0x1b0>)
 8001bd0:	f001 fe62 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001bd4:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8001bd8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4818      	ldr	r0, [pc, #96]	; (8001c4c <MX_GPIO_Init+0x1b0>)
 8001bea:	f001 fe55 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4813      	ldr	r0, [pc, #76]	; (8001c50 <MX_GPIO_Init+0x1b4>)
 8001c02:	f001 fe49 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8001c06:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8001c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480b      	ldr	r0, [pc, #44]	; (8001c4c <MX_GPIO_Init+0x1b0>)
 8001c20:	f001 fe3a 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c24:	2308      	movs	r3, #8
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4807      	ldr	r0, [pc, #28]	; (8001c54 <MX_GPIO_Init+0x1b8>)
 8001c38:	f001 fe2e 	bl	8003898 <HAL_GPIO_Init>

}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	; 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48000800 	.word	0x48000800
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000c00 	.word	0x48000c00
 8001c54:	48001c00 	.word	0x48001c00

08001c58 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	601a      	str	r2, [r3, #0]
    {
    }
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_ZN16SmartFuseHandlerILm4EEC1Ev>:

		SmartFuseState getGSB(std::array < uint8_t, 3 > x);
};

template <uint32_t num_of_sf>
class SmartFuseHandler
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fc03 	bl	80024a4 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_ZN11GpioElementC1ERKS_>:
class GpioElement
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <_ZN11GpioElementC1ERKS_+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	791a      	ldrb	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	711a      	strb	r2, [r3, #4]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	795a      	ldrb	r2, [r3, #5]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	715a      	strb	r2, [r3, #5]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	08004e80 	.word	0x08004e80

08001cec <_ZN13GpioInElementC1ERKS_>:
class GpioInElement : public GpioElement
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ffd3 	bl	8001ca8 <_ZN11GpioElementC1ERKS_>
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <_ZN13GpioInElementC1ERKS_+0x28>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	08004e60 	.word	0x08004e60

08001d18 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
{
	public:
	  CAN_TxHeaderTypeDef header;
	  uint8_t buff[max_dlc_size];

	  constexpr Can_tx_message(const T &data, const CAN_TxHeaderTypeDef &message_header)
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
								  : header{message_header}
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4614      	mov	r4, r2
 8001d2a:	461d      	mov	r5, r3
 8001d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d34:	e884 0003 	stmia.w	r4, {r0, r1}
			static_assert(std::is_trivially_constructible<T>(), "Object must by C like struct");
			static_assert(std::is_class<T>(), "Object must by C like struct");
			static_assert(std::is_standard_layout<T>(), "Object must by C like struct");
			static_assert(std::is_trivially_copyable<T>(), "Object must by C like struct");
			static_assert(sizeof(T) <= max_dlc_size, "Object size must be less than 8bytes");
			std::memcpy(this->buff, &data, sizeof(T));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3318      	adds	r3, #24
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 f805 	bl	8004d50 <memcpy>
	  }
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}

08001d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	f5ad 7d60 	sub.w	sp, sp, #896	; 0x380
 8001d56:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	SmartFuseHandler<4> sf_handler;
 8001d58:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff96 	bl	8001c8e <_ZN16SmartFuseHandlerILm4EEC1Ev>

	uint8_t _1 = 0x2;
 8001d62:	2302      	movs	r3, #2
 8001d64:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f

	FusesSettings fuses_settings
 8001d68:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001d6c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001d70:	4618      	mov	r0, r3
 8001d72:	2336      	movs	r3, #54	; 0x36
 8001d74:	461a      	mov	r2, r3
 8001d76:	2100      	movs	r1, #0
 8001d78:	f002 fff8 	bl	8004d6c <memset>
 8001d7c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001d80:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001d8c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001d90:	2201      	movs	r2, #1
 8001d92:	705a      	strb	r2, [r3, #1]
 8001d94:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001d98:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	709a      	strb	r2, [r3, #2]
 8001da0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001da4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001da8:	2201      	movs	r2, #1
 8001daa:	70da      	strb	r2, [r3, #3]
 8001dac:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001db0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001db4:	2201      	movs	r2, #1
 8001db6:	711a      	strb	r2, [r3, #4]
 8001db8:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001dbc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	715a      	strb	r2, [r3, #5]
 8001dc4:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001dc8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001dcc:	2202      	movs	r2, #2
 8001dce:	731a      	strb	r2, [r3, #12]
 8001dd0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001dd4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001dd8:	2202      	movs	r2, #2
 8001dda:	735a      	strb	r2, [r3, #13]
 8001ddc:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001de0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001de4:	2202      	movs	r2, #2
 8001de6:	739a      	strb	r2, [r3, #14]
 8001de8:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001dec:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001df0:	2202      	movs	r2, #2
 8001df2:	73da      	strb	r2, [r3, #15]
 8001df4:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001df8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	741a      	strb	r2, [r3, #16]
 8001e00:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e04:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e08:	2202      	movs	r2, #2
 8001e0a:	745a      	strb	r2, [r3, #17]
 8001e0c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e10:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e14:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001e18:	825a      	strh	r2, [r3, #18]
 8001e1a:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e1e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e22:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001e26:	829a      	strh	r2, [r3, #20]
 8001e28:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e2c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e30:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001e34:	82da      	strh	r2, [r3, #22]
 8001e36:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e3a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e3e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001e42:	831a      	strh	r2, [r3, #24]
 8001e44:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e48:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e4c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001e50:	835a      	strh	r2, [r3, #26]
 8001e52:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e56:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001e5e:	839a      	strh	r2, [r3, #28]
 8001e60:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e64:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e6c:	841a      	strh	r2, [r3, #32]
 8001e6e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e72:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e7a:	849a      	strh	r2, [r3, #36]	; 0x24
 8001e7c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e80:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28
 8001e8a:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e8e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e96:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001e98:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001e9c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea4:	861a      	strh	r2, [r3, #48]	; 0x30
 8001ea6:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001eaa:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb2:	869a      	strh	r2, [r3, #52]	; 0x34
		.latch_off_time_out = { _1, _1, _1, _1, _1, _1 },
		.sampling_mode = { SamplingMode::Continuous, SamplingMode::Continuous, SamplingMode::Continuous,
							SamplingMode::Continuous, SamplingMode::Continuous, SamplingMode::Continuous },
		.duty_cycle = { 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff },
		.clamping_currents = { { 0x0000, 0xffff },  { 0x0000, 0xffff }, { 0x0000, 0xffff }, { 0x0000, 0xffff }, { 0x0000, 0xffff }, { 0x0000, 0xffff } }
	};
 8001eb4:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001eb8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001ebc:	f897 235f 	ldrb.w	r2, [r7, #863]	; 0x35f
 8001ec0:	719a      	strb	r2, [r3, #6]
 8001ec2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001ec6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001eca:	f897 235f 	ldrb.w	r2, [r7, #863]	; 0x35f
 8001ece:	71da      	strb	r2, [r3, #7]
 8001ed0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001ed4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001ed8:	f897 235f 	ldrb.w	r2, [r7, #863]	; 0x35f
 8001edc:	721a      	strb	r2, [r3, #8]
 8001ede:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001ee2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001ee6:	f897 235f 	ldrb.w	r2, [r7, #863]	; 0x35f
 8001eea:	725a      	strb	r2, [r3, #9]
 8001eec:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001ef0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001ef4:	f897 235f 	ldrb.w	r2, [r7, #863]	; 0x35f
 8001ef8:	729a      	strb	r2, [r3, #10]
 8001efa:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8001efe:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001f02:	f897 235f 	ldrb.w	r2, [r7, #863]	; 0x35f
 8001f06:	72da      	strb	r2, [r3, #11]

	sf_handler.smart_fuses.emplace_back(GPIOA, GPIO_PIN_1, &hspi1, fuses_settings);
 8001f08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f0c:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8001f10:	2302      	movs	r3, #2
 8001f12:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
 8001f16:	4bc5      	ldr	r3, [pc, #788]	; (800222c <main+0x4dc>)
 8001f18:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8001f1c:	f507 7447 	add.w	r4, r7, #796	; 0x31c
 8001f20:	f207 321a 	addw	r2, r7, #794	; 0x31a
 8001f24:	f507 7145 	add.w	r1, r7, #788	; 0x314
 8001f28:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001f2c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	4623      	mov	r3, r4
 8001f34:	f000 faeb 	bl	800250e <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJP12GPIO_TypeDeftP19__SPI_HandleTypeDefR13FusesSettingsEEEvDpOT_>
	sf_handler.smart_fuses.emplace_back(GPIOA, GPIO_PIN_2, &hspi1, fuses_settings);
 8001f38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f3c:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8001f40:	2304      	movs	r3, #4
 8001f42:	f8a7 3326 	strh.w	r3, [r7, #806]	; 0x326
 8001f46:	4bb9      	ldr	r3, [pc, #740]	; (800222c <main+0x4dc>)
 8001f48:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8001f4c:	f507 744a 	add.w	r4, r7, #808	; 0x328
 8001f50:	f207 3226 	addw	r2, r7, #806	; 0x326
 8001f54:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8001f58:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001f5c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	4623      	mov	r3, r4
 8001f64:	f000 fad3 	bl	800250e <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJP12GPIO_TypeDeftP19__SPI_HandleTypeDefR13FusesSettingsEEEvDpOT_>
	sf_handler.smart_fuses.emplace_back(GPIOA, GPIO_PIN_3, &hspi1, fuses_settings);
 8001f68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f6c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8001f70:	2308      	movs	r3, #8
 8001f72:	f8a7 3332 	strh.w	r3, [r7, #818]	; 0x332
 8001f76:	4bad      	ldr	r3, [pc, #692]	; (800222c <main+0x4dc>)
 8001f78:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001f7c:	f507 744d 	add.w	r4, r7, #820	; 0x334
 8001f80:	f207 3232 	addw	r2, r7, #818	; 0x332
 8001f84:	f507 714b 	add.w	r1, r7, #812	; 0x32c
 8001f88:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001f8c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	4623      	mov	r3, r4
 8001f94:	f000 fabb 	bl	800250e <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJP12GPIO_TypeDeftP19__SPI_HandleTypeDefR13FusesSettingsEEEvDpOT_>
	sf_handler.smart_fuses.emplace_back(GPIOA, GPIO_PIN_4, &hspi1, fuses_settings);
 8001f98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f9c:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
 8001fa6:	4ba1      	ldr	r3, [pc, #644]	; (800222c <main+0x4dc>)
 8001fa8:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8001fac:	f507 7450 	add.w	r4, r7, #832	; 0x340
 8001fb0:	f207 323e 	addw	r2, r7, #830	; 0x33e
 8001fb4:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8001fb8:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8001fbc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	f000 faa3 	bl	800250e <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJP12GPIO_TypeDeftP19__SPI_HandleTypeDefR13FusesSettingsEEEvDpOT_>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc8:	f000 fd77 	bl	8002aba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fcc:	f000 f9a6 	bl	800231c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd0:	f7ff fd64 	bl	8001a9c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001fd4:	f7fe f912 	bl	80001fc <MX_CAN1_Init>
  MX_SPI1_Init();
 8001fd8:	f000 fc10 	bl	80027fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	sf_handler.initAll();
 8001fdc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe f9be 	bl	8000362 <_ZN16SmartFuseHandlerILm4EE7initAllEv>
	initCAN();
 8001fe6:	f000 f9f9 	bl	80023dc <_Z7initCANv>

	led_ok.deactivate();
 8001fea:	4891      	ldr	r0, [pc, #580]	; (8002230 <main+0x4e0>)
 8001fec:	f7ff fcc3 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 8001ff0:	4890      	ldr	r0, [pc, #576]	; (8002234 <main+0x4e4>)
 8001ff2:	f7ff fcc0 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8001ff6:	4890      	ldr	r0, [pc, #576]	; (8002238 <main+0x4e8>)
 8001ff8:	f7ff fcbd 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 8001ffc:	488f      	ldr	r0, [pc, #572]	; (800223c <main+0x4ec>)
 8001ffe:	f7ff fcba 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>

	std::array < GpioInElement, 5 > optos { safety_ams, safety_spare, safety_tms, safety_td, safety_hvd };
 8002002:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002006:	498e      	ldr	r1, [pc, #568]	; (8002240 <main+0x4f0>)
 8002008:	4620      	mov	r0, r4
 800200a:	f7ff fe6f 	bl	8001cec <_ZN13GpioInElementC1ERKS_>
 800200e:	3410      	adds	r4, #16
 8002010:	498c      	ldr	r1, [pc, #560]	; (8002244 <main+0x4f4>)
 8002012:	4620      	mov	r0, r4
 8002014:	f7ff fe6a 	bl	8001cec <_ZN13GpioInElementC1ERKS_>
 8002018:	3410      	adds	r4, #16
 800201a:	498b      	ldr	r1, [pc, #556]	; (8002248 <main+0x4f8>)
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff fe65 	bl	8001cec <_ZN13GpioInElementC1ERKS_>
 8002022:	3410      	adds	r4, #16
 8002024:	4989      	ldr	r1, [pc, #548]	; (800224c <main+0x4fc>)
 8002026:	4620      	mov	r0, r4
 8002028:	f7ff fe60 	bl	8001cec <_ZN13GpioInElementC1ERKS_>
 800202c:	f104 0310 	add.w	r3, r4, #16
 8002030:	4987      	ldr	r1, [pc, #540]	; (8002250 <main+0x500>)
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fe5a 	bl	8001cec <_ZN13GpioInElementC1ERKS_>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	sf_handler.enableAll();
 8002038:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe f9bb 	bl	80003b8 <_ZN16SmartFuseHandlerILm4EE9enableAllEv>

	enable_mosfets.activate();
 8002042:	4884      	ldr	r0, [pc, #528]	; (8002254 <main+0x504>)
 8002044:	f7ff fc80 	bl	8001948 <_ZN14GpioOutElement8activateEv>

	led_ok.activate();
 8002048:	4879      	ldr	r0, [pc, #484]	; (8002230 <main+0x4e0>)
 800204a:	f7ff fc7d 	bl	8001948 <_ZN14GpioOutElement8activateEv>

	while (1)
	{
		//----------------------------------------------------------------------------------------
		// handle smart fuses and show as Ok/Warnings/Error
		auto state = sf_handler.handleAll();
 800204e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe f95a 	bl	800030c <_ZN16SmartFuseHandlerILm4EE9handleAllEv>
 8002058:	4603      	mov	r3, r0
 800205a:	f887 335e 	strb.w	r3, [r7, #862]	; 0x35e
		switch (state)
 800205e:	f897 335e 	ldrb.w	r3, [r7, #862]	; 0x35e
 8002062:	3b01      	subs	r3, #1
 8002064:	2b07      	cmp	r3, #7
 8002066:	d833      	bhi.n	80020d0 <main+0x380>
 8002068:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <main+0x320>)
 800206a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206e:	bf00      	nop
 8002070:	08002099 	.word	0x08002099
 8002074:	080020c1 	.word	0x080020c1
 8002078:	080020a9 	.word	0x080020a9
 800207c:	080020b1 	.word	0x080020b1
 8002080:	08002091 	.word	0x08002091
 8002084:	080020a1 	.word	0x080020a1
 8002088:	080020c9 	.word	0x080020c9
 800208c:	080020b9 	.word	0x080020b9
		{
			case SmartFuseState::LatchOff: led_warning_1.activate(); break;
 8002090:	4868      	ldr	r0, [pc, #416]	; (8002234 <main+0x4e4>)
 8002092:	f7ff fc59 	bl	8001948 <_ZN14GpioOutElement8activateEv>
 8002096:	e024      	b.n	80020e2 <main+0x392>
			case SmartFuseState::ResetState: led_warning_2.activate(); break;
 8002098:	4867      	ldr	r0, [pc, #412]	; (8002238 <main+0x4e8>)
 800209a:	f7ff fc55 	bl	8001948 <_ZN14GpioOutElement8activateEv>
 800209e:	e020      	b.n	80020e2 <main+0x392>
			case SmartFuseState::OLOFF: led_warning_2.activate(); break;
 80020a0:	4865      	ldr	r0, [pc, #404]	; (8002238 <main+0x4e8>)
 80020a2:	f7ff fc51 	bl	8001948 <_ZN14GpioOutElement8activateEv>
 80020a6:	e01c      	b.n	80020e2 <main+0x392>
			case SmartFuseState::OTPLVDS: led_warning_2.activate(); break;
 80020a8:	4863      	ldr	r0, [pc, #396]	; (8002238 <main+0x4e8>)
 80020aa:	f7ff fc4d 	bl	8001948 <_ZN14GpioOutElement8activateEv>
 80020ae:	e018      	b.n	80020e2 <main+0x392>
			case SmartFuseState::TempFail: led_warning_2.activate(); break;
 80020b0:	4861      	ldr	r0, [pc, #388]	; (8002238 <main+0x4e8>)
 80020b2:	f7ff fc49 	bl	8001948 <_ZN14GpioOutElement8activateEv>
 80020b6:	e014      	b.n	80020e2 <main+0x392>
			case SmartFuseState::NotResponding: led_error.activate(); break;
 80020b8:	4860      	ldr	r0, [pc, #384]	; (800223c <main+0x4ec>)
 80020ba:	f7ff fc45 	bl	8001948 <_ZN14GpioOutElement8activateEv>
 80020be:	e010      	b.n	80020e2 <main+0x392>
			case SmartFuseState::SPIError: led_error.activate(); break;
 80020c0:	485e      	ldr	r0, [pc, #376]	; (800223c <main+0x4ec>)
 80020c2:	f7ff fc41 	bl	8001948 <_ZN14GpioOutElement8activateEv>
 80020c6:	e00c      	b.n	80020e2 <main+0x392>
			case SmartFuseState::FailSafe: led_error.activate(); break;
 80020c8:	485c      	ldr	r0, [pc, #368]	; (800223c <main+0x4ec>)
 80020ca:	f7ff fc3d 	bl	8001948 <_ZN14GpioOutElement8activateEv>
 80020ce:	e008      	b.n	80020e2 <main+0x392>
			default:
			{
				led_warning_1.deactivate();
 80020d0:	4858      	ldr	r0, [pc, #352]	; (8002234 <main+0x4e4>)
 80020d2:	f7ff fc50 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>
				led_warning_2.deactivate();
 80020d6:	4858      	ldr	r0, [pc, #352]	; (8002238 <main+0x4e8>)
 80020d8:	f7ff fc4d 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>
				led_error.deactivate();
 80020dc:	4857      	ldr	r0, [pc, #348]	; (800223c <main+0x4ec>)
 80020de:	f7ff fc4a 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>
			}
		}
		// debug stuff
		states = sf_handler.getStates();
 80020e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe f994 	bl	8000414 <_ZN16SmartFuseHandlerILm4EE9getStatesEv>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4a5a      	ldr	r2, [pc, #360]	; (8002258 <main+0x508>)
 80020f0:	6013      	str	r3, [r2, #0]
		chanel_states = sf_handler.getChanelsStates();
 80020f2:	4c5a      	ldr	r4, [pc, #360]	; (800225c <main+0x50c>)
 80020f4:	463b      	mov	r3, r7
 80020f6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe f9bb 	bl	8000478 <_ZN16SmartFuseHandlerILm4EE16getChanelsStatesEv>
 8002102:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002106:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800210a:	461d      	mov	r5, r3
 800210c:	6828      	ldr	r0, [r5, #0]
 800210e:	6869      	ldr	r1, [r5, #4]
 8002110:	68aa      	ldr	r2, [r5, #8]
 8002112:	68eb      	ldr	r3, [r5, #12]
 8002114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002116:	6928      	ldr	r0, [r5, #16]
 8002118:	6969      	ldr	r1, [r5, #20]
 800211a:	c403      	stmia	r4!, {r0, r1}

		//----------------------------------------------------------------------------------------
		// handle safety
		for (auto& safety : optos)
 800211c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002120:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8002124:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8002128:	f000 fa24 	bl	8002574 <_ZNSt5arrayI13GpioInElementLj5EE5beginEv>
 800212c:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
 8002130:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 8002134:	f000 fa2a 	bl	800258c <_ZNSt5arrayI13GpioInElementLj5EE3endEv>
 8002138:	f8c7 0354 	str.w	r0, [r7, #852]	; 0x354
 800213c:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8002140:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002144:	429a      	cmp	r2, r3
 8002146:	d00d      	beq.n	8002164 <main+0x414>
 8002148:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800214c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
		{
			safety.isActive();
 8002150:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 8002154:	f7ff fc3e 	bl	80019d4 <_ZN13GpioInElement8isActiveEv>
		for (auto& safety : optos)
 8002158:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800215c:	3310      	adds	r3, #16
 800215e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8002162:	e7eb      	b.n	800213c <main+0x3ec>
		}

		//----------------------------------------------------------------------------------------
		// transmit receive can and handle

		auto device_state = PUTM_CAN::SF_states::OK;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
		for(size_t i = 0; i < 4; i++)
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002170:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002174:	2b03      	cmp	r3, #3
 8002176:	d817      	bhi.n	80021a8 <main+0x458>
		{
			if(states[i] != SmartFuseState::Ok)
 8002178:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 800217c:	4836      	ldr	r0, [pc, #216]	; (8002258 <main+0x508>)
 800217e:	f7ff faf8 	bl	8001772 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002182:	4603      	mov	r3, r0
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf14      	ite	ne
 800218a:	2301      	movne	r3, #1
 800218c:	2300      	moveq	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <main+0x44c>
				device_state = static_cast<PUTM_CAN::SF_states>(i);
 8002194:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002198:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
		for(size_t i = 0; i < 4; i++)
 800219c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80021a0:	3301      	adds	r3, #1
 80021a2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80021a6:	e7e3      	b.n	8002170 <main+0x420>
		}

		uint16_t current_sum = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8a7 336a 	strh.w	r3, [r7, #874]	; 0x36a

		for(auto& sf : sf_handler.smart_fuses)
 80021ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021b2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80021b6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fac1 	bl	8001742 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 80021c0:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364
 80021c4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fac6 	bl	800175a <_ZN3etl7ivectorI9SmartFuseE3endEv>
 80021ce:	f8c7 0348 	str.w	r0, [r7, #840]	; 0x348
 80021d2:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 80021d6:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80021da:	429a      	cmp	r2, r3
 80021dc:	d040      	beq.n	8002260 <main+0x510>
 80021de:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80021e2:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
		{
			for(size_t i = 0; i < 6; i++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 80021ec:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d814      	bhi.n	800221e <main+0x4ce>
			{
				current_sum += sf.getFuseCurrent(static_cast<FuseNumber>(i));
 80021f4:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 8002200:	f7ff f9e2 	bl	80015c8 <_ZN9SmartFuse14getFuseCurrentE10FuseNumber>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	f8b7 336a 	ldrh.w	r3, [r7, #874]	; 0x36a
 800220c:	4413      	add	r3, r2
 800220e:	f8a7 336a 	strh.w	r3, [r7, #874]	; 0x36a
			for(size_t i = 0; i < 6; i++)
 8002212:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8002216:	3301      	adds	r3, #1
 8002218:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 800221c:	e7e6      	b.n	80021ec <main+0x49c>
		for(auto& sf : sf_handler.smart_fuses)
 800221e:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8002222:	3390      	adds	r3, #144	; 0x90
 8002224:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8002228:	e7d3      	b.n	80021d2 <main+0x482>
 800222a:	bf00      	nop
 800222c:	200001a4 	.word	0x200001a4
 8002230:	200000b4 	.word	0x200000b4
 8002234:	200000c4 	.word	0x200000c4
 8002238:	200000d4 	.word	0x200000d4
 800223c:	200000e4 	.word	0x200000e4
 8002240:	20000134 	.word	0x20000134
 8002244:	20000144 	.word	0x20000144
 8002248:	20000154 	.word	0x20000154
 800224c:	20000164 	.word	0x20000164
 8002250:	20000174 	.word	0x20000174
 8002254:	20000124 	.word	0x20000124
 8002258:	20000184 	.word	0x20000184
 800225c:	20000188 	.word	0x20000188
			}
		}

		PUTM_CAN::SF_main sf_main
 8002260:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002264:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8002268:	2100      	movs	r1, #0
 800226a:	460a      	mov	r2, r1
 800226c:	801a      	strh	r2, [r3, #0]
 800226e:	460a      	mov	r2, r1
 8002270:	709a      	strb	r2, [r3, #2]
 8002272:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002276:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 800227a:	7813      	ldrb	r3, [r2, #0]
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	7013      	strb	r3, [r2, #0]
 8002282:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002286:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 800228a:	7813      	ldrb	r3, [r2, #0]
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	7013      	strb	r3, [r2, #0]
 8002292:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002296:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 800229a:	7813      	ldrb	r3, [r2, #0]
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	7013      	strb	r3, [r2, #0]
 80022a2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80022a6:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80022aa:	7813      	ldrb	r3, [r2, #0]
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	7013      	strb	r3, [r2, #0]
 80022b2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80022b6:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80022ba:	8813      	ldrh	r3, [r2, #0]
 80022bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80022c0:	f361 130f 	bfi	r3, r1, #4, #12
 80022c4:	8013      	strh	r3, [r2, #0]
		{
			{ 1, 1, 1, 1, 500 },
			device_state
		};
 80022c6:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80022ca:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80022ce:	f897 2373 	ldrb.w	r2, [r7, #883]	; 0x373
 80022d2:	709a      	strb	r2, [r3, #2]

		PUTM_CAN::Can_tx_message<PUTM_CAN::SF_main> can_sender(sf_main, PUTM_CAN::can_tx_header_SF_MAIN);
 80022d4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <main+0x5c0>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fd1a 	bl	8001d18 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>
		if(can_sender.send(hcan1) != HAL_StatusTypeDef::HAL_OK) led_error.activate();
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	490a      	ldr	r1, [pc, #40]	; (8002314 <main+0x5c4>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f95c 	bl	80025a8 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf14      	ite	ne
 80022f6:	2301      	movne	r3, #1
 80022f8:	2300      	moveq	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <main+0x5b8>
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <main+0x5c8>)
 8002302:	f7ff fb21 	bl	8001948 <_ZN14GpioOutElement8activateEv>
 8002306:	e6a2      	b.n	800204e <main+0x2fe>
		else led_error.deactivate();
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <main+0x5c8>)
 800230a:	f7ff fb34 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 800230e:	e69e      	b.n	800204e <main+0x2fe>
 8002310:	08004e88 	.word	0x08004e88
 8002314:	2000008c 	.word	0x2000008c
 8002318:	200000e4 	.word	0x200000e4

0800231c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b098      	sub	sp, #96	; 0x60
 8002320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002322:	f107 0318 	add.w	r3, r7, #24
 8002326:	2248      	movs	r2, #72	; 0x48
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f002 fd1e 	bl	8004d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800233e:	2000      	movs	r0, #0
 8002340:	f001 fc8c 	bl	8003c5c <HAL_PWREx_ControlVoltageScaling>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf14      	ite	ne
 800234a:	2301      	movne	r3, #1
 800234c:	2300      	moveq	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002354:	f000 f88c 	bl	8002470 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002358:	2310      	movs	r3, #16
 800235a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800235c:	2301      	movs	r3, #1
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002364:	2360      	movs	r3, #96	; 0x60
 8002366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002368:	2302      	movs	r3, #2
 800236a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800236c:	2301      	movs	r3, #1
 800236e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002370:	2301      	movs	r3, #1
 8002372:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002374:	233c      	movs	r3, #60	; 0x3c
 8002376:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002378:	2302      	movs	r3, #2
 800237a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800237c:	2302      	movs	r3, #2
 800237e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002380:	2302      	movs	r3, #2
 8002382:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002384:	f107 0318 	add.w	r3, r7, #24
 8002388:	4618      	mov	r0, r3
 800238a:	f001 fd0b 	bl	8003da4 <HAL_RCC_OscConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf14      	ite	ne
 8002394:	2301      	movne	r3, #1
 8002396:	2300      	moveq	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 800239e:	f000 f867 	bl	8002470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a2:	230f      	movs	r3, #15
 80023a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a6:	2303      	movs	r3, #3
 80023a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2105      	movs	r1, #5
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 f97a 	bl	80046b4 <HAL_RCC_ClockConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80023d0:	f000 f84e 	bl	8002470 <Error_Handler>
  }
}
 80023d4:	bf00      	nop
 80023d6:	3760      	adds	r7, #96	; 0x60
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_Z7initCANv>:

/* USER CODE BEGIN 4 */

void initCAN()
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
//		Error_Handler();
//
//	if (HAL_CAN_Start(&hcan1) != HAL_OK)
//		Error_Handler();
	  CAN_FilterTypeDef sFilterConfig;
	  sFilterConfig.FilterBank = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 80023ee:	2300      	movs	r3, #0
 80023f0:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterActivation = ENABLE;
 8002402:	2301      	movs	r3, #1
 8002404:	623b      	str	r3, [r7, #32]


		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8002406:	463b      	mov	r3, r7
 8002408:	4619      	mov	r1, r3
 800240a:	4818      	ldr	r0, [pc, #96]	; (800246c <_Z7initCANv+0x90>)
 800240c:	f000 fce9 	bl	8002de2 <HAL_CAN_ConfigFilter>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <_Z7initCANv+0x48>
			Error_Handler();
 8002420:	f000 f826 	bl	8002470 <Error_Handler>
		}

		if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8002424:	4811      	ldr	r0, [pc, #68]	; (800246c <_Z7initCANv+0x90>)
 8002426:	f000 fda6 	bl	8002f76 <HAL_CAN_Start>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <_Z7initCANv+0x62>
			Error_Handler();
 800243a:	f000 f819 	bl	8002470 <Error_Handler>
		}

		if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 800243e:	2103      	movs	r1, #3
 8002440:	480a      	ldr	r0, [pc, #40]	; (800246c <_Z7initCANv+0x90>)
 8002442:	f000 feb7 	bl	80031b4 <HAL_CAN_ActivateNotification>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf14      	ite	ne
 800244c:	2301      	movne	r3, #1
 800244e:	2300      	moveq	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <_Z7initCANv+0x7e>
			Error_Handler();
 8002456:	f000 f80b 	bl	8002470 <Error_Handler>
		}


		  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800245a:	2102      	movs	r1, #2
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <_Z7initCANv+0x90>)
 800245e:	f000 fea9 	bl	80031b4 <HAL_CAN_ActivateNotification>
}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000008c 	.word	0x2000008c

08002470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	led_ok.deactivate();
 8002474:	4807      	ldr	r0, [pc, #28]	; (8002494 <Error_Handler+0x24>)
 8002476:	f7ff fa7e 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 800247a:	4807      	ldr	r0, [pc, #28]	; (8002498 <Error_Handler+0x28>)
 800247c:	f7ff fa7b 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8002480:	4806      	ldr	r0, [pc, #24]	; (800249c <Error_Handler+0x2c>)
 8002482:	f7ff fa78 	bl	8001976 <_ZN14GpioOutElement10deactivateEv>
	led_error.activate();
 8002486:	4806      	ldr	r0, [pc, #24]	; (80024a0 <Error_Handler+0x30>)
 8002488:	f7ff fa5e 	bl	8001948 <_ZN14GpioOutElement8activateEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800248c:	b672      	cpsid	i
}
 800248e:	bf00      	nop

	__disable_irq();
	while (1) {}
 8002490:	e7fe      	b.n	8002490 <Error_Handler+0x20>
 8002492:	bf00      	nop
 8002494:	200000b4 	.word	0x200000b4
 8002498:	200000c4 	.word	0x200000c4
 800249c:	200000d4 	.word	0x200000d4
 80024a0:	200000e4 	.word	0x200000e4

080024a4 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	330c      	adds	r3, #12
 80024b2:	2204      	movs	r2, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	f000 f88b 	bl	80025d0 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>
    {
      this->initialise();
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f89d 	bl	80025fc <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZN3etl7forwardIP12GPIO_TypeDefEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 80024d4:	687b      	ldr	r3, [r7, #4]
  }
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_ZN3etl7forwardItEEOT_RNS_16remove_referenceIS1_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 80024ea:	687b      	ldr	r3, [r7, #4]
  }
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_ZN3etl7forwardIP19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8002500:	687b      	ldr	r3, [r7, #4]
  }
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJP12GPIO_TypeDeftP19__SPI_HandleTypeDefR13FusesSettingsEEEvDpOT_>:
    void emplace_back(Args && ... args)
 800250e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
      ::new (p_end) T(etl::forward<Args>(args)...);
 800251e:	68b8      	ldr	r0, [r7, #8]
 8002520:	f7ff ffd4 	bl	80024cc <_ZN3etl7forwardIP12GPIO_TypeDefEEOT_RNS_16remove_referenceIS3_E4typeE>
 8002524:	4603      	mov	r3, r0
 8002526:	681c      	ldr	r4, [r3, #0]
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ffda 	bl	80024e2 <_ZN3etl7forwardItEEOT_RNS_16remove_referenceIS1_E4typeE>
 800252e:	4603      	mov	r3, r0
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	4698      	mov	r8, r3
 8002534:	6838      	ldr	r0, [r7, #0]
 8002536:	f7ff ffdf 	bl	80024f8 <_ZN3etl7forwardIP19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS3_E4typeE>
 800253a:	4603      	mov	r3, r0
 800253c:	681d      	ldr	r5, [r3, #0]
 800253e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002540:	f000 f870 	bl	8002624 <_ZN3etl7forwardIR13FusesSettingsEEOT_RNS_16remove_referenceIS3_E4typeE>
 8002544:	4606      	mov	r6, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4619      	mov	r1, r3
 800254c:	2090      	movs	r0, #144	; 0x90
 800254e:	f7ff fb83 	bl	8001c58 <_ZnwjPv>
 8002552:	9600      	str	r6, [sp, #0]
 8002554:	462b      	mov	r3, r5
 8002556:	4642      	mov	r2, r8
 8002558:	4621      	mov	r1, r4
 800255a:	f7fe f9f9 	bl	8000950 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	609a      	str	r2, [r3, #8]
    }
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002574 <_ZNSt5arrayI13GpioInElementLj5EE5beginEv>:
      begin() noexcept
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f85c 	bl	800263a <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>
 8002582:	4603      	mov	r3, r0
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <_ZNSt5arrayI13GpioInElementLj5EE3endEv>:
      end() noexcept
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f850 	bl	800263a <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>
 800259a:	4603      	mov	r3, r0
 800259c:	3350      	adds	r3, #80	; 0x50
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>:

	  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan)
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
	  {
		  static uint32_t TxMailbox(0);
		  return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0218 	add.w	r2, r3, #24
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 80025bc:	6838      	ldr	r0, [r7, #0]
 80025be:	f000 fd1e 	bl	8002ffe <HAL_CAN_AddTxMessage>
 80025c2:	4603      	mov	r3, r0
	  }
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	200001a0 	.word	0x200001a0

080025d0 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fb45 	bl	8001c70 <_ZN3etl11vector_baseC1Ej>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	609a      	str	r2, [r3, #8]
    }
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>:
    void initialise()
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f000 f820 	bl	8002654 <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>
      p_end = p_buffer;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
    }
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_ZN3etl7forwardIR13FusesSettingsEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800262c:	687b      	ldr	r3, [r7, #4]
  }
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>:
      data() noexcept
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f810 	bl	800266a <_ZNSt14__array_traitsI13GpioInElementLj5EE6_S_ptrERA5_KS0_>
 800264a:	4603      	mov	r3, r0
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>:
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  typename etl::enable_if<etl::is_trivially_destructible<typename etl::iterator_traits<TIterator>::value_type>::value, void>::type
    destroy(TIterator /*i_begin*/, TIterator /*i_end*/)
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  {
  }
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <_ZNSt14__array_traitsI13GpioInElementLj5EE6_S_ptrERA5_KS0_>:
      _S_ptr(const _Type& __t) noexcept
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <_Z41__static_initialization_and_destruction_0ii>:

  /* USER CODE END Error_Handler_Debug */
}
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d154      	bne.n	800273a <_Z41__static_initialization_and_destruction_0ii+0xba>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002696:	4293      	cmp	r3, r2
 8002698:	d14f      	bne.n	800273a <_Z41__static_initialization_and_destruction_0ii+0xba>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 800269a:	2301      	movs	r3, #1
 800269c:	2201      	movs	r2, #1
 800269e:	4940      	ldr	r1, [pc, #256]	; (80027a0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80026a0:	4840      	ldr	r0, [pc, #256]	; (80027a4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80026a2:	f7ff f939 	bl	8001918 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 80026a6:	2301      	movs	r3, #1
 80026a8:	2202      	movs	r2, #2
 80026aa:	493d      	ldr	r1, [pc, #244]	; (80027a0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80026ac:	483e      	ldr	r0, [pc, #248]	; (80027a8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80026ae:	f7ff f933 	bl	8001918 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 80026b2:	2301      	movs	r3, #1
 80026b4:	2204      	movs	r2, #4
 80026b6:	493a      	ldr	r1, [pc, #232]	; (80027a0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80026b8:	483c      	ldr	r0, [pc, #240]	; (80027ac <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80026ba:	f7ff f92d 	bl	8001918 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 80026be:	2301      	movs	r3, #1
 80026c0:	2208      	movs	r2, #8
 80026c2:	4937      	ldr	r1, [pc, #220]	; (80027a0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80026c4:	483a      	ldr	r0, [pc, #232]	; (80027b0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80026c6:	f7ff f927 	bl	8001918 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 80026ca:	2300      	movs	r3, #0
 80026cc:	2220      	movs	r2, #32
 80026ce:	4939      	ldr	r1, [pc, #228]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80026d0:	4839      	ldr	r0, [pc, #228]	; (80027b8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80026d2:	f7ff f921 	bl	8001918 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 80026d6:	2300      	movs	r3, #0
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	4936      	ldr	r1, [pc, #216]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80026dc:	4837      	ldr	r0, [pc, #220]	; (80027bc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80026de:	f7ff f91b 	bl	8001918 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 80026e2:	2300      	movs	r3, #0
 80026e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e8:	4932      	ldr	r1, [pc, #200]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80026ea:	4835      	ldr	r0, [pc, #212]	; (80027c0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80026ec:	f7ff f914 	bl	8001918 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement enable_mosfets(GPIOB, GPIO_PIN_9, false);
 80026f0:	2300      	movs	r3, #0
 80026f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f6:	492f      	ldr	r1, [pc, #188]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80026f8:	4832      	ldr	r0, [pc, #200]	; (80027c4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80026fa:	f7ff f90d 	bl	8001918 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_ams(GPIOB, GPIO_PIN_0, true);
 80026fe:	2301      	movs	r3, #1
 8002700:	2201      	movs	r2, #1
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8002704:	4830      	ldr	r0, [pc, #192]	; (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8002706:	f7ff f94d 	bl	80019a4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_spare(GPIOB, GPIO_PIN_1, true);
 800270a:	2301      	movs	r3, #1
 800270c:	2202      	movs	r2, #2
 800270e:	4929      	ldr	r1, [pc, #164]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8002710:	482e      	ldr	r0, [pc, #184]	; (80027cc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002712:	f7ff f947 	bl	80019a4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_tms(GPIOB, GPIO_PIN_2, true);
 8002716:	2301      	movs	r3, #1
 8002718:	2204      	movs	r2, #4
 800271a:	4926      	ldr	r1, [pc, #152]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800271c:	482c      	ldr	r0, [pc, #176]	; (80027d0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800271e:	f7ff f941 	bl	80019a4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_td(GPIOB, GPIO_PIN_4, true);
 8002722:	2301      	movs	r3, #1
 8002724:	2210      	movs	r2, #16
 8002726:	4923      	ldr	r1, [pc, #140]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8002728:	482a      	ldr	r0, [pc, #168]	; (80027d4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800272a:	f7ff f93b 	bl	80019a4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_hvd(GPIOB, GPIO_PIN_6, true);
 800272e:	2301      	movs	r3, #1
 8002730:	2240      	movs	r2, #64	; 0x40
 8002732:	4920      	ldr	r1, [pc, #128]	; (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8002734:	4828      	ldr	r0, [pc, #160]	; (80027d8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8002736:	f7ff f935 	bl	80019a4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d12b      	bne.n	8002798 <_Z41__static_initialization_and_destruction_0ii+0x118>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002746:	4293      	cmp	r3, r2
 8002748:	d126      	bne.n	8002798 <_Z41__static_initialization_and_destruction_0ii+0x118>
 800274a:	4823      	ldr	r0, [pc, #140]	; (80027d8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800274c:	f7ff f962 	bl	8001a14 <_ZN13GpioInElementD1Ev>
GpioInElement safety_td(GPIOB, GPIO_PIN_4, true);
 8002750:	4820      	ldr	r0, [pc, #128]	; (80027d4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8002752:	f7ff f95f 	bl	8001a14 <_ZN13GpioInElementD1Ev>
GpioInElement safety_tms(GPIOB, GPIO_PIN_2, true);
 8002756:	481e      	ldr	r0, [pc, #120]	; (80027d0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8002758:	f7ff f95c 	bl	8001a14 <_ZN13GpioInElementD1Ev>
GpioInElement safety_spare(GPIOB, GPIO_PIN_1, true);
 800275c:	481b      	ldr	r0, [pc, #108]	; (80027cc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800275e:	f7ff f959 	bl	8001a14 <_ZN13GpioInElementD1Ev>
GpioInElement safety_ams(GPIOB, GPIO_PIN_0, true);
 8002762:	4819      	ldr	r0, [pc, #100]	; (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8002764:	f7ff f956 	bl	8001a14 <_ZN13GpioInElementD1Ev>
GpioOutElement enable_mosfets(GPIOB, GPIO_PIN_9, false);
 8002768:	4816      	ldr	r0, [pc, #88]	; (80027c4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800276a:	f7ff f975 	bl	8001a58 <_ZN14GpioOutElementD1Ev>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 800276e:	4814      	ldr	r0, [pc, #80]	; (80027c0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8002770:	f7ff f972 	bl	8001a58 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8002774:	4811      	ldr	r0, [pc, #68]	; (80027bc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8002776:	f7ff f96f 	bl	8001a58 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 800277a:	480f      	ldr	r0, [pc, #60]	; (80027b8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800277c:	f7ff f96c 	bl	8001a58 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 8002780:	480b      	ldr	r0, [pc, #44]	; (80027b0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8002782:	f7ff f969 	bl	8001a58 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 8002786:	4809      	ldr	r0, [pc, #36]	; (80027ac <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8002788:	f7ff f966 	bl	8001a58 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 800278c:	4806      	ldr	r0, [pc, #24]	; (80027a8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800278e:	f7ff f963 	bl	8001a58 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 8002792:	4804      	ldr	r0, [pc, #16]	; (80027a4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8002794:	f7ff f960 	bl	8001a58 <_ZN14GpioOutElementD1Ev>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	48000800 	.word	0x48000800
 80027a4:	200000b4 	.word	0x200000b4
 80027a8:	200000c4 	.word	0x200000c4
 80027ac:	200000d4 	.word	0x200000d4
 80027b0:	200000e4 	.word	0x200000e4
 80027b4:	48000400 	.word	0x48000400
 80027b8:	200000f4 	.word	0x200000f4
 80027bc:	20000104 	.word	0x20000104
 80027c0:	20000114 	.word	0x20000114
 80027c4:	20000124 	.word	0x20000124
 80027c8:	20000134 	.word	0x20000134
 80027cc:	20000144 	.word	0x20000144
 80027d0:	20000154 	.word	0x20000154
 80027d4:	20000164 	.word	0x20000164
 80027d8:	20000174 	.word	0x20000174

080027dc <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
 80027e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027e4:	2001      	movs	r0, #1
 80027e6:	f7ff ff4b 	bl	8002680 <_Z41__static_initialization_and_destruction_0ii>
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_GLOBAL__sub_D__ZN8PUTM_CAN3canE>:
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7ff ff43 	bl	8002680 <_Z41__static_initialization_and_destruction_0ii>
 80027fa:	bd80      	pop	{r7, pc}

080027fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <MX_SPI1_Init+0xa0>)
 8002802:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <MX_SPI1_Init+0xa4>)
 8002804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002806:	4b25      	ldr	r3, [pc, #148]	; (800289c <MX_SPI1_Init+0xa0>)
 8002808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800280c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <MX_SPI1_Init+0xa0>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <MX_SPI1_Init+0xa0>)
 8002816:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800281a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800281c:	4b1f      	ldr	r3, [pc, #124]	; (800289c <MX_SPI1_Init+0xa0>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002822:	4b1e      	ldr	r3, [pc, #120]	; (800289c <MX_SPI1_Init+0xa0>)
 8002824:	2200      	movs	r2, #0
 8002826:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002828:	4b1c      	ldr	r3, [pc, #112]	; (800289c <MX_SPI1_Init+0xa0>)
 800282a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <MX_SPI1_Init+0xa0>)
 8002832:	2218      	movs	r2, #24
 8002834:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <MX_SPI1_Init+0xa0>)
 8002838:	2200      	movs	r2, #0
 800283a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <MX_SPI1_Init+0xa0>)
 800283e:	2200      	movs	r2, #0
 8002840:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <MX_SPI1_Init+0xa0>)
 8002844:	2200      	movs	r2, #0
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <MX_SPI1_Init+0xa0>)
 800284a:	2207      	movs	r2, #7
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <MX_SPI1_Init+0xa0>)
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <MX_SPI1_Init+0xa0>)
 8002856:	2200      	movs	r2, #0
 8002858:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800285a:	4810      	ldr	r0, [pc, #64]	; (800289c <MX_SPI1_Init+0xa0>)
 800285c:	f002 f9a4 	bl	8004ba8 <HAL_SPI_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002866:	f7ff fe03 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <MX_SPI1_Init+0xa0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <MX_SPI1_Init+0xa0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002878:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <MX_SPI1_Init+0xa0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d007      	beq.n	8002898 <MX_SPI1_Init+0x9c>
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <MX_SPI1_Init+0xa0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4b03      	ldr	r3, [pc, #12]	; (800289c <MX_SPI1_Init+0xa0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002896:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200001a4 	.word	0x200001a4
 80028a0:	40013000 	.word	0x40013000

080028a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a17      	ldr	r2, [pc, #92]	; (8002920 <HAL_SPI_MspInit+0x7c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d128      	bne.n	8002918 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_SPI_MspInit+0x80>)
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_SPI_MspInit+0x80>)
 80028cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028d0:	6613      	str	r3, [r2, #96]	; 0x60
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_SPI_MspInit+0x80>)
 80028d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_SPI_MspInit+0x80>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <HAL_SPI_MspInit+0x80>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_SPI_MspInit+0x80>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028f6:	23e0      	movs	r3, #224	; 0xe0
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028fe:	2302      	movs	r3, #2
 8002900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002902:	2303      	movs	r3, #3
 8002904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002906:	2305      	movs	r3, #5
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002914:	f000 ffc0 	bl	8003898 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002918:	bf00      	nop
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40013000 	.word	0x40013000
 8002924:	40021000 	.word	0x40021000

08002928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_MspInit+0x44>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002932:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_MspInit+0x44>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6613      	str	r3, [r2, #96]	; 0x60
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_MspInit+0x44>)
 800293c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_MspInit+0x44>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	4a08      	ldr	r2, [pc, #32]	; (800296c <HAL_MspInit+0x44>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002950:	6593      	str	r3, [r2, #88]	; 0x58
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_MspInit+0x44>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000

08002970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <NMI_Handler+0x4>

08002976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297a:	e7fe      	b.n	800297a <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <MemManage_Handler+0x4>

08002982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <BusFault_Handler+0x4>

08002988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <UsageFault_Handler+0x4>

0800298e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029bc:	f000 f8d2 	bl	8002b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <CAN1_RX0_IRQHandler+0x10>)
 80029ca:	f000 fc19 	bl	8003200 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000008c 	.word	0x2000008c

080029d8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <CAN1_RX1_IRQHandler+0x10>)
 80029de:	f000 fc0f 	bl	8003200 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	2000008c 	.word	0x2000008c

080029ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <SystemInit+0x20>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <SystemInit+0x20>)
 80029f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 8002a1e:	f000 f8b5 	bl	8002b8c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	601a      	str	r2, [r3, #0]
}
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <_ZN5Timer7restartEv>:
{
	this->start_time = HAL_GetTick();
}

void Timer::restart()
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
	this->start_time = HAL_GetTick();
 8002a3a:	f000 f8a7 	bl	8002b8c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	601a      	str	r2, [r3, #0]
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZN5Timer13getPassedTimeEv>:

	return false;
}

uint32_t Timer::getPassedTime()
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - this->start_time;
 8002a54:	f000 f89a 	bl	8002b8c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1ad3      	subs	r3, r2, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a6c:	f7ff ffbe 	bl	80029ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a70:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a72:	490d      	ldr	r1, [pc, #52]	; (8002aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a74:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <LoopForever+0xe>)
  movs r3, #0
 8002a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a78:	e002      	b.n	8002a80 <LoopCopyDataInit>

08002a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a7e:	3304      	adds	r3, #4

08002a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a84:	d3f9      	bcc.n	8002a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a88:	4c0a      	ldr	r4, [pc, #40]	; (8002ab4 <LoopForever+0x16>)
  movs r3, #0
 8002a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a8c:	e001      	b.n	8002a92 <LoopFillZerobss>

08002a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a90:	3204      	adds	r2, #4

08002a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a94:	d3fb      	bcc.n	8002a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a96:	f002 f92f 	bl	8004cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a9a:	f7ff f959 	bl	8001d50 <main>

08002a9e <LoopForever>:

LoopForever:
    b LoopForever
 8002a9e:	e7fe      	b.n	8002a9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002aa0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002aac:	08004ef0 	.word	0x08004ef0
  ldr r2, =_sbss
 8002ab0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002ab4:	20000214 	.word	0x20000214

08002ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ab8:	e7fe      	b.n	8002ab8 <ADC1_2_IRQHandler>

08002aba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f000 fea5 	bl	8003814 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aca:	200f      	movs	r0, #15
 8002acc:	f000 f80e 	bl	8002aec <HAL_InitTick>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	71fb      	strb	r3, [r7, #7]
 8002ada:	e001      	b.n	8002ae0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002adc:	f7ff ff24 	bl	8002928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_InitTick+0x6c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d023      	beq.n	8002b48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_InitTick+0x70>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_InitTick+0x6c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 feb1 	bl	800387e <HAL_SYSTICK_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0f      	cmp	r3, #15
 8002b26:	d809      	bhi.n	8002b3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f000 fe7b 	bl	800382a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b34:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <HAL_InitTick+0x74>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e007      	b.n	8002b4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e004      	b.n	8002b4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	e001      	b.n	8002b4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000008 	.word	0x20000008
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_IncTick+0x20>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x24>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <HAL_IncTick+0x24>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000008 	.word	0x20000008
 8002b88:	20000208 	.word	0x20000208

08002b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_GetTick+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000208 	.word	0x20000208

08002ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff ffee 	bl	8002b8c <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d005      	beq.n	8002bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_Delay+0x44>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bca:	bf00      	nop
 8002bcc:	f7ff ffde 	bl	8002b8c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d8f7      	bhi.n	8002bcc <HAL_Delay+0x28>
  {
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000008 	.word	0x20000008

08002bec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0ed      	b.n	8002dda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fd fb2a 	bl	8000264 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c20:	f7ff ffb4 	bl	8002b8c <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c26:	e012      	b.n	8002c4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c28:	f7ff ffb0 	bl	8002b8c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b0a      	cmp	r3, #10
 8002c34:	d90b      	bls.n	8002c4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2205      	movs	r2, #5
 8002c46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0c5      	b.n	8002dda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0e5      	beq.n	8002c28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0202 	bic.w	r2, r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c6c:	f7ff ff8e 	bl	8002b8c <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c72:	e012      	b.n	8002c9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c74:	f7ff ff8a 	bl	8002b8c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b0a      	cmp	r3, #10
 8002c80:	d90b      	bls.n	8002c9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2205      	movs	r2, #5
 8002c92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e09f      	b.n	8002dda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e5      	bne.n	8002c74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7e1b      	ldrb	r3, [r3, #24]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d108      	bne.n	8002cc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e007      	b.n	8002cd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	7e5b      	ldrb	r3, [r3, #25]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d108      	bne.n	8002cec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e007      	b.n	8002cfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7e9b      	ldrb	r3, [r3, #26]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d108      	bne.n	8002d16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0220 	orr.w	r2, r2, #32
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e007      	b.n	8002d26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0220 	bic.w	r2, r2, #32
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7edb      	ldrb	r3, [r3, #27]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d108      	bne.n	8002d40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0210 	bic.w	r2, r2, #16
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e007      	b.n	8002d50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0210 	orr.w	r2, r2, #16
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7f1b      	ldrb	r3, [r3, #28]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d108      	bne.n	8002d6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0208 	orr.w	r2, r2, #8
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e007      	b.n	8002d7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0208 	bic.w	r2, r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7f5b      	ldrb	r3, [r3, #29]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d108      	bne.n	8002d94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0204 	orr.w	r2, r2, #4
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e007      	b.n	8002da4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0204 	bic.w	r2, r2, #4
 8002da2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	ea42 0103 	orr.w	r1, r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	1e5a      	subs	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b087      	sub	sp, #28
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d003      	beq.n	8002e08 <HAL_CAN_ConfigFilter+0x26>
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	f040 80aa 	bne.w	8002f5c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	2201      	movs	r2, #1
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d123      	bne.n	8002e8a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3248      	adds	r2, #72	; 0x48
 8002e6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e80:	6979      	ldr	r1, [r7, #20]
 8002e82:	3348      	adds	r3, #72	; 0x48
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d122      	bne.n	8002ed8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002eb2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3248      	adds	r2, #72	; 0x48
 8002eb8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ecc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	3348      	adds	r3, #72	; 0x48
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ef2:	e007      	b.n	8002f04 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	401a      	ands	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f1e:	e007      	b.n	8002f30 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d107      	bne.n	8002f48 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f4e:	f023 0201 	bic.w	r2, r3, #1
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e006      	b.n	8002f6a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d12e      	bne.n	8002fe8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fa2:	f7ff fdf3 	bl	8002b8c <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fa8:	e012      	b.n	8002fd0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002faa:	f7ff fdef 	bl	8002b8c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b0a      	cmp	r3, #10
 8002fb6:	d90b      	bls.n	8002fd0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2205      	movs	r2, #5
 8002fc8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e012      	b.n	8002ff6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e5      	bne.n	8002faa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e006      	b.n	8002ff6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b089      	sub	sp, #36	; 0x24
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003012:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800301c:	7ffb      	ldrb	r3, [r7, #31]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d003      	beq.n	800302a <HAL_CAN_AddTxMessage+0x2c>
 8003022:	7ffb      	ldrb	r3, [r7, #31]
 8003024:	2b02      	cmp	r3, #2
 8003026:	f040 80b8 	bne.w	800319a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a0 	beq.w	800318a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	0e1b      	lsrs	r3, r3, #24
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d907      	bls.n	800306a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e09e      	b.n	80031a8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800306a:	2201      	movs	r2, #1
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	409a      	lsls	r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003086:	68f9      	ldr	r1, [r7, #12]
 8003088:	6809      	ldr	r1, [r1, #0]
 800308a:	431a      	orrs	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3318      	adds	r3, #24
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	440b      	add	r3, r1
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e00f      	b.n	80030b8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030a8:	68f9      	ldr	r1, [r7, #12]
 80030aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80030ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3318      	adds	r3, #24
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	440b      	add	r3, r1
 80030b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3318      	adds	r3, #24
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	440b      	add	r3, r1
 80030c8:	3304      	adds	r3, #4
 80030ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	7d1b      	ldrb	r3, [r3, #20]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d111      	bne.n	80030f8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3318      	adds	r3, #24
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	4413      	add	r3, r2
 80030e0:	3304      	adds	r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	6811      	ldr	r1, [r2, #0]
 80030e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3318      	adds	r3, #24
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	440b      	add	r3, r1
 80030f4:	3304      	adds	r3, #4
 80030f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3307      	adds	r3, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	061a      	lsls	r2, r3, #24
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3306      	adds	r3, #6
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3305      	adds	r3, #5
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	4313      	orrs	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	3204      	adds	r2, #4
 8003118:	7812      	ldrb	r2, [r2, #0]
 800311a:	4610      	mov	r0, r2
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	6811      	ldr	r1, [r2, #0]
 8003120:	ea43 0200 	orr.w	r2, r3, r0
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	440b      	add	r3, r1
 800312a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800312e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3303      	adds	r3, #3
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	061a      	lsls	r2, r3, #24
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3302      	adds	r3, #2
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3301      	adds	r3, #1
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	4313      	orrs	r3, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	7812      	ldrb	r2, [r2, #0]
 8003150:	4610      	mov	r0, r2
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	6811      	ldr	r1, [r2, #0]
 8003156:	ea43 0200 	orr.w	r2, r3, r0
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	440b      	add	r3, r1
 8003160:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003164:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3318      	adds	r3, #24
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	4413      	add	r3, r2
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	6811      	ldr	r1, [r2, #0]
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3318      	adds	r3, #24
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	440b      	add	r3, r1
 8003184:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e00e      	b.n	80031a8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e006      	b.n	80031a8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3724      	adds	r7, #36	; 0x24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d002      	beq.n	80031d2 <HAL_CAN_ActivateNotification+0x1e>
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d109      	bne.n	80031e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6959      	ldr	r1, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e006      	b.n	80031f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d07c      	beq.n	8003340 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d023      	beq.n	8003298 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2201      	movs	r2, #1
 8003256:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f983 	bl	800356e <HAL_CAN_TxMailbox0CompleteCallback>
 8003268:	e016      	b.n	8003298 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d004      	beq.n	800327e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
 800327c:	e00c      	b.n	8003298 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
 8003290:	e002      	b.n	8003298 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f989 	bl	80035aa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d024      	beq.n	80032ec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f963 	bl	8003582 <HAL_CAN_TxMailbox1CompleteCallback>
 80032bc:	e016      	b.n	80032ec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d004      	beq.n	80032d2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
 80032d0:	e00c      	b.n	80032ec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	e002      	b.n	80032ec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f969 	bl	80035be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d024      	beq.n	8003340 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f943 	bl	8003596 <HAL_CAN_TxMailbox2CompleteCallback>
 8003310:	e016      	b.n	8003340 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
 8003324:	e00c      	b.n	8003340 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d004      	beq.n	800333a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
 8003338:	e002      	b.n	8003340 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f949 	bl	80035d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00c      	beq.n	8003364 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800335a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2210      	movs	r2, #16
 8003362:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d006      	beq.n	8003386 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2208      	movs	r2, #8
 800337e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f93a 	bl	80035fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f921 	bl	80035e6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2210      	movs	r2, #16
 80033c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d006      	beq.n	80033ea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2208      	movs	r2, #8
 80033e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f91c 	bl	8003622 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f903 	bl	800360e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d006      	beq.n	800342a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2210      	movs	r2, #16
 8003422:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f906 	bl	8003636 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2208      	movs	r2, #8
 8003444:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8ff 	bl	800364a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d07b      	beq.n	800354e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d072      	beq.n	8003546 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	f043 0302 	orr.w	r3, r3, #2
 8003496:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d043      	beq.n	8003546 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d03e      	beq.n	8003546 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034ce:	2b60      	cmp	r3, #96	; 0x60
 80034d0:	d02b      	beq.n	800352a <HAL_CAN_IRQHandler+0x32a>
 80034d2:	2b60      	cmp	r3, #96	; 0x60
 80034d4:	d82e      	bhi.n	8003534 <HAL_CAN_IRQHandler+0x334>
 80034d6:	2b50      	cmp	r3, #80	; 0x50
 80034d8:	d022      	beq.n	8003520 <HAL_CAN_IRQHandler+0x320>
 80034da:	2b50      	cmp	r3, #80	; 0x50
 80034dc:	d82a      	bhi.n	8003534 <HAL_CAN_IRQHandler+0x334>
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d019      	beq.n	8003516 <HAL_CAN_IRQHandler+0x316>
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d826      	bhi.n	8003534 <HAL_CAN_IRQHandler+0x334>
 80034e6:	2b30      	cmp	r3, #48	; 0x30
 80034e8:	d010      	beq.n	800350c <HAL_CAN_IRQHandler+0x30c>
 80034ea:	2b30      	cmp	r3, #48	; 0x30
 80034ec:	d822      	bhi.n	8003534 <HAL_CAN_IRQHandler+0x334>
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d002      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x2f8>
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d005      	beq.n	8003502 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80034f6:	e01d      	b.n	8003534 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003500:	e019      	b.n	8003536 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	f043 0310 	orr.w	r3, r3, #16
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800350a:	e014      	b.n	8003536 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f043 0320 	orr.w	r3, r3, #32
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003514:	e00f      	b.n	8003536 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800351e:	e00a      	b.n	8003536 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003528:	e005      	b.n	8003536 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003532:	e000      	b.n	8003536 <HAL_CAN_IRQHandler+0x336>
            break;
 8003534:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699a      	ldr	r2, [r3, #24]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003544:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2204      	movs	r2, #4
 800354c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f87c 	bl	800365e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003566:	bf00      	nop
 8003568:	3728      	adds	r7, #40	; 0x28
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003690:	4013      	ands	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800369c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a6:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	60d3      	str	r3, [r2, #12]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <__NVIC_GetPriorityGrouping+0x18>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	f003 0307 	and.w	r3, r3, #7
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db0b      	blt.n	8003702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	4907      	ldr	r1, [pc, #28]	; (8003710 <__NVIC_EnableIRQ+0x38>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2001      	movs	r0, #1
 80036fa:	fa00 f202 	lsl.w	r2, r0, r2
 80036fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e000e100 	.word	0xe000e100

08003714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	2b00      	cmp	r3, #0
 8003726:	db0a      	blt.n	800373e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	490c      	ldr	r1, [pc, #48]	; (8003760 <__NVIC_SetPriority+0x4c>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	440b      	add	r3, r1
 8003738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800373c:	e00a      	b.n	8003754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4908      	ldr	r1, [pc, #32]	; (8003764 <__NVIC_SetPriority+0x50>)
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	3b04      	subs	r3, #4
 800374c:	0112      	lsls	r2, r2, #4
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	440b      	add	r3, r1
 8003752:	761a      	strb	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000e100 	.word	0xe000e100
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003768:	b480      	push	{r7}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f1c3 0307 	rsb	r3, r3, #7
 8003782:	2b04      	cmp	r3, #4
 8003784:	bf28      	it	cs
 8003786:	2304      	movcs	r3, #4
 8003788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3304      	adds	r3, #4
 800378e:	2b06      	cmp	r3, #6
 8003790:	d902      	bls.n	8003798 <NVIC_EncodePriority+0x30>
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3b03      	subs	r3, #3
 8003796:	e000      	b.n	800379a <NVIC_EncodePriority+0x32>
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	f04f 32ff 	mov.w	r2, #4294967295
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	401a      	ands	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b0:	f04f 31ff 	mov.w	r1, #4294967295
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	43d9      	mvns	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	4313      	orrs	r3, r2
         );
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3724      	adds	r7, #36	; 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e0:	d301      	bcc.n	80037e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00f      	b.n	8003806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e6:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <SysTick_Config+0x40>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ee:	210f      	movs	r1, #15
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	f7ff ff8e 	bl	8003714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <SysTick_Config+0x40>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <SysTick_Config+0x40>)
 8003800:	2207      	movs	r2, #7
 8003802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	e000e010 	.word	0xe000e010

08003814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff29 	bl	8003674 <__NVIC_SetPriorityGrouping>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800383c:	f7ff ff3e 	bl	80036bc <__NVIC_GetPriorityGrouping>
 8003840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	6978      	ldr	r0, [r7, #20]
 8003848:	f7ff ff8e 	bl	8003768 <NVIC_EncodePriority>
 800384c:	4602      	mov	r2, r0
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff5d 	bl	8003714 <__NVIC_SetPriority>
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff31 	bl	80036d8 <__NVIC_EnableIRQ>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffa2 	bl	80037d0 <SysTick_Config>
 800388c:	4603      	mov	r3, r0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a6:	e166      	b.n	8003b76 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	4013      	ands	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8158 	beq.w	8003b70 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d005      	beq.n	80038d8 <HAL_GPIO_Init+0x40>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d130      	bne.n	800393a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	2203      	movs	r2, #3
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800390e:	2201      	movs	r2, #1
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4013      	ands	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	f003 0201 	and.w	r2, r3, #1
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b03      	cmp	r3, #3
 8003944:	d017      	beq.n	8003976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	2203      	movs	r2, #3
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d123      	bne.n	80039ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	220f      	movs	r2, #15
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	08da      	lsrs	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3208      	adds	r2, #8
 80039c4:	6939      	ldr	r1, [r7, #16]
 80039c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 0203 	and.w	r2, r3, #3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80b2 	beq.w	8003b70 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0c:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <HAL_GPIO_Init+0x2fc>)
 8003a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a10:	4a60      	ldr	r2, [pc, #384]	; (8003b94 <HAL_GPIO_Init+0x2fc>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6613      	str	r3, [r2, #96]	; 0x60
 8003a18:	4b5e      	ldr	r3, [pc, #376]	; (8003b94 <HAL_GPIO_Init+0x2fc>)
 8003a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a24:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	220f      	movs	r2, #15
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a4e:	d02b      	beq.n	8003aa8 <HAL_GPIO_Init+0x210>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a52      	ldr	r2, [pc, #328]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d025      	beq.n	8003aa4 <HAL_GPIO_Init+0x20c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a51      	ldr	r2, [pc, #324]	; (8003ba0 <HAL_GPIO_Init+0x308>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d01f      	beq.n	8003aa0 <HAL_GPIO_Init+0x208>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a50      	ldr	r2, [pc, #320]	; (8003ba4 <HAL_GPIO_Init+0x30c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d019      	beq.n	8003a9c <HAL_GPIO_Init+0x204>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a4f      	ldr	r2, [pc, #316]	; (8003ba8 <HAL_GPIO_Init+0x310>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <HAL_GPIO_Init+0x200>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a4e      	ldr	r2, [pc, #312]	; (8003bac <HAL_GPIO_Init+0x314>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00d      	beq.n	8003a94 <HAL_GPIO_Init+0x1fc>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a4d      	ldr	r2, [pc, #308]	; (8003bb0 <HAL_GPIO_Init+0x318>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d007      	beq.n	8003a90 <HAL_GPIO_Init+0x1f8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a4c      	ldr	r2, [pc, #304]	; (8003bb4 <HAL_GPIO_Init+0x31c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d101      	bne.n	8003a8c <HAL_GPIO_Init+0x1f4>
 8003a88:	2307      	movs	r3, #7
 8003a8a:	e00e      	b.n	8003aaa <HAL_GPIO_Init+0x212>
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	e00c      	b.n	8003aaa <HAL_GPIO_Init+0x212>
 8003a90:	2306      	movs	r3, #6
 8003a92:	e00a      	b.n	8003aaa <HAL_GPIO_Init+0x212>
 8003a94:	2305      	movs	r3, #5
 8003a96:	e008      	b.n	8003aaa <HAL_GPIO_Init+0x212>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	e006      	b.n	8003aaa <HAL_GPIO_Init+0x212>
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e004      	b.n	8003aaa <HAL_GPIO_Init+0x212>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e002      	b.n	8003aaa <HAL_GPIO_Init+0x212>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <HAL_GPIO_Init+0x212>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	f002 0203 	and.w	r2, r2, #3
 8003ab0:	0092      	lsls	r2, r2, #2
 8003ab2:	4093      	lsls	r3, r2
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aba:	4937      	ldr	r1, [pc, #220]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ac8:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003aec:	4a32      	ldr	r2, [pc, #200]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003af2:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b16:	4a28      	ldr	r2, [pc, #160]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b1c:	4b26      	ldr	r3, [pc, #152]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b40:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b46:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3301      	adds	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f47f ae91 	bne.w	80038a8 <HAL_GPIO_Init+0x10>
  }
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	48000400 	.word	0x48000400
 8003ba0:	48000800 	.word	0x48000800
 8003ba4:	48000c00 	.word	0x48000c00
 8003ba8:	48001000 	.word	0x48001000
 8003bac:	48001400 	.word	0x48001400
 8003bb0:	48001800 	.word	0x48001800
 8003bb4:	48001c00 	.word	0x48001c00
 8003bb8:	40010400 	.word	0x40010400

08003bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	e001      	b.n	8003bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bfc:	787b      	ldrb	r3, [r7, #1]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c02:	887a      	ldrh	r2, [r7, #2]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c08:	e002      	b.n	8003c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c0a:	887a      	ldrh	r2, [r7, #2]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2c:	d102      	bne.n	8003c34 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c32:	e00b      	b.n	8003c4c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003c34:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c42:	d102      	bne.n	8003c4a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c48:	e000      	b.n	8003c4c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003c4a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40007000 	.word	0x40007000

08003c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d141      	bne.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c6a:	4b4b      	ldr	r3, [pc, #300]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c76:	d131      	bne.n	8003cdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c78:	4b47      	ldr	r3, [pc, #284]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7e:	4a46      	ldr	r2, [pc, #280]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c88:	4b43      	ldr	r3, [pc, #268]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c90:	4a41      	ldr	r2, [pc, #260]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c98:	4b40      	ldr	r3, [pc, #256]	; (8003d9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2232      	movs	r2, #50	; 0x32
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	4a3f      	ldr	r2, [pc, #252]	; (8003da0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	0c9b      	lsrs	r3, r3, #18
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cae:	e002      	b.n	8003cb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cb6:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc2:	d102      	bne.n	8003cca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f2      	bne.n	8003cb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cca:	4b33      	ldr	r3, [pc, #204]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd6:	d158      	bne.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e057      	b.n	8003d8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cdc:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce2:	4a2d      	ldr	r2, [pc, #180]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cec:	e04d      	b.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf4:	d141      	bne.n	8003d7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cf6:	4b28      	ldr	r3, [pc, #160]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d02:	d131      	bne.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d04:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0a:	4a23      	ldr	r2, [pc, #140]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d14:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d1c:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2232      	movs	r2, #50	; 0x32
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	0c9b      	lsrs	r3, r3, #18
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d3a:	e002      	b.n	8003d42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d42:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d102      	bne.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f2      	bne.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d62:	d112      	bne.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e011      	b.n	8003d8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d78:	e007      	b.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d7a:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d82:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d88:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	431bde83 	.word	0x431bde83

08003da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	; 0x28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f000 bc76 	b.w	80046a4 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db8:	4b97      	ldr	r3, [pc, #604]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc2:	4b95      	ldr	r3, [pc, #596]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80e6 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4c>
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	f040 808d 	bne.w	8003f02 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	f040 8089 	bne.w	8003f02 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003df0:	4b89      	ldr	r3, [pc, #548]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <HAL_RCC_OscConfig+0x66>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f000 bc4d 	b.w	80046a4 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0e:	4b82      	ldr	r3, [pc, #520]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <HAL_RCC_OscConfig+0x80>
 8003e1a:	4b7f      	ldr	r3, [pc, #508]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e22:	e005      	b.n	8003e30 <HAL_RCC_OscConfig+0x8c>
 8003e24:	4b7c      	ldr	r3, [pc, #496]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d224      	bcs.n	8003e7e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fdf3 	bl	8004a24 <RCC_SetFlashLatencyFromMSIRange>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f000 bc2d 	b.w	80046a4 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e4a:	4b73      	ldr	r3, [pc, #460]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a72      	ldr	r2, [pc, #456]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e50:	f043 0308 	orr.w	r3, r3, #8
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4b70      	ldr	r3, [pc, #448]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	496d      	ldr	r1, [pc, #436]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e68:	4b6b      	ldr	r3, [pc, #428]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	021b      	lsls	r3, r3, #8
 8003e76:	4968      	ldr	r1, [pc, #416]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
 8003e7c:	e025      	b.n	8003eca <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e7e:	4b66      	ldr	r3, [pc, #408]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a65      	ldr	r2, [pc, #404]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e84:	f043 0308 	orr.w	r3, r3, #8
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b63      	ldr	r3, [pc, #396]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	4960      	ldr	r1, [pc, #384]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e9c:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	495b      	ldr	r1, [pc, #364]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fdb2 	bl	8004a24 <RCC_SetFlashLatencyFromMSIRange>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e3ec      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eca:	f000 fd1f 	bl	800490c <HAL_RCC_GetSysClockFreq>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	4b51      	ldr	r3, [pc, #324]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	4950      	ldr	r1, [pc, #320]	; (800401c <HAL_RCC_OscConfig+0x278>)
 8003edc:	5ccb      	ldrb	r3, [r1, r3]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee6:	4a4e      	ldr	r2, [pc, #312]	; (8004020 <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003eea:	4b4e      	ldr	r3, [pc, #312]	; (8004024 <HAL_RCC_OscConfig+0x280>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fdfc 	bl	8002aec <HAL_InitTick>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d052      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	e3d0      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d032      	beq.n	8003f70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f0a:	4b43      	ldr	r3, [pc, #268]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a42      	ldr	r2, [pc, #264]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f16:	f7fe fe39 	bl	8002b8c <HAL_GetTick>
 8003f1a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f1e:	f7fe fe35 	bl	8002b8c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e3b9      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f30:	4b39      	ldr	r3, [pc, #228]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f3c:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a35      	ldr	r2, [pc, #212]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f42:	f043 0308 	orr.w	r3, r3, #8
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b33      	ldr	r3, [pc, #204]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	4930      	ldr	r1, [pc, #192]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	492b      	ldr	r1, [pc, #172]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	604b      	str	r3, [r1, #4]
 8003f6e:	e01a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f70:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a28      	ldr	r2, [pc, #160]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fe06 	bl	8002b8c <HAL_GetTick>
 8003f80:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f84:	f7fe fe02 	bl	8002b8c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e386      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f96:	4b20      	ldr	r3, [pc, #128]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1e0>
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d073      	beq.n	800409a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x220>
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	2b0c      	cmp	r3, #12
 8003fbc:	d10e      	bne.n	8003fdc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d10b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	4b14      	ldr	r3, [pc, #80]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d063      	beq.n	8004098 <HAL_RCC_OscConfig+0x2f4>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d15f      	bne.n	8004098 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e363      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x250>
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e025      	b.n	8004040 <HAL_RCC_OscConfig+0x29c>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffc:	d114      	bne.n	8004028 <HAL_RCC_OscConfig+0x284>
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a05      	ldr	r2, [pc, #20]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a02      	ldr	r2, [pc, #8]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e013      	b.n	8004040 <HAL_RCC_OscConfig+0x29c>
 8004018:	40021000 	.word	0x40021000
 800401c:	08004ea0 	.word	0x08004ea0
 8004020:	20000000 	.word	0x20000000
 8004024:	20000004 	.word	0x20000004
 8004028:	4b8f      	ldr	r3, [pc, #572]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a8e      	ldr	r2, [pc, #568]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800402e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	4b8c      	ldr	r3, [pc, #560]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a8b      	ldr	r2, [pc, #556]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800403a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d013      	beq.n	8004070 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fe fda0 	bl	8002b8c <HAL_GetTick>
 800404c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004050:	f7fe fd9c 	bl	8002b8c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	; 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e320      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004062:	4b81      	ldr	r3, [pc, #516]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x2ac>
 800406e:	e014      	b.n	800409a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fe fd8c 	bl	8002b8c <HAL_GetTick>
 8004074:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004078:	f7fe fd88 	bl	8002b8c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	; 0x64
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e30c      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800408a:	4b77      	ldr	r3, [pc, #476]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x2d4>
 8004096:	e000      	b.n	800409a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d060      	beq.n	8004168 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_OscConfig+0x314>
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b0c      	cmp	r3, #12
 80040b0:	d119      	bne.n	80040e6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d116      	bne.n	80040e6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b8:	4b6b      	ldr	r3, [pc, #428]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_OscConfig+0x32c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e2e9      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d0:	4b65      	ldr	r3, [pc, #404]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	4962      	ldr	r1, [pc, #392]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e4:	e040      	b.n	8004168 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d023      	beq.n	8004136 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ee:	4b5e      	ldr	r3, [pc, #376]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a5d      	ldr	r2, [pc, #372]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fe fd47 	bl	8002b8c <HAL_GetTick>
 80040fe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004102:	f7fe fd43 	bl	8002b8c <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e2c7      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004114:	4b54      	ldr	r3, [pc, #336]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004120:	4b51      	ldr	r3, [pc, #324]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	061b      	lsls	r3, r3, #24
 800412e:	494e      	ldr	r1, [pc, #312]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]
 8004134:	e018      	b.n	8004168 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004136:	4b4c      	ldr	r3, [pc, #304]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a4b      	ldr	r2, [pc, #300]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fe fd23 	bl	8002b8c <HAL_GetTick>
 8004146:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414a:	f7fe fd1f 	bl	8002b8c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e2a3      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800415c:	4b42      	ldr	r3, [pc, #264]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f0      	bne.n	800414a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8082 	beq.w	800427a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d05f      	beq.n	800423e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004184:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	429a      	cmp	r2, r3
 8004192:	d037      	beq.n	8004204 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d006      	beq.n	80041ac <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e27b      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01b      	beq.n	80041ee <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80041b6:	4b2c      	ldr	r3, [pc, #176]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041bc:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041c6:	f7fe fce1 	bl	8002b8c <HAL_GetTick>
 80041ca:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ce:	f7fe fcdd 	bl	8002b8c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b11      	cmp	r3, #17
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e261      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e0:	4b21      	ldr	r3, [pc, #132]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80041e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1ef      	bne.n	80041ce <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80041ee:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f4:	f023 0210 	bic.w	r2, r3, #16
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	491a      	ldr	r1, [pc, #104]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004204:	4b18      	ldr	r3, [pc, #96]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fe fcba 	bl	8002b8c <HAL_GetTick>
 8004218:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421c:	f7fe fcb6 	bl	8002b8c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b11      	cmp	r3, #17
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e23a      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800422e:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0ef      	beq.n	800421c <HAL_RCC_OscConfig+0x478>
 800423c:	e01d      	b.n	800427a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800423e:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004244:	4a08      	ldr	r2, [pc, #32]	; (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fe fc9d 	bl	8002b8c <HAL_GetTick>
 8004252:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004256:	f7fe fc99 	bl	8002b8c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b11      	cmp	r3, #17
 8004262:	d903      	bls.n	800426c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e21d      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
 8004268:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800426c:	4b83      	ldr	r3, [pc, #524]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ed      	bne.n	8004256 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80bd 	beq.w	8004402 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800428e:	4b7b      	ldr	r3, [pc, #492]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10e      	bne.n	80042b8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	4b78      	ldr	r3, [pc, #480]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429e:	4a77      	ldr	r2, [pc, #476]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6593      	str	r3, [r2, #88]	; 0x58
 80042a6:	4b75      	ldr	r3, [pc, #468]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b8:	4b71      	ldr	r3, [pc, #452]	; (8004480 <HAL_RCC_OscConfig+0x6dc>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d118      	bne.n	80042f6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c4:	4b6e      	ldr	r3, [pc, #440]	; (8004480 <HAL_RCC_OscConfig+0x6dc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a6d      	ldr	r2, [pc, #436]	; (8004480 <HAL_RCC_OscConfig+0x6dc>)
 80042ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d0:	f7fe fc5c 	bl	8002b8c <HAL_GetTick>
 80042d4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d8:	f7fe fc58 	bl	8002b8c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e1dc      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ea:	4b65      	ldr	r3, [pc, #404]	; (8004480 <HAL_RCC_OscConfig+0x6dc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d02c      	beq.n	800435c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004302:	4b5e      	ldr	r3, [pc, #376]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	4959      	ldr	r1, [pc, #356]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d010      	beq.n	800434a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004328:	4b54      	ldr	r3, [pc, #336]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	4a53      	ldr	r2, [pc, #332]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004338:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	4a4f      	ldr	r2, [pc, #316]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004348:	e018      	b.n	800437c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800434a:	4b4c      	ldr	r3, [pc, #304]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	4a4a      	ldr	r2, [pc, #296]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800435a:	e00f      	b.n	800437c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800435c:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	4a46      	ldr	r2, [pc, #280]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800436c:	4b43      	ldr	r3, [pc, #268]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	4a42      	ldr	r2, [pc, #264]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004374:	f023 0304 	bic.w	r3, r3, #4
 8004378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d016      	beq.n	80043b2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fe fc02 	bl	8002b8c <HAL_GetTick>
 8004388:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438c:	f7fe fbfe 	bl	8002b8c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e180      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a2:	4b36      	ldr	r3, [pc, #216]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ed      	beq.n	800438c <HAL_RCC_OscConfig+0x5e8>
 80043b0:	e01d      	b.n	80043ee <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7fe fbeb 	bl	8002b8c <HAL_GetTick>
 80043b6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fe fbe7 	bl	8002b8c <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e169      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d0:	4b2a      	ldr	r3, [pc, #168]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1ed      	bne.n	80043ba <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80043de:	4b27      	ldr	r3, [pc, #156]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	4a25      	ldr	r2, [pc, #148]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 80043e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d105      	bne.n	8004402 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f6:	4b21      	ldr	r3, [pc, #132]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	4a20      	ldr	r2, [pc, #128]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 80043fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004400:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d041      	beq.n	8004492 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01c      	beq.n	8004450 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004416:	4b19      	ldr	r3, [pc, #100]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800441c:	4a17      	ldr	r2, [pc, #92]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004426:	f7fe fbb1 	bl	8002b8c <HAL_GetTick>
 800442a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800442e:	f7fe fbad 	bl	8002b8c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e131      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ef      	beq.n	800442e <HAL_RCC_OscConfig+0x68a>
 800444e:	e020      	b.n	8004492 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <HAL_RCC_OscConfig+0x6d8>)
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fe fb94 	bl	8002b8c <HAL_GetTick>
 8004464:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004466:	e00d      	b.n	8004484 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004468:	f7fe fb90 	bl	8002b8c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d906      	bls.n	8004484 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e114      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004484:	4b89      	ldr	r3, [pc, #548]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1ea      	bne.n	8004468 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8103 	beq.w	80046a2 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	f040 80cb 	bne.w	800463c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044a6:	4b81      	ldr	r3, [pc, #516]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0203 	and.w	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d12c      	bne.n	8004514 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	3b01      	subs	r3, #1
 80044c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d123      	bne.n	8004514 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d11b      	bne.n	8004514 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d113      	bne.n	8004514 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	3b01      	subs	r3, #1
 80044fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d109      	bne.n	8004514 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	085b      	lsrs	r3, r3, #1
 800450c:	3b01      	subs	r3, #1
 800450e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d06d      	beq.n	80045f0 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	2b0c      	cmp	r3, #12
 8004518:	d068      	beq.n	80045ec <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800451a:	4b64      	ldr	r3, [pc, #400]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d105      	bne.n	8004532 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004526:	4b61      	ldr	r3, [pc, #388]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e0b6      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004536:	4b5d      	ldr	r3, [pc, #372]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a5c      	ldr	r2, [pc, #368]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 800453c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004540:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004542:	f7fe fb23 	bl	8002b8c <HAL_GetTick>
 8004546:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454a:	f7fe fb1f 	bl	8002b8c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e0a3      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	4b50      	ldr	r3, [pc, #320]	; (80046b0 <HAL_RCC_OscConfig+0x90c>)
 800456e:	4013      	ands	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004578:	3a01      	subs	r2, #1
 800457a:	0112      	lsls	r2, r2, #4
 800457c:	4311      	orrs	r1, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004582:	0212      	lsls	r2, r2, #8
 8004584:	4311      	orrs	r1, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800458a:	0852      	lsrs	r2, r2, #1
 800458c:	3a01      	subs	r2, #1
 800458e:	0552      	lsls	r2, r2, #21
 8004590:	4311      	orrs	r1, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004596:	0852      	lsrs	r2, r2, #1
 8004598:	3a01      	subs	r2, #1
 800459a:	0652      	lsls	r2, r2, #25
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045a2:	06d2      	lsls	r2, r2, #27
 80045a4:	430a      	orrs	r2, r1
 80045a6:	4941      	ldr	r1, [pc, #260]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045ac:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a3e      	ldr	r2, [pc, #248]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 80045b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045b8:	4b3c      	ldr	r3, [pc, #240]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4a3b      	ldr	r2, [pc, #236]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 80045be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045c4:	f7fe fae2 	bl	8002b8c <HAL_GetTick>
 80045c8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fe fade 	bl	8002b8c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e062      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045de:	4b33      	ldr	r3, [pc, #204]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045ea:	e05a      	b.n	80046a2 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e059      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f0:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d152      	bne.n	80046a2 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2a      	ldr	r2, [pc, #168]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004606:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4a27      	ldr	r2, [pc, #156]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 800460e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004612:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004614:	f7fe faba 	bl	8002b8c <HAL_GetTick>
 8004618:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fe fab6 	bl	8002b8c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e03a      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462e:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x878>
 800463a:	e032      	b.n	80046a2 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d02d      	beq.n	800469e <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a19      	ldr	r2, [pc, #100]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800464e:	4b17      	ldr	r3, [pc, #92]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800465a:	4b14      	ldr	r3, [pc, #80]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	4a13      	ldr	r2, [pc, #76]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004660:	f023 0303 	bic.w	r3, r3, #3
 8004664:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004666:	4b11      	ldr	r3, [pc, #68]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4a10      	ldr	r2, [pc, #64]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 800466c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004674:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fe fa89 	bl	8002b8c <HAL_GetTick>
 800467a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7fe fa85 	bl	8002b8c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e009      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <HAL_RCC_OscConfig+0x908>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f0      	bne.n	800467e <HAL_RCC_OscConfig+0x8da>
 800469c:	e001      	b.n	80046a2 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3728      	adds	r7, #40	; 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	019d800c 	.word	0x019d800c

080046b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e10f      	b.n	80048ec <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046cc:	4b89      	ldr	r3, [pc, #548]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d910      	bls.n	80046fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	4b86      	ldr	r3, [pc, #536]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 020f 	bic.w	r2, r3, #15
 80046e2:	4984      	ldr	r1, [pc, #528]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b82      	ldr	r3, [pc, #520]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0f7      	b.n	80048ec <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8089 	beq.w	800481c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b03      	cmp	r3, #3
 8004710:	d133      	bne.n	800477a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004712:	4b79      	ldr	r3, [pc, #484]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0e4      	b.n	80048ec <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004722:	f000 f9d9 	bl	8004ad8 <RCC_GetSysClockFreqFromPLLSource>
 8004726:	4603      	mov	r3, r0
 8004728:	4a74      	ldr	r2, [pc, #464]	; (80048fc <HAL_RCC_ClockConfig+0x248>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d955      	bls.n	80047da <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800472e:	4b72      	ldr	r3, [pc, #456]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800473a:	4b6f      	ldr	r3, [pc, #444]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004742:	4a6d      	ldr	r2, [pc, #436]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 8004744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004748:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e044      	b.n	80047da <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d03e      	beq.n	80047da <HAL_RCC_ClockConfig+0x126>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d13a      	bne.n	80047da <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004764:	4b64      	ldr	r3, [pc, #400]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476c:	4a62      	ldr	r2, [pc, #392]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 800476e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004772:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e02f      	b.n	80047da <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d107      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004782:	4b5d      	ldr	r3, [pc, #372]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d115      	bne.n	80047ba <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e0ac      	b.n	80048ec <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800479a:	4b57      	ldr	r3, [pc, #348]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0a0      	b.n	80048ec <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047aa:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e098      	b.n	80048ec <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80047ba:	f000 f8a7 	bl	800490c <HAL_RCC_GetSysClockFreq>
 80047be:	4603      	mov	r3, r0
 80047c0:	4a4e      	ldr	r2, [pc, #312]	; (80048fc <HAL_RCC_ClockConfig+0x248>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d909      	bls.n	80047da <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047c6:	4b4c      	ldr	r3, [pc, #304]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ce:	4a4a      	ldr	r2, [pc, #296]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 80047d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 0203 	bic.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4944      	ldr	r1, [pc, #272]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ec:	f7fe f9ce 	bl	8002b8c <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fe f9ca 	bl	8002b8c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e070      	b.n	80048ec <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 020c 	and.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d1eb      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d009      	beq.n	800483c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004828:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	4930      	ldr	r1, [pc, #192]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
 800483a:	e008      	b.n	800484e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b80      	cmp	r3, #128	; 0x80
 8004840:	d105      	bne.n	800484e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004842:	4b2d      	ldr	r3, [pc, #180]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 8004848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800484e:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d210      	bcs.n	800487e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485c:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 020f 	bic.w	r2, r3, #15
 8004864:	4923      	ldr	r1, [pc, #140]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486c:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <HAL_RCC_ClockConfig+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d001      	beq.n	800487e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e036      	b.n	80048ec <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800488a:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	4918      	ldr	r1, [pc, #96]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d009      	beq.n	80048bc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4910      	ldr	r1, [pc, #64]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048bc:	f000 f826 	bl	800490c <HAL_RCC_GetSysClockFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <HAL_RCC_ClockConfig+0x244>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	490c      	ldr	r1, [pc, #48]	; (8004900 <HAL_RCC_ClockConfig+0x24c>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
 80048d8:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <HAL_RCC_ClockConfig+0x250>)
 80048da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048dc:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <HAL_RCC_ClockConfig+0x254>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe f903 	bl	8002aec <HAL_InitTick>
 80048e6:	4603      	mov	r3, r0
 80048e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40022000 	.word	0x40022000
 80048f8:	40021000 	.word	0x40021000
 80048fc:	04c4b400 	.word	0x04c4b400
 8004900:	08004ea0 	.word	0x08004ea0
 8004904:	20000000 	.word	0x20000000
 8004908:	20000004 	.word	0x20000004

0800490c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800490c:	b480      	push	{r7}
 800490e:	b089      	sub	sp, #36	; 0x24
 8004910:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800491a:	4b3e      	ldr	r3, [pc, #248]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004924:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x34>
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d121      	bne.n	800497e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d11e      	bne.n	800497e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004940:	4b34      	ldr	r3, [pc, #208]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d107      	bne.n	800495c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800494c:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800494e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e005      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800495c:	4b2d      	ldr	r3, [pc, #180]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004968:	4a2b      	ldr	r2, [pc, #172]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x10c>)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004970:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10d      	bne.n	8004994 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800497c:	e00a      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d102      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004984:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	e004      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d101      	bne.n	8004994 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004990:	4b23      	ldr	r3, [pc, #140]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004992:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b0c      	cmp	r3, #12
 8004998:	d134      	bne.n	8004a04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800499a:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d003      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0xac>
 80049b0:	e005      	b.n	80049be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x110>)
 80049b4:	617b      	str	r3, [r7, #20]
      break;
 80049b6:	e005      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x114>)
 80049ba:	617b      	str	r3, [r7, #20]
      break;
 80049bc:	e002      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	617b      	str	r3, [r7, #20]
      break;
 80049c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	3301      	adds	r3, #1
 80049d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	fb03 f202 	mul.w	r2, r3, r2
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	0e5b      	lsrs	r3, r3, #25
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	3301      	adds	r3, #1
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a04:	69bb      	ldr	r3, [r7, #24]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3724      	adds	r7, #36	; 0x24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	08004eb0 	.word	0x08004eb0
 8004a1c:	00f42400 	.word	0x00f42400
 8004a20:	007a1200 	.word	0x007a1200

08004a24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a30:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a3c:	f7ff f8ee 	bl	8003c1c <HAL_PWREx_GetVoltageRange>
 8004a40:	6178      	str	r0, [r7, #20]
 8004a42:	e014      	b.n	8004a6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a44:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	4a21      	ldr	r2, [pc, #132]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a50:	4b1f      	ldr	r3, [pc, #124]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a5c:	f7ff f8de 	bl	8003c1c <HAL_PWREx_GetVoltageRange>
 8004a60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a62:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a74:	d10b      	bne.n	8004a8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b80      	cmp	r3, #128	; 0x80
 8004a7a:	d913      	bls.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2ba0      	cmp	r3, #160	; 0xa0
 8004a80:	d902      	bls.n	8004a88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a82:	2302      	movs	r3, #2
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	e00d      	b.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a88:	2301      	movs	r3, #1
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	e00a      	b.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b7f      	cmp	r3, #127	; 0x7f
 8004a92:	d902      	bls.n	8004a9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004a94:	2302      	movs	r3, #2
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	e004      	b.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b70      	cmp	r3, #112	; 0x70
 8004a9e:	d101      	bne.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 020f 	bic.w	r2, r3, #15
 8004aac:	4909      	ldr	r1, [pc, #36]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d001      	beq.n	8004ac6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40022000 	.word	0x40022000

08004ad8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004ae2:	4b2d      	ldr	r3, [pc, #180]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d118      	bne.n	8004b20 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004aee:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d107      	bne.n	8004b0a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004afa:	4b27      	ldr	r3, [pc, #156]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e005      	b.n	8004b16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d003      	beq.n	8004b38 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d003      	beq.n	8004b3e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8004b36:	e005      	b.n	8004b44 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004b38:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004b3a:	613b      	str	r3, [r7, #16]
    break;
 8004b3c:	e005      	b.n	8004b4a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004b3e:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004b40:	613b      	str	r3, [r7, #16]
    break;
 8004b42:	e002      	b.n	8004b4a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	613b      	str	r3, [r7, #16]
    break;
 8004b48:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	091b      	lsrs	r3, r3, #4
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	3301      	adds	r3, #1
 8004b56:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b58:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	0a1b      	lsrs	r3, r3, #8
 8004b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	fb03 f202 	mul.w	r2, r3, r2
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	0e5b      	lsrs	r3, r3, #25
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004b8a:	683b      	ldr	r3, [r7, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	08004eb0 	.word	0x08004eb0
 8004ba0:	00f42400 	.word	0x00f42400
 8004ba4:	007a1200 	.word	0x007a1200

08004ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e095      	b.n	8004ce6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d108      	bne.n	8004bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bca:	d009      	beq.n	8004be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61da      	str	r2, [r3, #28]
 8004bd2:	e005      	b.n	8004be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fd fe52 	bl	80028a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c20:	d902      	bls.n	8004c28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e002      	b.n	8004c2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c36:	d007      	beq.n	8004c48 <HAL_SPI_Init+0xa0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c40:	d002      	beq.n	8004c48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	ea42 0103 	orr.w	r1, r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	f003 0204 	and.w	r2, r3, #4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cc4:	ea42 0103 	orr.w	r1, r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_ZdlPvj>:
 8004cee:	f000 b800 	b.w	8004cf2 <_ZdlPv>

08004cf2 <_ZdlPv>:
 8004cf2:	f000 b825 	b.w	8004d40 <free>
	...

08004cf8 <__libc_init_array>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	4d0d      	ldr	r5, [pc, #52]	; (8004d30 <__libc_init_array+0x38>)
 8004cfc:	4c0d      	ldr	r4, [pc, #52]	; (8004d34 <__libc_init_array+0x3c>)
 8004cfe:	1b64      	subs	r4, r4, r5
 8004d00:	10a4      	asrs	r4, r4, #2
 8004d02:	2600      	movs	r6, #0
 8004d04:	42a6      	cmp	r6, r4
 8004d06:	d109      	bne.n	8004d1c <__libc_init_array+0x24>
 8004d08:	4d0b      	ldr	r5, [pc, #44]	; (8004d38 <__libc_init_array+0x40>)
 8004d0a:	4c0c      	ldr	r4, [pc, #48]	; (8004d3c <__libc_init_array+0x44>)
 8004d0c:	f000 f890 	bl	8004e30 <_init>
 8004d10:	1b64      	subs	r4, r4, r5
 8004d12:	10a4      	asrs	r4, r4, #2
 8004d14:	2600      	movs	r6, #0
 8004d16:	42a6      	cmp	r6, r4
 8004d18:	d105      	bne.n	8004d26 <__libc_init_array+0x2e>
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d20:	4798      	blx	r3
 8004d22:	3601      	adds	r6, #1
 8004d24:	e7ee      	b.n	8004d04 <__libc_init_array+0xc>
 8004d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2a:	4798      	blx	r3
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	e7f2      	b.n	8004d16 <__libc_init_array+0x1e>
 8004d30:	08004ee0 	.word	0x08004ee0
 8004d34:	08004ee0 	.word	0x08004ee0
 8004d38:	08004ee0 	.word	0x08004ee0
 8004d3c:	08004ee8 	.word	0x08004ee8

08004d40 <free>:
 8004d40:	4b02      	ldr	r3, [pc, #8]	; (8004d4c <free+0xc>)
 8004d42:	4601      	mov	r1, r0
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	f000 b819 	b.w	8004d7c <_free_r>
 8004d4a:	bf00      	nop
 8004d4c:	2000000c 	.word	0x2000000c

08004d50 <memcpy>:
 8004d50:	440a      	add	r2, r1
 8004d52:	4291      	cmp	r1, r2
 8004d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d58:	d100      	bne.n	8004d5c <memcpy+0xc>
 8004d5a:	4770      	bx	lr
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d66:	4291      	cmp	r1, r2
 8004d68:	d1f9      	bne.n	8004d5e <memcpy+0xe>
 8004d6a:	bd10      	pop	{r4, pc}

08004d6c <memset>:
 8004d6c:	4402      	add	r2, r0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d100      	bne.n	8004d76 <memset+0xa>
 8004d74:	4770      	bx	lr
 8004d76:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7a:	e7f9      	b.n	8004d70 <memset+0x4>

08004d7c <_free_r>:
 8004d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d7e:	2900      	cmp	r1, #0
 8004d80:	d044      	beq.n	8004e0c <_free_r+0x90>
 8004d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d86:	9001      	str	r0, [sp, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d8e:	bfb8      	it	lt
 8004d90:	18e4      	addlt	r4, r4, r3
 8004d92:	f000 f83f 	bl	8004e14 <__malloc_lock>
 8004d96:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <_free_r+0x94>)
 8004d98:	9801      	ldr	r0, [sp, #4]
 8004d9a:	6813      	ldr	r3, [r2, #0]
 8004d9c:	b933      	cbnz	r3, 8004dac <_free_r+0x30>
 8004d9e:	6063      	str	r3, [r4, #4]
 8004da0:	6014      	str	r4, [r2, #0]
 8004da2:	b003      	add	sp, #12
 8004da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004da8:	f000 b83a 	b.w	8004e20 <__malloc_unlock>
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	d908      	bls.n	8004dc2 <_free_r+0x46>
 8004db0:	6825      	ldr	r5, [r4, #0]
 8004db2:	1961      	adds	r1, r4, r5
 8004db4:	428b      	cmp	r3, r1
 8004db6:	bf01      	itttt	eq
 8004db8:	6819      	ldreq	r1, [r3, #0]
 8004dba:	685b      	ldreq	r3, [r3, #4]
 8004dbc:	1949      	addeq	r1, r1, r5
 8004dbe:	6021      	streq	r1, [r4, #0]
 8004dc0:	e7ed      	b.n	8004d9e <_free_r+0x22>
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	b10b      	cbz	r3, 8004dcc <_free_r+0x50>
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	d9fa      	bls.n	8004dc2 <_free_r+0x46>
 8004dcc:	6811      	ldr	r1, [r2, #0]
 8004dce:	1855      	adds	r5, r2, r1
 8004dd0:	42a5      	cmp	r5, r4
 8004dd2:	d10b      	bne.n	8004dec <_free_r+0x70>
 8004dd4:	6824      	ldr	r4, [r4, #0]
 8004dd6:	4421      	add	r1, r4
 8004dd8:	1854      	adds	r4, r2, r1
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	6011      	str	r1, [r2, #0]
 8004dde:	d1e0      	bne.n	8004da2 <_free_r+0x26>
 8004de0:	681c      	ldr	r4, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	6053      	str	r3, [r2, #4]
 8004de6:	4421      	add	r1, r4
 8004de8:	6011      	str	r1, [r2, #0]
 8004dea:	e7da      	b.n	8004da2 <_free_r+0x26>
 8004dec:	d902      	bls.n	8004df4 <_free_r+0x78>
 8004dee:	230c      	movs	r3, #12
 8004df0:	6003      	str	r3, [r0, #0]
 8004df2:	e7d6      	b.n	8004da2 <_free_r+0x26>
 8004df4:	6825      	ldr	r5, [r4, #0]
 8004df6:	1961      	adds	r1, r4, r5
 8004df8:	428b      	cmp	r3, r1
 8004dfa:	bf04      	itt	eq
 8004dfc:	6819      	ldreq	r1, [r3, #0]
 8004dfe:	685b      	ldreq	r3, [r3, #4]
 8004e00:	6063      	str	r3, [r4, #4]
 8004e02:	bf04      	itt	eq
 8004e04:	1949      	addeq	r1, r1, r5
 8004e06:	6021      	streq	r1, [r4, #0]
 8004e08:	6054      	str	r4, [r2, #4]
 8004e0a:	e7ca      	b.n	8004da2 <_free_r+0x26>
 8004e0c:	b003      	add	sp, #12
 8004e0e:	bd30      	pop	{r4, r5, pc}
 8004e10:	2000020c 	.word	0x2000020c

08004e14 <__malloc_lock>:
 8004e14:	4801      	ldr	r0, [pc, #4]	; (8004e1c <__malloc_lock+0x8>)
 8004e16:	f000 b809 	b.w	8004e2c <__retarget_lock_acquire_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20000210 	.word	0x20000210

08004e20 <__malloc_unlock>:
 8004e20:	4801      	ldr	r0, [pc, #4]	; (8004e28 <__malloc_unlock+0x8>)
 8004e22:	f000 b804 	b.w	8004e2e <__retarget_lock_release_recursive>
 8004e26:	bf00      	nop
 8004e28:	20000210 	.word	0x20000210

08004e2c <__retarget_lock_acquire_recursive>:
 8004e2c:	4770      	bx	lr

08004e2e <__retarget_lock_release_recursive>:
 8004e2e:	4770      	bx	lr

08004e30 <_init>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	bf00      	nop
 8004e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e36:	bc08      	pop	{r3}
 8004e38:	469e      	mov	lr, r3
 8004e3a:	4770      	bx	lr

08004e3c <_fini>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	bf00      	nop
 8004e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e42:	bc08      	pop	{r3}
 8004e44:	469e      	mov	lr, r3
 8004e46:	4770      	bx	lr
