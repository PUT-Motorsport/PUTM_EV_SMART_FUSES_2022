
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008008  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800845c  0800845c  00020280  2**0
                  CONTENTS
  4 .ARM          00000000  0800845c  0800845c  00020280  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800845c  0800845c  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800846c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000280  080086ec  00020280  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  080086ec  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a164  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004135  00000000  00000000  0004a414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0004e550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0004fa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032f28  00000000  00000000  00050e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016602  00000000  00000000  00083d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00130afd  00000000  00000000  0009a382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cae7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd8  00000000  00000000  001caed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000280 	.word	0x20000280
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080081ac 	.word	0x080081ac

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000284 	.word	0x20000284
 80001f8:	080081ac 	.word	0x080081ac

080001fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b08a      	sub	sp, #40	; 0x28
 8000200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000202:	f107 031c 	add.w	r3, r7, #28
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
 800021c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800021e:	4b2f      	ldr	r3, [pc, #188]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000220:	4a2f      	ldr	r2, [pc, #188]	; (80002e0 <MX_ADC1_Init+0xe4>)
 8000222:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000224:	4b2d      	ldr	r3, [pc, #180]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000226:	2200      	movs	r2, #0
 8000228:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800022a:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <MX_ADC1_Init+0xe0>)
 800022c:	2200      	movs	r2, #0
 800022e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000230:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000236:	4b29      	ldr	r3, [pc, #164]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000238:	2200      	movs	r2, #0
 800023a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800023c:	4b27      	ldr	r3, [pc, #156]	; (80002dc <MX_ADC1_Init+0xe0>)
 800023e:	2204      	movs	r2, #4
 8000240:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000242:	4b26      	ldr	r3, [pc, #152]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000244:	2200      	movs	r2, #0
 8000246:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000248:	4b24      	ldr	r3, [pc, #144]	; (80002dc <MX_ADC1_Init+0xe0>)
 800024a:	2200      	movs	r2, #0
 800024c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800024e:	4b23      	ldr	r3, [pc, #140]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000250:	2201      	movs	r2, #1
 8000252:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000256:	2200      	movs	r2, #0
 8000258:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800025c:	4b1f      	ldr	r3, [pc, #124]	; (80002dc <MX_ADC1_Init+0xe0>)
 800025e:	2200      	movs	r2, #0
 8000260:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000262:	4b1e      	ldr	r3, [pc, #120]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000264:	2200      	movs	r2, #0
 8000266:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000268:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <MX_ADC1_Init+0xe0>)
 800026a:	2200      	movs	r2, #0
 800026c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000270:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000272:	2200      	movs	r2, #0
 8000274:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000276:	4b19      	ldr	r3, [pc, #100]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000278:	2200      	movs	r2, #0
 800027a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800027e:	4817      	ldr	r0, [pc, #92]	; (80002dc <MX_ADC1_Init+0xe0>)
 8000280:	f004 f9fe 	bl	8004680 <HAL_ADC_Init>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800028a:	f003 f869 	bl	8003360 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000292:	f107 031c 	add.w	r3, r7, #28
 8000296:	4619      	mov	r1, r3
 8000298:	4810      	ldr	r0, [pc, #64]	; (80002dc <MX_ADC1_Init+0xe0>)
 800029a:	f004 ff65 	bl	8005168 <HAL_ADCEx_MultiModeConfigChannel>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80002a4:	f003 f85c 	bl	8003360 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80002a8:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <MX_ADC1_Init+0xe8>)
 80002aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ac:	2306      	movs	r3, #6
 80002ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002b4:	237f      	movs	r3, #127	; 0x7f
 80002b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002b8:	2304      	movs	r3, #4
 80002ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_ADC1_Init+0xe0>)
 80002c6:	f004 fb2d 	bl	8004924 <HAL_ADC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80002d0:	f003 f846 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3728      	adds	r7, #40	; 0x28
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000029c 	.word	0x2000029c
 80002e0:	50040000 	.word	0x50040000
 80002e4:	36902000 	.word	0x36902000

080002e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b0b2      	sub	sp, #200	; 0xc8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	f107 031c 	add.w	r3, r7, #28
 8000304:	2298      	movs	r2, #152	; 0x98
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f007 feed 	bl	80080e8 <memset>
  if(adcHandle->Instance==ADC1)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a42      	ldr	r2, [pc, #264]	; (800041c <HAL_ADC_MspInit+0x134>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d17d      	bne.n	8000414 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000318:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800031c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800031e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000326:	2302      	movs	r3, #2
 8000328:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800032a:	2302      	movs	r3, #2
 800032c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800032e:	2308      	movs	r3, #8
 8000330:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000332:	2302      	movs	r3, #2
 8000334:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000336:	2302      	movs	r3, #2
 8000338:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800033a:	2302      	movs	r3, #2
 800033c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800033e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000342:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	4618      	mov	r0, r3
 800034a:	f007 f897 	bl	800747c <HAL_RCCEx_PeriphCLKConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000354:	f003 f804 	bl	8003360 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <HAL_ADC_MspInit+0x138>)
 800035a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035c:	4a30      	ldr	r2, [pc, #192]	; (8000420 <HAL_ADC_MspInit+0x138>)
 800035e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000364:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <HAL_ADC_MspInit+0x138>)
 8000366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800036c:	61bb      	str	r3, [r7, #24]
 800036e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <HAL_ADC_MspInit+0x138>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000374:	4a2a      	ldr	r2, [pc, #168]	; (8000420 <HAL_ADC_MspInit+0x138>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <HAL_ADC_MspInit+0x138>)
 800037e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000380:	f003 0301 	and.w	r3, r3, #1
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000388:	4b25      	ldr	r3, [pc, #148]	; (8000420 <HAL_ADC_MspInit+0x138>)
 800038a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038c:	4a24      	ldr	r2, [pc, #144]	; (8000420 <HAL_ADC_MspInit+0x138>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000394:	4b22      	ldr	r3, [pc, #136]	; (8000420 <HAL_ADC_MspInit+0x138>)
 8000396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	613b      	str	r3, [r7, #16]
 800039e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <HAL_ADC_MspInit+0x138>)
 80003a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a4:	4a1e      	ldr	r2, [pc, #120]	; (8000420 <HAL_ADC_MspInit+0x138>)
 80003a6:	f043 0302 	orr.w	r3, r3, #2
 80003aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <HAL_ADC_MspInit+0x138>)
 80003ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b0:	f003 0302 	and.w	r3, r3, #2
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003b8:	2301      	movs	r3, #1
 80003ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80003be:	230b      	movs	r3, #11
 80003c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80003ce:	4619      	mov	r1, r3
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f005 feca 	bl	800616c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80003d8:	2330      	movs	r3, #48	; 0x30
 80003da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80003de:	230b      	movs	r3, #11
 80003e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80003ee:	4619      	mov	r1, r3
 80003f0:	480c      	ldr	r0, [pc, #48]	; (8000424 <HAL_ADC_MspInit+0x13c>)
 80003f2:	f005 febb 	bl	800616c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003f6:	2303      	movs	r3, #3
 80003f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80003fc:	230b      	movs	r3, #11
 80003fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000408:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800040c:	4619      	mov	r1, r3
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <HAL_ADC_MspInit+0x140>)
 8000410:	f005 feac 	bl	800616c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000414:	bf00      	nop
 8000416:	37c8      	adds	r7, #200	; 0xc8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	50040000 	.word	0x50040000
 8000420:	40021000 	.word	0x40021000
 8000424:	48000800 	.word	0x48000800
 8000428:	48000400 	.word	0x48000400

0800042c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_CAN1_Init+0x64>)
 8000432:	4a18      	ldr	r2, [pc, #96]	; (8000494 <MX_CAN1_Init+0x68>)
 8000434:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000436:	4b16      	ldr	r3, [pc, #88]	; (8000490 <MX_CAN1_Init+0x64>)
 8000438:	2206      	movs	r2, #6
 800043a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_CAN1_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_CAN1_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_CAN1_Init+0x64>)
 800044a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800044e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_CAN1_Init+0x64>)
 8000452:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000456:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <MX_CAN1_Init+0x64>)
 800045a:	2200      	movs	r2, #0
 800045c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_CAN1_Init+0x64>)
 8000460:	2200      	movs	r2, #0
 8000462:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <MX_CAN1_Init+0x64>)
 8000466:	2200      	movs	r2, #0
 8000468:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_CAN1_Init+0x64>)
 800046c:	2200      	movs	r2, #0
 800046e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <MX_CAN1_Init+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_CAN1_Init+0x64>)
 8000478:	2200      	movs	r2, #0
 800047a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <MX_CAN1_Init+0x64>)
 800047e:	f004 ff17 	bl	80052b0 <HAL_CAN_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000488:	f002 ff6a 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000304 	.word	0x20000304
 8000494:	40006400 	.word	0x40006400

08000498 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	; 0x28
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a20      	ldr	r2, [pc, #128]	; (8000538 <HAL_CAN_MspInit+0xa0>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d139      	bne.n	800052e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004ba:	4b20      	ldr	r3, [pc, #128]	; (800053c <HAL_CAN_MspInit+0xa4>)
 80004bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004be:	4a1f      	ldr	r2, [pc, #124]	; (800053c <HAL_CAN_MspInit+0xa4>)
 80004c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c4:	6593      	str	r3, [r2, #88]	; 0x58
 80004c6:	4b1d      	ldr	r3, [pc, #116]	; (800053c <HAL_CAN_MspInit+0xa4>)
 80004c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <HAL_CAN_MspInit+0xa4>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a19      	ldr	r2, [pc, #100]	; (800053c <HAL_CAN_MspInit+0xa4>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <HAL_CAN_MspInit+0xa4>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004f8:	2303      	movs	r3, #3
 80004fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80004fc:	2309      	movs	r3, #9
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050a:	f005 fe2f 	bl	800616c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2014      	movs	r0, #20
 8000514:	f005 fdf3 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000518:	2014      	movs	r0, #20
 800051a:	f005 fe0c 	bl	8006136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2015      	movs	r0, #21
 8000524:	f005 fdeb 	bl	80060fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000528:	2015      	movs	r0, #21
 800052a:	f005 fe04 	bl	8006136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800052e:	bf00      	nop
 8000530:	3728      	adds	r7, #40	; 0x28
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40006400 	.word	0x40006400
 800053c:	40021000 	.word	0x40021000

08000540 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>:
{
	return this->channels[size_t(channel)].current;
}

template <uint32_t num_of_sf>
void SmartFuseHandler<num_of_sf>::emplaceBack(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef *const hspi, const ChannelsSettings &channels_settings)
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b087      	sub	sp, #28
 800055c:	af02      	add	r7, sp, #8
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
 8000564:	603b      	str	r3, [r7, #0]
{
	this->smart_fuses.emplace_back(port, pin, hspi, channels_settings);
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	463c      	mov	r4, r7
 800056a:	1d3a      	adds	r2, r7, #4
 800056c:	f107 0108 	add.w	r1, r7, #8
 8000570:	6a3b      	ldr	r3, [r7, #32]
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	4623      	mov	r3, r4
 8000576:	f001 fb36 	bl	8001be6 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRK16ChannelsSettingsEEEvDpOT_>
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bd90      	pop	{r4, r7, pc}

08000582 <_ZN16SmartFuseHandlerILm4EE9handleAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::handleAll()
 8000582:	b580      	push	{r7, lr}
 8000584:	b088      	sub	sp, #32
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 800058a:	2300      	movs	r3, #0
 800058c:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fb57 	bl	8001c48 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 800059a:	61b8      	str	r0, [r7, #24]
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fb5e 	bl	8001c60 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 80005a4:	6138      	str	r0, [r7, #16]
 80005a6:	69ba      	ldr	r2, [r7, #24]
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d00f      	beq.n	80005ce <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x4c>
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.handle();
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 fc4e 	bl	8000e54 <_ZN9SmartFuse6handleEv>
 80005b8:	4603      	mov	r3, r0
 80005ba:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 80005bc:	7afb      	ldrb	r3, [r7, #11]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x44>
 80005c2:	7afb      	ldrb	r3, [r7, #11]
 80005c4:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	339c      	adds	r3, #156	; 0x9c
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	e7eb      	b.n	80005a6 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x24>
	}

	return result;
 80005ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3720      	adds	r7, #32
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <_ZN16SmartFuseHandlerILm4EE7initAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::initAll()
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 80005e0:	2300      	movs	r3, #0
 80005e2:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fb2c 	bl	8001c48 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 80005f0:	61b8      	str	r0, [r7, #24]
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fb33 	bl	8001c60 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 80005fa:	6138      	str	r0, [r7, #16]
 80005fc:	69ba      	ldr	r2, [r7, #24]
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	429a      	cmp	r2, r3
 8000602:	d00f      	beq.n	8000624 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x4c>
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.init();
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f000 fbc9 	bl	8000da0 <_ZN9SmartFuse4initEv>
 800060e:	4603      	mov	r3, r0
 8000610:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 8000612:	7afb      	ldrb	r3, [r7, #11]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x44>
 8000618:	7afb      	ldrb	r3, [r7, #11]
 800061a:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	339c      	adds	r3, #156	; 0x9c
 8000620:	61bb      	str	r3, [r7, #24]
 8000622:	e7eb      	b.n	80005fc <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x24>
	}

	return result;
 8000624:	7ffb      	ldrb	r3, [r7, #31]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_ZN16SmartFuseHandlerILm4EE9enableAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::enableAll()
 800062e:	b580      	push	{r7, lr}
 8000630:	b088      	sub	sp, #32
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 8000636:	2300      	movs	r3, #0
 8000638:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fb01 	bl	8001c48 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 8000646:	61b8      	str	r0, [r7, #24]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fb08 	bl	8001c60 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 8000650:	6138      	str	r0, [r7, #16]
 8000652:	69ba      	ldr	r2, [r7, #24]
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	429a      	cmp	r2, r3
 8000658:	d012      	beq.n	8000680 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x52>
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.enable();
 800065e:	68f8      	ldr	r0, [r7, #12]
 8000660:	f000 fbb8 	bl	8000dd4 <_ZN9SmartFuse6enableEv>
 8000664:	4603      	mov	r3, r0
 8000666:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(5);
 8000668:	2005      	movs	r0, #5
 800066a:	f003 fe45 	bl	80042f8 <HAL_Delay>
		if(x != SmartFuseState::Ok) result = x;
 800066e:	7afb      	ldrb	r3, [r7, #11]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x4a>
 8000674:	7afb      	ldrb	r3, [r7, #11]
 8000676:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	339c      	adds	r3, #156	; 0x9c
 800067c:	61bb      	str	r3, [r7, #24]
 800067e:	e7e8      	b.n	8000652 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x24>
	}

	return result;
 8000680:	7ffb      	ldrb	r3, [r7, #31]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_ZN16SmartFuseHandlerILm4EE9getStatesEv>:

	return result;
}

template <uint32_t num_of_sf>
std::array < SmartFuseState, num_of_sf >  SmartFuseHandler<num_of_sf>::getStates()
 800068a:	b5b0      	push	{r4, r5, r7, lr}
 800068c:	b086      	sub	sp, #24
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
{
	std::array < SmartFuseState, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2b03      	cmp	r3, #3
 800069a:	d815      	bhi.n	80006c8 <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0x3e>
	{
		x[i] = this->smart_fuses[i].getState();
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6979      	ldr	r1, [r7, #20]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 faf8 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80006a6:	4605      	mov	r5, r0
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	6979      	ldr	r1, [r7, #20]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fae2 	bl	8001c78 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 80006b4:	4604      	mov	r4, r0
 80006b6:	4628      	mov	r0, r5
 80006b8:	f000 fe9e 	bl	80013f8 <_ZNK9SmartFuse8getStateEv>
 80006bc:	4603      	mov	r3, r0
 80006be:	7023      	strb	r3, [r4, #0]
	for(size_t i = 0; i < num_of_sf; i++)
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	3301      	adds	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	e7e6      	b.n	8000696 <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0xc>
	}

	return x;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	2300      	movs	r3, #0
 80006ce:	7c3a      	ldrb	r2, [r7, #16]
 80006d0:	f362 0307 	bfi	r3, r2, #0, #8
 80006d4:	7c7a      	ldrb	r2, [r7, #17]
 80006d6:	f362 230f 	bfi	r3, r2, #8, #8
 80006da:	7cba      	ldrb	r2, [r7, #18]
 80006dc:	f362 4317 	bfi	r3, r2, #16, #8
 80006e0:	7cfa      	ldrb	r2, [r7, #19]
 80006e2:	f362 631f 	bfi	r3, r2, #24, #8
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bdb0      	pop	{r4, r5, r7, pc}

080006ee <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>:

template <uint32_t num_of_sf>
std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsStates()
 80006ee:	b5b0      	push	{r4, r5, r7, lr}
 80006f0:	b086      	sub	sp, #24
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	60b9      	str	r1, [r7, #8]
{
	std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d819      	bhi.n	8000736 <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0x48>
	{
		x[i] = this->smart_fuses[i].getChannelsStates();
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	6979      	ldr	r1, [r7, #20]
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fac5 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800070c:	4604      	mov	r4, r0
 800070e:	6979      	ldr	r1, [r7, #20]
 8000710:	68f8      	ldr	r0, [r7, #12]
 8000712:	f001 fad2 	bl	8001cba <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>
 8000716:	4605      	mov	r5, r0
 8000718:	463b      	mov	r3, r7
 800071a:	4621      	mov	r1, r4
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fe8b 	bl	8001438 <_ZN9SmartFuse17getChannelsStatesEv>
 8000722:	462a      	mov	r2, r5
 8000724:	463b      	mov	r3, r7
 8000726:	6819      	ldr	r1, [r3, #0]
 8000728:	6011      	str	r1, [r2, #0]
 800072a:	889b      	ldrh	r3, [r3, #4]
 800072c:	8093      	strh	r3, [r2, #4]
	for(size_t i = 0; i < num_of_sf; i++)
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	3301      	adds	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	e7e2      	b.n	80006fc <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0xe>
	}

	return x;
 8000736:	bf00      	nop
}
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bdb0      	pop	{r4, r5, r7, pc}

08000740 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>:

template <uint32_t num_of_sf>
std::array < std::array < uint16_t, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsCurrents()
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	6178      	str	r0, [r7, #20]
 8000748:	6139      	str	r1, [r7, #16]
{
	std::array < std::array < uint16_t, number_of_channels_per_fuse >, num_of_sf > x;
	for(size_t i = 0; i < num_of_sf; i++)
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d81b      	bhi.n	800078c <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0x4c>
	{
		x[i] = this->smart_fuses[i].getChannelsCurrents();
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	69f9      	ldr	r1, [r7, #28]
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fa9c 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800075e:	4604      	mov	r4, r0
 8000760:	69f9      	ldr	r1, [r7, #28]
 8000762:	6978      	ldr	r0, [r7, #20]
 8000764:	f001 fab8 	bl	8001cd8 <_ZNSt5arrayIS_ItLj6EELj4EEixEj>
 8000768:	4605      	mov	r5, r0
 800076a:	463b      	mov	r3, r7
 800076c:	4621      	mov	r1, r4
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fea7 	bl	80014c2 <_ZN9SmartFuse19getChannelsCurrentsEv>
 8000774:	462a      	mov	r2, r5
 8000776:	463b      	mov	r3, r7
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	6859      	ldr	r1, [r3, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	6010      	str	r0, [r2, #0]
 8000780:	6051      	str	r1, [r2, #4]
 8000782:	6093      	str	r3, [r2, #8]
	for(size_t i = 0; i < num_of_sf; i++)
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	3301      	adds	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	e7e0      	b.n	800074e <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0xe>
	}

	return x;
 800078c:	bf00      	nop
}
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bdb0      	pop	{r4, r5, r7, pc}

08000796 <_ZNK3etl7ibitset5countEv>:
    }

    //*************************************************************************
    /// Count the number of bits set.
    //*************************************************************************
    size_t count() const
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
    {
      size_t n = 0UL;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]

      for (size_t i = 0UL; i < SIZE; ++i)
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d210      	bcs.n	80007d2 <_ZNK3etl7ibitset5countEv+0x3c>
      {
        n += etl::count_bits(pdata[i]);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	68da      	ldr	r2, [r3, #12]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f969 	bl	8001a92 <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
      for (size_t i = 0UL; i < SIZE; ++i)
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	3301      	adds	r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	e7e9      	b.n	80007a6 <_ZNK3etl7ibitset5countEv+0x10>
      }

      return n;
 80007d2:	68fb      	ldr	r3, [r7, #12]
    }
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZN3etl7ibitset5resetEv>:
    }

    //*************************************************************************
    /// Resets the bitset.
    //*************************************************************************
    ibitset& reset()
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    {
      for (size_t i = 0UL; i < SIZE; ++i)
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d209      	bcs.n	8000806 <_ZN3etl7ibitset5resetEv+0x2a>
      {
        pdata[i] = ALL_CLEAR;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	4413      	add	r3, r2
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
      for (size_t i = 0UL; i < SIZE; ++i)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	3301      	adds	r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	e7f0      	b.n	80007e8 <_ZN3etl7ibitset5resetEv+0xc>
      }

      return *this;
 8000806:	687b      	ldr	r3, [r7, #4]
    }
 8000808:	4618      	mov	r0, r3
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_ZN3etl7ibitset10initialiseEy>:
  protected:

    //*************************************************************************
    /// Initialise from an unsigned long long.
    //*************************************************************************
    ibitset& initialise(unsigned long long value)
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	e9c7 2300 	strd	r2, r3, [r7]
    {
      reset();
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f7ff ffdb 	bl	80007dc <_ZN3etl7ibitset5resetEv>

      const size_t SHIFT = (integral_limits<unsigned long long>::bits <= (int)BITS_PER_ELEMENT) ? 0 : BITS_PER_ELEMENT;
 8000826:	2308      	movs	r3, #8
 8000828:	613b      	str	r3, [r7, #16]
      {
        pdata[0] = element_t(value);
      }
      else
      {
        size_t i = 0UL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]

        while ((value != 0) && (i < SIZE))
 800082e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000832:	4313      	orrs	r3, r2
 8000834:	d019      	beq.n	800086a <_ZN3etl7ibitset10initialiseEy+0x56>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	429a      	cmp	r2, r3
 800083e:	d214      	bcs.n	800086a <_ZN3etl7ibitset10initialiseEy+0x56>
        {
          pdata[i++] = value & ALL_SET;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	1c59      	adds	r1, r3, #1
 8000848:	6179      	str	r1, [r7, #20]
 800084a:	4413      	add	r3, r2
 800084c:	783a      	ldrb	r2, [r7, #0]
 800084e:	701a      	strb	r2, [r3, #0]
          value = value >> SHIFT;
 8000850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000854:	f04f 0200 	mov.w	r2, #0
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	0a02      	lsrs	r2, r0, #8
 800085e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000862:	0a0b      	lsrs	r3, r1, #8
 8000864:	e9c7 2300 	strd	r2, r3, [r7]
        while ((value != 0) && (i < SIZE))
 8000868:	e7e1      	b.n	800082e <_ZN3etl7ibitset10initialiseEy+0x1a>
        }
      }

      pdata[SIZE - 1] &= TOP_MASK;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	68da      	ldr	r2, [r3, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	3b01      	subs	r3, #1
 8000874:	4413      	add	r3, r2
 8000876:	7819      	ldrb	r1, [r3, #0]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	781a      	ldrb	r2, [r3, #0]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	68d8      	ldr	r0, [r3, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	3b01      	subs	r3, #1
 8000886:	4403      	add	r3, r0
 8000888:	400a      	ands	r2, r1
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	701a      	strb	r2, [r3, #0]

      return *this;
 800088e:	68fb      	ldr	r3, [r7, #12]
    }
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <_ZN3etl7ibitsetC1EjjPh>:
    }

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    ibitset(size_t nbits_, size_t size_, element_t* pdata_)
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
      : NBITS(nbits_),
        SIZE(size_),
        pdata(pdata_)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	60da      	str	r2, [r3, #12]
    {
      size_t allocated_bits = SIZE * BITS_PER_ELEMENT;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	617b      	str	r3, [r7, #20]
      size_t top_mask_shift = ((BITS_PER_ELEMENT - (allocated_bits - NBITS)) % BITS_PER_ELEMENT);
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	613b      	str	r3, [r7, #16]
      TOP_MASK = element_t(top_mask_shift == 0 ? ALL_SET : ~(ALL_SET << top_mask_shift));
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d007      	beq.n	80008e4 <_ZN3etl7ibitsetC1EjjPh+0x4c>
 80008d4:	22ff      	movs	r2, #255	; 0xff
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	43db      	mvns	r3, r3
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	e000      	b.n	80008e6 <_ZN3etl7ibitsetC1EjjPh+0x4e>
 80008e4:	22ff      	movs	r2, #255	; 0xff
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	701a      	strb	r2, [r3, #0]
    }
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4618      	mov	r0, r3
 80008ee:	371c      	adds	r7, #28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <_ZN3etl7ibitsetD1Ev>:
    virtual ~ibitset()
    {
    }
#else
  protected:
    ~ibitset()
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    {
    }
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_ZN3etl6bitsetILj8EED1Ev>:
  /// Does not use std::string.
  ///\tparam MAXN The number of bits.
  ///\ingroup bitset
  //*************************************************************************
  template <const size_t MAXN>
  class bitset : public etl::ibitset
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ffed 	bl	80008f8 <_ZN3etl7ibitsetD1Ev>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  Nm  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00a      	beq.n	800094c <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	429c      	cmp	r4, r3
 8000940:	d004      	beq.n	800094c <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 8000942:	3c14      	subs	r4, #20
 8000944:	4620      	mov	r0, r4
 8000946:	f7ff ffe2 	bl	800090e <_ZN3etl6bitsetILj8EED1Ev>
 800094a:	e7f7      	b.n	800093c <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x14>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}

08000956 <_ZL11checkParitySt5arrayIhLj3EE>:
{
 8000956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800095a:	b097      	sub	sp, #92	; 0x5c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	size_t buff = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	657b      	str	r3, [r7, #84]	; 0x54
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000964:	f107 0408 	add.w	r4, r7, #8
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f001 f8b7 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000972:	4603      	mov	r3, r0
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2200      	movs	r2, #0
 800097a:	461d      	mov	r5, r3
 800097c:	4616      	mov	r6, r2
 800097e:	462a      	mov	r2, r5
 8000980:	4633      	mov	r3, r6
 8000982:	4620      	mov	r0, r4
 8000984:	f001 f8bb 	bl	8001afe <_ZN3etl6bitsetILj8EEC1Ey>
 8000988:	3414      	adds	r4, #20
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2101      	movs	r1, #1
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f8a6 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000994:	4603      	mov	r3, r0
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2200      	movs	r2, #0
 800099c:	469a      	mov	sl, r3
 800099e:	4693      	mov	fp, r2
 80009a0:	4652      	mov	r2, sl
 80009a2:	465b      	mov	r3, fp
 80009a4:	4620      	mov	r0, r4
 80009a6:	f001 f8aa 	bl	8001afe <_ZN3etl6bitsetILj8EEC1Ey>
 80009aa:	3414      	adds	r4, #20
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2102      	movs	r1, #2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 f895 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 80009b6:	4603      	mov	r3, r0
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2200      	movs	r2, #0
 80009be:	4698      	mov	r8, r3
 80009c0:	4691      	mov	r9, r2
 80009c2:	4642      	mov	r2, r8
 80009c4:	464b      	mov	r3, r9
 80009c6:	4620      	mov	r0, r4
 80009c8:	f001 f899 	bl	8001afe <_ZN3etl6bitsetILj8EEC1Ey>
	for (auto &bit : bits) buff += bit.count();
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80009d4:	f001 f8ab 	bl	8001b2e <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>
 80009d8:	6538      	str	r0, [r7, #80]	; 0x50
 80009da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80009dc:	f001 f8b3 	bl	8001b46 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>
 80009e0:	64b8      	str	r0, [r7, #72]	; 0x48
 80009e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80009e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d00d      	beq.n	8000a06 <_ZL11checkParitySt5arrayIhLj3EE+0xb0>
 80009ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009ec:	647b      	str	r3, [r7, #68]	; 0x44
 80009ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fed0 	bl	8000796 <_ZNK3etl7ibitset5countEv>
 80009f6:	4602      	mov	r2, r0
 80009f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009fa:	4413      	add	r3, r2
 80009fc:	657b      	str	r3, [r7, #84]	; 0x54
 80009fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a00:	3314      	adds	r3, #20
 8000a02:	653b      	str	r3, [r7, #80]	; 0x50
 8000a04:	e7ed      	b.n	80009e2 <_ZL11checkParitySt5arrayIhLj3EE+0x8c>
	return (buff % 2 == 0);
 8000a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bf0c      	ite	eq
 8000a10:	2301      	moveq	r3, #1
 8000a12:	2300      	movne	r3, #0
 8000a14:	b2dc      	uxtb	r4, r3
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff84 	bl	8000928 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>
	return (buff % 2 == 0);
 8000a20:	4623      	mov	r3, r4
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	375c      	adds	r7, #92	; 0x5c
 8000a26:	46bd      	mov	sp, r7
 8000a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a2c <_ZL18calculateParityBitRSt5arrayIhLj3EE>:
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	data[2] &= ~(1 << 0);
 8000a34:	2102      	movs	r1, #2
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f001 f852 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	781a      	ldrb	r2, [r3, #0]
 8000a40:	f022 0201 	bic.w	r2, r2, #1
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	701a      	strb	r2, [r3, #0]
	if (checkParity(data)) data[2] |= (1 << 0);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	7859      	ldrb	r1, [r3, #1]
 8000a4e:	0209      	lsls	r1, r1, #8
 8000a50:	430a      	orrs	r2, r1
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	041b      	lsls	r3, r3, #16
 8000a56:	431a      	orrs	r2, r3
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f362 0317 	bfi	r3, r2, #0, #24
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff79 	bl	8000956 <_ZL11checkParitySt5arrayIhLj3EE>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d009      	beq.n	8000a7e <_ZL18calculateParityBitRSt5arrayIhLj3EE+0x52>
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f001 f837 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000a72:	4603      	mov	r3, r0
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	f042 0201 	orr.w	r2, r2, #1
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	701a      	strb	r2, [r3, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>:
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	6039      	str	r1, [r7, #0]
	this->last_gsb = x[0];
 8000a90:	463b      	mov	r3, r7
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 f823 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	709a      	strb	r2, [r3, #2]
	if(x[0] & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 f81a 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000aac:	4603      	mov	r3, r0
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	09db      	lsrs	r3, r3, #7
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x3a>
 8000abc:	2300      	movs	r3, #0
 8000abe:	e07e      	b.n	8000bbe <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000001) return SmartFuseState::FailSafe;
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 f80b 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000aca:	4603      	mov	r3, r0
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bf14      	ite	ne
 8000ad6:	2301      	movne	r3, #1
 8000ad8:	2300      	moveq	r3, #0
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x5e>
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	e06c      	b.n	8000bbe <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000010) return SmartFuseState::OLOFF;
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fff9 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000aee:	4603      	mov	r3, r0
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x82>
 8000b04:	2306      	movs	r3, #6
 8000b06:	e05a      	b.n	8000bbe <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000100) return SmartFuseState::LatchOff;
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 ffe7 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000b12:	4603      	mov	r3, r0
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bf14      	ite	ne
 8000b1e:	2301      	movne	r3, #1
 8000b20:	2300      	moveq	r3, #0
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xa6>
 8000b28:	2305      	movs	r3, #5
 8000b2a:	e048      	b.n	8000bbe <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00001000) return SmartFuseState::TempFail;
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 ffd5 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000b36:	4603      	mov	r3, r0
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf14      	ite	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	2300      	moveq	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xca>
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e036      	b.n	8000bbe <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00010000) return SmartFuseState::OTPLVDS;
 8000b50:	463b      	mov	r3, r7
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 ffc3 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	bf14      	ite	ne
 8000b66:	2301      	movne	r3, #1
 8000b68:	2300      	moveq	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xee>
 8000b70:	2303      	movs	r3, #3
 8000b72:	e024      	b.n	8000bbe <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00100000) return SmartFuseState::SPIError;
 8000b74:	463b      	mov	r3, r7
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 ffb1 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf14      	ite	ne
 8000b8a:	2301      	movne	r3, #1
 8000b8c:	2300      	moveq	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x112>
 8000b94:	2302      	movs	r3, #2
 8000b96:	e012      	b.n	8000bbe <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b01000000) return SmartFuseState::ResetState;
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 ff9f 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf14      	ite	ne
 8000bae:	2301      	movne	r3, #1
 8000bb0:	2300      	moveq	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x136>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	return SmartFuseState::NotResponding;
 8000bbc:	2308      	movs	r3, #8
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZN9SmartFuse11ChannelDataC1Ev>:
SmartFuse::ChannelData::ChannelData()
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 ffc4 	bl	8001b60 <_ZNSt4pairIttEC1IttLb1EEEv>
	active = false;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
	current = 0x0000;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	805a      	strh	r2, [r3, #2]
	state = ChannelState::Ok;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	721a      	strb	r2, [r3, #8]
}
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev>:
 8000bf4:	b5b0      	push	{r4, r5, r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2405      	movs	r4, #5
 8000c00:	461d      	mov	r5, r3
 8000c02:	2c00      	cmp	r4, #0
 8000c04:	db05      	blt.n	8000c12 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev+0x1e>
 8000c06:	4628      	mov	r0, r5
 8000c08:	f7ff ffdd 	bl	8000bc6 <_ZN9SmartFuse11ChannelDataC1Ev>
 8000c0c:	350a      	adds	r5, #10
 8000c0e:	3c01      	subs	r4, #1
 8000c10:	e7f7      	b.n	8000c02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev+0xe>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bdb0      	pop	{r4, r5, r7, pc}

08000c1c <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, const ChannelsSettings &fuses_settings) :
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	603b      	str	r3, [r7, #0]
					 port(port), pin(pin), hspi(hspi), channels_settings(channels_settings), toggle(false)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3308      	adds	r3, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ffda 	bl	8000bf4 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev>
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	645a      	str	r2, [r3, #68]	; 0x44
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	649a      	str	r2, [r3, #72]	; 0x48
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8000c58:	4694      	mov	ip, r2
 8000c5a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c5e:	4665      	mov	r5, ip
 8000c60:	4626      	mov	r6, r4
 8000c62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c64:	6028      	str	r0, [r5, #0]
 8000c66:	6069      	str	r1, [r5, #4]
 8000c68:	60aa      	str	r2, [r5, #8]
 8000c6a:	60eb      	str	r3, [r5, #12]
 8000c6c:	3410      	adds	r4, #16
 8000c6e:	f10c 0c10 	add.w	ip, ip, #16
 8000c72:	4574      	cmp	r4, lr
 8000c74:	d1f3      	bne.n	8000c5e <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings+0x42>
 8000c76:	4663      	mov	r3, ip
 8000c78:	4622      	mov	r2, r4
 8000c7a:	6810      	ldr	r0, [r2, #0]
 8000c7c:	6018      	str	r0, [r3, #0]
 8000c7e:	8892      	ldrh	r2, [r2, #4]
 8000c80:	809a      	strh	r2, [r3, #4]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3384      	adds	r3, #132	; 0x84
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fa30 	bl	80040ec <_ZN5TimerC1Ev>
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	338c      	adds	r3, #140	; 0x8c
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fa2b 	bl	80040ec <_ZN5TimerC1Ev>
	for (int i = 0; i < 6; i++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	dc23      	bgt.n	8000ce8 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings+0xcc>
		this->channels[i].clamping_currents = channels_settings.clamping_currents[i];
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 ff6a 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	1d18      	adds	r0, r3, #4
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3318      	adds	r3, #24
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	330a      	adds	r3, #10
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f000 ff6e 	bl	8001ba0 <_ZNSt4pairIttEaSERKS0_>
		this->channels[i].active = channels_settings.active[i];
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 ff58 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	4413      	add	r3, r2
 8000cda:	334c      	adds	r3, #76	; 0x4c
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	700b      	strb	r3, [r1, #0]
	for (int i = 0; i < 6; i++)
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e7d8      	b.n	8000c9a <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings+0x7e>
	this->action_timer.setTimeOut(100);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	338c      	adds	r3, #140	; 0x8c
 8000cec:	2164      	movs	r1, #100	; 0x64
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 fa1f 	bl	8004132 <_ZN5Timer10setTimeOutEm>
	this->watch_dog.setTimeOut(31);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3384      	adds	r3, #132	; 0x84
 8000cf8:	211f      	movs	r1, #31
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f003 fa19 	bl	8004132 <_ZN5Timer10setTimeOutEm>
	slaveDeselect();
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f000 f83c 	bl	8000d7e <_ZN9SmartFuse13slaveDeselectEv>
}
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	371c      	adds	r7, #28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d10 <_ZN9SmartFuse17setActionIntervalEm>:
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	this->action_timer.setTimeOut(interval);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	338c      	adds	r3, #140	; 0x8c
 8000d1e:	6839      	ldr	r1, [r7, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 fa06 	bl	8004132 <_ZN5Timer10setTimeOutEm>
	this->action_timer.restart();
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	338c      	adds	r3, #140	; 0x8c
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 fa0f 	bl	800414e <_ZN5Timer7restartEv>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_ZN9SmartFuse9setActionEPFvPS_E>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	this->action = action;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	this->action_defined = true;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	705a      	strb	r2, [r3, #1]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_ZN9SmartFuse11slaveSelectEv>:
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4619      	mov	r1, r3
 8000d72:	f005 fba5 	bl	80064c0 <HAL_GPIO_WritePin>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_ZN9SmartFuse13slaveDeselectEv>:
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	2201      	movs	r2, #1
 8000d92:	4619      	mov	r1, r3
 8000d94:	f005 fb94 	bl	80064c0 <HAL_GPIO_WritePin>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_ZN9SmartFuse4initEv>:
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	this->reset();
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 fbcf 	bl	800154c <_ZN9SmartFuse5resetEv>
	this->setUpAllDutyCycles();
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fc3a 	bl	8001628 <_ZN9SmartFuse18setUpAllDutyCyclesEv>
	this->setUpAllSamplingModes();
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 fc8d 	bl	80016d4 <_ZN9SmartFuse21setUpAllSamplingModesEv>
	this->setUpAllLatchOffTimers();
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 fcfe 	bl	80017bc <_ZN9SmartFuse22setUpAllLatchOffTimersEv>
	this->setUpAllChannelsStates();
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 fd83 	bl	80018cc <_ZN9SmartFuse22setUpAllChannelsStatesEv>
	return this->state;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_ZN9SmartFuse6enableEv>:
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	tx_data = { WRITE_RAM(0x14), 1 << 6, 0 };
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <_ZN9SmartFuse6enableEv+0x78>)
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	6812      	ldr	r2, [r2, #0]
 8000de4:	4611      	mov	r1, r2
 8000de6:	8019      	strh	r1, [r3, #0]
 8000de8:	3302      	adds	r3, #2
 8000dea:	0c12      	lsrs	r2, r2, #16
 8000dec:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	461a      	mov	r2, r3
 8000df4:	68f9      	ldr	r1, [r7, #12]
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 fdc4 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { WRITE_RAM(0x14), 1 << 3, 0 };
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_ZN9SmartFuse6enableEv+0x7c>)
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	4611      	mov	r1, r2
 8000e06:	8019      	strh	r1, [r3, #0]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	0c12      	lsrs	r2, r2, #16
 8000e0c:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	461a      	mov	r2, r3
 8000e14:	68f9      	ldr	r1, [r7, #12]
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 fdb4 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->watch_dog.restart();
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3384      	adds	r3, #132	; 0x84
 8000e20:	4618      	mov	r0, r3
 8000e22:	f003 f994 	bl	800414e <_ZN5Timer7restartEv>
	this->toggle = false;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
	this->state = getGSB(rx_data);
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fe29 	bl	8000a86 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	return this->state;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	080081c4 	.word	0x080081c4
 8000e50:	080081c8 	.word	0x080081c8

08000e54 <_ZN9SmartFuse6handleEv>:
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b08f      	sub	sp, #60	; 0x3c
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	bool lock_state = false;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	bool fuse_state_changed = false;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	std::array < bool, number_of_channels_per_fuse > read_fuses_states { false };
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	809a      	strh	r2, [r3, #4]
	std::array < uint8_t, 3 > tx_data { };
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	2100      	movs	r1, #0
 8000e78:	460a      	mov	r2, r1
 8000e7a:	801a      	strh	r2, [r3, #0]
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	709a      	strb	r2, [r3, #2]
	std::array < uint8_t, 3 > rx_data { };
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2100      	movs	r1, #0
 8000e86:	460a      	mov	r2, r1
 8000e88:	801a      	strh	r2, [r3, #0]
 8000e8a:	460a      	mov	r2, r1
 8000e8c:	709a      	strb	r2, [r3, #2]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++) this->channels[i].state = ChannelState::Ok;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
 8000e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d80c      	bhi.n	8000eb2 <_ZN9SmartFuse6handleEv+0x5e>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fe6f 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	721a      	strb	r2, [r3, #8]
 8000eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eac:	3301      	adds	r3, #1
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
 8000eb0:	e7ef      	b.n	8000e92 <_ZN9SmartFuse6handleEv+0x3e>
	if(watch_dog.getPassedTime() >= 31)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3384      	adds	r3, #132	; 0x84
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 f971 	bl	800419e <_ZN5Timer13getPassedTimeEv>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b1e      	cmp	r3, #30
 8000ec0:	bf8c      	ite	hi
 8000ec2:	2301      	movhi	r3, #1
 8000ec4:	2300      	movls	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d04d      	beq.n	8000f68 <_ZN9SmartFuse6handleEv+0x114>
		this->toggle = !this->toggle;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f083 0301 	eor.w	r3, r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	701a      	strb	r2, [r3, #0]
		tx_data[0] = READ_RAM(0x13);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fdfd 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2253      	movs	r2, #83	; 0x53
 8000eea:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	6939      	ldr	r1, [r7, #16]
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 fd45 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		rx_data[2] &= ~(1 << 1);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	2102      	movs	r1, #2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 fded 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000f06:	4603      	mov	r3, r0
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	f022 0202 	bic.w	r2, r2, #2
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
		tx_data = { WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1) };
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2101      	movs	r1, #1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fde1 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	781c      	ldrb	r4, [r3, #0]
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	2102      	movs	r1, #2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fdd9 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	781a      	ldrb	r2, [r3, #0]
 8000f32:	b251      	sxtb	r1, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	0052      	lsls	r2, r2, #1
 8000f3a:	b252      	sxtb	r2, r2
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	b252      	sxtb	r2, r2
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2213      	movs	r2, #19
 8000f48:	743a      	strb	r2, [r7, #16]
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	747a      	strb	r2, [r7, #17]
 8000f4e:	74bb      	strb	r3, [r7, #18]
		this->transmitReceiveData(tx_data, rx_data);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	461a      	mov	r2, r3
 8000f56:	6939      	ldr	r1, [r7, #16]
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fd13 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3384      	adds	r3, #132	; 0x84
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 f8f3 	bl	800414e <_ZN5Timer7restartEv>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6e:	2b05      	cmp	r3, #5
 8000f70:	d850      	bhi.n	8001014 <_ZN9SmartFuse6handleEv+0x1c0>
		tx_data[0] = READ_RAM(0x28 + i);
 8000f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	3328      	adds	r3, #40	; 0x28
 8000f78:	b2dc      	uxtb	r4, r3
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fdad 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f044 0240 	orr.w	r2, r4, #64	; 0x40
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	461a      	mov	r2, r3
 8000f96:	6939      	ldr	r1, [r7, #16]
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fcf3 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->channels[i].current = uint16_t(rx_data[1]) << 4 | uint16_t(rx_data[2]) >> 4;
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fd9b 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000faa:	4603      	mov	r3, r0
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	b21c      	sxth	r4, r3
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fd91 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4323      	orrs	r3, r4
 8000fca:	b21c      	sxth	r4, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3308      	adds	r3, #8
 8000fd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fdd5 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b2a2      	uxth	r2, r4
 8000fdc:	805a      	strh	r2, [r3, #2]
		read_fuses_states[i] = bool(rx_data[2] & (1 << 2));
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fd7b 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8000fea:	4603      	mov	r3, r0
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	f003 0404 	and.w	r4, r3, #4
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fde5 	bl	8001bc8 <_ZNSt5arrayIbLj6EEixEj>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2c00      	cmp	r4, #0
 8001002:	bf14      	ite	ne
 8001004:	2201      	movne	r2, #1
 8001006:	2200      	moveq	r2, #0
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 800100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100e:	3301      	adds	r3, #1
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001012:	e7ab      	b.n	8000f6c <_ZN9SmartFuse6handleEv+0x118>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	2b05      	cmp	r3, #5
 800101c:	d869      	bhi.n	80010f2 <_ZN9SmartFuse6handleEv+0x29e>
		if (this->channels[i].current < this->channels[i].clamping_currents.first)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3308      	adds	r3, #8
 8001022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fdac 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800102a:	4603      	mov	r3, r0
 800102c:	885c      	ldrh	r4, [r3, #2]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3308      	adds	r3, #8
 8001032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fda4 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800103a:	4603      	mov	r3, r0
 800103c:	889b      	ldrh	r3, [r3, #4]
 800103e:	429c      	cmp	r4, r3
 8001040:	bf34      	ite	cc
 8001042:	2301      	movcc	r3, #1
 8001044:	2300      	movcs	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d01b      	beq.n	8001084 <_ZN9SmartFuse6handleEv+0x230>
			this->channels[i].active = false;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3308      	adds	r3, #8
 8001050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fd95 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001058:	4603      	mov	r3, r0
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 800105e:	2301      	movs	r3, #1
 8001060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			fuse_state_changed = true;
 8001064:	2301      	movs	r3, #1
 8001066:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			this->state = SmartFuseState::OTPLVDS;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2203      	movs	r2, #3
 800106e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			this->channels[i].state = ChannelState::UnderCurrent;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3308      	adds	r3, #8
 8001076:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fd82 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800107e:	4603      	mov	r3, r0
 8001080:	2201      	movs	r2, #1
 8001082:	721a      	strb	r2, [r3, #8]
		if (this->channels[i].current > this->channels[i].clamping_currents.second)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3308      	adds	r3, #8
 8001088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fd79 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001090:	4603      	mov	r3, r0
 8001092:	885c      	ldrh	r4, [r3, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3308      	adds	r3, #8
 8001098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fd71 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80010a0:	4603      	mov	r3, r0
 80010a2:	88db      	ldrh	r3, [r3, #6]
 80010a4:	429c      	cmp	r4, r3
 80010a6:	bf8c      	ite	hi
 80010a8:	2301      	movhi	r3, #1
 80010aa:	2300      	movls	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d01b      	beq.n	80010ea <_ZN9SmartFuse6handleEv+0x296>
			this->channels[i].active = false;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3308      	adds	r3, #8
 80010b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fd62 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80010be:	4603      	mov	r3, r0
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			fuse_state_changed = true;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			this->state = SmartFuseState::OTPLVDS;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			this->channels[i].state = ChannelState::OverCurrent;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3308      	adds	r3, #8
 80010dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fd4f 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2202      	movs	r2, #2
 80010e8:	721a      	strb	r2, [r3, #8]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80010ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ec:	3301      	adds	r3, #1
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80010f0:	e792      	b.n	8001018 <_ZN9SmartFuse6handleEv+0x1c4>
	if(fuse_state_changed)
 80010f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d049      	beq.n	800118e <_ZN9SmartFuse6handleEv+0x33a>
		tx_data[0] = WRITE_RAM(0x13);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fced 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001106:	4603      	mov	r3, r0
 8001108:	2213      	movs	r2, #19
 800110a:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0x00;
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	2101      	movs	r1, #1
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fce4 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001118:	4603      	mov	r3, r0
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	2b05      	cmp	r3, #5
 8001126:	d81e      	bhi.n	8001166 <_ZN9SmartFuse6handleEv+0x312>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3308      	adds	r3, #8
 800112c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fd26 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001136:	4603      	mov	r3, r0
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	fa02 f403 	lsl.w	r4, r2, r3
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fcc9 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 800114e:	4603      	mov	r3, r0
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	b251      	sxtb	r1, r2
 8001154:	b262      	sxtb	r2, r4
 8001156:	430a      	orrs	r2, r1
 8001158:	b252      	sxtb	r2, r2
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	3301      	adds	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
 8001164:	e7dd      	b.n	8001122 <_ZN9SmartFuse6handleEv+0x2ce>
		tx_data[2] = this->toggle << 1;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461c      	mov	r4, r3
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fcb4 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001178:	4603      	mov	r3, r0
 800117a:	0062      	lsls	r2, r4, #1
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	461a      	mov	r2, r3
 8001186:	6939      	ldr	r1, [r7, #16]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 fbfb 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	2b05      	cmp	r3, #5
 8001196:	d82a      	bhi.n	80011ee <_ZN9SmartFuse6handleEv+0x39a>
		if(this->channels[i].active != read_fuses_states[i])
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3308      	adds	r3, #8
 800119c:	6a39      	ldr	r1, [r7, #32]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fcef 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80011a4:	4603      	mov	r3, r0
 80011a6:	781c      	ldrb	r4, [r3, #0]
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	6a39      	ldr	r1, [r7, #32]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fd0a 	bl	8001bc8 <_ZNSt5arrayIbLj6EEixEj>
 80011b4:	4603      	mov	r3, r0
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	429c      	cmp	r4, r3
 80011ba:	bf14      	ite	ne
 80011bc:	2301      	movne	r3, #1
 80011be:	2300      	moveq	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00f      	beq.n	80011e6 <_ZN9SmartFuse6handleEv+0x392>
			this->channels[i].state = ChannelState::STKFLTR;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3308      	adds	r3, #8
 80011ca:	6a39      	ldr	r1, [r7, #32]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fcd8 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2204      	movs	r2, #4
 80011d6:	721a      	strb	r2, [r3, #8]
			lock_state = true;
 80011d8:	2301      	movs	r3, #1
 80011da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			this->state = SmartFuseState::OLOFF;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2206      	movs	r2, #6
 80011e2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	3301      	adds	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
 80011ec:	e7d1      	b.n	8001192 <_ZN9SmartFuse6handleEv+0x33e>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	f200 8082 	bhi.w	80012fe <_ZN9SmartFuse6handleEv+0x4aa>
		tx_data[0] = READ_AND_CLEAR(0x20 + i);
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	3320      	adds	r3, #32
 8001200:	b2dc      	uxtb	r4, r3
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fc69 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 800120e:	4603      	mov	r3, r0
 8001210:	f064 027f 	orn	r2, r4, #127	; 0x7f
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	461a      	mov	r2, r3
 800121e:	6939      	ldr	r1, [r7, #16]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fbaf 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		if(rx_data[1] & (1 << 0)) this->channels[i].state = ChannelState::LatchOff;
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	2101      	movs	r1, #1
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fc57 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001232:	4603      	mov	r3, r0
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf14      	ite	ne
 800123e:	2301      	movne	r3, #1
 8001240:	2300      	moveq	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <_ZN9SmartFuse6handleEv+0x406>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3308      	adds	r3, #8
 800124c:	69f9      	ldr	r1, [r7, #28]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fc97 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001254:	4603      	mov	r3, r0
 8001256:	2203      	movs	r2, #3
 8001258:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 2)) this->channels[i].state = ChannelState::STKFLTR;
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2101      	movs	r1, #1
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fc3d 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001266:	4603      	mov	r3, r0
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf14      	ite	ne
 8001272:	2301      	movne	r3, #1
 8001274:	2300      	moveq	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d008      	beq.n	800128e <_ZN9SmartFuse6handleEv+0x43a>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3308      	adds	r3, #8
 8001280:	69f9      	ldr	r1, [r7, #28]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fc7d 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001288:	4603      	mov	r3, r0
 800128a:	2204      	movs	r2, #4
 800128c:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 3)) this->channels[i].state = ChannelState::VDSFS;
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2101      	movs	r1, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fc23 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 800129a:	4603      	mov	r3, r0
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf14      	ite	ne
 80012a6:	2301      	movne	r3, #1
 80012a8:	2300      	moveq	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <_ZN9SmartFuse6handleEv+0x46e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3308      	adds	r3, #8
 80012b4:	69f9      	ldr	r1, [r7, #28]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fc63 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80012bc:	4603      	mov	r3, r0
 80012be:	2205      	movs	r2, #5
 80012c0:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 4)) this->channels[i].state = ChannelState::CHFBSR;
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2101      	movs	r1, #1
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fc09 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 80012ce:	4603      	mov	r3, r0
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf14      	ite	ne
 80012da:	2301      	movne	r3, #1
 80012dc:	2300      	moveq	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <_ZN9SmartFuse6handleEv+0x4a2>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3308      	adds	r3, #8
 80012e8:	69f9      	ldr	r1, [r7, #28]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fc49 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2206      	movs	r2, #6
 80012f4:	721a      	strb	r2, [r3, #8]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	e779      	b.n	80011f2 <_ZN9SmartFuse6handleEv+0x39e>
	if(this->action_defined && this->action_timer.checkIfTimedOutAndReset())
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <_ZN9SmartFuse6handleEv+0x4c6>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	338c      	adds	r3, #140	; 0x8c
 800130a:	4618      	mov	r0, r3
 800130c:	f002 ff2c 	bl	8004168 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <_ZN9SmartFuse6handleEv+0x4c6>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <_ZN9SmartFuse6handleEv+0x4c8>
 800131a:	2300      	movs	r3, #0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <_ZN9SmartFuse6handleEv+0x4d6>
		this->action(this);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	4798      	blx	r3
	if (!lock_state) this->state = getGSB(rx_data);
 800132a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800132e:	f083 0301 	eor.w	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <_ZN9SmartFuse6handleEv+0x4f6>
 8001338:	68f9      	ldr	r1, [r7, #12]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fba3 	bl	8000a86 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	return this->state;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
}
 8001350:	4618      	mov	r0, r3
 8001352:	373c      	adds	r7, #60	; 0x3c
 8001354:	46bd      	mov	sp, r7
 8001356:	bd90      	pop	{r4, r7, pc}

08001358 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>:
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
 8001364:	4613      	mov	r3, r2
 8001366:	803b      	strh	r3, [r7, #0]
	std::array < uint8_t, 3 >  tx_data { 0, 0, 0 };
 8001368:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0x9c>)
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	4611      	mov	r1, r2
 8001372:	8019      	strh	r1, [r3, #0]
 8001374:	3302      	adds	r3, #2
 8001376:	0c12      	lsrs	r2, r2, #16
 8001378:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 >  rx_data { 0, 0, 0 };
 800137a:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0x9c>)
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	4611      	mov	r1, r2
 8001384:	8019      	strh	r1, [r3, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	0c12      	lsrs	r2, r2, #16
 800138a:	701a      	strb	r2, [r3, #0]
	if(duty_cykle > 1023) duty_cykle = 1023;
 800138c:	883b      	ldrh	r3, [r7, #0]
 800138e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001392:	d302      	bcc.n	800139a <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0x42>
 8001394:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001398:	803b      	strh	r3, [r7, #0]
	tx_data = { WRITE_RAM(0x00 + int(channel)), uint8_t(duty_cykle >> 8), uint8_t(duty_cykle << 4) | this->toggle << 1 };
 800139a:	883b      	ldrh	r3, [r7, #0]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b2d9      	uxtb	r1, r3
 80013a2:	883b      	ldrh	r3, [r7, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	b25a      	sxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	733b      	strb	r3, [r7, #12]
 80013be:	460b      	mov	r3, r1
 80013c0:	737b      	strb	r3, [r7, #13]
 80013c2:	4613      	mov	r3, r2
 80013c4:	73bb      	strb	r3, [r7, #14]
	this->transmitReceiveData(tx_data, rx_data);
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	461a      	mov	r2, r3
 80013cc:	68f9      	ldr	r1, [r7, #12]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fad8 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fb55 	bl	8000a86 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	return this->state;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	080081cc 	.word	0x080081cc

080013f8 <_ZNK9SmartFuse8getStateEv>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	return this->state;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_ZN9SmartFuse15getChannelStateE7Channel>:
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	70fb      	strb	r3, [r7, #3]
	return this->channels[size_t(channel)].state;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3308      	adds	r3, #8
 8001422:	78fa      	ldrb	r2, [r7, #3]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fbab 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800142c:	4603      	mov	r3, r0
 800142e:	7a1b      	ldrb	r3, [r3, #8]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_ZN9SmartFuse17getChannelsStatesEv>:
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	3308      	adds	r3, #8
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fb9a 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800144e:	4603      	mov	r3, r0
 8001450:	7a1a      	ldrb	r2, [r3, #8]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	701a      	strb	r2, [r3, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	3308      	adds	r3, #8
 800145a:	2101      	movs	r1, #1
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fb90 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001462:	4603      	mov	r3, r0
 8001464:	7a1a      	ldrb	r2, [r3, #8]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	705a      	strb	r2, [r3, #1]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3308      	adds	r3, #8
 800146e:	2102      	movs	r1, #2
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fb86 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001476:	4603      	mov	r3, r0
 8001478:	7a1a      	ldrb	r2, [r3, #8]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	709a      	strb	r2, [r3, #2]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3308      	adds	r3, #8
 8001482:	2103      	movs	r1, #3
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fb7c 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800148a:	4603      	mov	r3, r0
 800148c:	7a1a      	ldrb	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	70da      	strb	r2, [r3, #3]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	3308      	adds	r3, #8
 8001496:	2104      	movs	r1, #4
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fb72 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800149e:	4603      	mov	r3, r0
 80014a0:	7a1a      	ldrb	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	711a      	strb	r2, [r3, #4]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3308      	adds	r3, #8
 80014aa:	2105      	movs	r1, #5
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fb68 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80014b2:	4603      	mov	r3, r0
 80014b4:	7a1a      	ldrb	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	715a      	strb	r2, [r3, #5]
}
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_ZN9SmartFuse19getChannelsCurrentsEv>:
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	3308      	adds	r3, #8
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fb55 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80014d8:	4603      	mov	r3, r0
 80014da:	885a      	ldrh	r2, [r3, #2]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	801a      	strh	r2, [r3, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	3308      	adds	r3, #8
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fb4b 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80014ec:	4603      	mov	r3, r0
 80014ee:	885a      	ldrh	r2, [r3, #2]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	805a      	strh	r2, [r3, #2]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3308      	adds	r3, #8
 80014f8:	2102      	movs	r1, #2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fb41 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001500:	4603      	mov	r3, r0
 8001502:	885a      	ldrh	r2, [r3, #2]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	809a      	strh	r2, [r3, #4]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3308      	adds	r3, #8
 800150c:	2103      	movs	r1, #3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fb37 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001514:	4603      	mov	r3, r0
 8001516:	885a      	ldrh	r2, [r3, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	80da      	strh	r2, [r3, #6]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	3308      	adds	r3, #8
 8001520:	2104      	movs	r1, #4
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fb2d 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001528:	4603      	mov	r3, r0
 800152a:	885a      	ldrh	r2, [r3, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	811a      	strh	r2, [r3, #8]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3308      	adds	r3, #8
 8001534:	2105      	movs	r1, #5
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fb23 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800153c:	4603      	mov	r3, r0
 800153e:	885a      	ldrh	r2, [r3, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	815a      	strh	r2, [r3, #10]
}
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_ZN9SmartFuse5resetEv>:
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	tx_data = { RESET_SMARTFUSE(), 0, 0 };
 8001554:	23ff      	movs	r3, #255	; 0xff
 8001556:	743b      	strb	r3, [r7, #16]
 8001558:	2300      	movs	r3, #0
 800155a:	747b      	strb	r3, [r7, #17]
 800155c:	2300      	movs	r3, #0
 800155e:	74bb      	strb	r3, [r7, #18]
	this->transmitReceiveData(tx_data, rx_data);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	461a      	mov	r2, r3
 8001566:	6939      	ldr	r1, [r7, #16]
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fa0b 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { READ_ROM(0x01), 0, 0 };
 800156e:	23c1      	movs	r3, #193	; 0xc1
 8001570:	743b      	strb	r3, [r7, #16]
 8001572:	2300      	movs	r3, #0
 8001574:	747b      	strb	r3, [r7, #17]
 8001576:	2300      	movs	r3, #0
 8001578:	74bb      	strb	r3, [r7, #18]
	for (size_t i = 0; i < fuse_timeout; i++)
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d845      	bhi.n	8001610 <_ZN9SmartFuse5resetEv+0xc4>
		if(!IF_RESET_STATE(rx_data)) break;
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f000 faa8 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001590:	4603      	mov	r3, r0
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d113      	bne.n	80015c0 <_ZN9SmartFuse5resetEv+0x74>
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2101      	movs	r1, #1
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fa9e 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 80015a4:	4603      	mov	r3, r0
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d109      	bne.n	80015c0 <_ZN9SmartFuse5resetEv+0x74>
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2102      	movs	r1, #2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fa94 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 80015b8:	4603      	mov	r3, r0
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00d      	beq.n	80015dc <_ZN9SmartFuse5resetEv+0x90>
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fa8a 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 80015cc:	4603      	mov	r3, r0
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <_ZN9SmartFuse5resetEv+0x90>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <_ZN9SmartFuse5resetEv+0x92>
 80015dc:	2300      	movs	r3, #0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d115      	bne.n	800160e <_ZN9SmartFuse5resetEv+0xc2>
		else if(i == fuse_timeout - 1)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	d104      	bne.n	80015f2 <_ZN9SmartFuse5resetEv+0xa6>
			this->state = SmartFuseState::NotResponding;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2208      	movs	r2, #8
 80015ec:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 80015f0:	e017      	b.n	8001622 <_ZN9SmartFuse5resetEv+0xd6>
		this->transmitReceiveData(tx_data, rx_data);
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	461a      	mov	r2, r3
 80015f8:	6939      	ldr	r1, [r7, #16]
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f9c2 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		HAL_Delay(1);
 8001600:	2001      	movs	r0, #1
 8001602:	f002 fe79 	bl	80042f8 <HAL_Delay>
	for (size_t i = 0; i < fuse_timeout; i++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e7b7      	b.n	800157e <_ZN9SmartFuse5resetEv+0x32>
		if(!IF_RESET_STATE(rx_data)) break;
 800160e:	bf00      	nop
	this->state = getGSB(rx_data);
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fa37 	bl	8000a86 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_ZN9SmartFuse18setUpAllDutyCyclesEv>:
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < 6; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b05      	cmp	r3, #5
 8001638:	d83e      	bhi.n	80016b8 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0x90>
		tx_data[0] = WRITE_RAM(0x00 + i);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fa4d 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001646:	4603      	mov	r3, r0
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
		tx_data[1] = uint8_t(this->channels_settings.duty_cycle[i] >> 4);
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	332c      	adds	r3, #44	; 0x2c
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	88db      	ldrh	r3, [r3, #6]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	b29c      	uxth	r4, r3
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	2101      	movs	r1, #1
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fa3b 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 800166a:	4603      	mov	r3, r0
 800166c:	b2e2      	uxtb	r2, r4
 800166e:	701a      	strb	r2, [r3, #0]
		tx_data[2] = uint8_t(this->channels_settings.duty_cycle[i] << 4) | this->toggle << 1;
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	332c      	adds	r3, #44	; 0x2c
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	88db      	ldrh	r3, [r3, #6]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	b2db      	uxtb	r3, r3
 8001682:	b25a      	sxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	b25b      	sxtb	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b25c      	sxtb	r4, r3
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	2102      	movs	r1, #2
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fa22 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 800169c:	4603      	mov	r3, r0
 800169e:	b2e2      	uxtb	r2, r4
 80016a0:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	461a      	mov	r2, r3
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f96a 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < 6; i++)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e7bd      	b.n	8001634 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0xc>
	this->state = getGSB(rx_data);
 80016b8:	68f9      	ldr	r1, [r7, #12]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff f9e3 	bl	8000a86 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
	...

080016d4 <_ZN9SmartFuse21setUpAllSamplingModesEv>:
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data = { 0, 0, 0 };
 80016dc:	4a36      	ldr	r2, [pc, #216]	; (80017b8 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xe4>)
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	4611      	mov	r1, r2
 80016e6:	8019      	strh	r1, [r3, #0]
 80016e8:	3302      	adds	r3, #2
 80016ea:	0c12      	lsrs	r2, r2, #16
 80016ec:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d852      	bhi.n	800179e <_ZN9SmartFuse21setUpAllSamplingModesEv+0xca>
		tx_data[0] = WRITE_RAM(0x08 + i);
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	b2dc      	uxtb	r4, r3
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f9ec 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001708:	4603      	mov	r3, r0
 800170a:	f104 0208 	add.w	r2, r4, #8
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
		switch (this->channels_settings.sampling_mode[i])
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	4413      	add	r3, r2
 8001718:	3358      	adds	r3, #88	; 0x58
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d833      	bhi.n	8001788 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
 8001720:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <_ZN9SmartFuse21setUpAllSamplingModesEv+0x54>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	08001739 	.word	0x08001739
 800172c:	0800174d 	.word	0x0800174d
 8001730:	08001761 	.word	0x08001761
 8001734:	08001775 	.word	0x08001775
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	2102      	movs	r1, #2
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f9ce 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001744:	4603      	mov	r3, r0
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	e01d      	b.n	8001788 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2102      	movs	r1, #2
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f9c4 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001758:	4603      	mov	r3, r0
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	e013      	b.n	8001788 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	2102      	movs	r1, #2
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f9ba 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 800176c:	4603      	mov	r3, r0
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e009      	b.n	8001788 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	2102      	movs	r1, #2
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f9b0 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001780:	4603      	mov	r3, r0
 8001782:	22c0      	movs	r2, #192	; 0xc0
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	bf00      	nop
		this->transmitReceiveData(tx_data, rx_data);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	461a      	mov	r2, r3
 800178e:	6939      	ldr	r1, [r7, #16]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f8f7 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e7a9      	b.n	80016f2 <_ZN9SmartFuse21setUpAllSamplingModesEv+0x1e>
	this->state = getGSB(rx_data);
 800179e:	68f9      	ldr	r1, [r7, #12]
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff f970 	bl	8000a86 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 80017b0:	bf00      	nop
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	080081cc 	.word	0x080081cc

080017bc <_ZN9SmartFuse22setUpAllLatchOffTimersEv>:
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 80017c4:	4a40      	ldr	r2, [pc, #256]	; (80018c8 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x10c>)
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	4611      	mov	r1, r2
 80017ce:	8019      	strh	r1, [r3, #0]
 80017d0:	3302      	adds	r3, #2
 80017d2:	0c12      	lsrs	r2, r2, #16
 80017d4:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 > rx_data { 0, 0, 0 };
 80017d6:	4a3c      	ldr	r2, [pc, #240]	; (80018c8 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x10c>)
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	4611      	mov	r1, r2
 80017e0:	8019      	strh	r1, [r3, #0]
 80017e2:	3302      	adds	r3, #2
 80017e4:	0c12      	lsrs	r2, r2, #16
 80017e6:	701a      	strb	r2, [r3, #0]
	tx_data[1] = this->channels_settings.latch_off_time_out[2] << 4 |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	b25a      	sxtb	r2, r3
		   this->channels_settings.latch_off_time_out[1];
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80017f8:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels_settings.latch_off_time_out[2] << 4 |
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b25c      	sxtb	r4, r3
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	2101      	movs	r1, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f96b 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 800180a:	4603      	mov	r3, r0
 800180c:	b2e2      	uxtb	r2, r4
 800180e:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels_settings.latch_off_time_out[1] << 4;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 4053 	ldrb.w	r4, [r3, #83]	; 0x53
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	2102      	movs	r1, #2
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f95f 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001822:	4603      	mov	r3, r0
 8001824:	0122      	lsls	r2, r4, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x10);
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f955 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001836:	4603      	mov	r3, r0
 8001838:	2210      	movs	r2, #16
 800183a:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	461a      	mov	r2, r3
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f89d 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data[1] = this->channels_settings.latch_off_time_out[5] << 4 |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	b25a      	sxtb	r2, r3
	       this->channels_settings.latch_off_time_out[4];
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800185a:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels_settings.latch_off_time_out[5] << 4 |
 800185c:	4313      	orrs	r3, r2
 800185e:	b25c      	sxtb	r4, r3
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2101      	movs	r1, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f93a 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 800186c:	4603      	mov	r3, r0
 800186e:	b2e2      	uxtb	r2, r4
 8001870:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels_settings.latch_off_time_out[3] << 4;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 4055 	ldrb.w	r4, [r3, #85]	; 0x55
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f92e 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001884:	4603      	mov	r3, r0
 8001886:	0122      	lsls	r2, r4, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x11);
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f924 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001898:	4603      	mov	r3, r0
 800189a:	2211      	movs	r2, #17
 800189c:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	461a      	mov	r2, r3
 80018a4:	68f9      	ldr	r1, [r7, #12]
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f86c 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff f8e9 	bl	8000a86 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}
 80018c6:	bf00      	nop
 80018c8:	080081cc 	.word	0x080081cc

080018cc <_ZN9SmartFuse22setUpAllChannelsStatesEv>:
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	tx_data[0] = WRITE_RAM(0x13);
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f900 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2213      	movs	r2, #19
 80018e4:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	2101      	movs	r1, #1
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f8f7 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d81e      	bhi.n	8001940 <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x74>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3308      	adds	r3, #8
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f939 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001910:	4603      	mov	r3, r0
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa02 f403 	lsl.w	r4, r2, r3
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f8dc 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001928:	4603      	mov	r3, r0
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	b251      	sxtb	r1, r2
 800192e:	b262      	sxtb	r2, r4
 8001930:	430a      	orrs	r2, r1
 8001932:	b252      	sxtb	r2, r2
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e7dd      	b.n	80018fc <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x30>
	tx_data[2] = this->toggle << 1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461c      	mov	r4, r3
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	2102      	movs	r1, #2
 800194c:	4618      	mov	r0, r3
 800194e:	f000 f8c7 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001952:	4603      	mov	r3, r0
 8001954:	0062      	lsls	r2, r4, #1
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	461a      	mov	r2, r3
 8001960:	6939      	ldr	r1, [r7, #16]
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f80e 	bl	8001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff f88b 	bl	8000a86 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
	...

08001984 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>:
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8001990:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199a:	2b40      	cmp	r3, #64	; 0x40
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x34>
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b6:	601a      	str	r2, [r3, #0]
	calculateParityBit(tx_data);
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff f835 	bl	8000a2c <_ZL18calculateParityBitRSt5arrayIhLj3EE>
	this->slaveSelect();
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff f9ca 	bl	8000d5c <_ZN9SmartFuse11slaveSelectEv>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]
 80019cc:	2300      	movs	r3, #0
 80019ce:	75bb      	strb	r3, [r7, #22]
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d902      	bls.n	80019dc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x58>
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d83e      	bhi.n	8001a5a <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xd6>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d104      	bne.n	80019f4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 80019ea:	7dbb      	ldrb	r3, [r7, #22]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d801      	bhi.n	80019f4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x72>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00f      	beq.n	8001a1a <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x96>
			(*(uint8_t*) &rx_data[rx]) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f103 040c 	add.w	r4, r3, #12
 8001a02:	7dbb      	ldrb	r3, [r7, #22]
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f86a 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	7822      	ldrb	r2, [r4, #0]
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]
			rx++;
 8001a14:	7dbb      	ldrb	r3, [r7, #22]
 8001a16:	3301      	adds	r3, #1
 8001a18:	75bb      	strb	r3, [r7, #22]
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d104      	bne.n	8001a32 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d801      	bhi.n	8001a32 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xb0>
 8001a32:	2300      	movs	r3, #0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0cb      	beq.n	80019d0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = tx_data[tx];
 8001a38:	7dfa      	ldrb	r2, [r7, #23]
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f84d 	bl	8001ae0 <_ZNSt5arrayIhLj3EEixEj>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	330c      	adds	r3, #12
 8001a4e:	7812      	ldrb	r2, [r2, #0]
 8001a50:	701a      	strb	r2, [r3, #0]
			tx++;
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	3301      	adds	r3, #1
 8001a56:	75fb      	strb	r3, [r7, #23]
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001a58:	e7ba      	b.n	80019d0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
	this->slaveDeselect();
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff f98f 	bl	8000d7e <_ZN9SmartFuse13slaveDeselectEv>
}
 8001a60:	bf00      	nop
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	20000708 	.word	0x20000708

08001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>:
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
	return this->channels[size_t(channel)].current;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f87e 	bl	8001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001a86:	4603      	mov	r3, r0
 8001a88:	885b      	ldrh	r3, [r3, #2]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>:
  ///\ingroup binary
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR14
    typename etl::enable_if<etl::is_integral<T>::value && etl::is_unsigned<T>::value && (etl::integral_limits<T>::bits == 8U), uint_least8_t>::type
    count_bits(T value)
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  {
#if ETL_CPP23_SUPPORTED && ETL_USING_STL
    return std::popcount(value);
#else
    uint32_t count = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]

    count = value - ((value >> 1U) & 0x55U);
 8001aa0:	79fa      	ldrb	r2, [r7, #7]
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	60fb      	str	r3, [r7, #12]
    count = ((count >> 2U) & 0x33U) + (count & 0x33U);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
    count = ((count >> 4U) + count) & 0x0FU;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	091a      	lsrs	r2, r3, #4
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	60fb      	str	r3, [r7, #12]

    return uint_least8_t(count);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	b2db      	uxtb	r3, r3
#endif
  }
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_ZNSt5arrayIhLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f901 	bl	8001cf6 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_ZN3etl6bitsetILj8EEC1Ey>:
    }

    //*************************************************************************
    /// Construct from a value.
    //*************************************************************************
    bitset(unsigned long long value)
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	e9c7 2300 	strd	r2, r3, [r7]
      : etl::ibitset(MAXN, ARRAY_SIZE, data)
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3310      	adds	r3, #16
 8001b10:	2201      	movs	r2, #1
 8001b12:	2108      	movs	r1, #8
 8001b14:	f7fe fec0 	bl	8000898 <_ZN3etl7ibitsetC1EjjPh>
    {
      initialise(value);
 8001b18:	68f9      	ldr	r1, [r7, #12]
 8001b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b1e:	4608      	mov	r0, r1
 8001b20:	f7fe fe78 	bl	8000814 <_ZN3etl7ibitset10initialiseEy>
    }
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>:
      begin() noexcept
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f8eb 	bl	8001d12 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>:
      end() noexcept
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8df 	bl	8001d12 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001b54:	4603      	mov	r3, r0
 8001b56:	333c      	adds	r3, #60	; 0x3c
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_ZNSt4pairIttEC1IttLb1EEEv>:
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>
#endif
      _GLIBCXX_CONSTEXPR pair()
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	805a      	strh	r2, [r3, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>:
      operator[](size_type __n) noexcept
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f8cb 	bl	8001d2c <_ZNSt14__array_traitsIN9SmartFuse11ChannelDataELj6EE6_S_refERA6_KS1_j>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_ZNSt4pairIttEaSERKS0_>:
      template<typename... _Args1, typename... _Args2>
	_GLIBCXX20_CONSTEXPR
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      _GLIBCXX20_CONSTEXPR pair&
      operator=(typename conditional<
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
		__and_<is_copy_assignable<_T1>,
		       is_copy_assignable<_T2>>::value,
		const pair&, const __nonesuch&>::type __p)
      {
	first = __p.first;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	881a      	ldrh	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	801a      	strh	r2, [r3, #0]
	second = __p.second;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	885a      	ldrh	r2, [r3, #2]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	805a      	strh	r2, [r3, #2]
	return *this;
 8001bba:	687b      	ldr	r3, [r7, #4]
      }
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_ZNSt5arrayIbLj6EEixEj>:
      operator[](size_type __n) noexcept
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6839      	ldr	r1, [r7, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f8ba 	bl	8001d50 <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRK16ChannelsSettingsEEEvDpOT_>:
    /// Constructs a value at the end of the vector.
    /// If asserts or exceptions are enabled, emits vector_full if the vector is already full.
    ///\param value The value to add.
    //*********************************************************************
    template <typename ... Args>
    void emplace_back(Args && ... args)
 8001be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be8:	b089      	sub	sp, #36	; 0x24
 8001bea:	af02      	add	r7, sp, #8
 8001bec:	6178      	str	r0, [r7, #20]
 8001bee:	6139      	str	r1, [r7, #16]
 8001bf0:	60fa      	str	r2, [r7, #12]
 8001bf2:	60bb      	str	r3, [r7, #8]
    {
#if defined(ETL_CHECK_PUSH_POP)
      ETL_ASSERT(size() != CAPACITY, ETL_ERROR(vector_full));
#endif
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001bf4:	6938      	ldr	r0, [r7, #16]
 8001bf6:	f000 f8b9 	bl	8001d6c <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	681c      	ldr	r4, [r3, #0]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f8bf 	bl	8001d82 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001c04:	4603      	mov	r3, r0
 8001c06:	681d      	ldr	r5, [r3, #0]
 8001c08:	68b8      	ldr	r0, [r7, #8]
 8001c0a:	f000 f8c5 	bl	8001d98 <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	681e      	ldr	r6, [r3, #0]
 8001c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c14:	f000 f8cb 	bl	8001dae <_ZN3etl7forwardIRK16ChannelsSettingsEEOT_RNS_16remove_referenceIS4_E4typeE>
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	209c      	movs	r0, #156	; 0x9c
 8001c22:	f7fe fc8d 	bl	8000540 <_ZnwjPv>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	4633      	mov	r3, r6
 8001c2c:	462a      	mov	r2, r5
 8001c2e:	4621      	mov	r1, r4
 8001c30:	f7fe fff4 	bl	8000c1c <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
      ++p_end;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	609a      	str	r2, [r3, #8]
      ETL_INCREMENT_DEBUG_COUNT
    }
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c48 <_ZN3etl7ivectorI9SmartFuseE5beginEv>:
    iterator begin()
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
      return p_buffer;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
    }
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_ZN3etl7ivectorI9SmartFuseE3endEv>:
    iterator end()
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
      return p_end;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
    }
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>:
      operator[](size_type __n) noexcept
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f89c 	bl	8001dc4 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>:
    reference operator [](size_t i)
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
      return p_buffer[i];
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	219c      	movs	r1, #156	; 0x9c
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
    }
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6839      	ldr	r1, [r7, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f889 	bl	8001de0 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNSt5arrayIS_ItLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6839      	ldr	r1, [r7, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f88c 	bl	8001e04 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_refERA4_KS1_j>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 f883 	bl	8001e28 <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_ZNSt14__array_traitsIN9SmartFuse11ChannelDataELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8001d74:	687b      	ldr	r3, [r7, #4]
  }
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8001d8a:	687b      	ldr	r3, [r7, #4]
  }
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8001da0:	687b      	ldr	r3, [r7, #4]
  }
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_ZN3etl7forwardIRK16ChannelsSettingsEEOT_RNS_16remove_referenceIS4_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8001db6:	687b      	ldr	r3, [r7, #4]
  }
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <_ZN11GpioElementD1Ev>:
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		//virtual void handle();
		virtual ~GpioElement() { };
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <_ZN11GpioElementD1Ev+0x1c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	080081f8 	.word	0x080081f8

08001e60 <_ZN11GpioElementD0Ev>:
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ffe9 	bl	8001e40 <_ZN11GpioElementD1Ev>
 8001e6e:	2110      	movs	r1, #16
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f006 f8fa 	bl	800806a <_ZdlPvj>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
 *      Author: Piotr Lesicki
 */

#include "gpio elements.hpp"

GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	70fb      	strb	r3, [r7, #3]
						 port(port), pin(pin), is_inverted(is_inverted) { }
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x34>)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	715a      	strb	r2, [r3, #5]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	080081f8 	.word	0x080081f8

08001eb8 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin) :
							   GpioElement(port, pin, false) { }

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	70fb      	strb	r3, [r7, #3]
							   GpioElement(port, pin, is_inverted) { }
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	f7ff ffd7 	bl	8001e80 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x2c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	080081e8 	.word	0x080081e8

08001ee8 <_ZN14GpioOutElement8activateEv>:

void GpioOutElement::activate()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68d8      	ldr	r0, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	795b      	ldrb	r3, [r3, #5]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <_ZN14GpioOutElement8activateEv+0x1e>
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <_ZN14GpioOutElement8activateEv+0x20>
 8001f06:	2301      	movs	r3, #1
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f004 fad9 	bl	80064c0 <HAL_GPIO_WritePin>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_ZN14GpioOutElement10deactivateEv>:

void GpioOutElement::deactivate()
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68d8      	ldr	r0, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	b299      	uxth	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	795b      	ldrb	r3, [r3, #5]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <_ZN14GpioOutElement10deactivateEv+0x1e>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <_ZN14GpioOutElement10deactivateEv+0x20>
 8001f34:	2300      	movs	r3, #0
 8001f36:	461a      	mov	r2, r3
 8001f38:	f004 fac2 	bl	80064c0 <HAL_GPIO_WritePin>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>:
}

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin) :
							 GpioElement(port, pin, false) { }

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	70fb      	strb	r3, [r7, #3]
							 GpioElement(port, pin, is_inverted) { }
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	f7ff ff91 	bl	8001e80 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb+0x2c>)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	080081d8 	.word	0x080081d8

08001f74 <_ZN13GpioInElement8isActiveEv>:

bool GpioInElement::isActive()
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	 *		  1  |    1   |  0
	 *
	 *	  basically a XOR operation
	 *
	 */
	return ((HAL_GPIO_ReadPin((GPIO_TypeDef*)(this->port), this->pin) == GPIO_PIN_SET) != this->is_inverted);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	4610      	mov	r0, r2
 8001f8a:	f004 fa81 	bl	8006490 <HAL_GPIO_ReadPin>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	795b      	ldrb	r3, [r3, #5]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <_ZN13GpioInElementD1Ev>:

		//void handle() override;
		void toggle();
};

class GpioInElement : public GpioElement
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <_ZN13GpioInElementD1Ev+0x20>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff3b 	bl	8001e40 <_ZN11GpioElementD1Ev>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	080081d8 	.word	0x080081d8

08001fd8 <_ZN13GpioInElementD0Ev>:
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffe7 	bl	8001fb4 <_ZN13GpioInElementD1Ev>
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f006 f83e 	bl	800806a <_ZdlPvj>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_ZN14GpioOutElementD1Ev>:
class GpioOutElement : public GpioElement
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	4a05      	ldr	r2, [pc, #20]	; (8002018 <_ZN14GpioOutElementD1Ev+0x20>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff19 	bl	8001e40 <_ZN11GpioElementD1Ev>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	080081e8 	.word	0x080081e8

0800201c <_ZN14GpioOutElementD0Ev>:
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffe7 	bl	8001ff8 <_ZN14GpioOutElementD1Ev>
 800202a:	2110      	movs	r1, #16
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f006 f81c 	bl	800806a <_ZdlPvj>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b5e      	ldr	r3, [pc, #376]	; (80021cc <MX_GPIO_Init+0x190>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a5d      	ldr	r2, [pc, #372]	; (80021cc <MX_GPIO_Init+0x190>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205e:	4b5b      	ldr	r3, [pc, #364]	; (80021cc <MX_GPIO_Init+0x190>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800206a:	4b58      	ldr	r3, [pc, #352]	; (80021cc <MX_GPIO_Init+0x190>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	4a57      	ldr	r2, [pc, #348]	; (80021cc <MX_GPIO_Init+0x190>)
 8002070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002076:	4b55      	ldr	r3, [pc, #340]	; (80021cc <MX_GPIO_Init+0x190>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	4b52      	ldr	r3, [pc, #328]	; (80021cc <MX_GPIO_Init+0x190>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	4a51      	ldr	r2, [pc, #324]	; (80021cc <MX_GPIO_Init+0x190>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208e:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <MX_GPIO_Init+0x190>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	4b4c      	ldr	r3, [pc, #304]	; (80021cc <MX_GPIO_Init+0x190>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	4a4b      	ldr	r2, [pc, #300]	; (80021cc <MX_GPIO_Init+0x190>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <MX_GPIO_Init+0x190>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <MX_GPIO_Init+0x190>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	4a45      	ldr	r2, [pc, #276]	; (80021cc <MX_GPIO_Init+0x190>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020be:	4b43      	ldr	r3, [pc, #268]	; (80021cc <MX_GPIO_Init+0x190>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	210f      	movs	r1, #15
 80020ce:	4840      	ldr	r0, [pc, #256]	; (80021d0 <MX_GPIO_Init+0x194>)
 80020d0:	f004 f9f6 	bl	80064c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	211e      	movs	r1, #30
 80020d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020dc:	f004 f9f0 	bl	80064c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	f44f 7109 	mov.w	r1, #548	; 0x224
 80020e6:	483b      	ldr	r0, [pc, #236]	; (80021d4 <MX_GPIO_Init+0x198>)
 80020e8:	f004 f9ea 	bl	80064c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 80020ec:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80020f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f2:	2303      	movs	r3, #3
 80020f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	4833      	ldr	r0, [pc, #204]	; (80021d0 <MX_GPIO_Init+0x194>)
 8002102:	f004 f833 	bl	800616c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002106:	230f      	movs	r3, #15
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210a:	2301      	movs	r3, #1
 800210c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	482c      	ldr	r0, [pc, #176]	; (80021d0 <MX_GPIO_Init+0x194>)
 800211e:	f004 f825 	bl	800616c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002122:	231e      	movs	r3, #30
 8002124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2301      	movs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213c:	f004 f816 	bl	800616c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9;
 8002140:	f44f 7309 	mov.w	r3, #548	; 0x224
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	481e      	ldr	r0, [pc, #120]	; (80021d4 <MX_GPIO_Init+0x198>)
 800215a:	f004 f807 	bl	800616c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB4 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800215e:	f64f 53d0 	movw	r3, #64976	; 0xfdd0
 8002162:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002164:	2303      	movs	r3, #3
 8002166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4818      	ldr	r0, [pc, #96]	; (80021d4 <MX_GPIO_Init+0x198>)
 8002174:	f003 fffa 	bl	800616c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8002178:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800217e:	2303      	movs	r3, #3
 8002180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002190:	f003 ffec 	bl	800616c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002194:	2304      	movs	r3, #4
 8002196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002198:	2303      	movs	r3, #3
 800219a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	480c      	ldr	r0, [pc, #48]	; (80021d8 <MX_GPIO_Init+0x19c>)
 80021a8:	f003 ffe0 	bl	800616c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021ac:	2308      	movs	r3, #8
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b0:	2303      	movs	r3, #3
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	4807      	ldr	r0, [pc, #28]	; (80021dc <MX_GPIO_Init+0x1a0>)
 80021c0:	f003 ffd4 	bl	800616c <HAL_GPIO_Init>

}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	48000800 	.word	0x48000800
 80021d4:	48000400 	.word	0x48000400
 80021d8:	48000c00 	.word	0x48000c00
 80021dc:	48001c00 	.word	0x48001c00

080021e0 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	601a      	str	r2, [r3, #0]
    {
    }
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
    {
    }
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	461a      	mov	r2, r3
 8002224:	2300      	movs	r3, #0
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	6053      	str	r3, [r2, #4]
 800222a:	6093      	str	r3, [r2, #8]
 800222c:	60d3      	str	r3, [r2, #12]
 800222e:	6113      	str	r3, [r2, #16]
 8002230:	6153      	str	r3, [r2, #20]
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	331c      	adds	r3, #28
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	331c      	adds	r3, #28
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	68b8      	ldr	r0, [r7, #8]
 8002248:	f003 fb16 	bl	8005878 <HAL_CAN_GetRxMessage>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
    this->status =
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	791a      	ldrb	r2, [r3, #4]
 800226c:	795b      	ldrb	r3, [r3, #5]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	4313      	orrs	r3, r2
 8002276:	b29b      	uxth	r3, r3
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	6938      	ldr	r0, [r7, #16]
 8002298:	f001 f87c 	bl	8003394 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>
 800229c:	6178      	str	r0, [r7, #20]
 800229e:	6938      	ldr	r0, [r7, #16]
 80022a0:	f001 f884 	bl	80033ac <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d01f      	beq.n	80022ee <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ffd2 	bl	8002260 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80022bc:	4602      	mov	r2, r0
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	4610      	mov	r0, r2
 80022e0:	4798      	blx	r3
        return true;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e004      	b.n	80022f0 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3304      	adds	r3, #4
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e7db      	b.n	80022a6 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 80022ee:	2300      	movs	r3, #0
  }
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_ZN8PUTM_CAN13Can_interface15get_bms_hv_mainEv>:
  Apps_main get_apps_main() { return apps.data; }
  AQ_main get_aq_main() { return aq_main.data; }
  AQ_acceleration get_aq_acceleration() { return aq_acceleration.data; }
  AQ_gyroscope get_aq_gyroscope() { return aq_gyroscope.data; }
  AQ_ts_button get_aq_ts_button() { return aq_ts_button.data; }
  BMS_HV_main get_bms_hv_main() { return bms_hv_main.data; }
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	3344      	adds	r3, #68	; 0x44
 8002308:	cb03      	ldmia	r3!, {r0, r1}
 800230a:	6010      	str	r0, [r2, #0]
 800230c:	6051      	str	r1, [r2, #4]
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff71 	bl	8002214 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 8002332:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	4619      	mov	r1, r3
 8002340:	4803      	ldr	r0, [pc, #12]	; (8002350 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002342:	f7ff ff9f 	bl	8002284 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 8002346:	bf00      	nop
 8002348:	3730      	adds	r7, #48	; 0x30
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000000 	.word	0x20000000

08002354 <_ZN16SmartFuseHandlerILm4EEC1Ev>:

		SmartFuseState getGSB(std::array < uint8_t, 3 > x);
};

template <uint32_t num_of_sf>
class SmartFuseHandler
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4618      	mov	r0, r3
 8002360:	f001 f83e 	bl	80033e0 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <_ZN11GpioElementC1ERKS_>:
class GpioElement
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <_ZN11GpioElementC1ERKS_+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	791a      	ldrb	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	711a      	strb	r2, [r3, #4]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	795a      	ldrb	r2, [r3, #5]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	715a      	strb	r2, [r3, #5]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	080081f8 	.word	0x080081f8

080023b4 <_ZN13GpioInElementC1ERKS_>:
class GpioInElement : public GpioElement
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ffd3 	bl	8002370 <_ZN11GpioElementC1ERKS_>
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <_ZN13GpioInElementC1ERKS_+0x28>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	080081d8 	.word	0x080081d8

080023e0 <_ZZ4mainENKUlP9SmartFuseE_clES0_>:
	led_error.deactivate();

	std::array < GpioInElement, 5 > optos { safety_ams, safety_spare, safety_tms, safety_td, safety_hvd };

	sf_handler.smart_fuses[1].setActionInterval(100);
	sf_handler.smart_fuses[1].setAction([](SmartFuse* sf)
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
	{
		auto bms = PUTM_CAN::can.get_bms_hv_main();
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	490a      	ldr	r1, [pc, #40]	; (8002418 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x38>)
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff81 	bl	80022f8 <_ZN8PUTM_CAN13Can_interface15get_bms_hv_mainEv>

		// fan left
		sf->setChannelDutyCykle(Channel::c3, 500);
 80023f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023fa:	2103      	movs	r1, #3
 80023fc:	6838      	ldr	r0, [r7, #0]
 80023fe:	f7fe ffab 	bl	8001358 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>
		// fan right
		sf->setChannelDutyCykle(Channel::c4, 500);
 8002402:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002406:	2104      	movs	r1, #4
 8002408:	6838      	ldr	r0, [r7, #0]
 800240a:	f7fe ffa5 	bl	8001358 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>
	});
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000000 	.word	0x20000000

0800241c <_ZZ4mainENUlP9SmartFuseE_4_FUNES0_>:
	sf_handler.smart_fuses[1].setAction([](SmartFuse* sf)
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	});
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	2000      	movs	r0, #0
 8002428:	f7ff ffda 	bl	80023e0 <_ZZ4mainENKUlP9SmartFuseE_clES0_>
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <_ZZ4mainENKUlP9SmartFuseE_cvPFvS0_EEv>:
	sf_handler.smart_fuses[1].setAction([](SmartFuse* sf)
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	});
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <_ZZ4mainENKUlP9SmartFuseE_cvPFvS0_EEv+0x18>)
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	0800241d 	.word	0x0800241d

08002450 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4614      	mov	r4, r2
 8002462:	461d      	mov	r5, r3
 8002464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002468:	e895 0003 	ldmia.w	r5, {r0, r1}
 800246c:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3318      	adds	r3, #24
 8002474:	2203      	movs	r2, #3
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f005 fe27 	bl	80080cc <memcpy>
  }
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bdb0      	pop	{r4, r5, r7, pc}

08002488 <main>:
{
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248a:	b0d9      	sub	sp, #356	; 0x164
 800248c:	af02      	add	r7, sp, #8
	uint8_t _1 = 0x2;
 800248e:	2302      	movs	r3, #2
 8002490:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
	ChannelsSettings channels_settings
 8002494:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002498:	2236      	movs	r2, #54	; 0x36
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f005 fe23 	bl	80080e8 <memset>
 80024a2:	2301      	movs	r3, #1
 80024a4:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
 80024a8:	2301      	movs	r3, #1
 80024aa:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80024c6:	2302      	movs	r3, #2
 80024c8:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 80024cc:	2302      	movs	r3, #2
 80024ce:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 80024d2:	2302      	movs	r3, #2
 80024d4:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 80024d8:	2302      	movs	r3, #2
 80024da:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80024de:	2302      	movs	r3, #2
 80024e0:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 80024e4:	2302      	movs	r3, #2
 80024e6:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 80024ea:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80024ee:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 80024f2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80024f6:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 80024fa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80024fe:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 8002502:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002506:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 800250a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800250e:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 8002512:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002516:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 800251a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800251e:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8002522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002526:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 800252a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8002532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002536:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 800253a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800253e:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
 8002542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002546:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
	};
 800254a:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 800254e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8002552:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8002556:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800255a:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 800255e:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 8002562:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8002566:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 800256a:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 800256e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8002572:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8002576:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_1, &hspi1, channels_settings);
 800257a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4bc1      	ldr	r3, [pc, #772]	; (8002888 <main+0x400>)
 8002582:	2202      	movs	r2, #2
 8002584:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002588:	48c0      	ldr	r0, [pc, #768]	; (800288c <main+0x404>)
 800258a:	f7fd ffe5 	bl	8000558 <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_2, &hspi1, channels_settings);
 800258e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4bbc      	ldr	r3, [pc, #752]	; (8002888 <main+0x400>)
 8002596:	2204      	movs	r2, #4
 8002598:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800259c:	48bb      	ldr	r0, [pc, #748]	; (800288c <main+0x404>)
 800259e:	f7fd ffdb 	bl	8000558 <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_3, &hspi1, channels_settings);
 80025a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	4bb7      	ldr	r3, [pc, #732]	; (8002888 <main+0x400>)
 80025aa:	2208      	movs	r2, #8
 80025ac:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80025b0:	48b6      	ldr	r0, [pc, #728]	; (800288c <main+0x404>)
 80025b2:	f7fd ffd1 	bl	8000558 <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_4, &hspi1, channels_settings);
 80025b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4bb2      	ldr	r3, [pc, #712]	; (8002888 <main+0x400>)
 80025be:	2210      	movs	r2, #16
 80025c0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80025c4:	48b1      	ldr	r0, [pc, #708]	; (800288c <main+0x404>)
 80025c6:	f7fd ffc7 	bl	8000558 <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
  HAL_Init();
 80025ca:	f001 fe20 	bl	800420e <HAL_Init>
  SystemClock_Config();
 80025ce:	f000 fa55 	bl	8002a7c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80025d2:	f7ff fd33 	bl	800203c <MX_GPIO_Init>
  MX_CAN1_Init();
 80025d6:	f7fd ff29 	bl	800042c <MX_CAN1_Init>
  MX_ADC1_Init();
 80025da:	f7fd fe0f 	bl	80001fc <MX_ADC1_Init>
  MX_SPI1_Init();
 80025de:	f001 fc7b 	bl	8003ed8 <MX_SPI1_Init>
	sf_handler.initAll();
 80025e2:	48aa      	ldr	r0, [pc, #680]	; (800288c <main+0x404>)
 80025e4:	f7fd fff8 	bl	80005d8 <_ZN16SmartFuseHandlerILm4EE7initAllEv>
	initCAN();
 80025e8:	f000 faa8 	bl	8002b3c <_Z7initCANv>
	led_ok.deactivate();
 80025ec:	48a8      	ldr	r0, [pc, #672]	; (8002890 <main+0x408>)
 80025ee:	f7ff fc92 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 80025f2:	48a8      	ldr	r0, [pc, #672]	; (8002894 <main+0x40c>)
 80025f4:	f7ff fc8f 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 80025f8:	48a7      	ldr	r0, [pc, #668]	; (8002898 <main+0x410>)
 80025fa:	f7ff fc8c 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 80025fe:	48a7      	ldr	r0, [pc, #668]	; (800289c <main+0x414>)
 8002600:	f7ff fc89 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
	std::array < GpioInElement, 5 > optos { safety_ams, safety_spare, safety_tms, safety_td, safety_hvd };
 8002604:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002608:	49a5      	ldr	r1, [pc, #660]	; (80028a0 <main+0x418>)
 800260a:	4620      	mov	r0, r4
 800260c:	f7ff fed2 	bl	80023b4 <_ZN13GpioInElementC1ERKS_>
 8002610:	3410      	adds	r4, #16
 8002612:	49a4      	ldr	r1, [pc, #656]	; (80028a4 <main+0x41c>)
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff fecd 	bl	80023b4 <_ZN13GpioInElementC1ERKS_>
 800261a:	3410      	adds	r4, #16
 800261c:	49a2      	ldr	r1, [pc, #648]	; (80028a8 <main+0x420>)
 800261e:	4620      	mov	r0, r4
 8002620:	f7ff fec8 	bl	80023b4 <_ZN13GpioInElementC1ERKS_>
 8002624:	3410      	adds	r4, #16
 8002626:	49a1      	ldr	r1, [pc, #644]	; (80028ac <main+0x424>)
 8002628:	4620      	mov	r0, r4
 800262a:	f7ff fec3 	bl	80023b4 <_ZN13GpioInElementC1ERKS_>
 800262e:	f104 0310 	add.w	r3, r4, #16
 8002632:	499f      	ldr	r1, [pc, #636]	; (80028b0 <main+0x428>)
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff febd 	bl	80023b4 <_ZN13GpioInElementC1ERKS_>
	sf_handler.smart_fuses[1].setActionInterval(100);
 800263a:	2101      	movs	r1, #1
 800263c:	4893      	ldr	r0, [pc, #588]	; (800288c <main+0x404>)
 800263e:	f7ff fb2a 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002642:	4603      	mov	r3, r0
 8002644:	2164      	movs	r1, #100	; 0x64
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fb62 	bl	8000d10 <_ZN9SmartFuse17setActionIntervalEm>
	sf_handler.smart_fuses[1].setAction([](SmartFuse* sf)
 800264c:	2101      	movs	r1, #1
 800264e:	488f      	ldr	r0, [pc, #572]	; (800288c <main+0x404>)
 8002650:	f7ff fb21 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002654:	4604      	mov	r4, r0
 8002656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff feea 	bl	8002434 <_ZZ4mainENKUlP9SmartFuseE_cvPFvS0_EEv>
 8002660:	4603      	mov	r3, r0
 8002662:	4619      	mov	r1, r3
 8002664:	4620      	mov	r0, r4
 8002666:	f7fe fb67 	bl	8000d38 <_ZN9SmartFuse9setActionEPFvPS_E>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	sf_handler.enableAll();
 800266a:	4888      	ldr	r0, [pc, #544]	; (800288c <main+0x404>)
 800266c:	f7fd ffdf 	bl	800062e <_ZN16SmartFuseHandlerILm4EE9enableAllEv>

	enable_mosfets.activate();
 8002670:	4890      	ldr	r0, [pc, #576]	; (80028b4 <main+0x42c>)
 8002672:	f7ff fc39 	bl	8001ee8 <_ZN14GpioOutElement8activateEv>

	led_ok.activate();
 8002676:	4886      	ldr	r0, [pc, #536]	; (8002890 <main+0x408>)
 8002678:	f7ff fc36 	bl	8001ee8 <_ZN14GpioOutElement8activateEv>

	Timer timer_can_send_main_frame(10);
 800267c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002680:	210a      	movs	r1, #10
 8002682:	4618      	mov	r0, r3
 8002684:	f001 fd43 	bl	800410e <_ZN5TimerC1Em>
	Timer timer_can_send_other_frames(100);
 8002688:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800268c:	2164      	movs	r1, #100	; 0x64
 800268e:	4618      	mov	r0, r3
 8002690:	f001 fd3d 	bl	800410e <_ZN5TimerC1Em>

	while (1)
	{
		//----------------------------------------------------------------------------------------
		// handle smart fuses and show as Ok/Warnings/Error
		auto state = sf_handler.handleAll();
 8002694:	487d      	ldr	r0, [pc, #500]	; (800288c <main+0x404>)
 8002696:	f7fd ff74 	bl	8000582 <_ZN16SmartFuseHandlerILm4EE9handleAllEv>
 800269a:	4603      	mov	r3, r0
 800269c:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		switch (state)
 80026a0:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d007      	beq.n	80026b8 <main+0x230>
 80026a8:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d107      	bne.n	80026c0 <main+0x238>
		{
			case SmartFuseState::NotResponding: led_error.activate(); break;
 80026b0:	487a      	ldr	r0, [pc, #488]	; (800289c <main+0x414>)
 80026b2:	f7ff fc19 	bl	8001ee8 <_ZN14GpioOutElement8activateEv>
 80026b6:	e00c      	b.n	80026d2 <main+0x24a>
			case SmartFuseState::SPIError: led_error.activate(); break;
 80026b8:	4878      	ldr	r0, [pc, #480]	; (800289c <main+0x414>)
 80026ba:	f7ff fc15 	bl	8001ee8 <_ZN14GpioOutElement8activateEv>
 80026be:	e008      	b.n	80026d2 <main+0x24a>
			default:
			{
				led_warning_1.deactivate();
 80026c0:	4874      	ldr	r0, [pc, #464]	; (8002894 <main+0x40c>)
 80026c2:	f7ff fc28 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
				led_warning_2.deactivate();
 80026c6:	4874      	ldr	r0, [pc, #464]	; (8002898 <main+0x410>)
 80026c8:	f7ff fc25 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
				led_error.deactivate();
 80026cc:	4873      	ldr	r0, [pc, #460]	; (800289c <main+0x414>)
 80026ce:	f7ff fc22 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
			}
		}
		// debug stuff
		fuses_states = sf_handler.getStates();
 80026d2:	486e      	ldr	r0, [pc, #440]	; (800288c <main+0x404>)
 80026d4:	f7fd ffd9 	bl	800068a <_ZN16SmartFuseHandlerILm4EE9getStatesEv>
 80026d8:	4603      	mov	r3, r0
 80026da:	4a77      	ldr	r2, [pc, #476]	; (80028b8 <main+0x430>)
 80026dc:	6013      	str	r3, [r2, #0]
		channels_states = sf_handler.getChannelsStates();
 80026de:	4c77      	ldr	r4, [pc, #476]	; (80028bc <main+0x434>)
 80026e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026e4:	4969      	ldr	r1, [pc, #420]	; (800288c <main+0x404>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe f801 	bl	80006ee <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>
 80026ec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80026f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026f4:	461d      	mov	r5, r3
 80026f6:	6828      	ldr	r0, [r5, #0]
 80026f8:	6869      	ldr	r1, [r5, #4]
 80026fa:	68aa      	ldr	r2, [r5, #8]
 80026fc:	68eb      	ldr	r3, [r5, #12]
 80026fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002700:	6928      	ldr	r0, [r5, #16]
 8002702:	6969      	ldr	r1, [r5, #20]
 8002704:	c403      	stmia	r4!, {r0, r1}
		channels_currents = sf_handler.getChannelsCurrents();
 8002706:	4d6e      	ldr	r5, [pc, #440]	; (80028c0 <main+0x438>)
 8002708:	463b      	mov	r3, r7
 800270a:	4960      	ldr	r1, [pc, #384]	; (800288c <main+0x404>)
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe f817 	bl	8000740 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>
 8002712:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002716:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800271a:	461c      	mov	r4, r3
 800271c:	462e      	mov	r6, r5
 800271e:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8002722:	4635      	mov	r5, r6
 8002724:	4623      	mov	r3, r4
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002730:	3410      	adds	r4, #16
 8002732:	3610      	adds	r6, #16
 8002734:	4564      	cmp	r4, ip
 8002736:	d1f4      	bne.n	8002722 <main+0x29a>

		//----------------------------------------------------------------------------------------
		// handle safety
		for (auto& safety : optos)
 8002738:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800273c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002740:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002744:	f000 fe71 	bl	800342a <_ZNSt5arrayI13GpioInElementLj5EE5beginEv>
 8002748:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
 800274c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002750:	f000 fe77 	bl	8003442 <_ZNSt5arrayI13GpioInElementLj5EE3endEv>
 8002754:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 8002758:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800275c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002760:	429a      	cmp	r2, r3
 8002762:	d00d      	beq.n	8002780 <main+0x2f8>
 8002764:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002768:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		{
			safety.isActive();
 800276c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002770:	f7ff fc00 	bl	8001f74 <_ZN13GpioInElement8isActiveEv>
		for (auto& safety : optos)
 8002774:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002778:	3310      	adds	r3, #16
 800277a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800277e:	e7eb      	b.n	8002758 <main+0x2d0>
		}

		//----------------------------------------------------------------------------------------
		// transmit receive can and handle
		if(timer_can_send_main_frame.checkIfTimedOutAndReset())
 8002780:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002784:	4618      	mov	r0, r3
 8002786:	f001 fcef 	bl	8004168 <_ZN5Timer23checkIfTimedOutAndResetEv>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80f7 	beq.w	8002980 <main+0x4f8>
		{
			auto device_state = PUTM_CAN::SF_states::OK;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

			PUTM_CAN::FuseData fuses_overall_state { };
 8002798:	2300      	movs	r3, #0
 800279a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

			for(size_t i = 0; i < 4; i++)
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80027a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d819      	bhi.n	80027e0 <main+0x358>
				if(fuses_states[i] != SmartFuseState::Ok)
 80027ac:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80027b0:	4841      	ldr	r0, [pc, #260]	; (80028b8 <main+0x430>)
 80027b2:	f7ff fa61 	bl	8001c78 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 80027b6:	4603      	mov	r3, r0
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf14      	ite	ne
 80027be:	2301      	movne	r3, #1
 80027c0:	2300      	moveq	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <main+0x34c>
					device_state = static_cast<PUTM_CAN::SF_states>(i + 2);
 80027c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	3302      	adds	r3, #2
 80027d0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			for(size_t i = 0; i < 4; i++)
 80027d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027d8:	3301      	adds	r3, #1
 80027da:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80027de:	e7e1      	b.n	80027a4 <main+0x31c>

			for(auto& sf : channels_currents)
 80027e0:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <main+0x438>)
 80027e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80027e6:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80027ea:	f000 fe37 	bl	800345c <_ZNSt5arrayIS_ItLj6EELj4EE5beginEv>
 80027ee:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 80027f2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80027f6:	f000 fe3d 	bl	8003474 <_ZNSt5arrayIS_ItLj6EELj4EE3endEv>
 80027fa:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 80027fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002802:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002806:	429a      	cmp	r2, r3
 8002808:	d05c      	beq.n	80028c4 <main+0x43c>
 800280a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800280e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				for(auto& ch_current : sf)
 8002812:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002816:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800281a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800281e:	f000 fe36 	bl	800348e <_ZNSt5arrayItLj6EE5beginEv>
 8002822:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
 8002826:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800282a:	f000 fe3c 	bl	80034a6 <_ZNSt5arrayItLj6EE3endEv>
 800282e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8002832:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002836:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800283a:	429a      	cmp	r2, r3
 800283c:	d01d      	beq.n	800287a <main+0x3f2>
 800283e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002842:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
					fuses_overall_state.current += ch_current;
 8002846:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800284a:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800284e:	b29b      	uxth	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	4413      	add	r3, r2
 800285a:	b29b      	uxth	r3, r3
 800285c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002860:	b29a      	uxth	r2, r3
 8002862:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002866:	f362 130f 	bfi	r3, r2, #4, #12
 800286a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
				for(auto& ch_current : sf)
 800286e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002872:	3302      	adds	r3, #2
 8002874:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002878:	e7db      	b.n	8002832 <main+0x3aa>
			for(auto& sf : channels_currents)
 800287a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800287e:	330c      	adds	r3, #12
 8002880:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002884:	e7bb      	b.n	80027fe <main+0x376>
 8002886:	bf00      	nop
 8002888:	20000708 	.word	0x20000708
 800288c:	20000470 	.word	0x20000470
 8002890:	2000032c 	.word	0x2000032c
 8002894:	2000033c 	.word	0x2000033c
 8002898:	2000034c 	.word	0x2000034c
 800289c:	2000035c 	.word	0x2000035c
 80028a0:	200003ac 	.word	0x200003ac
 80028a4:	200003bc 	.word	0x200003bc
 80028a8:	200003cc 	.word	0x200003cc
 80028ac:	200003dc 	.word	0x200003dc
 80028b0:	200003ec 	.word	0x200003ec
 80028b4:	2000039c 	.word	0x2000039c
 80028b8:	20000424 	.word	0x20000424
 80028bc:	20000428 	.word	0x20000428
 80028c0:	20000440 	.word	0x20000440

			for(auto& sf : fuses_states)
 80028c4:	4b68      	ldr	r3, [pc, #416]	; (8002a68 <main+0x5e0>)
 80028c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80028ca:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80028ce:	f000 fdf7 	bl	80034c0 <_ZNSt5arrayI14SmartFuseStateLj4EE5beginEv>
 80028d2:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
 80028d6:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80028da:	f000 fdfd 	bl	80034d8 <_ZNSt5arrayI14SmartFuseStateLj4EE3endEv>
 80028de:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80028e2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80028e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d023      	beq.n	8002936 <main+0x4ae>
 80028ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80028f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				fuses_overall_state.ok |= (sf == SmartFuseState::Ok);
 80028f6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80028fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	b25a      	sxtb	r2, r3
 8002902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	b25b      	sxtb	r3, r3
 8002914:	4313      	orrs	r3, r2
 8002916:	b25b      	sxtb	r3, r3
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	b2da      	uxtb	r2, r3
 800291e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002922:	f362 0300 	bfi	r3, r2, #0, #1
 8002926:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
			for(auto& sf : fuses_states)
 800292a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800292e:	3301      	adds	r3, #1
 8002930:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002934:	e7d5      	b.n	80028e2 <main+0x45a>

			PUTM_CAN::SF_main sf_main
			{
				.fuses_overall_state = fuses_overall_state,
				.device_state =	device_state
			};
 8002936:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800293a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800293e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8002942:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a

			PUTM_CAN::Can_tx_message<PUTM_CAN::SF_main> can_sender(sf_main, PUTM_CAN::can_tx_header_SF_MAIN);
 8002946:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800294a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800294e:	4a47      	ldr	r2, [pc, #284]	; (8002a6c <main+0x5e4>)
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fd7d 	bl	8002450 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

			if(can_sender.send(hcan1) != HAL_StatusTypeDef::HAL_OK) led_error.activate();
 8002956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800295a:	4945      	ldr	r1, [pc, #276]	; (8002a70 <main+0x5e8>)
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fdc9 	bl	80034f4 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <main+0x4f2>
 8002972:	4840      	ldr	r0, [pc, #256]	; (8002a74 <main+0x5ec>)
 8002974:	f7ff fab8 	bl	8001ee8 <_ZN14GpioOutElement8activateEv>
 8002978:	e002      	b.n	8002980 <main+0x4f8>
			else led_error.deactivate();
 800297a:	483e      	ldr	r0, [pc, #248]	; (8002a74 <main+0x5ec>)
 800297c:	f7ff facb 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
		}

		if(timer_can_send_other_frames.checkIfTimedOutAndReset())
 8002980:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fbef 	bl	8004168 <_ZN5Timer23checkIfTimedOutAndResetEv>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	f43f ae81 	beq.w	8002694 <main+0x20c>
		{
			auto can_ok = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

			if( sendCanFrameFrontBox() != HAL_OK ) can_ok = HAL_ERROR;
 8002998:	f000 f93c 	bl	8002c14 <_Z20sendCanFrameFrontBoxv>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <main+0x52a>
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			if( sendCanFrameCoolingAndSafety() != HAL_OK ) can_ok = HAL_ERROR;
 80029b2:	f000 f9e5 	bl	8002d80 <_Z28sendCanFrameCoolingAndSafetyv>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf14      	ite	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	2300      	moveq	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <main+0x544>
 80029c6:	2301      	movs	r3, #1
 80029c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			if( sendCanFrameDV() != HAL_OK ) can_ok = HAL_ERROR;
 80029cc:	f000 fab6 	bl	8002f3c <_Z14sendCanFrameDVv>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf14      	ite	ne
 80029d6:	2301      	movne	r3, #1
 80029d8:	2300      	moveq	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <main+0x55e>
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			if( sendCanFrameDV() != HAL_OK ) can_ok = HAL_ERROR;
 80029e6:	f000 faa9 	bl	8002f3c <_Z14sendCanFrameDVv>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <main+0x578>
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			if( sendCanFrameWS() != HAL_OK ) can_ok = HAL_ERROR;
 8002a00:	f000 fb7a 	bl	80030f8 <_Z14sendCanFrameWSv>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <main+0x592>
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			if( sendCanFrameNucs() != HAL_OK ) can_ok = HAL_ERROR;
 8002a1a:	f000 fbfb 	bl	8003214 <_Z16sendCanFrameNucsv>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <main+0x5ac>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			if( sendCanFrameSafety() != HAL_OK ) can_ok = HAL_ERROR;
 8002a34:	f000 fc50 	bl	80032d8 <_Z18sendCanFrameSafetyv>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <main+0x5c6>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

			if(can_ok != HAL_OK) led_warning_2.activate();
 8002a4e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <main+0x5d6>
 8002a56:	4808      	ldr	r0, [pc, #32]	; (8002a78 <main+0x5f0>)
 8002a58:	f7ff fa46 	bl	8001ee8 <_ZN14GpioOutElement8activateEv>
 8002a5c:	e61a      	b.n	8002694 <main+0x20c>
			else led_warning_2.deactivate();
 8002a5e:	4806      	ldr	r0, [pc, #24]	; (8002a78 <main+0x5f0>)
 8002a60:	f7ff fa59 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 8002a64:	e616      	b.n	8002694 <main+0x20c>
 8002a66:	bf00      	nop
 8002a68:	20000424 	.word	0x20000424
 8002a6c:	08008200 	.word	0x08008200
 8002a70:	20000304 	.word	0x20000304
 8002a74:	2000035c 	.word	0x2000035c
 8002a78:	2000034c 	.word	0x2000034c

08002a7c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b098      	sub	sp, #96	; 0x60
 8002a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a82:	f107 0318 	add.w	r3, r7, #24
 8002a86:	2248      	movs	r2, #72	; 0x48
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f005 fb2c 	bl	80080e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
 8002a9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f003 fd46 	bl	8006530 <HAL_PWREx_ControlVoltageScaling>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002ab4:	f000 fc54 	bl	8003360 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ac2:	2340      	movs	r3, #64	; 0x40
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002aca:	2302      	movs	r3, #2
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002ad2:	231e      	movs	r3, #30
 8002ad4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ada:	2302      	movs	r3, #2
 8002adc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae2:	f107 0318 	add.w	r3, r7, #24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 fdc6 	bl	8006678 <HAL_RCC_OscConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf14      	ite	ne
 8002af2:	2301      	movne	r3, #1
 8002af4:	2300      	moveq	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 8002afc:	f000 fc30 	bl	8003360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b00:	230f      	movs	r3, #15
 8002b02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b04:	2303      	movs	r3, #3
 8002b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	2105      	movs	r1, #5
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f004 fa35 	bl	8006f88 <HAL_RCC_ClockConfig>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8002b2e:	f000 fc17 	bl	8003360 <Error_Handler>
  }
}
 8002b32:	bf00      	nop
 8002b34:	3760      	adds	r7, #96	; 0x60
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <_Z7initCANv>:

/* USER CODE BEGIN 4 */

void initCAN()
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	can_filtering_config.FilterBank = 0;
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	615a      	str	r2, [r3, #20]
	can_filtering_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
	can_filtering_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	61da      	str	r2, [r3, #28]
	can_filtering_config.FilterIdHigh = 0x0000;
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
	can_filtering_config.FilterIdLow = 0x0000;
 8002b58:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	605a      	str	r2, [r3, #4]
	can_filtering_config.FilterMaskIdHigh = 0x0000;
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
	can_filtering_config.FilterMaskIdLow = 0x0000;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
	can_filtering_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
	can_filtering_config.FilterActivation = ENABLE;
 8002b70:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	621a      	str	r2, [r3, #32]
	can_filtering_config.SlaveStartFilterBank = 14;
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b78:	220e      	movs	r2, #14
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24

	if ( HAL_CAN_ConfigFilter(&hcan1, &can_filtering_config) != HAL_OK )
 8002b7c:	4915      	ldr	r1, [pc, #84]	; (8002bd4 <_Z7initCANv+0x98>)
 8002b7e:	4816      	ldr	r0, [pc, #88]	; (8002bd8 <_Z7initCANv+0x9c>)
 8002b80:	f002 fc91 	bl	80054a6 <HAL_CAN_ConfigFilter>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <_Z7initCANv+0x5c>
		Error_Handler();
 8002b94:	f000 fbe4 	bl	8003360 <Error_Handler>

	if ( HAL_CAN_Start(&hcan1) != HAL_OK )
 8002b98:	480f      	ldr	r0, [pc, #60]	; (8002bd8 <_Z7initCANv+0x9c>)
 8002b9a:	f002 fd4e 	bl	800563a <HAL_CAN_Start>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <_Z7initCANv+0x76>
		Error_Handler();
 8002bae:	f000 fbd7 	bl	8003360 <Error_Handler>

	if ( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	4808      	ldr	r0, [pc, #32]	; (8002bd8 <_Z7initCANv+0x9c>)
 8002bb6:	f002 ff71 	bl	8005a9c <HAL_CAN_ActivateNotification>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <_Z7initCANv+0x92>
		Error_Handler();
 8002bca:	f000 fbc9 	bl	8003360 <Error_Handler>
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200003fc 	.word	0x200003fc
 8002bd8:	20000304 	.word	0x20000304

08002bdc <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002bdc:	b5b0      	push	{r4, r5, r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4614      	mov	r4, r2
 8002bee:	461d      	mov	r5, r3
 8002bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bf8:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3318      	adds	r3, #24
 8002c00:	2208      	movs	r2, #8
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f005 fa61 	bl	80080cc <memcpy>
  }
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}

08002c14 <_Z20sendCanFrameFrontBoxv>:

HAL_StatusTypeDef sendCanFrameFrontBox()
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 8002c1a:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <_Z20sendCanFrameFrontBoxv+0x128>)
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_FrontBox front_box
 8002c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
	{
		.fuse_0_inverter =
		{
			.ok = sf_buff[0].getChannelState(fuse_0_inverter) == ChannelState::Ok,
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f832 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fbeb 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
		}
	};
 8002c48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c4c:	f362 0300 	bfi	r3, r2, #0, #1
 8002c50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[0].getChannelCurrent(fuse_0_inverter)
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff f81c 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe ff02 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6e:	b29a      	uxth	r2, r3
	};
 8002c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c72:	f362 130f 	bfi	r3, r2, #4, #12
 8002c76:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[0].getChannelState(fuse_0_front_box) == ChannelState::Ok,
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f80a 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fbc3 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2da      	uxtb	r2, r3
	};
 8002c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c9c:	f362 0300 	bfi	r3, r2, #0, #1
 8002ca0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.current = sf_buff[0].getChannelCurrent(fuse_0_front_box)
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fff4 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe feda 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbe:	b29a      	uxth	r2, r3
	};
 8002cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cc2:	f362 130f 	bfi	r3, r2, #4, #12
 8002cc6:	84fb      	strh	r3, [r7, #38]	; 0x26
			.ok = sf_buff[0].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe ffe2 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fb9b 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2da      	uxtb	r2, r3
	};
 8002ce8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002cec:	f362 0300 	bfi	r3, r2, #0, #1
 8002cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe ffcc 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2102      	movs	r1, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe feb2 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0e:	b29a      	uxth	r2, r3
	};
 8002d10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d12:	f362 130f 	bfi	r3, r2, #4, #12
 8002d16:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_FrontBox> sender(front_box, PUTM_CAN::can_tx_header_SF_FRONTBOX);
 8002d18:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <_Z20sendCanFrameFrontBoxv+0x12c>)
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff5b 	bl	8002bdc <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	4906      	ldr	r1, [pc, #24]	; (8002d44 <_Z20sendCanFrameFrontBoxv+0x130>)
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fbf6 	bl	800351c <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef>
 8002d30:	4603      	mov	r3, r0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3730      	adds	r7, #48	; 0x30
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000470 	.word	0x20000470
 8002d40:	08008218 	.word	0x08008218
 8002d44:	20000304 	.word	0x20000304

08002d48 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002d48:	b5b0      	push	{r4, r5, r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4614      	mov	r4, r2
 8002d5a:	461d      	mov	r5, r3
 8002d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d64:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3318      	adds	r3, #24
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f005 f9ab 	bl	80080cc <memcpy>
  }
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bdb0      	pop	{r4, r5, r7, pc}

08002d80 <_Z28sendCanFrameCoolingAndSafetyv>:

HAL_StatusTypeDef sendCanFrameCoolingAndSafety()
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 8002d86:	4b5c      	ldr	r3, [pc, #368]	; (8002ef8 <_Z28sendCanFrameCoolingAndSafetyv+0x178>)
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_CoolingAndVSafety cooling_and_safety
 8002d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
	{
		.fuse_1_fan_l =
		{
			.ok = sf_buff[1].getChannelState(fuse_1_fan_l) == ChannelState::Ok,
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe ff7c 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2103      	movs	r1, #3
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe fb35 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[2].getChannelCurrent(fuse_0_tsal_assi)
		}
	};
 8002db4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002db8:	f362 0300 	bfi	r3, r2, #0, #1
 8002dbc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[1].getChannelCurrent(fuse_0_inverter)
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe ff66 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fe4c 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dda:	b29a      	uxth	r2, r3
	};
 8002ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dde:	f362 130f 	bfi	r3, r2, #4, #12
 8002de2:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[1].getChannelState(fuse_1_fan_r) == ChannelState::Ok,
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe ff54 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2104      	movs	r1, #4
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe fb0d 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2da      	uxtb	r2, r3
	};
 8002e04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e08:	f362 0300 	bfi	r3, r2, #0, #1
 8002e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.current = sf_buff[1].getChannelCurrent(fuse_1_fan_r)
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	2101      	movs	r1, #1
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe ff3e 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fe24 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2a:	b29a      	uxth	r2, r3
	};
 8002e2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e2e:	f362 130f 	bfi	r3, r2, #4, #12
 8002e32:	84fb      	strh	r3, [r7, #38]	; 0x26
			.ok = sf_buff[3].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	2103      	movs	r1, #3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe ff2c 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2102      	movs	r1, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe fae5 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2da      	uxtb	r2, r3
	};
 8002e54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e58:	f362 0300 	bfi	r3, r2, #0, #1
 8002e5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			.current = sf_buff[3].getChannelCurrent(fuse_0_tsal_assi)
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	2103      	movs	r1, #3
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe ff16 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fdfc 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7a:	b29a      	uxth	r2, r3
	};
 8002e7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e7e:	f362 130f 	bfi	r3, r2, #4, #12
 8002e82:	853b      	strh	r3, [r7, #40]	; 0x28
			.ok = sf_buff[2].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	2102      	movs	r1, #2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe ff04 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2102      	movs	r1, #2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fabd 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2da      	uxtb	r2, r3
	};
 8002ea4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002ea8:	f362 0300 	bfi	r3, r2, #0, #1
 8002eac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[2].getChannelCurrent(fuse_0_tsal_assi)
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe feee 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fdd4 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eca:	b29a      	uxth	r2, r3
	};
 8002ecc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ece:	f362 130f 	bfi	r3, r2, #4, #12
 8002ed2:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_CoolingAndVSafety> sender(cooling_and_safety, PUTM_CAN::can_tx_header_SF_FRONTBOX);
 8002ed4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	4a08      	ldr	r2, [pc, #32]	; (8002efc <_Z28sendCanFrameCoolingAndSafetyv+0x17c>)
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff33 	bl	8002d48 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	4906      	ldr	r1, [pc, #24]	; (8002f00 <_Z28sendCanFrameCoolingAndSafetyv+0x180>)
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fb2c 	bl	8003544 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef>
 8002eec:	4603      	mov	r3, r0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3730      	adds	r7, #48	; 0x30
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000470 	.word	0x20000470
 8002efc:	08008218 	.word	0x08008218
 8002f00:	20000304 	.word	0x20000304

08002f04 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4614      	mov	r4, r2
 8002f16:	461d      	mov	r5, r3
 8002f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f20:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3318      	adds	r3, #24
 8002f28:	2208      	movs	r2, #8
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f005 f8cd 	bl	80080cc <memcpy>
  }
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bdb0      	pop	{r4, r5, r7, pc}

08002f3c <_Z14sendCanFrameDVv>:

HAL_StatusTypeDef sendCanFrameDV()
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08c      	sub	sp, #48	; 0x30
 8002f40:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 8002f42:	4b5c      	ldr	r3, [pc, #368]	; (80030b4 <_Z14sendCanFrameDVv+0x178>)
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_DV dv
 8002f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
	{
		.fuse_0_box_dv =
		{
			.ok = sf_buff[2].getChannelState(fuse_2_box_dv) == ChannelState::Ok,
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	2102      	movs	r1, #2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fe9e 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fa57 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[1].getChannelCurrent(fuse_1_dash)
		}
	};
 8002f70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f74:	f362 0300 	bfi	r3, r2, #0, #1
 8002f78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[2].getChannelCurrent(fuse_2_box_dv)
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	2102      	movs	r1, #2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fe88 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2104      	movs	r1, #4
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fd6e 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f96:	b29a      	uxth	r2, r3
	};
 8002f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f9a:	f362 130f 	bfi	r3, r2, #4, #12
 8002f9e:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[0].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fe76 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2102      	movs	r1, #2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fa2f 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2da      	uxtb	r2, r3
	};
 8002fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fc4:	f362 0300 	bfi	r3, r2, #0, #1
 8002fc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe fe60 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2102      	movs	r1, #2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fd46 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe6:	b29a      	uxth	r2, r3
	};
 8002fe8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fea:	f362 130f 	bfi	r3, r2, #4, #12
 8002fee:	84fb      	strh	r3, [r7, #38]	; 0x26
			.ok = sf_buff[1].getChannelState(fuse_1_wheel_speed_1) == ChannelState::Ok,
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fe4e 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fa07 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2da      	uxtb	r2, r3
	};
 8003010:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003014:	f362 0300 	bfi	r3, r2, #0, #1
 8003018:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			.current = sf_buff[1].getChannelCurrent(fuse_1_wheel_speed_1)
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	2101      	movs	r1, #1
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe fe38 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003026:	4603      	mov	r3, r0
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fd1e 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003030:	4603      	mov	r3, r0
 8003032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003036:	b29a      	uxth	r2, r3
	};
 8003038:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800303a:	f362 130f 	bfi	r3, r2, #4, #12
 800303e:	853b      	strh	r3, [r7, #40]	; 0x28
			.ok = sf_buff[1].getChannelState(fuse_1_dash) == ChannelState::Ok,
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	2101      	movs	r1, #1
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fe26 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800304a:	4603      	mov	r3, r0
 800304c:	2101      	movs	r1, #1
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe f9df 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf0c      	ite	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	2300      	movne	r3, #0
 800305e:	b2da      	uxtb	r2, r3
	};
 8003060:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003064:	f362 0300 	bfi	r3, r2, #0, #1
 8003068:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[1].getChannelCurrent(fuse_1_dash)
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	2101      	movs	r1, #1
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fe10 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003076:	4603      	mov	r3, r0
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fcf6 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003080:	4603      	mov	r3, r0
 8003082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003086:	b29a      	uxth	r2, r3
	};
 8003088:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800308a:	f362 130f 	bfi	r3, r2, #4, #12
 800308e:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_DV> sender(dv, PUTM_CAN::can_tx_header_SF_DV);
 8003090:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <_Z14sendCanFrameDVv+0x17c>)
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff33 	bl	8002f04 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	4906      	ldr	r1, [pc, #24]	; (80030bc <_Z14sendCanFrameDVv+0x180>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fa62 	bl	800356c <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3730      	adds	r7, #48	; 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000470 	.word	0x20000470
 80030b8:	08008230 	.word	0x08008230
 80030bc:	20000304 	.word	0x20000304

080030c0 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4614      	mov	r4, r2
 80030d2:	461d      	mov	r5, r3
 80030d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80030dc:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3318      	adds	r3, #24
 80030e4:	2208      	movs	r2, #8
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f004 ffef 	bl	80080cc <memcpy>
  }
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bdb0      	pop	{r4, r5, r7, pc}

080030f8 <_Z14sendCanFrameWSv>:

HAL_StatusTypeDef sendCanFrameWS()
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 80030fe:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <_Z14sendCanFrameWSv+0xd8>)
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_WS ws
 8003102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
	{
		.fuse_1_ws_rl =
		{
			.ok = sf_buff[1].getChannelState(fuse_1_wheel_speed_1) == ChannelState::Ok,
 800310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310e:	2101      	movs	r1, #1
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe fdc0 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003116:	4603      	mov	r3, r0
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe f979 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[2].getChannelCurrent(fuse_2_wheel_speed_2)
		}
	};
 800312c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003130:	f362 0300 	bfi	r3, r2, #0, #1
 8003134:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[1].getChannelCurrent(fuse_1_wheel_speed_1)
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	2101      	movs	r1, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fdaa 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003142:	4603      	mov	r3, r0
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe fc90 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 800314c:	4603      	mov	r3, r0
 800314e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003152:	b29a      	uxth	r2, r3
	};
 8003154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003156:	f362 130f 	bfi	r3, r2, #4, #12
 800315a:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[2].getChannelState(fuse_2_wheel_speed_2) == ChannelState::Ok,
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	2102      	movs	r1, #2
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe fd98 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003166:	4603      	mov	r3, r0
 8003168:	2103      	movs	r1, #3
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe f951 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2da      	uxtb	r2, r3
	};
 800317c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003180:	f362 0300 	bfi	r3, r2, #0, #1
 8003184:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[2].getChannelCurrent(fuse_2_wheel_speed_2)
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	2102      	movs	r1, #2
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fd82 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003192:	4603      	mov	r3, r0
 8003194:	2103      	movs	r1, #3
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fc68 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 800319c:	4603      	mov	r3, r0
 800319e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a2:	b29a      	uxth	r2, r3
	};
 80031a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031a6:	f362 130f 	bfi	r3, r2, #4, #12
 80031aa:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_WS> sender(ws, PUTM_CAN::can_tx_header_SF_WS);
 80031ac:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <_Z14sendCanFrameWSv+0xdc>)
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff83 	bl	80030c0 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	4906      	ldr	r1, [pc, #24]	; (80031d8 <_Z14sendCanFrameWSv+0xe0>)
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f9e8 	bl	8003594 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef>
 80031c4:	4603      	mov	r3, r0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3730      	adds	r7, #48	; 0x30
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000470 	.word	0x20000470
 80031d4:	08008248 	.word	0x08008248
 80031d8:	20000304 	.word	0x20000304

080031dc <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80031dc:	b4b0      	push	{r4, r5, r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031f8:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3318      	adds	r3, #24
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	601a      	str	r2, [r3, #0]
  }
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bcb0      	pop	{r4, r5, r7}
 8003210:	4770      	bx	lr
	...

08003214 <_Z16sendCanFrameNucsv>:

HAL_StatusTypeDef sendCanFrameNucs()
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <_Z16sendCanFrameNucsv+0x80>)
 800321c:	627b      	str	r3, [r7, #36]	; 0x24

	PUTM_CAN::SF_NUCS nucs
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
	{
		.fuse_2_jetson =
		{
			.ok = sf_buff[2].getChannelState(fuse_2_jetson) == ChannelState::Ok,
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	2102      	movs	r1, #2
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fd35 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800322c:	4603      	mov	r3, r0
 800322e:	2105      	movs	r1, #5
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe f8ee 	bl	8001412 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = 0
		}
	};
 8003242:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003246:	f362 0300 	bfi	r3, r2, #0, #1
 800324a:	f887 3020 	strb.w	r3, [r7, #32]
			.current = sf_buff[2].getChannelCurrent(fuse_2_jetson)
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fd1f 	bl	8001c96 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003258:	4603      	mov	r3, r0
 800325a:	2105      	movs	r1, #5
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe fc05 	bl	8001a6c <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003262:	4603      	mov	r3, r0
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	b29a      	uxth	r2, r3
	};
 800326a:	8c3b      	ldrh	r3, [r7, #32]
 800326c:	f362 130f 	bfi	r3, r2, #4, #12
 8003270:	843b      	strh	r3, [r7, #32]

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_NUCS> sender(nucs, PUTM_CAN::can_tx_header_SF_NUCS);
 8003272:	f107 0120 	add.w	r1, r7, #32
 8003276:	463b      	mov	r3, r7
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <_Z16sendCanFrameNucsv+0x84>)
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ffae 	bl	80031dc <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 8003280:	463b      	mov	r3, r7
 8003282:	4906      	ldr	r1, [pc, #24]	; (800329c <_Z16sendCanFrameNucsv+0x88>)
 8003284:	4618      	mov	r0, r3
 8003286:	f000 f999 	bl	80035bc <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef>
 800328a:	4603      	mov	r3, r0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3728      	adds	r7, #40	; 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000470 	.word	0x20000470
 8003298:	08008260 	.word	0x08008260
 800329c:	20000304 	.word	0x20000304

080032a0 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4614      	mov	r4, r2
 80032b2:	461d      	mov	r5, r3
 80032b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032bc:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3318      	adds	r3, #24
 80032c4:	2205      	movs	r2, #5
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f004 feff 	bl	80080cc <memcpy>
  }
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bdb0      	pop	{r4, r5, r7, pc}

080032d8 <_Z18sendCanFrameSafetyv>:

HAL_StatusTypeDef sendCanFrameSafety()
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 80032de:	4b18      	ldr	r3, [pc, #96]	; (8003340 <_Z18sendCanFrameSafetyv+0x68>)
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_safety safety
	{
		.firewall = safety_ams.isActive(),
 80032e2:	4818      	ldr	r0, [pc, #96]	; (8003344 <_Z18sendCanFrameSafetyv+0x6c>)
 80032e4:	f7fe fe46 	bl	8001f74 <_ZN13GpioInElement8isActiveEv>
 80032e8:	4603      	mov	r3, r0
		.hvd = safety_hvd.isActive(),
		.inverter = safety_spare.isActive(),
		.dv = safety_td.isActive(),
		.tsms = safety_tms.isActive()
	};
 80032ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		.hvd = safety_hvd.isActive(),
 80032ee:	4816      	ldr	r0, [pc, #88]	; (8003348 <_Z18sendCanFrameSafetyv+0x70>)
 80032f0:	f7fe fe40 	bl	8001f74 <_ZN13GpioInElement8isActiveEv>
 80032f4:	4603      	mov	r3, r0
	};
 80032f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		.inverter = safety_spare.isActive(),
 80032fa:	4814      	ldr	r0, [pc, #80]	; (800334c <_Z18sendCanFrameSafetyv+0x74>)
 80032fc:	f7fe fe3a 	bl	8001f74 <_ZN13GpioInElement8isActiveEv>
 8003300:	4603      	mov	r3, r0
	};
 8003302:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		.dv = safety_td.isActive(),
 8003306:	4812      	ldr	r0, [pc, #72]	; (8003350 <_Z18sendCanFrameSafetyv+0x78>)
 8003308:	f7fe fe34 	bl	8001f74 <_ZN13GpioInElement8isActiveEv>
 800330c:	4603      	mov	r3, r0
	};
 800330e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		.tsms = safety_tms.isActive()
 8003312:	4810      	ldr	r0, [pc, #64]	; (8003354 <_Z18sendCanFrameSafetyv+0x7c>)
 8003314:	f7fe fe2e 	bl	8001f74 <_ZN13GpioInElement8isActiveEv>
 8003318:	4603      	mov	r3, r0
	};
 800331a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_safety> sender(safety, PUTM_CAN::can_tx_header_SF_SAFETY);
 800331e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <_Z18sendCanFrameSafetyv+0x80>)
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff ffba 	bl	80032a0 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	490b      	ldr	r1, [pc, #44]	; (800335c <_Z18sendCanFrameSafetyv+0x84>)
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f957 	bl	80035e4 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>
 8003336:	4603      	mov	r3, r0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3730      	adds	r7, #48	; 0x30
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000470 	.word	0x20000470
 8003344:	200003ac 	.word	0x200003ac
 8003348:	200003ec 	.word	0x200003ec
 800334c:	200003bc 	.word	0x200003bc
 8003350:	200003dc 	.word	0x200003dc
 8003354:	200003cc 	.word	0x200003cc
 8003358:	08008278 	.word	0x08008278
 800335c:	20000304 	.word	0x20000304

08003360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	led_ok.deactivate();
 8003364:	4807      	ldr	r0, [pc, #28]	; (8003384 <Error_Handler+0x24>)
 8003366:	f7fe fdd6 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 800336a:	4807      	ldr	r0, [pc, #28]	; (8003388 <Error_Handler+0x28>)
 800336c:	f7fe fdd3 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8003370:	4806      	ldr	r0, [pc, #24]	; (800338c <Error_Handler+0x2c>)
 8003372:	f7fe fdd0 	bl	8001f16 <_ZN14GpioOutElement10deactivateEv>
	led_error.activate();
 8003376:	4806      	ldr	r0, [pc, #24]	; (8003390 <Error_Handler+0x30>)
 8003378:	f7fe fdb6 	bl	8001ee8 <_ZN14GpioOutElement8activateEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800337c:	b672      	cpsid	i
}
 800337e:	bf00      	nop

	__disable_irq();
	while (1) {}
 8003380:	e7fe      	b.n	8003380 <Error_Handler+0x20>
 8003382:	bf00      	nop
 8003384:	2000032c 	.word	0x2000032c
 8003388:	2000033c 	.word	0x2000033c
 800338c:	2000034c 	.word	0x2000034c
 8003390:	2000035c 	.word	0x2000035c

08003394 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>:
      begin() noexcept
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f935 	bl	800360c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 80033a2:	4603      	mov	r3, r0
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>:
      end() noexcept
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f929 	bl	800360c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 80033ba:	4603      	mov	r3, r0
 80033bc:	3384      	adds	r3, #132	; 0x84
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <_ZN3etl7ivectorI9SmartFuseED1Ev>:
  class ivector : public etl::vector_base
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe ff14 	bl	80021fe <_ZN3etl11vector_baseD1Ev>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	330c      	adds	r3, #12
 80033ee:	2204      	movs	r2, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	f000 f918 	bl	8003626 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>
    {
      this->initialise();
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 f92a 	bl	8003652 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f931 	bl	800367a <_ZN3etl7ivectorI9SmartFuseE5clearEv>
    }
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ffd3 	bl	80033c6 <_ZN3etl7ivectorI9SmartFuseED1Ev>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_ZNSt5arrayI13GpioInElementLj5EE5beginEv>:
      begin() noexcept
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f92c 	bl	8003690 <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>
 8003438:	4603      	mov	r3, r0
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <_ZNSt5arrayI13GpioInElementLj5EE3endEv>:
      end() noexcept
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f920 	bl	8003690 <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>
 8003450:	4603      	mov	r3, r0
 8003452:	3350      	adds	r3, #80	; 0x50
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <_ZNSt5arrayIS_ItLj6EELj4EE5beginEv>:
      begin() noexcept
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f920 	bl	80036aa <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>
 800346a:	4603      	mov	r3, r0
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <_ZNSt5arrayIS_ItLj6EELj4EE3endEv>:
      end() noexcept
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f914 	bl	80036aa <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>
 8003482:	4603      	mov	r3, r0
 8003484:	3330      	adds	r3, #48	; 0x30
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <_ZNSt5arrayItLj6EE5beginEv>:
      begin() noexcept
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f914 	bl	80036c4 <_ZNSt5arrayItLj6EE4dataEv>
 800349c:	4603      	mov	r3, r0
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <_ZNSt5arrayItLj6EE3endEv>:
      end() noexcept
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f908 	bl	80036c4 <_ZNSt5arrayItLj6EE4dataEv>
 80034b4:	4603      	mov	r3, r0
 80034b6:	330c      	adds	r3, #12
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_ZNSt5arrayI14SmartFuseStateLj4EE5beginEv>:
      begin() noexcept
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f908 	bl	80036de <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>
 80034ce:	4603      	mov	r3, r0
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZNSt5arrayI14SmartFuseStateLj4EE3endEv>:
      end() noexcept
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f8fc 	bl	80036de <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>
 80034e6:	4603      	mov	r3, r0
 80034e8:	3304      	adds	r3, #4
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f103 0218 	add.w	r2, r3, #24
 8003506:	4b04      	ldr	r3, [pc, #16]	; (8003518 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003508:	6838      	ldr	r0, [r7, #0]
 800350a:	f002 f8da 	bl	80056c2 <HAL_CAN_AddTxMessage>
 800350e:	4603      	mov	r3, r0
  }
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	200006ec 	.word	0x200006ec

0800351c <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f103 0218 	add.w	r2, r3, #24
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003530:	6838      	ldr	r0, [r7, #0]
 8003532:	f002 f8c6 	bl	80056c2 <HAL_CAN_AddTxMessage>
 8003536:	4603      	mov	r3, r0
  }
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200006f0 	.word	0x200006f0

08003544 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f103 0218 	add.w	r2, r3, #24
 8003556:	4b04      	ldr	r3, [pc, #16]	; (8003568 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003558:	6838      	ldr	r0, [r7, #0]
 800355a:	f002 f8b2 	bl	80056c2 <HAL_CAN_AddTxMessage>
 800355e:	4603      	mov	r3, r0
  }
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200006f4 	.word	0x200006f4

0800356c <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f103 0218 	add.w	r2, r3, #24
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003580:	6838      	ldr	r0, [r7, #0]
 8003582:	f002 f89e 	bl	80056c2 <HAL_CAN_AddTxMessage>
 8003586:	4603      	mov	r3, r0
  }
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200006f8 	.word	0x200006f8

08003594 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f103 0218 	add.w	r2, r3, #24
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef+0x24>)
 80035a8:	6838      	ldr	r0, [r7, #0]
 80035aa:	f002 f88a 	bl	80056c2 <HAL_CAN_AddTxMessage>
 80035ae:	4603      	mov	r3, r0
  }
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200006fc 	.word	0x200006fc

080035bc <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f103 0218 	add.w	r2, r3, #24
 80035ce:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef+0x24>)
 80035d0:	6838      	ldr	r0, [r7, #0]
 80035d2:	f002 f876 	bl	80056c2 <HAL_CAN_AddTxMessage>
 80035d6:	4603      	mov	r3, r0
  }
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000700 	.word	0x20000700

080035e4 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f103 0218 	add.w	r2, r3, #24
 80035f6:	4b04      	ldr	r3, [pc, #16]	; (8003608 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef+0x24>)
 80035f8:	6838      	ldr	r0, [r7, #0]
 80035fa:	f002 f862 	bl	80056c2 <HAL_CAN_AddTxMessage>
 80035fe:	4603      	mov	r3, r0
  }
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000704 	.word	0x20000704

0800360c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>:
      data() noexcept
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f86e 	bl	80036f8 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>
 800361c:	4603      	mov	r3, r0
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fdd2 	bl	80021e0 <_ZN3etl11vector_baseC1Ej>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
    }
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>:
    void initialise()
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f000 f852 	bl	800370e <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>
      p_end = p_buffer;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	609a      	str	r2, [r3, #8]
    }
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <_ZN3etl7ivectorI9SmartFuseE5clearEv>:
    void clear()
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
      initialise();
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ffe5 	bl	8003652 <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>:
      data() noexcept
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f842 	bl	8003724 <_ZNSt14__array_traitsI13GpioInElementLj5EE6_S_ptrERA5_KS0_>
 80036a0:	4603      	mov	r3, r0
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>:
      data() noexcept
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 f840 	bl	800373a <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_ptrERA4_KS1_>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_ZNSt5arrayItLj6EE4dataEv>:
      data() noexcept
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f83e 	bl	8003750 <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>:
      data() noexcept
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f83c 	bl	8003766 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_ptrERA4_KS0_>
 80036ee:	4603      	mov	r3, r0
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>:
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  typename etl::enable_if<etl::is_trivially_destructible<typename etl::iterator_traits<TIterator>::value_type>::value, void>::type
    destroy(TIterator /*i_begin*/, TIterator /*i_end*/)
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  {
  }
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <_ZNSt14__array_traitsI13GpioInElementLj5EE6_S_ptrERA5_KS0_>:
      _S_ptr(const _Type& __t) noexcept
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_ptrERA4_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>:
      _S_ptr(const _Type& __t) noexcept
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_ptrERA4_KS0_>:
      _S_ptr(const _Type& __t) noexcept
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_ZN16SmartFuseHandlerILm4EED1Ev>:
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fe3e 	bl	8003408 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <_Z41__static_initialization_and_destruction_0ii>:

  /* USER CODE END Error_Handler_Debug */
}
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d157      	bne.n	8003858 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d152      	bne.n	8003858 <_Z41__static_initialization_and_destruction_0ii+0xc0>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 80037b2:	2301      	movs	r3, #1
 80037b4:	2201      	movs	r2, #1
 80037b6:	4943      	ldr	r1, [pc, #268]	; (80038c4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80037b8:	4843      	ldr	r0, [pc, #268]	; (80038c8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80037ba:	f7fe fb7d 	bl	8001eb8 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 80037be:	2301      	movs	r3, #1
 80037c0:	2202      	movs	r2, #2
 80037c2:	4940      	ldr	r1, [pc, #256]	; (80038c4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80037c4:	4841      	ldr	r0, [pc, #260]	; (80038cc <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80037c6:	f7fe fb77 	bl	8001eb8 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 80037ca:	2301      	movs	r3, #1
 80037cc:	2204      	movs	r2, #4
 80037ce:	493d      	ldr	r1, [pc, #244]	; (80038c4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80037d0:	483f      	ldr	r0, [pc, #252]	; (80038d0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80037d2:	f7fe fb71 	bl	8001eb8 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 80037d6:	2301      	movs	r3, #1
 80037d8:	2208      	movs	r2, #8
 80037da:	493a      	ldr	r1, [pc, #232]	; (80038c4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80037dc:	483d      	ldr	r0, [pc, #244]	; (80038d4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80037de:	f7fe fb6b 	bl	8001eb8 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 80037e2:	2300      	movs	r3, #0
 80037e4:	2220      	movs	r2, #32
 80037e6:	493c      	ldr	r1, [pc, #240]	; (80038d8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80037e8:	483c      	ldr	r0, [pc, #240]	; (80038dc <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80037ea:	f7fe fb65 	bl	8001eb8 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 80037ee:	2300      	movs	r3, #0
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	4939      	ldr	r1, [pc, #228]	; (80038d8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80037f4:	483a      	ldr	r0, [pc, #232]	; (80038e0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80037f6:	f7fe fb5f 	bl	8001eb8 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 80037fa:	2300      	movs	r3, #0
 80037fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003800:	4935      	ldr	r1, [pc, #212]	; (80038d8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003802:	4838      	ldr	r0, [pc, #224]	; (80038e4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8003804:	f7fe fb58 	bl	8001eb8 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement enable_mosfets(GPIOB, GPIO_PIN_9, false);
 8003808:	2300      	movs	r3, #0
 800380a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380e:	4932      	ldr	r1, [pc, #200]	; (80038d8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003810:	4835      	ldr	r0, [pc, #212]	; (80038e8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8003812:	f7fe fb51 	bl	8001eb8 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_ams(GPIOB, GPIO_PIN_0, true);
 8003816:	2301      	movs	r3, #1
 8003818:	2201      	movs	r2, #1
 800381a:	492f      	ldr	r1, [pc, #188]	; (80038d8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800381c:	4833      	ldr	r0, [pc, #204]	; (80038ec <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800381e:	f7fe fb91 	bl	8001f44 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_spare(GPIOB, GPIO_PIN_1, true);
 8003822:	2301      	movs	r3, #1
 8003824:	2202      	movs	r2, #2
 8003826:	492c      	ldr	r1, [pc, #176]	; (80038d8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003828:	4831      	ldr	r0, [pc, #196]	; (80038f0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800382a:	f7fe fb8b 	bl	8001f44 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_tms(GPIOB, GPIO_PIN_2, true);
 800382e:	2301      	movs	r3, #1
 8003830:	2204      	movs	r2, #4
 8003832:	4929      	ldr	r1, [pc, #164]	; (80038d8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003834:	482f      	ldr	r0, [pc, #188]	; (80038f4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8003836:	f7fe fb85 	bl	8001f44 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_td(GPIOB, GPIO_PIN_4, true);
 800383a:	2301      	movs	r3, #1
 800383c:	2210      	movs	r2, #16
 800383e:	4926      	ldr	r1, [pc, #152]	; (80038d8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003840:	482d      	ldr	r0, [pc, #180]	; (80038f8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8003842:	f7fe fb7f 	bl	8001f44 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_hvd(GPIOB, GPIO_PIN_6, true);
 8003846:	2301      	movs	r3, #1
 8003848:	2240      	movs	r2, #64	; 0x40
 800384a:	4923      	ldr	r1, [pc, #140]	; (80038d8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800384c:	482b      	ldr	r0, [pc, #172]	; (80038fc <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800384e:	f7fe fb79 	bl	8001f44 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
SmartFuseHandler < number_of_fuses > sf_handler;
 8003852:	482b      	ldr	r0, [pc, #172]	; (8003900 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8003854:	f7fe fd7e 	bl	8002354 <_ZN16SmartFuseHandlerILm4EEC1Ev>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d12e      	bne.n	80038bc <_Z41__static_initialization_and_destruction_0ii+0x124>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003864:	4293      	cmp	r3, r2
 8003866:	d129      	bne.n	80038bc <_Z41__static_initialization_and_destruction_0ii+0x124>
 8003868:	4825      	ldr	r0, [pc, #148]	; (8003900 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800386a:	f7ff ff87 	bl	800377c <_ZN16SmartFuseHandlerILm4EED1Ev>
GpioInElement safety_hvd(GPIOB, GPIO_PIN_6, true);
 800386e:	4823      	ldr	r0, [pc, #140]	; (80038fc <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8003870:	f7fe fba0 	bl	8001fb4 <_ZN13GpioInElementD1Ev>
GpioInElement safety_td(GPIOB, GPIO_PIN_4, true);
 8003874:	4820      	ldr	r0, [pc, #128]	; (80038f8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8003876:	f7fe fb9d 	bl	8001fb4 <_ZN13GpioInElementD1Ev>
GpioInElement safety_tms(GPIOB, GPIO_PIN_2, true);
 800387a:	481e      	ldr	r0, [pc, #120]	; (80038f4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800387c:	f7fe fb9a 	bl	8001fb4 <_ZN13GpioInElementD1Ev>
GpioInElement safety_spare(GPIOB, GPIO_PIN_1, true);
 8003880:	481b      	ldr	r0, [pc, #108]	; (80038f0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8003882:	f7fe fb97 	bl	8001fb4 <_ZN13GpioInElementD1Ev>
GpioInElement safety_ams(GPIOB, GPIO_PIN_0, true);
 8003886:	4819      	ldr	r0, [pc, #100]	; (80038ec <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8003888:	f7fe fb94 	bl	8001fb4 <_ZN13GpioInElementD1Ev>
GpioOutElement enable_mosfets(GPIOB, GPIO_PIN_9, false);
 800388c:	4816      	ldr	r0, [pc, #88]	; (80038e8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800388e:	f7fe fbb3 	bl	8001ff8 <_ZN14GpioOutElementD1Ev>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003892:	4814      	ldr	r0, [pc, #80]	; (80038e4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8003894:	f7fe fbb0 	bl	8001ff8 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003898:	4811      	ldr	r0, [pc, #68]	; (80038e0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800389a:	f7fe fbad 	bl	8001ff8 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 800389e:	480f      	ldr	r0, [pc, #60]	; (80038dc <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80038a0:	f7fe fbaa 	bl	8001ff8 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 80038a4:	480b      	ldr	r0, [pc, #44]	; (80038d4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80038a6:	f7fe fba7 	bl	8001ff8 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 80038aa:	4809      	ldr	r0, [pc, #36]	; (80038d0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80038ac:	f7fe fba4 	bl	8001ff8 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 80038b0:	4806      	ldr	r0, [pc, #24]	; (80038cc <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80038b2:	f7fe fba1 	bl	8001ff8 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 80038b6:	4804      	ldr	r0, [pc, #16]	; (80038c8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80038b8:	f7fe fb9e 	bl	8001ff8 <_ZN14GpioOutElementD1Ev>
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	48000800 	.word	0x48000800
 80038c8:	2000032c 	.word	0x2000032c
 80038cc:	2000033c 	.word	0x2000033c
 80038d0:	2000034c 	.word	0x2000034c
 80038d4:	2000035c 	.word	0x2000035c
 80038d8:	48000400 	.word	0x48000400
 80038dc:	2000036c 	.word	0x2000036c
 80038e0:	2000037c 	.word	0x2000037c
 80038e4:	2000038c 	.word	0x2000038c
 80038e8:	2000039c 	.word	0x2000039c
 80038ec:	200003ac 	.word	0x200003ac
 80038f0:	200003bc 	.word	0x200003bc
 80038f4:	200003cc 	.word	0x200003cc
 80038f8:	200003dc 	.word	0x200003dc
 80038fc:	200003ec 	.word	0x200003ec
 8003900:	20000470 	.word	0x20000470

08003904 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	7993      	ldrb	r3, [r2, #6]
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1dd8      	adds	r0, r3, #7
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	331c      	adds	r3, #28
 8003920:	2203      	movs	r2, #3
 8003922:	4619      	mov	r1, r3
 8003924:	f004 fbd2 	bl	80080cc <memcpy>
  }
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
    new_data = true;
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	7993      	ldrb	r3, [r2, #6]
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3307      	adds	r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	321c      	adds	r2, #28
 800394c:	8812      	ldrh	r2, [r2, #0]
 800394e:	b292      	uxth	r2, r2
 8003950:	801a      	strh	r2, [r3, #0]
  }
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	7993      	ldrb	r3, [r2, #6]
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3307      	adds	r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	321c      	adds	r2, #28
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	601a      	str	r2, [r3, #0]
  }
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	7993      	ldrb	r3, [r2, #6]
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	1dd8      	adds	r0, r3, #7
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	331c      	adds	r3, #28
 80039a6:	2206      	movs	r2, #6
 80039a8:	4619      	mov	r1, r3
 80039aa:	f004 fb8f 	bl	80080cc <memcpy>
  }
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
    new_data = true;
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	7993      	ldrb	r3, [r2, #6]
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	1dd8      	adds	r0, r3, #7
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	331c      	adds	r3, #28
 80039d2:	2206      	movs	r2, #6
 80039d4:	4619      	mov	r1, r3
 80039d6:	f004 fb79 	bl	80080cc <memcpy>
  }
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
    new_data = true;
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	7993      	ldrb	r3, [r2, #6]
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	1dd8      	adds	r0, r3, #7
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	331c      	adds	r3, #28
 80039fe:	2206      	movs	r2, #6
 8003a00:	4619      	mov	r1, r3
 8003a02:	f004 fb63 	bl	80080cc <memcpy>
  }
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	7993      	ldrb	r3, [r2, #6]
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	1dd8      	adds	r0, r3, #7
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	331c      	adds	r3, #28
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f004 fb4d 	bl	80080cc <memcpy>
  }
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	7993      	ldrb	r3, [r2, #6]
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3307      	adds	r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	321c      	adds	r2, #28
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	601a      	str	r2, [r3, #0]
  }
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	7993      	ldrb	r3, [r2, #6]
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	1dd8      	adds	r0, r3, #7
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	331c      	adds	r3, #28
 8003a82:	2208      	movs	r2, #8
 8003a84:	4619      	mov	r1, r3
 8003a86:	f004 fb21 	bl	80080cc <memcpy>
  }
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	7993      	ldrb	r3, [r2, #6]
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	1dd8      	adds	r0, r3, #7
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	331c      	adds	r3, #28
 8003aae:	2203      	movs	r2, #3
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f004 fb0b 	bl	80080cc <memcpy>
  }
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	7993      	ldrb	r3, [r2, #6]
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	1dd8      	adds	r0, r3, #7
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	331c      	adds	r3, #28
 8003ada:	2203      	movs	r2, #3
 8003adc:	4619      	mov	r1, r3
 8003ade:	f004 faf5 	bl	80080cc <memcpy>
  }
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <_ZN8PUTM_CAN6DeviceINS_7SF_NUCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	7993      	ldrb	r3, [r2, #6]
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3307      	adds	r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	321c      	adds	r2, #28
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	601a      	str	r2, [r3, #0]
  }
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <_ZN8PUTM_CAN6DeviceINS_5SF_WSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	7993      	ldrb	r3, [r2, #6]
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	1dd8      	adds	r0, r3, #7
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	331c      	adds	r3, #28
 8003b32:	2208      	movs	r2, #8
 8003b34:	4619      	mov	r1, r3
 8003b36:	f004 fac9 	bl	80080cc <memcpy>
  }
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <_ZN8PUTM_CAN6DeviceINS_5SF_DVEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	7993      	ldrb	r3, [r2, #6]
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	1dd8      	adds	r0, r3, #7
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	331c      	adds	r3, #28
 8003b5e:	2208      	movs	r2, #8
 8003b60:	4619      	mov	r1, r3
 8003b62:	f004 fab3 	bl	80080cc <memcpy>
  }
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <_ZN8PUTM_CAN6DeviceINS_20SF_CoolingAndVSafetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	7993      	ldrb	r3, [r2, #6]
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1dd8      	adds	r0, r3, #7
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	331c      	adds	r3, #28
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f004 fa9d 	bl	80080cc <memcpy>
  }
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <_ZN8PUTM_CAN6DeviceINS_11SF_FrontBoxEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	7993      	ldrb	r3, [r2, #6]
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	1dd8      	adds	r0, r3, #7
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	331c      	adds	r3, #28
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f004 fa87 	bl	80080cc <memcpy>
  }
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	7993      	ldrb	r3, [r2, #6]
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	1dd8      	adds	r0, r3, #7
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	331c      	adds	r3, #28
 8003be2:	2203      	movs	r2, #3
 8003be4:	4619      	mov	r1, r3
 8003be6:	f004 fa71 	bl	80080cc <memcpy>
  }
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	7993      	ldrb	r3, [r2, #6]
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	1dd8      	adds	r0, r3, #7
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	331c      	adds	r3, #28
 8003c0e:	2205      	movs	r2, #5
 8003c10:	4619      	mov	r1, r3
 8003c12:	f004 fa5b 	bl	80080cc <memcpy>
  }
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	7993      	ldrb	r3, [r2, #6]
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3307      	adds	r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	321c      	adds	r2, #28
 8003c3a:	8812      	ldrh	r2, [r2, #0]
 8003c3c:	b292      	uxth	r2, r2
 8003c3e:	801a      	strh	r2, [r3, #0]
  }
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	7993      	ldrb	r3, [r2, #6]
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3307      	adds	r3, #7
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	321c      	adds	r2, #28
 8003c68:	7812      	ldrb	r2, [r2, #0]
 8003c6a:	701a      	strb	r2, [r3, #0]
  }
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	7993      	ldrb	r3, [r2, #6]
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3307      	adds	r3, #7
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	321c      	adds	r2, #28
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	601a      	str	r2, [r3, #0]
  }
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	7993      	ldrb	r3, [r2, #6]
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3307      	adds	r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	321c      	adds	r2, #28
 8003cc0:	7812      	ldrb	r2, [r2, #0]
 8003cc2:	701a      	strb	r2, [r3, #0]
  }
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	7993      	ldrb	r3, [r2, #6]
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3307      	adds	r3, #7
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	321c      	adds	r2, #28
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	801a      	strh	r2, [r3, #0]
  }
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	7993      	ldrb	r3, [r2, #6]
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	1dd8      	adds	r0, r3, #7
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	331c      	adds	r3, #28
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	f004 f9d5 	bl	80080cc <memcpy>
  }
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	7993      	ldrb	r3, [r2, #6]
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3307      	adds	r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	321c      	adds	r2, #28
 8003d46:	7812      	ldrb	r2, [r2, #0]
 8003d48:	701a      	strb	r2, [r3, #0]
  }
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	7993      	ldrb	r3, [r2, #6]
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	1dd8      	adds	r0, r3, #7
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	331c      	adds	r3, #28
 8003d72:	2208      	movs	r2, #8
 8003d74:	4619      	mov	r1, r3
 8003d76:	f004 f9a9 	bl	80080cc <memcpy>
  }
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	7993      	ldrb	r3, [r2, #6]
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	1dd8      	adds	r0, r3, #7
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	331c      	adds	r3, #28
 8003d9e:	2206      	movs	r2, #6
 8003da0:	4619      	mov	r1, r3
 8003da2:	f004 f993 	bl	80080cc <memcpy>
  }
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	7993      	ldrb	r3, [r2, #6]
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	1dd8      	adds	r0, r3, #7
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	331c      	adds	r3, #28
 8003dca:	2208      	movs	r2, #8
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f004 f97d 	bl	80080cc <memcpy>
  }
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	7993      	ldrb	r3, [r2, #6]
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3307      	adds	r3, #7
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	321c      	adds	r2, #28
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	701a      	strb	r2, [r3, #0]
  }
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	7993      	ldrb	r3, [r2, #6]
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	1dd8      	adds	r0, r3, #7
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	331c      	adds	r3, #28
 8003e22:	2206      	movs	r2, #6
 8003e24:	4619      	mov	r1, r3
 8003e26:	f004 f951 	bl	80080cc <memcpy>
  }
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	7993      	ldrb	r3, [r2, #6]
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	1dd8      	adds	r0, r3, #7
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	331c      	adds	r3, #28
 8003e4e:	2206      	movs	r2, #6
 8003e50:	4619      	mov	r1, r3
 8003e52:	f004 f93b 	bl	80080cc <memcpy>
  }
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	7993      	ldrb	r3, [r2, #6]
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1dd8      	adds	r0, r3, #7
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	331c      	adds	r3, #28
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f004 f925 	bl	80080cc <memcpy>
  }
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	7993      	ldrb	r3, [r2, #6]
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	1dd8      	adds	r0, r3, #7
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	331c      	adds	r3, #28
 8003ea6:	2205      	movs	r2, #5
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f004 f90f 	bl	80080cc <memcpy>
  }
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f7ff fc6a 	bl	8003798 <_Z41__static_initialization_and_destruction_0ii>
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_GLOBAL__sub_D__ZN8PUTM_CAN3canE>:
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f7ff fc62 	bl	8003798 <_Z41__static_initialization_and_destruction_0ii>
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003edc:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003ede:	4a27      	ldr	r2, [pc, #156]	; (8003f7c <MX_SPI1_Init+0xa4>)
 8003ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ee2:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003ee4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003ef2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ef6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f04:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003f0c:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f0e:	2218      	movs	r2, #24
 8003f10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f12:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f18:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003f24:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f26:	2207      	movs	r2, #7
 8003f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f36:	4810      	ldr	r0, [pc, #64]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f38:	f003 fff4 	bl	8007f24 <HAL_SPI_Init>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003f42:	f7ff fa0d 	bl	8003360 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f54:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d007      	beq.n	8003f74 <MX_SPI1_Init+0x9c>
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <MX_SPI1_Init+0xa0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f72:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000708 	.word	0x20000708
 8003f7c:	40013000 	.word	0x40013000

08003f80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <HAL_SPI_MspInit+0x7c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d128      	bne.n	8003ff4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fa2:	4b17      	ldr	r3, [pc, #92]	; (8004000 <HAL_SPI_MspInit+0x80>)
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <HAL_SPI_MspInit+0x80>)
 8003fa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fac:	6613      	str	r3, [r2, #96]	; 0x60
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <HAL_SPI_MspInit+0x80>)
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_SPI_MspInit+0x80>)
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	4a10      	ldr	r2, [pc, #64]	; (8004000 <HAL_SPI_MspInit+0x80>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_SPI_MspInit+0x80>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003fd2:	23e0      	movs	r3, #224	; 0xe0
 8003fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fe2:	2305      	movs	r3, #5
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe6:	f107 0314 	add.w	r3, r7, #20
 8003fea:	4619      	mov	r1, r3
 8003fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ff0:	f002 f8bc 	bl	800616c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3728      	adds	r7, #40	; 0x28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40013000 	.word	0x40013000
 8004000:	40021000 	.word	0x40021000

08004004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_MspInit+0x44>)
 800400c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400e:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <HAL_MspInit+0x44>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6613      	str	r3, [r2, #96]	; 0x60
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_MspInit+0x44>)
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_MspInit+0x44>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	4a08      	ldr	r2, [pc, #32]	; (8004048 <HAL_MspInit+0x44>)
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402c:	6593      	str	r3, [r2, #88]	; 0x58
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_MspInit+0x44>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40021000 	.word	0x40021000

0800404c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004050:	e7fe      	b.n	8004050 <NMI_Handler+0x4>

08004052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004052:	b480      	push	{r7}
 8004054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004056:	e7fe      	b.n	8004056 <HardFault_Handler+0x4>

08004058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800405c:	e7fe      	b.n	800405c <MemManage_Handler+0x4>

0800405e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800405e:	b480      	push	{r7}
 8004060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004062:	e7fe      	b.n	8004062 <BusFault_Handler+0x4>

08004064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004068:	e7fe      	b.n	8004068 <UsageFault_Handler+0x4>

0800406a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004098:	f000 f90e 	bl	80042b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800409c:	bf00      	nop
 800409e:	bd80      	pop	{r7, pc}

080040a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80040a4:	4802      	ldr	r0, [pc, #8]	; (80040b0 <CAN1_RX0_IRQHandler+0x10>)
 80040a6:	f001 fd1f 	bl	8005ae8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000304 	.word	0x20000304

080040b4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80040b8:	4802      	ldr	r0, [pc, #8]	; (80040c4 <CAN1_RX1_IRQHandler+0x10>)
 80040ba:	f001 fd15 	bl	8005ae8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000304 	.word	0x20000304

080040c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <SystemInit+0x20>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	4a05      	ldr	r2, [pc, #20]	; (80040e8 <SystemInit+0x20>)
 80040d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 80040fa:	f000 f8f1 	bl	80042e0 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	601a      	str	r2, [r3, #0]
}
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <_ZN5TimerC1Em>:

Timer::Timer(uint32_t timeout) : timeout(timeout)
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 800411e:	f000 f8df 	bl	80042e0 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
}
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_ZN5Timer10setTimeOutEm>:

void Timer::setTimeOut(uint32_t timeout)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
	this->timeout = timeout;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	605a      	str	r2, [r3, #4]
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <_ZN5Timer7restartEv>:

void Timer::restart()
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
	this->start_time = HAL_GetTick();
 8004156:	f000 f8c3 	bl	80042e0 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	601a      	str	r2, [r3, #0]
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <_ZN5Timer23checkIfTimedOutAndResetEv>:

bool Timer::checkIfTimedOutAndReset()
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	if(this->getPassedTime() >= this->timeout)
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f814 	bl	800419e <_ZN5Timer13getPassedTimeEv>
 8004176:	4602      	mov	r2, r0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	bf2c      	ite	cs
 8004180:	2301      	movcs	r3, #1
 8004182:	2300      	movcc	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <_ZN5Timer23checkIfTimedOutAndResetEv+0x2c>
	{
		this->restart();
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff ffdf 	bl	800414e <_ZN5Timer7restartEv>
		return true;
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <_ZN5Timer23checkIfTimedOutAndResetEv+0x2e>
	}

	return false;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - this->start_time;
 80041a6:	f000 f89b 	bl	80042e0 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	1ad3      	subs	r3, r2, r3
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80041bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80041c0:	f7ff ff82 	bl	80040c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041c4:	480c      	ldr	r0, [pc, #48]	; (80041f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80041c6:	490d      	ldr	r1, [pc, #52]	; (80041fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80041c8:	4a0d      	ldr	r2, [pc, #52]	; (8004200 <LoopForever+0xe>)
  movs r3, #0
 80041ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041cc:	e002      	b.n	80041d4 <LoopCopyDataInit>

080041ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041d2:	3304      	adds	r3, #4

080041d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041d8:	d3f9      	bcc.n	80041ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041dc:	4c0a      	ldr	r4, [pc, #40]	; (8004208 <LoopForever+0x16>)
  movs r3, #0
 80041de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041e0:	e001      	b.n	80041e6 <LoopFillZerobss>

080041e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041e4:	3204      	adds	r2, #4

080041e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041e8:	d3fb      	bcc.n	80041e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80041ea:	f003 ff43 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041ee:	f7fe f94b 	bl	8002488 <main>

080041f2 <LoopForever>:

LoopForever:
    b LoopForever
 80041f2:	e7fe      	b.n	80041f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80041f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80041f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041fc:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8004200:	0800846c 	.word	0x0800846c
  ldr r2, =_sbss
 8004204:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8004208:	20000778 	.word	0x20000778

0800420c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800420c:	e7fe      	b.n	800420c <ADC1_2_IRQHandler>

0800420e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004218:	2003      	movs	r0, #3
 800421a:	f001 ff65 	bl	80060e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800421e:	200f      	movs	r0, #15
 8004220:	f000 f80e 	bl	8004240 <HAL_InitTick>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	71fb      	strb	r3, [r7, #7]
 800422e:	e001      	b.n	8004234 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004230:	f7ff fee8 	bl	8004004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004234:	79fb      	ldrb	r3, [r7, #7]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800424c:	4b17      	ldr	r3, [pc, #92]	; (80042ac <HAL_InitTick+0x6c>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d023      	beq.n	800429c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004254:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <HAL_InitTick+0x70>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <HAL_InitTick+0x6c>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004262:	fbb3 f3f1 	udiv	r3, r3, r1
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	4618      	mov	r0, r3
 800426c:	f001 ff71 	bl	8006152 <HAL_SYSTICK_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b0f      	cmp	r3, #15
 800427a:	d809      	bhi.n	8004290 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800427c:	2200      	movs	r2, #0
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	f001 ff3b 	bl	80060fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004288:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <HAL_InitTick+0x74>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e007      	b.n	80042a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	e004      	b.n	80042a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	e001      	b.n	80042a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000218 	.word	0x20000218
 80042b0:	20000210 	.word	0x20000210
 80042b4:	20000214 	.word	0x20000214

080042b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_IncTick+0x20>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_IncTick+0x24>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4413      	add	r3, r2
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <HAL_IncTick+0x24>)
 80042ca:	6013      	str	r3, [r2, #0]
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000218 	.word	0x20000218
 80042dc:	2000076c 	.word	0x2000076c

080042e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return uwTick;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <HAL_GetTick+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	2000076c 	.word	0x2000076c

080042f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004300:	f7ff ffee 	bl	80042e0 <HAL_GetTick>
 8004304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d005      	beq.n	800431e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <HAL_Delay+0x44>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800431e:	bf00      	nop
 8004320:	f7ff ffde 	bl	80042e0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	429a      	cmp	r2, r3
 800432e:	d8f7      	bhi.n	8004320 <HAL_Delay+0x28>
  {
  }
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000218 	.word	0x20000218

08004340 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	609a      	str	r2, [r3, #8]
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	609a      	str	r2, [r3, #8]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3360      	adds	r3, #96	; 0x60
 80043ba:	461a      	mov	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <LL_ADC_SetOffset+0x44>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	03fff000 	.word	0x03fff000

080043f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3360      	adds	r3, #96	; 0x60
 80043fe:	461a      	mov	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3360      	adds	r3, #96	; 0x60
 800442c:	461a      	mov	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	431a      	orrs	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	615a      	str	r2, [r3, #20]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3330      	adds	r3, #48	; 0x30
 8004488:	461a      	mov	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	4413      	add	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	211f      	movs	r1, #31
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	401a      	ands	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	0e9b      	lsrs	r3, r3, #26
 80044b0:	f003 011f 	and.w	r1, r3, #31
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	fa01 f303 	lsl.w	r3, r1, r3
 80044be:	431a      	orrs	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3314      	adds	r3, #20
 80044e0:	461a      	mov	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	0e5b      	lsrs	r3, r3, #25
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	4413      	add	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	0d1b      	lsrs	r3, r3, #20
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2107      	movs	r1, #7
 80044fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	401a      	ands	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	0d1b      	lsrs	r3, r3, #20
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	431a      	orrs	r2, r3
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0318 	and.w	r3, r3, #24
 800454a:	4908      	ldr	r1, [pc, #32]	; (800456c <LL_ADC_SetChannelSingleDiff+0x44>)
 800454c:	40d9      	lsrs	r1, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	400b      	ands	r3, r1
 8004552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004556:	431a      	orrs	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	0007ffff 	.word	0x0007ffff

08004570 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6093      	str	r3, [r2, #8]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a8:	d101      	bne.n	80045ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80045cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f8:	d101      	bne.n	80045fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <LL_ADC_IsEnabled+0x18>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <LL_ADC_IsEnabled+0x1a>
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d101      	bne.n	800464a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b08      	cmp	r3, #8
 800466a:	d101      	bne.n	8004670 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800468c:	2300      	movs	r3, #0
 800468e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e134      	b.n	8004904 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fb fe1d 	bl	80002e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff67 	bl	8004594 <LL_ADC_IsDeepPowerDownEnabled>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff4d 	bl	8004570 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff ff82 	bl	80045e4 <LL_ADC_IsInternalRegulatorEnabled>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d115      	bne.n	8004712 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff ff66 	bl	80045bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046f0:	4b86      	ldr	r3, [pc, #536]	; (800490c <HAL_ADC_Init+0x28c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	4a86      	ldr	r2, [pc, #536]	; (8004910 <HAL_ADC_Init+0x290>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	099b      	lsrs	r3, r3, #6
 80046fe:	3301      	adds	r3, #1
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004704:	e002      	b.n	800470c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3b01      	subs	r3, #1
 800470a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f9      	bne.n	8004706 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff ff64 	bl	80045e4 <LL_ADC_IsInternalRegulatorEnabled>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10d      	bne.n	800473e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	f043 0210 	orr.w	r2, r3, #16
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004732:	f043 0201 	orr.w	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff ff75 	bl	8004632 <LL_ADC_REG_IsConversionOngoing>
 8004748:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	f040 80cd 	bne.w	80048f2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 80c9 	bne.w	80048f2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004768:	f043 0202 	orr.w	r2, r3, #2
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff49 	bl	800460c <LL_ADC_IsEnabled>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d110      	bne.n	80047a2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004780:	4864      	ldr	r0, [pc, #400]	; (8004914 <HAL_ADC_Init+0x294>)
 8004782:	f7ff ff43 	bl	800460c <LL_ADC_IsEnabled>
 8004786:	4604      	mov	r4, r0
 8004788:	4863      	ldr	r0, [pc, #396]	; (8004918 <HAL_ADC_Init+0x298>)
 800478a:	f7ff ff3f 	bl	800460c <LL_ADC_IsEnabled>
 800478e:	4603      	mov	r3, r0
 8004790:	4323      	orrs	r3, r4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4619      	mov	r1, r3
 800479c:	485f      	ldr	r0, [pc, #380]	; (800491c <HAL_ADC_Init+0x29c>)
 800479e:	f7ff fdcf 	bl	8004340 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	7e5b      	ldrb	r3, [r3, #25]
 80047a6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047ac:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80047b2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80047b8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047c0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d106      	bne.n	80047de <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	3b01      	subs	r3, #1
 80047d6:	045b      	lsls	r3, r3, #17
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	4b47      	ldr	r3, [pc, #284]	; (8004920 <HAL_ADC_Init+0x2a0>)
 8004802:	4013      	ands	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	430b      	orrs	r3, r1
 800480c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff ff0d 	bl	8004632 <LL_ADC_REG_IsConversionOngoing>
 8004818:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff1a 	bl	8004658 <LL_ADC_INJ_IsConversionOngoing>
 8004824:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d140      	bne.n	80048ae <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d13d      	bne.n	80048ae <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	7e1b      	ldrb	r3, [r3, #24]
 800483a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800483c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004844:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004854:	f023 0306 	bic.w	r3, r3, #6
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	69b9      	ldr	r1, [r7, #24]
 800485e:	430b      	orrs	r3, r1
 8004860:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004868:	2b01      	cmp	r3, #1
 800486a:	d118      	bne.n	800489e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004876:	f023 0304 	bic.w	r3, r3, #4
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004882:	4311      	orrs	r1, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004888:	4311      	orrs	r1, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800488e:	430a      	orrs	r2, r1
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	611a      	str	r2, [r3, #16]
 800489c:	e007      	b.n	80048ae <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10c      	bne.n	80048d0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f023 010f 	bic.w	r1, r3, #15
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	1e5a      	subs	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
 80048ce:	e007      	b.n	80048e0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 020f 	bic.w	r2, r2, #15
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	f023 0303 	bic.w	r3, r3, #3
 80048e8:	f043 0201 	orr.w	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	659a      	str	r2, [r3, #88]	; 0x58
 80048f0:	e007      	b.n	8004902 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	f043 0210 	orr.w	r2, r3, #16
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004902:	7ffb      	ldrb	r3, [r7, #31]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3724      	adds	r7, #36	; 0x24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd90      	pop	{r4, r7, pc}
 800490c:	20000210 	.word	0x20000210
 8004910:	053e2d63 	.word	0x053e2d63
 8004914:	50040000 	.word	0x50040000
 8004918:	50040100 	.word	0x50040100
 800491c:	50040300 	.word	0x50040300
 8004920:	fff0c007 	.word	0xfff0c007

08004924 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b0b6      	sub	sp, #216	; 0xd8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x22>
 8004942:	2302      	movs	r3, #2
 8004944:	e3d5      	b.n	80050f2 <HAL_ADC_ConfigChannel+0x7ce>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fe6d 	bl	8004632 <LL_ADC_REG_IsConversionOngoing>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	f040 83ba 	bne.w	80050d4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b05      	cmp	r3, #5
 8004966:	d824      	bhi.n	80049b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	3b02      	subs	r3, #2
 800496e:	2b03      	cmp	r3, #3
 8004970:	d81b      	bhi.n	80049aa <HAL_ADC_ConfigChannel+0x86>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <HAL_ADC_ConfigChannel+0x54>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	08004989 	.word	0x08004989
 800497c:	08004991 	.word	0x08004991
 8004980:	08004999 	.word	0x08004999
 8004984:	080049a1 	.word	0x080049a1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	220c      	movs	r2, #12
 800498c:	605a      	str	r2, [r3, #4]
          break;
 800498e:	e011      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2212      	movs	r2, #18
 8004994:	605a      	str	r2, [r3, #4]
          break;
 8004996:	e00d      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2218      	movs	r2, #24
 800499c:	605a      	str	r2, [r3, #4]
          break;
 800499e:	e009      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049a6:	605a      	str	r2, [r3, #4]
          break;
 80049a8:	e004      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2206      	movs	r2, #6
 80049ae:	605a      	str	r2, [r3, #4]
          break;
 80049b0:	e000      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80049b2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	f7ff fd59 	bl	8004478 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fe31 	bl	8004632 <LL_ADC_REG_IsConversionOngoing>
 80049d0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fe3d 	bl	8004658 <LL_ADC_INJ_IsConversionOngoing>
 80049de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 81c1 	bne.w	8004d6e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f040 81bc 	bne.w	8004d6e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049fe:	d10f      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6818      	ldr	r0, [r3, #0]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f7ff fd60 	bl	80044d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fd1a 	bl	8004452 <LL_ADC_SetSamplingTimeCommonConfig>
 8004a1e:	e00e      	b.n	8004a3e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	6819      	ldr	r1, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f7ff fd4f 	bl	80044d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fd0a 	bl	8004452 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	08db      	lsrs	r3, r3, #3
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d00a      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	6919      	ldr	r1, [r3, #16]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a70:	f7ff fc9a 	bl	80043a8 <LL_ADC_SetOffset>
 8004a74:	e17b      	b.n	8004d6e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fcb7 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x17e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fcac 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	0e9b      	lsrs	r3, r3, #26
 8004a9c:	f003 021f 	and.w	r2, r3, #31
 8004aa0:	e01e      	b.n	8004ae0 <HAL_ADC_ConfigChannel+0x1bc>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fca1 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ab8:	fa93 f3a3 	rbit	r3, r3
 8004abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	e004      	b.n	8004ade <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ad8:	fab3 f383 	clz	r3, r3
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x1d4>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	0e9b      	lsrs	r3, r3, #26
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	e018      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x206>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b04:	fa93 f3a3 	rbit	r3, r3
 8004b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004b14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	e004      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004b20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b24:	fab3 f383 	clz	r3, r3
 8004b28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d106      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fc70 	bl	800441c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2101      	movs	r1, #1
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fc54 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x244>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2101      	movs	r1, #1
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff fc49 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	0e9b      	lsrs	r3, r3, #26
 8004b62:	f003 021f 	and.w	r2, r3, #31
 8004b66:	e01e      	b.n	8004ba6 <HAL_ADC_ConfigChannel+0x282>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fc3e 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b7e:	fa93 f3a3 	rbit	r3, r3
 8004b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8004b96:	2320      	movs	r3, #32
 8004b98:	e004      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8004b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d105      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x29a>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	0e9b      	lsrs	r3, r3, #26
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	e018      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x2cc>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bca:	fa93 f3a3 	rbit	r3, r3
 8004bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8004be2:	2320      	movs	r3, #32
 8004be4:	e004      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8004be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bea:	fab3 f383 	clz	r3, r3
 8004bee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d106      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fc0d 	bl	800441c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2102      	movs	r1, #2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fbf1 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x30a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fbe6 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004c24:	4603      	mov	r3, r0
 8004c26:	0e9b      	lsrs	r3, r3, #26
 8004c28:	f003 021f 	and.w	r2, r3, #31
 8004c2c:	e01e      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x348>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2102      	movs	r1, #2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fbdb 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	e004      	b.n	8004c6a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c64:	fab3 f383 	clz	r3, r3
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x360>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	0e9b      	lsrs	r3, r3, #26
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	e016      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0x38e>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004c96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	e004      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cac:	fab3 f383 	clz	r3, r3
 8004cb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d106      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2102      	movs	r1, #2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fbac 	bl	800441c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2103      	movs	r1, #3
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fb90 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x3cc>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2103      	movs	r1, #3
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fb85 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	0e9b      	lsrs	r3, r3, #26
 8004cea:	f003 021f 	and.w	r2, r3, #31
 8004cee:	e017      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x3fc>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2103      	movs	r1, #3
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fb7a 	bl	80043f0 <LL_ADC_GetOffsetChannel>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d02:	fa93 f3a3 	rbit	r3, r3
 8004d06:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d0a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004d12:	2320      	movs	r3, #32
 8004d14:	e003      	b.n	8004d1e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d18:	fab3 f383 	clz	r3, r3
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x414>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	0e9b      	lsrs	r3, r3, #26
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	e011      	b.n	8004d5c <HAL_ADC_ConfigChannel+0x438>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004d46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004d50:	2320      	movs	r3, #32
 8004d52:	e003      	b.n	8004d5c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d106      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2200      	movs	r2, #0
 8004d66:	2103      	movs	r1, #3
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fb57 	bl	800441c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fc4a 	bl	800460c <LL_ADC_IsEnabled>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f040 8140 	bne.w	8005000 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6819      	ldr	r1, [r3, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f7ff fbcb 	bl	8004528 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4a8f      	ldr	r2, [pc, #572]	; (8004fd4 <HAL_ADC_ConfigChannel+0x6b0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	f040 8131 	bne.w	8005000 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x4a2>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	0e9b      	lsrs	r3, r3, #26
 8004db4:	3301      	adds	r3, #1
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	2b09      	cmp	r3, #9
 8004dbc:	bf94      	ite	ls
 8004dbe:	2301      	movls	r3, #1
 8004dc0:	2300      	movhi	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e019      	b.n	8004dfa <HAL_ADC_ConfigChannel+0x4d6>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dce:	fa93 f3a3 	rbit	r3, r3
 8004dd2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004dd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dd6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004dde:	2320      	movs	r3, #32
 8004de0:	e003      	b.n	8004dea <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de4:	fab3 f383 	clz	r3, r3
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	3301      	adds	r3, #1
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2b09      	cmp	r3, #9
 8004df2:	bf94      	ite	ls
 8004df4:	2301      	movls	r3, #1
 8004df6:	2300      	movhi	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d079      	beq.n	8004ef2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d107      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x4f6>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	0e9b      	lsrs	r3, r3, #26
 8004e10:	3301      	adds	r3, #1
 8004e12:	069b      	lsls	r3, r3, #26
 8004e14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e18:	e015      	b.n	8004e46 <HAL_ADC_ConfigChannel+0x522>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004e32:	2320      	movs	r3, #32
 8004e34:	e003      	b.n	8004e3e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e38:	fab3 f383 	clz	r3, r3
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	3301      	adds	r3, #1
 8004e40:	069b      	lsls	r3, r3, #26
 8004e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x542>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	0e9b      	lsrs	r3, r3, #26
 8004e58:	3301      	adds	r3, #1
 8004e5a:	f003 031f 	and.w	r3, r3, #31
 8004e5e:	2101      	movs	r1, #1
 8004e60:	fa01 f303 	lsl.w	r3, r1, r3
 8004e64:	e017      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x572>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8004e7e:	2320      	movs	r3, #32
 8004e80:	e003      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	2101      	movs	r1, #1
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	ea42 0103 	orr.w	r1, r2, r3
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x598>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	0e9b      	lsrs	r3, r3, #26
 8004eac:	3301      	adds	r3, #1
 8004eae:	f003 021f 	and.w	r2, r3, #31
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	4413      	add	r3, r2
 8004eb8:	051b      	lsls	r3, r3, #20
 8004eba:	e018      	b.n	8004eee <HAL_ADC_ConfigChannel+0x5ca>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	fa93 f3a3 	rbit	r3, r3
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	e003      	b.n	8004ee0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	fab3 f383 	clz	r3, r3
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	f003 021f 	and.w	r2, r3, #31
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	4413      	add	r3, r2
 8004eec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	e081      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <HAL_ADC_ConfigChannel+0x5ea>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	0e9b      	lsrs	r3, r3, #26
 8004f04:	3301      	adds	r3, #1
 8004f06:	069b      	lsls	r3, r3, #26
 8004f08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f0c:	e015      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x616>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	fa93 f3a3 	rbit	r3, r3
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004f26:	2320      	movs	r3, #32
 8004f28:	e003      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	fab3 f383 	clz	r3, r3
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	3301      	adds	r3, #1
 8004f34:	069b      	lsls	r3, r3, #26
 8004f36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x636>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	0e9b      	lsrs	r3, r3, #26
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	2101      	movs	r1, #1
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	e017      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x666>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	fa93 f3a3 	rbit	r3, r3
 8004f66:	61fb      	str	r3, [r7, #28]
  return result;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004f72:	2320      	movs	r3, #32
 8004f74:	e003      	b.n	8004f7e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	3301      	adds	r3, #1
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	2101      	movs	r1, #1
 8004f86:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8a:	ea42 0103 	orr.w	r1, r2, r3
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10d      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x692>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	0e9b      	lsrs	r3, r3, #26
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	f003 021f 	and.w	r2, r3, #31
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	4413      	add	r3, r2
 8004fac:	3b1e      	subs	r3, #30
 8004fae:	051b      	lsls	r3, r3, #20
 8004fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fb4:	e01e      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x6d0>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	fa93 f3a3 	rbit	r3, r3
 8004fc2:	613b      	str	r3, [r7, #16]
  return result;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004fce:	2320      	movs	r3, #32
 8004fd0:	e006      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x6bc>
 8004fd2:	bf00      	nop
 8004fd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	fab3 f383 	clz	r3, r3
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f003 021f 	and.w	r2, r3, #31
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4413      	add	r3, r2
 8004fec:	3b1e      	subs	r3, #30
 8004fee:	051b      	lsls	r3, r3, #20
 8004ff0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	6892      	ldr	r2, [r2, #8]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f7ff fa68 	bl	80044d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4b3d      	ldr	r3, [pc, #244]	; (80050fc <HAL_ADC_ConfigChannel+0x7d8>)
 8005006:	4013      	ands	r3, r2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d06c      	beq.n	80050e6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800500c:	483c      	ldr	r0, [pc, #240]	; (8005100 <HAL_ADC_ConfigChannel+0x7dc>)
 800500e:	f7ff f9bd 	bl	800438c <LL_ADC_GetCommonPathInternalCh>
 8005012:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a3a      	ldr	r2, [pc, #232]	; (8005104 <HAL_ADC_ConfigChannel+0x7e0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d127      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d121      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a35      	ldr	r2, [pc, #212]	; (8005108 <HAL_ADC_ConfigChannel+0x7e4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d157      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800503a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800503e:	4619      	mov	r1, r3
 8005040:	482f      	ldr	r0, [pc, #188]	; (8005100 <HAL_ADC_ConfigChannel+0x7dc>)
 8005042:	f7ff f990 	bl	8004366 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005046:	4b31      	ldr	r3, [pc, #196]	; (800510c <HAL_ADC_ConfigChannel+0x7e8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	099b      	lsrs	r3, r3, #6
 800504c:	4a30      	ldr	r2, [pc, #192]	; (8005110 <HAL_ADC_ConfigChannel+0x7ec>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	099b      	lsrs	r3, r3, #6
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	4613      	mov	r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005060:	e002      	b.n	8005068 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b01      	subs	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f9      	bne.n	8005062 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800506e:	e03a      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a27      	ldr	r2, [pc, #156]	; (8005114 <HAL_ADC_ConfigChannel+0x7f0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d113      	bne.n	80050a2 <HAL_ADC_ConfigChannel+0x77e>
 800507a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800507e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10d      	bne.n	80050a2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <HAL_ADC_ConfigChannel+0x7e4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d12a      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005098:	4619      	mov	r1, r3
 800509a:	4819      	ldr	r0, [pc, #100]	; (8005100 <HAL_ADC_ConfigChannel+0x7dc>)
 800509c:	f7ff f963 	bl	8004366 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050a0:	e021      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1c      	ldr	r2, [pc, #112]	; (8005118 <HAL_ADC_ConfigChannel+0x7f4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d11c      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d116      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a12      	ldr	r2, [pc, #72]	; (8005108 <HAL_ADC_ConfigChannel+0x7e4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d111      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050ca:	4619      	mov	r1, r3
 80050cc:	480c      	ldr	r0, [pc, #48]	; (8005100 <HAL_ADC_ConfigChannel+0x7dc>)
 80050ce:	f7ff f94a 	bl	8004366 <LL_ADC_SetCommonPathInternalCh>
 80050d2:	e008      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d8:	f043 0220 	orr.w	r2, r3, #32
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80050ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	37d8      	adds	r7, #216	; 0xd8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	80080000 	.word	0x80080000
 8005100:	50040300 	.word	0x50040300
 8005104:	c7520000 	.word	0xc7520000
 8005108:	50040000 	.word	0x50040000
 800510c:	20000210 	.word	0x20000210
 8005110:	053e2d63 	.word	0x053e2d63
 8005114:	cb840000 	.word	0xcb840000
 8005118:	80000001 	.word	0x80000001

0800511c <LL_ADC_IsEnabled>:
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <LL_ADC_IsEnabled+0x18>
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <LL_ADC_IsEnabled+0x1a>
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <LL_ADC_REG_IsConversionOngoing>:
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b04      	cmp	r3, #4
 8005154:	d101      	bne.n	800515a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b0a1      	sub	sp, #132	; 0x84
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005182:	2302      	movs	r3, #2
 8005184:	e089      	b.n	800529a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800518e:	2300      	movs	r3, #0
 8005190:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005192:	2300      	movs	r3, #0
 8005194:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a42      	ldr	r2, [pc, #264]	; (80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d102      	bne.n	80051a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80051a0:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e001      	b.n	80051aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	f043 0220 	orr.w	r2, r3, #32
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e068      	b.n	800529a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff ffb9 	bl	8005142 <LL_ADC_REG_IsConversionOngoing>
 80051d0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ffb3 	bl	8005142 <LL_ADC_REG_IsConversionOngoing>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d14a      	bne.n	8005278 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80051e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d147      	bne.n	8005278 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80051e8:	4b30      	ldr	r3, [pc, #192]	; (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80051ea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d027      	beq.n	8005244 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80051f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005206:	035b      	lsls	r3, r3, #13
 8005208:	430b      	orrs	r3, r1
 800520a:	431a      	orrs	r2, r3
 800520c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800520e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005210:	4824      	ldr	r0, [pc, #144]	; (80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005212:	f7ff ff83 	bl	800511c <LL_ADC_IsEnabled>
 8005216:	4604      	mov	r4, r0
 8005218:	4823      	ldr	r0, [pc, #140]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800521a:	f7ff ff7f 	bl	800511c <LL_ADC_IsEnabled>
 800521e:	4603      	mov	r3, r0
 8005220:	4323      	orrs	r3, r4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d132      	bne.n	800528c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800522e:	f023 030f 	bic.w	r3, r3, #15
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	6811      	ldr	r1, [r2, #0]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	6892      	ldr	r2, [r2, #8]
 800523a:	430a      	orrs	r2, r1
 800523c:	431a      	orrs	r2, r3
 800523e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005240:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005242:	e023      	b.n	800528c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800524c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005250:	4814      	ldr	r0, [pc, #80]	; (80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005252:	f7ff ff63 	bl	800511c <LL_ADC_IsEnabled>
 8005256:	4604      	mov	r4, r0
 8005258:	4813      	ldr	r0, [pc, #76]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800525a:	f7ff ff5f 	bl	800511c <LL_ADC_IsEnabled>
 800525e:	4603      	mov	r3, r0
 8005260:	4323      	orrs	r3, r4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d112      	bne.n	800528c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800526e:	f023 030f 	bic.w	r3, r3, #15
 8005272:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005274:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005276:	e009      	b.n	800528c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800528a:	e000      	b.n	800528e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800528c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005296:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800529a:	4618      	mov	r0, r3
 800529c:	3784      	adds	r7, #132	; 0x84
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd90      	pop	{r4, r7, pc}
 80052a2:	bf00      	nop
 80052a4:	50040000 	.word	0x50040000
 80052a8:	50040100 	.word	0x50040100
 80052ac:	50040300 	.word	0x50040300

080052b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e0ed      	b.n	800549e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fb f8e2 	bl	8000498 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052e4:	f7fe fffc 	bl	80042e0 <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80052ea:	e012      	b.n	8005312 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052ec:	f7fe fff8 	bl	80042e0 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b0a      	cmp	r3, #10
 80052f8:	d90b      	bls.n	8005312 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2205      	movs	r2, #5
 800530a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e0c5      	b.n	800549e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0e5      	beq.n	80052ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0202 	bic.w	r2, r2, #2
 800532e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005330:	f7fe ffd6 	bl	80042e0 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005336:	e012      	b.n	800535e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005338:	f7fe ffd2 	bl	80042e0 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b0a      	cmp	r3, #10
 8005344:	d90b      	bls.n	800535e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2205      	movs	r2, #5
 8005356:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e09f      	b.n	800549e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e5      	bne.n	8005338 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	7e1b      	ldrb	r3, [r3, #24]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d108      	bne.n	8005386 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e007      	b.n	8005396 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005394:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	7e5b      	ldrb	r3, [r3, #25]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d108      	bne.n	80053b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	e007      	b.n	80053c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7e9b      	ldrb	r3, [r3, #26]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d108      	bne.n	80053da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0220 	orr.w	r2, r2, #32
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e007      	b.n	80053ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0220 	bic.w	r2, r2, #32
 80053e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	7edb      	ldrb	r3, [r3, #27]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d108      	bne.n	8005404 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0210 	bic.w	r2, r2, #16
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e007      	b.n	8005414 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0210 	orr.w	r2, r2, #16
 8005412:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	7f1b      	ldrb	r3, [r3, #28]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d108      	bne.n	800542e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0208 	orr.w	r2, r2, #8
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e007      	b.n	800543e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0208 	bic.w	r2, r2, #8
 800543c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	7f5b      	ldrb	r3, [r3, #29]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d108      	bne.n	8005458 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0204 	orr.w	r2, r2, #4
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e007      	b.n	8005468 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0204 	bic.w	r2, r2, #4
 8005466:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	ea42 0103 	orr.w	r1, r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	1e5a      	subs	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b087      	sub	sp, #28
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054bc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80054be:	7cfb      	ldrb	r3, [r7, #19]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d003      	beq.n	80054cc <HAL_CAN_ConfigFilter+0x26>
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	f040 80aa 	bne.w	8005620 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054d2:	f043 0201 	orr.w	r2, r3, #1
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	2201      	movs	r2, #1
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	43db      	mvns	r3, r3
 80054f6:	401a      	ands	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d123      	bne.n	800554e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	43db      	mvns	r3, r3
 8005510:	401a      	ands	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005528:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	3248      	adds	r2, #72	; 0x48
 800552e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005542:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005544:	6979      	ldr	r1, [r7, #20]
 8005546:	3348      	adds	r3, #72	; 0x48
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	440b      	add	r3, r1
 800554c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d122      	bne.n	800559c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	431a      	orrs	r2, r3
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005576:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3248      	adds	r2, #72	; 0x48
 800557c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005590:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	3348      	adds	r3, #72	; 0x48
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	440b      	add	r3, r1
 800559a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	401a      	ands	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80055b6:	e007      	b.n	80055c8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	431a      	orrs	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	43db      	mvns	r3, r3
 80055da:	401a      	ands	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80055e2:	e007      	b.n	80055f4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	431a      	orrs	r2, r3
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d107      	bne.n	800560c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	431a      	orrs	r2, r3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005612:	f023 0201 	bic.w	r2, r3, #1
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	e006      	b.n	800562e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
  }
}
 800562e:	4618      	mov	r0, r3
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d12e      	bne.n	80056ac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005666:	f7fe fe3b 	bl	80042e0 <HAL_GetTick>
 800566a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800566c:	e012      	b.n	8005694 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800566e:	f7fe fe37 	bl	80042e0 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b0a      	cmp	r3, #10
 800567a:	d90b      	bls.n	8005694 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2205      	movs	r2, #5
 800568c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e012      	b.n	80056ba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e5      	bne.n	800566e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e006      	b.n	80056ba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b089      	sub	sp, #36	; 0x24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80056e0:	7ffb      	ldrb	r3, [r7, #31]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d003      	beq.n	80056ee <HAL_CAN_AddTxMessage+0x2c>
 80056e6:	7ffb      	ldrb	r3, [r7, #31]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	f040 80b8 	bne.w	800585e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80a0 	beq.w	800584e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	0e1b      	lsrs	r3, r3, #24
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d907      	bls.n	800572e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e09e      	b.n	800586c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800572e:	2201      	movs	r2, #1
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	409a      	lsls	r2, r3
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10d      	bne.n	800575c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800574a:	68f9      	ldr	r1, [r7, #12]
 800574c:	6809      	ldr	r1, [r1, #0]
 800574e:	431a      	orrs	r2, r3
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3318      	adds	r3, #24
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	440b      	add	r3, r1
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	e00f      	b.n	800577c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005766:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800576c:	68f9      	ldr	r1, [r7, #12]
 800576e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005770:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	3318      	adds	r3, #24
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	440b      	add	r3, r1
 800577a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6819      	ldr	r1, [r3, #0]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	3318      	adds	r3, #24
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	440b      	add	r3, r1
 800578c:	3304      	adds	r3, #4
 800578e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	7d1b      	ldrb	r3, [r3, #20]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d111      	bne.n	80057bc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	3318      	adds	r3, #24
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	4413      	add	r3, r2
 80057a4:	3304      	adds	r3, #4
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	6811      	ldr	r1, [r2, #0]
 80057ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	3318      	adds	r3, #24
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	440b      	add	r3, r1
 80057b8:	3304      	adds	r3, #4
 80057ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3307      	adds	r3, #7
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	061a      	lsls	r2, r3, #24
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3306      	adds	r3, #6
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	041b      	lsls	r3, r3, #16
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3305      	adds	r3, #5
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	4313      	orrs	r3, r2
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	3204      	adds	r2, #4
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	4610      	mov	r0, r2
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	6811      	ldr	r1, [r2, #0]
 80057e4:	ea43 0200 	orr.w	r2, r3, r0
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	440b      	add	r3, r1
 80057ee:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80057f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3303      	adds	r3, #3
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	061a      	lsls	r2, r3, #24
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3302      	adds	r3, #2
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3301      	adds	r3, #1
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	4313      	orrs	r3, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	7812      	ldrb	r2, [r2, #0]
 8005814:	4610      	mov	r0, r2
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	6811      	ldr	r1, [r2, #0]
 800581a:	ea43 0200 	orr.w	r2, r3, r0
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	440b      	add	r3, r1
 8005824:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005828:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	3318      	adds	r3, #24
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	4413      	add	r3, r2
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	6811      	ldr	r1, [r2, #0]
 800583c:	f043 0201 	orr.w	r2, r3, #1
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	3318      	adds	r3, #24
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	440b      	add	r3, r1
 8005848:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	e00e      	b.n	800586c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e006      	b.n	800586c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3724      	adds	r7, #36	; 0x24
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800588c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d003      	beq.n	800589c <HAL_CAN_GetRxMessage+0x24>
 8005894:	7dfb      	ldrb	r3, [r7, #23]
 8005896:	2b02      	cmp	r3, #2
 8005898:	f040 80f3 	bne.w	8005a82 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10e      	bne.n	80058c0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d116      	bne.n	80058de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0e7      	b.n	8005a90 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d107      	bne.n	80058de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0d8      	b.n	8005a90 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	331b      	adds	r3, #27
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	4413      	add	r3, r2
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0204 	and.w	r2, r3, #4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10c      	bne.n	8005916 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	331b      	adds	r3, #27
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	4413      	add	r3, r2
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	0d5b      	lsrs	r3, r3, #21
 800590c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e00b      	b.n	800592e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	331b      	adds	r3, #27
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	4413      	add	r3, r2
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	08db      	lsrs	r3, r3, #3
 8005926:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	331b      	adds	r3, #27
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	4413      	add	r3, r2
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0202 	and.w	r2, r3, #2
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	331b      	adds	r3, #27
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	4413      	add	r3, r2
 8005950:	3304      	adds	r3, #4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	331b      	adds	r3, #27
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	4413      	add	r3, r2
 8005968:	3304      	adds	r3, #4
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	b2da      	uxtb	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	331b      	adds	r3, #27
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	4413      	add	r3, r2
 8005980:	3304      	adds	r3, #4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	0c1b      	lsrs	r3, r3, #16
 8005986:	b29a      	uxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	4413      	add	r3, r2
 8005996:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	b2da      	uxtb	r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	0a1a      	lsrs	r2, r3, #8
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	3301      	adds	r3, #1
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	0c1a      	lsrs	r2, r3, #16
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	3302      	adds	r3, #2
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	4413      	add	r3, r2
 80059e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	0e1a      	lsrs	r2, r3, #24
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	3303      	adds	r3, #3
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	3304      	adds	r3, #4
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	0a1a      	lsrs	r2, r3, #8
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	3305      	adds	r3, #5
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	0c1a      	lsrs	r2, r3, #16
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	3306      	adds	r3, #6
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	0e1a      	lsrs	r2, r3, #24
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	3307      	adds	r3, #7
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d108      	bne.n	8005a6e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0220 	orr.w	r2, r2, #32
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	e007      	b.n	8005a7e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0220 	orr.w	r2, r2, #32
 8005a7c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e006      	b.n	8005a90 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
  }
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d002      	beq.n	8005aba <HAL_CAN_ActivateNotification+0x1e>
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d109      	bne.n	8005ace <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6959      	ldr	r1, [r3, #20]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e006      	b.n	8005adc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
  }
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d07c      	beq.n	8005c28 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d023      	beq.n	8005b80 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f983 	bl	8005e56 <HAL_CAN_TxMailbox0CompleteCallback>
 8005b50:	e016      	b.n	8005b80 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
 8005b64:	e00c      	b.n	8005b80 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
 8005b78:	e002      	b.n	8005b80 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f989 	bl	8005e92 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d024      	beq.n	8005bd4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f963 	bl	8005e6a <HAL_CAN_TxMailbox1CompleteCallback>
 8005ba4:	e016      	b.n	8005bd4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb8:	e00c      	b.n	8005bd4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d004      	beq.n	8005bce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
 8005bcc:	e002      	b.n	8005bd4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f969 	bl	8005ea6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d024      	beq.n	8005c28 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005be6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f943 	bl	8005e7e <HAL_CAN_TxMailbox2CompleteCallback>
 8005bf8:	e016      	b.n	8005c28 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0c:	e00c      	b.n	8005c28 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c20:	e002      	b.n	8005c28 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f949 	bl	8005eba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00c      	beq.n	8005c4c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2210      	movs	r2, #16
 8005c4a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00b      	beq.n	8005c6e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d006      	beq.n	8005c6e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2208      	movs	r2, #8
 8005c66:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f930 	bl	8005ece <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d009      	beq.n	8005c8c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fc fb48 	bl	800231c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2210      	movs	r2, #16
 8005cae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f912 	bl	8005ef6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8f9 	bl	8005ee2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d006      	beq.n	8005d12 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2210      	movs	r2, #16
 8005d0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f8fc 	bl	8005f0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d006      	beq.n	8005d34 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8f5 	bl	8005f1e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d07b      	beq.n	8005e36 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d072      	beq.n	8005e2e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	f043 0302 	orr.w	r3, r3, #2
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	f043 0304 	orr.w	r3, r3, #4
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d043      	beq.n	8005e2e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d03e      	beq.n	8005e2e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005db6:	2b60      	cmp	r3, #96	; 0x60
 8005db8:	d02b      	beq.n	8005e12 <HAL_CAN_IRQHandler+0x32a>
 8005dba:	2b60      	cmp	r3, #96	; 0x60
 8005dbc:	d82e      	bhi.n	8005e1c <HAL_CAN_IRQHandler+0x334>
 8005dbe:	2b50      	cmp	r3, #80	; 0x50
 8005dc0:	d022      	beq.n	8005e08 <HAL_CAN_IRQHandler+0x320>
 8005dc2:	2b50      	cmp	r3, #80	; 0x50
 8005dc4:	d82a      	bhi.n	8005e1c <HAL_CAN_IRQHandler+0x334>
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d019      	beq.n	8005dfe <HAL_CAN_IRQHandler+0x316>
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d826      	bhi.n	8005e1c <HAL_CAN_IRQHandler+0x334>
 8005dce:	2b30      	cmp	r3, #48	; 0x30
 8005dd0:	d010      	beq.n	8005df4 <HAL_CAN_IRQHandler+0x30c>
 8005dd2:	2b30      	cmp	r3, #48	; 0x30
 8005dd4:	d822      	bhi.n	8005e1c <HAL_CAN_IRQHandler+0x334>
 8005dd6:	2b10      	cmp	r3, #16
 8005dd8:	d002      	beq.n	8005de0 <HAL_CAN_IRQHandler+0x2f8>
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d005      	beq.n	8005dea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005dde:	e01d      	b.n	8005e1c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	f043 0308 	orr.w	r3, r3, #8
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005de8:	e019      	b.n	8005e1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	f043 0310 	orr.w	r3, r3, #16
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005df2:	e014      	b.n	8005e1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	f043 0320 	orr.w	r3, r3, #32
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005dfc:	e00f      	b.n	8005e1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e06:	e00a      	b.n	8005e1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e10:	e005      	b.n	8005e1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e1a:	e000      	b.n	8005e1e <HAL_CAN_IRQHandler+0x336>
            break;
 8005e1c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e2c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2204      	movs	r2, #4
 8005e34:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f872 	bl	8005f32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005e4e:	bf00      	nop
 8005e50:	3728      	adds	r7, #40	; 0x28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <__NVIC_SetPriorityGrouping+0x44>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f64:	4013      	ands	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f7a:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <__NVIC_SetPriorityGrouping+0x44>)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	60d3      	str	r3, [r2, #12]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	e000ed00 	.word	0xe000ed00

08005f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f94:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	f003 0307 	and.w	r3, r3, #7
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	e000ed00 	.word	0xe000ed00

08005fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	db0b      	blt.n	8005fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	f003 021f 	and.w	r2, r3, #31
 8005fc4:	4907      	ldr	r1, [pc, #28]	; (8005fe4 <__NVIC_EnableIRQ+0x38>)
 8005fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2001      	movs	r0, #1
 8005fce:	fa00 f202 	lsl.w	r2, r0, r2
 8005fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	e000e100 	.word	0xe000e100

08005fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	6039      	str	r1, [r7, #0]
 8005ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	db0a      	blt.n	8006012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	490c      	ldr	r1, [pc, #48]	; (8006034 <__NVIC_SetPriority+0x4c>)
 8006002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006006:	0112      	lsls	r2, r2, #4
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	440b      	add	r3, r1
 800600c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006010:	e00a      	b.n	8006028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	4908      	ldr	r1, [pc, #32]	; (8006038 <__NVIC_SetPriority+0x50>)
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	3b04      	subs	r3, #4
 8006020:	0112      	lsls	r2, r2, #4
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	440b      	add	r3, r1
 8006026:	761a      	strb	r2, [r3, #24]
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	e000e100 	.word	0xe000e100
 8006038:	e000ed00 	.word	0xe000ed00

0800603c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800603c:	b480      	push	{r7}
 800603e:	b089      	sub	sp, #36	; 0x24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f1c3 0307 	rsb	r3, r3, #7
 8006056:	2b04      	cmp	r3, #4
 8006058:	bf28      	it	cs
 800605a:	2304      	movcs	r3, #4
 800605c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	3304      	adds	r3, #4
 8006062:	2b06      	cmp	r3, #6
 8006064:	d902      	bls.n	800606c <NVIC_EncodePriority+0x30>
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3b03      	subs	r3, #3
 800606a:	e000      	b.n	800606e <NVIC_EncodePriority+0x32>
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006070:	f04f 32ff 	mov.w	r2, #4294967295
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	43da      	mvns	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	401a      	ands	r2, r3
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006084:	f04f 31ff 	mov.w	r1, #4294967295
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	fa01 f303 	lsl.w	r3, r1, r3
 800608e:	43d9      	mvns	r1, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006094:	4313      	orrs	r3, r2
         );
}
 8006096:	4618      	mov	r0, r3
 8006098:	3724      	adds	r7, #36	; 0x24
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
	...

080060a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060b4:	d301      	bcc.n	80060ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060b6:	2301      	movs	r3, #1
 80060b8:	e00f      	b.n	80060da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060ba:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <SysTick_Config+0x40>)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3b01      	subs	r3, #1
 80060c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060c2:	210f      	movs	r1, #15
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	f7ff ff8e 	bl	8005fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <SysTick_Config+0x40>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060d2:	4b04      	ldr	r3, [pc, #16]	; (80060e4 <SysTick_Config+0x40>)
 80060d4:	2207      	movs	r2, #7
 80060d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	e000e010 	.word	0xe000e010

080060e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff29 	bl	8005f48 <__NVIC_SetPriorityGrouping>
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b086      	sub	sp, #24
 8006102:	af00      	add	r7, sp, #0
 8006104:	4603      	mov	r3, r0
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006110:	f7ff ff3e 	bl	8005f90 <__NVIC_GetPriorityGrouping>
 8006114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	6978      	ldr	r0, [r7, #20]
 800611c:	f7ff ff8e 	bl	800603c <NVIC_EncodePriority>
 8006120:	4602      	mov	r2, r0
 8006122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006126:	4611      	mov	r1, r2
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff ff5d 	bl	8005fe8 <__NVIC_SetPriority>
}
 800612e:	bf00      	nop
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	4603      	mov	r3, r0
 800613e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff ff31 	bl	8005fac <__NVIC_EnableIRQ>
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff ffa2 	bl	80060a4 <SysTick_Config>
 8006160:	4603      	mov	r3, r0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800617a:	e166      	b.n	800644a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	2101      	movs	r1, #1
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	fa01 f303 	lsl.w	r3, r1, r3
 8006188:	4013      	ands	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 8158 	beq.w	8006444 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	2b01      	cmp	r3, #1
 800619e:	d005      	beq.n	80061ac <HAL_GPIO_Init+0x40>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d130      	bne.n	800620e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	2203      	movs	r2, #3
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	43db      	mvns	r3, r3
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4013      	ands	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061e2:	2201      	movs	r2, #1
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4013      	ands	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	091b      	lsrs	r3, r3, #4
 80061f8:	f003 0201 	and.w	r2, r3, #1
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d017      	beq.n	800624a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	2203      	movs	r2, #3
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	43db      	mvns	r3, r3
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4013      	ands	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d123      	bne.n	800629e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	08da      	lsrs	r2, r3, #3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3208      	adds	r2, #8
 800625e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	220f      	movs	r2, #15
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	43db      	mvns	r3, r3
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4013      	ands	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	08da      	lsrs	r2, r3, #3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3208      	adds	r2, #8
 8006298:	6939      	ldr	r1, [r7, #16]
 800629a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	2203      	movs	r2, #3
 80062aa:	fa02 f303 	lsl.w	r3, r2, r3
 80062ae:	43db      	mvns	r3, r3
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4013      	ands	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f003 0203 	and.w	r2, r3, #3
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80b2 	beq.w	8006444 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062e0:	4b61      	ldr	r3, [pc, #388]	; (8006468 <HAL_GPIO_Init+0x2fc>)
 80062e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e4:	4a60      	ldr	r2, [pc, #384]	; (8006468 <HAL_GPIO_Init+0x2fc>)
 80062e6:	f043 0301 	orr.w	r3, r3, #1
 80062ea:	6613      	str	r3, [r2, #96]	; 0x60
 80062ec:	4b5e      	ldr	r3, [pc, #376]	; (8006468 <HAL_GPIO_Init+0x2fc>)
 80062ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80062f8:	4a5c      	ldr	r2, [pc, #368]	; (800646c <HAL_GPIO_Init+0x300>)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	089b      	lsrs	r3, r3, #2
 80062fe:	3302      	adds	r3, #2
 8006300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	220f      	movs	r2, #15
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	43db      	mvns	r3, r3
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4013      	ands	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006322:	d02b      	beq.n	800637c <HAL_GPIO_Init+0x210>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a52      	ldr	r2, [pc, #328]	; (8006470 <HAL_GPIO_Init+0x304>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d025      	beq.n	8006378 <HAL_GPIO_Init+0x20c>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a51      	ldr	r2, [pc, #324]	; (8006474 <HAL_GPIO_Init+0x308>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d01f      	beq.n	8006374 <HAL_GPIO_Init+0x208>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a50      	ldr	r2, [pc, #320]	; (8006478 <HAL_GPIO_Init+0x30c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d019      	beq.n	8006370 <HAL_GPIO_Init+0x204>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a4f      	ldr	r2, [pc, #316]	; (800647c <HAL_GPIO_Init+0x310>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d013      	beq.n	800636c <HAL_GPIO_Init+0x200>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a4e      	ldr	r2, [pc, #312]	; (8006480 <HAL_GPIO_Init+0x314>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00d      	beq.n	8006368 <HAL_GPIO_Init+0x1fc>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a4d      	ldr	r2, [pc, #308]	; (8006484 <HAL_GPIO_Init+0x318>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d007      	beq.n	8006364 <HAL_GPIO_Init+0x1f8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a4c      	ldr	r2, [pc, #304]	; (8006488 <HAL_GPIO_Init+0x31c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d101      	bne.n	8006360 <HAL_GPIO_Init+0x1f4>
 800635c:	2307      	movs	r3, #7
 800635e:	e00e      	b.n	800637e <HAL_GPIO_Init+0x212>
 8006360:	2308      	movs	r3, #8
 8006362:	e00c      	b.n	800637e <HAL_GPIO_Init+0x212>
 8006364:	2306      	movs	r3, #6
 8006366:	e00a      	b.n	800637e <HAL_GPIO_Init+0x212>
 8006368:	2305      	movs	r3, #5
 800636a:	e008      	b.n	800637e <HAL_GPIO_Init+0x212>
 800636c:	2304      	movs	r3, #4
 800636e:	e006      	b.n	800637e <HAL_GPIO_Init+0x212>
 8006370:	2303      	movs	r3, #3
 8006372:	e004      	b.n	800637e <HAL_GPIO_Init+0x212>
 8006374:	2302      	movs	r3, #2
 8006376:	e002      	b.n	800637e <HAL_GPIO_Init+0x212>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <HAL_GPIO_Init+0x212>
 800637c:	2300      	movs	r3, #0
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	f002 0203 	and.w	r2, r2, #3
 8006384:	0092      	lsls	r2, r2, #2
 8006386:	4093      	lsls	r3, r2
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800638e:	4937      	ldr	r1, [pc, #220]	; (800646c <HAL_GPIO_Init+0x300>)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	089b      	lsrs	r3, r3, #2
 8006394:	3302      	adds	r3, #2
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800639c:	4b3b      	ldr	r3, [pc, #236]	; (800648c <HAL_GPIO_Init+0x320>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4013      	ands	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063c0:	4a32      	ldr	r2, [pc, #200]	; (800648c <HAL_GPIO_Init+0x320>)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063c6:	4b31      	ldr	r3, [pc, #196]	; (800648c <HAL_GPIO_Init+0x320>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	43db      	mvns	r3, r3
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4013      	ands	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063ea:	4a28      	ldr	r2, [pc, #160]	; (800648c <HAL_GPIO_Init+0x320>)
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80063f0:	4b26      	ldr	r3, [pc, #152]	; (800648c <HAL_GPIO_Init+0x320>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4013      	ands	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006414:	4a1d      	ldr	r2, [pc, #116]	; (800648c <HAL_GPIO_Init+0x320>)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800641a:	4b1c      	ldr	r3, [pc, #112]	; (800648c <HAL_GPIO_Init+0x320>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	43db      	mvns	r3, r3
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4013      	ands	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800643e:	4a13      	ldr	r2, [pc, #76]	; (800648c <HAL_GPIO_Init+0x320>)
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	3301      	adds	r3, #1
 8006448:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	fa22 f303 	lsr.w	r3, r2, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	f47f ae91 	bne.w	800617c <HAL_GPIO_Init+0x10>
  }
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	40021000 	.word	0x40021000
 800646c:	40010000 	.word	0x40010000
 8006470:	48000400 	.word	0x48000400
 8006474:	48000800 	.word	0x48000800
 8006478:	48000c00 	.word	0x48000c00
 800647c:	48001000 	.word	0x48001000
 8006480:	48001400 	.word	0x48001400
 8006484:	48001800 	.word	0x48001800
 8006488:	48001c00 	.word	0x48001c00
 800648c:	40010400 	.word	0x40010400

08006490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	887b      	ldrh	r3, [r7, #2]
 80064a2:	4013      	ands	r3, r2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
 80064ac:	e001      	b.n	80064b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	807b      	strh	r3, [r7, #2]
 80064cc:	4613      	mov	r3, r2
 80064ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064d0:	787b      	ldrb	r3, [r7, #1]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064d6:	887a      	ldrh	r2, [r7, #2]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064dc:	e002      	b.n	80064e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064de:	887a      	ldrh	r2, [r7, #2]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064f4:	4b0d      	ldr	r3, [pc, #52]	; (800652c <HAL_PWREx_GetVoltageRange+0x3c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006500:	d102      	bne.n	8006508 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006506:	e00b      	b.n	8006520 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006508:	4b08      	ldr	r3, [pc, #32]	; (800652c <HAL_PWREx_GetVoltageRange+0x3c>)
 800650a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800650e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006516:	d102      	bne.n	800651e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800651c:	e000      	b.n	8006520 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800651e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006520:	4618      	mov	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40007000 	.word	0x40007000

08006530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d141      	bne.n	80065c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800653e:	4b4b      	ldr	r3, [pc, #300]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654a:	d131      	bne.n	80065b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800654c:	4b47      	ldr	r3, [pc, #284]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800654e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006552:	4a46      	ldr	r2, [pc, #280]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006558:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800655c:	4b43      	ldr	r3, [pc, #268]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006564:	4a41      	ldr	r2, [pc, #260]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800656a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800656c:	4b40      	ldr	r3, [pc, #256]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2232      	movs	r2, #50	; 0x32
 8006572:	fb02 f303 	mul.w	r3, r2, r3
 8006576:	4a3f      	ldr	r2, [pc, #252]	; (8006674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006578:	fba2 2303 	umull	r2, r3, r2, r3
 800657c:	0c9b      	lsrs	r3, r3, #18
 800657e:	3301      	adds	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006582:	e002      	b.n	800658a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3b01      	subs	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800658a:	4b38      	ldr	r3, [pc, #224]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006596:	d102      	bne.n	800659e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f2      	bne.n	8006584 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800659e:	4b33      	ldr	r3, [pc, #204]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065aa:	d158      	bne.n	800665e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e057      	b.n	8006660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065b0:	4b2e      	ldr	r3, [pc, #184]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b6:	4a2d      	ldr	r2, [pc, #180]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80065c0:	e04d      	b.n	800665e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c8:	d141      	bne.n	800664e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065ca:	4b28      	ldr	r3, [pc, #160]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d6:	d131      	bne.n	800663c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065d8:	4b24      	ldr	r3, [pc, #144]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065de:	4a23      	ldr	r2, [pc, #140]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065e8:	4b20      	ldr	r3, [pc, #128]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065f0:	4a1e      	ldr	r2, [pc, #120]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80065f8:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2232      	movs	r2, #50	; 0x32
 80065fe:	fb02 f303 	mul.w	r3, r2, r3
 8006602:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006604:	fba2 2303 	umull	r2, r3, r2, r3
 8006608:	0c9b      	lsrs	r3, r3, #18
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800660e:	e002      	b.n	8006616 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3b01      	subs	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006616:	4b15      	ldr	r3, [pc, #84]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800661e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006622:	d102      	bne.n	800662a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f2      	bne.n	8006610 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800662a:	4b10      	ldr	r3, [pc, #64]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006636:	d112      	bne.n	800665e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e011      	b.n	8006660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800663e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006642:	4a0a      	ldr	r2, [pc, #40]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800664c:	e007      	b.n	800665e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800664e:	4b07      	ldr	r3, [pc, #28]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006656:	4a05      	ldr	r2, [pc, #20]	; (800666c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800665c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	40007000 	.word	0x40007000
 8006670:	20000210 	.word	0x20000210
 8006674:	431bde83 	.word	0x431bde83

08006678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	f000 bc76 	b.w	8006f78 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800668c:	4b97      	ldr	r3, [pc, #604]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 030c 	and.w	r3, r3, #12
 8006694:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006696:	4b95      	ldr	r3, [pc, #596]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80e6 	beq.w	800687a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <HAL_RCC_OscConfig+0x4c>
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2b0c      	cmp	r3, #12
 80066b8:	f040 808d 	bne.w	80067d6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	f040 8089 	bne.w	80067d6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066c4:	4b89      	ldr	r3, [pc, #548]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d006      	beq.n	80066de <HAL_RCC_OscConfig+0x66>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d102      	bne.n	80066de <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f000 bc4d 	b.w	8006f78 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066e2:	4b82      	ldr	r3, [pc, #520]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <HAL_RCC_OscConfig+0x80>
 80066ee:	4b7f      	ldr	r3, [pc, #508]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066f6:	e005      	b.n	8006704 <HAL_RCC_OscConfig+0x8c>
 80066f8:	4b7c      	ldr	r3, [pc, #496]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80066fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066fe:	091b      	lsrs	r3, r3, #4
 8006700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006704:	4293      	cmp	r3, r2
 8006706:	d224      	bcs.n	8006752 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fdf3 	bl	80072f8 <RCC_SetFlashLatencyFromMSIRange>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	f000 bc2d 	b.w	8006f78 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800671e:	4b73      	ldr	r3, [pc, #460]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a72      	ldr	r2, [pc, #456]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006724:	f043 0308 	orr.w	r3, r3, #8
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	4b70      	ldr	r3, [pc, #448]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	496d      	ldr	r1, [pc, #436]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006738:	4313      	orrs	r3, r2
 800673a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800673c:	4b6b      	ldr	r3, [pc, #428]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	4968      	ldr	r1, [pc, #416]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800674c:	4313      	orrs	r3, r2
 800674e:	604b      	str	r3, [r1, #4]
 8006750:	e025      	b.n	800679e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006752:	4b66      	ldr	r3, [pc, #408]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a65      	ldr	r2, [pc, #404]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006758:	f043 0308 	orr.w	r3, r3, #8
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	4b63      	ldr	r3, [pc, #396]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	4960      	ldr	r1, [pc, #384]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800676c:	4313      	orrs	r3, r2
 800676e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006770:	4b5e      	ldr	r3, [pc, #376]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	495b      	ldr	r1, [pc, #364]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006780:	4313      	orrs	r3, r2
 8006782:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fdb2 	bl	80072f8 <RCC_SetFlashLatencyFromMSIRange>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e3ec      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800679e:	f000 fd1f 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 80067a2:	4602      	mov	r2, r0
 80067a4:	4b51      	ldr	r3, [pc, #324]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	4950      	ldr	r1, [pc, #320]	; (80068f0 <HAL_RCC_OscConfig+0x278>)
 80067b0:	5ccb      	ldrb	r3, [r1, r3]
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ba:	4a4e      	ldr	r2, [pc, #312]	; (80068f4 <HAL_RCC_OscConfig+0x27c>)
 80067bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80067be:	4b4e      	ldr	r3, [pc, #312]	; (80068f8 <HAL_RCC_OscConfig+0x280>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fd fd3c 	bl	8004240 <HAL_InitTick>
 80067c8:	4603      	mov	r3, r0
 80067ca:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d052      	beq.n	8006878 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	e3d0      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d032      	beq.n	8006844 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80067de:	4b43      	ldr	r3, [pc, #268]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a42      	ldr	r2, [pc, #264]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80067e4:	f043 0301 	orr.w	r3, r3, #1
 80067e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067ea:	f7fd fd79 	bl	80042e0 <HAL_GetTick>
 80067ee:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067f2:	f7fd fd75 	bl	80042e0 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e3b9      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006804:	4b39      	ldr	r3, [pc, #228]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006810:	4b36      	ldr	r3, [pc, #216]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a35      	ldr	r2, [pc, #212]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006816:	f043 0308 	orr.w	r3, r3, #8
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	4b33      	ldr	r3, [pc, #204]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	4930      	ldr	r1, [pc, #192]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800682e:	4b2f      	ldr	r3, [pc, #188]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	492b      	ldr	r1, [pc, #172]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800683e:	4313      	orrs	r3, r2
 8006840:	604b      	str	r3, [r1, #4]
 8006842:	e01a      	b.n	800687a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006844:	4b29      	ldr	r3, [pc, #164]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a28      	ldr	r2, [pc, #160]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006850:	f7fd fd46 	bl	80042e0 <HAL_GetTick>
 8006854:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006858:	f7fd fd42 	bl	80042e0 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e386      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800686a:	4b20      	ldr	r3, [pc, #128]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f0      	bne.n	8006858 <HAL_RCC_OscConfig+0x1e0>
 8006876:	e000      	b.n	800687a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006878:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d073      	beq.n	800696e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d005      	beq.n	8006898 <HAL_RCC_OscConfig+0x220>
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	2b0c      	cmp	r3, #12
 8006890:	d10e      	bne.n	80068b0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d10b      	bne.n	80068b0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006898:	4b14      	ldr	r3, [pc, #80]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d063      	beq.n	800696c <HAL_RCC_OscConfig+0x2f4>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d15f      	bne.n	800696c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e363      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b8:	d106      	bne.n	80068c8 <HAL_RCC_OscConfig+0x250>
 80068ba:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a0b      	ldr	r2, [pc, #44]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80068c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e025      	b.n	8006914 <HAL_RCC_OscConfig+0x29c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068d0:	d114      	bne.n	80068fc <HAL_RCC_OscConfig+0x284>
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a05      	ldr	r2, [pc, #20]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80068d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	4b03      	ldr	r3, [pc, #12]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a02      	ldr	r2, [pc, #8]	; (80068ec <HAL_RCC_OscConfig+0x274>)
 80068e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	e013      	b.n	8006914 <HAL_RCC_OscConfig+0x29c>
 80068ec:	40021000 	.word	0x40021000
 80068f0:	0800841c 	.word	0x0800841c
 80068f4:	20000210 	.word	0x20000210
 80068f8:	20000214 	.word	0x20000214
 80068fc:	4b8f      	ldr	r3, [pc, #572]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a8e      	ldr	r2, [pc, #568]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	4b8c      	ldr	r3, [pc, #560]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a8b      	ldr	r2, [pc, #556]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 800690e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d013      	beq.n	8006944 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fd fce0 	bl	80042e0 <HAL_GetTick>
 8006920:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006924:	f7fd fcdc 	bl	80042e0 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b64      	cmp	r3, #100	; 0x64
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e320      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006936:	4b81      	ldr	r3, [pc, #516]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0f0      	beq.n	8006924 <HAL_RCC_OscConfig+0x2ac>
 8006942:	e014      	b.n	800696e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fd fccc 	bl	80042e0 <HAL_GetTick>
 8006948:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800694c:	f7fd fcc8 	bl	80042e0 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b64      	cmp	r3, #100	; 0x64
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e30c      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800695e:	4b77      	ldr	r3, [pc, #476]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f0      	bne.n	800694c <HAL_RCC_OscConfig+0x2d4>
 800696a:	e000      	b.n	800696e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800696c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d060      	beq.n	8006a3c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	2b04      	cmp	r3, #4
 800697e:	d005      	beq.n	800698c <HAL_RCC_OscConfig+0x314>
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	2b0c      	cmp	r3, #12
 8006984:	d119      	bne.n	80069ba <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d116      	bne.n	80069ba <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800698c:	4b6b      	ldr	r3, [pc, #428]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <HAL_RCC_OscConfig+0x32c>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e2e9      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a4:	4b65      	ldr	r3, [pc, #404]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	061b      	lsls	r3, r3, #24
 80069b2:	4962      	ldr	r1, [pc, #392]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069b8:	e040      	b.n	8006a3c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d023      	beq.n	8006a0a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069c2:	4b5e      	ldr	r3, [pc, #376]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a5d      	ldr	r2, [pc, #372]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 80069c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ce:	f7fd fc87 	bl	80042e0 <HAL_GetTick>
 80069d2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069d4:	e008      	b.n	80069e8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d6:	f7fd fc83 	bl	80042e0 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e2c7      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069e8:	4b54      	ldr	r3, [pc, #336]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0f0      	beq.n	80069d6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f4:	4b51      	ldr	r3, [pc, #324]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	061b      	lsls	r3, r3, #24
 8006a02:	494e      	ldr	r1, [pc, #312]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	604b      	str	r3, [r1, #4]
 8006a08:	e018      	b.n	8006a3c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a0a:	4b4c      	ldr	r3, [pc, #304]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a4b      	ldr	r2, [pc, #300]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a16:	f7fd fc63 	bl	80042e0 <HAL_GetTick>
 8006a1a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a1e:	f7fd fc5f 	bl	80042e0 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e2a3      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a30:	4b42      	ldr	r3, [pc, #264]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f0      	bne.n	8006a1e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8082 	beq.w	8006b4e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d05f      	beq.n	8006b12 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8006a52:	4b3a      	ldr	r3, [pc, #232]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a58:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d037      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d006      	beq.n	8006a80 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e27b      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01b      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8006a8a:	4b2c      	ldr	r3, [pc, #176]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a90:	4a2a      	ldr	r2, [pc, #168]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a9a:	f7fd fc21 	bl	80042e0 <HAL_GetTick>
 8006a9e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aa2:	f7fd fc1d 	bl	80042e0 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b11      	cmp	r3, #17
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e261      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ab4:	4b21      	ldr	r3, [pc, #132]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1ef      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006ac2:	4b1e      	ldr	r3, [pc, #120]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac8:	f023 0210 	bic.w	r2, r3, #16
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	491a      	ldr	r1, [pc, #104]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ad8:	4b18      	ldr	r3, [pc, #96]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ade:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006ae0:	f043 0301 	orr.w	r3, r3, #1
 8006ae4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae8:	f7fd fbfa 	bl	80042e0 <HAL_GetTick>
 8006aec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af0:	f7fd fbf6 	bl	80042e0 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b11      	cmp	r3, #17
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e23a      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b02:	4b0e      	ldr	r3, [pc, #56]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0ef      	beq.n	8006af0 <HAL_RCC_OscConfig+0x478>
 8006b10:	e01d      	b.n	8006b4e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b12:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b18:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <HAL_RCC_OscConfig+0x4c4>)
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b22:	f7fd fbdd 	bl	80042e0 <HAL_GetTick>
 8006b26:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b28:	e00a      	b.n	8006b40 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b2a:	f7fd fbd9 	bl	80042e0 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b11      	cmp	r3, #17
 8006b36:	d903      	bls.n	8006b40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e21d      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
 8006b3c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b40:	4b83      	ldr	r3, [pc, #524]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1ed      	bne.n	8006b2a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80bd 	beq.w	8006cd6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006b62:	4b7b      	ldr	r3, [pc, #492]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10e      	bne.n	8006b8c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b6e:	4b78      	ldr	r3, [pc, #480]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b72:	4a77      	ldr	r2, [pc, #476]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b78:	6593      	str	r3, [r2, #88]	; 0x58
 8006b7a:	4b75      	ldr	r3, [pc, #468]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b8c:	4b71      	ldr	r3, [pc, #452]	; (8006d54 <HAL_RCC_OscConfig+0x6dc>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d118      	bne.n	8006bca <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b98:	4b6e      	ldr	r3, [pc, #440]	; (8006d54 <HAL_RCC_OscConfig+0x6dc>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a6d      	ldr	r2, [pc, #436]	; (8006d54 <HAL_RCC_OscConfig+0x6dc>)
 8006b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ba4:	f7fd fb9c 	bl	80042e0 <HAL_GetTick>
 8006ba8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bac:	f7fd fb98 	bl	80042e0 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e1dc      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bbe:	4b65      	ldr	r3, [pc, #404]	; (8006d54 <HAL_RCC_OscConfig+0x6dc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02c      	beq.n	8006c30 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8006bd6:	4b5e      	ldr	r3, [pc, #376]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bdc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be8:	4959      	ldr	r1, [pc, #356]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d010      	beq.n	8006c1e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006bfc:	4b54      	ldr	r3, [pc, #336]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c02:	4a53      	ldr	r2, [pc, #332]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006c04:	f043 0304 	orr.w	r3, r3, #4
 8006c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c0c:	4b50      	ldr	r3, [pc, #320]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c12:	4a4f      	ldr	r2, [pc, #316]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c1c:	e018      	b.n	8006c50 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c1e:	4b4c      	ldr	r3, [pc, #304]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c24:	4a4a      	ldr	r2, [pc, #296]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c2e:	e00f      	b.n	8006c50 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c30:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c36:	4a46      	ldr	r2, [pc, #280]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006c40:	4b43      	ldr	r3, [pc, #268]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c46:	4a42      	ldr	r2, [pc, #264]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006c48:	f023 0304 	bic.w	r3, r3, #4
 8006c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d016      	beq.n	8006c86 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c58:	f7fd fb42 	bl	80042e0 <HAL_GetTick>
 8006c5c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c5e:	e00a      	b.n	8006c76 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c60:	f7fd fb3e 	bl	80042e0 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e180      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c76:	4b36      	ldr	r3, [pc, #216]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0ed      	beq.n	8006c60 <HAL_RCC_OscConfig+0x5e8>
 8006c84:	e01d      	b.n	8006cc2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c86:	f7fd fb2b 	bl	80042e0 <HAL_GetTick>
 8006c8a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c8c:	e00a      	b.n	8006ca4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c8e:	f7fd fb27 	bl	80042e0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e169      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ca4:	4b2a      	ldr	r3, [pc, #168]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1ed      	bne.n	8006c8e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8006cb2:	4b27      	ldr	r3, [pc, #156]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb8:	4a25      	ldr	r2, [pc, #148]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d105      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cca:	4b21      	ldr	r3, [pc, #132]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cce:	4a20      	ldr	r2, [pc, #128]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d041      	beq.n	8006d66 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01c      	beq.n	8006d24 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cea:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cf0:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfa:	f7fd faf1 	bl	80042e0 <HAL_GetTick>
 8006cfe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d00:	e008      	b.n	8006d14 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d02:	f7fd faed 	bl	80042e0 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d901      	bls.n	8006d14 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e131      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d14:	4b0e      	ldr	r3, [pc, #56]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0ef      	beq.n	8006d02 <HAL_RCC_OscConfig+0x68a>
 8006d22:	e020      	b.n	8006d66 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d24:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d2a:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <HAL_RCC_OscConfig+0x6d8>)
 8006d2c:	f023 0301 	bic.w	r3, r3, #1
 8006d30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d34:	f7fd fad4 	bl	80042e0 <HAL_GetTick>
 8006d38:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d3a:	e00d      	b.n	8006d58 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d3c:	f7fd fad0 	bl	80042e0 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d906      	bls.n	8006d58 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e114      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
 8006d4e:	bf00      	nop
 8006d50:	40021000 	.word	0x40021000
 8006d54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d58:	4b89      	ldr	r3, [pc, #548]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1ea      	bne.n	8006d3c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 8103 	beq.w	8006f76 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	f040 80cb 	bne.w	8006f10 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006d7a:	4b81      	ldr	r3, [pc, #516]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f003 0203 	and.w	r2, r3, #3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d12c      	bne.n	8006de8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d123      	bne.n	8006de8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d11b      	bne.n	8006de8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d113      	bne.n	8006de8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	085b      	lsrs	r3, r3, #1
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d109      	bne.n	8006de8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	3b01      	subs	r3, #1
 8006de2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d06d      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	2b0c      	cmp	r3, #12
 8006dec:	d068      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006dee:	4b64      	ldr	r3, [pc, #400]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006dfa:	4b61      	ldr	r3, [pc, #388]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e0b6      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e0a:	4b5d      	ldr	r3, [pc, #372]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a5c      	ldr	r2, [pc, #368]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e16:	f7fd fa63 	bl	80042e0 <HAL_GetTick>
 8006e1a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e1e:	f7fd fa5f 	bl	80042e0 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e0a3      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e30:	4b53      	ldr	r3, [pc, #332]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f0      	bne.n	8006e1e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e3c:	4b50      	ldr	r3, [pc, #320]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	4b50      	ldr	r3, [pc, #320]	; (8006f84 <HAL_RCC_OscConfig+0x90c>)
 8006e42:	4013      	ands	r3, r2
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e4c:	3a01      	subs	r2, #1
 8006e4e:	0112      	lsls	r2, r2, #4
 8006e50:	4311      	orrs	r1, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e56:	0212      	lsls	r2, r2, #8
 8006e58:	4311      	orrs	r1, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e5e:	0852      	lsrs	r2, r2, #1
 8006e60:	3a01      	subs	r2, #1
 8006e62:	0552      	lsls	r2, r2, #21
 8006e64:	4311      	orrs	r1, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006e6a:	0852      	lsrs	r2, r2, #1
 8006e6c:	3a01      	subs	r2, #1
 8006e6e:	0652      	lsls	r2, r2, #25
 8006e70:	4311      	orrs	r1, r2
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e76:	06d2      	lsls	r2, r2, #27
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	4941      	ldr	r1, [pc, #260]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006e80:	4b3f      	ldr	r3, [pc, #252]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a3e      	ldr	r2, [pc, #248]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e8c:	4b3c      	ldr	r3, [pc, #240]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	4a3b      	ldr	r2, [pc, #236]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e98:	f7fd fa22 	bl	80042e0 <HAL_GetTick>
 8006e9c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea0:	f7fd fa1e 	bl	80042e0 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e062      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eb2:	4b33      	ldr	r3, [pc, #204]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ebe:	e05a      	b.n	8006f76 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e059      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ec4:	4b2e      	ldr	r3, [pc, #184]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d152      	bne.n	8006f76 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006ed0:	4b2b      	ldr	r3, [pc, #172]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a2a      	ldr	r2, [pc, #168]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006edc:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4a27      	ldr	r2, [pc, #156]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ee6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ee8:	f7fd f9fa 	bl	80042e0 <HAL_GetTick>
 8006eec:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fd f9f6 	bl	80042e0 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e03a      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f02:	4b1f      	ldr	r3, [pc, #124]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0f0      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x878>
 8006f0e:	e032      	b.n	8006f76 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	2b0c      	cmp	r3, #12
 8006f14:	d02d      	beq.n	8006f72 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f16:	4b1a      	ldr	r3, [pc, #104]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a19      	ldr	r2, [pc, #100]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f20:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006f22:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d105      	bne.n	8006f3a <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006f2e:	4b14      	ldr	r3, [pc, #80]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	4a13      	ldr	r2, [pc, #76]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006f34:	f023 0303 	bic.w	r3, r3, #3
 8006f38:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006f40:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f48:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4a:	f7fd f9c9 	bl	80042e0 <HAL_GetTick>
 8006f4e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f50:	e008      	b.n	8006f64 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f52:	f7fd f9c5 	bl	80042e0 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e009      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <HAL_RCC_OscConfig+0x908>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1f0      	bne.n	8006f52 <HAL_RCC_OscConfig+0x8da>
 8006f70:	e001      	b.n	8006f76 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3728      	adds	r7, #40	; 0x28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40021000 	.word	0x40021000
 8006f84:	019d800c 	.word	0x019d800c

08006f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f92:	2300      	movs	r3, #0
 8006f94:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e10f      	b.n	80071c0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fa0:	4b89      	ldr	r3, [pc, #548]	; (80071c8 <HAL_RCC_ClockConfig+0x240>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d910      	bls.n	8006fd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fae:	4b86      	ldr	r3, [pc, #536]	; (80071c8 <HAL_RCC_ClockConfig+0x240>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f023 020f 	bic.w	r2, r3, #15
 8006fb6:	4984      	ldr	r1, [pc, #528]	; (80071c8 <HAL_RCC_ClockConfig+0x240>)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fbe:	4b82      	ldr	r3, [pc, #520]	; (80071c8 <HAL_RCC_ClockConfig+0x240>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d001      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0f7      	b.n	80071c0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 8089 	beq.w	80070f0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d133      	bne.n	800704e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fe6:	4b79      	ldr	r3, [pc, #484]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e0e4      	b.n	80071c0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006ff6:	f000 f9d9 	bl	80073ac <RCC_GetSysClockFreqFromPLLSource>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	4a74      	ldr	r2, [pc, #464]	; (80071d0 <HAL_RCC_ClockConfig+0x248>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d955      	bls.n	80070ae <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007002:	4b72      	ldr	r3, [pc, #456]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800700e:	4b6f      	ldr	r3, [pc, #444]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007016:	4a6d      	ldr	r2, [pc, #436]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8007018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800701e:	2380      	movs	r3, #128	; 0x80
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	e044      	b.n	80070ae <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d03e      	beq.n	80070ae <HAL_RCC_ClockConfig+0x126>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d13a      	bne.n	80070ae <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007038:	4b64      	ldr	r3, [pc, #400]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007040:	4a62      	ldr	r2, [pc, #392]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8007042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007046:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e02f      	b.n	80070ae <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b02      	cmp	r3, #2
 8007054:	d107      	bne.n	8007066 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007056:	4b5d      	ldr	r3, [pc, #372]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d115      	bne.n	800708e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e0ac      	b.n	80071c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d107      	bne.n	800707e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800706e:	4b57      	ldr	r3, [pc, #348]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e0a0      	b.n	80071c0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800707e:	4b53      	ldr	r3, [pc, #332]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e098      	b.n	80071c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800708e:	f000 f8a7 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8007092:	4603      	mov	r3, r0
 8007094:	4a4e      	ldr	r2, [pc, #312]	; (80071d0 <HAL_RCC_ClockConfig+0x248>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d909      	bls.n	80070ae <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800709a:	4b4c      	ldr	r3, [pc, #304]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070a2:	4a4a      	ldr	r2, [pc, #296]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80070aa:	2380      	movs	r3, #128	; 0x80
 80070ac:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070ae:	4b47      	ldr	r3, [pc, #284]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f023 0203 	bic.w	r2, r3, #3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	4944      	ldr	r1, [pc, #272]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c0:	f7fd f90e 	bl	80042e0 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c6:	e00a      	b.n	80070de <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070c8:	f7fd f90a 	bl	80042e0 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e070      	b.n	80071c0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070de:	4b3b      	ldr	r3, [pc, #236]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 020c 	and.w	r2, r3, #12
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d1eb      	bne.n	80070c8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d009      	beq.n	8007110 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070fc:	4b33      	ldr	r3, [pc, #204]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	4930      	ldr	r1, [pc, #192]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 800710a:	4313      	orrs	r3, r2
 800710c:	608b      	str	r3, [r1, #8]
 800710e:	e008      	b.n	8007122 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b80      	cmp	r3, #128	; 0x80
 8007114:	d105      	bne.n	8007122 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007116:	4b2d      	ldr	r3, [pc, #180]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	4a2c      	ldr	r2, [pc, #176]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 800711c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007120:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007122:	4b29      	ldr	r3, [pc, #164]	; (80071c8 <HAL_RCC_ClockConfig+0x240>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d210      	bcs.n	8007152 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007130:	4b25      	ldr	r3, [pc, #148]	; (80071c8 <HAL_RCC_ClockConfig+0x240>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f023 020f 	bic.w	r2, r3, #15
 8007138:	4923      	ldr	r1, [pc, #140]	; (80071c8 <HAL_RCC_ClockConfig+0x240>)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	4313      	orrs	r3, r2
 800713e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007140:	4b21      	ldr	r3, [pc, #132]	; (80071c8 <HAL_RCC_ClockConfig+0x240>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d001      	beq.n	8007152 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e036      	b.n	80071c0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d008      	beq.n	8007170 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800715e:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	4918      	ldr	r1, [pc, #96]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 800716c:	4313      	orrs	r3, r2
 800716e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800717c:	4b13      	ldr	r3, [pc, #76]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	4910      	ldr	r1, [pc, #64]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 800718c:	4313      	orrs	r3, r2
 800718e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007190:	f000 f826 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8007194:	4602      	mov	r2, r0
 8007196:	4b0d      	ldr	r3, [pc, #52]	; (80071cc <HAL_RCC_ClockConfig+0x244>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	091b      	lsrs	r3, r3, #4
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	490c      	ldr	r1, [pc, #48]	; (80071d4 <HAL_RCC_ClockConfig+0x24c>)
 80071a2:	5ccb      	ldrb	r3, [r1, r3]
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ac:	4a0a      	ldr	r2, [pc, #40]	; (80071d8 <HAL_RCC_ClockConfig+0x250>)
 80071ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80071b0:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <HAL_RCC_ClockConfig+0x254>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fd f843 	bl	8004240 <HAL_InitTick>
 80071ba:	4603      	mov	r3, r0
 80071bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80071be:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40022000 	.word	0x40022000
 80071cc:	40021000 	.word	0x40021000
 80071d0:	04c4b400 	.word	0x04c4b400
 80071d4:	0800841c 	.word	0x0800841c
 80071d8:	20000210 	.word	0x20000210
 80071dc:	20000214 	.word	0x20000214

080071e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b089      	sub	sp, #36	; 0x24
 80071e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	2300      	movs	r3, #0
 80071ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ee:	4b3e      	ldr	r3, [pc, #248]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 030c 	and.w	r3, r3, #12
 80071f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071f8:	4b3b      	ldr	r3, [pc, #236]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <HAL_RCC_GetSysClockFreq+0x34>
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b0c      	cmp	r3, #12
 800720c:	d121      	bne.n	8007252 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d11e      	bne.n	8007252 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007214:	4b34      	ldr	r3, [pc, #208]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d107      	bne.n	8007230 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007220:	4b31      	ldr	r3, [pc, #196]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	e005      	b.n	800723c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007230:	4b2d      	ldr	r3, [pc, #180]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	091b      	lsrs	r3, r3, #4
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800723c:	4a2b      	ldr	r2, [pc, #172]	; (80072ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007244:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10d      	bne.n	8007268 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007250:	e00a      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b04      	cmp	r3, #4
 8007256:	d102      	bne.n	800725e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007258:	4b25      	ldr	r3, [pc, #148]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	e004      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d101      	bne.n	8007268 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007264:	4b23      	ldr	r3, [pc, #140]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007266:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b0c      	cmp	r3, #12
 800726c:	d134      	bne.n	80072d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800726e:	4b1e      	ldr	r3, [pc, #120]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d003      	beq.n	8007286 <HAL_RCC_GetSysClockFreq+0xa6>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b03      	cmp	r3, #3
 8007282:	d003      	beq.n	800728c <HAL_RCC_GetSysClockFreq+0xac>
 8007284:	e005      	b.n	8007292 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007286:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007288:	617b      	str	r3, [r7, #20]
      break;
 800728a:	e005      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800728c:	4b19      	ldr	r3, [pc, #100]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800728e:	617b      	str	r3, [r7, #20]
      break;
 8007290:	e002      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	617b      	str	r3, [r7, #20]
      break;
 8007296:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	091b      	lsrs	r3, r3, #4
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	3301      	adds	r3, #1
 80072a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80072a6:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	fb03 f202 	mul.w	r2, r3, r2
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072be:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	0e5b      	lsrs	r3, r3, #25
 80072c4:	f003 0303 	and.w	r3, r3, #3
 80072c8:	3301      	adds	r3, #1
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80072d8:	69bb      	ldr	r3, [r7, #24]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3724      	adds	r7, #36	; 0x24
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40021000 	.word	0x40021000
 80072ec:	0800842c 	.word	0x0800842c
 80072f0:	00f42400 	.word	0x00f42400
 80072f4:	007a1200 	.word	0x007a1200

080072f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007300:	2300      	movs	r3, #0
 8007302:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007304:	4b27      	ldr	r3, [pc, #156]	; (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007310:	f7ff f8ee 	bl	80064f0 <HAL_PWREx_GetVoltageRange>
 8007314:	6178      	str	r0, [r7, #20]
 8007316:	e014      	b.n	8007342 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007318:	4b22      	ldr	r3, [pc, #136]	; (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800731a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800731c:	4a21      	ldr	r2, [pc, #132]	; (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800731e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007322:	6593      	str	r3, [r2, #88]	; 0x58
 8007324:	4b1f      	ldr	r3, [pc, #124]	; (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007330:	f7ff f8de 	bl	80064f0 <HAL_PWREx_GetVoltageRange>
 8007334:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007336:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733a:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800733c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007340:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007348:	d10b      	bne.n	8007362 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b80      	cmp	r3, #128	; 0x80
 800734e:	d913      	bls.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2ba0      	cmp	r3, #160	; 0xa0
 8007354:	d902      	bls.n	800735c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007356:	2302      	movs	r3, #2
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	e00d      	b.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800735c:	2301      	movs	r3, #1
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	e00a      	b.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b7f      	cmp	r3, #127	; 0x7f
 8007366:	d902      	bls.n	800736e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007368:	2302      	movs	r3, #2
 800736a:	613b      	str	r3, [r7, #16]
 800736c:	e004      	b.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b70      	cmp	r3, #112	; 0x70
 8007372:	d101      	bne.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007374:	2301      	movs	r3, #1
 8007376:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007378:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f023 020f 	bic.w	r2, r3, #15
 8007380:	4909      	ldr	r1, [pc, #36]	; (80073a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 030f 	and.w	r3, r3, #15
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	429a      	cmp	r2, r3
 8007394:	d001      	beq.n	800739a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40021000 	.word	0x40021000
 80073a8:	40022000 	.word	0x40022000

080073ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80073b6:	4b2d      	ldr	r3, [pc, #180]	; (800746c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d118      	bne.n	80073f4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80073c2:	4b2a      	ldr	r3, [pc, #168]	; (800746c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d107      	bne.n	80073de <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80073ce:	4b27      	ldr	r3, [pc, #156]	; (800746c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80073d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d4:	0a1b      	lsrs	r3, r3, #8
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	e005      	b.n	80073ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80073de:	4b23      	ldr	r3, [pc, #140]	; (800746c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	091b      	lsrs	r3, r3, #4
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80073ea:	4a21      	ldr	r2, [pc, #132]	; (8007470 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073f4:	4b1d      	ldr	r3, [pc, #116]	; (800746c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d003      	beq.n	800740c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b03      	cmp	r3, #3
 8007408:	d003      	beq.n	8007412 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800740a:	e005      	b.n	8007418 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800740c:	4b19      	ldr	r3, [pc, #100]	; (8007474 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800740e:	613b      	str	r3, [r7, #16]
    break;
 8007410:	e005      	b.n	800741e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007412:	4b19      	ldr	r3, [pc, #100]	; (8007478 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007414:	613b      	str	r3, [r7, #16]
    break;
 8007416:	e002      	b.n	800741e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	613b      	str	r3, [r7, #16]
    break;
 800741c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	091b      	lsrs	r3, r3, #4
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	3301      	adds	r3, #1
 800742a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800742c:	4b0f      	ldr	r3, [pc, #60]	; (800746c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	0a1b      	lsrs	r3, r3, #8
 8007432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	fb03 f202 	mul.w	r2, r3, r2
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007442:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007444:	4b09      	ldr	r3, [pc, #36]	; (800746c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	0e5b      	lsrs	r3, r3, #25
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	3301      	adds	r3, #1
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	fbb2 f3f3 	udiv	r3, r2, r3
 800745c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800745e:	683b      	ldr	r3, [r7, #0]
}
 8007460:	4618      	mov	r0, r3
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	40021000 	.word	0x40021000
 8007470:	0800842c 	.word	0x0800842c
 8007474:	00f42400 	.word	0x00f42400
 8007478:	007a1200 	.word	0x007a1200

0800747c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007484:	2300      	movs	r3, #0
 8007486:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007488:	2300      	movs	r3, #0
 800748a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007494:	2b00      	cmp	r3, #0
 8007496:	d040      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749c:	2b80      	cmp	r3, #128	; 0x80
 800749e:	d02a      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80074a0:	2b80      	cmp	r3, #128	; 0x80
 80074a2:	d825      	bhi.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80074a4:	2b60      	cmp	r3, #96	; 0x60
 80074a6:	d026      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80074a8:	2b60      	cmp	r3, #96	; 0x60
 80074aa:	d821      	bhi.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80074ac:	2b40      	cmp	r3, #64	; 0x40
 80074ae:	d006      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x42>
 80074b0:	2b40      	cmp	r3, #64	; 0x40
 80074b2:	d81d      	bhi.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d009      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d010      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x62>
 80074bc:	e018      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80074be:	4b89      	ldr	r3, [pc, #548]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	4a88      	ldr	r2, [pc, #544]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074ca:	e015      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3304      	adds	r3, #4
 80074d0:	2100      	movs	r1, #0
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 fb3e 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 80074d8:	4603      	mov	r3, r0
 80074da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074dc:	e00c      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3320      	adds	r3, #32
 80074e2:	2100      	movs	r1, #0
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fc29 	bl	8007d3c <RCCEx_PLLSAI2_Config>
 80074ea:	4603      	mov	r3, r0
 80074ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074ee:	e003      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	74fb      	strb	r3, [r7, #19]
      break;
 80074f4:	e000      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80074f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074f8:	7cfb      	ldrb	r3, [r7, #19]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074fe:	4b79      	ldr	r3, [pc, #484]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007500:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007504:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800750c:	4975      	ldr	r1, [pc, #468]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800750e:	4313      	orrs	r3, r2
 8007510:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007514:	e001      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007516:	7cfb      	ldrb	r3, [r7, #19]
 8007518:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d047      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752e:	d030      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007534:	d82a      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800753a:	d02a      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800753c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007540:	d824      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007546:	d008      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800754c:	d81e      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007556:	d010      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007558:	e018      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800755a:	4b62      	ldr	r3, [pc, #392]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	4a61      	ldr	r2, [pc, #388]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007564:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007566:	e015      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	2100      	movs	r1, #0
 800756e:	4618      	mov	r0, r3
 8007570:	f000 faf0 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007578:	e00c      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3320      	adds	r3, #32
 800757e:	2100      	movs	r1, #0
 8007580:	4618      	mov	r0, r3
 8007582:	f000 fbdb 	bl	8007d3c <RCCEx_PLLSAI2_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800758a:	e003      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	74fb      	strb	r3, [r7, #19]
      break;
 8007590:	e000      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007594:	7cfb      	ldrb	r3, [r7, #19]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10b      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800759a:	4b52      	ldr	r3, [pc, #328]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800759c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a8:	494e      	ldr	r1, [pc, #312]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80075b0:	e001      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b2:	7cfb      	ldrb	r3, [r7, #19]
 80075b4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 809f 	beq.w	8007702 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075c4:	2300      	movs	r3, #0
 80075c6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80075c8:	4b46      	ldr	r3, [pc, #280]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80075d8:	2300      	movs	r3, #0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075de:	4b41      	ldr	r3, [pc, #260]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e2:	4a40      	ldr	r2, [pc, #256]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e8:	6593      	str	r3, [r2, #88]	; 0x58
 80075ea:	4b3e      	ldr	r3, [pc, #248]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f2:	60bb      	str	r3, [r7, #8]
 80075f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075f6:	2301      	movs	r3, #1
 80075f8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075fa:	4b3b      	ldr	r3, [pc, #236]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a3a      	ldr	r2, [pc, #232]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007604:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007606:	f7fc fe6b 	bl	80042e0 <HAL_GetTick>
 800760a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800760c:	e009      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800760e:	f7fc fe67 	bl	80042e0 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d902      	bls.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	74fb      	strb	r3, [r7, #19]
        break;
 8007620:	e005      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007622:	4b31      	ldr	r3, [pc, #196]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0ef      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800762e:	7cfb      	ldrb	r3, [r7, #19]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d15b      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007634:	4b2b      	ldr	r3, [pc, #172]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800763e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01f      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	429a      	cmp	r2, r3
 8007650:	d019      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007652:	4b24      	ldr	r3, [pc, #144]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800765c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800765e:	4b21      	ldr	r3, [pc, #132]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007664:	4a1f      	ldr	r2, [pc, #124]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800766a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800766e:	4b1d      	ldr	r3, [pc, #116]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007674:	4a1b      	ldr	r2, [pc, #108]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800767a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800767e:	4a19      	ldr	r2, [pc, #100]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d016      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007690:	f7fc fe26 	bl	80042e0 <HAL_GetTick>
 8007694:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007696:	e00b      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007698:	f7fc fe22 	bl	80042e0 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d902      	bls.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	74fb      	strb	r3, [r7, #19]
            break;
 80076ae:	e006      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076b0:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0ec      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80076be:	7cfb      	ldrb	r3, [r7, #19]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10c      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076c4:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076d4:	4903      	ldr	r1, [pc, #12]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80076dc:	e008      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076de:	7cfb      	ldrb	r3, [r7, #19]
 80076e0:	74bb      	strb	r3, [r7, #18]
 80076e2:	e005      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80076e4:	40021000 	.word	0x40021000
 80076e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ec:	7cfb      	ldrb	r3, [r7, #19]
 80076ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076f0:	7c7b      	ldrb	r3, [r7, #17]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d105      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076f6:	4ba0      	ldr	r3, [pc, #640]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fa:	4a9f      	ldr	r2, [pc, #636]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007700:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800770e:	4b9a      	ldr	r3, [pc, #616]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007714:	f023 0203 	bic.w	r2, r3, #3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	4996      	ldr	r1, [pc, #600]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800771e:	4313      	orrs	r3, r2
 8007720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00a      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007730:	4b91      	ldr	r3, [pc, #580]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007736:	f023 020c 	bic.w	r2, r3, #12
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	498e      	ldr	r1, [pc, #568]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007740:	4313      	orrs	r3, r2
 8007742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00a      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007752:	4b89      	ldr	r3, [pc, #548]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007758:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007760:	4985      	ldr	r1, [pc, #532]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00a      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007774:	4b80      	ldr	r3, [pc, #512]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007782:	497d      	ldr	r1, [pc, #500]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007784:	4313      	orrs	r3, r2
 8007786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0310 	and.w	r3, r3, #16
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007796:	4b78      	ldr	r3, [pc, #480]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a4:	4974      	ldr	r1, [pc, #464]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00a      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077b8:	4b6f      	ldr	r3, [pc, #444]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c6:	496c      	ldr	r1, [pc, #432]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00a      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077da:	4b67      	ldr	r3, [pc, #412]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077e8:	4963      	ldr	r1, [pc, #396]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077fc:	4b5e      	ldr	r3, [pc, #376]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800780a:	495b      	ldr	r1, [pc, #364]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800780c:	4313      	orrs	r3, r2
 800780e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800781e:	4b56      	ldr	r3, [pc, #344]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007824:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782c:	4952      	ldr	r1, [pc, #328]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800782e:	4313      	orrs	r3, r2
 8007830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007840:	4b4d      	ldr	r3, [pc, #308]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007846:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784e:	494a      	ldr	r1, [pc, #296]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007850:	4313      	orrs	r3, r2
 8007852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007862:	4b45      	ldr	r3, [pc, #276]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007870:	4941      	ldr	r1, [pc, #260]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007872:	4313      	orrs	r3, r2
 8007874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007884:	4b3c      	ldr	r3, [pc, #240]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007886:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800788a:	f023 0203 	bic.w	r2, r3, #3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007892:	4939      	ldr	r1, [pc, #228]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007894:	4313      	orrs	r3, r2
 8007896:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d028      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078a6:	4b34      	ldr	r3, [pc, #208]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b4:	4930      	ldr	r1, [pc, #192]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078c4:	d106      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078c6:	4b2c      	ldr	r3, [pc, #176]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	4a2b      	ldr	r2, [pc, #172]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078d0:	60d3      	str	r3, [r2, #12]
 80078d2:	e011      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078dc:	d10c      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3304      	adds	r3, #4
 80078e2:	2101      	movs	r1, #1
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 f935 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 80078ea:	4603      	mov	r3, r0
 80078ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80078ee:	7cfb      	ldrb	r3, [r7, #19]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80078f4:	7cfb      	ldrb	r3, [r7, #19]
 80078f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d04d      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800790c:	d108      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800790e:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007914:	4a18      	ldr	r2, [pc, #96]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800791a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800791e:	e012      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007920:	4b15      	ldr	r3, [pc, #84]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007922:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007926:	4a14      	ldr	r2, [pc, #80]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800792c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007930:	4b11      	ldr	r3, [pc, #68]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800793e:	490e      	ldr	r1, [pc, #56]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007940:	4313      	orrs	r3, r2
 8007942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800794a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800794e:	d106      	bne.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007950:	4b09      	ldr	r3, [pc, #36]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	4a08      	ldr	r2, [pc, #32]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800795a:	60d3      	str	r3, [r2, #12]
 800795c:	e020      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007966:	d109      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007968:	4b03      	ldr	r3, [pc, #12]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	4a02      	ldr	r2, [pc, #8]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800796e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007972:	60d3      	str	r3, [r2, #12]
 8007974:	e014      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007976:	bf00      	nop
 8007978:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007980:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007984:	d10c      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3304      	adds	r3, #4
 800798a:	2101      	movs	r1, #1
 800798c:	4618      	mov	r0, r3
 800798e:	f000 f8e1 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007996:	7cfb      	ldrb	r3, [r7, #19]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800799c:	7cfb      	ldrb	r3, [r7, #19]
 800799e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d028      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079ac:	4b68      	ldr	r3, [pc, #416]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80079ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ba:	4965      	ldr	r1, [pc, #404]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079ca:	d106      	bne.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079cc:	4b60      	ldr	r3, [pc, #384]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	4a5f      	ldr	r2, [pc, #380]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80079d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079d6:	60d3      	str	r3, [r2, #12]
 80079d8:	e011      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079e2:	d10c      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3304      	adds	r3, #4
 80079e8:	2101      	movs	r1, #1
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 f8b2 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079f4:	7cfb      	ldrb	r3, [r7, #19]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80079fa:	7cfb      	ldrb	r3, [r7, #19]
 80079fc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d01e      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a0a:	4b51      	ldr	r3, [pc, #324]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a1a:	494d      	ldr	r1, [pc, #308]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a2c:	d10c      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3304      	adds	r3, #4
 8007a32:	2102      	movs	r1, #2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 f88d 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a3e:	7cfb      	ldrb	r3, [r7, #19]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007a44:	7cfb      	ldrb	r3, [r7, #19]
 8007a46:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a54:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a5a:	f023 0204 	bic.w	r2, r3, #4
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a64:	493a      	ldr	r1, [pc, #232]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007a78:	4b35      	ldr	r3, [pc, #212]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a7e:	f023 0218 	bic.w	r2, r3, #24
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a88:	4931      	ldr	r1, [pc, #196]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d035      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007a9c:	4b2c      	ldr	r3, [pc, #176]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a2b      	ldr	r2, [pc, #172]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aa8:	f7fc fc1a 	bl	80042e0 <HAL_GetTick>
 8007aac:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007aae:	e009      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ab0:	f7fc fc16 	bl	80042e0 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d902      	bls.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	74fb      	strb	r3, [r7, #19]
        break;
 8007ac2:	e005      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ac4:	4b22      	ldr	r3, [pc, #136]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1ef      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8007ad0:	7cfb      	ldrb	r3, [r7, #19]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d113      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8007ad6:	4b1e      	ldr	r3, [pc, #120]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007adc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae6:	491a      	ldr	r1, [pc, #104]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3320      	adds	r3, #32
 8007af2:	2102      	movs	r1, #2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 f921 	bl	8007d3c <RCCEx_PLLSAI2_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8007afe:	7cfb      	ldrb	r3, [r7, #19]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8007b04:	7cfb      	ldrb	r3, [r7, #19]
 8007b06:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d017      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007b14:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b24:	490a      	ldr	r1, [pc, #40]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b36:	d105      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	4a04      	ldr	r2, [pc, #16]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007b44:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	40021000 	.word	0x40021000

08007b54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b62:	4b72      	ldr	r3, [pc, #456]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00e      	beq.n	8007b8c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007b6e:	4b6f      	ldr	r3, [pc, #444]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	f003 0203 	and.w	r2, r3, #3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d103      	bne.n	8007b86 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
       ||
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d142      	bne.n	8007c0c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	73fb      	strb	r3, [r7, #15]
 8007b8a:	e03f      	b.n	8007c0c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d018      	beq.n	8007bc6 <RCCEx_PLLSAI1_Config+0x72>
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d825      	bhi.n	8007be4 <RCCEx_PLLSAI1_Config+0x90>
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d002      	beq.n	8007ba2 <RCCEx_PLLSAI1_Config+0x4e>
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d009      	beq.n	8007bb4 <RCCEx_PLLSAI1_Config+0x60>
 8007ba0:	e020      	b.n	8007be4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ba2:	4b62      	ldr	r3, [pc, #392]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d11d      	bne.n	8007bea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bb2:	e01a      	b.n	8007bea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007bb4:	4b5d      	ldr	r3, [pc, #372]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d116      	bne.n	8007bee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bc4:	e013      	b.n	8007bee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007bc6:	4b59      	ldr	r3, [pc, #356]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10f      	bne.n	8007bf2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007bd2:	4b56      	ldr	r3, [pc, #344]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007be2:	e006      	b.n	8007bf2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]
      break;
 8007be8:	e004      	b.n	8007bf4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007bea:	bf00      	nop
 8007bec:	e002      	b.n	8007bf4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007bee:	bf00      	nop
 8007bf0:	e000      	b.n	8007bf4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007bf2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d108      	bne.n	8007c0c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007bfa:	4b4c      	ldr	r3, [pc, #304]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f023 0203 	bic.w	r2, r3, #3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4949      	ldr	r1, [pc, #292]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f040 8086 	bne.w	8007d20 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007c14:	4b45      	ldr	r3, [pc, #276]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a44      	ldr	r2, [pc, #272]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c20:	f7fc fb5e 	bl	80042e0 <HAL_GetTick>
 8007c24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c26:	e009      	b.n	8007c3c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c28:	f7fc fb5a 	bl	80042e0 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d902      	bls.n	8007c3c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	73fb      	strb	r3, [r7, #15]
        break;
 8007c3a:	e005      	b.n	8007c48 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c3c:	4b3b      	ldr	r3, [pc, #236]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1ef      	bne.n	8007c28 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d168      	bne.n	8007d20 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d113      	bne.n	8007c7c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c54:	4b35      	ldr	r3, [pc, #212]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	4b35      	ldr	r3, [pc, #212]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6892      	ldr	r2, [r2, #8]
 8007c60:	0211      	lsls	r1, r2, #8
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68d2      	ldr	r2, [r2, #12]
 8007c66:	06d2      	lsls	r2, r2, #27
 8007c68:	4311      	orrs	r1, r2
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6852      	ldr	r2, [r2, #4]
 8007c6e:	3a01      	subs	r2, #1
 8007c70:	0112      	lsls	r2, r2, #4
 8007c72:	430a      	orrs	r2, r1
 8007c74:	492d      	ldr	r1, [pc, #180]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	610b      	str	r3, [r1, #16]
 8007c7a:	e02d      	b.n	8007cd8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d115      	bne.n	8007cae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c82:	4b2a      	ldr	r3, [pc, #168]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	4b2b      	ldr	r3, [pc, #172]	; (8007d34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6892      	ldr	r2, [r2, #8]
 8007c8e:	0211      	lsls	r1, r2, #8
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6912      	ldr	r2, [r2, #16]
 8007c94:	0852      	lsrs	r2, r2, #1
 8007c96:	3a01      	subs	r2, #1
 8007c98:	0552      	lsls	r2, r2, #21
 8007c9a:	4311      	orrs	r1, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6852      	ldr	r2, [r2, #4]
 8007ca0:	3a01      	subs	r2, #1
 8007ca2:	0112      	lsls	r2, r2, #4
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	4921      	ldr	r1, [pc, #132]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	610b      	str	r3, [r1, #16]
 8007cac:	e014      	b.n	8007cd8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cae:	4b1f      	ldr	r3, [pc, #124]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cb0:	691a      	ldr	r2, [r3, #16]
 8007cb2:	4b21      	ldr	r3, [pc, #132]	; (8007d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	6892      	ldr	r2, [r2, #8]
 8007cba:	0211      	lsls	r1, r2, #8
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6952      	ldr	r2, [r2, #20]
 8007cc0:	0852      	lsrs	r2, r2, #1
 8007cc2:	3a01      	subs	r2, #1
 8007cc4:	0652      	lsls	r2, r2, #25
 8007cc6:	4311      	orrs	r1, r2
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6852      	ldr	r2, [r2, #4]
 8007ccc:	3a01      	subs	r2, #1
 8007cce:	0112      	lsls	r2, r2, #4
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	4916      	ldr	r1, [pc, #88]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007cd8:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a13      	ldr	r2, [pc, #76]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ce2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce4:	f7fc fafc 	bl	80042e0 <HAL_GetTick>
 8007ce8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cea:	e009      	b.n	8007d00 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cec:	f7fc faf8 	bl	80042e0 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d902      	bls.n	8007d00 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	73fb      	strb	r3, [r7, #15]
          break;
 8007cfe:	e005      	b.n	8007d0c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0ef      	beq.n	8007cec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007d12:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d14:	691a      	ldr	r2, [r3, #16]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	4904      	ldr	r1, [pc, #16]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	40021000 	.word	0x40021000
 8007d30:	07ff800f 	.word	0x07ff800f
 8007d34:	ff9f800f 	.word	0xff9f800f
 8007d38:	f9ff800f 	.word	0xf9ff800f

08007d3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d4a:	4b72      	ldr	r3, [pc, #456]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00e      	beq.n	8007d74 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007d56:	4b6f      	ldr	r3, [pc, #444]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f003 0203 	and.w	r2, r3, #3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d103      	bne.n	8007d6e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
       ||
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d142      	bne.n	8007df4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	73fb      	strb	r3, [r7, #15]
 8007d72:	e03f      	b.n	8007df4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d018      	beq.n	8007dae <RCCEx_PLLSAI2_Config+0x72>
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d825      	bhi.n	8007dcc <RCCEx_PLLSAI2_Config+0x90>
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d002      	beq.n	8007d8a <RCCEx_PLLSAI2_Config+0x4e>
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d009      	beq.n	8007d9c <RCCEx_PLLSAI2_Config+0x60>
 8007d88:	e020      	b.n	8007dcc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d8a:	4b62      	ldr	r3, [pc, #392]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d11d      	bne.n	8007dd2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d9a:	e01a      	b.n	8007dd2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d9c:	4b5d      	ldr	r3, [pc, #372]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d116      	bne.n	8007dd6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dac:	e013      	b.n	8007dd6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007dae:	4b59      	ldr	r3, [pc, #356]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10f      	bne.n	8007dda <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007dba:	4b56      	ldr	r3, [pc, #344]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dca:	e006      	b.n	8007dda <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd0:	e004      	b.n	8007ddc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e002      	b.n	8007ddc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007dd6:	bf00      	nop
 8007dd8:	e000      	b.n	8007ddc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007dda:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d108      	bne.n	8007df4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007de2:	4b4c      	ldr	r3, [pc, #304]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f023 0203 	bic.w	r2, r3, #3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4949      	ldr	r1, [pc, #292]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 8086 	bne.w	8007f08 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007dfc:	4b45      	ldr	r3, [pc, #276]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a44      	ldr	r2, [pc, #272]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e08:	f7fc fa6a 	bl	80042e0 <HAL_GetTick>
 8007e0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e0e:	e009      	b.n	8007e24 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e10:	f7fc fa66 	bl	80042e0 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d902      	bls.n	8007e24 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	73fb      	strb	r3, [r7, #15]
        break;
 8007e22:	e005      	b.n	8007e30 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e24:	4b3b      	ldr	r3, [pc, #236]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1ef      	bne.n	8007e10 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d168      	bne.n	8007f08 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d113      	bne.n	8007e64 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e3c:	4b35      	ldr	r3, [pc, #212]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e3e:	695a      	ldr	r2, [r3, #20]
 8007e40:	4b35      	ldr	r3, [pc, #212]	; (8007f18 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6892      	ldr	r2, [r2, #8]
 8007e48:	0211      	lsls	r1, r2, #8
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	68d2      	ldr	r2, [r2, #12]
 8007e4e:	06d2      	lsls	r2, r2, #27
 8007e50:	4311      	orrs	r1, r2
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	6852      	ldr	r2, [r2, #4]
 8007e56:	3a01      	subs	r2, #1
 8007e58:	0112      	lsls	r2, r2, #4
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	492d      	ldr	r1, [pc, #180]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	614b      	str	r3, [r1, #20]
 8007e62:	e02d      	b.n	8007ec0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d115      	bne.n	8007e96 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e6a:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e6c:	695a      	ldr	r2, [r3, #20]
 8007e6e:	4b2b      	ldr	r3, [pc, #172]	; (8007f1c <RCCEx_PLLSAI2_Config+0x1e0>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6892      	ldr	r2, [r2, #8]
 8007e76:	0211      	lsls	r1, r2, #8
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6912      	ldr	r2, [r2, #16]
 8007e7c:	0852      	lsrs	r2, r2, #1
 8007e7e:	3a01      	subs	r2, #1
 8007e80:	0552      	lsls	r2, r2, #21
 8007e82:	4311      	orrs	r1, r2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6852      	ldr	r2, [r2, #4]
 8007e88:	3a01      	subs	r2, #1
 8007e8a:	0112      	lsls	r2, r2, #4
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	4921      	ldr	r1, [pc, #132]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	614b      	str	r3, [r1, #20]
 8007e94:	e014      	b.n	8007ec0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e96:	4b1f      	ldr	r3, [pc, #124]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	4b21      	ldr	r3, [pc, #132]	; (8007f20 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6892      	ldr	r2, [r2, #8]
 8007ea2:	0211      	lsls	r1, r2, #8
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6952      	ldr	r2, [r2, #20]
 8007ea8:	0852      	lsrs	r2, r2, #1
 8007eaa:	3a01      	subs	r2, #1
 8007eac:	0652      	lsls	r2, r2, #25
 8007eae:	4311      	orrs	r1, r2
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6852      	ldr	r2, [r2, #4]
 8007eb4:	3a01      	subs	r2, #1
 8007eb6:	0112      	lsls	r2, r2, #4
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	4916      	ldr	r1, [pc, #88]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007ec0:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a13      	ldr	r2, [pc, #76]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ecc:	f7fc fa08 	bl	80042e0 <HAL_GetTick>
 8007ed0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ed2:	e009      	b.n	8007ee8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ed4:	f7fc fa04 	bl	80042e0 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d902      	bls.n	8007ee8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	73fb      	strb	r3, [r7, #15]
          break;
 8007ee6:	e005      	b.n	8007ef4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0ef      	beq.n	8007ed4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	4904      	ldr	r1, [pc, #16]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	40021000 	.word	0x40021000
 8007f18:	07ff800f 	.word	0x07ff800f
 8007f1c:	ff9f800f 	.word	0xff9f800f
 8007f20:	f9ff800f 	.word	0xf9ff800f

08007f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e095      	b.n	8008062 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d108      	bne.n	8007f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f46:	d009      	beq.n	8007f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	61da      	str	r2, [r3, #28]
 8007f4e:	e005      	b.n	8007f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fc f802 	bl	8003f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f9c:	d902      	bls.n	8007fa4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	e002      	b.n	8007faa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fa8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007fb2:	d007      	beq.n	8007fc4 <HAL_SPI_Init+0xa0>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fbc:	d002      	beq.n	8007fc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008006:	ea42 0103 	orr.w	r1, r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	0c1b      	lsrs	r3, r3, #16
 8008020:	f003 0204 	and.w	r2, r3, #4
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	f003 0310 	and.w	r3, r3, #16
 800802c:	431a      	orrs	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008040:	ea42 0103 	orr.w	r1, r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <_ZdlPvj>:
 800806a:	f000 b800 	b.w	800806e <_ZdlPv>

0800806e <_ZdlPv>:
 800806e:	f000 b825 	b.w	80080bc <free>
	...

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4d0d      	ldr	r5, [pc, #52]	; (80080ac <__libc_init_array+0x38>)
 8008078:	4c0d      	ldr	r4, [pc, #52]	; (80080b0 <__libc_init_array+0x3c>)
 800807a:	1b64      	subs	r4, r4, r5
 800807c:	10a4      	asrs	r4, r4, #2
 800807e:	2600      	movs	r6, #0
 8008080:	42a6      	cmp	r6, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	4d0b      	ldr	r5, [pc, #44]	; (80080b4 <__libc_init_array+0x40>)
 8008086:	4c0c      	ldr	r4, [pc, #48]	; (80080b8 <__libc_init_array+0x44>)
 8008088:	f000 f890 	bl	80081ac <_init>
 800808c:	1b64      	subs	r4, r4, r5
 800808e:	10a4      	asrs	r4, r4, #2
 8008090:	2600      	movs	r6, #0
 8008092:	42a6      	cmp	r6, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	f855 3b04 	ldr.w	r3, [r5], #4
 800809c:	4798      	blx	r3
 800809e:	3601      	adds	r6, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a6:	4798      	blx	r3
 80080a8:	3601      	adds	r6, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	0800845c 	.word	0x0800845c
 80080b0:	0800845c 	.word	0x0800845c
 80080b4:	0800845c 	.word	0x0800845c
 80080b8:	08008464 	.word	0x08008464

080080bc <free>:
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <free+0xc>)
 80080be:	4601      	mov	r1, r0
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	f000 b819 	b.w	80080f8 <_free_r>
 80080c6:	bf00      	nop
 80080c8:	2000021c 	.word	0x2000021c

080080cc <memcpy>:
 80080cc:	440a      	add	r2, r1
 80080ce:	4291      	cmp	r1, r2
 80080d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080d4:	d100      	bne.n	80080d8 <memcpy+0xc>
 80080d6:	4770      	bx	lr
 80080d8:	b510      	push	{r4, lr}
 80080da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080e2:	4291      	cmp	r1, r2
 80080e4:	d1f9      	bne.n	80080da <memcpy+0xe>
 80080e6:	bd10      	pop	{r4, pc}

080080e8 <memset>:
 80080e8:	4402      	add	r2, r0
 80080ea:	4603      	mov	r3, r0
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d100      	bne.n	80080f2 <memset+0xa>
 80080f0:	4770      	bx	lr
 80080f2:	f803 1b01 	strb.w	r1, [r3], #1
 80080f6:	e7f9      	b.n	80080ec <memset+0x4>

080080f8 <_free_r>:
 80080f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080fa:	2900      	cmp	r1, #0
 80080fc:	d044      	beq.n	8008188 <_free_r+0x90>
 80080fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008102:	9001      	str	r0, [sp, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f1a1 0404 	sub.w	r4, r1, #4
 800810a:	bfb8      	it	lt
 800810c:	18e4      	addlt	r4, r4, r3
 800810e:	f000 f83f 	bl	8008190 <__malloc_lock>
 8008112:	4a1e      	ldr	r2, [pc, #120]	; (800818c <_free_r+0x94>)
 8008114:	9801      	ldr	r0, [sp, #4]
 8008116:	6813      	ldr	r3, [r2, #0]
 8008118:	b933      	cbnz	r3, 8008128 <_free_r+0x30>
 800811a:	6063      	str	r3, [r4, #4]
 800811c:	6014      	str	r4, [r2, #0]
 800811e:	b003      	add	sp, #12
 8008120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008124:	f000 b83a 	b.w	800819c <__malloc_unlock>
 8008128:	42a3      	cmp	r3, r4
 800812a:	d908      	bls.n	800813e <_free_r+0x46>
 800812c:	6825      	ldr	r5, [r4, #0]
 800812e:	1961      	adds	r1, r4, r5
 8008130:	428b      	cmp	r3, r1
 8008132:	bf01      	itttt	eq
 8008134:	6819      	ldreq	r1, [r3, #0]
 8008136:	685b      	ldreq	r3, [r3, #4]
 8008138:	1949      	addeq	r1, r1, r5
 800813a:	6021      	streq	r1, [r4, #0]
 800813c:	e7ed      	b.n	800811a <_free_r+0x22>
 800813e:	461a      	mov	r2, r3
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	b10b      	cbz	r3, 8008148 <_free_r+0x50>
 8008144:	42a3      	cmp	r3, r4
 8008146:	d9fa      	bls.n	800813e <_free_r+0x46>
 8008148:	6811      	ldr	r1, [r2, #0]
 800814a:	1855      	adds	r5, r2, r1
 800814c:	42a5      	cmp	r5, r4
 800814e:	d10b      	bne.n	8008168 <_free_r+0x70>
 8008150:	6824      	ldr	r4, [r4, #0]
 8008152:	4421      	add	r1, r4
 8008154:	1854      	adds	r4, r2, r1
 8008156:	42a3      	cmp	r3, r4
 8008158:	6011      	str	r1, [r2, #0]
 800815a:	d1e0      	bne.n	800811e <_free_r+0x26>
 800815c:	681c      	ldr	r4, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	6053      	str	r3, [r2, #4]
 8008162:	4421      	add	r1, r4
 8008164:	6011      	str	r1, [r2, #0]
 8008166:	e7da      	b.n	800811e <_free_r+0x26>
 8008168:	d902      	bls.n	8008170 <_free_r+0x78>
 800816a:	230c      	movs	r3, #12
 800816c:	6003      	str	r3, [r0, #0]
 800816e:	e7d6      	b.n	800811e <_free_r+0x26>
 8008170:	6825      	ldr	r5, [r4, #0]
 8008172:	1961      	adds	r1, r4, r5
 8008174:	428b      	cmp	r3, r1
 8008176:	bf04      	itt	eq
 8008178:	6819      	ldreq	r1, [r3, #0]
 800817a:	685b      	ldreq	r3, [r3, #4]
 800817c:	6063      	str	r3, [r4, #4]
 800817e:	bf04      	itt	eq
 8008180:	1949      	addeq	r1, r1, r5
 8008182:	6021      	streq	r1, [r4, #0]
 8008184:	6054      	str	r4, [r2, #4]
 8008186:	e7ca      	b.n	800811e <_free_r+0x26>
 8008188:	b003      	add	sp, #12
 800818a:	bd30      	pop	{r4, r5, pc}
 800818c:	20000770 	.word	0x20000770

08008190 <__malloc_lock>:
 8008190:	4801      	ldr	r0, [pc, #4]	; (8008198 <__malloc_lock+0x8>)
 8008192:	f000 b809 	b.w	80081a8 <__retarget_lock_acquire_recursive>
 8008196:	bf00      	nop
 8008198:	20000774 	.word	0x20000774

0800819c <__malloc_unlock>:
 800819c:	4801      	ldr	r0, [pc, #4]	; (80081a4 <__malloc_unlock+0x8>)
 800819e:	f000 b804 	b.w	80081aa <__retarget_lock_release_recursive>
 80081a2:	bf00      	nop
 80081a4:	20000774 	.word	0x20000774

080081a8 <__retarget_lock_acquire_recursive>:
 80081a8:	4770      	bx	lr

080081aa <__retarget_lock_release_recursive>:
 80081aa:	4770      	bx	lr

080081ac <_init>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	bf00      	nop
 80081b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b2:	bc08      	pop	{r3}
 80081b4:	469e      	mov	lr, r3
 80081b6:	4770      	bx	lr

080081b8 <_fini>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr
