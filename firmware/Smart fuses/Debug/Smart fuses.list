
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ac  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002968  08002968  00012968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029d4  080029d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080029d4  080029d4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029d4  080029d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080029d4  080029d4  000129d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029dc  080029dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08002a50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002a50  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001636d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003194  00000000  00000000  0003640d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  000395a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  0003a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003073c  00000000  00000000  0003aae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef24  00000000  00000000  0006b224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111ed2  00000000  00000000  0007a148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018c01a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029dc  00000000  00000000  0018c06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001500  00000000  00000000  0018ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002950 	.word	0x08002950

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	08002950 	.word	0x08002950

080001fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN1_Init+0x60>)
 8000202:	4a17      	ldr	r2, [pc, #92]	; (8000260 <MX_CAN1_Init+0x64>)
 8000204:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <MX_CAN1_Init+0x60>)
 8000208:	2210      	movs	r2, #16
 800020a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN1_Init+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <MX_CAN1_Init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <MX_CAN1_Init+0x60>)
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN1_Init+0x60>)
 8000220:	2200      	movs	r2, #0
 8000222:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN1_Init+0x60>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN1_Init+0x60>)
 800022c:	2200      	movs	r2, #0
 800022e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN1_Init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN1_Init+0x60>)
 8000238:	2200      	movs	r2, #0
 800023a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN1_Init+0x60>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN1_Init+0x60>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN1_Init+0x60>)
 800024a:	f000 fef9 	bl	8001040 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000254:	f000 fc0c 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000008c 	.word	0x2000008c
 8000260:	40006400 	.word	0x40006400

08000264 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <HAL_CAN_MspInit+0x80>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d129      	bne.n	80002da <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800028a:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 800028c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000290:	6593      	str	r3, [r2, #88]	; 0x58
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002bc:	2302      	movs	r3, #2
 80002be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c4:	2303      	movs	r3, #3
 80002c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002c8:	2309      	movs	r3, #9
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f001 f895 	bl	8001404 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002da:	bf00      	nop
 80002dc:	3728      	adds	r7, #40	; 0x28
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40006400 	.word	0x40006400
 80002e8:	40021000 	.word	0x40021000

080002ec <_ZL8checkGSBh>:
	if (checkParity3Byte(x)) *(x + 2) |= (1 << 0);
}

static SmartFuseState checkGSB(uint8_t gsb)
{
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 80002ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80002f0:	d117      	bne.n	8000322 <_ZL8checkGSBh+0x36>
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 80002f2:	f010 0f01 	tst.w	r0, #1
 80002f6:	d116      	bne.n	8000326 <_ZL8checkGSBh+0x3a>
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 80002f8:	f010 0f02 	tst.w	r0, #2
 80002fc:	d115      	bne.n	800032a <_ZL8checkGSBh+0x3e>
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 80002fe:	f010 0f04 	tst.w	r0, #4
 8000302:	d114      	bne.n	800032e <_ZL8checkGSBh+0x42>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000304:	f010 0f08 	tst.w	r0, #8
 8000308:	d113      	bne.n	8000332 <_ZL8checkGSBh+0x46>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 800030a:	f010 0f10 	tst.w	r0, #16
 800030e:	d112      	bne.n	8000336 <_ZL8checkGSBh+0x4a>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 8000310:	f010 0f20 	tst.w	r0, #32
 8000314:	d111      	bne.n	800033a <_ZL8checkGSBh+0x4e>
	if(gsb & 0b01000000) return SmartFuseState::ResetState;
 8000316:	f010 0f40 	tst.w	r0, #64	; 0x40
 800031a:	bf0c      	ite	eq
 800031c:	2008      	moveq	r0, #8
 800031e:	2001      	movne	r0, #1
 8000320:	4770      	bx	lr
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000322:	2000      	movs	r0, #0
 8000324:	4770      	bx	lr
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 8000326:	2007      	movs	r0, #7
 8000328:	4770      	bx	lr
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 800032a:	2006      	movs	r0, #6
 800032c:	4770      	bx	lr
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 800032e:	2005      	movs	r0, #5
 8000330:	4770      	bx	lr
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000332:	2004      	movs	r0, #4
 8000334:	4770      	bx	lr
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 8000336:	2003      	movs	r0, #3
 8000338:	4770      	bx	lr
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 800033a:	2002      	movs	r0, #2
	return SmartFuseState::NotResponding;
}
 800033c:	4770      	bx	lr

0800033e <_ZN9SmartFuse4FuseC1Ev>:
    T2 second;

    /// Default constructor
    ETL_CONSTEXPR pair()
      : first(T1())
      , second(T2())
 800033e:	2200      	movs	r2, #0
 8000340:	8082      	strh	r2, [r0, #4]
 8000342:	80c2      	strh	r2, [r0, #6]

/*Fuse declarations -------------------------------------------------------------------------------------------------*/

SmartFuse::Fuse::Fuse()
{
	active = false;
 8000344:	7002      	strb	r2, [r0, #0]
	current = 0x0000;
 8000346:	8042      	strh	r2, [r0, #2]
}
 8000348:	4770      	bx	lr

0800034a <_ZN9SmartFuse11slaveSelectEv>:

	slaveDeselect();
}

void SmartFuse::slaveSelect(void)
{
 800034a:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin( (GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	8881      	ldrh	r1, [r0, #4]
 8000350:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000352:	f001 f9e9 	bl	8001728 <HAL_GPIO_WritePin>
}
 8000356:	bd08      	pop	{r3, pc}

08000358 <_ZN9SmartFuse13slaveDeselectEv>:

void SmartFuse::slaveDeselect(void)
{
 8000358:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	8881      	ldrh	r1, [r0, #4]
 800035e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000360:	f001 f9e2 	bl	8001728 <HAL_GPIO_WritePin>
}
 8000364:	bd08      	pop	{r3, pc}

08000366 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, const FusesSettings &fuses_settings) :
 8000366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800036a:	4606      	mov	r6, r0
 800036c:	468a      	mov	sl, r1
 800036e:	4699      	mov	r9, r3
 8000370:	9f08      	ldr	r7, [sp, #32]
					 port(port), pin(pin), hspi(hspi), fuses_settings(fuses_settings)
 8000372:	6042      	str	r2, [r0, #4]
 8000374:	f100 0508 	add.w	r5, r0, #8
 8000378:	4604      	mov	r4, r0
 800037a:	f100 0838 	add.w	r8, r0, #56	; 0x38
 800037e:	4628      	mov	r0, r5
 8000380:	f7ff ffdd 	bl	800033e <_ZN9SmartFuse4FuseC1Ev>
 8000384:	3508      	adds	r5, #8
 8000386:	4545      	cmp	r5, r8
 8000388:	d1f9      	bne.n	800037e <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0x18>
 800038a:	f8c6 a038 	str.w	sl, [r6, #56]	; 0x38
 800038e:	f8c6 903c 	str.w	r9, [r6, #60]	; 0x3c
	f3,
	f4,
	f5
};

struct FusesSettings
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	6433      	str	r3, [r6, #64]	; 0x40
 8000396:	88bb      	ldrh	r3, [r7, #4]
 8000398:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
 800039c:	f8d7 3006 	ldr.w	r3, [r7, #6]
 80003a0:	f8c6 3046 	str.w	r3, [r6, #70]	; 0x46
 80003a4:	897b      	ldrh	r3, [r7, #10]
 80003a6:	f8a6 304a 	strh.w	r3, [r6, #74]	; 0x4a
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	64f3      	str	r3, [r6, #76]	; 0x4c
 80003ae:	8a3b      	ldrh	r3, [r7, #16]
 80003b0:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 80003b4:	f8d7 1012 	ldr.w	r1, [r7, #18]
 80003b8:	f8d7 2016 	ldr.w	r2, [r7, #22]
 80003bc:	f8d7 301a 	ldr.w	r3, [r7, #26]
 80003c0:	f8c6 1052 	str.w	r1, [r6, #82]	; 0x52
 80003c4:	f8c6 2056 	str.w	r2, [r6, #86]	; 0x56
 80003c8:	f8c6 305a 	str.w	r3, [r6, #90]	; 0x5a
 80003cc:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80003d0:	f106 025e 	add.w	r2, r6, #94	; 0x5e
 80003d4:	463d      	mov	r5, r7
 80003d6:	f107 003a 	add.w	r0, r7, #58	; 0x3a
    {
    }

    /// Copy constructor
    pair(const pair<T1, T2>& other)
      : first(other.first)
 80003da:	f833 1c04 	ldrh.w	r1, [r3, #-4]
      , second(other.second)
 80003de:	8011      	strh	r1, [r2, #0]
 80003e0:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 80003e4:	8051      	strh	r1, [r2, #2]
 80003e6:	3304      	adds	r3, #4
 80003e8:	3204      	adds	r2, #4
 80003ea:	4283      	cmp	r3, r0
 80003ec:	d1f5      	bne.n	80003da <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0x74>
 80003ee:	f106 0078 	add.w	r0, r6, #120	; 0x78
 80003f2:	f000 fd4f 	bl	8000e94 <_ZN5TimerC1Ev>
	this->toggle = false;
 80003f6:	2300      	movs	r3, #0
 80003f8:	7033      	strb	r3, [r6, #0]
	for (int i = 0; i < 6; i++)
 80003fa:	1e7b      	subs	r3, r7, #1
 80003fc:	3705      	adds	r7, #5
      swap(second, other.second);
    }

    pair<T1, T2>& operator =(const pair<T1, T2>& other)
    {
      first = other.first;
 80003fe:	8bea      	ldrh	r2, [r5, #30]
 8000400:	81a2      	strh	r2, [r4, #12]
      second = other.second;
 8000402:	8c2a      	ldrh	r2, [r5, #32]
 8000404:	81e2      	strh	r2, [r4, #14]
		this->fuses[i].active = fuses_settings.active[i];
 8000406:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800040a:	f804 2f08 	strb.w	r2, [r4, #8]!
	for (int i = 0; i < 6; i++)
 800040e:	3504      	adds	r5, #4
 8000410:	42bb      	cmp	r3, r7
 8000412:	d1f4      	bne.n	80003fe <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0x98>
	slaveDeselect();
 8000414:	4630      	mov	r0, r6
 8000416:	f7ff ff9f 	bl	8000358 <_ZN9SmartFuse13slaveDeselectEv>
}
 800041a:	4630      	mov	r0, r6
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000420 <_ZN9SmartFuse17getSmartFuseStateEv>:
}

SmartFuseState SmartFuse::getSmartFuseState(void)
{
	return this->state;
}
 8000420:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
 8000424:	4770      	bx	lr
	...

08000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>:

void SmartFuse::transmitReceiveData(uint8_t *tx_data, uint8_t *rx_data)
{
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	4606      	mov	r6, r0
 800042c:	460c      	mov	r4, r1
 800042e:	4615      	mov	r5, r2
	/// just check
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8000430:	4b2f      	ldr	r3, [pc, #188]	; (80004f0 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0xc8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	f012 0f40 	tst.w	r2, #64	; 0x40
 800043a:	d103      	bne.n	8000444 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x1c>
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000442:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++) for(int j = 0; j < 8; j++) if(x[i] & 1 << j) buff++;
 8000444:	1e61      	subs	r1, r4, #1
 8000446:	1ca0      	adds	r0, r4, #2
	uint8_t buff = 0;
 8000448:	f04f 0c00 	mov.w	ip, #0
	for(int i = 0; i < 3; i++) for(int j = 0; j < 8; j++) if(x[i] & 1 << j) buff++;
 800044c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000450:	2300      	movs	r3, #0
 8000452:	fa42 fe03 	asr.w	lr, r2, r3
 8000456:	f01e 0f01 	tst.w	lr, #1
 800045a:	bf1c      	itt	ne
 800045c:	f10c 0c01 	addne.w	ip, ip, #1
 8000460:	fa5f fc8c 	uxtbne.w	ip, ip
 8000464:	3301      	adds	r3, #1
 8000466:	2b08      	cmp	r3, #8
 8000468:	d1f3      	bne.n	8000452 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x2a>
 800046a:	4281      	cmp	r1, r0
 800046c:	d1ee      	bne.n	800044c <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x24>
	if (checkParity3Byte(x)) *(x + 2) |= (1 << 0);
 800046e:	f01c 0f01 	tst.w	ip, #1
 8000472:	d103      	bne.n	800047c <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x54>
 8000474:	78a3      	ldrb	r3, [r4, #2]
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	70a3      	strb	r3, [r4, #2]

	/// data needs to have a parity check bit
	calculateParityBit3Byte(tx_data);

	slaveSelect();
 800047c:	4630      	mov	r0, r6
 800047e:	f7ff ff64 	bl	800034a <_ZN9SmartFuse11slaveSelectEv>

	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8000482:	f04f 0c00 	mov.w	ip, #0
 8000486:	4663      	mov	r3, ip
			(*(uint8_t*) rx_data) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
			rx_data++;
			rx++;
		}

		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000488:	4819      	ldr	r0, [pc, #100]	; (80004f0 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0xc8>)
 800048a:	e00c      	b.n	80004a6 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x7e>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 800048c:	6802      	ldr	r2, [r0, #0]
 800048e:	6891      	ldr	r1, [r2, #8]
 8000490:	f011 0f01 	tst.w	r1, #1
 8000494:	d002      	beq.n	800049c <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x74>
 8000496:	f1bc 0f02 	cmp.w	ip, #2
 800049a:	d911      	bls.n	80004c0 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x98>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 800049c:	6802      	ldr	r2, [r0, #0]
 800049e:	6891      	ldr	r1, [r2, #8]
 80004a0:	f011 0f02 	tst.w	r1, #2
 80004a4:	d11a      	bne.n	80004dc <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0xb4>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d9f0      	bls.n	800048c <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x64>
 80004aa:	f1bc 0f02 	cmp.w	ip, #2
 80004ae:	d81b      	bhi.n	80004e8 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0xc0>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 80004b0:	6802      	ldr	r2, [r0, #0]
 80004b2:	6891      	ldr	r1, [r2, #8]
 80004b4:	f011 0f01 	tst.w	r1, #1
 80004b8:	d102      	bne.n	80004c0 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x98>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 80004ba:	6802      	ldr	r2, [r0, #0]
 80004bc:	6892      	ldr	r2, [r2, #8]
 80004be:	e7f2      	b.n	80004a6 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x7e>
			(*(uint8_t*) rx_data) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 80004c0:	7b12      	ldrb	r2, [r2, #12]
 80004c2:	f805 2b01 	strb.w	r2, [r5], #1
			rx++;
 80004c6:	f10c 0c01 	add.w	ip, ip, #1
 80004ca:	fa5f fc8c 	uxtb.w	ip, ip
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 80004ce:	6802      	ldr	r2, [r0, #0]
 80004d0:	6891      	ldr	r1, [r2, #8]
 80004d2:	f011 0f02 	tst.w	r1, #2
 80004d6:	d0e6      	beq.n	80004a6 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x7e>
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d8e4      	bhi.n	80004a6 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x7e>
		{
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = (*tx_data);
 80004dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80004e0:	7311      	strb	r1, [r2, #12]
			tx_data++;
			tx++;
 80004e2:	3301      	adds	r3, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	e7de      	b.n	80004a6 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x7e>
		}
	}

	slaveDeselect();
 80004e8:	4630      	mov	r0, r6
 80004ea:	f7ff ff35 	bl	8000358 <_ZN9SmartFuse13slaveDeselectEv>
}
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	200000bc 	.word	0x200000bc

080004f4 <_ZN9SmartFuse4initEv>:
{
 80004f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	4604      	mov	r4, r0
	uint8_t tx_data[3] = { 0, 0, 0 };
 80004fc:	4b8b      	ldr	r3, [pc, #556]	; (800072c <_ZN9SmartFuse4initEv+0x238>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000504:	0c1a      	lsrs	r2, r3, #16
 8000506:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t rx_data[3] = { 0, 0, 0 };
 800050a:	f8ad 3000 	strh.w	r3, [sp]
 800050e:	f88d 2002 	strb.w	r2, [sp, #2]
	tx_data[0] = RESET_SMARTFUSE();
 8000512:	23ff      	movs	r3, #255	; 0xff
 8000514:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 8000518:	466a      	mov	r2, sp
 800051a:	a901      	add	r1, sp, #4
 800051c:	f7ff ff84 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	tx_data[0] = READ_ROM(0x01);
 8000520:	23c1      	movs	r3, #193	; 0xc1
 8000522:	f88d 3004 	strb.w	r3, [sp, #4]
 8000526:	2506      	movs	r5, #6
		HAL_Delay(1);
 8000528:	2601      	movs	r6, #1
 800052a:	e00e      	b.n	800054a <_ZN9SmartFuse4initEv+0x56>
		if(!IF_RESET_STATE(rx_data)) break;
 800052c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000530:	d015      	beq.n	800055e <_ZN9SmartFuse4initEv+0x6a>
		else if(i == FUSE_TIMEOUT - 1)
 8000532:	2d01      	cmp	r5, #1
 8000534:	f000 80f0 	beq.w	8000718 <_ZN9SmartFuse4initEv+0x224>
		transmitReceiveData(tx_data, rx_data);
 8000538:	466a      	mov	r2, sp
 800053a:	a901      	add	r1, sp, #4
 800053c:	4620      	mov	r0, r4
 800053e:	f7ff ff73 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		HAL_Delay(1);
 8000542:	4630      	mov	r0, r6
 8000544:	f000 fd58 	bl	8000ff8 <HAL_Delay>
	for (int i = 0; i < FUSE_TIMEOUT; i++)
 8000548:	3d01      	subs	r5, #1
		if(!IF_RESET_STATE(rx_data)) break;
 800054a:	f89d 3000 	ldrb.w	r3, [sp]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1ec      	bne.n	800052c <_ZN9SmartFuse4initEv+0x38>
 8000552:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8000556:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800055a:	4313      	orrs	r3, r2
 800055c:	d0e9      	beq.n	8000532 <_ZN9SmartFuse4initEv+0x3e>
	MODIFY(tx_data, WRITE_RAM(0x14), 1 << 6, 0);
 800055e:	2614      	movs	r6, #20
 8000560:	f88d 6004 	strb.w	r6, [sp, #4]
 8000564:	2340      	movs	r3, #64	; 0x40
 8000566:	f88d 3005 	strb.w	r3, [sp, #5]
 800056a:	2500      	movs	r5, #0
 800056c:	f88d 5006 	strb.w	r5, [sp, #6]
	transmitReceiveData(tx_data, rx_data);
 8000570:	466a      	mov	r2, sp
 8000572:	a901      	add	r1, sp, #4
 8000574:	4620      	mov	r0, r4
 8000576:	f7ff ff57 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	MODIFY(tx_data, WRITE_RAM(0x14), 1 << 3, 0);
 800057a:	f88d 6004 	strb.w	r6, [sp, #4]
 800057e:	2608      	movs	r6, #8
 8000580:	f88d 6005 	strb.w	r6, [sp, #5]
 8000584:	f88d 5006 	strb.w	r5, [sp, #6]
	transmitReceiveData(tx_data, rx_data);
 8000588:	466a      	mov	r2, sp
 800058a:	a901      	add	r1, sp, #4
 800058c:	4620      	mov	r0, r4
 800058e:	f7ff ff4b 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	MODIFY(tx_data, READ_RAM(0x14), 1 << 3, 0);
 8000592:	2354      	movs	r3, #84	; 0x54
 8000594:	f88d 3004 	strb.w	r3, [sp, #4]
 8000598:	f88d 6005 	strb.w	r6, [sp, #5]
 800059c:	f88d 5006 	strb.w	r5, [sp, #6]
	transmitReceiveData(tx_data, rx_data);
 80005a0:	466a      	mov	r2, sp
 80005a2:	a901      	add	r1, sp, #4
 80005a4:	4620      	mov	r0, r4
 80005a6:	f7ff ff3f 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	this->watch_dog.restart();
 80005aa:	f104 0878 	add.w	r8, r4, #120	; 0x78
 80005ae:	4640      	mov	r0, r8
 80005b0:	f000 fc7e 	bl	8000eb0 <_ZN5Timer7restartEv>
	this->toggle = false;
 80005b4:	4626      	mov	r6, r4
 80005b6:	f806 5b52 	strb.w	r5, [r6], #82
	for(int i = 0; i < 6; i++)
 80005ba:	f104 074c 	add.w	r7, r4, #76	; 0x4c
		tx_data[1] = 0x00;
 80005be:	46a9      	mov	r9, r5
 80005c0:	e012      	b.n	80005e8 <_ZN9SmartFuse4initEv+0xf4>
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 80005c2:	f88d 9006 	strb.w	r9, [sp, #6]
		tx_data[0] = WRITE_RAM(0x08 + i);
 80005c6:	f10a 0a08 	add.w	sl, sl, #8
 80005ca:	f88d a004 	strb.w	sl, [sp, #4]
		transmitReceiveData(tx_data, rx_data);
 80005ce:	466a      	mov	r2, sp
 80005d0:	a901      	add	r1, sp, #4
 80005d2:	4620      	mov	r0, r4
 80005d4:	f7ff ff28 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		if(watch_dog.getPassedTime() >= 30)
 80005d8:	4640      	mov	r0, r8
 80005da:	f000 fc62 	bl	8000ea2 <_ZN5Timer13getPassedTimeEv>
 80005de:	281d      	cmp	r0, #29
 80005e0:	d834      	bhi.n	800064c <_ZN9SmartFuse4initEv+0x158>
	for(int i = 0; i < 6; i++)
 80005e2:	3501      	adds	r5, #1
 80005e4:	2d06      	cmp	r5, #6
 80005e6:	d055      	beq.n	8000694 <_ZN9SmartFuse4initEv+0x1a0>
		tx_data[1] = uint8_t(this->fuses_settings.duty_cykle[i] >> 8);
 80005e8:	f836 3b02 	ldrh.w	r3, [r6], #2
 80005ec:	0a1a      	lsrs	r2, r3, #8
 80005ee:	f88d 2005 	strb.w	r2, [sp, #5]
		tx_data[2] = uint8_t(this->fuses_settings.duty_cykle[i] << 4) | this->toggle << 1;
 80005f2:	7822      	ldrb	r2, [r4, #0]
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80005fa:	f88d 3006 	strb.w	r3, [sp, #6]
		tx_data[0] = WRITE_RAM(0x00 + i);
 80005fe:	fa5f fa85 	uxtb.w	sl, r5
 8000602:	f88d a004 	strb.w	sl, [sp, #4]
		transmitReceiveData(tx_data, rx_data);
 8000606:	466a      	mov	r2, sp
 8000608:	a901      	add	r1, sp, #4
 800060a:	4620      	mov	r0, r4
 800060c:	f7ff ff0c 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		tx_data[1] = 0x00;
 8000610:	f88d 9005 	strb.w	r9, [sp, #5]
		switch (this->fuses_settings.sampling_mode[i])
 8000614:	f817 3b01 	ldrb.w	r3, [r7], #1
 8000618:	2b03      	cmp	r3, #3
 800061a:	d8d4      	bhi.n	80005c6 <_ZN9SmartFuse4initEv+0xd2>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <_ZN9SmartFuse4initEv+0x130>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	080005c3 	.word	0x080005c3
 8000628:	08000635 	.word	0x08000635
 800062c:	0800063d 	.word	0x0800063d
 8000630:	08000645 	.word	0x08000645
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 8000634:	2340      	movs	r3, #64	; 0x40
 8000636:	f88d 3006 	strb.w	r3, [sp, #6]
 800063a:	e7c4      	b.n	80005c6 <_ZN9SmartFuse4initEv+0xd2>
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	f88d 3006 	strb.w	r3, [sp, #6]
 8000642:	e7c0      	b.n	80005c6 <_ZN9SmartFuse4initEv+0xd2>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 8000644:	23c0      	movs	r3, #192	; 0xc0
 8000646:	f88d 3006 	strb.w	r3, [sp, #6]
 800064a:	e7bc      	b.n	80005c6 <_ZN9SmartFuse4initEv+0xd2>
			tx_data[0] = READ_RAM(0x13);
 800064c:	2353      	movs	r3, #83	; 0x53
 800064e:	f88d 3004 	strb.w	r3, [sp, #4]
			transmitReceiveData(tx_data, rx_data);
 8000652:	466a      	mov	r2, sp
 8000654:	a901      	add	r1, sp, #4
 8000656:	4620      	mov	r0, r4
 8000658:	f7ff fee6 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
			MODIFY(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] ^= (1 << 1));
 800065c:	2313      	movs	r3, #19
 800065e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000662:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000666:	f88d 3005 	strb.w	r3, [sp, #5]
 800066a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800066e:	f083 0302 	eor.w	r3, r3, #2
 8000672:	f88d 3002 	strb.w	r3, [sp, #2]
 8000676:	f88d 3006 	strb.w	r3, [sp, #6]
			transmitReceiveData(tx_data, rx_data);
 800067a:	466a      	mov	r2, sp
 800067c:	a901      	add	r1, sp, #4
 800067e:	4620      	mov	r0, r4
 8000680:	f7ff fed2 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
			this->watch_dog.restart();
 8000684:	4640      	mov	r0, r8
 8000686:	f000 fc13 	bl	8000eb0 <_ZN5Timer7restartEv>
			this->toggle = !this->toggle;
 800068a:	7823      	ldrb	r3, [r4, #0]
 800068c:	f083 0301 	eor.w	r3, r3, #1
 8000690:	7023      	strb	r3, [r4, #0]
 8000692:	e7a6      	b.n	80005e2 <_ZN9SmartFuse4initEv+0xee>
		   this->fuses_settings.latch_off_time_out[1];
 8000694:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	tx_data[1] = this->fuses_settings.latch_off_time_out[2] << 4 |
 8000698:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800069c:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 80006a0:	f88d 2005 	strb.w	r2, [sp, #5]
	tx_data[2] = this->fuses_settings.latch_off_time_out[1] << 4;
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	f88d 3006 	strb.w	r3, [sp, #6]
	tx_data[0] = WRITE_RAM(0x10);
 80006aa:	2310      	movs	r3, #16
 80006ac:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 80006b0:	466a      	mov	r2, sp
 80006b2:	a901      	add	r1, sp, #4
 80006b4:	4620      	mov	r0, r4
 80006b6:	f7ff feb7 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	tx_data[1] = this->fuses_settings.latch_off_time_out[5] << 4 |
 80006ba:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 80006be:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80006c2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80006c6:	f88d 3005 	strb.w	r3, [sp, #5]
	tx_data[2] = this->fuses_settings.latch_off_time_out[3] << 4;
 80006ca:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	f88d 3006 	strb.w	r3, [sp, #6]
	tx_data[0] = WRITE_RAM(0x11);
 80006d4:	2311      	movs	r3, #17
 80006d6:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 80006da:	466a      	mov	r2, sp
 80006dc:	a901      	add	r1, sp, #4
 80006de:	4620      	mov	r0, r4
 80006e0:	f7ff fea2 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
 80006e4:	2200      	movs	r2, #0
	for(int i = 0; i < 6; i++)
 80006e6:	4613      	mov	r3, r2
		tx_data[1] |= this->fuses[i].active << i;
 80006e8:	f104 0008 	add.w	r0, r4, #8
 80006ec:	f810 1033 	ldrb.w	r1, [r0, r3, lsl #3]
 80006f0:	4099      	lsls	r1, r3
 80006f2:	430a      	orrs	r2, r1
 80006f4:	b2d2      	uxtb	r2, r2
	for(int i = 0; i < 6; i++)
 80006f6:	3301      	adds	r3, #1
 80006f8:	2b06      	cmp	r3, #6
 80006fa:	d1f7      	bne.n	80006ec <_ZN9SmartFuse4initEv+0x1f8>
 80006fc:	f88d 2005 	strb.w	r2, [sp, #5]
	tx_data[2] = this->toggle << 1;
 8000700:	7823      	ldrb	r3, [r4, #0]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	f88d 3006 	strb.w	r3, [sp, #6]
	tx_data[0] = WRITE_RAM(0x13);
 8000708:	2313      	movs	r3, #19
 800070a:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 800070e:	466a      	mov	r2, sp
 8000710:	a901      	add	r1, sp, #4
 8000712:	4620      	mov	r0, r4
 8000714:	f7ff fe88 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	this->state = checkGSB(rx_data[0]);
 8000718:	f89d 0000 	ldrb.w	r0, [sp]
 800071c:	f7ff fde6 	bl	80002ec <_ZL8checkGSBh>
 8000720:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8000724:	b002      	add	sp, #8
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	bf00      	nop
 800072c:	08002968 	.word	0x08002968

08000730 <_ZN9SmartFuse6handleEv>:
{
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	4604      	mov	r4, r0
	uint8_t tx_data[3] = { 0, 0, 0 };
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <_ZN9SmartFuse6handleEv+0x88>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800073e:	0c1a      	lsrs	r2, r3, #16
 8000740:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t rx_data[3] = { 0, 0, 0 };
 8000744:	f8ad 3000 	strh.w	r3, [sp]
 8000748:	f88d 2002 	strb.w	r2, [sp, #2]
	if(watch_dog.getPassedTime() >= 40)
 800074c:	f100 0578 	add.w	r5, r0, #120	; 0x78
 8000750:	4628      	mov	r0, r5
 8000752:	f000 fba6 	bl	8000ea2 <_ZN5Timer13getPassedTimeEv>
 8000756:	2827      	cmp	r0, #39	; 0x27
 8000758:	d803      	bhi.n	8000762 <_ZN9SmartFuse6handleEv+0x32>
		return this->state;
 800075a:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
}
 800075e:	b003      	add	sp, #12
 8000760:	bd30      	pop	{r4, r5, pc}
		tx_data[0] = READ_RAM(0x13);
 8000762:	2353      	movs	r3, #83	; 0x53
 8000764:	f88d 3004 	strb.w	r3, [sp, #4]
		transmitReceiveData(tx_data, rx_data);
 8000768:	466a      	mov	r2, sp
 800076a:	a901      	add	r1, sp, #4
 800076c:	4620      	mov	r0, r4
 800076e:	f7ff fe5b 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		MODIFY(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] ^= (1 << 1));
 8000772:	2313      	movs	r3, #19
 8000774:	f88d 3004 	strb.w	r3, [sp, #4]
 8000778:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800077c:	f88d 3005 	strb.w	r3, [sp, #5]
 8000780:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000784:	f083 0302 	eor.w	r3, r3, #2
 8000788:	f88d 3002 	strb.w	r3, [sp, #2]
 800078c:	f88d 3006 	strb.w	r3, [sp, #6]
		transmitReceiveData(tx_data, rx_data);
 8000790:	466a      	mov	r2, sp
 8000792:	a901      	add	r1, sp, #4
 8000794:	4620      	mov	r0, r4
 8000796:	f7ff fe47 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		this->watch_dog.restart();
 800079a:	4628      	mov	r0, r5
 800079c:	f000 fb88 	bl	8000eb0 <_ZN5Timer7restartEv>
		this->toggle = !this->toggle;
 80007a0:	7823      	ldrb	r3, [r4, #0]
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	7023      	strb	r3, [r4, #0]
	this->state = checkGSB(rx_data[0]);
 80007a8:	f89d 0000 	ldrb.w	r0, [sp]
 80007ac:	f7ff fd9e 	bl	80002ec <_ZL8checkGSBh>
 80007b0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
	return this->state;
 80007b4:	e7d3      	b.n	800075e <_ZN9SmartFuse6handleEv+0x2e>
 80007b6:	bf00      	nop
 80007b8:	08002968 	.word	0x08002968

080007bc <_ZN9SmartFuse14activeAllFusesEv>:
{
 80007bc:	b510      	push	{r4, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	4604      	mov	r4, r0
		this->fuses[i].active = true;
 80007c2:	2301      	movs	r3, #1
 80007c4:	7203      	strb	r3, [r0, #8]
 80007c6:	7403      	strb	r3, [r0, #16]
 80007c8:	7603      	strb	r3, [r0, #24]
 80007ca:	f880 3020 	strb.w	r3, [r0, #32]
 80007ce:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80007d2:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	tx_data[1] = 0x3f;
 80007d6:	233f      	movs	r3, #63	; 0x3f
 80007d8:	f88d 3005 	strb.w	r3, [sp, #5]
	tx_data[2] = this->toggle << 1;
 80007dc:	7803      	ldrb	r3, [r0, #0]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	f88d 3006 	strb.w	r3, [sp, #6]
	tx_data[0] = WRITE_RAM(0x13);
 80007e4:	2313      	movs	r3, #19
 80007e6:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 80007ea:	466a      	mov	r2, sp
 80007ec:	a901      	add	r1, sp, #4
 80007ee:	f7ff fe1b 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	this->state = checkGSB(rx_data[0]);
 80007f2:	f89d 0000 	ldrb.w	r0, [sp]
 80007f6:	f7ff fd79 	bl	80002ec <_ZL8checkGSBh>
 80007fa:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80007fe:	b002      	add	sp, #8
 8000800:	bd10      	pop	{r4, pc}

08000802 <_ZN9SmartFuse18deactivateAllFusesEv>:
{
 8000802:	b510      	push	{r4, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	4604      	mov	r4, r0
		this->fuses[i].active = false;
 8000808:	2300      	movs	r3, #0
 800080a:	7203      	strb	r3, [r0, #8]
 800080c:	7403      	strb	r3, [r0, #16]
 800080e:	7603      	strb	r3, [r0, #24]
 8000810:	f880 3020 	strb.w	r3, [r0, #32]
 8000814:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8000818:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	tx_data[1] = 0x00;
 800081c:	f88d 3005 	strb.w	r3, [sp, #5]
	tx_data[2] = this->toggle << 1;
 8000820:	7803      	ldrb	r3, [r0, #0]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	f88d 3006 	strb.w	r3, [sp, #6]
	tx_data[0] = WRITE_RAM(0x13);
 8000828:	2313      	movs	r3, #19
 800082a:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 800082e:	466a      	mov	r2, sp
 8000830:	a901      	add	r1, sp, #4
 8000832:	f7ff fdf9 	bl	8000428 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	this->state = checkGSB(rx_data[0]);
 8000836:	f89d 0000 	ldrb.w	r0, [sp]
 800083a:	f7ff fd57 	bl	80002ec <_ZL8checkGSBh>
 800083e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8000842:	b002      	add	sp, #8
 8000844:	bd10      	pop	{r4, pc}

08000846 <_ZN11GpioElementD1Ev>:
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		//virtual void handle();
		virtual ~GpioElement() { };
 8000846:	4770      	bx	lr

08000848 <_ZN14GpioOutElementD1Ev>:
		const uint32_t pin;

		const GPIO_TypeDef * const port;
};

class GpioOutElement : public GpioElement
 8000848:	4770      	bx	lr

0800084a <_ZN11GpioElementD0Ev>:
		virtual ~GpioElement() { };
 800084a:	b510      	push	{r4, lr}
 800084c:	4604      	mov	r4, r0
 800084e:	2110      	movs	r1, #16
 8000850:	f001 ffeb 	bl	800282a <_ZdlPvj>
 8000854:	4620      	mov	r0, r4
 8000856:	bd10      	pop	{r4, pc}

08000858 <_ZN14GpioOutElementD0Ev>:
class GpioOutElement : public GpioElement
 8000858:	b510      	push	{r4, lr}
 800085a:	4604      	mov	r4, r0
 800085c:	2110      	movs	r1, #16
 800085e:	f001 ffe4 	bl	800282a <_ZdlPvj>
 8000862:	4620      	mov	r0, r4
 8000864:	bd10      	pop	{r4, pc}
	...

08000868 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
 *      Author: Piotr Lesicki
 */

#include "gpio elements.hpp"

GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 8000868:	b410      	push	{r4}
						 port(port), pin(pin), is_inverted(is_inverted) { }
 800086a:	4c04      	ldr	r4, [pc, #16]	; (800087c <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x14>)
 800086c:	6004      	str	r4, [r0, #0]
 800086e:	7143      	strb	r3, [r0, #5]
 8000870:	6082      	str	r2, [r0, #8]
 8000872:	60c1      	str	r1, [r0, #12]
 8000874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	0800297c 	.word	0x0800297c

08000880 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin) :
							   GpioElement(port, pin, false) { }

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 8000880:	b510      	push	{r4, lr}
 8000882:	4604      	mov	r4, r0
							   GpioElement(port, pin, is_inverted) { }
 8000884:	f7ff fff0 	bl	8000868 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 8000888:	4b01      	ldr	r3, [pc, #4]	; (8000890 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x10>)
 800088a:	6023      	str	r3, [r4, #0]
 800088c:	4620      	mov	r0, r4
 800088e:	bd10      	pop	{r4, pc}
 8000890:	0800298c 	.word	0x0800298c

08000894 <_ZN14GpioOutElement8activateEv>:

void GpioOutElement::activate()
{
 8000894:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000896:	7942      	ldrb	r2, [r0, #5]
 8000898:	f082 0201 	eor.w	r2, r2, #1
 800089c:	8901      	ldrh	r1, [r0, #8]
 800089e:	68c0      	ldr	r0, [r0, #12]
 80008a0:	f000 ff42 	bl	8001728 <HAL_GPIO_WritePin>
}
 80008a4:	bd08      	pop	{r3, pc}

080008a6 <_ZN14GpioOutElement10deactivateEv>:

void GpioOutElement::deactivate()
{
 80008a6:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a8:	7942      	ldrb	r2, [r0, #5]
 80008aa:	8901      	ldrh	r1, [r0, #8]
 80008ac:	68c0      	ldr	r0, [r0, #12]
 80008ae:	f000 ff3b 	bl	8001728 <HAL_GPIO_WritePin>
}
 80008b2:	bd08      	pop	{r3, pc}

080008b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b64      	ldr	r3, [pc, #400]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a63      	ldr	r2, [pc, #396]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b61      	ldr	r3, [pc, #388]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	4b5e      	ldr	r3, [pc, #376]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a5d      	ldr	r2, [pc, #372]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b5b      	ldr	r3, [pc, #364]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b58      	ldr	r3, [pc, #352]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a57      	ldr	r2, [pc, #348]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b55      	ldr	r3, [pc, #340]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b52      	ldr	r3, [pc, #328]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a51      	ldr	r2, [pc, #324]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b4f      	ldr	r3, [pc, #316]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b4c      	ldr	r3, [pc, #304]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a4b      	ldr	r2, [pc, #300]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b49      	ldr	r3, [pc, #292]	; (8000a5c <MX_GPIO_Init+0x1a8>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	210f      	movs	r1, #15
 8000946:	4846      	ldr	r0, [pc, #280]	; (8000a60 <MX_GPIO_Init+0x1ac>)
 8000948:	f000 feee 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	211e      	movs	r1, #30
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 fee8 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 800095e:	4841      	ldr	r0, [pc, #260]	; (8000a64 <MX_GPIO_Init+0x1b0>)
 8000960:	f000 fee2 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000964:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000968:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096a:	2303      	movs	r3, #3
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4839      	ldr	r0, [pc, #228]	; (8000a60 <MX_GPIO_Init+0x1ac>)
 800097a:	f000 fd43 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800097e:	230f      	movs	r3, #15
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4832      	ldr	r0, [pc, #200]	; (8000a60 <MX_GPIO_Init+0x1ac>)
 8000996:	f000 fd35 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800099a:	f248 7301 	movw	r3, #34561	; 0x8701
 800099e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a0:	2303      	movs	r3, #3
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f000 fd27 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80009b6:	231e      	movs	r3, #30
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f000 fd18 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80009d4:	2357      	movs	r3, #87	; 0x57
 80009d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	481f      	ldr	r0, [pc, #124]	; (8000a64 <MX_GPIO_Init+0x1b0>)
 80009e8:	f000 fd0c 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80009ec:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 80009f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f2:	2303      	movs	r3, #3
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4818      	ldr	r0, [pc, #96]	; (8000a64 <MX_GPIO_Init+0x1b0>)
 8000a02:	f000 fcff 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a06:	2304      	movs	r3, #4
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MX_GPIO_Init+0x1b4>)
 8000a1a:	f000 fcf3 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000a1e:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480b      	ldr	r0, [pc, #44]	; (8000a64 <MX_GPIO_Init+0x1b0>)
 8000a38:	f000 fce4 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a40:	2303      	movs	r3, #3
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000a50:	f000 fcd8 	bl	8001404 <HAL_GPIO_Init>

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	48000800 	.word	0x48000800
 8000a64:	48000400 	.word	0x48000400
 8000a68:	48000c00 	.word	0x48000c00
 8000a6c:	48001c00 	.word	0x48001c00

08000a70 <Error_Handler>:
/**
 *@brief  This function is executed in case of error occurrence.
 *@retval None
 */
void Error_Handler(void)
{
 8000a70:	b508      	push	{r3, lr}
	/*USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_OK, GPIO_PIN_SET);
 8000a72:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <Error_Handler+0x30>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	4611      	mov	r1, r2
 8000a78:	4620      	mov	r0, r4
 8000a7a:	f000 fe55 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING1, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2102      	movs	r1, #2
 8000a82:	4620      	mov	r0, r4
 8000a84:	f000 fe50 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING2, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f000 fe4b 	bl	8001728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2108      	movs	r1, #8
 8000a96:	4620      	mov	r0, r4
 8000a98:	f000 fe46 	bl	8001728 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
	__disable_irq();
	while (1) {}
 8000a9e:	e7fe      	b.n	8000a9e <Error_Handler+0x2e>
 8000aa0:	48000800 	.word	0x48000800

08000aa4 <_Z18SystemClock_Configv>:
{
 8000aa4:	b500      	push	{lr}
 8000aa6:	b099      	sub	sp, #100	; 0x64
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000aa8:	2248      	movs	r2, #72	; 0x48
 8000aaa:	2100      	movs	r1, #0
 8000aac:	a806      	add	r0, sp, #24
 8000aae:	f001 feed 	bl	800288c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	9302      	str	r3, [sp, #8]
 8000ab8:	9303      	str	r3, [sp, #12]
 8000aba:	9304      	str	r3, [sp, #16]
 8000abc:	9305      	str	r3, [sp, #20]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000abe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ac2:	f000 fe69 	bl	8001798 <HAL_PWREx_ControlVoltageScaling>
 8000ac6:	b9d0      	cbnz	r0, 8000afe <_Z18SystemClock_Configv+0x5a>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000acc:	2301      	movs	r3, #1
 8000ace:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ad4:	2260      	movs	r2, #96	; 0x60
 8000ad6:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad8:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	a806      	add	r0, sp, #24
 8000adc:	f000 ff00 	bl	80018e0 <HAL_RCC_OscConfig>
 8000ae0:	b978      	cbnz	r0, 8000b02 <_Z18SystemClock_Configv+0x5e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	9103      	str	r1, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aec:	9104      	str	r1, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aee:	9105      	str	r1, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af0:	a801      	add	r0, sp, #4
 8000af2:	f001 fb7d 	bl	80021f0 <HAL_RCC_ClockConfig>
 8000af6:	b930      	cbnz	r0, 8000b06 <_Z18SystemClock_Configv+0x62>
}
 8000af8:	b019      	add	sp, #100	; 0x64
 8000afa:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8000afe:	f7ff ffb7 	bl	8000a70 <Error_Handler>
		Error_Handler();
 8000b02:	f7ff ffb5 	bl	8000a70 <Error_Handler>
		Error_Handler();
 8000b06:	f7ff ffb3 	bl	8000a70 <Error_Handler>
	...

08000b0c <main>:
{
 8000b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b10:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
      : CAPACITY(max_size_)
 8000b14:	f04f 0804 	mov.w	r8, #4
 8000b18:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
    /// Constructor.
    //*********************************************************************
    ivector(T* p_buffer_, size_t MAX_SIZE)
      : vector_base(MAX_SIZE)
      , p_buffer(p_buffer_)
      , p_end(p_buffer_)
 8000b1c:	af24      	add	r7, sp, #144	; 0x90
 8000b1e:	9722      	str	r7, [sp, #136]	; 0x88
 8000b20:	9723      	str	r7, [sp, #140]	; 0x8c
	FusesSettings fuses_settings
 8000b22:	ad13      	add	r5, sp, #76	; 0x4c
 8000b24:	2601      	movs	r6, #1
 8000b26:	702e      	strb	r6, [r5, #0]
 8000b28:	706e      	strb	r6, [r5, #1]
 8000b2a:	70ae      	strb	r6, [r5, #2]
 8000b2c:	70ee      	strb	r6, [r5, #3]
 8000b2e:	712e      	strb	r6, [r5, #4]
 8000b30:	716e      	strb	r6, [r5, #5]
 8000b32:	4b54      	ldr	r3, [pc, #336]	; (8000c84 <main+0x178>)
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8000b3a:	889b      	ldrh	r3, [r3, #4]
 8000b3c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 8000b40:	2303      	movs	r3, #3
 8000b42:	732b      	strb	r3, [r5, #12]
 8000b44:	736b      	strb	r3, [r5, #13]
 8000b46:	73ab      	strb	r3, [r5, #14]
 8000b48:	73eb      	strb	r3, [r5, #15]
 8000b4a:	742b      	strb	r3, [r5, #16]
 8000b4c:	746b      	strb	r3, [r5, #17]
 8000b4e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000b52:	826b      	strh	r3, [r5, #18]
 8000b54:	82ab      	strh	r3, [r5, #20]
 8000b56:	82eb      	strh	r3, [r5, #22]
 8000b58:	832b      	strh	r3, [r5, #24]
 8000b5a:	836b      	strh	r3, [r5, #26]
 8000b5c:	83ab      	strh	r3, [r5, #28]
 8000b5e:	2400      	movs	r4, #0
 8000b60:	83ec      	strh	r4, [r5, #30]
 8000b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b66:	842b      	strh	r3, [r5, #32]
 8000b68:	846c      	strh	r4, [r5, #34]	; 0x22
 8000b6a:	84ab      	strh	r3, [r5, #36]	; 0x24
 8000b6c:	84ec      	strh	r4, [r5, #38]	; 0x26
 8000b6e:	852b      	strh	r3, [r5, #40]	; 0x28
 8000b70:	856c      	strh	r4, [r5, #42]	; 0x2a
 8000b72:	85ab      	strh	r3, [r5, #44]	; 0x2c
 8000b74:	85ec      	strh	r4, [r5, #46]	; 0x2e
 8000b76:	862b      	strh	r3, [r5, #48]	; 0x30
 8000b78:	866c      	strh	r4, [r5, #50]	; 0x32
 8000b7a:	86ab      	strh	r3, [r5, #52]	; 0x34
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000b7c:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8000c8c <main+0x180>
 8000b80:	9500      	str	r5, [sp, #0]
 8000b82:	464b      	mov	r3, r9
 8000b84:	2202      	movs	r2, #2
 8000b86:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	f7ff fbeb 	bl	8000366 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000b90:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000b92:	3080      	adds	r0, #128	; 0x80
 8000b94:	9023      	str	r0, [sp, #140]	; 0x8c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000b96:	9500      	str	r5, [sp, #0]
 8000b98:	464b      	mov	r3, r9
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000ba0:	f7ff fbe1 	bl	8000366 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000ba4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000ba6:	3080      	adds	r0, #128	; 0x80
 8000ba8:	9023      	str	r0, [sp, #140]	; 0x8c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000baa:	9500      	str	r5, [sp, #0]
 8000bac:	464b      	mov	r3, r9
 8000bae:	2208      	movs	r2, #8
 8000bb0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000bb4:	f7ff fbd7 	bl	8000366 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000bb8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000bba:	3080      	adds	r0, #128	; 0x80
 8000bbc:	9023      	str	r0, [sp, #140]	; 0x8c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000bbe:	9500      	str	r5, [sp, #0]
 8000bc0:	464b      	mov	r3, r9
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000bc8:	f7ff fbcd 	bl	8000366 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000bcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000bce:	3380      	adds	r3, #128	; 0x80
 8000bd0:	9323      	str	r3, [sp, #140]	; 0x8c
	GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 8000bd2:	4d2d      	ldr	r5, [pc, #180]	; (8000c88 <main+0x17c>)
 8000bd4:	4633      	mov	r3, r6
 8000bd6:	4632      	mov	r2, r6
 8000bd8:	4629      	mov	r1, r5
 8000bda:	a80f      	add	r0, sp, #60	; 0x3c
 8000bdc:	f7ff fe50 	bl	8000880 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
	GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 8000be0:	4633      	mov	r3, r6
 8000be2:	2202      	movs	r2, #2
 8000be4:	4629      	mov	r1, r5
 8000be6:	a80b      	add	r0, sp, #44	; 0x2c
 8000be8:	f7ff fe4a 	bl	8000880 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
	GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 8000bec:	4633      	mov	r3, r6
 8000bee:	4642      	mov	r2, r8
 8000bf0:	4629      	mov	r1, r5
 8000bf2:	a807      	add	r0, sp, #28
 8000bf4:	f7ff fe44 	bl	8000880 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
	GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 8000bf8:	4633      	mov	r3, r6
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	a803      	add	r0, sp, #12
 8000c00:	f7ff fe3e 	bl	8000880 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
	HAL_Init();
 8000c04:	f000 f983 	bl	8000f0e <HAL_Init>
	SystemClock_Config();
 8000c08:	f7ff ff4c 	bl	8000aa4 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8000c0c:	f7ff fe52 	bl	80008b4 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000c10:	f7ff faf4 	bl	80001fc <MX_CAN1_Init>
	MX_SPI1_Init();
 8000c14:	f000 f848 	bl	8000ca8 <MX_SPI1_Init>
      return p_buffer[i];
 8000c18:	9822      	ldr	r0, [sp, #136]	; 0x88
	sf_handler.smart_fuses[1].init();
 8000c1a:	3080      	adds	r0, #128	; 0x80
 8000c1c:	f7ff fc6a 	bl	80004f4 <_ZN9SmartFuse4initEv>
	led_ok.activate();
 8000c20:	a80f      	add	r0, sp, #60	; 0x3c
 8000c22:	f7ff fe37 	bl	8000894 <_ZN14GpioOutElement8activateEv>
	led_warning_1.deactivate();
 8000c26:	a80b      	add	r0, sp, #44	; 0x2c
 8000c28:	f7ff fe3d 	bl	80008a6 <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8000c2c:	a807      	add	r0, sp, #28
 8000c2e:	f7ff fe3a 	bl	80008a6 <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 8000c32:	a803      	add	r0, sp, #12
 8000c34:	f7ff fe37 	bl	80008a6 <_ZN14GpioOutElement10deactivateEv>
	Timer tim;
 8000c38:	a802      	add	r0, sp, #8
 8000c3a:	f000 f92b 	bl	8000e94 <_ZN5TimerC1Ev>
	bool tog = false;
 8000c3e:	e005      	b.n	8000c4c <main+0x140>
 		if(tim.getPassedTime() >= 1000)
 8000c40:	a802      	add	r0, sp, #8
 8000c42:	f000 f92e 	bl	8000ea2 <_ZN5Timer13getPassedTimeEv>
 8000c46:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c4a:	d20d      	bcs.n	8000c68 <main+0x15c>
 8000c4c:	9822      	ldr	r0, [sp, #136]	; 0x88
		sf_handler.smart_fuses[1].handle();
 8000c4e:	3080      	adds	r0, #128	; 0x80
 8000c50:	f7ff fd6e 	bl	8000730 <_ZN9SmartFuse6handleEv>
 8000c54:	9822      	ldr	r0, [sp, #136]	; 0x88
		state = sf_handler.smart_fuses[1].getSmartFuseState();
 8000c56:	3080      	adds	r0, #128	; 0x80
 8000c58:	f7ff fbe2 	bl	8000420 <_ZN9SmartFuse17getSmartFuseStateEv>
		if(state != SmartFuseState::Ok ) led_error.activate();
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d0ef      	beq.n	8000c40 <main+0x134>
 8000c60:	a803      	add	r0, sp, #12
 8000c62:	f7ff fe17 	bl	8000894 <_ZN14GpioOutElement8activateEv>
 8000c66:	e7eb      	b.n	8000c40 <main+0x134>
			if (tog)
 8000c68:	b134      	cbz	r4, 8000c78 <main+0x16c>
 8000c6a:	9822      	ldr	r0, [sp, #136]	; 0x88
				sf_handler.smart_fuses[1].activeAllFuses();
 8000c6c:	3080      	adds	r0, #128	; 0x80
 8000c6e:	f7ff fda5 	bl	80007bc <_ZN9SmartFuse14activeAllFusesEv>
			tog = !tog;
 8000c72:	f084 0401 	eor.w	r4, r4, #1
 8000c76:	e7e9      	b.n	8000c4c <main+0x140>
 8000c78:	9822      	ldr	r0, [sp, #136]	; 0x88
				sf_handler.smart_fuses[1].deactivateAllFuses();
 8000c7a:	3080      	adds	r0, #128	; 0x80
 8000c7c:	f7ff fdc1 	bl	8000802 <_ZN9SmartFuse18deactivateAllFusesEv>
 8000c80:	e7f7      	b.n	8000c72 <main+0x166>
 8000c82:	bf00      	nop
 8000c84:	0800296c 	.word	0x0800296c
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	200000bc 	.word	0x200000bc

08000c90 <_GLOBAL__sub_I_fuse_watch_dog>:

	/*USER CODE END Error_Handler_Debug */
}
 8000c90:	b508      	push	{r3, lr}
Timer fuse_watch_dog;
 8000c92:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <_GLOBAL__sub_I_fuse_watch_dog+0x10>)
 8000c94:	f000 f8fe 	bl	8000e94 <_ZN5TimerC1Ev>
Timer fuses_cotrol;
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <_GLOBAL__sub_I_fuse_watch_dog+0x14>)
 8000c9a:	f000 f8fb 	bl	8000e94 <_ZN5TimerC1Ev>
}
 8000c9e:	bd08      	pop	{r3, pc}
 8000ca0:	200000b4 	.word	0x200000b4
 8000ca4:	200000b8 	.word	0x200000b8

08000ca8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cae:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cde:	2210      	movs	r2, #16
 8000ce0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d06:	4810      	ldr	r0, [pc, #64]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000d08:	f001 fcec 	bl	80026e4 <HAL_SPI_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f7ff fead 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d24:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d30:	2b40      	cmp	r3, #64	; 0x40
 8000d32:	d007      	beq.n	8000d44 <MX_SPI1_Init+0x9c>
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <MX_SPI1_Init+0xa0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d42:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200000bc 	.word	0x200000bc
 8000d4c:	40013000 	.word	0x40013000

08000d50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_SPI_MspInit+0x7c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d128      	bne.n	8000dc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_SPI_MspInit+0x80>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000da2:	23e0      	movs	r3, #224	; 0xe0
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db2:	2305      	movs	r3, #5
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f000 fb20 	bl	8001404 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40013000 	.word	0x40013000
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x44>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_MspInit+0x44>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6613      	str	r3, [r2, #96]	; 0x60
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_MspInit+0x44>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x44>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_MspInit+0x44>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_MspInit+0x44>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f8a6 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <SystemInit+0x20>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <SystemInit+0x20>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 8000e94:	b510      	push	{r4, lr}
 8000e96:	4604      	mov	r4, r0
{
	this->start_time = HAL_GetTick();
 8000e98:	f000 f8a2 	bl	8000fe0 <HAL_GetTick>
 8000e9c:	6020      	str	r0, [r4, #0]
}
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	bd10      	pop	{r4, pc}

08000ea2 <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 8000ea2:	b510      	push	{r4, lr}
 8000ea4:	4604      	mov	r4, r0
	return HAL_GetTick() - this->start_time;
 8000ea6:	f000 f89b 	bl	8000fe0 <HAL_GetTick>
 8000eaa:	6823      	ldr	r3, [r4, #0]
}
 8000eac:	1ac0      	subs	r0, r0, r3
 8000eae:	bd10      	pop	{r4, pc}

08000eb0 <_ZN5Timer7restartEv>:

void Timer::restart()
{
 8000eb0:	b510      	push	{r4, lr}
 8000eb2:	4604      	mov	r4, r0
	this->start_time = HAL_GetTick();
 8000eb4:	f000 f894 	bl	8000fe0 <HAL_GetTick>
 8000eb8:	6020      	str	r0, [r4, #0]
}
 8000eba:	bd10      	pop	{r4, pc}

08000ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec0:	f7ff ffd6 	bl	8000e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eea:	f001 fca3 	bl	8002834 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eee:	f7ff fe0d 	bl	8000b0c <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f00:	080029e0 	.word	0x080029e0
  ldr r2, =_sbss
 8000f04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f08:	2000012c 	.word	0x2000012c

08000f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_2_IRQHandler>

08000f0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 fa3f 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f000 f80e 	bl	8000f40 <HAL_InitTick>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	e001      	b.n	8000f34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f30:	f7ff ff50 	bl	8000dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_InitTick+0x6c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d023      	beq.n	8000f9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_InitTick+0x70>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_InitTick+0x6c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fa3d 	bl	80013ea <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10f      	bne.n	8000f96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d809      	bhi.n	8000f90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 fa15 	bl	80013b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_InitTick+0x74>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e007      	b.n	8000fa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e004      	b.n	8000fa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e001      	b.n	8000fa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000120 	.word	0x20000120

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000120 	.word	0x20000120

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e0ed      	b.n	800122e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff f900 	bl	8000264 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001074:	f7ff ffb4 	bl	8000fe0 <HAL_GetTick>
 8001078:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800107a:	e012      	b.n	80010a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800107c:	f7ff ffb0 	bl	8000fe0 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b0a      	cmp	r3, #10
 8001088:	d90b      	bls.n	80010a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2205      	movs	r2, #5
 800109a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0c5      	b.n	800122e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0e5      	beq.n	800107c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0202 	bic.w	r2, r2, #2
 80010be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c0:	f7ff ff8e 	bl	8000fe0 <HAL_GetTick>
 80010c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010c6:	e012      	b.n	80010ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c8:	f7ff ff8a 	bl	8000fe0 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	d90b      	bls.n	80010ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2205      	movs	r2, #5
 80010e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e09f      	b.n	800122e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e5      	bne.n	80010c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7e1b      	ldrb	r3, [r3, #24]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d108      	bne.n	8001116 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e007      	b.n	8001126 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7e5b      	ldrb	r3, [r3, #25]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d108      	bne.n	8001140 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e007      	b.n	8001150 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800114e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7e9b      	ldrb	r3, [r3, #26]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d108      	bne.n	800116a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0220 	orr.w	r2, r2, #32
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e007      	b.n	800117a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0220 	bic.w	r2, r2, #32
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7edb      	ldrb	r3, [r3, #27]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0210 	bic.w	r2, r2, #16
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e007      	b.n	80011a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0210 	orr.w	r2, r2, #16
 80011a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7f1b      	ldrb	r3, [r3, #28]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d108      	bne.n	80011be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0208 	orr.w	r2, r2, #8
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e007      	b.n	80011ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0208 	bic.w	r2, r2, #8
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7f5b      	ldrb	r3, [r3, #29]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d108      	bne.n	80011e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0204 	orr.w	r2, r2, #4
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e007      	b.n	80011f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0204 	bic.w	r2, r2, #4
 80011f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	ea42 0103 	orr.w	r1, r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	1e5a      	subs	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff47 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff5c 	bl	8001280 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffb0 	bl	8001358 <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	e166      	b.n	80016e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8158 	beq.w	80016dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d005      	beq.n	8001444 <HAL_GPIO_Init+0x40>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d130      	bne.n	80014a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147a:	2201      	movs	r2, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f003 0201 	and.w	r2, r3, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d017      	beq.n	80014e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d123      	bne.n	8001536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	08da      	lsrs	r2, r3, #3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3208      	adds	r2, #8
 8001530:	6939      	ldr	r1, [r7, #16]
 8001532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0203 	and.w	r2, r3, #3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80b2 	beq.w	80016dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001578:	4b61      	ldr	r3, [pc, #388]	; (8001700 <HAL_GPIO_Init+0x2fc>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157c:	4a60      	ldr	r2, [pc, #384]	; (8001700 <HAL_GPIO_Init+0x2fc>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6613      	str	r3, [r2, #96]	; 0x60
 8001584:	4b5e      	ldr	r3, [pc, #376]	; (8001700 <HAL_GPIO_Init+0x2fc>)
 8001586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001590:	4a5c      	ldr	r2, [pc, #368]	; (8001704 <HAL_GPIO_Init+0x300>)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ba:	d02b      	beq.n	8001614 <HAL_GPIO_Init+0x210>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_GPIO_Init+0x304>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d025      	beq.n	8001610 <HAL_GPIO_Init+0x20c>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a51      	ldr	r2, [pc, #324]	; (800170c <HAL_GPIO_Init+0x308>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d01f      	beq.n	800160c <HAL_GPIO_Init+0x208>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a50      	ldr	r2, [pc, #320]	; (8001710 <HAL_GPIO_Init+0x30c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d019      	beq.n	8001608 <HAL_GPIO_Init+0x204>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x310>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d013      	beq.n	8001604 <HAL_GPIO_Init+0x200>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_GPIO_Init+0x314>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00d      	beq.n	8001600 <HAL_GPIO_Init+0x1fc>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a4d      	ldr	r2, [pc, #308]	; (800171c <HAL_GPIO_Init+0x318>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d007      	beq.n	80015fc <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x31c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d101      	bne.n	80015f8 <HAL_GPIO_Init+0x1f4>
 80015f4:	2307      	movs	r3, #7
 80015f6:	e00e      	b.n	8001616 <HAL_GPIO_Init+0x212>
 80015f8:	2308      	movs	r3, #8
 80015fa:	e00c      	b.n	8001616 <HAL_GPIO_Init+0x212>
 80015fc:	2306      	movs	r3, #6
 80015fe:	e00a      	b.n	8001616 <HAL_GPIO_Init+0x212>
 8001600:	2305      	movs	r3, #5
 8001602:	e008      	b.n	8001616 <HAL_GPIO_Init+0x212>
 8001604:	2304      	movs	r3, #4
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x212>
 8001608:	2303      	movs	r3, #3
 800160a:	e004      	b.n	8001616 <HAL_GPIO_Init+0x212>
 800160c:	2302      	movs	r3, #2
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x212>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_GPIO_Init+0x212>
 8001614:	2300      	movs	r3, #0
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	f002 0203 	and.w	r2, r2, #3
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	4093      	lsls	r3, r2
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001626:	4937      	ldr	r1, [pc, #220]	; (8001704 <HAL_GPIO_Init+0x300>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001634:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <HAL_GPIO_Init+0x320>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001658:	4a32      	ldr	r2, [pc, #200]	; (8001724 <HAL_GPIO_Init+0x320>)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800165e:	4b31      	ldr	r3, [pc, #196]	; (8001724 <HAL_GPIO_Init+0x320>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001682:	4a28      	ldr	r2, [pc, #160]	; (8001724 <HAL_GPIO_Init+0x320>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001688:	4b26      	ldr	r3, [pc, #152]	; (8001724 <HAL_GPIO_Init+0x320>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ac:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <HAL_GPIO_Init+0x320>)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <HAL_GPIO_Init+0x320>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016d6:	4a13      	ldr	r2, [pc, #76]	; (8001724 <HAL_GPIO_Init+0x320>)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3301      	adds	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f ae91 	bne.w	8001414 <HAL_GPIO_Init+0x10>
  }
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000
 8001708:	48000400 	.word	0x48000400
 800170c:	48000800 	.word	0x48000800
 8001710:	48000c00 	.word	0x48000c00
 8001714:	48001000 	.word	0x48001000
 8001718:	48001400 	.word	0x48001400
 800171c:	48001800 	.word	0x48001800
 8001720:	48001c00 	.word	0x48001c00
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001744:	e002      	b.n	800174c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_PWREx_GetVoltageRange+0x3c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001768:	d102      	bne.n	8001770 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800176a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176e:	e00b      	b.n	8001788 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177e:	d102      	bne.n	8001786 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001784:	e000      	b.n	8001788 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001786:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40007000 	.word	0x40007000

08001798 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d141      	bne.n	800182a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017a6:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b2:	d131      	bne.n	8001818 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017b4:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ba:	4a46      	ldr	r2, [pc, #280]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017cc:	4a41      	ldr	r2, [pc, #260]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017d4:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2232      	movs	r2, #50	; 0x32
 80017da:	fb02 f303 	mul.w	r3, r2, r3
 80017de:	4a3f      	ldr	r2, [pc, #252]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	0c9b      	lsrs	r3, r3, #18
 80017e6:	3301      	adds	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ea:	e002      	b.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f2:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d102      	bne.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f2      	bne.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001812:	d158      	bne.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e057      	b.n	80018c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800181e:	4a2d      	ldr	r2, [pc, #180]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001824:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001828:	e04d      	b.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001830:	d141      	bne.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800183a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800183e:	d131      	bne.n	80018a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001846:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001858:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2232      	movs	r2, #50	; 0x32
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	0c9b      	lsrs	r3, r3, #18
 8001872:	3301      	adds	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001876:	e002      	b.n	800187e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3b01      	subs	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d102      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f2      	bne.n	8001878 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189e:	d112      	bne.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e011      	b.n	80018c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018b4:	e007      	b.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40007000 	.word	0x40007000
 80018d8:	20000000 	.word	0x20000000
 80018dc:	431bde83 	.word	0x431bde83

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f000 bc76 	b.w	80021e0 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f4:	4b97      	ldr	r3, [pc, #604]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018fe:	4b95      	ldr	r3, [pc, #596]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80e6 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_RCC_OscConfig+0x4c>
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	2b0c      	cmp	r3, #12
 8001920:	f040 808d 	bne.w	8001a3e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b01      	cmp	r3, #1
 8001928:	f040 8089 	bne.w	8001a3e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800192c:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_RCC_OscConfig+0x66>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	f000 bc4d 	b.w	80021e0 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	4b82      	ldr	r3, [pc, #520]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d004      	beq.n	8001960 <HAL_RCC_OscConfig+0x80>
 8001956:	4b7f      	ldr	r3, [pc, #508]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800195e:	e005      	b.n	800196c <HAL_RCC_OscConfig+0x8c>
 8001960:	4b7c      	ldr	r3, [pc, #496]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196c:	4293      	cmp	r3, r2
 800196e:	d224      	bcs.n	80019ba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fdf3 	bl	8002560 <RCC_SetFlashLatencyFromMSIRange>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	f000 bc2d 	b.w	80021e0 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001986:	4b73      	ldr	r3, [pc, #460]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a72      	ldr	r2, [pc, #456]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b70      	ldr	r3, [pc, #448]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	496d      	ldr	r1, [pc, #436]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a4:	4b6b      	ldr	r3, [pc, #428]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	4968      	ldr	r1, [pc, #416]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
 80019b8:	e025      	b.n	8001a06 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ba:	4b66      	ldr	r3, [pc, #408]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a65      	ldr	r2, [pc, #404]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	4960      	ldr	r1, [pc, #384]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d8:	4b5e      	ldr	r3, [pc, #376]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	495b      	ldr	r1, [pc, #364]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fdb2 	bl	8002560 <RCC_SetFlashLatencyFromMSIRange>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e3ec      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a06:	f000 fd1f 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b51      	ldr	r3, [pc, #324]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	4950      	ldr	r1, [pc, #320]	; (8001b58 <HAL_RCC_OscConfig+0x278>)
 8001a18:	5ccb      	ldrb	r3, [r1, r3]
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a22:	4a4e      	ldr	r2, [pc, #312]	; (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001a24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a26:	4b4e      	ldr	r3, [pc, #312]	; (8001b60 <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fa88 	bl	8000f40 <HAL_InitTick>
 8001a30:	4603      	mov	r3, r0
 8001a32:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d052      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	e3d0      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d032      	beq.n	8001aac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a46:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a42      	ldr	r2, [pc, #264]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a52:	f7ff fac5 	bl	8000fe0 <HAL_GetTick>
 8001a56:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fac1 	bl	8000fe0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e3b9      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a6c:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a35      	ldr	r2, [pc, #212]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	4930      	ldr	r1, [pc, #192]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a96:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	492b      	ldr	r1, [pc, #172]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
 8001aaa:	e01a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aac:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a28      	ldr	r2, [pc, #160]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fa92 	bl	8000fe0 <HAL_GetTick>
 8001abc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fa8e 	bl	8000fe0 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e386      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1e0>
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ae0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d073      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_OscConfig+0x220>
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d10e      	bne.n	8001b18 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d10b      	bne.n	8001b18 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d063      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x2f4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d15f      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e363      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d106      	bne.n	8001b30 <HAL_RCC_OscConfig+0x250>
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e025      	b.n	8001b7c <HAL_RCC_OscConfig+0x29c>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d114      	bne.n	8001b64 <HAL_RCC_OscConfig+0x284>
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a02      	ldr	r2, [pc, #8]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e013      	b.n	8001b7c <HAL_RCC_OscConfig+0x29c>
 8001b54:	40021000 	.word	0x40021000
 8001b58:	08002994 	.word	0x08002994
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004
 8001b64:	4b8f      	ldr	r3, [pc, #572]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a8e      	ldr	r2, [pc, #568]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b8c      	ldr	r3, [pc, #560]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a8b      	ldr	r2, [pc, #556]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff fa2c 	bl	8000fe0 <HAL_GetTick>
 8001b88:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fa28 	bl	8000fe0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e320      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9e:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2ac>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fa18 	bl	8000fe0 <HAL_GetTick>
 8001bb0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fa14 	bl	8000fe0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e30c      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc6:	4b77      	ldr	r3, [pc, #476]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2d4>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d060      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x314>
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d119      	bne.n	8001c22 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d116      	bne.n	8001c22 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf4:	4b6b      	ldr	r3, [pc, #428]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_OscConfig+0x32c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e2e9      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	061b      	lsls	r3, r3, #24
 8001c1a:	4962      	ldr	r1, [pc, #392]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c20:	e040      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d023      	beq.n	8001c72 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2a:	4b5e      	ldr	r3, [pc, #376]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff f9d3 	bl	8000fe0 <HAL_GetTick>
 8001c3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff f9cf 	bl	8000fe0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e2c7      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c50:	4b54      	ldr	r3, [pc, #336]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b51      	ldr	r3, [pc, #324]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	494e      	ldr	r1, [pc, #312]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
 8001c70:	e018      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f9af 	bl	8000fe0 <HAL_GetTick>
 8001c82:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c86:	f7ff f9ab 	bl	8000fe0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e2a3      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c98:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8082 	beq.w	8001db6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d05f      	beq.n	8001d7a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d037      	beq.n	8001d40 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e27b      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d01b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf8:	4a2a      	ldr	r2, [pc, #168]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d02:	f7ff f96d 	bl	8000fe0 <HAL_GetTick>
 8001d06:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0a:	f7ff f969 	bl	8000fe0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b11      	cmp	r3, #17
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e261      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ef      	bne.n	8001d0a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d30:	f023 0210 	bic.w	r2, r3, #16
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	491a      	ldr	r1, [pc, #104]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d46:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff f946 	bl	8000fe0 <HAL_GetTick>
 8001d54:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff f942 	bl	8000fe0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b11      	cmp	r3, #17
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e23a      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ef      	beq.n	8001d58 <HAL_RCC_OscConfig+0x478>
 8001d78:	e01d      	b.n	8001db6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d80:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8a:	f7ff f929 	bl	8000fe0 <HAL_GetTick>
 8001d8e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d92:	f7ff f925 	bl	8000fe0 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b11      	cmp	r3, #17
 8001d9e:	d903      	bls.n	8001da8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e21d      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
 8001da4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da8:	4b83      	ldr	r3, [pc, #524]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1ed      	bne.n	8001d92 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80bd 	beq.w	8001f3e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dca:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10e      	bne.n	8001df4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b78      	ldr	r3, [pc, #480]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	4a77      	ldr	r2, [pc, #476]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6593      	str	r3, [r2, #88]	; 0x58
 8001de2:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df4:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <HAL_RCC_OscConfig+0x6dc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d118      	bne.n	8001e32 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e00:	4b6e      	ldr	r3, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x6dc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a6d      	ldr	r2, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x6dc>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff f8e8 	bl	8000fe0 <HAL_GetTick>
 8001e10:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e14:	f7ff f8e4 	bl	8000fe0 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e1dc      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e26:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_RCC_OscConfig+0x6dc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d02c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001e3e:	4b5e      	ldr	r3, [pc, #376]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e44:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	4959      	ldr	r1, [pc, #356]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d010      	beq.n	8001e86 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e64:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e74:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	4a4f      	ldr	r2, [pc, #316]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e84:	e018      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e86:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8c:	4a4a      	ldr	r2, [pc, #296]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e96:	e00f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e98:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	4a46      	ldr	r2, [pc, #280]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ea8:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eae:	4a42      	ldr	r2, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d016      	beq.n	8001eee <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7ff f88e 	bl	8000fe0 <HAL_GetTick>
 8001ec4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7ff f88a 	bl	8000fe0 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e180      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ede:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ed      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x5e8>
 8001eec:	e01d      	b.n	8001f2a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7ff f877 	bl	8000fe0 <HAL_GetTick>
 8001ef2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7ff f873 	bl	8000fe0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e169      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ed      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d041      	beq.n	8001fce <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f58:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff f83d 	bl	8000fe0 <HAL_GetTick>
 8001f66:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f6a:	f7ff f839 	bl	8000fe0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e131      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0ef      	beq.n	8001f6a <HAL_RCC_OscConfig+0x68a>
 8001f8a:	e020      	b.n	8001fce <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_RCC_OscConfig+0x6d8>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7ff f820 	bl	8000fe0 <HAL_GetTick>
 8001fa0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fa2:	e00d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fa4:	f7ff f81c 	bl	8000fe0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d906      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e114      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fc0:	4b89      	ldr	r3, [pc, #548]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 8001fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ea      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8103 	beq.w	80021de <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	f040 80cb 	bne.w	8002178 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fe2:	4b81      	ldr	r3, [pc, #516]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0203 	and.w	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d12c      	bne.n	8002050 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002000:	3b01      	subs	r3, #1
 8002002:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d123      	bne.n	8002050 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d11b      	bne.n	8002050 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002022:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d113      	bne.n	8002050 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	085b      	lsrs	r3, r3, #1
 8002034:	3b01      	subs	r3, #1
 8002036:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d109      	bne.n	8002050 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	3b01      	subs	r3, #1
 800204a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d06d      	beq.n	800212c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d068      	beq.n	8002128 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002056:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002062:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0b6      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002072:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a5c      	ldr	r2, [pc, #368]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 8002078:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800207c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800207e:	f7fe ffaf 	bl	8000fe0 <HAL_GetTick>
 8002082:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7fe ffab 	bl	8000fe0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0a3      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a4:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	4b50      	ldr	r3, [pc, #320]	; (80021ec <HAL_RCC_OscConfig+0x90c>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020b4:	3a01      	subs	r2, #1
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	4311      	orrs	r1, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020be:	0212      	lsls	r2, r2, #8
 80020c0:	4311      	orrs	r1, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020c6:	0852      	lsrs	r2, r2, #1
 80020c8:	3a01      	subs	r2, #1
 80020ca:	0552      	lsls	r2, r2, #21
 80020cc:	4311      	orrs	r1, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020d2:	0852      	lsrs	r2, r2, #1
 80020d4:	3a01      	subs	r2, #1
 80020d6:	0652      	lsls	r2, r2, #25
 80020d8:	4311      	orrs	r1, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020de:	06d2      	lsls	r2, r2, #27
 80020e0:	430a      	orrs	r2, r1
 80020e2:	4941      	ldr	r1, [pc, #260]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020e8:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a3e      	ldr	r2, [pc, #248]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 80020ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f4:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a3b      	ldr	r2, [pc, #236]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 80020fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002100:	f7fe ff6e 	bl	8000fe0 <HAL_GetTick>
 8002104:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7fe ff6a 	bl	8000fe0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e062      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002126:	e05a      	b.n	80021de <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e059      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212c:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d152      	bne.n	80021de <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002150:	f7fe ff46 	bl	8000fe0 <HAL_GetTick>
 8002154:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe ff42 	bl	8000fe0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e03a      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x878>
 8002176:	e032      	b.n	80021de <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d02d      	beq.n	80021da <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 8002184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002188:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d105      	bne.n	80021a2 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 800219c:	f023 0303 	bic.w	r3, r3, #3
 80021a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 80021a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe ff15 	bl	8000fe0 <HAL_GetTick>
 80021b6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe ff11 	bl	8000fe0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e009      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_OscConfig+0x908>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x8da>
 80021d8:	e001      	b.n	80021de <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	019d800c 	.word	0x019d800c

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e10f      	b.n	8002428 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b89      	ldr	r3, [pc, #548]	; (8002430 <HAL_RCC_ClockConfig+0x240>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b86      	ldr	r3, [pc, #536]	; (8002430 <HAL_RCC_ClockConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 020f 	bic.w	r2, r3, #15
 800221e:	4984      	ldr	r1, [pc, #528]	; (8002430 <HAL_RCC_ClockConfig+0x240>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <HAL_RCC_ClockConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0f7      	b.n	8002428 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8089 	beq.w	8002358 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d133      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224e:	4b79      	ldr	r3, [pc, #484]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0e4      	b.n	8002428 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800225e:	f000 f9d9 	bl	8002614 <RCC_GetSysClockFreqFromPLLSource>
 8002262:	4603      	mov	r3, r0
 8002264:	4a74      	ldr	r2, [pc, #464]	; (8002438 <HAL_RCC_ClockConfig+0x248>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d955      	bls.n	8002316 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800226a:	4b72      	ldr	r3, [pc, #456]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10a      	bne.n	800228c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002276:	4b6f      	ldr	r3, [pc, #444]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800227e:	4a6d      	ldr	r2, [pc, #436]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002284:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e044      	b.n	8002316 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d03e      	beq.n	8002316 <HAL_RCC_ClockConfig+0x126>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d13a      	bne.n	8002316 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022a0:	4b64      	ldr	r3, [pc, #400]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a8:	4a62      	ldr	r2, [pc, #392]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 80022aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e02f      	b.n	8002316 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022be:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d115      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0ac      	b.n	8002428 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d6:	4b57      	ldr	r3, [pc, #348]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0a0      	b.n	8002428 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e6:	4b53      	ldr	r3, [pc, #332]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e098      	b.n	8002428 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80022f6:	f000 f8a7 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a4e      	ldr	r2, [pc, #312]	; (8002438 <HAL_RCC_ClockConfig+0x248>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d909      	bls.n	8002316 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002302:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800230a:	4a4a      	ldr	r2, [pc, #296]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4944      	ldr	r1, [pc, #272]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002328:	f7fe fe5a 	bl	8000fe0 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7fe fe56 	bl	8000fe0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e070      	b.n	8002428 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d009      	beq.n	8002378 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b33      	ldr	r3, [pc, #204]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4930      	ldr	r1, [pc, #192]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
 8002376:	e008      	b.n	800238a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b80      	cmp	r3, #128	; 0x80
 800237c:	d105      	bne.n	800238a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800237e:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	4a2c      	ldr	r2, [pc, #176]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002388:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_RCC_ClockConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d210      	bcs.n	80023ba <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_RCC_ClockConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 020f 	bic.w	r2, r3, #15
 80023a0:	4923      	ldr	r1, [pc, #140]	; (8002430 <HAL_RCC_ClockConfig+0x240>)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_RCC_ClockConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e036      	b.n	8002428 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4918      	ldr	r1, [pc, #96]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4910      	ldr	r1, [pc, #64]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f8:	f000 f826 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_RCC_ClockConfig+0x244>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	490c      	ldr	r1, [pc, #48]	; (800243c <HAL_RCC_ClockConfig+0x24c>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x250>)
 8002416:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x254>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fd8f 	bl	8000f40 <HAL_InitTick>
 8002422:	4603      	mov	r3, r0
 8002424:	73fb      	strb	r3, [r7, #15]

  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40022000 	.word	0x40022000
 8002434:	40021000 	.word	0x40021000
 8002438:	04c4b400 	.word	0x04c4b400
 800243c:	08002994 	.word	0x08002994
 8002440:	20000000 	.word	0x20000000
 8002444:	20000004 	.word	0x20000004

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x34>
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d121      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d11e      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a4:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e004      	b.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_RCC_GetSysClockFreq+0x114>)
 80024ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d134      	bne.n	8002540 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0xa6>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d003      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0xac>
 80024ec:	e005      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_RCC_GetSysClockFreq+0x110>)
 80024f0:	617b      	str	r3, [r7, #20]
      break;
 80024f2:	e005      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_RCC_GetSysClockFreq+0x114>)
 80024f6:	617b      	str	r3, [r7, #20]
      break;
 80024f8:	e002      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	617b      	str	r3, [r7, #20]
      break;
 80024fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3301      	adds	r3, #1
 800250c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	fb03 f202 	mul.w	r2, r3, r2
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_RCC_GetSysClockFreq+0x108>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	0e5b      	lsrs	r3, r3, #25
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	3301      	adds	r3, #1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002540:	69bb      	ldr	r3, [r7, #24]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	080029a4 	.word	0x080029a4
 8002558:	00f42400 	.word	0x00f42400
 800255c:	007a1200 	.word	0x007a1200

08002560 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002578:	f7ff f8ee 	bl	8001758 <HAL_PWREx_GetVoltageRange>
 800257c:	6178      	str	r0, [r7, #20]
 800257e:	e014      	b.n	80025aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	4a21      	ldr	r2, [pc, #132]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258a:	6593      	str	r3, [r2, #88]	; 0x58
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002598:	f7ff f8de 	bl	8001758 <HAL_PWREx_GetVoltageRange>
 800259c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800259e:	4b1b      	ldr	r3, [pc, #108]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	4a1a      	ldr	r2, [pc, #104]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b0:	d10b      	bne.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b80      	cmp	r3, #128	; 0x80
 80025b6:	d913      	bls.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2ba0      	cmp	r3, #160	; 0xa0
 80025bc:	d902      	bls.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025be:	2302      	movs	r3, #2
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	e00d      	b.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c4:	2301      	movs	r3, #1
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	e00a      	b.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b7f      	cmp	r3, #127	; 0x7f
 80025ce:	d902      	bls.n	80025d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80025d0:	2302      	movs	r3, #2
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	e004      	b.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b70      	cmp	r3, #112	; 0x70
 80025da:	d101      	bne.n	80025e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025dc:	2301      	movs	r3, #1
 80025de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 020f 	bic.w	r2, r3, #15
 80025e8:	4909      	ldr	r1, [pc, #36]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d001      	beq.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	40022000 	.word	0x40022000

08002614 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800261e:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d118      	bne.n	800265c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800262a:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d107      	bne.n	8002646 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e005      	b.n	8002652 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002646:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002652:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d003      	beq.n	8002674 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d003      	beq.n	800267a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002672:	e005      	b.n	8002680 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002676:	613b      	str	r3, [r7, #16]
    break;
 8002678:	e005      	b.n	8002686 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800267c:	613b      	str	r3, [r7, #16]
    break;
 800267e:	e002      	b.n	8002686 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
    break;
 8002684:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	091b      	lsrs	r3, r3, #4
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	3301      	adds	r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	fb03 f202 	mul.w	r2, r3, r2
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0e5b      	lsrs	r3, r3, #25
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	3301      	adds	r3, #1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80026c6:	683b      	ldr	r3, [r7, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40021000 	.word	0x40021000
 80026d8:	080029a4 	.word	0x080029a4
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	007a1200 	.word	0x007a1200

080026e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e095      	b.n	8002822 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d108      	bne.n	8002710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002706:	d009      	beq.n	800271c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
 800270e:	e005      	b.n	800271c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fb0a 	bl	8000d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002752:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800275c:	d902      	bls.n	8002764 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e002      	b.n	800276a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002768:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002772:	d007      	beq.n	8002784 <HAL_SPI_Init+0xa0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800277c:	d002      	beq.n	8002784 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	ea42 0103 	orr.w	r1, r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	0c1b      	lsrs	r3, r3, #16
 80027e0:	f003 0204 	and.w	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002800:	ea42 0103 	orr.w	r1, r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <_ZdlPvj>:
 800282a:	f000 b800 	b.w	800282e <_ZdlPv>

0800282e <_ZdlPv>:
 800282e:	f000 b825 	b.w	800287c <free>
	...

08002834 <__libc_init_array>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	4d0d      	ldr	r5, [pc, #52]	; (800286c <__libc_init_array+0x38>)
 8002838:	4c0d      	ldr	r4, [pc, #52]	; (8002870 <__libc_init_array+0x3c>)
 800283a:	1b64      	subs	r4, r4, r5
 800283c:	10a4      	asrs	r4, r4, #2
 800283e:	2600      	movs	r6, #0
 8002840:	42a6      	cmp	r6, r4
 8002842:	d109      	bne.n	8002858 <__libc_init_array+0x24>
 8002844:	4d0b      	ldr	r5, [pc, #44]	; (8002874 <__libc_init_array+0x40>)
 8002846:	4c0c      	ldr	r4, [pc, #48]	; (8002878 <__libc_init_array+0x44>)
 8002848:	f000 f882 	bl	8002950 <_init>
 800284c:	1b64      	subs	r4, r4, r5
 800284e:	10a4      	asrs	r4, r4, #2
 8002850:	2600      	movs	r6, #0
 8002852:	42a6      	cmp	r6, r4
 8002854:	d105      	bne.n	8002862 <__libc_init_array+0x2e>
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	f855 3b04 	ldr.w	r3, [r5], #4
 800285c:	4798      	blx	r3
 800285e:	3601      	adds	r6, #1
 8002860:	e7ee      	b.n	8002840 <__libc_init_array+0xc>
 8002862:	f855 3b04 	ldr.w	r3, [r5], #4
 8002866:	4798      	blx	r3
 8002868:	3601      	adds	r6, #1
 800286a:	e7f2      	b.n	8002852 <__libc_init_array+0x1e>
 800286c:	080029d4 	.word	0x080029d4
 8002870:	080029d4 	.word	0x080029d4
 8002874:	080029d4 	.word	0x080029d4
 8002878:	080029dc 	.word	0x080029dc

0800287c <free>:
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <free+0xc>)
 800287e:	4601      	mov	r1, r0
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	f000 b80b 	b.w	800289c <_free_r>
 8002886:	bf00      	nop
 8002888:	2000000c 	.word	0x2000000c

0800288c <memset>:
 800288c:	4402      	add	r2, r0
 800288e:	4603      	mov	r3, r0
 8002890:	4293      	cmp	r3, r2
 8002892:	d100      	bne.n	8002896 <memset+0xa>
 8002894:	4770      	bx	lr
 8002896:	f803 1b01 	strb.w	r1, [r3], #1
 800289a:	e7f9      	b.n	8002890 <memset+0x4>

0800289c <_free_r>:
 800289c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800289e:	2900      	cmp	r1, #0
 80028a0:	d044      	beq.n	800292c <_free_r+0x90>
 80028a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028a6:	9001      	str	r0, [sp, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f1a1 0404 	sub.w	r4, r1, #4
 80028ae:	bfb8      	it	lt
 80028b0:	18e4      	addlt	r4, r4, r3
 80028b2:	f000 f83f 	bl	8002934 <__malloc_lock>
 80028b6:	4a1e      	ldr	r2, [pc, #120]	; (8002930 <_free_r+0x94>)
 80028b8:	9801      	ldr	r0, [sp, #4]
 80028ba:	6813      	ldr	r3, [r2, #0]
 80028bc:	b933      	cbnz	r3, 80028cc <_free_r+0x30>
 80028be:	6063      	str	r3, [r4, #4]
 80028c0:	6014      	str	r4, [r2, #0]
 80028c2:	b003      	add	sp, #12
 80028c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028c8:	f000 b83a 	b.w	8002940 <__malloc_unlock>
 80028cc:	42a3      	cmp	r3, r4
 80028ce:	d908      	bls.n	80028e2 <_free_r+0x46>
 80028d0:	6825      	ldr	r5, [r4, #0]
 80028d2:	1961      	adds	r1, r4, r5
 80028d4:	428b      	cmp	r3, r1
 80028d6:	bf01      	itttt	eq
 80028d8:	6819      	ldreq	r1, [r3, #0]
 80028da:	685b      	ldreq	r3, [r3, #4]
 80028dc:	1949      	addeq	r1, r1, r5
 80028de:	6021      	streq	r1, [r4, #0]
 80028e0:	e7ed      	b.n	80028be <_free_r+0x22>
 80028e2:	461a      	mov	r2, r3
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	b10b      	cbz	r3, 80028ec <_free_r+0x50>
 80028e8:	42a3      	cmp	r3, r4
 80028ea:	d9fa      	bls.n	80028e2 <_free_r+0x46>
 80028ec:	6811      	ldr	r1, [r2, #0]
 80028ee:	1855      	adds	r5, r2, r1
 80028f0:	42a5      	cmp	r5, r4
 80028f2:	d10b      	bne.n	800290c <_free_r+0x70>
 80028f4:	6824      	ldr	r4, [r4, #0]
 80028f6:	4421      	add	r1, r4
 80028f8:	1854      	adds	r4, r2, r1
 80028fa:	42a3      	cmp	r3, r4
 80028fc:	6011      	str	r1, [r2, #0]
 80028fe:	d1e0      	bne.n	80028c2 <_free_r+0x26>
 8002900:	681c      	ldr	r4, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	6053      	str	r3, [r2, #4]
 8002906:	4421      	add	r1, r4
 8002908:	6011      	str	r1, [r2, #0]
 800290a:	e7da      	b.n	80028c2 <_free_r+0x26>
 800290c:	d902      	bls.n	8002914 <_free_r+0x78>
 800290e:	230c      	movs	r3, #12
 8002910:	6003      	str	r3, [r0, #0]
 8002912:	e7d6      	b.n	80028c2 <_free_r+0x26>
 8002914:	6825      	ldr	r5, [r4, #0]
 8002916:	1961      	adds	r1, r4, r5
 8002918:	428b      	cmp	r3, r1
 800291a:	bf04      	itt	eq
 800291c:	6819      	ldreq	r1, [r3, #0]
 800291e:	685b      	ldreq	r3, [r3, #4]
 8002920:	6063      	str	r3, [r4, #4]
 8002922:	bf04      	itt	eq
 8002924:	1949      	addeq	r1, r1, r5
 8002926:	6021      	streq	r1, [r4, #0]
 8002928:	6054      	str	r4, [r2, #4]
 800292a:	e7ca      	b.n	80028c2 <_free_r+0x26>
 800292c:	b003      	add	sp, #12
 800292e:	bd30      	pop	{r4, r5, pc}
 8002930:	20000124 	.word	0x20000124

08002934 <__malloc_lock>:
 8002934:	4801      	ldr	r0, [pc, #4]	; (800293c <__malloc_lock+0x8>)
 8002936:	f000 b809 	b.w	800294c <__retarget_lock_acquire_recursive>
 800293a:	bf00      	nop
 800293c:	20000128 	.word	0x20000128

08002940 <__malloc_unlock>:
 8002940:	4801      	ldr	r0, [pc, #4]	; (8002948 <__malloc_unlock+0x8>)
 8002942:	f000 b804 	b.w	800294e <__retarget_lock_release_recursive>
 8002946:	bf00      	nop
 8002948:	20000128 	.word	0x20000128

0800294c <__retarget_lock_acquire_recursive>:
 800294c:	4770      	bx	lr

0800294e <__retarget_lock_release_recursive>:
 800294e:	4770      	bx	lr

08002950 <_init>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	bf00      	nop
 8002954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002956:	bc08      	pop	{r3}
 8002958:	469e      	mov	lr, r3
 800295a:	4770      	bx	lr

0800295c <_fini>:
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295e:	bf00      	nop
 8002960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002962:	bc08      	pop	{r3}
 8002964:	469e      	mov	lr, r3
 8002966:	4770      	bx	lr
