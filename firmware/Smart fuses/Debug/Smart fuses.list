
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092e4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080094a4  080094a4  000194a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098c8  080098c8  00020284  2**0
                  CONTENTS
  4 .ARM          00000000  080098c8  080098c8  00020284  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098c8  080098c8  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080098d0  080098d0  000198d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  080098d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000284  08009b5c  00020284  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  08009b5c  00020798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b327  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044a9  00000000  00000000  0004b5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0004fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  000510c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033fde  00000000  00000000  00052580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017497  00000000  00000000  0008655e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00132358  00000000  00000000  0009d9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cfd4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c8  00000000  00000000  001cfda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000284 	.word	0x20000284
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800948c 	.word	0x0800948c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000288 	.word	0x20000288
 80001fc:	0800948c 	.word	0x0800948c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002a6:	f107 031c 	add.w	r3, r7, #28
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002c4:	4a2f      	ldr	r2, [pc, #188]	; (8000384 <MX_ADC1_Init+0xe4>)
 80002c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c8:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ce:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d4:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002da:	4b29      	ldr	r3, [pc, #164]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002e0:	4b27      	ldr	r3, [pc, #156]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002e2:	2204      	movs	r2, #4
 80002e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002e6:	4b26      	ldr	r3, [pc, #152]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ec:	4b24      	ldr	r3, [pc, #144]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f8:	4b21      	ldr	r3, [pc, #132]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000300:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000302:	2200      	movs	r2, #0
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000306:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000308:	2200      	movs	r2, #0
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800030c:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_ADC1_Init+0xe0>)
 800030e:	2200      	movs	r2, #0
 8000310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000316:	2200      	movs	r2, #0
 8000318:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_ADC1_Init+0xe0>)
 800031c:	2200      	movs	r2, #0
 800031e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000324:	f004 fb7e 	bl	8004a24 <HAL_ADC_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800032e:	f003 f8e7 	bl	8003500 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000336:	f107 031c 	add.w	r3, r7, #28
 800033a:	4619      	mov	r1, r3
 800033c:	4810      	ldr	r0, [pc, #64]	; (8000380 <MX_ADC1_Init+0xe0>)
 800033e:	f005 f8e5 	bl	800550c <HAL_ADCEx_MultiModeConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000348:	f003 f8da 	bl	8003500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_ADC1_Init+0xe8>)
 800034e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000350:	2306      	movs	r3, #6
 8000352:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000358:	237f      	movs	r3, #127	; 0x7f
 800035a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800035c:	2304      	movs	r3, #4
 800035e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_ADC1_Init+0xe0>)
 800036a:	f004 fcad 	bl	8004cc8 <HAL_ADC_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000374:	f003 f8c4 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000378:	bf00      	nop
 800037a:	3728      	adds	r7, #40	; 0x28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	200002a0 	.word	0x200002a0
 8000384:	50040000 	.word	0x50040000
 8000388:	36902000 	.word	0x36902000

0800038c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b0b2      	sub	sp, #200	; 0xc8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a4:	f107 031c 	add.w	r3, r7, #28
 80003a8:	2298      	movs	r2, #152	; 0x98
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f008 f8a3 	bl	80084f8 <memset>
  if(adcHandle->Instance==ADC1)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <HAL_ADC_MspInit+0x134>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d17d      	bne.n	80004b8 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80003d2:	2308      	movs	r3, #8
 80003d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003da:	2302      	movs	r3, #2
 80003dc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003de:	2302      	movs	r3, #2
 80003e0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003e6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	4618      	mov	r0, r3
 80003ee:	f007 fa17 	bl	8007820 <HAL_RCCEx_PeriphCLKConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80003f8:	f003 f882 	bl	8003500 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003fc:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a30      	ldr	r2, [pc, #192]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000408:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000410:	61bb      	str	r3, [r7, #24]
 8000412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000418:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800042e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000430:	4a24      	ldr	r2, [pc, #144]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800043a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000448:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800044a:	f043 0302 	orr.w	r3, r3, #2
 800044e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000454:	f003 0302 	and.w	r3, r3, #2
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800045c:	2301      	movs	r3, #1
 800045e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000462:	230b      	movs	r3, #11
 8000464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000472:	4619      	mov	r1, r3
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f006 f84a 	bl	8006510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800047c:	2330      	movs	r3, #48	; 0x30
 800047e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000482:	230b      	movs	r3, #11
 8000484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000492:	4619      	mov	r1, r3
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <HAL_ADC_MspInit+0x13c>)
 8000496:	f006 f83b 	bl	8006510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800049a:	2303      	movs	r3, #3
 800049c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004a0:	230b      	movs	r3, #11
 80004a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80004b0:	4619      	mov	r1, r3
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <HAL_ADC_MspInit+0x140>)
 80004b4:	f006 f82c 	bl	8006510 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004b8:	bf00      	nop
 80004ba:	37c8      	adds	r7, #200	; 0xc8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	50040000 	.word	0x50040000
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000800 	.word	0x48000800
 80004cc:	48000400 	.word	0x48000400

080004d0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MX_CAN1_Init+0x64>)
 80004d6:	4a18      	ldr	r2, [pc, #96]	; (8000538 <MX_CAN1_Init+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_CAN1_Init+0x64>)
 80004dc:	2206      	movs	r2, #6
 80004de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_CAN1_Init+0x64>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_CAN1_Init+0x64>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_CAN1_Init+0x64>)
 80004ee:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80004f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_CAN1_Init+0x64>)
 80004f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80004fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <MX_CAN1_Init+0x64>)
 800050a:	2200      	movs	r2, #0
 800050c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_CAN1_Init+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <MX_CAN1_Init+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_CAN1_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <MX_CAN1_Init+0x64>)
 8000522:	f005 f897 	bl	8005654 <HAL_CAN_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800052c:	f002 ffe8 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000308 	.word	0x20000308
 8000538:	40006400 	.word	0x40006400

0800053c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <HAL_CAN_MspInit+0xa0>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d139      	bne.n	80005d2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800058e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005a0:	2309      	movs	r3, #9
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f005 ffaf 	bl	8006510 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2014      	movs	r0, #20
 80005b8:	f005 ff73 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005bc:	2014      	movs	r0, #20
 80005be:	f005 ff8c 	bl	80064da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2015      	movs	r0, #21
 80005c8:	f005 ff6b 	bl	80064a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005cc:	2015      	movs	r0, #21
 80005ce:	f005 ff84 	bl	80064da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d2:	bf00      	nop
 80005d4:	3728      	adds	r7, #40	; 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40006400 	.word	0x40006400
 80005e0:	40021000 	.word	0x40021000

080005e4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>:
{
	return this->channels[size_t(channel)].current;
}

template <uint32_t num_of_sf>
void SmartFuseHandler<num_of_sf>::emplaceBack(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef *const hspi, const ChannelsSettings &channels_settings)
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b087      	sub	sp, #28
 8000600:	af02      	add	r7, sp, #8
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	603b      	str	r3, [r7, #0]
{
	this->smart_fuses.emplace_back(port, pin, hspi, channels_settings);
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	463c      	mov	r4, r7
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	f107 0108 	add.w	r1, r7, #8
 8000614:	6a3b      	ldr	r3, [r7, #32]
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	4623      	mov	r3, r4
 800061a:	f001 fb9b 	bl	8001d54 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRK16ChannelsSettingsEEEvDpOT_>
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bd90      	pop	{r4, r7, pc}

08000626 <_ZN16SmartFuseHandlerILm4EE9handleAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::handleAll()
 8000626:	b580      	push	{r7, lr}
 8000628:	b088      	sub	sp, #32
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 800062e:	2300      	movs	r3, #0
 8000630:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fbbc 	bl	8001db6 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 800063e:	61b8      	str	r0, [r7, #24]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fbc3 	bl	8001dce <_ZN3etl7ivectorI9SmartFuseE3endEv>
 8000648:	6138      	str	r0, [r7, #16]
 800064a:	69ba      	ldr	r2, [r7, #24]
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	429a      	cmp	r2, r3
 8000650:	d00f      	beq.n	8000672 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x4c>
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.handle();
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f000 fc58 	bl	8000f0c <_ZN9SmartFuse6handleEv>
 800065c:	4603      	mov	r3, r0
 800065e:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 8000660:	7afb      	ldrb	r3, [r7, #11]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x44>
 8000666:	7afb      	ldrb	r3, [r7, #11]
 8000668:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	33a0      	adds	r3, #160	; 0xa0
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	e7eb      	b.n	800064a <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x24>
	}

	return result;
 8000672:	7ffb      	ldrb	r3, [r7, #31]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <_ZN16SmartFuseHandlerILm4EE7initAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::initAll()
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 8000684:	2300      	movs	r3, #0
 8000686:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fb91 	bl	8001db6 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 8000694:	61b8      	str	r0, [r7, #24]
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fb98 	bl	8001dce <_ZN3etl7ivectorI9SmartFuseE3endEv>
 800069e:	6138      	str	r0, [r7, #16]
 80006a0:	69ba      	ldr	r2, [r7, #24]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d00f      	beq.n	80006c8 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x4c>
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.init();
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 fbd3 	bl	8000e58 <_ZN9SmartFuse4initEv>
 80006b2:	4603      	mov	r3, r0
 80006b4:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x44>
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	33a0      	adds	r3, #160	; 0xa0
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	e7eb      	b.n	80006a0 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x24>
	}

	return result;
 80006c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <_ZN16SmartFuseHandlerILm4EE9enableAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::enableAll()
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b088      	sub	sp, #32
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 80006da:	2300      	movs	r3, #0
 80006dc:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fb66 	bl	8001db6 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 80006ea:	61b8      	str	r0, [r7, #24]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fb6d 	bl	8001dce <_ZN3etl7ivectorI9SmartFuseE3endEv>
 80006f4:	6138      	str	r0, [r7, #16]
 80006f6:	69ba      	ldr	r2, [r7, #24]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d012      	beq.n	8000724 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x52>
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.enable();
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f000 fbc2 	bl	8000e8c <_ZN9SmartFuse6enableEv>
 8000708:	4603      	mov	r3, r0
 800070a:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(5);
 800070c:	2005      	movs	r0, #5
 800070e:	f003 ffc5 	bl	800469c <HAL_Delay>
		if(x != SmartFuseState::Ok) result = x;
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x4a>
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	33a0      	adds	r3, #160	; 0xa0
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	e7e8      	b.n	80006f6 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x24>
	}

	return result;
 8000724:	7ffb      	ldrb	r3, [r7, #31]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_ZN16SmartFuseHandlerILm4EE9getStatesEv>:

	return result;
}

template <uint32_t num_of_sf>
std::array < SmartFuseState, num_of_sf >  SmartFuseHandler<num_of_sf>::getStates()
 800072e:	b5b0      	push	{r4, r5, r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
{
	std::array < SmartFuseState, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d815      	bhi.n	800076c <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0x3e>
	{
		x[i] = this->smart_fuses[i].getState();
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6979      	ldr	r1, [r7, #20]
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fb5d 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800074a:	4605      	mov	r5, r0
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	6979      	ldr	r1, [r7, #20]
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fb47 	bl	8001de6 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8000758:	4604      	mov	r4, r0
 800075a:	4628      	mov	r0, r5
 800075c:	f000 feaa 	bl	80014b4 <_ZNK9SmartFuse8getStateEv>
 8000760:	4603      	mov	r3, r0
 8000762:	7023      	strb	r3, [r4, #0]
	for(size_t i = 0; i < num_of_sf; i++)
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e7e6      	b.n	800073a <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0xc>
	}

	return x;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	2300      	movs	r3, #0
 8000772:	7c3a      	ldrb	r2, [r7, #16]
 8000774:	f362 0307 	bfi	r3, r2, #0, #8
 8000778:	7c7a      	ldrb	r2, [r7, #17]
 800077a:	f362 230f 	bfi	r3, r2, #8, #8
 800077e:	7cba      	ldrb	r2, [r7, #18]
 8000780:	f362 4317 	bfi	r3, r2, #16, #8
 8000784:	7cfa      	ldrb	r2, [r7, #19]
 8000786:	f362 631f 	bfi	r3, r2, #24, #8
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bdb0      	pop	{r4, r5, r7, pc}

08000792 <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>:

template <uint32_t num_of_sf>
std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsStates()
 8000792:	b5b0      	push	{r4, r5, r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	60b9      	str	r1, [r7, #8]
{
	std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d819      	bhi.n	80007da <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0x48>
	{
		x[i] = this->smart_fuses[i].getChannelsStates();
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	6979      	ldr	r1, [r7, #20]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fb2a 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80007b0:	4604      	mov	r4, r0
 80007b2:	6979      	ldr	r1, [r7, #20]
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f001 fb38 	bl	8001e2a <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>
 80007ba:	4605      	mov	r5, r0
 80007bc:	463b      	mov	r3, r7
 80007be:	4621      	mov	r1, r4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fe97 	bl	80014f4 <_ZN9SmartFuse17getChannelsStatesEv>
 80007c6:	462a      	mov	r2, r5
 80007c8:	463b      	mov	r3, r7
 80007ca:	6819      	ldr	r1, [r3, #0]
 80007cc:	6011      	str	r1, [r2, #0]
 80007ce:	889b      	ldrh	r3, [r3, #4]
 80007d0:	8093      	strh	r3, [r2, #4]
	for(size_t i = 0; i < num_of_sf; i++)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e7e2      	b.n	80007a0 <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0xe>
	}

	return x;
 80007da:	bf00      	nop
}
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bdb0      	pop	{r4, r5, r7, pc}

080007e4 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>:

template <uint32_t num_of_sf>
std::array < std::array < uint16_t, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsCurrents()
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6178      	str	r0, [r7, #20]
 80007ec:	6139      	str	r1, [r7, #16]
{
	std::array < std::array < uint16_t, number_of_channels_per_fuse >, num_of_sf > x;
	for(size_t i = 0; i < num_of_sf; i++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d81b      	bhi.n	8000830 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0x4c>
	{
		x[i] = this->smart_fuses[i].getChannelsCurrents();
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	69f9      	ldr	r1, [r7, #28]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fb01 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8000802:	4604      	mov	r4, r0
 8000804:	69f9      	ldr	r1, [r7, #28]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f001 fb1e 	bl	8001e48 <_ZNSt5arrayIS_ItLj6EELj4EEixEj>
 800080c:	4605      	mov	r5, r0
 800080e:	463b      	mov	r3, r7
 8000810:	4621      	mov	r1, r4
 8000812:	4618      	mov	r0, r3
 8000814:	f000 feb3 	bl	800157e <_ZN9SmartFuse19getChannelsCurrentsEv>
 8000818:	462a      	mov	r2, r5
 800081a:	463b      	mov	r3, r7
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	6859      	ldr	r1, [r3, #4]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	6010      	str	r0, [r2, #0]
 8000824:	6051      	str	r1, [r2, #4]
 8000826:	6093      	str	r3, [r2, #8]
	for(size_t i = 0; i < num_of_sf; i++)
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	3301      	adds	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e7e0      	b.n	80007f2 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0xe>
	}

	return x;
 8000830:	bf00      	nop
}
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bdb0      	pop	{r4, r5, r7, pc}

0800083a <_ZNK3etl7ibitset5countEv>:
    }

    //*************************************************************************
    /// Count the number of bits set.
    //*************************************************************************
    size_t count() const
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
    {
      size_t n = 0UL;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]

      for (size_t i = 0UL; i < SIZE; ++i)
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	429a      	cmp	r2, r3
 8000852:	d210      	bcs.n	8000876 <_ZNK3etl7ibitset5countEv+0x3c>
      {
        n += etl::count_bits(pdata[i]);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f975 	bl	8001b4e <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
      for (size_t i = 0UL; i < SIZE; ++i)
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	3301      	adds	r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	e7e9      	b.n	800084a <_ZNK3etl7ibitset5countEv+0x10>
      }

      return n;
 8000876:	68fb      	ldr	r3, [r7, #12]
    }
 8000878:	4618      	mov	r0, r3
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZN3etl7ibitset5resetEv>:
    }

    //*************************************************************************
    /// Resets the bitset.
    //*************************************************************************
    ibitset& reset()
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    {
      for (size_t i = 0UL; i < SIZE; ++i)
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	429a      	cmp	r2, r3
 8000894:	d209      	bcs.n	80008aa <_ZN3etl7ibitset5resetEv+0x2a>
      {
        pdata[i] = ALL_CLEAR;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
      for (size_t i = 0UL; i < SIZE; ++i)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e7f0      	b.n	800088c <_ZN3etl7ibitset5resetEv+0xc>
      }

      return *this;
 80008aa:	687b      	ldr	r3, [r7, #4]
    }
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <_ZN3etl7ibitset10initialiseEy>:
  protected:

    //*************************************************************************
    /// Initialise from an unsigned long long.
    //*************************************************************************
    ibitset& initialise(unsigned long long value)
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	e9c7 2300 	strd	r2, r3, [r7]
    {
      reset();
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff ffdb 	bl	8000880 <_ZN3etl7ibitset5resetEv>

      const size_t SHIFT = (integral_limits<unsigned long long>::bits <= (int)BITS_PER_ELEMENT) ? 0 : BITS_PER_ELEMENT;
 80008ca:	2308      	movs	r3, #8
 80008cc:	613b      	str	r3, [r7, #16]
      {
        pdata[0] = element_t(value);
      }
      else
      {
        size_t i = 0UL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]

        while ((value != 0) && (i < SIZE))
 80008d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	d019      	beq.n	800090e <_ZN3etl7ibitset10initialiseEy+0x56>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d214      	bcs.n	800090e <_ZN3etl7ibitset10initialiseEy+0x56>
        {
          pdata[i++] = value & ALL_SET;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	1c59      	adds	r1, r3, #1
 80008ec:	6179      	str	r1, [r7, #20]
 80008ee:	4413      	add	r3, r2
 80008f0:	783a      	ldrb	r2, [r7, #0]
 80008f2:	701a      	strb	r2, [r3, #0]
          value = value >> SHIFT;
 80008f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008f8:	f04f 0200 	mov.w	r2, #0
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	0a02      	lsrs	r2, r0, #8
 8000902:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000906:	0a0b      	lsrs	r3, r1, #8
 8000908:	e9c7 2300 	strd	r2, r3, [r7]
        while ((value != 0) && (i < SIZE))
 800090c:	e7e1      	b.n	80008d2 <_ZN3etl7ibitset10initialiseEy+0x1a>
        }
      }

      pdata[SIZE - 1] &= TOP_MASK;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	3b01      	subs	r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	7819      	ldrb	r1, [r3, #0]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	68d8      	ldr	r0, [r3, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	3b01      	subs	r3, #1
 800092a:	4403      	add	r3, r0
 800092c:	400a      	ands	r2, r1
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	701a      	strb	r2, [r3, #0]

      return *this;
 8000932:	68fb      	ldr	r3, [r7, #12]
    }
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZN3etl7ibitsetC1EjjPh>:
    }

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    ibitset(size_t nbits_, size_t size_, element_t* pdata_)
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]
      : NBITS(nbits_),
        SIZE(size_),
        pdata(pdata_)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	60da      	str	r2, [r3, #12]
    {
      size_t allocated_bits = SIZE * BITS_PER_ELEMENT;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	617b      	str	r3, [r7, #20]
      size_t top_mask_shift = ((BITS_PER_ELEMENT - (allocated_bits - NBITS)) % BITS_PER_ELEMENT);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	f003 0307 	and.w	r3, r3, #7
 8000970:	613b      	str	r3, [r7, #16]
      TOP_MASK = element_t(top_mask_shift == 0 ? ALL_SET : ~(ALL_SET << top_mask_shift));
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d007      	beq.n	8000988 <_ZN3etl7ibitsetC1EjjPh+0x4c>
 8000978:	22ff      	movs	r2, #255	; 0xff
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	e000      	b.n	800098a <_ZN3etl7ibitsetC1EjjPh+0x4e>
 8000988:	22ff      	movs	r2, #255	; 0xff
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	701a      	strb	r2, [r3, #0]
    }
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4618      	mov	r0, r3
 8000992:	371c      	adds	r7, #28
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_ZN3etl7ibitsetD1Ev>:
    virtual ~ibitset()
    {
    }
#else
  protected:
    ~ibitset()
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    {
    }
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_ZN3etl6bitsetILj8EED1Ev>:
  /// Does not use std::string.
  ///\tparam MAXN The number of bits.
  ///\ingroup bitset
  //*************************************************************************
  template <const size_t MAXN>
  class bitset : public etl::ibitset
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffed 	bl	800099c <_ZN3etl7ibitsetD1Ev>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  Nm  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	429c      	cmp	r4, r3
 80009e4:	d004      	beq.n	80009f0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 80009e6:	3c14      	subs	r4, #20
 80009e8:	4620      	mov	r0, r4
 80009ea:	f7ff ffe2 	bl	80009b2 <_ZN3etl6bitsetILj8EED1Ev>
 80009ee:	e7f7      	b.n	80009e0 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x14>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}

080009fa <_ZL11checkParitySt5arrayIhLj3EE>:
{
 80009fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009fe:	b097      	sub	sp, #92	; 0x5c
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	size_t buff = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	657b      	str	r3, [r7, #84]	; 0x54
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000a08:	f107 0408 	add.w	r4, r7, #8
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 f8c3 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000a16:	4603      	mov	r3, r0
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	461d      	mov	r5, r3
 8000a20:	4616      	mov	r6, r2
 8000a22:	462a      	mov	r2, r5
 8000a24:	4633      	mov	r3, r6
 8000a26:	4620      	mov	r0, r4
 8000a28:	f001 f8c7 	bl	8001bba <_ZN3etl6bitsetILj8EEC1Ey>
 8000a2c:	3414      	adds	r4, #20
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2101      	movs	r1, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 f8b2 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2200      	movs	r2, #0
 8000a40:	469a      	mov	sl, r3
 8000a42:	4693      	mov	fp, r2
 8000a44:	4652      	mov	r2, sl
 8000a46:	465b      	mov	r3, fp
 8000a48:	4620      	mov	r0, r4
 8000a4a:	f001 f8b6 	bl	8001bba <_ZN3etl6bitsetILj8EEC1Ey>
 8000a4e:	3414      	adds	r4, #20
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2102      	movs	r1, #2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 f8a1 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	4698      	mov	r8, r3
 8000a64:	4691      	mov	r9, r2
 8000a66:	4642      	mov	r2, r8
 8000a68:	464b      	mov	r3, r9
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f001 f8a5 	bl	8001bba <_ZN3etl6bitsetILj8EEC1Ey>
	for (auto &bit : bits) buff += bit.count();
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000a78:	f001 f8b7 	bl	8001bea <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>
 8000a7c:	6538      	str	r0, [r7, #80]	; 0x50
 8000a7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000a80:	f001 f8bf 	bl	8001c02 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>
 8000a84:	64b8      	str	r0, [r7, #72]	; 0x48
 8000a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <_ZL11checkParitySt5arrayIhLj3EE+0xb0>
 8000a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a90:	647b      	str	r3, [r7, #68]	; 0x44
 8000a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fed0 	bl	800083a <_ZNK3etl7ibitset5countEv>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a9e:	4413      	add	r3, r2
 8000aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8000aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa4:	3314      	adds	r3, #20
 8000aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8000aa8:	e7ed      	b.n	8000a86 <_ZL11checkParitySt5arrayIhLj3EE+0x8c>
	return (buff % 2 == 0);
 8000aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf0c      	ite	eq
 8000ab4:	2301      	moveq	r3, #1
 8000ab6:	2300      	movne	r3, #0
 8000ab8:	b2dc      	uxtb	r4, r3
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff84 	bl	80009cc <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>
	return (buff % 2 == 0);
 8000ac4:	4623      	mov	r3, r4
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	375c      	adds	r7, #92	; 0x5c
 8000aca:	46bd      	mov	sp, r7
 8000acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ad0 <_ZL18calculateParityBitRSt5arrayIhLj3EE>:
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	data[2] &= ~(1 << 0);
 8000ad8:	2102      	movs	r1, #2
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f001 f85e 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	f022 0201 	bic.w	r2, r2, #1
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	701a      	strb	r2, [r3, #0]
	if (checkParity(data)) data[2] |= (1 << 0);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	7859      	ldrb	r1, [r3, #1]
 8000af2:	0209      	lsls	r1, r1, #8
 8000af4:	430a      	orrs	r2, r1
 8000af6:	789b      	ldrb	r3, [r3, #2]
 8000af8:	041b      	lsls	r3, r3, #16
 8000afa:	431a      	orrs	r2, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	f362 0317 	bfi	r3, r2, #0, #24
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff79 	bl	80009fa <_ZL11checkParitySt5arrayIhLj3EE>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d009      	beq.n	8000b22 <_ZL18calculateParityBitRSt5arrayIhLj3EE+0x52>
 8000b0e:	2102      	movs	r1, #2
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f001 f843 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000b16:	4603      	mov	r3, r0
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	f042 0201 	orr.w	r2, r2, #1
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	701a      	strb	r2, [r3, #0]
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>:
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
	this->last_gsb = x[0];
 8000b34:	463b      	mov	r3, r7
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 f82f 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	709a      	strb	r2, [r3, #2]
	if(x[0] & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000b46:	463b      	mov	r3, r7
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 f826 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000b50:	4603      	mov	r3, r0
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	09db      	lsrs	r3, r3, #7
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x3a>
 8000b60:	2300      	movs	r3, #0
 8000b62:	e07e      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000001) return SmartFuseState::FailSafe;
 8000b64:	463b      	mov	r3, r7
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 f817 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x5e>
 8000b84:	2307      	movs	r3, #7
 8000b86:	e06c      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000010) return SmartFuseState::OLOFF;
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 f805 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000b92:	4603      	mov	r3, r0
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x82>
 8000ba8:	2306      	movs	r3, #6
 8000baa:	e05a      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000100) return SmartFuseState::LatchOff;
 8000bac:	463b      	mov	r3, r7
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fff3 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf14      	ite	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	2300      	moveq	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xa6>
 8000bcc:	2305      	movs	r3, #5
 8000bce:	e048      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00001000) return SmartFuseState::TempFail;
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 ffe1 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bf14      	ite	ne
 8000be6:	2301      	movne	r3, #1
 8000be8:	2300      	moveq	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xca>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e036      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00010000) return SmartFuseState::OTPLVDS;
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 ffcf 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xee>
 8000c14:	2303      	movs	r3, #3
 8000c16:	e024      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00100000) return SmartFuseState::SPIError;
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 ffbd 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000c22:	4603      	mov	r3, r0
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf14      	ite	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	2300      	moveq	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x112>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e012      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b01000000) return SmartFuseState::ResetState;
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 ffab 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000c46:	4603      	mov	r3, r0
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	bf14      	ite	ne
 8000c52:	2301      	movne	r3, #1
 8000c54:	2300      	moveq	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x136>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	return SmartFuseState::NotResponding;
 8000c60:	2308      	movs	r3, #8
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZN9SmartFuse11ChannelDataC1Ev>:
SmartFuse::ChannelData::ChannelData()
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3304      	adds	r3, #4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 ffd0 	bl	8001c1c <_ZNSt4pairIttEC1IttLb1EEEv>
	active = false;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
	current = 0x0000;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	805a      	strh	r2, [r3, #2]
	state = ChannelState::Ok;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	721a      	strb	r2, [r3, #8]
}
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev>:
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2405      	movs	r4, #5
 8000ca4:	461d      	mov	r5, r3
 8000ca6:	2c00      	cmp	r4, #0
 8000ca8:	db05      	blt.n	8000cb6 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev+0x1e>
 8000caa:	4628      	mov	r0, r5
 8000cac:	f7ff ffdd 	bl	8000c6a <_ZN9SmartFuse11ChannelDataC1Ev>
 8000cb0:	350a      	adds	r5, #10
 8000cb2:	3c01      	subs	r4, #1
 8000cb4:	e7f7      	b.n	8000ca6 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev+0xe>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bdb0      	pop	{r4, r5, r7, pc}

08000cc0 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, const ChannelsSettings &fuses_settings) :
 8000cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	603b      	str	r3, [r7, #0]
					 port(port), pin(pin), hspi(hspi), channels_settings(channels_settings), toggle(false)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ffda 	bl	8000c98 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev>
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	645a      	str	r2, [r3, #68]	; 0x44
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	649a      	str	r2, [r3, #72]	; 0x48
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8000cfc:	4694      	mov	ip, r2
 8000cfe:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d02:	4665      	mov	r5, ip
 8000d04:	4626      	mov	r6, r4
 8000d06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d08:	6028      	str	r0, [r5, #0]
 8000d0a:	6069      	str	r1, [r5, #4]
 8000d0c:	60aa      	str	r2, [r5, #8]
 8000d0e:	60eb      	str	r3, [r5, #12]
 8000d10:	3410      	adds	r4, #16
 8000d12:	f10c 0c10 	add.w	ip, ip, #16
 8000d16:	4574      	cmp	r4, lr
 8000d18:	d1f3      	bne.n	8000d02 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings+0x42>
 8000d1a:	4663      	mov	r3, ip
 8000d1c:	4622      	mov	r2, r4
 8000d1e:	6810      	ldr	r0, [r2, #0]
 8000d20:	6018      	str	r0, [r3, #0]
 8000d22:	8892      	ldrh	r2, [r2, #4]
 8000d24:	809a      	strh	r2, [r3, #4]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3384      	adds	r3, #132	; 0x84
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 fbb0 	bl	8004490 <_ZN5TimerC1Ev>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	338c      	adds	r3, #140	; 0x8c
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fbab 	bl	8004490 <_ZN5TimerC1Ev>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3398      	adds	r3, #152	; 0x98
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 ff8e 	bl	8001c60 <_ZN3etl8delegateIFvP9SmartFuseEEC1Ev>
	for (int i = 0; i < 6; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	dc23      	bgt.n	8000d96 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings+0xd6>
		this->channels[i].clamping_currents = channels_settings.clamping_currents[i];
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3308      	adds	r3, #8
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 ff8f 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	1d18      	adds	r0, r3, #4
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3318      	adds	r3, #24
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	330a      	adds	r3, #10
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f000 ff93 	bl	8001c98 <_ZNSt4pairIttEaSERKS0_>
		this->channels[i].active = channels_settings.active[i];
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3308      	adds	r3, #8
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 ff7d 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8000d80:	4601      	mov	r1, r0
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	4413      	add	r3, r2
 8000d88:	334c      	adds	r3, #76	; 0x4c
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	700b      	strb	r3, [r1, #0]
	for (int i = 0; i < 6; i++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e7d8      	b.n	8000d48 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings+0x88>
	this->action_timer.setTimeOut(100);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	338c      	adds	r3, #140	; 0x8c
 8000d9a:	2164      	movs	r1, #100	; 0x64
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fb9a 	bl	80044d6 <_ZN5Timer10setTimeOutEm>
	this->watch_dog.setTimeOut(31);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3384      	adds	r3, #132	; 0x84
 8000da6:	211f      	movs	r1, #31
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fb94 	bl	80044d6 <_ZN5Timer10setTimeOutEm>
	slaveDeselect();
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f000 f841 	bl	8000e36 <_ZN9SmartFuse13slaveDeselectEv>
}
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4618      	mov	r0, r3
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dbe <_ZN9SmartFuse17setActionIntervalEm>:
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
	this->action_timer.setTimeOut(interval);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	338c      	adds	r3, #140	; 0x8c
 8000dcc:	6839      	ldr	r1, [r7, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 fb81 	bl	80044d6 <_ZN5Timer10setTimeOutEm>
	this->action_timer.restart();
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	338c      	adds	r3, #140	; 0x8c
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 fb8a 	bl	80044f2 <_ZN5Timer7restartEv>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_ZN9SmartFuse9setActionEN3etl8delegateIFvPS_EEE>:
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	e883 0006 	stmia.w	r3, {r1, r2}
	this->action = action;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3398      	adds	r3, #152	; 0x98
 8000df8:	1d3a      	adds	r2, r7, #4
 8000dfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dfe:	e883 0003 	stmia.w	r3, {r0, r1}
	this->action_defined = true;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2201      	movs	r2, #1
 8000e06:	705a      	strb	r2, [r3, #1]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_ZN9SmartFuse11slaveSelectEv>:
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	2200      	movs	r2, #0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f005 fd1b 	bl	8006864 <HAL_GPIO_WritePin>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_ZN9SmartFuse13slaveDeselectEv>:
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f005 fd0a 	bl	8006864 <HAL_GPIO_WritePin>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_ZN9SmartFuse4initEv>:
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	this->reset();
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 fbd1 	bl	8001608 <_ZN9SmartFuse5resetEv>
	this->setUpAllDutyCycles();
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 fc3c 	bl	80016e4 <_ZN9SmartFuse18setUpAllDutyCyclesEv>
	this->setUpAllSamplingModes();
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 fc8f 	bl	8001790 <_ZN9SmartFuse21setUpAllSamplingModesEv>
	this->setUpAllLatchOffTimers();
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 fd00 	bl	8001878 <_ZN9SmartFuse22setUpAllLatchOffTimersEv>
	this->setUpAllChannelsStates();
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 fd85 	bl	8001988 <_ZN9SmartFuse22setUpAllChannelsStatesEv>
	return this->state;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_ZN9SmartFuse6enableEv>:
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	tx_data = { WRITE_RAM(0x14), 1 << 6, 0 };
 8000e94:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <_ZN9SmartFuse6enableEv+0x78>)
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	6812      	ldr	r2, [r2, #0]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	8019      	strh	r1, [r3, #0]
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	0c12      	lsrs	r2, r2, #16
 8000ea4:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68f9      	ldr	r1, [r7, #12]
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 fdc6 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { WRITE_RAM(0x14), 1 << 3, 0 };
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_ZN9SmartFuse6enableEv+0x7c>)
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	8019      	strh	r1, [r3, #0]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	0c12      	lsrs	r2, r2, #16
 8000ec4:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68f9      	ldr	r1, [r7, #12]
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fdb6 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->watch_dog.restart();
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3384      	adds	r3, #132	; 0x84
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 fb0a 	bl	80044f2 <_ZN5Timer7restartEv>
	this->toggle = false;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
	this->state = getGSB(rx_data);
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fe1f 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	return this->state;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	080094a4 	.word	0x080094a4
 8000f08:	080094a8 	.word	0x080094a8

08000f0c <_ZN9SmartFuse6handleEv>:
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b08f      	sub	sp, #60	; 0x3c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	bool lock_state = false;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	bool fuse_state_changed = false;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	std::array < bool, number_of_channels_per_fuse > read_fuses_states { false };
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	809a      	strh	r2, [r3, #4]
	std::array < uint8_t, 3 > tx_data { };
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2100      	movs	r1, #0
 8000f30:	460a      	mov	r2, r1
 8000f32:	801a      	strh	r2, [r3, #0]
 8000f34:	460a      	mov	r2, r1
 8000f36:	709a      	strb	r2, [r3, #2]
	std::array < uint8_t, 3 > rx_data { };
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	460a      	mov	r2, r1
 8000f40:	801a      	strh	r2, [r3, #0]
 8000f42:	460a      	mov	r2, r1
 8000f44:	709a      	strb	r2, [r3, #2]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++) this->channels[i].state = ChannelState::Ok;
 8000f46:	2300      	movs	r3, #0
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
 8000f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	d80c      	bhi.n	8000f6a <_ZN9SmartFuse6handleEv+0x5e>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3308      	adds	r3, #8
 8000f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fe8f 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2200      	movs	r2, #0
 8000f60:	721a      	strb	r2, [r3, #8]
 8000f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f64:	3301      	adds	r3, #1
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
 8000f68:	e7ef      	b.n	8000f4a <_ZN9SmartFuse6handleEv+0x3e>
	if(watch_dog.getPassedTime() >= 31)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3384      	adds	r3, #132	; 0x84
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fae7 	bl	8004542 <_ZN5Timer13getPassedTimeEv>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b1e      	cmp	r3, #30
 8000f78:	bf8c      	ite	hi
 8000f7a:	2301      	movhi	r3, #1
 8000f7c:	2300      	movls	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d04d      	beq.n	8001020 <_ZN9SmartFuse6handleEv+0x114>
		this->toggle = !this->toggle;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	f083 0301 	eor.w	r3, r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	701a      	strb	r2, [r3, #0]
		tx_data[0] = READ_RAM(0x13);
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fdff 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2253      	movs	r2, #83	; 0x53
 8000fa2:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	461a      	mov	r2, r3
 8000faa:	6939      	ldr	r1, [r7, #16]
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fd47 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		rx_data[2] &= ~(1 << 1);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fdef 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	f022 0202 	bic.w	r2, r2, #2
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	701a      	strb	r2, [r3, #0]
		tx_data = { WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1) };
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fde3 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	781c      	ldrb	r4, [r3, #0]
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fddb 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	b251      	sxtb	r1, r2
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	0052      	lsls	r2, r2, #1
 8000ff2:	b252      	sxtb	r2, r2
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	b252      	sxtb	r2, r2
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2213      	movs	r2, #19
 8001000:	743a      	strb	r2, [r7, #16]
 8001002:	4622      	mov	r2, r4
 8001004:	747a      	strb	r2, [r7, #17]
 8001006:	74bb      	strb	r3, [r7, #18]
		this->transmitReceiveData(tx_data, rx_data);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	461a      	mov	r2, r3
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 fd15 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3384      	adds	r3, #132	; 0x84
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fa69 	bl	80044f2 <_ZN5Timer7restartEv>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	2b05      	cmp	r3, #5
 8001028:	d850      	bhi.n	80010cc <_ZN9SmartFuse6handleEv+0x1c0>
		tx_data[0] = READ_RAM(0x28 + i);
 800102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3328      	adds	r3, #40	; 0x28
 8001030:	b2dc      	uxtb	r4, r3
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f000 fdaf 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 800103e:	4603      	mov	r3, r0
 8001040:	f044 0240 	orr.w	r2, r4, #64	; 0x40
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	461a      	mov	r2, r3
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 fcf5 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->channels[i].current = uint16_t(rx_data[1]) << 4 | uint16_t(rx_data[2]) >> 4;
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2101      	movs	r1, #1
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fd9d 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001062:	4603      	mov	r3, r0
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	b21c      	sxth	r4, r3
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2102      	movs	r1, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fd93 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001076:	4603      	mov	r3, r0
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	091b      	lsrs	r3, r3, #4
 800107c:	b2db      	uxtb	r3, r3
 800107e:	b21b      	sxth	r3, r3
 8001080:	4323      	orrs	r3, r4
 8001082:	b21c      	sxth	r4, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3308      	adds	r3, #8
 8001088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fdf5 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001090:	4603      	mov	r3, r0
 8001092:	b2a2      	uxth	r2, r4
 8001094:	805a      	strh	r2, [r3, #2]
		read_fuses_states[i] = bool(rx_data[2] & (1 << 2));
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2102      	movs	r1, #2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fd7d 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80010a2:	4603      	mov	r3, r0
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f003 0404 	and.w	r4, r3, #4
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fe05 	bl	8001cc0 <_ZNSt5arrayIbLj6EEixEj>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2c00      	cmp	r4, #0
 80010ba:	bf14      	ite	ne
 80010bc:	2201      	movne	r2, #1
 80010be:	2200      	moveq	r2, #0
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80010c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c6:	3301      	adds	r3, #1
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010ca:	e7ab      	b.n	8001024 <_ZN9SmartFuse6handleEv+0x118>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d869      	bhi.n	80011aa <_ZN9SmartFuse6handleEv+0x29e>
		if (this->channels[i].current < this->channels[i].clamping_currents.first)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3308      	adds	r3, #8
 80010da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fdcc 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80010e2:	4603      	mov	r3, r0
 80010e4:	885c      	ldrh	r4, [r3, #2]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3308      	adds	r3, #8
 80010ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fdc4 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80010f2:	4603      	mov	r3, r0
 80010f4:	889b      	ldrh	r3, [r3, #4]
 80010f6:	429c      	cmp	r4, r3
 80010f8:	bf34      	ite	cc
 80010fa:	2301      	movcc	r3, #1
 80010fc:	2300      	movcs	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d01b      	beq.n	800113c <_ZN9SmartFuse6handleEv+0x230>
			this->channels[i].active = false;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3308      	adds	r3, #8
 8001108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fdb5 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001110:	4603      	mov	r3, r0
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 8001116:	2301      	movs	r3, #1
 8001118:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			fuse_state_changed = true;
 800111c:	2301      	movs	r3, #1
 800111e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			this->state = SmartFuseState::OTPLVDS;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2203      	movs	r2, #3
 8001126:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			this->channels[i].state = ChannelState::UnderCurrent;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3308      	adds	r3, #8
 800112e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fda2 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001136:	4603      	mov	r3, r0
 8001138:	2201      	movs	r2, #1
 800113a:	721a      	strb	r2, [r3, #8]
		if (this->channels[i].current > this->channels[i].clamping_currents.second)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3308      	adds	r3, #8
 8001140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fd99 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001148:	4603      	mov	r3, r0
 800114a:	885c      	ldrh	r4, [r3, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3308      	adds	r3, #8
 8001150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fd91 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001158:	4603      	mov	r3, r0
 800115a:	88db      	ldrh	r3, [r3, #6]
 800115c:	429c      	cmp	r4, r3
 800115e:	bf8c      	ite	hi
 8001160:	2301      	movhi	r3, #1
 8001162:	2300      	movls	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d01b      	beq.n	80011a2 <_ZN9SmartFuse6handleEv+0x296>
			this->channels[i].active = false;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3308      	adds	r3, #8
 800116e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fd82 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001176:	4603      	mov	r3, r0
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 800117c:	2301      	movs	r3, #1
 800117e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			fuse_state_changed = true;
 8001182:	2301      	movs	r3, #1
 8001184:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			this->state = SmartFuseState::OTPLVDS;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2203      	movs	r2, #3
 800118c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			this->channels[i].state = ChannelState::OverCurrent;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3308      	adds	r3, #8
 8001194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fd6f 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800119c:	4603      	mov	r3, r0
 800119e:	2202      	movs	r2, #2
 80011a0:	721a      	strb	r2, [r3, #8]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80011a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a4:	3301      	adds	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a8:	e792      	b.n	80010d0 <_ZN9SmartFuse6handleEv+0x1c4>
	if(fuse_state_changed)
 80011aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d049      	beq.n	8001246 <_ZN9SmartFuse6handleEv+0x33a>
		tx_data[0] = WRITE_RAM(0x13);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fcef 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80011be:	4603      	mov	r3, r0
 80011c0:	2213      	movs	r2, #19
 80011c2:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0x00;
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fce6 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d81e      	bhi.n	800121e <_ZN9SmartFuse6handleEv+0x312>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3308      	adds	r3, #8
 80011e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fd46 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80011ee:	4603      	mov	r3, r0
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	fa02 f403 	lsl.w	r4, r2, r3
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	2101      	movs	r1, #1
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fccb 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001206:	4603      	mov	r3, r0
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	b251      	sxtb	r1, r2
 800120c:	b262      	sxtb	r2, r4
 800120e:	430a      	orrs	r2, r1
 8001210:	b252      	sxtb	r2, r2
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
 800121c:	e7dd      	b.n	80011da <_ZN9SmartFuse6handleEv+0x2ce>
		tx_data[2] = this->toggle << 1;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461c      	mov	r4, r3
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2102      	movs	r1, #2
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fcb6 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001230:	4603      	mov	r3, r0
 8001232:	0062      	lsls	r2, r4, #1
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	461a      	mov	r2, r3
 800123e:	6939      	ldr	r1, [r7, #16]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 fbfd 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d82a      	bhi.n	80012a6 <_ZN9SmartFuse6handleEv+0x39a>
		if(this->channels[i].active != read_fuses_states[i])
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3308      	adds	r3, #8
 8001254:	6a39      	ldr	r1, [r7, #32]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fd0f 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800125c:	4603      	mov	r3, r0
 800125e:	781c      	ldrb	r4, [r3, #0]
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	6a39      	ldr	r1, [r7, #32]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fd2a 	bl	8001cc0 <_ZNSt5arrayIbLj6EEixEj>
 800126c:	4603      	mov	r3, r0
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	429c      	cmp	r4, r3
 8001272:	bf14      	ite	ne
 8001274:	2301      	movne	r3, #1
 8001276:	2300      	moveq	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00f      	beq.n	800129e <_ZN9SmartFuse6handleEv+0x392>
			this->channels[i].state = ChannelState::STKFLTR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3308      	adds	r3, #8
 8001282:	6a39      	ldr	r1, [r7, #32]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fcf8 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800128a:	4603      	mov	r3, r0
 800128c:	2204      	movs	r2, #4
 800128e:	721a      	strb	r2, [r3, #8]
			lock_state = true;
 8001290:	2301      	movs	r3, #1
 8001292:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			this->state = SmartFuseState::OLOFF;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2206      	movs	r2, #6
 800129a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	3301      	adds	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
 80012a4:	e7d1      	b.n	800124a <_ZN9SmartFuse6handleEv+0x33e>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	f200 8082 	bhi.w	80013b6 <_ZN9SmartFuse6handleEv+0x4aa>
		tx_data[0] = READ_AND_CLEAR(0x20 + i);
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	3320      	adds	r3, #32
 80012b8:	b2dc      	uxtb	r4, r3
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fc6b 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f064 027f 	orn	r2, r4, #127	; 0x7f
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	461a      	mov	r2, r3
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fbb1 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		if(rx_data[1] & (1 << 0)) this->channels[i].state = ChannelState::LatchOff;
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2101      	movs	r1, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fc59 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80012ea:	4603      	mov	r3, r0
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bf14      	ite	ne
 80012f6:	2301      	movne	r3, #1
 80012f8:	2300      	moveq	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <_ZN9SmartFuse6handleEv+0x406>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3308      	adds	r3, #8
 8001304:	69f9      	ldr	r1, [r7, #28]
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fcb7 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800130c:	4603      	mov	r3, r0
 800130e:	2203      	movs	r2, #3
 8001310:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 2)) this->channels[i].state = ChannelState::STKFLTR;
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2101      	movs	r1, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fc3f 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 800131e:	4603      	mov	r3, r0
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <_ZN9SmartFuse6handleEv+0x43a>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3308      	adds	r3, #8
 8001338:	69f9      	ldr	r1, [r7, #28]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fc9d 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001340:	4603      	mov	r3, r0
 8001342:	2204      	movs	r2, #4
 8001344:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 3)) this->channels[i].state = ChannelState::VDSFS;
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fc25 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001352:	4603      	mov	r3, r0
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d008      	beq.n	800137a <_ZN9SmartFuse6handleEv+0x46e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3308      	adds	r3, #8
 800136c:	69f9      	ldr	r1, [r7, #28]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fc83 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001374:	4603      	mov	r3, r0
 8001376:	2205      	movs	r2, #5
 8001378:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 4)) this->channels[i].state = ChannelState::CHFBSR;
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2101      	movs	r1, #1
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fc0b 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001386:	4603      	mov	r3, r0
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	2b00      	cmp	r3, #0
 8001390:	bf14      	ite	ne
 8001392:	2301      	movne	r3, #1
 8001394:	2300      	moveq	r3, #0
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d008      	beq.n	80013ae <_ZN9SmartFuse6handleEv+0x4a2>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3308      	adds	r3, #8
 80013a0:	69f9      	ldr	r1, [r7, #28]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fc69 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2206      	movs	r2, #6
 80013ac:	721a      	strb	r2, [r3, #8]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	e779      	b.n	80012aa <_ZN9SmartFuse6handleEv+0x39e>
	if(this->action_defined && this->action_timer.checkIfTimedOutAndReset())
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <_ZN9SmartFuse6handleEv+0x4c6>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	338c      	adds	r3, #140	; 0x8c
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f8a2 	bl	800450c <_ZN5Timer23checkIfTimedOutAndResetEv>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <_ZN9SmartFuse6handleEv+0x4c6>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <_ZN9SmartFuse6handleEv+0x4c8>
 80013d2:	2300      	movs	r3, #0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <_ZN9SmartFuse6handleEv+0x4d8>
		this->action(this);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3398      	adds	r3, #152	; 0x98
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fc8e 	bl	8001d00 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_>
	if (!lock_state) this->state = getGSB(rx_data);
 80013e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013e8:	f083 0301 	eor.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d008      	beq.n	8001404 <_ZN9SmartFuse6handleEv+0x4f8>
 80013f2:	68f9      	ldr	r1, [r7, #12]
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fb98 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	return this->state;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
}
 800140a:	4618      	mov	r0, r3
 800140c:	373c      	adds	r7, #60	; 0x3c
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
	...

08001414 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>:
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
 8001420:	4613      	mov	r3, r2
 8001422:	803b      	strh	r3, [r7, #0]
	std::array < uint8_t, 3 >  tx_data { 0, 0, 0 };
 8001424:	4a22      	ldr	r2, [pc, #136]	; (80014b0 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0x9c>)
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	4611      	mov	r1, r2
 800142e:	8019      	strh	r1, [r3, #0]
 8001430:	3302      	adds	r3, #2
 8001432:	0c12      	lsrs	r2, r2, #16
 8001434:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 >  rx_data { 0, 0, 0 };
 8001436:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0x9c>)
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	4611      	mov	r1, r2
 8001440:	8019      	strh	r1, [r3, #0]
 8001442:	3302      	adds	r3, #2
 8001444:	0c12      	lsrs	r2, r2, #16
 8001446:	701a      	strb	r2, [r3, #0]
	if(duty_cykle > 1023) duty_cykle = 1023;
 8001448:	883b      	ldrh	r3, [r7, #0]
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d302      	bcc.n	8001456 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0x42>
 8001450:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001454:	803b      	strh	r3, [r7, #0]
	tx_data = { WRITE_RAM(0x00 + int(channel)), uint8_t(duty_cykle >> 8), uint8_t(duty_cykle << 4) | this->toggle << 1 };
 8001456:	883b      	ldrh	r3, [r7, #0]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	b29b      	uxth	r3, r3
 800145c:	b2d9      	uxtb	r1, r3
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	b2db      	uxtb	r3, r3
 8001466:	b25a      	sxtb	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	b25b      	sxtb	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b25b      	sxtb	r3, r3
 8001474:	b2da      	uxtb	r2, r3
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	733b      	strb	r3, [r7, #12]
 800147a:	460b      	mov	r3, r1
 800147c:	737b      	strb	r3, [r7, #13]
 800147e:	4613      	mov	r3, r2
 8001480:	73bb      	strb	r3, [r7, #14]
	this->transmitReceiveData(tx_data, rx_data);
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	461a      	mov	r2, r3
 8001488:	68f9      	ldr	r1, [r7, #12]
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fad8 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fb49 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	return this->state;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	080094ac 	.word	0x080094ac

080014b4 <_ZNK9SmartFuse8getStateEv>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	return this->state;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_ZN9SmartFuse15getChannelStateE7Channel>:
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	70fb      	strb	r3, [r7, #3]
	return this->channels[size_t(channel)].state;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3308      	adds	r3, #8
 80014de:	78fa      	ldrb	r2, [r7, #3]
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fbc9 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80014e8:	4603      	mov	r3, r0
 80014ea:	7a1b      	ldrb	r3, [r3, #8]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_ZN9SmartFuse17getChannelsStatesEv>:
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3308      	adds	r3, #8
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fbb8 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800150a:	4603      	mov	r3, r0
 800150c:	7a1a      	ldrb	r2, [r3, #8]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	701a      	strb	r2, [r3, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	3308      	adds	r3, #8
 8001516:	2101      	movs	r1, #1
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fbae 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800151e:	4603      	mov	r3, r0
 8001520:	7a1a      	ldrb	r2, [r3, #8]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	705a      	strb	r2, [r3, #1]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3308      	adds	r3, #8
 800152a:	2102      	movs	r1, #2
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fba4 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001532:	4603      	mov	r3, r0
 8001534:	7a1a      	ldrb	r2, [r3, #8]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	709a      	strb	r2, [r3, #2]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	3308      	adds	r3, #8
 800153e:	2103      	movs	r1, #3
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fb9a 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001546:	4603      	mov	r3, r0
 8001548:	7a1a      	ldrb	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	70da      	strb	r2, [r3, #3]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3308      	adds	r3, #8
 8001552:	2104      	movs	r1, #4
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fb90 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800155a:	4603      	mov	r3, r0
 800155c:	7a1a      	ldrb	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	711a      	strb	r2, [r3, #4]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3308      	adds	r3, #8
 8001566:	2105      	movs	r1, #5
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fb86 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800156e:	4603      	mov	r3, r0
 8001570:	7a1a      	ldrb	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	715a      	strb	r2, [r3, #5]
}
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_ZN9SmartFuse19getChannelsCurrentsEv>:
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3308      	adds	r3, #8
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fb73 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001594:	4603      	mov	r3, r0
 8001596:	885a      	ldrh	r2, [r3, #2]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	801a      	strh	r2, [r3, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	3308      	adds	r3, #8
 80015a0:	2101      	movs	r1, #1
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fb69 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80015a8:	4603      	mov	r3, r0
 80015aa:	885a      	ldrh	r2, [r3, #2]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	805a      	strh	r2, [r3, #2]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3308      	adds	r3, #8
 80015b4:	2102      	movs	r1, #2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fb5f 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80015bc:	4603      	mov	r3, r0
 80015be:	885a      	ldrh	r2, [r3, #2]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	809a      	strh	r2, [r3, #4]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3308      	adds	r3, #8
 80015c8:	2103      	movs	r1, #3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fb55 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80015d0:	4603      	mov	r3, r0
 80015d2:	885a      	ldrh	r2, [r3, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	80da      	strh	r2, [r3, #6]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	3308      	adds	r3, #8
 80015dc:	2104      	movs	r1, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fb4b 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80015e4:	4603      	mov	r3, r0
 80015e6:	885a      	ldrh	r2, [r3, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	811a      	strh	r2, [r3, #8]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	3308      	adds	r3, #8
 80015f0:	2105      	movs	r1, #5
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fb41 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80015f8:	4603      	mov	r3, r0
 80015fa:	885a      	ldrh	r2, [r3, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	815a      	strh	r2, [r3, #10]
}
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_ZN9SmartFuse5resetEv>:
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	tx_data = { RESET_SMARTFUSE(), 0, 0 };
 8001610:	23ff      	movs	r3, #255	; 0xff
 8001612:	743b      	strb	r3, [r7, #16]
 8001614:	2300      	movs	r3, #0
 8001616:	747b      	strb	r3, [r7, #17]
 8001618:	2300      	movs	r3, #0
 800161a:	74bb      	strb	r3, [r7, #18]
	this->transmitReceiveData(tx_data, rx_data);
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	461a      	mov	r2, r3
 8001622:	6939      	ldr	r1, [r7, #16]
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fa0b 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { READ_ROM(0x01), 0, 0 };
 800162a:	23c1      	movs	r3, #193	; 0xc1
 800162c:	743b      	strb	r3, [r7, #16]
 800162e:	2300      	movs	r3, #0
 8001630:	747b      	strb	r3, [r7, #17]
 8001632:	2300      	movs	r3, #0
 8001634:	74bb      	strb	r3, [r7, #18]
	for (size_t i = 0; i < fuse_timeout; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2b05      	cmp	r3, #5
 800163e:	d845      	bhi.n	80016cc <_ZN9SmartFuse5resetEv+0xc4>
		if(!IF_RESET_STATE(rx_data)) break;
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f000 faa8 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 800164c:	4603      	mov	r3, r0
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d113      	bne.n	800167c <_ZN9SmartFuse5resetEv+0x74>
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	2101      	movs	r1, #1
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fa9e 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001660:	4603      	mov	r3, r0
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <_ZN9SmartFuse5resetEv+0x74>
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2102      	movs	r1, #2
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fa94 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001674:	4603      	mov	r3, r0
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00d      	beq.n	8001698 <_ZN9SmartFuse5resetEv+0x90>
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fa8a 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001688:	4603      	mov	r3, r0
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <_ZN9SmartFuse5resetEv+0x90>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <_ZN9SmartFuse5resetEv+0x92>
 8001698:	2300      	movs	r3, #0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d115      	bne.n	80016ca <_ZN9SmartFuse5resetEv+0xc2>
		else if(i == fuse_timeout - 1)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d104      	bne.n	80016ae <_ZN9SmartFuse5resetEv+0xa6>
			this->state = SmartFuseState::NotResponding;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2208      	movs	r2, #8
 80016a8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 80016ac:	e017      	b.n	80016de <_ZN9SmartFuse5resetEv+0xd6>
		this->transmitReceiveData(tx_data, rx_data);
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	461a      	mov	r2, r3
 80016b4:	6939      	ldr	r1, [r7, #16]
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f9c2 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		HAL_Delay(1);
 80016bc:	2001      	movs	r0, #1
 80016be:	f002 ffed 	bl	800469c <HAL_Delay>
	for (size_t i = 0; i < fuse_timeout; i++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e7b7      	b.n	800163a <_ZN9SmartFuse5resetEv+0x32>
		if(!IF_RESET_STATE(rx_data)) break;
 80016ca:	bf00      	nop
	this->state = getGSB(rx_data);
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fa2b 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZN9SmartFuse18setUpAllDutyCyclesEv>:
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < 6; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d83e      	bhi.n	8001774 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0x90>
		tx_data[0] = WRITE_RAM(0x00 + i);
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fa4d 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001702:	4603      	mov	r3, r0
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]
		tx_data[1] = uint8_t(this->channels_settings.duty_cycle[i] >> 4);
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	332c      	adds	r3, #44	; 0x2c
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	88db      	ldrh	r3, [r3, #6]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	b29c      	uxth	r4, r3
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	2101      	movs	r1, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fa3b 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001726:	4603      	mov	r3, r0
 8001728:	b2e2      	uxtb	r2, r4
 800172a:	701a      	strb	r2, [r3, #0]
		tx_data[2] = uint8_t(this->channels_settings.duty_cycle[i] << 4) | this->toggle << 1;
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	332c      	adds	r3, #44	; 0x2c
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	88db      	ldrh	r3, [r3, #6]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	b2db      	uxtb	r3, r3
 800173e:	b25a      	sxtb	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	b25b      	sxtb	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b25c      	sxtb	r4, r3
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2102      	movs	r1, #2
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fa22 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001758:	4603      	mov	r3, r0
 800175a:	b2e2      	uxtb	r2, r4
 800175c:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	461a      	mov	r2, r3
 8001764:	6939      	ldr	r1, [r7, #16]
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f96a 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < 6; i++)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e7bd      	b.n	80016f0 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0xc>
	this->state = getGSB(rx_data);
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff f9d7 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
	...

08001790 <_ZN9SmartFuse21setUpAllSamplingModesEv>:
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data = { 0, 0, 0 };
 8001798:	4a36      	ldr	r2, [pc, #216]	; (8001874 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xe4>)
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	4611      	mov	r1, r2
 80017a2:	8019      	strh	r1, [r3, #0]
 80017a4:	3302      	adds	r3, #2
 80017a6:	0c12      	lsrs	r2, r2, #16
 80017a8:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d852      	bhi.n	800185a <_ZN9SmartFuse21setUpAllSamplingModesEv+0xca>
		tx_data[0] = WRITE_RAM(0x08 + i);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	b2dc      	uxtb	r4, r3
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f9ec 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f104 0208 	add.w	r2, r4, #8
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]
		switch (this->channels_settings.sampling_mode[i])
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	4413      	add	r3, r2
 80017d4:	3358      	adds	r3, #88	; 0x58
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d833      	bhi.n	8001844 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
 80017dc:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <_ZN9SmartFuse21setUpAllSamplingModesEv+0x54>)
 80017de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e2:	bf00      	nop
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	08001809 	.word	0x08001809
 80017ec:	0800181d 	.word	0x0800181d
 80017f0:	08001831 	.word	0x08001831
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	2102      	movs	r1, #2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f9ce 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001800:	4603      	mov	r3, r0
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	e01d      	b.n	8001844 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2102      	movs	r1, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f9c4 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001814:	4603      	mov	r3, r0
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e013      	b.n	8001844 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	2102      	movs	r1, #2
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f9ba 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001828:	4603      	mov	r3, r0
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e009      	b.n	8001844 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	2102      	movs	r1, #2
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f9b0 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 800183c:	4603      	mov	r3, r0
 800183e:	22c0      	movs	r2, #192	; 0xc0
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	bf00      	nop
		this->transmitReceiveData(tx_data, rx_data);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	461a      	mov	r2, r3
 800184a:	6939      	ldr	r1, [r7, #16]
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f8f7 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e7a9      	b.n	80017ae <_ZN9SmartFuse21setUpAllSamplingModesEv+0x1e>
	this->state = getGSB(rx_data);
 800185a:	68f9      	ldr	r1, [r7, #12]
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff f964 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 800186c:	bf00      	nop
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}
 8001874:	080094ac 	.word	0x080094ac

08001878 <_ZN9SmartFuse22setUpAllLatchOffTimersEv>:
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 8001880:	4a40      	ldr	r2, [pc, #256]	; (8001984 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x10c>)
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	4611      	mov	r1, r2
 800188a:	8019      	strh	r1, [r3, #0]
 800188c:	3302      	adds	r3, #2
 800188e:	0c12      	lsrs	r2, r2, #16
 8001890:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 > rx_data { 0, 0, 0 };
 8001892:	4a3c      	ldr	r2, [pc, #240]	; (8001984 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x10c>)
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	4611      	mov	r1, r2
 800189c:	8019      	strh	r1, [r3, #0]
 800189e:	3302      	adds	r3, #2
 80018a0:	0c12      	lsrs	r2, r2, #16
 80018a2:	701a      	strb	r2, [r3, #0]
	tx_data[1] = this->channels_settings.latch_off_time_out[2] << 4 |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	b25a      	sxtb	r2, r3
		   this->channels_settings.latch_off_time_out[1];
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80018b4:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels_settings.latch_off_time_out[2] << 4 |
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b25c      	sxtb	r4, r3
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2101      	movs	r1, #1
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f96b 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b2e2      	uxtb	r2, r4
 80018ca:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels_settings.latch_off_time_out[1] << 4;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 4053 	ldrb.w	r4, [r3, #83]	; 0x53
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2102      	movs	r1, #2
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f95f 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80018de:	4603      	mov	r3, r0
 80018e0:	0122      	lsls	r2, r4, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x10);
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f955 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2210      	movs	r2, #16
 80018f6:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	461a      	mov	r2, r3
 80018fe:	68f9      	ldr	r1, [r7, #12]
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f89d 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data[1] = this->channels_settings.latch_off_time_out[5] << 4 |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	b25a      	sxtb	r2, r3
	       this->channels_settings.latch_off_time_out[4];
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001916:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels_settings.latch_off_time_out[5] << 4 |
 8001918:	4313      	orrs	r3, r2
 800191a:	b25c      	sxtb	r4, r3
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f93a 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001928:	4603      	mov	r3, r0
 800192a:	b2e2      	uxtb	r2, r4
 800192c:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels_settings.latch_off_time_out[3] << 4;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 4055 	ldrb.w	r4, [r3, #85]	; 0x55
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2102      	movs	r1, #2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f92e 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001940:	4603      	mov	r3, r0
 8001942:	0122      	lsls	r2, r4, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x11);
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f924 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001954:	4603      	mov	r3, r0
 8001956:	2211      	movs	r2, #17
 8001958:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	461a      	mov	r2, r3
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f86c 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff f8dd 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	080094ac 	.word	0x080094ac

08001988 <_ZN9SmartFuse22setUpAllChannelsStatesEv>:
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	tx_data[0] = WRITE_RAM(0x13);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f900 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 800199c:	4603      	mov	r3, r0
 800199e:	2213      	movs	r2, #19
 80019a0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f8f7 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d81e      	bhi.n	80019fc <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x74>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3308      	adds	r3, #8
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f957 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80019cc:	4603      	mov	r3, r0
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	fa02 f403 	lsl.w	r4, r2, r3
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2101      	movs	r1, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f8dc 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 80019e4:	4603      	mov	r3, r0
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	b251      	sxtb	r1, r2
 80019ea:	b262      	sxtb	r2, r4
 80019ec:	430a      	orrs	r2, r1
 80019ee:	b252      	sxtb	r2, r2
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e7dd      	b.n	80019b8 <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x30>
	tx_data[2] = this->toggle << 1;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461c      	mov	r4, r3
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	2102      	movs	r1, #2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f8c7 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	0062      	lsls	r2, r4, #1
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	6939      	ldr	r1, [r7, #16]
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f80e 	bl	8001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff f87f 	bl	8000b2a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}
	...

08001a40 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>:
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a56:	2b40      	cmp	r3, #64	; 0x40
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x34>
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a72:	601a      	str	r2, [r3, #0]
	calculateParityBit(tx_data);
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f829 	bl	8000ad0 <_ZL18calculateParityBitRSt5arrayIhLj3EE>
	this->slaveSelect();
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7ff f9c8 	bl	8000e14 <_ZN9SmartFuse11slaveSelectEv>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001a84:	2300      	movs	r3, #0
 8001a86:	75fb      	strb	r3, [r7, #23]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	75bb      	strb	r3, [r7, #22]
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d902      	bls.n	8001a98 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x58>
 8001a92:	7dbb      	ldrb	r3, [r7, #22]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d83e      	bhi.n	8001b16 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xd6>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d104      	bne.n	8001ab0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8001aa6:	7dbb      	ldrb	r3, [r7, #22]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d801      	bhi.n	8001ab0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x72>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00f      	beq.n	8001ad6 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x96>
			(*(uint8_t*) &rx_data[rx]) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f103 040c 	add.w	r4, r3, #12
 8001abe:	7dbb      	ldrb	r3, [r7, #22]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f86a 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	7822      	ldrb	r2, [r4, #0]
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]
			rx++;
 8001ad0:	7dbb      	ldrb	r3, [r7, #22]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	75bb      	strb	r3, [r7, #22]
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d104      	bne.n	8001aee <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d801      	bhi.n	8001aee <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xb0>
 8001aee:	2300      	movs	r3, #0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0cb      	beq.n	8001a8c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = tx_data[tx];
 8001af4:	7dfa      	ldrb	r2, [r7, #23]
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 f84d 	bl	8001b9c <_ZNSt5arrayIhLj3EEixEj>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	330c      	adds	r3, #12
 8001b0a:	7812      	ldrb	r2, [r2, #0]
 8001b0c:	701a      	strb	r2, [r3, #0]
			tx++;
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
 8001b10:	3301      	adds	r3, #1
 8001b12:	75fb      	strb	r3, [r7, #23]
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001b14:	e7ba      	b.n	8001a8c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
	this->slaveDeselect();
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff f98d 	bl	8000e36 <_ZN9SmartFuse13slaveDeselectEv>
}
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}
 8001b24:	2000071c 	.word	0x2000071c

08001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>:
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
	return this->channels[size_t(channel)].current;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3308      	adds	r3, #8
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f89c 	bl	8001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001b42:	4603      	mov	r3, r0
 8001b44:	885b      	ldrh	r3, [r3, #2]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>:
  ///\ingroup binary
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR14
    typename etl::enable_if<etl::is_integral<T>::value && etl::is_unsigned<T>::value && (etl::integral_limits<T>::bits == 8U), uint_least8_t>::type
    count_bits(T value)
 8001b4e:	b480      	push	{r7}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  {
#if ETL_CPP23_SUPPORTED && ETL_USING_STL
    return std::popcount(value);
#else
    uint32_t count = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]

    count = value - ((value >> 1U) & 0x55U);
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	60fb      	str	r3, [r7, #12]
    count = ((count >> 2U) & 0x33U) + (count & 0x33U);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
    count = ((count >> 4U) + count) & 0x0FU;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	091a      	lsrs	r2, r3, #4
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4413      	add	r3, r2
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	60fb      	str	r3, [r7, #12]

    return uint_least8_t(count);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	b2db      	uxtb	r3, r3
#endif
  }
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_ZNSt5arrayIhLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f95b 	bl	8001e66 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_ZN3etl6bitsetILj8EEC1Ey>:
    }

    //*************************************************************************
    /// Construct from a value.
    //*************************************************************************
    bitset(unsigned long long value)
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	e9c7 2300 	strd	r2, r3, [r7]
      : etl::ibitset(MAXN, ARRAY_SIZE, data)
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3310      	adds	r3, #16
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2108      	movs	r1, #8
 8001bd0:	f7fe feb4 	bl	800093c <_ZN3etl7ibitsetC1EjjPh>
    {
      initialise(value);
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bda:	4608      	mov	r0, r1
 8001bdc:	f7fe fe6c 	bl	80008b8 <_ZN3etl7ibitset10initialiseEy>
    }
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>:
      begin() noexcept
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f945 	bl	8001e82 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>:
      end() noexcept
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f939 	bl	8001e82 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001c10:	4603      	mov	r3, r0
 8001c12:	333c      	adds	r3, #60	; 0x3c
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_ZNSt4pairIttEC1IttLb1EEEv>:
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>
#endif
      _GLIBCXX_CONSTEXPR pair()
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	801a      	strh	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	805a      	strh	r2, [r3, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>:
    //*************************************************************************
    /// The internal invocation object.
    //*************************************************************************
    struct invocation_element
    {
      invocation_element() = default;
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_ZN3etl8delegateIFvP9SmartFuseEEC1Ev>:
    ETL_CONSTEXPR14 delegate()
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ffe7 	bl	8001c3e <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>
    }
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>:
      operator[](size_type __n) noexcept
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f907 	bl	8001e9c <_ZNSt14__array_traitsIN9SmartFuse11ChannelDataELj6EE6_S_refERA6_KS1_j>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_ZNSt4pairIttEaSERKS0_>:
      template<typename... _Args1, typename... _Args2>
	_GLIBCXX20_CONSTEXPR
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      _GLIBCXX20_CONSTEXPR pair&
      operator=(typename conditional<
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
		__and_<is_copy_assignable<_T1>,
		       is_copy_assignable<_T2>>::value,
		const pair&, const __nonesuch&>::type __p)
      {
	first = __p.first;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	881a      	ldrh	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	801a      	strh	r2, [r3, #0]
	second = __p.second;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	885a      	ldrh	r2, [r3, #2]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	805a      	strh	r2, [r3, #2]
	return *this;
 8001cb2:	687b      	ldr	r3, [r7, #4]
      }
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_ZNSt5arrayIbLj6EEixEj>:
      operator[](size_type __n) noexcept
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6839      	ldr	r1, [r7, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f8f6 	bl	8001ec0 <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_ZNK3etl8delegateIFvP9SmartFuseEE8is_validEv>:
    ETL_CONSTEXPR14 bool is_valid() const
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
      return invocation.stub != ETL_NULLPTR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf14      	ite	ne
 8001cee:	2301      	movne	r3, #1
 8001cf0:	2300      	moveq	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
    }
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_>:
    TReturn operator()(TParams... args) const
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
      ETL_ASSERT(is_valid(), ETL_ERROR(delegate_uninitialised));
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffe7 	bl	8001cde <_ZNK3etl8delegateIFvP9SmartFuseEE8is_validEv>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x24>
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x48>)
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x4c>)
 8001d1a:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001d1e:	480c      	ldr	r0, [pc, #48]	; (8001d50 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x50>)
 8001d20:	f006 fb7a 	bl	8008418 <__assert_func>
      return (*invocation.stub)(invocation.object, etl::forward<TParams>(args)...);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685c      	ldr	r4, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681d      	ldr	r5, [r3, #0]
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f8d4 	bl	8001edc <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001d34:	4603      	mov	r3, r0
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	47a0      	blx	r4
 8001d3e:	bf00      	nop
    }
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bdb0      	pop	{r4, r5, r7, pc}
 8001d46:	bf00      	nop
 8001d48:	080094b0 	.word	0x080094b0
 8001d4c:	080094c0 	.word	0x080094c0
 8001d50:	0800953c 	.word	0x0800953c

08001d54 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRK16ChannelsSettingsEEEvDpOT_>:
    /// Constructs a value at the end of the vector.
    /// If asserts or exceptions are enabled, emits vector_full if the vector is already full.
    ///\param value The value to add.
    //*********************************************************************
    template <typename ... Args>
    void emplace_back(Args && ... args)
 8001d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	6178      	str	r0, [r7, #20]
 8001d5c:	6139      	str	r1, [r7, #16]
 8001d5e:	60fa      	str	r2, [r7, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
    {
#if defined(ETL_CHECK_PUSH_POP)
      ETL_ASSERT(size() != CAPACITY, ETL_ERROR(vector_full));
#endif
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001d62:	6938      	ldr	r0, [r7, #16]
 8001d64:	f000 f8c5 	bl	8001ef2 <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	681c      	ldr	r4, [r3, #0]
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f8cb 	bl	8001f08 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001d72:	4603      	mov	r3, r0
 8001d74:	681d      	ldr	r5, [r3, #0]
 8001d76:	68b8      	ldr	r0, [r7, #8]
 8001d78:	f000 f8d1 	bl	8001f1e <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	681e      	ldr	r6, [r3, #0]
 8001d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d82:	f000 f8d7 	bl	8001f34 <_ZN3etl7forwardIRK16ChannelsSettingsEEOT_RNS_16remove_referenceIS4_E4typeE>
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	20a0      	movs	r0, #160	; 0xa0
 8001d90:	f7fe fc28 	bl	80005e4 <_ZnwjPv>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4633      	mov	r3, r6
 8001d9a:	462a      	mov	r2, r5
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	f7fe ff8f 	bl	8000cc0 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
      ++p_end;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	609a      	str	r2, [r3, #8]
      ETL_INCREMENT_DEBUG_COUNT
    }
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001db6 <_ZN3etl7ivectorI9SmartFuseE5beginEv>:
    iterator begin()
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
      return p_buffer;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
    }
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_ZN3etl7ivectorI9SmartFuseE3endEv>:
    iterator end()
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
      return p_end;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
    }
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>:
      operator[](size_type __n) noexcept
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6839      	ldr	r1, [r7, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f8a8 	bl	8001f4a <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>:
    reference operator [](size_t i)
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
      return p_buffer[i];
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6859      	ldr	r1, [r3, #4]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	015b      	lsls	r3, r3, #5
 8001e1c:	440b      	add	r3, r1
    }
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f894 	bl	8001f66 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_ZNSt5arrayIS_ItLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6839      	ldr	r1, [r7, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f897 	bl	8001f8a <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_refERA4_KS1_j>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 f88e 	bl	8001fae <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_ZNSt14__array_traitsIN9SmartFuse11ChannelDataELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8001ee4:	687b      	ldr	r3, [r7, #4]
  }
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8001efa:	687b      	ldr	r3, [r7, #4]
  }
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8001f10:	687b      	ldr	r3, [r7, #4]
  }
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8001f26:	687b      	ldr	r3, [r7, #4]
  }
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_ZN3etl7forwardIRK16ChannelsSettingsEEOT_RNS_16remove_referenceIS4_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8001f3c:	687b      	ldr	r3, [r7, #4]
  }
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_ZN11GpioElementD1Ev>:
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		//virtual void handle();
		virtual ~GpioElement() { };
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <_ZN11GpioElementD1Ev+0x1c>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	08009590 	.word	0x08009590

08001fe4 <_ZN11GpioElementD0Ev>:
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ffe9 	bl	8001fc4 <_ZN11GpioElementD1Ev>
 8001ff2:	2110      	movs	r1, #16
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f006 fa0a 	bl	800840e <_ZdlPvj>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
 *      Author: Piotr Lesicki
 */

#include "gpio elements.hpp"

GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	70fb      	strb	r3, [r7, #3]
						 port(port), pin(pin), is_inverted(is_inverted) { }
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x34>)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	715a      	strb	r2, [r3, #5]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	08009590 	.word	0x08009590

0800203c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin) :
							   GpioElement(port, pin, false) { }

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	70fb      	strb	r3, [r7, #3]
							   GpioElement(port, pin, is_inverted) { }
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	f7ff ffd7 	bl	8002004 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x2c>)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	08009580 	.word	0x08009580

0800206c <_ZN14GpioOutElement8activateEv>:

void GpioOutElement::activate()
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68d8      	ldr	r0, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	b299      	uxth	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	795b      	ldrb	r3, [r3, #5]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <_ZN14GpioOutElement8activateEv+0x1e>
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <_ZN14GpioOutElement8activateEv+0x20>
 800208a:	2301      	movs	r3, #1
 800208c:	461a      	mov	r2, r3
 800208e:	f004 fbe9 	bl	8006864 <HAL_GPIO_WritePin>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_ZN14GpioOutElement10deactivateEv>:

void GpioOutElement::deactivate()
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68d8      	ldr	r0, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	b299      	uxth	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	795b      	ldrb	r3, [r3, #5]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <_ZN14GpioOutElement10deactivateEv+0x1e>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <_ZN14GpioOutElement10deactivateEv+0x20>
 80020b8:	2300      	movs	r3, #0
 80020ba:	461a      	mov	r2, r3
 80020bc:	f004 fbd2 	bl	8006864 <HAL_GPIO_WritePin>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>:
}

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin) :
							 GpioElement(port, pin, false) { }

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	70fb      	strb	r3, [r7, #3]
							 GpioElement(port, pin, is_inverted) { }
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	f7ff ff91 	bl	8002004 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb+0x2c>)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	08009570 	.word	0x08009570

080020f8 <_ZN13GpioInElement8isActiveEv>:

bool GpioInElement::isActive()
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	 *		  1  |    1   |  0
	 *
	 *	  basically a XOR operation
	 *
	 */
	return ((HAL_GPIO_ReadPin((GPIO_TypeDef*)(this->port), this->pin) == GPIO_PIN_SET) != this->is_inverted);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	b29b      	uxth	r3, r3
 800210a:	4619      	mov	r1, r3
 800210c:	4610      	mov	r0, r2
 800210e:	f004 fb91 	bl	8006834 <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
 8002114:	2b01      	cmp	r3, #1
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	795b      	ldrb	r3, [r3, #5]
 8002124:	429a      	cmp	r2, r3
 8002126:	bf14      	ite	ne
 8002128:	2301      	movne	r3, #1
 800212a:	2300      	moveq	r3, #0
 800212c:	b2db      	uxtb	r3, r3
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <_ZN13GpioInElementD1Ev>:

		//void handle() override;
		void toggle();
};

class GpioInElement : public GpioElement
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_ZN13GpioInElementD1Ev+0x20>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff3b 	bl	8001fc4 <_ZN11GpioElementD1Ev>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	08009570 	.word	0x08009570

0800215c <_ZN13GpioInElementD0Ev>:
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ffe7 	bl	8002138 <_ZN13GpioInElementD1Ev>
 800216a:	2110      	movs	r1, #16
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f006 f94e 	bl	800840e <_ZdlPvj>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_ZN14GpioOutElementD1Ev>:
class GpioOutElement : public GpioElement
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	4a05      	ldr	r2, [pc, #20]	; (800219c <_ZN14GpioOutElementD1Ev+0x20>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff19 	bl	8001fc4 <_ZN11GpioElementD1Ev>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	08009580 	.word	0x08009580

080021a0 <_ZN14GpioOutElementD0Ev>:
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ffe7 	bl	800217c <_ZN14GpioOutElementD1Ev>
 80021ae:	2110      	movs	r1, #16
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f006 f92c 	bl	800840e <_ZdlPvj>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	4b5e      	ldr	r3, [pc, #376]	; (8002350 <MX_GPIO_Init+0x190>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	4a5d      	ldr	r2, [pc, #372]	; (8002350 <MX_GPIO_Init+0x190>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e2:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <MX_GPIO_Init+0x190>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ee:	4b58      	ldr	r3, [pc, #352]	; (8002350 <MX_GPIO_Init+0x190>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	4a57      	ldr	r2, [pc, #348]	; (8002350 <MX_GPIO_Init+0x190>)
 80021f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fa:	4b55      	ldr	r3, [pc, #340]	; (8002350 <MX_GPIO_Init+0x190>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	4b52      	ldr	r3, [pc, #328]	; (8002350 <MX_GPIO_Init+0x190>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	4a51      	ldr	r2, [pc, #324]	; (8002350 <MX_GPIO_Init+0x190>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002212:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <MX_GPIO_Init+0x190>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <MX_GPIO_Init+0x190>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <MX_GPIO_Init+0x190>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <MX_GPIO_Init+0x190>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <MX_GPIO_Init+0x190>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a45      	ldr	r2, [pc, #276]	; (8002350 <MX_GPIO_Init+0x190>)
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <MX_GPIO_Init+0x190>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	210f      	movs	r1, #15
 8002252:	4840      	ldr	r0, [pc, #256]	; (8002354 <MX_GPIO_Init+0x194>)
 8002254:	f004 fb06 	bl	8006864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002258:	2200      	movs	r2, #0
 800225a:	211e      	movs	r1, #30
 800225c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002260:	f004 fb00 	bl	8006864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f44f 7109 	mov.w	r1, #548	; 0x224
 800226a:	483b      	ldr	r0, [pc, #236]	; (8002358 <MX_GPIO_Init+0x198>)
 800226c:	f004 fafa 	bl	8006864 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8002270:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8002274:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002276:	2303      	movs	r3, #3
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4833      	ldr	r0, [pc, #204]	; (8002354 <MX_GPIO_Init+0x194>)
 8002286:	f004 f943 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800228a:	230f      	movs	r3, #15
 800228c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	482c      	ldr	r0, [pc, #176]	; (8002354 <MX_GPIO_Init+0x194>)
 80022a2:	f004 f935 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80022a6:	231e      	movs	r3, #30
 80022a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c0:	f004 f926 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9;
 80022c4:	f44f 7309 	mov.w	r3, #548	; 0x224
 80022c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	481e      	ldr	r0, [pc, #120]	; (8002358 <MX_GPIO_Init+0x198>)
 80022de:	f004 f917 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB4 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80022e2:	f64f 53d0 	movw	r3, #64976	; 0xfdd0
 80022e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022e8:	2303      	movs	r3, #3
 80022ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4818      	ldr	r0, [pc, #96]	; (8002358 <MX_GPIO_Init+0x198>)
 80022f8:	f004 f90a 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 80022fc:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8002300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002302:	2303      	movs	r3, #3
 8002304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002314:	f004 f8fc 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002318:	2304      	movs	r3, #4
 800231a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800231c:	2303      	movs	r3, #3
 800231e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	480c      	ldr	r0, [pc, #48]	; (800235c <MX_GPIO_Init+0x19c>)
 800232c:	f004 f8f0 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002330:	2308      	movs	r3, #8
 8002332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002334:	2303      	movs	r3, #3
 8002336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4807      	ldr	r0, [pc, #28]	; (8002360 <MX_GPIO_Init+0x1a0>)
 8002344:	f004 f8e4 	bl	8006510 <HAL_GPIO_Init>

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	; 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	48000800 	.word	0x48000800
 8002358:	48000400 	.word	0x48000400
 800235c:	48000c00 	.word	0x48000c00
 8002360:	48001c00 	.word	0x48001c00

08002364 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	601a      	str	r2, [r3, #0]
    {
    }
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
    {
    }
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	461a      	mov	r2, r3
 80023a8:	2300      	movs	r3, #0
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	6053      	str	r3, [r2, #4]
 80023ae:	6093      	str	r3, [r2, #8]
 80023b0:	60d3      	str	r3, [r2, #12]
 80023b2:	6113      	str	r3, [r2, #16]
 80023b4:	6153      	str	r3, [r2, #20]
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	331c      	adds	r3, #28
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	331c      	adds	r3, #28
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	68b8      	ldr	r0, [r7, #8]
 80023cc:	f003 fc26 	bl	8005c1c <HAL_CAN_GetRxMessage>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
    this->status =
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	791a      	ldrb	r2, [r3, #4]
 80023f0:	795b      	ldrb	r3, [r3, #5]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	6938      	ldr	r0, [r7, #16]
 800241c:	f001 f88a 	bl	8003534 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>
 8002420:	6178      	str	r0, [r7, #20]
 8002422:	6938      	ldr	r0, [r7, #16]
 8002424:	f001 f892 	bl	800354c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	429a      	cmp	r2, r3
 8002430:	d01f      	beq.n	8002472 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ffd2 	bl	80023e4 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 8002440:	4602      	mov	r2, r0
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6839      	ldr	r1, [r7, #0]
 8002462:	4610      	mov	r0, r2
 8002464:	4798      	blx	r3
        return true;
 8002466:	2301      	movs	r3, #1
 8002468:	e004      	b.n	8002474 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3304      	adds	r3, #4
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e7db      	b.n	800242a <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 8002472:	2300      	movs	r3, #0
  }
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_ZN8PUTM_CAN13Can_interface19get_tc_temperaturesEv>:
  Steering_Wheel_event get_steering_wheel_event() {
    return steering_wheel_event.data;
  }
  TC_main get_tc_main() { return tc_main.data; }
  TC_rear_suspension get_tc_rear() { return tc_rear_suspension.data; }
  TC_temperatures get_tc_temperatures() { return tc_temperatures.data; }
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f203 134d 	addw	r3, r3, #333	; 0x14d
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	6011      	str	r1, [r2, #0]
 8002492:	889b      	ldrh	r3, [r3, #4]
 8002494:	8093      	strh	r3, [r2, #4]
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff6f 	bl	8002398 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 80024ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 80024c2:	f107 0308 	add.w	r3, r7, #8
 80024c6:	4619      	mov	r1, r3
 80024c8:	4803      	ldr	r0, [pc, #12]	; (80024d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80024ca:	f7ff ff9d 	bl	8002408 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 80024ce:	bf00      	nop
 80024d0:	3730      	adds	r7, #48	; 0x30
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000000 	.word	0x20000000

080024dc <_ZN16SmartFuseHandlerILm4EEC1Ev>:

		SmartFuseState getGSB(std::array < uint8_t, 3 > x);
};

template <uint32_t num_of_sf>
class SmartFuseHandler
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 f84a 	bl	8003580 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <_ZN11GpioElementC1ERKS_>:
class GpioElement
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <_ZN11GpioElementC1ERKS_+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	791a      	ldrb	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	711a      	strb	r2, [r3, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	795a      	ldrb	r2, [r3, #5]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	715a      	strb	r2, [r3, #5]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	08009590 	.word	0x08009590

0800253c <_ZN13GpioInElementC1ERKS_>:
class GpioInElement : public GpioElement
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ffd3 	bl	80024f8 <_ZN11GpioElementC1ERKS_>
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <_ZN13GpioInElementC1ERKS_+0x28>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	08009570 	.word	0x08009570

08002568 <_ZZ4mainENKUlP9SmartFuseE_clES0_>:
	led_error.deactivate();

	std::array < GpioInElement, 5 > optos { safety_ams, safety_spare, safety_tms, safety_td, safety_hvd };

	sf_handler.smart_fuses[1].setActionInterval(100);
	sf_handler.smart_fuses[1].setAction([](SmartFuse* sf)
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
	{
		static uint16_t previous_setting = 1023;

		uint16_t setting = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	81fb      	strh	r3, [r7, #14]

		auto temps = PUTM_CAN::can.get_tc_temperatures();
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	4919      	ldr	r1, [pc, #100]	; (80025e0 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x78>)
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff7d 	bl	800247c <_ZN8PUTM_CAN13Can_interface19get_tc_temperaturesEv>

		if(temps.water_temp_in > 60) setting = 1023;
 8002582:	7abb      	ldrb	r3, [r7, #10]
 8002584:	2b3c      	cmp	r3, #60	; 0x3c
 8002586:	d903      	bls.n	8002590 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x28>
 8002588:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800258c:	81fb      	strh	r3, [r7, #14]
 800258e:	e00f      	b.n	80025b0 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x48>
		else if(temps.water_temp_in > 50) setting = 800;
 8002590:	7abb      	ldrb	r3, [r7, #10]
 8002592:	2b32      	cmp	r3, #50	; 0x32
 8002594:	d903      	bls.n	800259e <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x36>
 8002596:	f44f 7348 	mov.w	r3, #800	; 0x320
 800259a:	81fb      	strh	r3, [r7, #14]
 800259c:	e008      	b.n	80025b0 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x48>
		else if(temps.water_temp_in > 40) setting = 500;
 800259e:	7abb      	ldrb	r3, [r7, #10]
 80025a0:	2b28      	cmp	r3, #40	; 0x28
 80025a2:	d903      	bls.n	80025ac <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x44>
 80025a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80025a8:	81fb      	strh	r3, [r7, #14]
 80025aa:	e001      	b.n	80025b0 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x48>
		else setting = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	81fb      	strh	r3, [r7, #14]

		if(previous_setting != setting)
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x7c>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	89fa      	ldrh	r2, [r7, #14]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d00e      	beq.n	80025d8 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x70>
		{
			// fan left
			sf->setChannelDutyCykle(Channel::c3, setting);
 80025ba:	89fb      	ldrh	r3, [r7, #14]
 80025bc:	461a      	mov	r2, r3
 80025be:	2103      	movs	r1, #3
 80025c0:	6838      	ldr	r0, [r7, #0]
 80025c2:	f7fe ff27 	bl	8001414 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>
			// fan right
			sf->setChannelDutyCykle(Channel::c4, setting);
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	461a      	mov	r2, r3
 80025ca:	2104      	movs	r1, #4
 80025cc:	6838      	ldr	r0, [r7, #0]
 80025ce:	f7fe ff21 	bl	8001414 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>

			previous_setting = setting;
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x7c>)
 80025d4:	89fb      	ldrh	r3, [r7, #14]
 80025d6:	8013      	strh	r3, [r2, #0]
		}
	});
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000210 	.word	0x20000210

080025e8 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80025e8:	b5b0      	push	{r4, r5, r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4614      	mov	r4, r2
 80025fa:	461d      	mov	r5, r3
 80025fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002600:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002604:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3318      	adds	r3, #24
 800260c:	2203      	movs	r2, #3
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	4618      	mov	r0, r3
 8002612:	f005 ff63 	bl	80084dc <memcpy>
  }
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bdb0      	pop	{r4, r5, r7, pc}

08002620 <main>:
{
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	b0db      	sub	sp, #364	; 0x16c
 8002624:	af02      	add	r7, sp, #8
	uint8_t _1 = 0x2;
 8002626:	2302      	movs	r3, #2
 8002628:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
	ChannelsSettings channels_settings
 800262c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002630:	2236      	movs	r2, #54	; 0x36
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f005 ff5f 	bl	80084f8 <memset>
 800263a:	2301      	movs	r3, #1
 800263c:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
 8002640:	2301      	movs	r3, #1
 8002642:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8002646:	2301      	movs	r3, #1
 8002648:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 800264c:	2301      	movs	r3, #1
 800264e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8002652:	2301      	movs	r3, #1
 8002654:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8002658:	2301      	movs	r3, #1
 800265a:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 800265e:	2302      	movs	r3, #2
 8002660:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8002664:	2302      	movs	r3, #2
 8002666:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 800266a:	2302      	movs	r3, #2
 800266c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8002670:	2302      	movs	r3, #2
 8002672:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002676:	2302      	movs	r3, #2
 8002678:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 800267c:	2302      	movs	r3, #2
 800267e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 8002682:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002686:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 800268a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800268e:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8002692:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002696:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 800269a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800269e:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 80026a2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80026a6:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 80026aa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80026ae:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80026b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b6:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80026ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026be:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 80026c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80026ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ce:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 80026d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d6:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
 80026da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026de:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
	};
 80026e2:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80026e6:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 80026ea:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80026ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80026f2:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80026f6:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80026fa:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80026fe:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 8002702:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8002706:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800270a:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800270e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_1, &hspi1, channels_settings);
 8002712:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4bc3      	ldr	r3, [pc, #780]	; (8002a28 <main+0x408>)
 800271a:	2202      	movs	r2, #2
 800271c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002720:	48c2      	ldr	r0, [pc, #776]	; (8002a2c <main+0x40c>)
 8002722:	f7fd ff6b 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_2, &hspi1, channels_settings);
 8002726:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	4bbe      	ldr	r3, [pc, #760]	; (8002a28 <main+0x408>)
 800272e:	2204      	movs	r2, #4
 8002730:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002734:	48bd      	ldr	r0, [pc, #756]	; (8002a2c <main+0x40c>)
 8002736:	f7fd ff61 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_3, &hspi1, channels_settings);
 800273a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	4bb9      	ldr	r3, [pc, #740]	; (8002a28 <main+0x408>)
 8002742:	2208      	movs	r2, #8
 8002744:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002748:	48b8      	ldr	r0, [pc, #736]	; (8002a2c <main+0x40c>)
 800274a:	f7fd ff57 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_4, &hspi1, channels_settings);
 800274e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4bb4      	ldr	r3, [pc, #720]	; (8002a28 <main+0x408>)
 8002756:	2210      	movs	r2, #16
 8002758:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800275c:	48b3      	ldr	r0, [pc, #716]	; (8002a2c <main+0x40c>)
 800275e:	f7fd ff4d 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
  HAL_Init();
 8002762:	f001 ff26 	bl	80045b2 <HAL_Init>
  SystemClock_Config();
 8002766:	f000 fa59 	bl	8002c1c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800276a:	f7ff fd29 	bl	80021c0 <MX_GPIO_Init>
  MX_CAN1_Init();
 800276e:	f7fd feaf 	bl	80004d0 <MX_CAN1_Init>
  MX_ADC1_Init();
 8002772:	f7fd fd95 	bl	80002a0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002776:	f001 fcbb 	bl	80040f0 <MX_SPI1_Init>
	sf_handler.initAll();
 800277a:	48ac      	ldr	r0, [pc, #688]	; (8002a2c <main+0x40c>)
 800277c:	f7fd ff7e 	bl	800067c <_ZN16SmartFuseHandlerILm4EE7initAllEv>
	initCAN();
 8002780:	f000 faac 	bl	8002cdc <_Z7initCANv>
	led_ok.deactivate();
 8002784:	48aa      	ldr	r0, [pc, #680]	; (8002a30 <main+0x410>)
 8002786:	f7ff fc88 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 800278a:	48aa      	ldr	r0, [pc, #680]	; (8002a34 <main+0x414>)
 800278c:	f7ff fc85 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8002790:	48a9      	ldr	r0, [pc, #676]	; (8002a38 <main+0x418>)
 8002792:	f7ff fc82 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 8002796:	48a9      	ldr	r0, [pc, #676]	; (8002a3c <main+0x41c>)
 8002798:	f7ff fc7f 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
	std::array < GpioInElement, 5 > optos { safety_ams, safety_spare, safety_tms, safety_td, safety_hvd };
 800279c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80027a0:	49a7      	ldr	r1, [pc, #668]	; (8002a40 <main+0x420>)
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff feca 	bl	800253c <_ZN13GpioInElementC1ERKS_>
 80027a8:	3410      	adds	r4, #16
 80027aa:	49a6      	ldr	r1, [pc, #664]	; (8002a44 <main+0x424>)
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff fec5 	bl	800253c <_ZN13GpioInElementC1ERKS_>
 80027b2:	3410      	adds	r4, #16
 80027b4:	49a4      	ldr	r1, [pc, #656]	; (8002a48 <main+0x428>)
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7ff fec0 	bl	800253c <_ZN13GpioInElementC1ERKS_>
 80027bc:	3410      	adds	r4, #16
 80027be:	49a3      	ldr	r1, [pc, #652]	; (8002a4c <main+0x42c>)
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff febb 	bl	800253c <_ZN13GpioInElementC1ERKS_>
 80027c6:	f104 0310 	add.w	r3, r4, #16
 80027ca:	49a1      	ldr	r1, [pc, #644]	; (8002a50 <main+0x430>)
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff feb5 	bl	800253c <_ZN13GpioInElementC1ERKS_>
	sf_handler.smart_fuses[1].setActionInterval(100);
 80027d2:	2101      	movs	r1, #1
 80027d4:	4895      	ldr	r0, [pc, #596]	; (8002a2c <main+0x40c>)
 80027d6:	f7ff fb15 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80027da:	4603      	mov	r3, r0
 80027dc:	2164      	movs	r1, #100	; 0x64
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe faed 	bl	8000dbe <_ZN9SmartFuse17setActionIntervalEm>
	sf_handler.smart_fuses[1].setAction([](SmartFuse* sf)
 80027e4:	2101      	movs	r1, #1
 80027e6:	4891      	ldr	r0, [pc, #580]	; (8002a2c <main+0x40c>)
 80027e8:	f7ff fb0c 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80027ec:	4604      	mov	r4, r0
 80027ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80027f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fee7 	bl	80035cc <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_>
 80027fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002802:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002806:	4620      	mov	r0, r4
 8002808:	f7fe faed 	bl	8000de6 <_ZN9SmartFuse9setActionEN3etl8delegateIFvPS_EEE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	sf_handler.enableAll();
 800280c:	4887      	ldr	r0, [pc, #540]	; (8002a2c <main+0x40c>)
 800280e:	f7fd ff60 	bl	80006d2 <_ZN16SmartFuseHandlerILm4EE9enableAllEv>

	enable_mosfets.activate();
 8002812:	4890      	ldr	r0, [pc, #576]	; (8002a54 <main+0x434>)
 8002814:	f7ff fc2a 	bl	800206c <_ZN14GpioOutElement8activateEv>

	led_ok.activate();
 8002818:	4885      	ldr	r0, [pc, #532]	; (8002a30 <main+0x410>)
 800281a:	f7ff fc27 	bl	800206c <_ZN14GpioOutElement8activateEv>

	Timer timer_can_send_main_frame(10);
 800281e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002822:	210a      	movs	r1, #10
 8002824:	4618      	mov	r0, r3
 8002826:	f001 fe44 	bl	80044b2 <_ZN5TimerC1Em>
	Timer timer_can_send_other_frames(100);
 800282a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800282e:	2164      	movs	r1, #100	; 0x64
 8002830:	4618      	mov	r0, r3
 8002832:	f001 fe3e 	bl	80044b2 <_ZN5TimerC1Em>

	while (1)
	{
		//----------------------------------------------------------------------------------------
		// handle smart fuses and show as Ok/Warnings/Error
		auto state = sf_handler.handleAll();
 8002836:	487d      	ldr	r0, [pc, #500]	; (8002a2c <main+0x40c>)
 8002838:	f7fd fef5 	bl	8000626 <_ZN16SmartFuseHandlerILm4EE9handleAllEv>
 800283c:	4603      	mov	r3, r0
 800283e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
		switch (state)
 8002842:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8002846:	2b02      	cmp	r3, #2
 8002848:	d007      	beq.n	800285a <main+0x23a>
 800284a:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800284e:	2b08      	cmp	r3, #8
 8002850:	d107      	bne.n	8002862 <main+0x242>
		{
			case SmartFuseState::NotResponding: led_error.activate(); break;
 8002852:	487a      	ldr	r0, [pc, #488]	; (8002a3c <main+0x41c>)
 8002854:	f7ff fc0a 	bl	800206c <_ZN14GpioOutElement8activateEv>
 8002858:	e00c      	b.n	8002874 <main+0x254>
			case SmartFuseState::SPIError: led_error.activate(); break;
 800285a:	4878      	ldr	r0, [pc, #480]	; (8002a3c <main+0x41c>)
 800285c:	f7ff fc06 	bl	800206c <_ZN14GpioOutElement8activateEv>
 8002860:	e008      	b.n	8002874 <main+0x254>
			default:
			{
				led_warning_1.deactivate();
 8002862:	4874      	ldr	r0, [pc, #464]	; (8002a34 <main+0x414>)
 8002864:	f7ff fc19 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
				led_warning_2.deactivate();
 8002868:	4873      	ldr	r0, [pc, #460]	; (8002a38 <main+0x418>)
 800286a:	f7ff fc16 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
				led_error.deactivate();
 800286e:	4873      	ldr	r0, [pc, #460]	; (8002a3c <main+0x41c>)
 8002870:	f7ff fc13 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
			}
		}
		// debug stuff
		fuses_states = sf_handler.getStates();
 8002874:	486d      	ldr	r0, [pc, #436]	; (8002a2c <main+0x40c>)
 8002876:	f7fd ff5a 	bl	800072e <_ZN16SmartFuseHandlerILm4EE9getStatesEv>
 800287a:	4603      	mov	r3, r0
 800287c:	4a76      	ldr	r2, [pc, #472]	; (8002a58 <main+0x438>)
 800287e:	6013      	str	r3, [r2, #0]
		channels_states = sf_handler.getChannelsStates();
 8002880:	4c76      	ldr	r4, [pc, #472]	; (8002a5c <main+0x43c>)
 8002882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002886:	4969      	ldr	r1, [pc, #420]	; (8002a2c <main+0x40c>)
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd ff82 	bl	8000792 <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>
 800288e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002896:	461d      	mov	r5, r3
 8002898:	6828      	ldr	r0, [r5, #0]
 800289a:	6869      	ldr	r1, [r5, #4]
 800289c:	68aa      	ldr	r2, [r5, #8]
 800289e:	68eb      	ldr	r3, [r5, #12]
 80028a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a2:	6928      	ldr	r0, [r5, #16]
 80028a4:	6969      	ldr	r1, [r5, #20]
 80028a6:	c403      	stmia	r4!, {r0, r1}
		channels_currents = sf_handler.getChannelsCurrents();
 80028a8:	4d6d      	ldr	r5, [pc, #436]	; (8002a60 <main+0x440>)
 80028aa:	463b      	mov	r3, r7
 80028ac:	495f      	ldr	r1, [pc, #380]	; (8002a2c <main+0x40c>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd ff98 	bl	80007e4 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>
 80028b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80028b8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80028bc:	461c      	mov	r4, r3
 80028be:	462e      	mov	r6, r5
 80028c0:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80028c4:	4635      	mov	r5, r6
 80028c6:	4623      	mov	r3, r4
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d2:	3410      	adds	r4, #16
 80028d4:	3610      	adds	r6, #16
 80028d6:	4564      	cmp	r4, ip
 80028d8:	d1f4      	bne.n	80028c4 <main+0x2a4>

		//----------------------------------------------------------------------------------------
		// handle safety
		for (auto& safety : optos)
 80028da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028de:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80028e2:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80028e6:	f000 fe87 	bl	80035f8 <_ZNSt5arrayI13GpioInElementLj5EE5beginEv>
 80028ea:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
 80028ee:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80028f2:	f000 fe8d 	bl	8003610 <_ZNSt5arrayI13GpioInElementLj5EE3endEv>
 80028f6:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
 80028fa:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80028fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002902:	429a      	cmp	r2, r3
 8002904:	d00d      	beq.n	8002922 <main+0x302>
 8002906:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800290a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		{
			safety.isActive();
 800290e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002912:	f7ff fbf1 	bl	80020f8 <_ZN13GpioInElement8isActiveEv>
		for (auto& safety : optos)
 8002916:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800291a:	3310      	adds	r3, #16
 800291c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002920:	e7eb      	b.n	80028fa <main+0x2da>
		}

		//----------------------------------------------------------------------------------------
		// transmit receive can and handle
		if(timer_can_send_main_frame.checkIfTimedOutAndReset())
 8002922:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fdf0 	bl	800450c <_ZN5Timer23checkIfTimedOutAndResetEv>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80f6 	beq.w	8002b20 <main+0x500>
		{
			auto device_state = PUTM_CAN::SF_states::OK;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

			PUTM_CAN::FuseData fuses_overall_state { };
 800293a:	2300      	movs	r3, #0
 800293c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

			for(size_t i = 0; i < 4; i++)
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002946:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800294a:	2b03      	cmp	r3, #3
 800294c:	d819      	bhi.n	8002982 <main+0x362>
				if(fuses_states[i] != SmartFuseState::Ok)
 800294e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8002952:	4841      	ldr	r0, [pc, #260]	; (8002a58 <main+0x438>)
 8002954:	f7ff fa47 	bl	8001de6 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002958:	4603      	mov	r3, r0
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <main+0x356>
					device_state = static_cast<PUTM_CAN::SF_states>(i + 2);
 800296a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3302      	adds	r3, #2
 8002972:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
			for(size_t i = 0; i < 4; i++)
 8002976:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800297a:	3301      	adds	r3, #1
 800297c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002980:	e7e1      	b.n	8002946 <main+0x326>

			for(auto& sf : channels_currents)
 8002982:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <main+0x440>)
 8002984:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002988:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 800298c:	f000 fe4d 	bl	800362a <_ZNSt5arrayIS_ItLj6EELj4EE5beginEv>
 8002990:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8002994:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8002998:	f000 fe53 	bl	8003642 <_ZNSt5arrayIS_ItLj6EELj4EE3endEv>
 800299c:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 80029a0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80029a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d05b      	beq.n	8002a64 <main+0x444>
 80029ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80029b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				for(auto& ch_current : sf)
 80029b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80029b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029bc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80029c0:	f000 fe4c 	bl	800365c <_ZNSt5arrayItLj6EE5beginEv>
 80029c4:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 80029c8:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80029cc:	f000 fe52 	bl	8003674 <_ZNSt5arrayItLj6EE3endEv>
 80029d0:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
 80029d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80029d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80029dc:	429a      	cmp	r2, r3
 80029de:	d01d      	beq.n	8002a1c <main+0x3fc>
 80029e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
					fuses_overall_state.current += ch_current;
 80029e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80029ec:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002a08:	f362 130f 	bfi	r3, r2, #4, #12
 8002a0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
				for(auto& ch_current : sf)
 8002a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a14:	3302      	adds	r3, #2
 8002a16:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a1a:	e7db      	b.n	80029d4 <main+0x3b4>
			for(auto& sf : channels_currents)
 8002a1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a20:	330c      	adds	r3, #12
 8002a22:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a26:	e7bb      	b.n	80029a0 <main+0x380>
 8002a28:	2000071c 	.word	0x2000071c
 8002a2c:	20000474 	.word	0x20000474
 8002a30:	20000330 	.word	0x20000330
 8002a34:	20000340 	.word	0x20000340
 8002a38:	20000350 	.word	0x20000350
 8002a3c:	20000360 	.word	0x20000360
 8002a40:	200003b0 	.word	0x200003b0
 8002a44:	200003c0 	.word	0x200003c0
 8002a48:	200003d0 	.word	0x200003d0
 8002a4c:	200003e0 	.word	0x200003e0
 8002a50:	200003f0 	.word	0x200003f0
 8002a54:	200003a0 	.word	0x200003a0
 8002a58:	20000428 	.word	0x20000428
 8002a5c:	2000042c 	.word	0x2000042c
 8002a60:	20000444 	.word	0x20000444

			for(auto& sf : fuses_states)
 8002a64:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <main+0x5e8>)
 8002a66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a6a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002a6e:	f000 fe0e 	bl	800368e <_ZNSt5arrayI14SmartFuseStateLj4EE5beginEv>
 8002a72:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 8002a76:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002a7a:	f000 fe14 	bl	80036a6 <_ZNSt5arrayI14SmartFuseStateLj4EE3endEv>
 8002a7e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8002a82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d023      	beq.n	8002ad6 <main+0x4b6>
 8002a8e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002a92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				fuses_overall_state.ok |= (sf == SmartFuseState::Ok);
 8002a96:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002a9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	b25a      	sxtb	r2, r3
 8002aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	b25b      	sxtb	r3, r3
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	b25b      	sxtb	r3, r3
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002ac2:	f362 0300 	bfi	r3, r2, #0, #1
 8002ac6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
			for(auto& sf : fuses_states)
 8002aca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002ad4:	e7d5      	b.n	8002a82 <main+0x462>

			PUTM_CAN::SF_main sf_main
			{
				.fuses_overall_state = fuses_overall_state,
				.device_state =	device_state
			};
 8002ad6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002ada:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8002ade:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ae2:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a

			PUTM_CAN::Can_tx_message<PUTM_CAN::SF_main> can_sender(sf_main, PUTM_CAN::can_tx_header_SF_MAIN);
 8002ae6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002aea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002aee:	4a47      	ldr	r2, [pc, #284]	; (8002c0c <main+0x5ec>)
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fd79 	bl	80025e8 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

			if(can_sender.send(hcan1) != HAL_StatusTypeDef::HAL_OK) led_error.activate();
 8002af6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002afa:	4945      	ldr	r1, [pc, #276]	; (8002c10 <main+0x5f0>)
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fddf 	bl	80036c0 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <main+0x4fa>
 8002b12:	4840      	ldr	r0, [pc, #256]	; (8002c14 <main+0x5f4>)
 8002b14:	f7ff faaa 	bl	800206c <_ZN14GpioOutElement8activateEv>
 8002b18:	e002      	b.n	8002b20 <main+0x500>
			else led_error.deactivate();
 8002b1a:	483e      	ldr	r0, [pc, #248]	; (8002c14 <main+0x5f4>)
 8002b1c:	f7ff fabd 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
		}

		if(timer_can_send_other_frames.checkIfTimedOutAndReset())
 8002b20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 fcf1 	bl	800450c <_ZN5Timer23checkIfTimedOutAndResetEv>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f43f ae82 	beq.w	8002836 <main+0x216>
		{
			auto can_ok = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

			if( sendCanFrameFrontBox() != HAL_OK ) can_ok = HAL_ERROR;
 8002b38:	f000 f93c 	bl	8002db4 <_Z20sendCanFrameFrontBoxv>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <main+0x532>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			if( sendCanFrameCoolingAndSafety() != HAL_OK ) can_ok = HAL_ERROR;
 8002b52:	f000 f9e5 	bl	8002f20 <_Z28sendCanFrameCoolingAndSafetyv>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <main+0x54c>
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			if( sendCanFrameDV() != HAL_OK ) can_ok = HAL_ERROR;
 8002b6c:	f000 fab6 	bl	80030dc <_Z14sendCanFrameDVv>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <main+0x566>
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			if( sendCanFrameDV() != HAL_OK ) can_ok = HAL_ERROR;
 8002b86:	f000 faa9 	bl	80030dc <_Z14sendCanFrameDVv>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <main+0x580>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			if( sendCanFrameWS() != HAL_OK ) can_ok = HAL_ERROR;
 8002ba0:	f000 fb7a 	bl	8003298 <_Z14sendCanFrameWSv>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <main+0x59a>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			if( sendCanFrameNucs() != HAL_OK ) can_ok = HAL_ERROR;
 8002bba:	f000 fbfb 	bl	80033b4 <_Z16sendCanFrameNucsv>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <main+0x5b4>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			if( sendCanFrameSafety() != HAL_OK ) can_ok = HAL_ERROR;
 8002bd4:	f000 fc50 	bl	8003478 <_Z18sendCanFrameSafetyv>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <main+0x5ce>
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

			if(can_ok != HAL_OK) led_warning_2.activate();
 8002bee:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <main+0x5de>
 8002bf6:	4808      	ldr	r0, [pc, #32]	; (8002c18 <main+0x5f8>)
 8002bf8:	f7ff fa38 	bl	800206c <_ZN14GpioOutElement8activateEv>
 8002bfc:	e61b      	b.n	8002836 <main+0x216>
			else led_warning_2.deactivate();
 8002bfe:	4806      	ldr	r0, [pc, #24]	; (8002c18 <main+0x5f8>)
 8002c00:	f7ff fa4b 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 8002c04:	e617      	b.n	8002836 <main+0x216>
 8002c06:	bf00      	nop
 8002c08:	20000428 	.word	0x20000428
 8002c0c:	08009598 	.word	0x08009598
 8002c10:	20000308 	.word	0x20000308
 8002c14:	20000360 	.word	0x20000360
 8002c18:	20000350 	.word	0x20000350

08002c1c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b098      	sub	sp, #96	; 0x60
 8002c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c22:	f107 0318 	add.w	r3, r7, #24
 8002c26:	2248      	movs	r2, #72	; 0x48
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f005 fc64 	bl	80084f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	60da      	str	r2, [r3, #12]
 8002c3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f003 fe48 	bl	80068d4 <HAL_PWREx_ControlVoltageScaling>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002c54:	f000 fc54 	bl	8003500 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c62:	2340      	movs	r3, #64	; 0x40
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c66:	2302      	movs	r3, #2
 8002c68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002c72:	231e      	movs	r3, #30
 8002c74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c76:	2302      	movs	r3, #2
 8002c78:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c82:	f107 0318 	add.w	r3, r7, #24
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 fec8 	bl	8006a1c <HAL_RCC_OscConfig>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 8002c9c:	f000 fc30 	bl	8003500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	2105      	movs	r1, #5
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f004 fb37 	bl	800732c <HAL_RCC_ClockConfig>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8002cce:	f000 fc17 	bl	8003500 <Error_Handler>
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3760      	adds	r7, #96	; 0x60
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <_Z7initCANv>:

/* USER CODE BEGIN 4 */

void initCAN()
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	can_filtering_config.FilterBank = 0;
 8002ce0:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <_Z7initCANv+0x98>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	615a      	str	r2, [r3, #20]
	can_filtering_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <_Z7initCANv+0x98>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
	can_filtering_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <_Z7initCANv+0x98>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	61da      	str	r2, [r3, #28]
	can_filtering_config.FilterIdHigh = 0x0000;
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <_Z7initCANv+0x98>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
	can_filtering_config.FilterIdLow = 0x0000;
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <_Z7initCANv+0x98>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	605a      	str	r2, [r3, #4]
	can_filtering_config.FilterMaskIdHigh = 0x0000;
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <_Z7initCANv+0x98>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
	can_filtering_config.FilterMaskIdLow = 0x0000;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <_Z7initCANv+0x98>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
	can_filtering_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <_Z7initCANv+0x98>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
	can_filtering_config.FilterActivation = ENABLE;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <_Z7initCANv+0x98>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	621a      	str	r2, [r3, #32]
	can_filtering_config.SlaveStartFilterBank = 14;
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <_Z7initCANv+0x98>)
 8002d18:	220e      	movs	r2, #14
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24

	if ( HAL_CAN_ConfigFilter(&hcan1, &can_filtering_config) != HAL_OK )
 8002d1c:	4915      	ldr	r1, [pc, #84]	; (8002d74 <_Z7initCANv+0x98>)
 8002d1e:	4816      	ldr	r0, [pc, #88]	; (8002d78 <_Z7initCANv+0x9c>)
 8002d20:	f002 fd93 	bl	800584a <HAL_CAN_ConfigFilter>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <_Z7initCANv+0x5c>
		Error_Handler();
 8002d34:	f000 fbe4 	bl	8003500 <Error_Handler>

	if ( HAL_CAN_Start(&hcan1) != HAL_OK )
 8002d38:	480f      	ldr	r0, [pc, #60]	; (8002d78 <_Z7initCANv+0x9c>)
 8002d3a:	f002 fe50 	bl	80059de <HAL_CAN_Start>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2300      	moveq	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <_Z7initCANv+0x76>
		Error_Handler();
 8002d4e:	f000 fbd7 	bl	8003500 <Error_Handler>

	if ( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8002d52:	2102      	movs	r1, #2
 8002d54:	4808      	ldr	r0, [pc, #32]	; (8002d78 <_Z7initCANv+0x9c>)
 8002d56:	f003 f873 	bl	8005e40 <HAL_CAN_ActivateNotification>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <_Z7initCANv+0x92>
		Error_Handler();
 8002d6a:	f000 fbc9 	bl	8003500 <Error_Handler>
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000400 	.word	0x20000400
 8002d78:	20000308 	.word	0x20000308

08002d7c <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002d7c:	b5b0      	push	{r4, r5, r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	461d      	mov	r5, r3
 8002d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d98:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3318      	adds	r3, #24
 8002da0:	2208      	movs	r2, #8
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f005 fb99 	bl	80084dc <memcpy>
  }
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bdb0      	pop	{r4, r5, r7, pc}

08002db4 <_Z20sendCanFrameFrontBoxv>:

HAL_StatusTypeDef sendCanFrameFrontBox()
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 8002dba:	4b48      	ldr	r3, [pc, #288]	; (8002edc <_Z20sendCanFrameFrontBoxv+0x128>)
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_FrontBox front_box
 8002dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
	{
		.fuse_0_inverter =
		{
			.ok = sf_buff[0].getChannelState(fuse_0_inverter) == ChannelState::Ok,
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff f819 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fb79 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
		}
	};
 8002de8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dec:	f362 0300 	bfi	r3, r2, #0, #1
 8002df0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[0].getChannelCurrent(fuse_0_inverter)
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff f803 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fe90 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0e:	b29a      	uxth	r2, r3
	};
 8002e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e12:	f362 130f 	bfi	r3, r2, #4, #12
 8002e16:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[0].getChannelState(fuse_0_front_box) == ChannelState::Ok,
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe fff1 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fb51 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2da      	uxtb	r2, r3
	};
 8002e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e3c:	f362 0300 	bfi	r3, r2, #0, #1
 8002e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.current = sf_buff[0].getChannelCurrent(fuse_0_front_box)
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe ffdb 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fe68 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5e:	b29a      	uxth	r2, r3
	};
 8002e60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e62:	f362 130f 	bfi	r3, r2, #4, #12
 8002e66:	84fb      	strh	r3, [r7, #38]	; 0x26
			.ok = sf_buff[0].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe ffc9 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2102      	movs	r1, #2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fb29 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2da      	uxtb	r2, r3
	};
 8002e88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002e8c:	f362 0300 	bfi	r3, r2, #0, #1
 8002e90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe ffb3 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fe40 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eae:	b29a      	uxth	r2, r3
	};
 8002eb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002eb2:	f362 130f 	bfi	r3, r2, #4, #12
 8002eb6:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_FrontBox> sender(front_box, PUTM_CAN::can_tx_header_SF_FRONTBOX);
 8002eb8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	4a08      	ldr	r2, [pc, #32]	; (8002ee0 <_Z20sendCanFrameFrontBoxv+0x12c>)
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff5b 	bl	8002d7c <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	4906      	ldr	r1, [pc, #24]	; (8002ee4 <_Z20sendCanFrameFrontBoxv+0x130>)
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fc0c 	bl	80036e8 <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3730      	adds	r7, #48	; 0x30
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000474 	.word	0x20000474
 8002ee0:	080095b0 	.word	0x080095b0
 8002ee4:	20000308 	.word	0x20000308

08002ee8 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002ee8:	b5b0      	push	{r4, r5, r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4614      	mov	r4, r2
 8002efa:	461d      	mov	r5, r3
 8002efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f04:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 fae3 	bl	80084dc <memcpy>
  }
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bdb0      	pop	{r4, r5, r7, pc}

08002f20 <_Z28sendCanFrameCoolingAndSafetyv>:

HAL_StatusTypeDef sendCanFrameCoolingAndSafety()
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <_Z28sendCanFrameCoolingAndSafetyv+0x178>)
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_CoolingAndVSafety cooling_and_safety
 8002f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
	{
		.fuse_1_fan_l =
		{
			.ok = sf_buff[1].getChannelState(fuse_1_fan_l) == ChannelState::Ok,
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe ff63 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2103      	movs	r1, #3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fac3 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[2].getChannelCurrent(fuse_0_tsal_assi)
		}
	};
 8002f54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f58:	f362 0300 	bfi	r3, r2, #0, #1
 8002f5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[1].getChannelCurrent(fuse_0_inverter)
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	2101      	movs	r1, #1
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe ff4d 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fdda 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7a:	b29a      	uxth	r2, r3
	};
 8002f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f7e:	f362 130f 	bfi	r3, r2, #4, #12
 8002f82:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[1].getChannelState(fuse_1_fan_r) == ChannelState::Ok,
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe ff3b 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2104      	movs	r1, #4
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fa9b 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf0c      	ite	eq
 8002f9e:	2301      	moveq	r3, #1
 8002fa0:	2300      	movne	r3, #0
 8002fa2:	b2da      	uxtb	r2, r3
	};
 8002fa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002fa8:	f362 0300 	bfi	r3, r2, #0, #1
 8002fac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.current = sf_buff[1].getChannelCurrent(fuse_1_fan_r)
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe ff25 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fdb2 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fca:	b29a      	uxth	r2, r3
	};
 8002fcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fce:	f362 130f 	bfi	r3, r2, #4, #12
 8002fd2:	84fb      	strh	r3, [r7, #38]	; 0x26
			.ok = sf_buff[3].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	2103      	movs	r1, #3
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe ff13 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fa73 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2da      	uxtb	r2, r3
	};
 8002ff4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ff8:	f362 0300 	bfi	r3, r2, #0, #1
 8002ffc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			.current = sf_buff[3].getChannelCurrent(fuse_0_tsal_assi)
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	2103      	movs	r1, #3
 8003004:	4618      	mov	r0, r3
 8003006:	f7fe fefd 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800300a:	4603      	mov	r3, r0
 800300c:	2102      	movs	r1, #2
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fd8a 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003014:	4603      	mov	r3, r0
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	b29a      	uxth	r2, r3
	};
 800301c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800301e:	f362 130f 	bfi	r3, r2, #4, #12
 8003022:	853b      	strh	r3, [r7, #40]	; 0x28
			.ok = sf_buff[2].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe feeb 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800302e:	4603      	mov	r3, r0
 8003030:	2102      	movs	r1, #2
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe fa4b 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2da      	uxtb	r2, r3
	};
 8003044:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003048:	f362 0300 	bfi	r3, r2, #0, #1
 800304c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[2].getChannelCurrent(fuse_0_tsal_assi)
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2102      	movs	r1, #2
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe fed5 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800305a:	4603      	mov	r3, r0
 800305c:	2102      	movs	r1, #2
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fd62 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003064:	4603      	mov	r3, r0
 8003066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306a:	b29a      	uxth	r2, r3
	};
 800306c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800306e:	f362 130f 	bfi	r3, r2, #4, #12
 8003072:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_CoolingAndVSafety> sender(cooling_and_safety, PUTM_CAN::can_tx_header_SF_FRONTBOX);
 8003074:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	4a08      	ldr	r2, [pc, #32]	; (800309c <_Z28sendCanFrameCoolingAndSafetyv+0x17c>)
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff33 	bl	8002ee8 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	4906      	ldr	r1, [pc, #24]	; (80030a0 <_Z28sendCanFrameCoolingAndSafetyv+0x180>)
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fb42 	bl	8003710 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3730      	adds	r7, #48	; 0x30
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000474 	.word	0x20000474
 800309c:	080095b0 	.word	0x080095b0
 80030a0:	20000308 	.word	0x20000308

080030a4 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80030a4:	b5b0      	push	{r4, r5, r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4614      	mov	r4, r2
 80030b6:	461d      	mov	r5, r3
 80030b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80030c0:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3318      	adds	r3, #24
 80030c8:	2208      	movs	r2, #8
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f005 fa05 	bl	80084dc <memcpy>
  }
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bdb0      	pop	{r4, r5, r7, pc}

080030dc <_Z14sendCanFrameDVv>:

HAL_StatusTypeDef sendCanFrameDV()
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08c      	sub	sp, #48	; 0x30
 80030e0:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 80030e2:	4b5c      	ldr	r3, [pc, #368]	; (8003254 <_Z14sendCanFrameDVv+0x178>)
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_DV dv
 80030e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
	{
		.fuse_0_box_dv =
		{
			.ok = sf_buff[2].getChannelState(fuse_2_box_dv) == ChannelState::Ok,
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	2102      	movs	r1, #2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe fe85 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2104      	movs	r1, #4
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe f9e5 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf0c      	ite	eq
 800310a:	2301      	moveq	r3, #1
 800310c:	2300      	movne	r3, #0
 800310e:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[1].getChannelCurrent(fuse_1_dash)
		}
	};
 8003110:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003114:	f362 0300 	bfi	r3, r2, #0, #1
 8003118:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[2].getChannelCurrent(fuse_2_box_dv)
 800311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311e:	2102      	movs	r1, #2
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe fe6f 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003126:	4603      	mov	r3, r0
 8003128:	2104      	movs	r1, #4
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fcfc 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003130:	4603      	mov	r3, r0
 8003132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003136:	b29a      	uxth	r2, r3
	};
 8003138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800313a:	f362 130f 	bfi	r3, r2, #4, #12
 800313e:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[0].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe fe5d 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800314a:	4603      	mov	r3, r0
 800314c:	2102      	movs	r1, #2
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe f9bd 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2da      	uxtb	r2, r3
	};
 8003160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003164:	f362 0300 	bfi	r3, r2, #0, #1
 8003168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe fe47 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003176:	4603      	mov	r3, r0
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fcd4 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003180:	4603      	mov	r3, r0
 8003182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003186:	b29a      	uxth	r2, r3
	};
 8003188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800318a:	f362 130f 	bfi	r3, r2, #4, #12
 800318e:	84fb      	strh	r3, [r7, #38]	; 0x26
			.ok = sf_buff[1].getChannelState(fuse_1_wheel_speed_1) == ChannelState::Ok,
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	2101      	movs	r1, #1
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe fe35 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800319a:	4603      	mov	r3, r0
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe f995 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2da      	uxtb	r2, r3
	};
 80031b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031b4:	f362 0300 	bfi	r3, r2, #0, #1
 80031b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			.current = sf_buff[1].getChannelCurrent(fuse_1_wheel_speed_1)
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	2101      	movs	r1, #1
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe fe1f 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fcac 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d6:	b29a      	uxth	r2, r3
	};
 80031d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031da:	f362 130f 	bfi	r3, r2, #4, #12
 80031de:	853b      	strh	r3, [r7, #40]	; 0x28
			.ok = sf_buff[1].getChannelState(fuse_1_dash) == ChannelState::Ok,
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe fe0d 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2101      	movs	r1, #1
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe f96d 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2da      	uxtb	r2, r3
	};
 8003200:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003204:	f362 0300 	bfi	r3, r2, #0, #1
 8003208:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[1].getChannelCurrent(fuse_1_dash)
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	2101      	movs	r1, #1
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe fdf7 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003216:	4603      	mov	r3, r0
 8003218:	2101      	movs	r1, #1
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fc84 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003220:	4603      	mov	r3, r0
 8003222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003226:	b29a      	uxth	r2, r3
	};
 8003228:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800322a:	f362 130f 	bfi	r3, r2, #4, #12
 800322e:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_DV> sender(dv, PUTM_CAN::can_tx_header_SF_DV);
 8003230:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <_Z14sendCanFrameDVv+0x17c>)
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff33 	bl	80030a4 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	4906      	ldr	r1, [pc, #24]	; (800325c <_Z14sendCanFrameDVv+0x180>)
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fa78 	bl	8003738 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef>
 8003248:	4603      	mov	r3, r0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3730      	adds	r7, #48	; 0x30
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000474 	.word	0x20000474
 8003258:	080095c8 	.word	0x080095c8
 800325c:	20000308 	.word	0x20000308

08003260 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4614      	mov	r4, r2
 8003272:	461d      	mov	r5, r3
 8003274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003278:	e895 0003 	ldmia.w	r5, {r0, r1}
 800327c:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3318      	adds	r3, #24
 8003284:	2208      	movs	r2, #8
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	4618      	mov	r0, r3
 800328a:	f005 f927 	bl	80084dc <memcpy>
  }
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bdb0      	pop	{r4, r5, r7, pc}

08003298 <_Z14sendCanFrameWSv>:

HAL_StatusTypeDef sendCanFrameWS()
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08c      	sub	sp, #48	; 0x30
 800329c:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 800329e:	4b34      	ldr	r3, [pc, #208]	; (8003370 <_Z14sendCanFrameWSv+0xd8>)
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_WS ws
 80032a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	605a      	str	r2, [r3, #4]
	{
		.fuse_1_ws_rl =
		{
			.ok = sf_buff[1].getChannelState(fuse_1_wheel_speed_1) == ChannelState::Ok,
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2101      	movs	r1, #1
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fda7 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe f907 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[2].getChannelCurrent(fuse_2_wheel_speed_2)
		}
	};
 80032cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032d0:	f362 0300 	bfi	r3, r2, #0, #1
 80032d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.current = sf_buff[1].getChannelCurrent(fuse_1_wheel_speed_1)
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	2101      	movs	r1, #1
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fd91 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fc1e 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f2:	b29a      	uxth	r2, r3
	};
 80032f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032f6:	f362 130f 	bfi	r3, r2, #4, #12
 80032fa:	84bb      	strh	r3, [r7, #36]	; 0x24
			.ok = sf_buff[2].getChannelState(fuse_2_wheel_speed_2) == ChannelState::Ok,
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	2102      	movs	r1, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe fd7f 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003306:	4603      	mov	r3, r0
 8003308:	2103      	movs	r1, #3
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe f8df 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf0c      	ite	eq
 8003316:	2301      	moveq	r3, #1
 8003318:	2300      	movne	r3, #0
 800331a:	b2da      	uxtb	r2, r3
	};
 800331c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003320:	f362 0300 	bfi	r3, r2, #0, #1
 8003324:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.current = sf_buff[2].getChannelCurrent(fuse_2_wheel_speed_2)
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	2102      	movs	r1, #2
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fd69 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003332:	4603      	mov	r3, r0
 8003334:	2103      	movs	r1, #3
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fbf6 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 800333c:	4603      	mov	r3, r0
 800333e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003342:	b29a      	uxth	r2, r3
	};
 8003344:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003346:	f362 130f 	bfi	r3, r2, #4, #12
 800334a:	857b      	strh	r3, [r7, #42]	; 0x2a

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_WS> sender(ws, PUTM_CAN::can_tx_header_SF_WS);
 800334c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <_Z14sendCanFrameWSv+0xdc>)
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff83 	bl	8003260 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	4906      	ldr	r1, [pc, #24]	; (8003378 <_Z14sendCanFrameWSv+0xe0>)
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f9fe 	bl	8003760 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef>
 8003364:	4603      	mov	r3, r0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3730      	adds	r7, #48	; 0x30
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000474 	.word	0x20000474
 8003374:	080095e0 	.word	0x080095e0
 8003378:	20000308 	.word	0x20000308

0800337c <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800337c:	b4b0      	push	{r4, r5, r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4614      	mov	r4, r2
 800338e:	461d      	mov	r5, r3
 8003390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003394:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003398:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3318      	adds	r3, #24
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	601a      	str	r2, [r3, #0]
  }
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bcb0      	pop	{r4, r5, r7}
 80033b0:	4770      	bx	lr
	...

080033b4 <_Z16sendCanFrameNucsv>:

HAL_StatusTypeDef sendCanFrameNucs()
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 80033ba:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <_Z16sendCanFrameNucsv+0x80>)
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24

	PUTM_CAN::SF_NUCS nucs
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
	{
		.fuse_2_jetson =
		{
			.ok = sf_buff[2].getChannelState(fuse_2_jetson) == ChannelState::Ok,
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe fd1c 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2105      	movs	r1, #5
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe f87c 	bl	80014ce <_ZN9SmartFuse15getChannelStateE7Channel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2da      	uxtb	r2, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = 0
		}
	};
 80033e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033e6:	f362 0300 	bfi	r3, r2, #0, #1
 80033ea:	f887 3020 	strb.w	r3, [r7, #32]
			.current = sf_buff[2].getChannelCurrent(fuse_2_jetson)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	2102      	movs	r1, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fd06 	bl	8001e04 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2105      	movs	r1, #5
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe fb93 	bl	8001b28 <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003402:	4603      	mov	r3, r0
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	b29a      	uxth	r2, r3
	};
 800340a:	8c3b      	ldrh	r3, [r7, #32]
 800340c:	f362 130f 	bfi	r3, r2, #4, #12
 8003410:	843b      	strh	r3, [r7, #32]

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_NUCS> sender(nucs, PUTM_CAN::can_tx_header_SF_NUCS);
 8003412:	f107 0120 	add.w	r1, r7, #32
 8003416:	463b      	mov	r3, r7
 8003418:	4a07      	ldr	r2, [pc, #28]	; (8003438 <_Z16sendCanFrameNucsv+0x84>)
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ffae 	bl	800337c <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 8003420:	463b      	mov	r3, r7
 8003422:	4906      	ldr	r1, [pc, #24]	; (800343c <_Z16sendCanFrameNucsv+0x88>)
 8003424:	4618      	mov	r0, r3
 8003426:	f000 f9af 	bl	8003788 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef>
 800342a:	4603      	mov	r3, r0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3728      	adds	r7, #40	; 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000474 	.word	0x20000474
 8003438:	080095f8 	.word	0x080095f8
 800343c:	20000308 	.word	0x20000308

08003440 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4614      	mov	r4, r2
 8003452:	461d      	mov	r5, r3
 8003454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003458:	e895 0003 	ldmia.w	r5, {r0, r1}
 800345c:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3318      	adds	r3, #24
 8003464:	2205      	movs	r2, #5
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	4618      	mov	r0, r3
 800346a:	f005 f837 	bl	80084dc <memcpy>
  }
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bdb0      	pop	{r4, r5, r7, pc}

08003478 <_Z18sendCanFrameSafetyv>:

HAL_StatusTypeDef sendCanFrameSafety()
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08c      	sub	sp, #48	; 0x30
 800347c:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <_Z18sendCanFrameSafetyv+0x68>)
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c

	PUTM_CAN::SF_safety safety
	{
		.firewall = safety_ams.isActive(),
 8003482:	4818      	ldr	r0, [pc, #96]	; (80034e4 <_Z18sendCanFrameSafetyv+0x6c>)
 8003484:	f7fe fe38 	bl	80020f8 <_ZN13GpioInElement8isActiveEv>
 8003488:	4603      	mov	r3, r0
		.hvd = safety_hvd.isActive(),
		.inverter = safety_spare.isActive(),
		.dv = safety_td.isActive(),
		.tsms = safety_tms.isActive()
	};
 800348a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		.hvd = safety_hvd.isActive(),
 800348e:	4816      	ldr	r0, [pc, #88]	; (80034e8 <_Z18sendCanFrameSafetyv+0x70>)
 8003490:	f7fe fe32 	bl	80020f8 <_ZN13GpioInElement8isActiveEv>
 8003494:	4603      	mov	r3, r0
	};
 8003496:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		.inverter = safety_spare.isActive(),
 800349a:	4814      	ldr	r0, [pc, #80]	; (80034ec <_Z18sendCanFrameSafetyv+0x74>)
 800349c:	f7fe fe2c 	bl	80020f8 <_ZN13GpioInElement8isActiveEv>
 80034a0:	4603      	mov	r3, r0
	};
 80034a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		.dv = safety_td.isActive(),
 80034a6:	4812      	ldr	r0, [pc, #72]	; (80034f0 <_Z18sendCanFrameSafetyv+0x78>)
 80034a8:	f7fe fe26 	bl	80020f8 <_ZN13GpioInElement8isActiveEv>
 80034ac:	4603      	mov	r3, r0
	};
 80034ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		.tsms = safety_tms.isActive()
 80034b2:	4810      	ldr	r0, [pc, #64]	; (80034f4 <_Z18sendCanFrameSafetyv+0x7c>)
 80034b4:	f7fe fe20 	bl	80020f8 <_ZN13GpioInElement8isActiveEv>
 80034b8:	4603      	mov	r3, r0
	};
 80034ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_safety> sender(safety, PUTM_CAN::can_tx_header_SF_SAFETY);
 80034be:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <_Z18sendCanFrameSafetyv+0x80>)
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ffba 	bl	8003440 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 80034cc:	1d3b      	adds	r3, r7, #4
 80034ce:	490b      	ldr	r1, [pc, #44]	; (80034fc <_Z18sendCanFrameSafetyv+0x84>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 f96d 	bl	80037b0 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>
 80034d6:	4603      	mov	r3, r0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3730      	adds	r7, #48	; 0x30
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000474 	.word	0x20000474
 80034e4:	200003b0 	.word	0x200003b0
 80034e8:	200003f0 	.word	0x200003f0
 80034ec:	200003c0 	.word	0x200003c0
 80034f0:	200003e0 	.word	0x200003e0
 80034f4:	200003d0 	.word	0x200003d0
 80034f8:	08009610 	.word	0x08009610
 80034fc:	20000308 	.word	0x20000308

08003500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	led_ok.deactivate();
 8003504:	4807      	ldr	r0, [pc, #28]	; (8003524 <Error_Handler+0x24>)
 8003506:	f7fe fdc8 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 800350a:	4807      	ldr	r0, [pc, #28]	; (8003528 <Error_Handler+0x28>)
 800350c:	f7fe fdc5 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8003510:	4806      	ldr	r0, [pc, #24]	; (800352c <Error_Handler+0x2c>)
 8003512:	f7fe fdc2 	bl	800209a <_ZN14GpioOutElement10deactivateEv>
	led_error.activate();
 8003516:	4806      	ldr	r0, [pc, #24]	; (8003530 <Error_Handler+0x30>)
 8003518:	f7fe fda8 	bl	800206c <_ZN14GpioOutElement8activateEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800351c:	b672      	cpsid	i
}
 800351e:	bf00      	nop

	__disable_irq();
	while (1) {}
 8003520:	e7fe      	b.n	8003520 <Error_Handler+0x20>
 8003522:	bf00      	nop
 8003524:	20000330 	.word	0x20000330
 8003528:	20000340 	.word	0x20000340
 800352c:	20000350 	.word	0x20000350
 8003530:	20000360 	.word	0x20000360

08003534 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>:
      begin() noexcept
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f94b 	bl	80037d8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 8003542:	4603      	mov	r3, r0
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>:
      end() noexcept
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f93f 	bl	80037d8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 800355a:	4603      	mov	r3, r0
 800355c:	3384      	adds	r3, #132	; 0x84
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_ZN3etl7ivectorI9SmartFuseED1Ev>:
  class ivector : public etl::vector_base
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe ff06 	bl	8002382 <_ZN3etl11vector_baseD1Ev>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	330c      	adds	r3, #12
 800358e:	2204      	movs	r2, #4
 8003590:	4619      	mov	r1, r3
 8003592:	f000 f92e 	bl	80037f2 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>
    {
      this->initialise();
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f940 	bl	800381e <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f947 	bl	8003846 <_ZN3etl7ivectorI9SmartFuseE5clearEv>
    }
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ffd3 	bl	8003566 <_ZN3etl7ivectorI9SmartFuseED1Ev>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_>:
    ETL_CONSTEXPR14 delegate(const TLambda& instance)
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
    {
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fe fb30 	bl	8001c3e <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>
      assign((void*)(&instance), lambda_stub<TLambda>);
 80035de:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_+0x28>)
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f93a 	bl	800385c <_ZN3etl8delegateIFvP9SmartFuseEE6assignEPvPFvS5_S2_E>
    }
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	08003881 	.word	0x08003881

080035f8 <_ZNSt5arrayI13GpioInElementLj5EE5beginEv>:
      begin() noexcept
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f952 	bl	80038aa <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>
 8003606:	4603      	mov	r3, r0
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <_ZNSt5arrayI13GpioInElementLj5EE3endEv>:
      end() noexcept
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f946 	bl	80038aa <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>
 800361e:	4603      	mov	r3, r0
 8003620:	3350      	adds	r3, #80	; 0x50
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <_ZNSt5arrayIS_ItLj6EELj4EE5beginEv>:
      begin() noexcept
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f946 	bl	80038c4 <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>
 8003638:	4603      	mov	r3, r0
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <_ZNSt5arrayIS_ItLj6EELj4EE3endEv>:
      end() noexcept
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f93a 	bl	80038c4 <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>
 8003650:	4603      	mov	r3, r0
 8003652:	3330      	adds	r3, #48	; 0x30
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <_ZNSt5arrayItLj6EE5beginEv>:
      begin() noexcept
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f93a 	bl	80038de <_ZNSt5arrayItLj6EE4dataEv>
 800366a:	4603      	mov	r3, r0
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <_ZNSt5arrayItLj6EE3endEv>:
      end() noexcept
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f92e 	bl	80038de <_ZNSt5arrayItLj6EE4dataEv>
 8003682:	4603      	mov	r3, r0
 8003684:	330c      	adds	r3, #12
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <_ZNSt5arrayI14SmartFuseStateLj4EE5beginEv>:
      begin() noexcept
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f92e 	bl	80038f8 <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>
 800369c:	4603      	mov	r3, r0
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <_ZNSt5arrayI14SmartFuseStateLj4EE3endEv>:
      end() noexcept
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f922 	bl	80038f8 <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>
 80036b4:	4603      	mov	r3, r0
 80036b6:	3304      	adds	r3, #4
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f103 0218 	add.w	r2, r3, #24
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 80036d4:	6838      	ldr	r0, [r7, #0]
 80036d6:	f002 f9c6 	bl	8005a66 <HAL_CAN_AddTxMessage>
 80036da:	4603      	mov	r3, r0
  }
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000700 	.word	0x20000700

080036e8 <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f103 0218 	add.w	r2, r3, #24
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef+0x24>)
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	f002 f9b2 	bl	8005a66 <HAL_CAN_AddTxMessage>
 8003702:	4603      	mov	r3, r0
  }
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000704 	.word	0x20000704

08003710 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f103 0218 	add.w	r2, r3, #24
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003724:	6838      	ldr	r0, [r7, #0]
 8003726:	f002 f99e 	bl	8005a66 <HAL_CAN_AddTxMessage>
 800372a:	4603      	mov	r3, r0
  }
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000708 	.word	0x20000708

08003738 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f103 0218 	add.w	r2, r3, #24
 800374a:	4b04      	ldr	r3, [pc, #16]	; (800375c <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef+0x24>)
 800374c:	6838      	ldr	r0, [r7, #0]
 800374e:	f002 f98a 	bl	8005a66 <HAL_CAN_AddTxMessage>
 8003752:	4603      	mov	r3, r0
  }
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	2000070c 	.word	0x2000070c

08003760 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f103 0218 	add.w	r2, r3, #24
 8003772:	4b04      	ldr	r3, [pc, #16]	; (8003784 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003774:	6838      	ldr	r0, [r7, #0]
 8003776:	f002 f976 	bl	8005a66 <HAL_CAN_AddTxMessage>
 800377a:	4603      	mov	r3, r0
  }
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000710 	.word	0x20000710

08003788 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f103 0218 	add.w	r2, r3, #24
 800379a:	4b04      	ldr	r3, [pc, #16]	; (80037ac <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef+0x24>)
 800379c:	6838      	ldr	r0, [r7, #0]
 800379e:	f002 f962 	bl	8005a66 <HAL_CAN_AddTxMessage>
 80037a2:	4603      	mov	r3, r0
  }
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000714 	.word	0x20000714

080037b0 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f103 0218 	add.w	r2, r3, #24
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef+0x24>)
 80037c4:	6838      	ldr	r0, [r7, #0]
 80037c6:	f002 f94e 	bl	8005a66 <HAL_CAN_AddTxMessage>
 80037ca:	4603      	mov	r3, r0
  }
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000718 	.word	0x20000718

080037d8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>:
      data() noexcept
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f895 	bl	8003912 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>
 80037e8:	4603      	mov	r3, r0
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe fdae 	bl	8002364 <_ZN3etl11vector_baseC1Ej>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
    }
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>:
    void initialise()
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f000 f879 	bl	8003928 <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>
      p_end = p_buffer;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	609a      	str	r2, [r3, #8]
    }
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_ZN3etl7ivectorI9SmartFuseE5clearEv>:
    void clear()
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
      initialise();
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ffe5 	bl	800381e <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <_ZN3etl8delegateIFvP9SmartFuseEE6assignEPvPFvS5_S2_E>:
    }

    //*************************************************************************
    /// Assign from an object and stub.
    //*************************************************************************
    ETL_CONSTEXPR14 void assign(void* object, stub_type stub)
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
    {
      invocation.object = object;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	601a      	str	r2, [r3, #0]
      invocation.stub   = stub;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	605a      	str	r2, [r3, #4]
    }
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_ZN3etl8delegateIFvP9SmartFuseEE11lambda_stubIZ4mainEUlS2_E_EEvPvS2_>:

    //*************************************************************************
    /// Stub call for a lambda or functor function.
    //*************************************************************************
    template <typename TLambda>
    static ETL_CONSTEXPR14 TReturn lambda_stub(void* object, TParams... arg)
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
    {
      TLambda* p = static_cast<TLambda*>(object);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60fb      	str	r3, [r7, #12]
      return (p->operator())(etl::forward<TParams>(arg)...);
 800388e:	463b      	mov	r3, r7
 8003890:	4618      	mov	r0, r3
 8003892:	f7fe fb23 	bl	8001edc <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>
 8003896:	4603      	mov	r3, r0
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4619      	mov	r1, r3
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7fe fe63 	bl	8002568 <_ZZ4mainENKUlP9SmartFuseE_clES0_>
 80038a2:	bf00      	nop
    }
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>:
      data() noexcept
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f842 	bl	800393e <_ZNSt14__array_traitsI13GpioInElementLj5EE6_S_ptrERA5_KS0_>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>:
      data() noexcept
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f840 	bl	8003954 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_ptrERA4_KS1_>
 80038d4:	4603      	mov	r3, r0
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <_ZNSt5arrayItLj6EE4dataEv>:
      data() noexcept
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f83e 	bl	800396a <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>:
      data() noexcept
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f83c 	bl	8003980 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_ptrERA4_KS0_>
 8003908:	4603      	mov	r3, r0
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>:
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  typename etl::enable_if<etl::is_trivially_destructible<typename etl::iterator_traits<TIterator>::value_type>::value, void>::type
    destroy(TIterator /*i_begin*/, TIterator /*i_end*/)
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  {
  }
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <_ZNSt14__array_traitsI13GpioInElementLj5EE6_S_ptrERA5_KS0_>:
      _S_ptr(const _Type& __t) noexcept
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_ptrERA4_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>:
      _S_ptr(const _Type& __t) noexcept
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_ptrERA4_KS0_>:
      _S_ptr(const _Type& __t) noexcept
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <_ZN16SmartFuseHandlerILm4EED1Ev>:
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fe01 	bl	80035a8 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_Z41__static_initialization_and_destruction_0ii>:

  /* USER CODE END Error_Handler_Debug */
}
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d157      	bne.n	8003a70 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d152      	bne.n	8003a70 <_Z41__static_initialization_and_destruction_0ii+0xc0>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 80039ca:	2301      	movs	r3, #1
 80039cc:	2201      	movs	r2, #1
 80039ce:	4943      	ldr	r1, [pc, #268]	; (8003adc <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80039d0:	4843      	ldr	r0, [pc, #268]	; (8003ae0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80039d2:	f7fe fb33 	bl	800203c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 80039d6:	2301      	movs	r3, #1
 80039d8:	2202      	movs	r2, #2
 80039da:	4940      	ldr	r1, [pc, #256]	; (8003adc <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80039dc:	4841      	ldr	r0, [pc, #260]	; (8003ae4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80039de:	f7fe fb2d 	bl	800203c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 80039e2:	2301      	movs	r3, #1
 80039e4:	2204      	movs	r2, #4
 80039e6:	493d      	ldr	r1, [pc, #244]	; (8003adc <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80039e8:	483f      	ldr	r0, [pc, #252]	; (8003ae8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80039ea:	f7fe fb27 	bl	800203c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 80039ee:	2301      	movs	r3, #1
 80039f0:	2208      	movs	r2, #8
 80039f2:	493a      	ldr	r1, [pc, #232]	; (8003adc <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80039f4:	483d      	ldr	r0, [pc, #244]	; (8003aec <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80039f6:	f7fe fb21 	bl	800203c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 80039fa:	2300      	movs	r3, #0
 80039fc:	2220      	movs	r2, #32
 80039fe:	493c      	ldr	r1, [pc, #240]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003a00:	483c      	ldr	r0, [pc, #240]	; (8003af4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003a02:	f7fe fb1b 	bl	800203c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003a06:	2300      	movs	r3, #0
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	4939      	ldr	r1, [pc, #228]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003a0c:	483a      	ldr	r0, [pc, #232]	; (8003af8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8003a0e:	f7fe fb15 	bl	800203c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003a12:	2300      	movs	r3, #0
 8003a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a18:	4935      	ldr	r1, [pc, #212]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003a1a:	4838      	ldr	r0, [pc, #224]	; (8003afc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8003a1c:	f7fe fb0e 	bl	800203c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement enable_mosfets(GPIOB, GPIO_PIN_9, false);
 8003a20:	2300      	movs	r3, #0
 8003a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a26:	4932      	ldr	r1, [pc, #200]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003a28:	4835      	ldr	r0, [pc, #212]	; (8003b00 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8003a2a:	f7fe fb07 	bl	800203c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_ams(GPIOB, GPIO_PIN_0, true);
 8003a2e:	2301      	movs	r3, #1
 8003a30:	2201      	movs	r2, #1
 8003a32:	492f      	ldr	r1, [pc, #188]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003a34:	4833      	ldr	r0, [pc, #204]	; (8003b04 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8003a36:	f7fe fb47 	bl	80020c8 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_spare(GPIOB, GPIO_PIN_1, true);
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	492c      	ldr	r1, [pc, #176]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003a40:	4831      	ldr	r0, [pc, #196]	; (8003b08 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8003a42:	f7fe fb41 	bl	80020c8 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_tms(GPIOB, GPIO_PIN_2, true);
 8003a46:	2301      	movs	r3, #1
 8003a48:	2204      	movs	r2, #4
 8003a4a:	4929      	ldr	r1, [pc, #164]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003a4c:	482f      	ldr	r0, [pc, #188]	; (8003b0c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8003a4e:	f7fe fb3b 	bl	80020c8 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_td(GPIOB, GPIO_PIN_4, true);
 8003a52:	2301      	movs	r3, #1
 8003a54:	2210      	movs	r2, #16
 8003a56:	4926      	ldr	r1, [pc, #152]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003a58:	482d      	ldr	r0, [pc, #180]	; (8003b10 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8003a5a:	f7fe fb35 	bl	80020c8 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_hvd(GPIOB, GPIO_PIN_6, true);
 8003a5e:	2301      	movs	r3, #1
 8003a60:	2240      	movs	r2, #64	; 0x40
 8003a62:	4923      	ldr	r1, [pc, #140]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003a64:	482b      	ldr	r0, [pc, #172]	; (8003b14 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8003a66:	f7fe fb2f 	bl	80020c8 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
SmartFuseHandler < number_of_fuses > sf_handler;
 8003a6a:	482b      	ldr	r0, [pc, #172]	; (8003b18 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8003a6c:	f7fe fd36 	bl	80024dc <_ZN16SmartFuseHandlerILm4EEC1Ev>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d12e      	bne.n	8003ad4 <_Z41__static_initialization_and_destruction_0ii+0x124>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d129      	bne.n	8003ad4 <_Z41__static_initialization_and_destruction_0ii+0x124>
 8003a80:	4825      	ldr	r0, [pc, #148]	; (8003b18 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8003a82:	f7ff ff88 	bl	8003996 <_ZN16SmartFuseHandlerILm4EED1Ev>
GpioInElement safety_hvd(GPIOB, GPIO_PIN_6, true);
 8003a86:	4823      	ldr	r0, [pc, #140]	; (8003b14 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8003a88:	f7fe fb56 	bl	8002138 <_ZN13GpioInElementD1Ev>
GpioInElement safety_td(GPIOB, GPIO_PIN_4, true);
 8003a8c:	4820      	ldr	r0, [pc, #128]	; (8003b10 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8003a8e:	f7fe fb53 	bl	8002138 <_ZN13GpioInElementD1Ev>
GpioInElement safety_tms(GPIOB, GPIO_PIN_2, true);
 8003a92:	481e      	ldr	r0, [pc, #120]	; (8003b0c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8003a94:	f7fe fb50 	bl	8002138 <_ZN13GpioInElementD1Ev>
GpioInElement safety_spare(GPIOB, GPIO_PIN_1, true);
 8003a98:	481b      	ldr	r0, [pc, #108]	; (8003b08 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8003a9a:	f7fe fb4d 	bl	8002138 <_ZN13GpioInElementD1Ev>
GpioInElement safety_ams(GPIOB, GPIO_PIN_0, true);
 8003a9e:	4819      	ldr	r0, [pc, #100]	; (8003b04 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8003aa0:	f7fe fb4a 	bl	8002138 <_ZN13GpioInElementD1Ev>
GpioOutElement enable_mosfets(GPIOB, GPIO_PIN_9, false);
 8003aa4:	4816      	ldr	r0, [pc, #88]	; (8003b00 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8003aa6:	f7fe fb69 	bl	800217c <_ZN14GpioOutElementD1Ev>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003aaa:	4814      	ldr	r0, [pc, #80]	; (8003afc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8003aac:	f7fe fb66 	bl	800217c <_ZN14GpioOutElementD1Ev>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003ab0:	4811      	ldr	r0, [pc, #68]	; (8003af8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8003ab2:	f7fe fb63 	bl	800217c <_ZN14GpioOutElementD1Ev>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 8003ab6:	480f      	ldr	r0, [pc, #60]	; (8003af4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003ab8:	f7fe fb60 	bl	800217c <_ZN14GpioOutElementD1Ev>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 8003abc:	480b      	ldr	r0, [pc, #44]	; (8003aec <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003abe:	f7fe fb5d 	bl	800217c <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 8003ac2:	4809      	ldr	r0, [pc, #36]	; (8003ae8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8003ac4:	f7fe fb5a 	bl	800217c <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 8003ac8:	4806      	ldr	r0, [pc, #24]	; (8003ae4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8003aca:	f7fe fb57 	bl	800217c <_ZN14GpioOutElementD1Ev>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 8003ace:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003ad0:	f7fe fb54 	bl	800217c <_ZN14GpioOutElementD1Ev>
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	48000800 	.word	0x48000800
 8003ae0:	20000330 	.word	0x20000330
 8003ae4:	20000340 	.word	0x20000340
 8003ae8:	20000350 	.word	0x20000350
 8003aec:	20000360 	.word	0x20000360
 8003af0:	48000400 	.word	0x48000400
 8003af4:	20000370 	.word	0x20000370
 8003af8:	20000380 	.word	0x20000380
 8003afc:	20000390 	.word	0x20000390
 8003b00:	200003a0 	.word	0x200003a0
 8003b04:	200003b0 	.word	0x200003b0
 8003b08:	200003c0 	.word	0x200003c0
 8003b0c:	200003d0 	.word	0x200003d0
 8003b10:	200003e0 	.word	0x200003e0
 8003b14:	200003f0 	.word	0x200003f0
 8003b18:	20000474 	.word	0x20000474

08003b1c <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	7993      	ldrb	r3, [r2, #6]
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1dd8      	adds	r0, r3, #7
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	331c      	adds	r3, #28
 8003b38:	2203      	movs	r2, #3
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f004 fcce 	bl	80084dc <memcpy>
  }
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	7993      	ldrb	r3, [r2, #6]
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3307      	adds	r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	321c      	adds	r2, #28
 8003b64:	8812      	ldrh	r2, [r2, #0]
 8003b66:	b292      	uxth	r2, r2
 8003b68:	801a      	strh	r2, [r3, #0]
  }
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	7993      	ldrb	r3, [r2, #6]
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3307      	adds	r3, #7
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	321c      	adds	r2, #28
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	601a      	str	r2, [r3, #0]
  }
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	7993      	ldrb	r3, [r2, #6]
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	1dd8      	adds	r0, r3, #7
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	331c      	adds	r3, #28
 8003bbe:	2206      	movs	r2, #6
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f004 fc8b 	bl	80084dc <memcpy>
  }
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	7993      	ldrb	r3, [r2, #6]
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	1dd8      	adds	r0, r3, #7
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	331c      	adds	r3, #28
 8003bea:	2206      	movs	r2, #6
 8003bec:	4619      	mov	r1, r3
 8003bee:	f004 fc75 	bl	80084dc <memcpy>
  }
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	7993      	ldrb	r3, [r2, #6]
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	1dd8      	adds	r0, r3, #7
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	331c      	adds	r3, #28
 8003c16:	2206      	movs	r2, #6
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f004 fc5f 	bl	80084dc <memcpy>
  }
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	7993      	ldrb	r3, [r2, #6]
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	1dd8      	adds	r0, r3, #7
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	331c      	adds	r3, #28
 8003c42:	2208      	movs	r2, #8
 8003c44:	4619      	mov	r1, r3
 8003c46:	f004 fc49 	bl	80084dc <memcpy>
  }
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	7993      	ldrb	r3, [r2, #6]
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3307      	adds	r3, #7
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	321c      	adds	r2, #28
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	601a      	str	r2, [r3, #0]
  }
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	7993      	ldrb	r3, [r2, #6]
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1dd8      	adds	r0, r3, #7
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	331c      	adds	r3, #28
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f004 fc1d 	bl	80084dc <memcpy>
  }
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	7993      	ldrb	r3, [r2, #6]
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1dd8      	adds	r0, r3, #7
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	331c      	adds	r3, #28
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f004 fc07 	bl	80084dc <memcpy>
  }
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	7993      	ldrb	r3, [r2, #6]
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	1dd8      	adds	r0, r3, #7
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	331c      	adds	r3, #28
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f004 fbf1 	bl	80084dc <memcpy>
  }
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZN8PUTM_CAN6DeviceINS_7SF_NUCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	7993      	ldrb	r3, [r2, #6]
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3307      	adds	r3, #7
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	321c      	adds	r2, #28
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	601a      	str	r2, [r3, #0]
  }
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <_ZN8PUTM_CAN6DeviceINS_5SF_WSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	7993      	ldrb	r3, [r2, #6]
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	1dd8      	adds	r0, r3, #7
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	331c      	adds	r3, #28
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f004 fbc5 	bl	80084dc <memcpy>
  }
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <_ZN8PUTM_CAN6DeviceINS_5SF_DVEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	7993      	ldrb	r3, [r2, #6]
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	1dd8      	adds	r0, r3, #7
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	331c      	adds	r3, #28
 8003d76:	2208      	movs	r2, #8
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f004 fbaf 	bl	80084dc <memcpy>
  }
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <_ZN8PUTM_CAN6DeviceINS_20SF_CoolingAndVSafetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	7993      	ldrb	r3, [r2, #6]
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	1dd8      	adds	r0, r3, #7
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	331c      	adds	r3, #28
 8003da2:	2208      	movs	r2, #8
 8003da4:	4619      	mov	r1, r3
 8003da6:	f004 fb99 	bl	80084dc <memcpy>
  }
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_ZN8PUTM_CAN6DeviceINS_11SF_FrontBoxEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	7993      	ldrb	r3, [r2, #6]
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	1dd8      	adds	r0, r3, #7
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	331c      	adds	r3, #28
 8003dce:	2208      	movs	r2, #8
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f004 fb83 	bl	80084dc <memcpy>
  }
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	7993      	ldrb	r3, [r2, #6]
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	1dd8      	adds	r0, r3, #7
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	331c      	adds	r3, #28
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f004 fb6d 	bl	80084dc <memcpy>
  }
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	7993      	ldrb	r3, [r2, #6]
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	1dd8      	adds	r0, r3, #7
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	331c      	adds	r3, #28
 8003e26:	2205      	movs	r2, #5
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f004 fb57 	bl	80084dc <memcpy>
  }
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	7993      	ldrb	r3, [r2, #6]
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3307      	adds	r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	321c      	adds	r2, #28
 8003e52:	8812      	ldrh	r2, [r2, #0]
 8003e54:	b292      	uxth	r2, r2
 8003e56:	801a      	strh	r2, [r3, #0]
  }
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	7993      	ldrb	r3, [r2, #6]
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3307      	adds	r3, #7
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	321c      	adds	r2, #28
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	701a      	strb	r2, [r3, #0]
  }
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	7993      	ldrb	r3, [r2, #6]
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3307      	adds	r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	321c      	adds	r2, #28
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	601a      	str	r2, [r3, #0]
  }
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	7993      	ldrb	r3, [r2, #6]
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3307      	adds	r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	321c      	adds	r2, #28
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	701a      	strb	r2, [r3, #0]
  }
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	7993      	ldrb	r3, [r2, #6]
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3307      	adds	r3, #7
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	321c      	adds	r2, #28
 8003f04:	8812      	ldrh	r2, [r2, #0]
 8003f06:	b292      	uxth	r2, r2
 8003f08:	801a      	strh	r2, [r3, #0]
  }
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	7993      	ldrb	r3, [r2, #6]
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	1dd8      	adds	r0, r3, #7
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	331c      	adds	r3, #28
 8003f32:	2208      	movs	r2, #8
 8003f34:	4619      	mov	r1, r3
 8003f36:	f004 fad1 	bl	80084dc <memcpy>
  }
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	7993      	ldrb	r3, [r2, #6]
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3307      	adds	r3, #7
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	321c      	adds	r2, #28
 8003f5e:	7812      	ldrb	r2, [r2, #0]
 8003f60:	701a      	strb	r2, [r3, #0]
  }
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	7993      	ldrb	r3, [r2, #6]
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	1dd8      	adds	r0, r3, #7
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	331c      	adds	r3, #28
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f004 faa5 	bl	80084dc <memcpy>
  }
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	7993      	ldrb	r3, [r2, #6]
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	1dd8      	adds	r0, r3, #7
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	331c      	adds	r3, #28
 8003fb6:	2206      	movs	r2, #6
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f004 fa8f 	bl	80084dc <memcpy>
  }
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	7993      	ldrb	r3, [r2, #6]
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	1dd8      	adds	r0, r3, #7
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	331c      	adds	r3, #28
 8003fe2:	2208      	movs	r2, #8
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f004 fa79 	bl	80084dc <memcpy>
  }
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	7993      	ldrb	r3, [r2, #6]
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3307      	adds	r3, #7
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	321c      	adds	r2, #28
 800400e:	7812      	ldrb	r2, [r2, #0]
 8004010:	701a      	strb	r2, [r3, #0]
  }
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	7993      	ldrb	r3, [r2, #6]
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	1dd8      	adds	r0, r3, #7
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	331c      	adds	r3, #28
 800403a:	2206      	movs	r2, #6
 800403c:	4619      	mov	r1, r3
 800403e:	f004 fa4d 	bl	80084dc <memcpy>
  }
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	7993      	ldrb	r3, [r2, #6]
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	1dd8      	adds	r0, r3, #7
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	331c      	adds	r3, #28
 8004066:	2206      	movs	r2, #6
 8004068:	4619      	mov	r1, r3
 800406a:	f004 fa37 	bl	80084dc <memcpy>
  }
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	7993      	ldrb	r3, [r2, #6]
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	1dd8      	adds	r0, r3, #7
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	331c      	adds	r3, #28
 8004092:	2208      	movs	r2, #8
 8004094:	4619      	mov	r1, r3
 8004096:	f004 fa21 	bl	80084dc <memcpy>
  }
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
    new_data = true;
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	7993      	ldrb	r3, [r2, #6]
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	1dd8      	adds	r0, r3, #7
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	331c      	adds	r3, #28
 80040be:	2205      	movs	r2, #5
 80040c0:	4619      	mov	r1, r3
 80040c2:	f004 fa0b 	bl	80084dc <memcpy>
  }
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 80040ce:	b580      	push	{r7, lr}
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040d6:	2001      	movs	r0, #1
 80040d8:	f7ff fc6a 	bl	80039b0 <_Z41__static_initialization_and_destruction_0ii>
 80040dc:	bd80      	pop	{r7, pc}

080040de <_GLOBAL__sub_D__ZN8PUTM_CAN3canE>:
 80040de:	b580      	push	{r7, lr}
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040e6:	2000      	movs	r0, #0
 80040e8:	f7ff fc62 	bl	80039b0 <_Z41__static_initialization_and_destruction_0ii>
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80040f4:	4b26      	ldr	r3, [pc, #152]	; (8004190 <MX_SPI1_Init+0xa0>)
 80040f6:	4a27      	ldr	r2, [pc, #156]	; (8004194 <MX_SPI1_Init+0xa4>)
 80040f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80040fa:	4b25      	ldr	r3, [pc, #148]	; (8004190 <MX_SPI1_Init+0xa0>)
 80040fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004100:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004102:	4b23      	ldr	r3, [pc, #140]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004108:	4b21      	ldr	r3, [pc, #132]	; (8004190 <MX_SPI1_Init+0xa0>)
 800410a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800410e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004110:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004112:	2200      	movs	r2, #0
 8004114:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004116:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004118:	2200      	movs	r2, #0
 800411a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800411c:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <MX_SPI1_Init+0xa0>)
 800411e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004122:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004126:	2218      	movs	r2, #24
 8004128:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <MX_SPI1_Init+0xa0>)
 800412c:	2200      	movs	r2, #0
 800412e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004130:	4b17      	ldr	r3, [pc, #92]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004132:	2200      	movs	r2, #0
 8004134:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004136:	4b16      	ldr	r3, [pc, #88]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004138:	2200      	movs	r2, #0
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800413c:	4b14      	ldr	r3, [pc, #80]	; (8004190 <MX_SPI1_Init+0xa0>)
 800413e:	2207      	movs	r2, #7
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <MX_SPI1_Init+0xa0>)
 800414a:	2200      	movs	r2, #0
 800414c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800414e:	4810      	ldr	r0, [pc, #64]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004150:	f004 f8ba 	bl	80082c8 <HAL_SPI_Init>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800415a:	f7ff f9d1 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800416c:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d007      	beq.n	800418c <MX_SPI1_Init+0x9c>
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <MX_SPI1_Init+0xa0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b03      	ldr	r3, [pc, #12]	; (8004190 <MX_SPI1_Init+0xa0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800418a:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 800418c:	bf00      	nop
 800418e:	bd80      	pop	{r7, pc}
 8004190:	2000071c 	.word	0x2000071c
 8004194:	40013000 	.word	0x40013000

08004198 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a17      	ldr	r2, [pc, #92]	; (8004214 <HAL_SPI_MspInit+0x7c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d128      	bne.n	800420c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <HAL_SPI_MspInit+0x80>)
 80041bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041be:	4a16      	ldr	r2, [pc, #88]	; (8004218 <HAL_SPI_MspInit+0x80>)
 80041c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041c4:	6613      	str	r3, [r2, #96]	; 0x60
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <HAL_SPI_MspInit+0x80>)
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <HAL_SPI_MspInit+0x80>)
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	4a10      	ldr	r2, [pc, #64]	; (8004218 <HAL_SPI_MspInit+0x80>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <HAL_SPI_MspInit+0x80>)
 80041e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80041ea:	23e0      	movs	r3, #224	; 0xe0
 80041ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ee:	2302      	movs	r3, #2
 80041f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041f2:	2302      	movs	r3, #2
 80041f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f6:	2303      	movs	r3, #3
 80041f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80041fa:	2305      	movs	r3, #5
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fe:	f107 0314 	add.w	r3, r7, #20
 8004202:	4619      	mov	r1, r3
 8004204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004208:	f002 f982 	bl	8006510 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800420c:	bf00      	nop
 800420e:	3728      	adds	r7, #40	; 0x28
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40013000 	.word	0x40013000
 8004218:	40021000 	.word	0x40021000

0800421c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <HAL_MspInit+0x44>)
 8004224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004226:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <HAL_MspInit+0x44>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	6613      	str	r3, [r2, #96]	; 0x60
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <HAL_MspInit+0x44>)
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	4b09      	ldr	r3, [pc, #36]	; (8004260 <HAL_MspInit+0x44>)
 800423c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423e:	4a08      	ldr	r2, [pc, #32]	; (8004260 <HAL_MspInit+0x44>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	6593      	str	r3, [r2, #88]	; 0x58
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_MspInit+0x44>)
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000

08004264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004268:	e7fe      	b.n	8004268 <NMI_Handler+0x4>

0800426a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800426e:	e7fe      	b.n	800426e <HardFault_Handler+0x4>

08004270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004274:	e7fe      	b.n	8004274 <MemManage_Handler+0x4>

08004276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800427a:	e7fe      	b.n	800427a <BusFault_Handler+0x4>

0800427c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004280:	e7fe      	b.n	8004280 <UsageFault_Handler+0x4>

08004282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b0:	f000 f9d4 	bl	800465c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80042bc:	4802      	ldr	r0, [pc, #8]	; (80042c8 <CAN1_RX0_IRQHandler+0x10>)
 80042be:	f001 fde5 	bl	8005e8c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000308 	.word	0x20000308

080042cc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80042d0:	4802      	ldr	r0, [pc, #8]	; (80042dc <CAN1_RX1_IRQHandler+0x10>)
 80042d2:	f001 fddb 	bl	8005e8c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80042d6:	bf00      	nop
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000308 	.word	0x20000308

080042e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
	return 1;
 80042e4:	2301      	movs	r3, #1
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <_kill>:

int _kill(int pid, int sig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042fa:	f004 f8ab 	bl	8008454 <__errno>
 80042fe:	4603      	mov	r3, r0
 8004300:	2216      	movs	r2, #22
 8004302:	601a      	str	r2, [r3, #0]
	return -1;
 8004304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <_exit>:

void _exit (int status)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004318:	f04f 31ff 	mov.w	r1, #4294967295
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff ffe7 	bl	80042f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004322:	e7fe      	b.n	8004322 <_exit+0x12>

08004324 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	e00a      	b.n	800434c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004336:	f3af 8000 	nop.w
 800433a:	4601      	mov	r1, r0
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	60ba      	str	r2, [r7, #8]
 8004342:	b2ca      	uxtb	r2, r1
 8004344:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	3301      	adds	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	dbf0      	blt.n	8004336 <_read+0x12>
	}

return len;
 8004354:	687b      	ldr	r3, [r7, #4]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b086      	sub	sp, #24
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e009      	b.n	8004384 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	60ba      	str	r2, [r7, #8]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3301      	adds	r3, #1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	dbf1      	blt.n	8004370 <_write+0x12>
	}
	return len;
 800438c:	687b      	ldr	r3, [r7, #4]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <_close>:

int _close(int file)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
	return -1;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043be:	605a      	str	r2, [r3, #4]
	return 0;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <_isatty>:

int _isatty(int file)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
	return 1;
 80043d6:	2301      	movs	r3, #1
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
	return 0;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004408:	4a14      	ldr	r2, [pc, #80]	; (800445c <_sbrk+0x5c>)
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <_sbrk+0x60>)
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004414:	4b13      	ldr	r3, [pc, #76]	; (8004464 <_sbrk+0x64>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800441c:	4b11      	ldr	r3, [pc, #68]	; (8004464 <_sbrk+0x64>)
 800441e:	4a12      	ldr	r2, [pc, #72]	; (8004468 <_sbrk+0x68>)
 8004420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <_sbrk+0x64>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	429a      	cmp	r2, r3
 800442e:	d207      	bcs.n	8004440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004430:	f004 f810 	bl	8008454 <__errno>
 8004434:	4603      	mov	r3, r0
 8004436:	220c      	movs	r2, #12
 8004438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800443a:	f04f 33ff 	mov.w	r3, #4294967295
 800443e:	e009      	b.n	8004454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <_sbrk+0x64>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <_sbrk+0x64>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	4a05      	ldr	r2, [pc, #20]	; (8004464 <_sbrk+0x64>)
 8004450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20050000 	.word	0x20050000
 8004460:	00000400 	.word	0x00000400
 8004464:	20000780 	.word	0x20000780
 8004468:	20000798 	.word	0x20000798

0800446c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <SystemInit+0x20>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	4a05      	ldr	r2, [pc, #20]	; (800448c <SystemInit+0x20>)
 8004478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800447c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 800449e:	f000 f8f1 	bl	8004684 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	601a      	str	r2, [r3, #0]
}
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <_ZN5TimerC1Em>:

Timer::Timer(uint32_t timeout) : timeout(timeout)
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6039      	str	r1, [r7, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 80044c2:	f000 f8df 	bl	8004684 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]
}
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <_ZN5Timer10setTimeOutEm>:

void Timer::setTimeOut(uint32_t timeout)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
	this->timeout = timeout;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	605a      	str	r2, [r3, #4]
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <_ZN5Timer7restartEv>:

void Timer::restart()
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
	this->start_time = HAL_GetTick();
 80044fa:	f000 f8c3 	bl	8004684 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	601a      	str	r2, [r3, #0]
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <_ZN5Timer23checkIfTimedOutAndResetEv>:

bool Timer::checkIfTimedOutAndReset()
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	if(this->getPassedTime() >= this->timeout)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f814 	bl	8004542 <_ZN5Timer13getPassedTimeEv>
 800451a:	4602      	mov	r2, r0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	bf2c      	ite	cs
 8004524:	2301      	movcs	r3, #1
 8004526:	2300      	movcc	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d004      	beq.n	8004538 <_ZN5Timer23checkIfTimedOutAndResetEv+0x2c>
	{
		this->restart();
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ffdf 	bl	80044f2 <_ZN5Timer7restartEv>
		return true;
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <_ZN5Timer23checkIfTimedOutAndResetEv+0x2e>
	}

	return false;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - this->start_time;
 800454a:	f000 f89b 	bl	8004684 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	1ad3      	subs	r3, r2, r3
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004598 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004564:	f7ff ff82 	bl	800446c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004568:	480c      	ldr	r0, [pc, #48]	; (800459c <LoopForever+0x6>)
  ldr r1, =_edata
 800456a:	490d      	ldr	r1, [pc, #52]	; (80045a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800456c:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <LoopForever+0xe>)
  movs r3, #0
 800456e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004570:	e002      	b.n	8004578 <LoopCopyDataInit>

08004572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004576:	3304      	adds	r3, #4

08004578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800457a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800457c:	d3f9      	bcc.n	8004572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004580:	4c0a      	ldr	r4, [pc, #40]	; (80045ac <LoopForever+0x16>)
  movs r3, #0
 8004582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004584:	e001      	b.n	800458a <LoopFillZerobss>

08004586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004588:	3204      	adds	r2, #4

0800458a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800458a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800458c:	d3fb      	bcc.n	8004586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800458e:	f003 ff79 	bl	8008484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004592:	f7fe f845 	bl	8002620 <main>

08004596 <LoopForever>:

LoopForever:
    b LoopForever
 8004596:	e7fe      	b.n	8004596 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004598:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800459c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045a0:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 80045a4:	080098d8 	.word	0x080098d8
  ldr r2, =_sbss
 80045a8:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 80045ac:	20000798 	.word	0x20000798

080045b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045b0:	e7fe      	b.n	80045b0 <ADC1_2_IRQHandler>

080045b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045bc:	2003      	movs	r0, #3
 80045be:	f001 ff65 	bl	800648c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045c2:	200f      	movs	r0, #15
 80045c4:	f000 f80e 	bl	80045e4 <HAL_InitTick>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	71fb      	strb	r3, [r7, #7]
 80045d2:	e001      	b.n	80045d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80045d4:	f7ff fe22 	bl	800421c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80045d8:	79fb      	ldrb	r3, [r7, #7]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80045f0:	4b17      	ldr	r3, [pc, #92]	; (8004650 <HAL_InitTick+0x6c>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d023      	beq.n	8004640 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80045f8:	4b16      	ldr	r3, [pc, #88]	; (8004654 <HAL_InitTick+0x70>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <HAL_InitTick+0x6c>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	4619      	mov	r1, r3
 8004602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004606:	fbb3 f3f1 	udiv	r3, r3, r1
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	4618      	mov	r0, r3
 8004610:	f001 ff71 	bl	80064f6 <HAL_SYSTICK_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10f      	bne.n	800463a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b0f      	cmp	r3, #15
 800461e:	d809      	bhi.n	8004634 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004620:	2200      	movs	r2, #0
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	f001 ff3b 	bl	80064a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <HAL_InitTick+0x74>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e007      	b.n	8004644 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	e004      	b.n	8004644 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e001      	b.n	8004644 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000021c 	.word	0x2000021c
 8004654:	20000214 	.word	0x20000214
 8004658:	20000218 	.word	0x20000218

0800465c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_IncTick+0x20>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_IncTick+0x24>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4413      	add	r3, r2
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <HAL_IncTick+0x24>)
 800466e:	6013      	str	r3, [r2, #0]
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	2000021c 	.word	0x2000021c
 8004680:	20000784 	.word	0x20000784

08004684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return uwTick;
 8004688:	4b03      	ldr	r3, [pc, #12]	; (8004698 <HAL_GetTick+0x14>)
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000784 	.word	0x20000784

0800469c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046a4:	f7ff ffee 	bl	8004684 <HAL_GetTick>
 80046a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d005      	beq.n	80046c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_Delay+0x44>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046c2:	bf00      	nop
 80046c4:	f7ff ffde 	bl	8004684 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d8f7      	bhi.n	80046c4 <HAL_Delay+0x28>
  {
  }
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2000021c 	.word	0x2000021c

080046e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	609a      	str	r2, [r3, #8]
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	609a      	str	r2, [r3, #8]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3360      	adds	r3, #96	; 0x60
 800475e:	461a      	mov	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b08      	ldr	r3, [pc, #32]	; (8004790 <LL_ADC_SetOffset+0x44>)
 800476e:	4013      	ands	r3, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	4313      	orrs	r3, r2
 800477c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	03fff000 	.word	0x03fff000

08004794 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3360      	adds	r3, #96	; 0x60
 80047a2:	461a      	mov	r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3360      	adds	r3, #96	; 0x60
 80047d0:	461a      	mov	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	615a      	str	r2, [r3, #20]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3330      	adds	r3, #48	; 0x30
 800482c:	461a      	mov	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	0a1b      	lsrs	r3, r3, #8
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	4413      	add	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	211f      	movs	r1, #31
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	401a      	ands	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	0e9b      	lsrs	r3, r3, #26
 8004854:	f003 011f 	and.w	r1, r3, #31
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	431a      	orrs	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3314      	adds	r3, #20
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	0e5b      	lsrs	r3, r3, #25
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	4413      	add	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	0d1b      	lsrs	r3, r3, #20
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2107      	movs	r1, #7
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	401a      	ands	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	0d1b      	lsrs	r3, r3, #20
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	fa01 f303 	lsl.w	r3, r1, r3
 80048b8:	431a      	orrs	r2, r3
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
	...

080048cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e4:	43db      	mvns	r3, r3
 80048e6:	401a      	ands	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f003 0318 	and.w	r3, r3, #24
 80048ee:	4908      	ldr	r1, [pc, #32]	; (8004910 <LL_ADC_SetChannelSingleDiff+0x44>)
 80048f0:	40d9      	lsrs	r1, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	400b      	ands	r3, r1
 80048f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fa:	431a      	orrs	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	0007ffff 	.word	0x0007ffff

08004914 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004924:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6093      	str	r3, [r2, #8]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800494c:	d101      	bne.n	8004952 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004974:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004998:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800499c:	d101      	bne.n	80049a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <LL_ADC_IsEnabled+0x18>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <LL_ADC_IsEnabled+0x1a>
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d101      	bne.n	80049ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d101      	bne.n	8004a14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a24:	b590      	push	{r4, r7, lr}
 8004a26:	b089      	sub	sp, #36	; 0x24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e134      	b.n	8004ca8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7fb fc9d 	bl	800038c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff ff67 	bl	8004938 <LL_ADC_IsDeepPowerDownEnabled>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff ff4d 	bl	8004914 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff ff82 	bl	8004988 <LL_ADC_IsInternalRegulatorEnabled>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d115      	bne.n	8004ab6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff ff66 	bl	8004960 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a94:	4b86      	ldr	r3, [pc, #536]	; (8004cb0 <HAL_ADC_Init+0x28c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	099b      	lsrs	r3, r3, #6
 8004a9a:	4a86      	ldr	r2, [pc, #536]	; (8004cb4 <HAL_ADC_Init+0x290>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	099b      	lsrs	r3, r3, #6
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004aa8:	e002      	b.n	8004ab0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f9      	bne.n	8004aaa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ff64 	bl	8004988 <LL_ADC_IsInternalRegulatorEnabled>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10d      	bne.n	8004ae2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	f043 0210 	orr.w	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff ff75 	bl	80049d6 <LL_ADC_REG_IsConversionOngoing>
 8004aec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f040 80cd 	bne.w	8004c96 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 80c9 	bne.w	8004c96 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004b0c:	f043 0202 	orr.w	r2, r3, #2
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ff49 	bl	80049b0 <LL_ADC_IsEnabled>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d110      	bne.n	8004b46 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b24:	4864      	ldr	r0, [pc, #400]	; (8004cb8 <HAL_ADC_Init+0x294>)
 8004b26:	f7ff ff43 	bl	80049b0 <LL_ADC_IsEnabled>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4863      	ldr	r0, [pc, #396]	; (8004cbc <HAL_ADC_Init+0x298>)
 8004b2e:	f7ff ff3f 	bl	80049b0 <LL_ADC_IsEnabled>
 8004b32:	4603      	mov	r3, r0
 8004b34:	4323      	orrs	r3, r4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	485f      	ldr	r0, [pc, #380]	; (8004cc0 <HAL_ADC_Init+0x29c>)
 8004b42:	f7ff fdcf 	bl	80046e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	7e5b      	ldrb	r3, [r3, #25]
 8004b4a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b50:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004b56:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004b5c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b64:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d106      	bne.n	8004b82 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	045b      	lsls	r3, r3, #17
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	4b47      	ldr	r3, [pc, #284]	; (8004cc4 <HAL_ADC_Init+0x2a0>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	69b9      	ldr	r1, [r7, #24]
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ff0d 	bl	80049d6 <LL_ADC_REG_IsConversionOngoing>
 8004bbc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff ff1a 	bl	80049fc <LL_ADC_INJ_IsConversionOngoing>
 8004bc8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d140      	bne.n	8004c52 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d13d      	bne.n	8004c52 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7e1b      	ldrb	r3, [r3, #24]
 8004bde:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004be0:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004be8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bf8:	f023 0306 	bic.w	r3, r3, #6
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	69b9      	ldr	r1, [r7, #24]
 8004c02:	430b      	orrs	r3, r1
 8004c04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d118      	bne.n	8004c42 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c1a:	f023 0304 	bic.w	r3, r3, #4
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c26:	4311      	orrs	r1, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c2c:	4311      	orrs	r1, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c32:	430a      	orrs	r2, r1
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	611a      	str	r2, [r3, #16]
 8004c40:	e007      	b.n	8004c52 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0201 	bic.w	r2, r2, #1
 8004c50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10c      	bne.n	8004c74 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	f023 010f 	bic.w	r1, r3, #15
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	1e5a      	subs	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
 8004c72:	e007      	b.n	8004c84 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 020f 	bic.w	r2, r2, #15
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	f023 0303 	bic.w	r3, r3, #3
 8004c8c:	f043 0201 	orr.w	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	659a      	str	r2, [r3, #88]	; 0x58
 8004c94:	e007      	b.n	8004ca6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9a:	f043 0210 	orr.w	r2, r3, #16
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ca6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3724      	adds	r7, #36	; 0x24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd90      	pop	{r4, r7, pc}
 8004cb0:	20000214 	.word	0x20000214
 8004cb4:	053e2d63 	.word	0x053e2d63
 8004cb8:	50040000 	.word	0x50040000
 8004cbc:	50040100 	.word	0x50040100
 8004cc0:	50040300 	.word	0x50040300
 8004cc4:	fff0c007 	.word	0xfff0c007

08004cc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b0b6      	sub	sp, #216	; 0xd8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x22>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e3d5      	b.n	8005496 <HAL_ADC_ConfigChannel+0x7ce>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fe6d 	bl	80049d6 <LL_ADC_REG_IsConversionOngoing>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f040 83ba 	bne.w	8005478 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	d824      	bhi.n	8004d56 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	3b02      	subs	r3, #2
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d81b      	bhi.n	8004d4e <HAL_ADC_ConfigChannel+0x86>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <HAL_ADC_ConfigChannel+0x54>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d35 	.word	0x08004d35
 8004d24:	08004d3d 	.word	0x08004d3d
 8004d28:	08004d45 	.word	0x08004d45
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	220c      	movs	r2, #12
 8004d30:	605a      	str	r2, [r3, #4]
          break;
 8004d32:	e011      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2212      	movs	r2, #18
 8004d38:	605a      	str	r2, [r3, #4]
          break;
 8004d3a:	e00d      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2218      	movs	r2, #24
 8004d40:	605a      	str	r2, [r3, #4]
          break;
 8004d42:	e009      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d4a:	605a      	str	r2, [r3, #4]
          break;
 8004d4c:	e004      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2206      	movs	r2, #6
 8004d52:	605a      	str	r2, [r3, #4]
          break;
 8004d54:	e000      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004d56:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	f7ff fd59 	bl	800481c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff fe31 	bl	80049d6 <LL_ADC_REG_IsConversionOngoing>
 8004d74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fe3d 	bl	80049fc <LL_ADC_INJ_IsConversionOngoing>
 8004d82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f040 81c1 	bne.w	8005112 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 81bc 	bne.w	8005112 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004da2:	d10f      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2200      	movs	r2, #0
 8004dae:	4619      	mov	r1, r3
 8004db0:	f7ff fd60 	bl	8004874 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fd1a 	bl	80047f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004dc2:	e00e      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6819      	ldr	r1, [r3, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f7ff fd4f 	bl	8004874 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fd0a 	bl	80047f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d00a      	beq.n	8004e1a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	6919      	ldr	r1, [r3, #16]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e14:	f7ff fc9a 	bl	800474c <LL_ADC_SetOffset>
 8004e18:	e17b      	b.n	8005112 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fcb7 	bl	8004794 <LL_ADC_GetOffsetChannel>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x17e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fcac 	bl	8004794 <LL_ADC_GetOffsetChannel>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	0e9b      	lsrs	r3, r3, #26
 8004e40:	f003 021f 	and.w	r2, r3, #31
 8004e44:	e01e      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x1bc>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fca1 	bl	8004794 <LL_ADC_GetOffsetChannel>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004e74:	2320      	movs	r3, #32
 8004e76:	e004      	b.n	8004e82 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004e78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e7c:	fab3 f383 	clz	r3, r3
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d105      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x1d4>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	0e9b      	lsrs	r3, r3, #26
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	e018      	b.n	8004ece <HAL_ADC_ConfigChannel+0x206>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ea8:	fa93 f3a3 	rbit	r3, r3
 8004eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004eb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004ec0:	2320      	movs	r3, #32
 8004ec2:	e004      	b.n	8004ece <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004ec4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ec8:	fab3 f383 	clz	r3, r3
 8004ecc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d106      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fc70 	bl	80047c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fc54 	bl	8004794 <LL_ADC_GetOffsetChannel>
 8004eec:	4603      	mov	r3, r0
 8004eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x244>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2101      	movs	r1, #1
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fc49 	bl	8004794 <LL_ADC_GetOffsetChannel>
 8004f02:	4603      	mov	r3, r0
 8004f04:	0e9b      	lsrs	r3, r3, #26
 8004f06:	f003 021f 	and.w	r2, r3, #31
 8004f0a:	e01e      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x282>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2101      	movs	r1, #1
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fc3e 	bl	8004794 <LL_ADC_GetOffsetChannel>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f22:	fa93 f3a3 	rbit	r3, r3
 8004f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004f32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8004f3a:	2320      	movs	r3, #32
 8004f3c:	e004      	b.n	8004f48 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8004f3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f42:	fab3 f383 	clz	r3, r3
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d105      	bne.n	8004f62 <HAL_ADC_ConfigChannel+0x29a>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	0e9b      	lsrs	r3, r3, #26
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	e018      	b.n	8004f94 <HAL_ADC_ConfigChannel+0x2cc>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f6e:	fa93 f3a3 	rbit	r3, r3
 8004f72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004f76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004f7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8004f86:	2320      	movs	r3, #32
 8004f88:	e004      	b.n	8004f94 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8004f8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d106      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fc0d 	bl	80047c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2102      	movs	r1, #2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fbf1 	bl	8004794 <LL_ADC_GetOffsetChannel>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <HAL_ADC_ConfigChannel+0x30a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fbe6 	bl	8004794 <LL_ADC_GetOffsetChannel>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	0e9b      	lsrs	r3, r3, #26
 8004fcc:	f003 021f 	and.w	r2, r3, #31
 8004fd0:	e01e      	b.n	8005010 <HAL_ADC_ConfigChannel+0x348>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fbdb 	bl	8004794 <LL_ADC_GetOffsetChannel>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fe8:	fa93 f3a3 	rbit	r3, r3
 8004fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ff4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004ff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8005000:	2320      	movs	r3, #32
 8005002:	e004      	b.n	800500e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8005004:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005008:	fab3 f383 	clz	r3, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005018:	2b00      	cmp	r3, #0
 800501a:	d105      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x360>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	0e9b      	lsrs	r3, r3, #26
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	e016      	b.n	8005056 <HAL_ADC_ConfigChannel+0x38e>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005034:	fa93 f3a3 	rbit	r3, r3
 8005038:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800503a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800503c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8005048:	2320      	movs	r3, #32
 800504a:	e004      	b.n	8005056 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800504c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005050:	fab3 f383 	clz	r3, r3
 8005054:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005056:	429a      	cmp	r2, r3
 8005058:	d106      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	2102      	movs	r1, #2
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fbac 	bl	80047c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2103      	movs	r1, #3
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fb90 	bl	8004794 <LL_ADC_GetOffsetChannel>
 8005074:	4603      	mov	r3, r0
 8005076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x3cc>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2103      	movs	r1, #3
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fb85 	bl	8004794 <LL_ADC_GetOffsetChannel>
 800508a:	4603      	mov	r3, r0
 800508c:	0e9b      	lsrs	r3, r3, #26
 800508e:	f003 021f 	and.w	r2, r3, #31
 8005092:	e017      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x3fc>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2103      	movs	r1, #3
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fb7a 	bl	8004794 <LL_ADC_GetOffsetChannel>
 80050a0:	4603      	mov	r3, r0
 80050a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a6:	fa93 f3a3 	rbit	r3, r3
 80050aa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80050ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050ae:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80050b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80050b6:	2320      	movs	r3, #32
 80050b8:	e003      	b.n	80050c2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80050ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050bc:	fab3 f383 	clz	r3, r3
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d105      	bne.n	80050dc <HAL_ADC_ConfigChannel+0x414>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	0e9b      	lsrs	r3, r3, #26
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	e011      	b.n	8005100 <HAL_ADC_ConfigChannel+0x438>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050e4:	fa93 f3a3 	rbit	r3, r3
 80050e8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80050ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80050ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80050f4:	2320      	movs	r3, #32
 80050f6:	e003      	b.n	8005100 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80050f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005100:	429a      	cmp	r2, r3
 8005102:	d106      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	2103      	movs	r1, #3
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff fb57 	bl	80047c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fc4a 	bl	80049b0 <LL_ADC_IsEnabled>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	f040 8140 	bne.w	80053a4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	6819      	ldr	r1, [r3, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	461a      	mov	r2, r3
 8005132:	f7ff fbcb 	bl	80048cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	4a8f      	ldr	r2, [pc, #572]	; (8005378 <HAL_ADC_ConfigChannel+0x6b0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	f040 8131 	bne.w	80053a4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <HAL_ADC_ConfigChannel+0x4a2>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	0e9b      	lsrs	r3, r3, #26
 8005158:	3301      	adds	r3, #1
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2b09      	cmp	r3, #9
 8005160:	bf94      	ite	ls
 8005162:	2301      	movls	r3, #1
 8005164:	2300      	movhi	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	e019      	b.n	800519e <HAL_ADC_ConfigChannel+0x4d6>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005172:	fa93 f3a3 	rbit	r3, r3
 8005176:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800517a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800517c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005182:	2320      	movs	r3, #32
 8005184:	e003      	b.n	800518e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8005186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005188:	fab3 f383 	clz	r3, r3
 800518c:	b2db      	uxtb	r3, r3
 800518e:	3301      	adds	r3, #1
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	2b09      	cmp	r3, #9
 8005196:	bf94      	ite	ls
 8005198:	2301      	movls	r3, #1
 800519a:	2300      	movhi	r3, #0
 800519c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d079      	beq.n	8005296 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d107      	bne.n	80051be <HAL_ADC_ConfigChannel+0x4f6>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	0e9b      	lsrs	r3, r3, #26
 80051b4:	3301      	adds	r3, #1
 80051b6:	069b      	lsls	r3, r3, #26
 80051b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051bc:	e015      	b.n	80051ea <HAL_ADC_ConfigChannel+0x522>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c6:	fa93 f3a3 	rbit	r3, r3
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80051cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80051d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80051d6:	2320      	movs	r3, #32
 80051d8:	e003      	b.n	80051e2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80051da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051dc:	fab3 f383 	clz	r3, r3
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	3301      	adds	r3, #1
 80051e4:	069b      	lsls	r3, r3, #26
 80051e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_ADC_ConfigChannel+0x542>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	0e9b      	lsrs	r3, r3, #26
 80051fc:	3301      	adds	r3, #1
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	2101      	movs	r1, #1
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	e017      	b.n	800523a <HAL_ADC_ConfigChannel+0x572>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005212:	fa93 f3a3 	rbit	r3, r3
 8005216:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800521c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8005222:	2320      	movs	r3, #32
 8005224:	e003      	b.n	800522e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8005226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005228:	fab3 f383 	clz	r3, r3
 800522c:	b2db      	uxtb	r3, r3
 800522e:	3301      	adds	r3, #1
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	2101      	movs	r1, #1
 8005236:	fa01 f303 	lsl.w	r3, r1, r3
 800523a:	ea42 0103 	orr.w	r1, r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10a      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x598>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	0e9b      	lsrs	r3, r3, #26
 8005250:	3301      	adds	r3, #1
 8005252:	f003 021f 	and.w	r2, r3, #31
 8005256:	4613      	mov	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	4413      	add	r3, r2
 800525c:	051b      	lsls	r3, r3, #20
 800525e:	e018      	b.n	8005292 <HAL_ADC_ConfigChannel+0x5ca>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	fa93 f3a3 	rbit	r3, r3
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8005278:	2320      	movs	r3, #32
 800527a:	e003      	b.n	8005284 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800527c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527e:	fab3 f383 	clz	r3, r3
 8005282:	b2db      	uxtb	r3, r3
 8005284:	3301      	adds	r3, #1
 8005286:	f003 021f 	and.w	r2, r3, #31
 800528a:	4613      	mov	r3, r2
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	4413      	add	r3, r2
 8005290:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005292:	430b      	orrs	r3, r1
 8005294:	e081      	b.n	800539a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d107      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x5ea>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	0e9b      	lsrs	r3, r3, #26
 80052a8:	3301      	adds	r3, #1
 80052aa:	069b      	lsls	r3, r3, #26
 80052ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052b0:	e015      	b.n	80052de <HAL_ADC_ConfigChannel+0x616>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	fa93 f3a3 	rbit	r3, r3
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80052ca:	2320      	movs	r3, #32
 80052cc:	e003      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	fab3 f383 	clz	r3, r3
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	069b      	lsls	r3, r3, #26
 80052da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <HAL_ADC_ConfigChannel+0x636>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	0e9b      	lsrs	r3, r3, #26
 80052f0:	3301      	adds	r3, #1
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	2101      	movs	r1, #1
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	e017      	b.n	800532e <HAL_ADC_ConfigChannel+0x666>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	fa93 f3a3 	rbit	r3, r3
 800530a:	61fb      	str	r3, [r7, #28]
  return result;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8005316:	2320      	movs	r3, #32
 8005318:	e003      	b.n	8005322 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	b2db      	uxtb	r3, r3
 8005322:	3301      	adds	r3, #1
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	2101      	movs	r1, #1
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	ea42 0103 	orr.w	r1, r2, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10d      	bne.n	800535a <HAL_ADC_ConfigChannel+0x692>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	0e9b      	lsrs	r3, r3, #26
 8005344:	3301      	adds	r3, #1
 8005346:	f003 021f 	and.w	r2, r3, #31
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	3b1e      	subs	r3, #30
 8005352:	051b      	lsls	r3, r3, #20
 8005354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005358:	e01e      	b.n	8005398 <HAL_ADC_ConfigChannel+0x6d0>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	fa93 f3a3 	rbit	r3, r3
 8005366:	613b      	str	r3, [r7, #16]
  return result;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005372:	2320      	movs	r3, #32
 8005374:	e006      	b.n	8005384 <HAL_ADC_ConfigChannel+0x6bc>
 8005376:	bf00      	nop
 8005378:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	fab3 f383 	clz	r3, r3
 8005382:	b2db      	uxtb	r3, r3
 8005384:	3301      	adds	r3, #1
 8005386:	f003 021f 	and.w	r2, r3, #31
 800538a:	4613      	mov	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	3b1e      	subs	r3, #30
 8005392:	051b      	lsls	r3, r3, #20
 8005394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005398:	430b      	orrs	r3, r1
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	6892      	ldr	r2, [r2, #8]
 800539e:	4619      	mov	r1, r3
 80053a0:	f7ff fa68 	bl	8004874 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b3d      	ldr	r3, [pc, #244]	; (80054a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d06c      	beq.n	800548a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053b0:	483c      	ldr	r0, [pc, #240]	; (80054a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80053b2:	f7ff f9bd 	bl	8004730 <LL_ADC_GetCommonPathInternalCh>
 80053b6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a3a      	ldr	r2, [pc, #232]	; (80054a8 <HAL_ADC_ConfigChannel+0x7e0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d127      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d121      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a35      	ldr	r2, [pc, #212]	; (80054ac <HAL_ADC_ConfigChannel+0x7e4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d157      	bne.n	800548a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053e2:	4619      	mov	r1, r3
 80053e4:	482f      	ldr	r0, [pc, #188]	; (80054a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80053e6:	f7ff f990 	bl	800470a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053ea:	4b31      	ldr	r3, [pc, #196]	; (80054b0 <HAL_ADC_ConfigChannel+0x7e8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	099b      	lsrs	r3, r3, #6
 80053f0:	4a30      	ldr	r2, [pc, #192]	; (80054b4 <HAL_ADC_ConfigChannel+0x7ec>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	099b      	lsrs	r3, r3, #6
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	4613      	mov	r3, r2
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005404:	e002      	b.n	800540c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3b01      	subs	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f9      	bne.n	8005406 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005412:	e03a      	b.n	800548a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a27      	ldr	r2, [pc, #156]	; (80054b8 <HAL_ADC_ConfigChannel+0x7f0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d113      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x77e>
 800541e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10d      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <HAL_ADC_ConfigChannel+0x7e4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d12a      	bne.n	800548a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800543c:	4619      	mov	r1, r3
 800543e:	4819      	ldr	r0, [pc, #100]	; (80054a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8005440:	f7ff f963 	bl	800470a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005444:	e021      	b.n	800548a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <HAL_ADC_ConfigChannel+0x7f4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d11c      	bne.n	800548a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d116      	bne.n	800548a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a12      	ldr	r2, [pc, #72]	; (80054ac <HAL_ADC_ConfigChannel+0x7e4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d111      	bne.n	800548a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800546a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800546e:	4619      	mov	r1, r3
 8005470:	480c      	ldr	r0, [pc, #48]	; (80054a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8005472:	f7ff f94a 	bl	800470a <LL_ADC_SetCommonPathInternalCh>
 8005476:	e008      	b.n	800548a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005492:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005496:	4618      	mov	r0, r3
 8005498:	37d8      	adds	r7, #216	; 0xd8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	80080000 	.word	0x80080000
 80054a4:	50040300 	.word	0x50040300
 80054a8:	c7520000 	.word	0xc7520000
 80054ac:	50040000 	.word	0x50040000
 80054b0:	20000214 	.word	0x20000214
 80054b4:	053e2d63 	.word	0x053e2d63
 80054b8:	cb840000 	.word	0xcb840000
 80054bc:	80000001 	.word	0x80000001

080054c0 <LL_ADC_IsEnabled>:
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <LL_ADC_IsEnabled+0x18>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <LL_ADC_IsEnabled+0x1a>
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d101      	bne.n	80054fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b0a1      	sub	sp, #132	; 0x84
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005526:	2302      	movs	r3, #2
 8005528:	e089      	b.n	800563e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005532:	2300      	movs	r3, #0
 8005534:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005536:	2300      	movs	r3, #0
 8005538:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a42      	ldr	r2, [pc, #264]	; (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d102      	bne.n	800554a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005544:	4b41      	ldr	r3, [pc, #260]	; (800564c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e001      	b.n	800554e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005558:	f043 0220 	orr.w	r2, r3, #32
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e068      	b.n	800563e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff ffb9 	bl	80054e6 <LL_ADC_REG_IsConversionOngoing>
 8005574:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ffb3 	bl	80054e6 <LL_ADC_REG_IsConversionOngoing>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d14a      	bne.n	800561c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005588:	2b00      	cmp	r3, #0
 800558a:	d147      	bne.n	800561c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800558c:	4b30      	ldr	r3, [pc, #192]	; (8005650 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800558e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d027      	beq.n	80055e8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6859      	ldr	r1, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055aa:	035b      	lsls	r3, r3, #13
 80055ac:	430b      	orrs	r3, r1
 80055ae:	431a      	orrs	r2, r3
 80055b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055b4:	4824      	ldr	r0, [pc, #144]	; (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80055b6:	f7ff ff83 	bl	80054c0 <LL_ADC_IsEnabled>
 80055ba:	4604      	mov	r4, r0
 80055bc:	4823      	ldr	r0, [pc, #140]	; (800564c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80055be:	f7ff ff7f 	bl	80054c0 <LL_ADC_IsEnabled>
 80055c2:	4603      	mov	r3, r0
 80055c4:	4323      	orrs	r3, r4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d132      	bne.n	8005630 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80055ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80055d2:	f023 030f 	bic.w	r3, r3, #15
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	6811      	ldr	r1, [r2, #0]
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	6892      	ldr	r2, [r2, #8]
 80055de:	430a      	orrs	r2, r1
 80055e0:	431a      	orrs	r2, r3
 80055e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055e6:	e023      	b.n	8005630 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80055e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055f4:	4814      	ldr	r0, [pc, #80]	; (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80055f6:	f7ff ff63 	bl	80054c0 <LL_ADC_IsEnabled>
 80055fa:	4604      	mov	r4, r0
 80055fc:	4813      	ldr	r0, [pc, #76]	; (800564c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80055fe:	f7ff ff5f 	bl	80054c0 <LL_ADC_IsEnabled>
 8005602:	4603      	mov	r3, r0
 8005604:	4323      	orrs	r3, r4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d112      	bne.n	8005630 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800560a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005612:	f023 030f 	bic.w	r3, r3, #15
 8005616:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005618:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800561a:	e009      	b.n	8005630 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005620:	f043 0220 	orr.w	r2, r3, #32
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800562e:	e000      	b.n	8005632 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005630:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800563a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800563e:	4618      	mov	r0, r3
 8005640:	3784      	adds	r7, #132	; 0x84
 8005642:	46bd      	mov	sp, r7
 8005644:	bd90      	pop	{r4, r7, pc}
 8005646:	bf00      	nop
 8005648:	50040000 	.word	0x50040000
 800564c:	50040100 	.word	0x50040100
 8005650:	50040300 	.word	0x50040300

08005654 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e0ed      	b.n	8005842 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fa ff62 	bl	800053c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005688:	f7fe fffc 	bl	8004684 <HAL_GetTick>
 800568c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800568e:	e012      	b.n	80056b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005690:	f7fe fff8 	bl	8004684 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b0a      	cmp	r3, #10
 800569c:	d90b      	bls.n	80056b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2205      	movs	r2, #5
 80056ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0c5      	b.n	8005842 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0e5      	beq.n	8005690 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0202 	bic.w	r2, r2, #2
 80056d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056d4:	f7fe ffd6 	bl	8004684 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80056da:	e012      	b.n	8005702 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80056dc:	f7fe ffd2 	bl	8004684 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b0a      	cmp	r3, #10
 80056e8:	d90b      	bls.n	8005702 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2205      	movs	r2, #5
 80056fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e09f      	b.n	8005842 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e5      	bne.n	80056dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	7e1b      	ldrb	r3, [r3, #24]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d108      	bne.n	800572a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	e007      	b.n	800573a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005738:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	7e5b      	ldrb	r3, [r3, #25]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d108      	bne.n	8005754 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e007      	b.n	8005764 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005762:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	7e9b      	ldrb	r3, [r3, #26]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d108      	bne.n	800577e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0220 	orr.w	r2, r2, #32
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	e007      	b.n	800578e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0220 	bic.w	r2, r2, #32
 800578c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	7edb      	ldrb	r3, [r3, #27]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d108      	bne.n	80057a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0210 	bic.w	r2, r2, #16
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e007      	b.n	80057b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0210 	orr.w	r2, r2, #16
 80057b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	7f1b      	ldrb	r3, [r3, #28]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d108      	bne.n	80057d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0208 	orr.w	r2, r2, #8
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e007      	b.n	80057e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0208 	bic.w	r2, r2, #8
 80057e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	7f5b      	ldrb	r3, [r3, #29]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d108      	bne.n	80057fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0204 	orr.w	r2, r2, #4
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e007      	b.n	800580c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0204 	bic.w	r2, r2, #4
 800580a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	ea42 0103 	orr.w	r1, r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	1e5a      	subs	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800584a:	b480      	push	{r7}
 800584c:	b087      	sub	sp, #28
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005860:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005862:	7cfb      	ldrb	r3, [r7, #19]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d003      	beq.n	8005870 <HAL_CAN_ConfigFilter+0x26>
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	2b02      	cmp	r3, #2
 800586c:	f040 80aa 	bne.w	80059c4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005876:	f043 0201 	orr.w	r2, r3, #1
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	2201      	movs	r2, #1
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	43db      	mvns	r3, r3
 800589a:	401a      	ands	r2, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d123      	bne.n	80058f2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	43db      	mvns	r3, r3
 80058b4:	401a      	ands	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80058cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	3248      	adds	r2, #72	; 0x48
 80058d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058e8:	6979      	ldr	r1, [r7, #20]
 80058ea:	3348      	adds	r3, #72	; 0x48
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	440b      	add	r3, r1
 80058f0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d122      	bne.n	8005940 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	431a      	orrs	r2, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800591a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	3248      	adds	r2, #72	; 0x48
 8005920:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005934:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005936:	6979      	ldr	r1, [r7, #20]
 8005938:	3348      	adds	r3, #72	; 0x48
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	440b      	add	r3, r1
 800593e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	43db      	mvns	r3, r3
 8005952:	401a      	ands	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800595a:	e007      	b.n	800596c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	431a      	orrs	r2, r3
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	43db      	mvns	r3, r3
 800597e:	401a      	ands	r2, r3
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005986:	e007      	b.n	8005998 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	431a      	orrs	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d107      	bne.n	80059b0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	431a      	orrs	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	e006      	b.n	80059d2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d12e      	bne.n	8005a50 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a0a:	f7fe fe3b 	bl	8004684 <HAL_GetTick>
 8005a0e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005a10:	e012      	b.n	8005a38 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a12:	f7fe fe37 	bl	8004684 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b0a      	cmp	r3, #10
 8005a1e:	d90b      	bls.n	8005a38 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2205      	movs	r2, #5
 8005a30:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e012      	b.n	8005a5e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e006      	b.n	8005a5e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
  }
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b089      	sub	sp, #36	; 0x24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a84:	7ffb      	ldrb	r3, [r7, #31]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d003      	beq.n	8005a92 <HAL_CAN_AddTxMessage+0x2c>
 8005a8a:	7ffb      	ldrb	r3, [r7, #31]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	f040 80b8 	bne.w	8005c02 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d105      	bne.n	8005ab2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 80a0 	beq.w	8005bf2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	0e1b      	lsrs	r3, r3, #24
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d907      	bls.n	8005ad2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e09e      	b.n	8005c10 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10d      	bne.n	8005b00 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	6809      	ldr	r1, [r1, #0]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3318      	adds	r3, #24
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	440b      	add	r3, r1
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e00f      	b.n	8005b20 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005b0a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005b10:	68f9      	ldr	r1, [r7, #12]
 8005b12:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005b14:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	3318      	adds	r3, #24
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	440b      	add	r3, r1
 8005b1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	3318      	adds	r3, #24
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	440b      	add	r3, r1
 8005b30:	3304      	adds	r3, #4
 8005b32:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	7d1b      	ldrb	r3, [r3, #20]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d111      	bne.n	8005b60 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	3318      	adds	r3, #24
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	4413      	add	r3, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	6811      	ldr	r1, [r2, #0]
 8005b50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	3318      	adds	r3, #24
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	440b      	add	r3, r1
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3307      	adds	r3, #7
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	061a      	lsls	r2, r3, #24
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3306      	adds	r3, #6
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3305      	adds	r3, #5
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	3204      	adds	r2, #4
 8005b80:	7812      	ldrb	r2, [r2, #0]
 8005b82:	4610      	mov	r0, r2
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	6811      	ldr	r1, [r2, #0]
 8005b88:	ea43 0200 	orr.w	r2, r3, r0
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	440b      	add	r3, r1
 8005b92:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005b96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3303      	adds	r3, #3
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	061a      	lsls	r2, r3, #24
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3302      	adds	r3, #2
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3301      	adds	r3, #1
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	4610      	mov	r0, r2
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	6811      	ldr	r1, [r2, #0]
 8005bbe:	ea43 0200 	orr.w	r2, r3, r0
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	440b      	add	r3, r1
 8005bc8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005bcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	4413      	add	r3, r2
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	6811      	ldr	r1, [r2, #0]
 8005be0:	f043 0201 	orr.w	r2, r3, #1
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	3318      	adds	r3, #24
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	440b      	add	r3, r1
 8005bec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e00e      	b.n	8005c10 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e006      	b.n	8005c10 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
  }
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3724      	adds	r7, #36	; 0x24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c30:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d003      	beq.n	8005c40 <HAL_CAN_GetRxMessage+0x24>
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	f040 80f3 	bne.w	8005e26 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10e      	bne.n	8005c64 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d116      	bne.n	8005c82 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e0e7      	b.n	8005e34 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d107      	bne.n	8005c82 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e0d8      	b.n	8005e34 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	331b      	adds	r3, #27
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	4413      	add	r3, r2
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0204 	and.w	r2, r3, #4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10c      	bne.n	8005cba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	331b      	adds	r3, #27
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	4413      	add	r3, r2
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	0d5b      	lsrs	r3, r3, #21
 8005cb0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	e00b      	b.n	8005cd2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	331b      	adds	r3, #27
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	4413      	add	r3, r2
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	08db      	lsrs	r3, r3, #3
 8005cca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	331b      	adds	r3, #27
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	4413      	add	r3, r2
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0202 	and.w	r2, r3, #2
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	331b      	adds	r3, #27
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 020f 	and.w	r2, r3, #15
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	331b      	adds	r3, #27
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	331b      	adds	r3, #27
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	4413      	add	r3, r2
 8005d24:	3304      	adds	r3, #4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	0c1b      	lsrs	r3, r3, #16
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	0a1a      	lsrs	r2, r3, #8
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	0c1a      	lsrs	r2, r3, #16
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	3302      	adds	r3, #2
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	0e1a      	lsrs	r2, r3, #24
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	3303      	adds	r3, #3
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	3304      	adds	r3, #4
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	0a1a      	lsrs	r2, r3, #8
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	3305      	adds	r3, #5
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	0c1a      	lsrs	r2, r3, #16
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	3306      	adds	r3, #6
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	0e1a      	lsrs	r2, r3, #24
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	3307      	adds	r3, #7
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d108      	bne.n	8005e12 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0220 	orr.w	r2, r2, #32
 8005e0e:	60da      	str	r2, [r3, #12]
 8005e10:	e007      	b.n	8005e22 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0220 	orr.w	r2, r2, #32
 8005e20:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e006      	b.n	8005e34 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
  }
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e50:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d002      	beq.n	8005e5e <HAL_CAN_ActivateNotification+0x1e>
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d109      	bne.n	8005e72 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6959      	ldr	r1, [r3, #20]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e006      	b.n	8005e80 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
  }
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	; 0x28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005e94:	2300      	movs	r3, #0
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d07c      	beq.n	8005fcc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d023      	beq.n	8005f24 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f983 	bl	80061fa <HAL_CAN_TxMailbox0CompleteCallback>
 8005ef4:	e016      	b.n	8005f24 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
 8005f08:	e00c      	b.n	8005f24 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1c:	e002      	b.n	8005f24 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f989 	bl	8006236 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d024      	beq.n	8005f78 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f963 	bl	800620e <HAL_CAN_TxMailbox1CompleteCallback>
 8005f48:	e016      	b.n	8005f78 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d004      	beq.n	8005f5e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5c:	e00c      	b.n	8005f78 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f70:	e002      	b.n	8005f78 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f969 	bl	800624a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d024      	beq.n	8005fcc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f943 	bl	8006222 <HAL_CAN_TxMailbox2CompleteCallback>
 8005f9c:	e016      	b.n	8005fcc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb0:	e00c      	b.n	8005fcc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc4:	e002      	b.n	8005fcc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f949 	bl	800625e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00c      	beq.n	8005ff0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2210      	movs	r2, #16
 8005fee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d006      	beq.n	8006012 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2208      	movs	r2, #8
 800600a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f930 	bl	8006272 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fc fa3a 	bl	80024a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800604a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2210      	movs	r2, #16
 8006052:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00b      	beq.n	8006076 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d006      	beq.n	8006076 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2208      	movs	r2, #8
 800606e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f912 	bl	800629a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d009      	beq.n	8006094 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f8f9 	bl	8006286 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d006      	beq.n	80060b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2210      	movs	r2, #16
 80060ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8fc 	bl	80062ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d006      	beq.n	80060d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2208      	movs	r2, #8
 80060d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8f5 	bl	80062c2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d07b      	beq.n	80061da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d072      	beq.n	80061d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800610e:	2b00      	cmp	r3, #0
 8006110:	d008      	beq.n	8006124 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	f043 0302 	orr.w	r3, r3, #2
 8006122:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	f043 0304 	orr.w	r3, r3, #4
 800613e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006146:	2b00      	cmp	r3, #0
 8006148:	d043      	beq.n	80061d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006150:	2b00      	cmp	r3, #0
 8006152:	d03e      	beq.n	80061d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800615a:	2b60      	cmp	r3, #96	; 0x60
 800615c:	d02b      	beq.n	80061b6 <HAL_CAN_IRQHandler+0x32a>
 800615e:	2b60      	cmp	r3, #96	; 0x60
 8006160:	d82e      	bhi.n	80061c0 <HAL_CAN_IRQHandler+0x334>
 8006162:	2b50      	cmp	r3, #80	; 0x50
 8006164:	d022      	beq.n	80061ac <HAL_CAN_IRQHandler+0x320>
 8006166:	2b50      	cmp	r3, #80	; 0x50
 8006168:	d82a      	bhi.n	80061c0 <HAL_CAN_IRQHandler+0x334>
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d019      	beq.n	80061a2 <HAL_CAN_IRQHandler+0x316>
 800616e:	2b40      	cmp	r3, #64	; 0x40
 8006170:	d826      	bhi.n	80061c0 <HAL_CAN_IRQHandler+0x334>
 8006172:	2b30      	cmp	r3, #48	; 0x30
 8006174:	d010      	beq.n	8006198 <HAL_CAN_IRQHandler+0x30c>
 8006176:	2b30      	cmp	r3, #48	; 0x30
 8006178:	d822      	bhi.n	80061c0 <HAL_CAN_IRQHandler+0x334>
 800617a:	2b10      	cmp	r3, #16
 800617c:	d002      	beq.n	8006184 <HAL_CAN_IRQHandler+0x2f8>
 800617e:	2b20      	cmp	r3, #32
 8006180:	d005      	beq.n	800618e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006182:	e01d      	b.n	80061c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	f043 0308 	orr.w	r3, r3, #8
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800618c:	e019      	b.n	80061c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	f043 0310 	orr.w	r3, r3, #16
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006196:	e014      	b.n	80061c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	f043 0320 	orr.w	r3, r3, #32
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061a0:	e00f      	b.n	80061c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061aa:	e00a      	b.n	80061c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061b4:	e005      	b.n	80061c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061be:	e000      	b.n	80061c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80061c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	699a      	ldr	r2, [r3, #24]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80061d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2204      	movs	r2, #4
 80061d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f872 	bl	80062d6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80061f2:	bf00      	nop
 80061f4:	3728      	adds	r7, #40	; 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062fc:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <__NVIC_SetPriorityGrouping+0x44>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006308:	4013      	ands	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800631e:	4a04      	ldr	r2, [pc, #16]	; (8006330 <__NVIC_SetPriorityGrouping+0x44>)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	60d3      	str	r3, [r2, #12]
}
 8006324:	bf00      	nop
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	e000ed00 	.word	0xe000ed00

08006334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006338:	4b04      	ldr	r3, [pc, #16]	; (800634c <__NVIC_GetPriorityGrouping+0x18>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	0a1b      	lsrs	r3, r3, #8
 800633e:	f003 0307 	and.w	r3, r3, #7
}
 8006342:	4618      	mov	r0, r3
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	e000ed00 	.word	0xe000ed00

08006350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800635a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635e:	2b00      	cmp	r3, #0
 8006360:	db0b      	blt.n	800637a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	f003 021f 	and.w	r2, r3, #31
 8006368:	4907      	ldr	r1, [pc, #28]	; (8006388 <__NVIC_EnableIRQ+0x38>)
 800636a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	2001      	movs	r0, #1
 8006372:	fa00 f202 	lsl.w	r2, r0, r2
 8006376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	e000e100 	.word	0xe000e100

0800638c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	6039      	str	r1, [r7, #0]
 8006396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639c:	2b00      	cmp	r3, #0
 800639e:	db0a      	blt.n	80063b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	490c      	ldr	r1, [pc, #48]	; (80063d8 <__NVIC_SetPriority+0x4c>)
 80063a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063aa:	0112      	lsls	r2, r2, #4
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	440b      	add	r3, r1
 80063b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063b4:	e00a      	b.n	80063cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4908      	ldr	r1, [pc, #32]	; (80063dc <__NVIC_SetPriority+0x50>)
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	3b04      	subs	r3, #4
 80063c4:	0112      	lsls	r2, r2, #4
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	440b      	add	r3, r1
 80063ca:	761a      	strb	r2, [r3, #24]
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	e000e100 	.word	0xe000e100
 80063dc:	e000ed00 	.word	0xe000ed00

080063e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b089      	sub	sp, #36	; 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f1c3 0307 	rsb	r3, r3, #7
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf28      	it	cs
 80063fe:	2304      	movcs	r3, #4
 8006400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	3304      	adds	r3, #4
 8006406:	2b06      	cmp	r3, #6
 8006408:	d902      	bls.n	8006410 <NVIC_EncodePriority+0x30>
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	3b03      	subs	r3, #3
 800640e:	e000      	b.n	8006412 <NVIC_EncodePriority+0x32>
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006414:	f04f 32ff 	mov.w	r2, #4294967295
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	43da      	mvns	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	401a      	ands	r2, r3
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006428:	f04f 31ff 	mov.w	r1, #4294967295
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	fa01 f303 	lsl.w	r3, r1, r3
 8006432:	43d9      	mvns	r1, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006438:	4313      	orrs	r3, r2
         );
}
 800643a:	4618      	mov	r0, r3
 800643c:	3724      	adds	r7, #36	; 0x24
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3b01      	subs	r3, #1
 8006454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006458:	d301      	bcc.n	800645e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800645a:	2301      	movs	r3, #1
 800645c:	e00f      	b.n	800647e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800645e:	4a0a      	ldr	r2, [pc, #40]	; (8006488 <SysTick_Config+0x40>)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3b01      	subs	r3, #1
 8006464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006466:	210f      	movs	r1, #15
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	f7ff ff8e 	bl	800638c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <SysTick_Config+0x40>)
 8006472:	2200      	movs	r2, #0
 8006474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006476:	4b04      	ldr	r3, [pc, #16]	; (8006488 <SysTick_Config+0x40>)
 8006478:	2207      	movs	r2, #7
 800647a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	e000e010 	.word	0xe000e010

0800648c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff ff29 	bl	80062ec <__NVIC_SetPriorityGrouping>
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	4603      	mov	r3, r0
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064b4:	f7ff ff3e 	bl	8006334 <__NVIC_GetPriorityGrouping>
 80064b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f7ff ff8e 	bl	80063e0 <NVIC_EncodePriority>
 80064c4:	4602      	mov	r2, r0
 80064c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ca:	4611      	mov	r1, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff ff5d 	bl	800638c <__NVIC_SetPriority>
}
 80064d2:	bf00      	nop
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	4603      	mov	r3, r0
 80064e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff ff31 	bl	8006350 <__NVIC_EnableIRQ>
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff ffa2 	bl	8006448 <SysTick_Config>
 8006504:	4603      	mov	r3, r0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800651e:	e166      	b.n	80067ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	2101      	movs	r1, #1
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	fa01 f303 	lsl.w	r3, r1, r3
 800652c:	4013      	ands	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8158 	beq.w	80067e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	2b01      	cmp	r3, #1
 8006542:	d005      	beq.n	8006550 <HAL_GPIO_Init+0x40>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f003 0303 	and.w	r3, r3, #3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d130      	bne.n	80065b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	2203      	movs	r2, #3
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	43db      	mvns	r3, r3
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4013      	ands	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006586:	2201      	movs	r2, #1
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	43db      	mvns	r3, r3
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4013      	ands	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	091b      	lsrs	r3, r3, #4
 800659c:	f003 0201 	and.w	r2, r3, #1
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d017      	beq.n	80065ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	2203      	movs	r2, #3
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43db      	mvns	r3, r3
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4013      	ands	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d123      	bne.n	8006642 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	08da      	lsrs	r2, r3, #3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3208      	adds	r2, #8
 8006602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006606:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	220f      	movs	r2, #15
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	43db      	mvns	r3, r3
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4013      	ands	r3, r2
 800661c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	08da      	lsrs	r2, r3, #3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3208      	adds	r2, #8
 800663c:	6939      	ldr	r1, [r7, #16]
 800663e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	2203      	movs	r2, #3
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	43db      	mvns	r3, r3
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4013      	ands	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f003 0203 	and.w	r2, r3, #3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80b2 	beq.w	80067e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006684:	4b61      	ldr	r3, [pc, #388]	; (800680c <HAL_GPIO_Init+0x2fc>)
 8006686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006688:	4a60      	ldr	r2, [pc, #384]	; (800680c <HAL_GPIO_Init+0x2fc>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6613      	str	r3, [r2, #96]	; 0x60
 8006690:	4b5e      	ldr	r3, [pc, #376]	; (800680c <HAL_GPIO_Init+0x2fc>)
 8006692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800669c:	4a5c      	ldr	r2, [pc, #368]	; (8006810 <HAL_GPIO_Init+0x300>)
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	089b      	lsrs	r3, r3, #2
 80066a2:	3302      	adds	r3, #2
 80066a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	220f      	movs	r2, #15
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	43db      	mvns	r3, r3
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4013      	ands	r3, r2
 80066be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066c6:	d02b      	beq.n	8006720 <HAL_GPIO_Init+0x210>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a52      	ldr	r2, [pc, #328]	; (8006814 <HAL_GPIO_Init+0x304>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d025      	beq.n	800671c <HAL_GPIO_Init+0x20c>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a51      	ldr	r2, [pc, #324]	; (8006818 <HAL_GPIO_Init+0x308>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d01f      	beq.n	8006718 <HAL_GPIO_Init+0x208>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a50      	ldr	r2, [pc, #320]	; (800681c <HAL_GPIO_Init+0x30c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d019      	beq.n	8006714 <HAL_GPIO_Init+0x204>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a4f      	ldr	r2, [pc, #316]	; (8006820 <HAL_GPIO_Init+0x310>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <HAL_GPIO_Init+0x200>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a4e      	ldr	r2, [pc, #312]	; (8006824 <HAL_GPIO_Init+0x314>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00d      	beq.n	800670c <HAL_GPIO_Init+0x1fc>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a4d      	ldr	r2, [pc, #308]	; (8006828 <HAL_GPIO_Init+0x318>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d007      	beq.n	8006708 <HAL_GPIO_Init+0x1f8>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a4c      	ldr	r2, [pc, #304]	; (800682c <HAL_GPIO_Init+0x31c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d101      	bne.n	8006704 <HAL_GPIO_Init+0x1f4>
 8006700:	2307      	movs	r3, #7
 8006702:	e00e      	b.n	8006722 <HAL_GPIO_Init+0x212>
 8006704:	2308      	movs	r3, #8
 8006706:	e00c      	b.n	8006722 <HAL_GPIO_Init+0x212>
 8006708:	2306      	movs	r3, #6
 800670a:	e00a      	b.n	8006722 <HAL_GPIO_Init+0x212>
 800670c:	2305      	movs	r3, #5
 800670e:	e008      	b.n	8006722 <HAL_GPIO_Init+0x212>
 8006710:	2304      	movs	r3, #4
 8006712:	e006      	b.n	8006722 <HAL_GPIO_Init+0x212>
 8006714:	2303      	movs	r3, #3
 8006716:	e004      	b.n	8006722 <HAL_GPIO_Init+0x212>
 8006718:	2302      	movs	r3, #2
 800671a:	e002      	b.n	8006722 <HAL_GPIO_Init+0x212>
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <HAL_GPIO_Init+0x212>
 8006720:	2300      	movs	r3, #0
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	f002 0203 	and.w	r2, r2, #3
 8006728:	0092      	lsls	r2, r2, #2
 800672a:	4093      	lsls	r3, r2
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006732:	4937      	ldr	r1, [pc, #220]	; (8006810 <HAL_GPIO_Init+0x300>)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	089b      	lsrs	r3, r3, #2
 8006738:	3302      	adds	r3, #2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006740:	4b3b      	ldr	r3, [pc, #236]	; (8006830 <HAL_GPIO_Init+0x320>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	43db      	mvns	r3, r3
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4013      	ands	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006764:	4a32      	ldr	r2, [pc, #200]	; (8006830 <HAL_GPIO_Init+0x320>)
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800676a:	4b31      	ldr	r3, [pc, #196]	; (8006830 <HAL_GPIO_Init+0x320>)
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	43db      	mvns	r3, r3
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4013      	ands	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800678e:	4a28      	ldr	r2, [pc, #160]	; (8006830 <HAL_GPIO_Init+0x320>)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006794:	4b26      	ldr	r3, [pc, #152]	; (8006830 <HAL_GPIO_Init+0x320>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	43db      	mvns	r3, r3
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4013      	ands	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067b8:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <HAL_GPIO_Init+0x320>)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80067be:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <HAL_GPIO_Init+0x320>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	43db      	mvns	r3, r3
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4013      	ands	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067e2:	4a13      	ldr	r2, [pc, #76]	; (8006830 <HAL_GPIO_Init+0x320>)
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	3301      	adds	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	fa22 f303 	lsr.w	r3, r2, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f47f ae91 	bne.w	8006520 <HAL_GPIO_Init+0x10>
  }
}
 80067fe:	bf00      	nop
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40021000 	.word	0x40021000
 8006810:	40010000 	.word	0x40010000
 8006814:	48000400 	.word	0x48000400
 8006818:	48000800 	.word	0x48000800
 800681c:	48000c00 	.word	0x48000c00
 8006820:	48001000 	.word	0x48001000
 8006824:	48001400 	.word	0x48001400
 8006828:	48001800 	.word	0x48001800
 800682c:	48001c00 	.word	0x48001c00
 8006830:	40010400 	.word	0x40010400

08006834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	887b      	ldrh	r3, [r7, #2]
 8006846:	4013      	ands	r3, r2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800684c:	2301      	movs	r3, #1
 800684e:	73fb      	strb	r3, [r7, #15]
 8006850:	e001      	b.n	8006856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	807b      	strh	r3, [r7, #2]
 8006870:	4613      	mov	r3, r2
 8006872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006874:	787b      	ldrb	r3, [r7, #1]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800687a:	887a      	ldrh	r2, [r7, #2]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006880:	e002      	b.n	8006888 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006882:	887a      	ldrh	r2, [r7, #2]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006898:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a4:	d102      	bne.n	80068ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80068a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068aa:	e00b      	b.n	80068c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80068ac:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80068ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ba:	d102      	bne.n	80068c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80068bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068c0:	e000      	b.n	80068c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80068c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40007000 	.word	0x40007000

080068d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d141      	bne.n	8006966 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068e2:	4b4b      	ldr	r3, [pc, #300]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ee:	d131      	bne.n	8006954 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068f0:	4b47      	ldr	r3, [pc, #284]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f6:	4a46      	ldr	r2, [pc, #280]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006900:	4b43      	ldr	r3, [pc, #268]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006908:	4a41      	ldr	r2, [pc, #260]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800690a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800690e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006910:	4b40      	ldr	r3, [pc, #256]	; (8006a14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2232      	movs	r2, #50	; 0x32
 8006916:	fb02 f303 	mul.w	r3, r2, r3
 800691a:	4a3f      	ldr	r2, [pc, #252]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800691c:	fba2 2303 	umull	r2, r3, r2, r3
 8006920:	0c9b      	lsrs	r3, r3, #18
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006926:	e002      	b.n	800692e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3b01      	subs	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800692e:	4b38      	ldr	r3, [pc, #224]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693a:	d102      	bne.n	8006942 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f2      	bne.n	8006928 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006942:	4b33      	ldr	r3, [pc, #204]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800694a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694e:	d158      	bne.n	8006a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e057      	b.n	8006a04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006954:	4b2e      	ldr	r3, [pc, #184]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695a:	4a2d      	ldr	r2, [pc, #180]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800695c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006960:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006964:	e04d      	b.n	8006a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696c:	d141      	bne.n	80069f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800696e:	4b28      	ldr	r3, [pc, #160]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697a:	d131      	bne.n	80069e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800697c:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800697e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006982:	4a23      	ldr	r2, [pc, #140]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006988:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800698c:	4b20      	ldr	r3, [pc, #128]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006994:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800699a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800699c:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2232      	movs	r2, #50	; 0x32
 80069a2:	fb02 f303 	mul.w	r3, r2, r3
 80069a6:	4a1c      	ldr	r2, [pc, #112]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069a8:	fba2 2303 	umull	r2, r3, r2, r3
 80069ac:	0c9b      	lsrs	r3, r3, #18
 80069ae:	3301      	adds	r3, #1
 80069b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069b2:	e002      	b.n	80069ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ba:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c6:	d102      	bne.n	80069ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f2      	bne.n	80069b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069ce:	4b10      	ldr	r3, [pc, #64]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069da:	d112      	bne.n	8006a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e011      	b.n	8006a04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069e0:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e6:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80069f0:	e007      	b.n	8006a02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80069f2:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069fa:	4a05      	ldr	r2, [pc, #20]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a00:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	40007000 	.word	0x40007000
 8006a14:	20000214 	.word	0x20000214
 8006a18:	431bde83 	.word	0x431bde83

08006a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	; 0x28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f000 bc76 	b.w	800731c <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a30:	4b97      	ldr	r3, [pc, #604]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 030c 	and.w	r3, r3, #12
 8006a38:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a3a:	4b95      	ldr	r3, [pc, #596]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 80e6 	beq.w	8006c1e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d007      	beq.n	8006a68 <HAL_RCC_OscConfig+0x4c>
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	2b0c      	cmp	r3, #12
 8006a5c:	f040 808d 	bne.w	8006b7a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	f040 8089 	bne.w	8006b7a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a68:	4b89      	ldr	r3, [pc, #548]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <HAL_RCC_OscConfig+0x66>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d102      	bne.n	8006a82 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f000 bc4d 	b.w	800731c <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a86:	4b82      	ldr	r3, [pc, #520]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <HAL_RCC_OscConfig+0x80>
 8006a92:	4b7f      	ldr	r3, [pc, #508]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a9a:	e005      	b.n	8006aa8 <HAL_RCC_OscConfig+0x8c>
 8006a9c:	4b7c      	ldr	r3, [pc, #496]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aa2:	091b      	lsrs	r3, r3, #4
 8006aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d224      	bcs.n	8006af6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fdf3 	bl	800769c <RCC_SetFlashLatencyFromMSIRange>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	f000 bc2d 	b.w	800731c <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ac2:	4b73      	ldr	r3, [pc, #460]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a72      	ldr	r2, [pc, #456]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006ac8:	f043 0308 	orr.w	r3, r3, #8
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	4b70      	ldr	r3, [pc, #448]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	496d      	ldr	r1, [pc, #436]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ae0:	4b6b      	ldr	r3, [pc, #428]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	4968      	ldr	r1, [pc, #416]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	604b      	str	r3, [r1, #4]
 8006af4:	e025      	b.n	8006b42 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006af6:	4b66      	ldr	r3, [pc, #408]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a65      	ldr	r2, [pc, #404]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006afc:	f043 0308 	orr.w	r3, r3, #8
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	4b63      	ldr	r3, [pc, #396]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	4960      	ldr	r1, [pc, #384]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b14:	4b5e      	ldr	r3, [pc, #376]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	495b      	ldr	r1, [pc, #364]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fdb2 	bl	800769c <RCC_SetFlashLatencyFromMSIRange>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e3ec      	b.n	800731c <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b42:	f000 fd1f 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 8006b46:	4602      	mov	r2, r0
 8006b48:	4b51      	ldr	r3, [pc, #324]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	091b      	lsrs	r3, r3, #4
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	4950      	ldr	r1, [pc, #320]	; (8006c94 <HAL_RCC_OscConfig+0x278>)
 8006b54:	5ccb      	ldrb	r3, [r1, r3]
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5e:	4a4e      	ldr	r2, [pc, #312]	; (8006c98 <HAL_RCC_OscConfig+0x27c>)
 8006b60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006b62:	4b4e      	ldr	r3, [pc, #312]	; (8006c9c <HAL_RCC_OscConfig+0x280>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fd fd3c 	bl	80045e4 <HAL_InitTick>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d052      	beq.n	8006c1c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	e3d0      	b.n	800731c <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d032      	beq.n	8006be8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006b82:	4b43      	ldr	r3, [pc, #268]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a42      	ldr	r2, [pc, #264]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b8e:	f7fd fd79 	bl	8004684 <HAL_GetTick>
 8006b92:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b96:	f7fd fd75 	bl	8004684 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e3b9      	b.n	800731c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ba8:	4b39      	ldr	r3, [pc, #228]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0f0      	beq.n	8006b96 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bb4:	4b36      	ldr	r3, [pc, #216]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a35      	ldr	r2, [pc, #212]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006bba:	f043 0308 	orr.w	r3, r3, #8
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	4b33      	ldr	r3, [pc, #204]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	4930      	ldr	r1, [pc, #192]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bd2:	4b2f      	ldr	r3, [pc, #188]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	492b      	ldr	r1, [pc, #172]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	604b      	str	r3, [r1, #4]
 8006be6:	e01a      	b.n	8006c1e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006be8:	4b29      	ldr	r3, [pc, #164]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a28      	ldr	r2, [pc, #160]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bf4:	f7fd fd46 	bl	8004684 <HAL_GetTick>
 8006bf8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bfc:	f7fd fd42 	bl	8004684 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e386      	b.n	800731c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c0e:	4b20      	ldr	r3, [pc, #128]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1f0      	bne.n	8006bfc <HAL_RCC_OscConfig+0x1e0>
 8006c1a:	e000      	b.n	8006c1e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d073      	beq.n	8006d12 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d005      	beq.n	8006c3c <HAL_RCC_OscConfig+0x220>
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	2b0c      	cmp	r3, #12
 8006c34:	d10e      	bne.n	8006c54 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d10b      	bne.n	8006c54 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c3c:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d063      	beq.n	8006d10 <HAL_RCC_OscConfig+0x2f4>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d15f      	bne.n	8006d10 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e363      	b.n	800731c <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5c:	d106      	bne.n	8006c6c <HAL_RCC_OscConfig+0x250>
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a0b      	ldr	r2, [pc, #44]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e025      	b.n	8006cb8 <HAL_RCC_OscConfig+0x29c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c74:	d114      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x284>
 8006c76:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a05      	ldr	r2, [pc, #20]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a02      	ldr	r2, [pc, #8]	; (8006c90 <HAL_RCC_OscConfig+0x274>)
 8006c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	e013      	b.n	8006cb8 <HAL_RCC_OscConfig+0x29c>
 8006c90:	40021000 	.word	0x40021000
 8006c94:	080097b4 	.word	0x080097b4
 8006c98:	20000214 	.word	0x20000214
 8006c9c:	20000218 	.word	0x20000218
 8006ca0:	4b8f      	ldr	r3, [pc, #572]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a8e      	ldr	r2, [pc, #568]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	4b8c      	ldr	r3, [pc, #560]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a8b      	ldr	r2, [pc, #556]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d013      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc0:	f7fd fce0 	bl	8004684 <HAL_GetTick>
 8006cc4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cc8:	f7fd fcdc 	bl	8004684 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b64      	cmp	r3, #100	; 0x64
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e320      	b.n	800731c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cda:	4b81      	ldr	r3, [pc, #516]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0f0      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x2ac>
 8006ce6:	e014      	b.n	8006d12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fd fccc 	bl	8004684 <HAL_GetTick>
 8006cec:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cf0:	f7fd fcc8 	bl	8004684 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b64      	cmp	r3, #100	; 0x64
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e30c      	b.n	800731c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d02:	4b77      	ldr	r3, [pc, #476]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x2d4>
 8006d0e:	e000      	b.n	8006d12 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d060      	beq.n	8006de0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d005      	beq.n	8006d30 <HAL_RCC_OscConfig+0x314>
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	2b0c      	cmp	r3, #12
 8006d28:	d119      	bne.n	8006d5e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d116      	bne.n	8006d5e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d30:	4b6b      	ldr	r3, [pc, #428]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_RCC_OscConfig+0x32c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e2e9      	b.n	800731c <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d48:	4b65      	ldr	r3, [pc, #404]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	061b      	lsls	r3, r3, #24
 8006d56:	4962      	ldr	r1, [pc, #392]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d5c:	e040      	b.n	8006de0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d023      	beq.n	8006dae <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d66:	4b5e      	ldr	r3, [pc, #376]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a5d      	ldr	r2, [pc, #372]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d72:	f7fd fc87 	bl	8004684 <HAL_GetTick>
 8006d76:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d78:	e008      	b.n	8006d8c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d7a:	f7fd fc83 	bl	8004684 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e2c7      	b.n	800731c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d8c:	4b54      	ldr	r3, [pc, #336]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0f0      	beq.n	8006d7a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d98:	4b51      	ldr	r3, [pc, #324]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	061b      	lsls	r3, r3, #24
 8006da6:	494e      	ldr	r1, [pc, #312]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	604b      	str	r3, [r1, #4]
 8006dac:	e018      	b.n	8006de0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dae:	4b4c      	ldr	r3, [pc, #304]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a4b      	ldr	r2, [pc, #300]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dba:	f7fd fc63 	bl	8004684 <HAL_GetTick>
 8006dbe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dc2:	f7fd fc5f 	bl	8004684 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e2a3      	b.n	800731c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006dd4:	4b42      	ldr	r3, [pc, #264]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1f0      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 8082 	beq.w	8006ef2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d05f      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8006df6:	4b3a      	ldr	r3, [pc, #232]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dfc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d037      	beq.n	8006e7c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d006      	beq.n	8006e24 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e27b      	b.n	800731c <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d01b      	beq.n	8006e66 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8006e2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e34:	4a2a      	ldr	r2, [pc, #168]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e3e:	f7fd fc21 	bl	8004684 <HAL_GetTick>
 8006e42:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e46:	f7fd fc1d 	bl	8004684 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b11      	cmp	r3, #17
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e261      	b.n	800731c <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e58:	4b21      	ldr	r3, [pc, #132]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1ef      	bne.n	8006e46 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006e66:	4b1e      	ldr	r3, [pc, #120]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e6c:	f023 0210 	bic.w	r2, r3, #16
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	491a      	ldr	r1, [pc, #104]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e7c:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e82:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006e84:	f043 0301 	orr.w	r3, r3, #1
 8006e88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e8c:	f7fd fbfa 	bl	8004684 <HAL_GetTick>
 8006e90:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e94:	f7fd fbf6 	bl	8004684 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b11      	cmp	r3, #17
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e23a      	b.n	800731c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ea6:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0ef      	beq.n	8006e94 <HAL_RCC_OscConfig+0x478>
 8006eb4:	e01d      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ebc:	4a08      	ldr	r2, [pc, #32]	; (8006ee0 <HAL_RCC_OscConfig+0x4c4>)
 8006ebe:	f023 0301 	bic.w	r3, r3, #1
 8006ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec6:	f7fd fbdd 	bl	8004684 <HAL_GetTick>
 8006eca:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ecc:	e00a      	b.n	8006ee4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ece:	f7fd fbd9 	bl	8004684 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b11      	cmp	r3, #17
 8006eda:	d903      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e21d      	b.n	800731c <HAL_RCC_OscConfig+0x900>
 8006ee0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ee4:	4b83      	ldr	r3, [pc, #524]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1ed      	bne.n	8006ece <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 80bd 	beq.w	800707a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006f06:	4b7b      	ldr	r3, [pc, #492]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10e      	bne.n	8006f30 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f12:	4b78      	ldr	r3, [pc, #480]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f16:	4a77      	ldr	r2, [pc, #476]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8006f1e:	4b75      	ldr	r3, [pc, #468]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f30:	4b71      	ldr	r3, [pc, #452]	; (80070f8 <HAL_RCC_OscConfig+0x6dc>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d118      	bne.n	8006f6e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f3c:	4b6e      	ldr	r3, [pc, #440]	; (80070f8 <HAL_RCC_OscConfig+0x6dc>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a6d      	ldr	r2, [pc, #436]	; (80070f8 <HAL_RCC_OscConfig+0x6dc>)
 8006f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f48:	f7fd fb9c 	bl	8004684 <HAL_GetTick>
 8006f4c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f50:	f7fd fb98 	bl	8004684 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e1dc      	b.n	800731c <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f62:	4b65      	ldr	r3, [pc, #404]	; (80070f8 <HAL_RCC_OscConfig+0x6dc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f0      	beq.n	8006f50 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d02c      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8006f7a:	4b5e      	ldr	r3, [pc, #376]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f80:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8c:	4959      	ldr	r1, [pc, #356]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d010      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006fa0:	4b54      	ldr	r3, [pc, #336]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa6:	4a53      	ldr	r2, [pc, #332]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006fa8:	f043 0304 	orr.w	r3, r3, #4
 8006fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006fb0:	4b50      	ldr	r3, [pc, #320]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb6:	4a4f      	ldr	r2, [pc, #316]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006fb8:	f043 0301 	orr.w	r3, r3, #1
 8006fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fc0:	e018      	b.n	8006ff4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006fc2:	4b4c      	ldr	r3, [pc, #304]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc8:	4a4a      	ldr	r2, [pc, #296]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fd2:	e00f      	b.n	8006ff4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006fd4:	4b47      	ldr	r3, [pc, #284]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fda:	4a46      	ldr	r2, [pc, #280]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006fe4:	4b43      	ldr	r3, [pc, #268]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fea:	4a42      	ldr	r2, [pc, #264]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8006fec:	f023 0304 	bic.w	r3, r3, #4
 8006ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d016      	beq.n	800702a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ffc:	f7fd fb42 	bl	8004684 <HAL_GetTick>
 8007000:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007002:	e00a      	b.n	800701a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007004:	f7fd fb3e 	bl	8004684 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007012:	4293      	cmp	r3, r2
 8007014:	d901      	bls.n	800701a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e180      	b.n	800731c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800701a:	4b36      	ldr	r3, [pc, #216]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d0ed      	beq.n	8007004 <HAL_RCC_OscConfig+0x5e8>
 8007028:	e01d      	b.n	8007066 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800702a:	f7fd fb2b 	bl	8004684 <HAL_GetTick>
 800702e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007030:	e00a      	b.n	8007048 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007032:	f7fd fb27 	bl	8004684 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007040:	4293      	cmp	r3, r2
 8007042:	d901      	bls.n	8007048 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e169      	b.n	800731c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007048:	4b2a      	ldr	r3, [pc, #168]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 800704a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1ed      	bne.n	8007032 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8007056:	4b27      	ldr	r3, [pc, #156]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8007058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705c:	4a25      	ldr	r2, [pc, #148]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 800705e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800706a:	2b01      	cmp	r3, #1
 800706c:	d105      	bne.n	800707a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800706e:	4b21      	ldr	r3, [pc, #132]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8007070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007072:	4a20      	ldr	r2, [pc, #128]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8007074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007078:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d041      	beq.n	800710a <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01c      	beq.n	80070c8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800708e:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8007090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007094:	4a17      	ldr	r2, [pc, #92]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 8007096:	f043 0301 	orr.w	r3, r3, #1
 800709a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709e:	f7fd faf1 	bl	8004684 <HAL_GetTick>
 80070a2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070a4:	e008      	b.n	80070b8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070a6:	f7fd faed 	bl	8004684 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d901      	bls.n	80070b8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e131      	b.n	800731c <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070b8:	4b0e      	ldr	r3, [pc, #56]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 80070ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0ef      	beq.n	80070a6 <HAL_RCC_OscConfig+0x68a>
 80070c6:	e020      	b.n	800710a <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070c8:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 80070ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070ce:	4a09      	ldr	r2, [pc, #36]	; (80070f4 <HAL_RCC_OscConfig+0x6d8>)
 80070d0:	f023 0301 	bic.w	r3, r3, #1
 80070d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070d8:	f7fd fad4 	bl	8004684 <HAL_GetTick>
 80070dc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070de:	e00d      	b.n	80070fc <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070e0:	f7fd fad0 	bl	8004684 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d906      	bls.n	80070fc <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e114      	b.n	800731c <HAL_RCC_OscConfig+0x900>
 80070f2:	bf00      	nop
 80070f4:	40021000 	.word	0x40021000
 80070f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070fc:	4b89      	ldr	r3, [pc, #548]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80070fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1ea      	bne.n	80070e0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 8103 	beq.w	800731a <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	2b02      	cmp	r3, #2
 800711a:	f040 80cb 	bne.w	80072b4 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800711e:	4b81      	ldr	r3, [pc, #516]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f003 0203 	and.w	r2, r3, #3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	429a      	cmp	r2, r3
 8007130:	d12c      	bne.n	800718c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713c:	3b01      	subs	r3, #1
 800713e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007140:	429a      	cmp	r2, r3
 8007142:	d123      	bne.n	800718c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007150:	429a      	cmp	r2, r3
 8007152:	d11b      	bne.n	800718c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007160:	429a      	cmp	r2, r3
 8007162:	d113      	bne.n	800718c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	085b      	lsrs	r3, r3, #1
 8007170:	3b01      	subs	r3, #1
 8007172:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007174:	429a      	cmp	r2, r3
 8007176:	d109      	bne.n	800718c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	085b      	lsrs	r3, r3, #1
 8007184:	3b01      	subs	r3, #1
 8007186:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007188:	429a      	cmp	r2, r3
 800718a:	d06d      	beq.n	8007268 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	2b0c      	cmp	r3, #12
 8007190:	d068      	beq.n	8007264 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007192:	4b64      	ldr	r3, [pc, #400]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800719e:	4b61      	ldr	r3, [pc, #388]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e0b6      	b.n	800731c <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80071ae:	4b5d      	ldr	r3, [pc, #372]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a5c      	ldr	r2, [pc, #368]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80071b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80071ba:	f7fd fa63 	bl	8004684 <HAL_GetTick>
 80071be:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071c0:	e008      	b.n	80071d4 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c2:	f7fd fa5f 	bl	8004684 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e0a3      	b.n	800731c <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071d4:	4b53      	ldr	r3, [pc, #332]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1f0      	bne.n	80071c2 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071e0:	4b50      	ldr	r3, [pc, #320]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	4b50      	ldr	r3, [pc, #320]	; (8007328 <HAL_RCC_OscConfig+0x90c>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071f0:	3a01      	subs	r2, #1
 80071f2:	0112      	lsls	r2, r2, #4
 80071f4:	4311      	orrs	r1, r2
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071fa:	0212      	lsls	r2, r2, #8
 80071fc:	4311      	orrs	r1, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007202:	0852      	lsrs	r2, r2, #1
 8007204:	3a01      	subs	r2, #1
 8007206:	0552      	lsls	r2, r2, #21
 8007208:	4311      	orrs	r1, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800720e:	0852      	lsrs	r2, r2, #1
 8007210:	3a01      	subs	r2, #1
 8007212:	0652      	lsls	r2, r2, #25
 8007214:	4311      	orrs	r1, r2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800721a:	06d2      	lsls	r2, r2, #27
 800721c:	430a      	orrs	r2, r1
 800721e:	4941      	ldr	r1, [pc, #260]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 8007220:	4313      	orrs	r3, r2
 8007222:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007224:	4b3f      	ldr	r3, [pc, #252]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a3e      	ldr	r2, [pc, #248]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 800722a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800722e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007230:	4b3c      	ldr	r3, [pc, #240]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4a3b      	ldr	r2, [pc, #236]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 8007236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800723a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800723c:	f7fd fa22 	bl	8004684 <HAL_GetTick>
 8007240:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007244:	f7fd fa1e 	bl	8004684 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e062      	b.n	800731c <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007256:	4b33      	ldr	r3, [pc, #204]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0f0      	beq.n	8007244 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007262:	e05a      	b.n	800731a <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e059      	b.n	800731c <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007268:	4b2e      	ldr	r3, [pc, #184]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d152      	bne.n	800731a <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007274:	4b2b      	ldr	r3, [pc, #172]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a2a      	ldr	r2, [pc, #168]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 800727a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800727e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007280:	4b28      	ldr	r3, [pc, #160]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	4a27      	ldr	r2, [pc, #156]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 8007286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800728a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800728c:	f7fd f9fa 	bl	8004684 <HAL_GetTick>
 8007290:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007294:	f7fd f9f6 	bl	8004684 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e03a      	b.n	800731c <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072a6:	4b1f      	ldr	r3, [pc, #124]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f0      	beq.n	8007294 <HAL_RCC_OscConfig+0x878>
 80072b2:	e032      	b.n	800731a <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	2b0c      	cmp	r3, #12
 80072b8:	d02d      	beq.n	8007316 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ba:	4b1a      	ldr	r3, [pc, #104]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a19      	ldr	r2, [pc, #100]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80072c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80072c6:	4b17      	ldr	r3, [pc, #92]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80072d2:	4b14      	ldr	r3, [pc, #80]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	4a13      	ldr	r2, [pc, #76]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80072d8:	f023 0303 	bic.w	r3, r3, #3
 80072dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80072de:	4b11      	ldr	r3, [pc, #68]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	4a10      	ldr	r2, [pc, #64]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 80072e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80072e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ee:	f7fd f9c9 	bl	8004684 <HAL_GetTick>
 80072f2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072f4:	e008      	b.n	8007308 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072f6:	f7fd f9c5 	bl	8004684 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e009      	b.n	800731c <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007308:	4b06      	ldr	r3, [pc, #24]	; (8007324 <HAL_RCC_OscConfig+0x908>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1f0      	bne.n	80072f6 <HAL_RCC_OscConfig+0x8da>
 8007314:	e001      	b.n	800731a <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3728      	adds	r7, #40	; 0x28
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40021000 	.word	0x40021000
 8007328:	019d800c 	.word	0x019d800c

0800732c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e10f      	b.n	8007564 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007344:	4b89      	ldr	r3, [pc, #548]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 030f 	and.w	r3, r3, #15
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d910      	bls.n	8007374 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007352:	4b86      	ldr	r3, [pc, #536]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f023 020f 	bic.w	r2, r3, #15
 800735a:	4984      	ldr	r1, [pc, #528]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	4313      	orrs	r3, r2
 8007360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007362:	4b82      	ldr	r3, [pc, #520]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d001      	beq.n	8007374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e0f7      	b.n	8007564 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8089 	beq.w	8007494 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b03      	cmp	r3, #3
 8007388:	d133      	bne.n	80073f2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800738a:	4b79      	ldr	r3, [pc, #484]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e0e4      	b.n	8007564 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800739a:	f000 f9d9 	bl	8007750 <RCC_GetSysClockFreqFromPLLSource>
 800739e:	4603      	mov	r3, r0
 80073a0:	4a74      	ldr	r2, [pc, #464]	; (8007574 <HAL_RCC_ClockConfig+0x248>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d955      	bls.n	8007452 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80073a6:	4b72      	ldr	r3, [pc, #456]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073b2:	4b6f      	ldr	r3, [pc, #444]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ba:	4a6d      	ldr	r2, [pc, #436]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073c2:	2380      	movs	r3, #128	; 0x80
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	e044      	b.n	8007452 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d03e      	beq.n	8007452 <HAL_RCC_ClockConfig+0x126>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d13a      	bne.n	8007452 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073dc:	4b64      	ldr	r3, [pc, #400]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073e4:	4a62      	ldr	r2, [pc, #392]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073ec:	2380      	movs	r3, #128	; 0x80
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	e02f      	b.n	8007452 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d107      	bne.n	800740a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073fa:	4b5d      	ldr	r3, [pc, #372]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d115      	bne.n	8007432 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e0ac      	b.n	8007564 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d107      	bne.n	8007422 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007412:	4b57      	ldr	r3, [pc, #348]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e0a0      	b.n	8007564 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007422:	4b53      	ldr	r3, [pc, #332]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e098      	b.n	8007564 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007432:	f000 f8a7 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 8007436:	4603      	mov	r3, r0
 8007438:	4a4e      	ldr	r2, [pc, #312]	; (8007574 <HAL_RCC_ClockConfig+0x248>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d909      	bls.n	8007452 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800743e:	4b4c      	ldr	r3, [pc, #304]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007446:	4a4a      	ldr	r2, [pc, #296]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800744e:	2380      	movs	r3, #128	; 0x80
 8007450:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007452:	4b47      	ldr	r3, [pc, #284]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f023 0203 	bic.w	r2, r3, #3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	4944      	ldr	r1, [pc, #272]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007460:	4313      	orrs	r3, r2
 8007462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007464:	f7fd f90e 	bl	8004684 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800746a:	e00a      	b.n	8007482 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800746c:	f7fd f90a 	bl	8004684 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	f241 3288 	movw	r2, #5000	; 0x1388
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e070      	b.n	8007564 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007482:	4b3b      	ldr	r3, [pc, #236]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 020c 	and.w	r2, r3, #12
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	429a      	cmp	r2, r3
 8007492:	d1eb      	bne.n	800746c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d009      	beq.n	80074b4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a0:	4b33      	ldr	r3, [pc, #204]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	4930      	ldr	r1, [pc, #192]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	608b      	str	r3, [r1, #8]
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b80      	cmp	r3, #128	; 0x80
 80074b8:	d105      	bne.n	80074c6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80074ba:	4b2d      	ldr	r3, [pc, #180]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	4a2c      	ldr	r2, [pc, #176]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80074c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074c4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074c6:	4b29      	ldr	r3, [pc, #164]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 030f 	and.w	r3, r3, #15
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d210      	bcs.n	80074f6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074d4:	4b25      	ldr	r3, [pc, #148]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f023 020f 	bic.w	r2, r3, #15
 80074dc:	4923      	ldr	r1, [pc, #140]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074e4:	4b21      	ldr	r3, [pc, #132]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d001      	beq.n	80074f6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e036      	b.n	8007564 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d008      	beq.n	8007514 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007502:	4b1b      	ldr	r3, [pc, #108]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	4918      	ldr	r1, [pc, #96]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007510:	4313      	orrs	r3, r2
 8007512:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007520:	4b13      	ldr	r3, [pc, #76]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4910      	ldr	r1, [pc, #64]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007530:	4313      	orrs	r3, r2
 8007532:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007534:	f000 f826 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 8007538:	4602      	mov	r2, r0
 800753a:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	091b      	lsrs	r3, r3, #4
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	490c      	ldr	r1, [pc, #48]	; (8007578 <HAL_RCC_ClockConfig+0x24c>)
 8007546:	5ccb      	ldrb	r3, [r1, r3]
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	fa22 f303 	lsr.w	r3, r2, r3
 8007550:	4a0a      	ldr	r2, [pc, #40]	; (800757c <HAL_RCC_ClockConfig+0x250>)
 8007552:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007554:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <HAL_RCC_ClockConfig+0x254>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4618      	mov	r0, r3
 800755a:	f7fd f843 	bl	80045e4 <HAL_InitTick>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]

  return status;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	40022000 	.word	0x40022000
 8007570:	40021000 	.word	0x40021000
 8007574:	04c4b400 	.word	0x04c4b400
 8007578:	080097b4 	.word	0x080097b4
 800757c:	20000214 	.word	0x20000214
 8007580:	20000218 	.word	0x20000218

08007584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007584:	b480      	push	{r7}
 8007586:	b089      	sub	sp, #36	; 0x24
 8007588:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	2300      	movs	r3, #0
 8007590:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007592:	4b3e      	ldr	r3, [pc, #248]	; (800768c <HAL_RCC_GetSysClockFreq+0x108>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 030c 	and.w	r3, r3, #12
 800759a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800759c:	4b3b      	ldr	r3, [pc, #236]	; (800768c <HAL_RCC_GetSysClockFreq+0x108>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0303 	and.w	r3, r3, #3
 80075a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_RCC_GetSysClockFreq+0x34>
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2b0c      	cmp	r3, #12
 80075b0:	d121      	bne.n	80075f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d11e      	bne.n	80075f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80075b8:	4b34      	ldr	r3, [pc, #208]	; (800768c <HAL_RCC_GetSysClockFreq+0x108>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0308 	and.w	r3, r3, #8
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d107      	bne.n	80075d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80075c4:	4b31      	ldr	r3, [pc, #196]	; (800768c <HAL_RCC_GetSysClockFreq+0x108>)
 80075c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	e005      	b.n	80075e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80075d4:	4b2d      	ldr	r3, [pc, #180]	; (800768c <HAL_RCC_GetSysClockFreq+0x108>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	091b      	lsrs	r3, r3, #4
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80075e0:	4a2b      	ldr	r2, [pc, #172]	; (8007690 <HAL_RCC_GetSysClockFreq+0x10c>)
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10d      	bne.n	800760c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075f4:	e00a      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d102      	bne.n	8007602 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80075fc:	4b25      	ldr	r3, [pc, #148]	; (8007694 <HAL_RCC_GetSysClockFreq+0x110>)
 80075fe:	61bb      	str	r3, [r7, #24]
 8007600:	e004      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b08      	cmp	r3, #8
 8007606:	d101      	bne.n	800760c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007608:	4b23      	ldr	r3, [pc, #140]	; (8007698 <HAL_RCC_GetSysClockFreq+0x114>)
 800760a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2b0c      	cmp	r3, #12
 8007610:	d134      	bne.n	800767c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007612:	4b1e      	ldr	r3, [pc, #120]	; (800768c <HAL_RCC_GetSysClockFreq+0x108>)
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d003      	beq.n	800762a <HAL_RCC_GetSysClockFreq+0xa6>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b03      	cmp	r3, #3
 8007626:	d003      	beq.n	8007630 <HAL_RCC_GetSysClockFreq+0xac>
 8007628:	e005      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800762a:	4b1a      	ldr	r3, [pc, #104]	; (8007694 <HAL_RCC_GetSysClockFreq+0x110>)
 800762c:	617b      	str	r3, [r7, #20]
      break;
 800762e:	e005      	b.n	800763c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007630:	4b19      	ldr	r3, [pc, #100]	; (8007698 <HAL_RCC_GetSysClockFreq+0x114>)
 8007632:	617b      	str	r3, [r7, #20]
      break;
 8007634:	e002      	b.n	800763c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	617b      	str	r3, [r7, #20]
      break;
 800763a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800763c:	4b13      	ldr	r3, [pc, #76]	; (800768c <HAL_RCC_GetSysClockFreq+0x108>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	091b      	lsrs	r3, r3, #4
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	3301      	adds	r3, #1
 8007648:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800764a:	4b10      	ldr	r3, [pc, #64]	; (800768c <HAL_RCC_GetSysClockFreq+0x108>)
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	fb03 f202 	mul.w	r2, r3, r2
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007662:	4b0a      	ldr	r3, [pc, #40]	; (800768c <HAL_RCC_GetSysClockFreq+0x108>)
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	0e5b      	lsrs	r3, r3, #25
 8007668:	f003 0303 	and.w	r3, r3, #3
 800766c:	3301      	adds	r3, #1
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	fbb2 f3f3 	udiv	r3, r2, r3
 800767a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800767c:	69bb      	ldr	r3, [r7, #24]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3724      	adds	r7, #36	; 0x24
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	40021000 	.word	0x40021000
 8007690:	080097c4 	.word	0x080097c4
 8007694:	00f42400 	.word	0x00f42400
 8007698:	007a1200 	.word	0x007a1200

0800769c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80076a8:	4b27      	ldr	r3, [pc, #156]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80076b4:	f7ff f8ee 	bl	8006894 <HAL_PWREx_GetVoltageRange>
 80076b8:	6178      	str	r0, [r7, #20]
 80076ba:	e014      	b.n	80076e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80076bc:	4b22      	ldr	r3, [pc, #136]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c0:	4a21      	ldr	r2, [pc, #132]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076c6:	6593      	str	r3, [r2, #88]	; 0x58
 80076c8:	4b1f      	ldr	r3, [pc, #124]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d0:	60fb      	str	r3, [r7, #12]
 80076d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80076d4:	f7ff f8de 	bl	8006894 <HAL_PWREx_GetVoltageRange>
 80076d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80076da:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076de:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ec:	d10b      	bne.n	8007706 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b80      	cmp	r3, #128	; 0x80
 80076f2:	d913      	bls.n	800771c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2ba0      	cmp	r3, #160	; 0xa0
 80076f8:	d902      	bls.n	8007700 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80076fa:	2302      	movs	r3, #2
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	e00d      	b.n	800771c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007700:	2301      	movs	r3, #1
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	e00a      	b.n	800771c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b7f      	cmp	r3, #127	; 0x7f
 800770a:	d902      	bls.n	8007712 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800770c:	2302      	movs	r3, #2
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	e004      	b.n	800771c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b70      	cmp	r3, #112	; 0x70
 8007716:	d101      	bne.n	800771c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007718:	2301      	movs	r3, #1
 800771a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800771c:	4b0b      	ldr	r3, [pc, #44]	; (800774c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f023 020f 	bic.w	r2, r3, #15
 8007724:	4909      	ldr	r1, [pc, #36]	; (800774c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 030f 	and.w	r3, r3, #15
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	429a      	cmp	r2, r3
 8007738:	d001      	beq.n	800773e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40021000 	.word	0x40021000
 800774c:	40022000 	.word	0x40022000

08007750 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800775a:	4b2d      	ldr	r3, [pc, #180]	; (8007810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b01      	cmp	r3, #1
 8007764:	d118      	bne.n	8007798 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007766:	4b2a      	ldr	r3, [pc, #168]	; (8007810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d107      	bne.n	8007782 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007772:	4b27      	ldr	r3, [pc, #156]	; (8007810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007778:	0a1b      	lsrs	r3, r3, #8
 800777a:	f003 030f 	and.w	r3, r3, #15
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e005      	b.n	800778e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007782:	4b23      	ldr	r3, [pc, #140]	; (8007810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	091b      	lsrs	r3, r3, #4
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800778e:	4a21      	ldr	r2, [pc, #132]	; (8007814 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007796:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007798:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f003 0303 	and.w	r3, r3, #3
 80077a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d003      	beq.n	80077b0 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d003      	beq.n	80077b6 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80077ae:	e005      	b.n	80077bc <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80077b0:	4b19      	ldr	r3, [pc, #100]	; (8007818 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80077b2:	613b      	str	r3, [r7, #16]
    break;
 80077b4:	e005      	b.n	80077c2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80077b6:	4b19      	ldr	r3, [pc, #100]	; (800781c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80077b8:	613b      	str	r3, [r7, #16]
    break;
 80077ba:	e002      	b.n	80077c2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	613b      	str	r3, [r7, #16]
    break;
 80077c0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077c2:	4b13      	ldr	r3, [pc, #76]	; (8007810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	091b      	lsrs	r3, r3, #4
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	3301      	adds	r3, #1
 80077ce:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80077d0:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	0a1b      	lsrs	r3, r3, #8
 80077d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	fb03 f202 	mul.w	r2, r3, r2
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077e8:	4b09      	ldr	r3, [pc, #36]	; (8007810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	0e5b      	lsrs	r3, r3, #25
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	3301      	adds	r3, #1
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007800:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007802:	683b      	ldr	r3, [r7, #0]
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	40021000 	.word	0x40021000
 8007814:	080097c4 	.word	0x080097c4
 8007818:	00f42400 	.word	0x00f42400
 800781c:	007a1200 	.word	0x007a1200

08007820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007828:	2300      	movs	r3, #0
 800782a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800782c:	2300      	movs	r3, #0
 800782e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007838:	2b00      	cmp	r3, #0
 800783a:	d040      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007840:	2b80      	cmp	r3, #128	; 0x80
 8007842:	d02a      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007844:	2b80      	cmp	r3, #128	; 0x80
 8007846:	d825      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007848:	2b60      	cmp	r3, #96	; 0x60
 800784a:	d026      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800784c:	2b60      	cmp	r3, #96	; 0x60
 800784e:	d821      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007850:	2b40      	cmp	r3, #64	; 0x40
 8007852:	d006      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007854:	2b40      	cmp	r3, #64	; 0x40
 8007856:	d81d      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d009      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800785c:	2b20      	cmp	r3, #32
 800785e:	d010      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007860:	e018      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007862:	4b89      	ldr	r3, [pc, #548]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	4a88      	ldr	r2, [pc, #544]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800786c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800786e:	e015      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3304      	adds	r3, #4
 8007874:	2100      	movs	r1, #0
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fb3e 	bl	8007ef8 <RCCEx_PLLSAI1_Config>
 800787c:	4603      	mov	r3, r0
 800787e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007880:	e00c      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3320      	adds	r3, #32
 8007886:	2100      	movs	r1, #0
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fc29 	bl	80080e0 <RCCEx_PLLSAI2_Config>
 800788e:	4603      	mov	r3, r0
 8007890:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007892:	e003      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	74fb      	strb	r3, [r7, #19]
      break;
 8007898:	e000      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800789a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800789c:	7cfb      	ldrb	r3, [r7, #19]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10b      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078a2:	4b79      	ldr	r3, [pc, #484]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078a8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b0:	4975      	ldr	r1, [pc, #468]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80078b8:	e001      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ba:	7cfb      	ldrb	r3, [r7, #19]
 80078bc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d047      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d2:	d030      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80078d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d8:	d82a      	bhi.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078de:	d02a      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80078e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078e4:	d824      	bhi.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ea:	d008      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xde>
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f0:	d81e      	bhi.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fa:	d010      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80078fc:	e018      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80078fe:	4b62      	ldr	r3, [pc, #392]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	4a61      	ldr	r2, [pc, #388]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007908:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800790a:	e015      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	2100      	movs	r1, #0
 8007912:	4618      	mov	r0, r3
 8007914:	f000 faf0 	bl	8007ef8 <RCCEx_PLLSAI1_Config>
 8007918:	4603      	mov	r3, r0
 800791a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800791c:	e00c      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3320      	adds	r3, #32
 8007922:	2100      	movs	r1, #0
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fbdb 	bl	80080e0 <RCCEx_PLLSAI2_Config>
 800792a:	4603      	mov	r3, r0
 800792c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800792e:	e003      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	74fb      	strb	r3, [r7, #19]
      break;
 8007934:	e000      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007938:	7cfb      	ldrb	r3, [r7, #19]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10b      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800793e:	4b52      	ldr	r3, [pc, #328]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007940:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794c:	494e      	ldr	r1, [pc, #312]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007954:	e001      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007956:	7cfb      	ldrb	r3, [r7, #19]
 8007958:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 809f 	beq.w	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007968:	2300      	movs	r3, #0
 800796a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800796c:	4b46      	ldr	r3, [pc, #280]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007978:	2301      	movs	r3, #1
 800797a:	e000      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800797c:	2300      	movs	r3, #0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00d      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007982:	4b41      	ldr	r3, [pc, #260]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	4a40      	ldr	r2, [pc, #256]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800798c:	6593      	str	r3, [r2, #88]	; 0x58
 800798e:	4b3e      	ldr	r3, [pc, #248]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800799a:	2301      	movs	r3, #1
 800799c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800799e:	4b3b      	ldr	r3, [pc, #236]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a3a      	ldr	r2, [pc, #232]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80079a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079aa:	f7fc fe6b 	bl	8004684 <HAL_GetTick>
 80079ae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079b0:	e009      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b2:	f7fc fe67 	bl	8004684 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d902      	bls.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	74fb      	strb	r3, [r7, #19]
        break;
 80079c4:	e005      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079c6:	4b31      	ldr	r3, [pc, #196]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0ef      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80079d2:	7cfb      	ldrb	r3, [r7, #19]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d15b      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079d8:	4b2b      	ldr	r3, [pc, #172]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d01f      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d019      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079f6:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a02:	4b21      	ldr	r3, [pc, #132]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a08:	4a1f      	ldr	r2, [pc, #124]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a12:	4b1d      	ldr	r3, [pc, #116]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a18:	4a1b      	ldr	r2, [pc, #108]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a22:	4a19      	ldr	r2, [pc, #100]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d016      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a34:	f7fc fe26 	bl	8004684 <HAL_GetTick>
 8007a38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a3a:	e00b      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a3c:	f7fc fe22 	bl	8004684 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d902      	bls.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	74fb      	strb	r3, [r7, #19]
            break;
 8007a52:	e006      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0ec      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007a62:	7cfb      	ldrb	r3, [r7, #19]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10c      	bne.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a68:	4b07      	ldr	r3, [pc, #28]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a78:	4903      	ldr	r1, [pc, #12]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a80:	e008      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a82:	7cfb      	ldrb	r3, [r7, #19]
 8007a84:	74bb      	strb	r3, [r7, #18]
 8007a86:	e005      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a90:	7cfb      	ldrb	r3, [r7, #19]
 8007a92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a94:	7c7b      	ldrb	r3, [r7, #17]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d105      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a9a:	4ba0      	ldr	r3, [pc, #640]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9e:	4a9f      	ldr	r2, [pc, #636]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ab2:	4b9a      	ldr	r3, [pc, #616]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab8:	f023 0203 	bic.w	r2, r3, #3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac0:	4996      	ldr	r1, [pc, #600]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ad4:	4b91      	ldr	r3, [pc, #580]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ada:	f023 020c 	bic.w	r2, r3, #12
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	498e      	ldr	r1, [pc, #568]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007af6:	4b89      	ldr	r3, [pc, #548]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007afc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b04:	4985      	ldr	r1, [pc, #532]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0308 	and.w	r3, r3, #8
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b18:	4b80      	ldr	r3, [pc, #512]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b26:	497d      	ldr	r1, [pc, #500]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b3a:	4b78      	ldr	r3, [pc, #480]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b48:	4974      	ldr	r1, [pc, #464]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b5c:	4b6f      	ldr	r3, [pc, #444]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6a:	496c      	ldr	r1, [pc, #432]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b7e:	4b67      	ldr	r3, [pc, #412]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b8c:	4963      	ldr	r1, [pc, #396]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ba0:	4b5e      	ldr	r3, [pc, #376]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bae:	495b      	ldr	r1, [pc, #364]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bc2:	4b56      	ldr	r3, [pc, #344]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd0:	4952      	ldr	r1, [pc, #328]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00a      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007be4:	4b4d      	ldr	r3, [pc, #308]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf2:	494a      	ldr	r1, [pc, #296]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00a      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c06:	4b45      	ldr	r3, [pc, #276]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c14:	4941      	ldr	r1, [pc, #260]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c28:	4b3c      	ldr	r3, [pc, #240]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c2e:	f023 0203 	bic.w	r2, r3, #3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c36:	4939      	ldr	r1, [pc, #228]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d028      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c4a:	4b34      	ldr	r3, [pc, #208]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c58:	4930      	ldr	r1, [pc, #192]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c68:	d106      	bne.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c6a:	4b2c      	ldr	r3, [pc, #176]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	4a2b      	ldr	r2, [pc, #172]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c74:	60d3      	str	r3, [r2, #12]
 8007c76:	e011      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c80:	d10c      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3304      	adds	r3, #4
 8007c86:	2101      	movs	r1, #1
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 f935 	bl	8007ef8 <RCCEx_PLLSAI1_Config>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007c92:	7cfb      	ldrb	r3, [r7, #19]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007c98:	7cfb      	ldrb	r3, [r7, #19]
 8007c9a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d04d      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb0:	d108      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007cb2:	4b1a      	ldr	r3, [pc, #104]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cb8:	4a18      	ldr	r2, [pc, #96]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cbe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007cc2:	e012      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007cc4:	4b15      	ldr	r3, [pc, #84]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cca:	4a14      	ldr	r2, [pc, #80]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cd0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007cd4:	4b11      	ldr	r3, [pc, #68]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce2:	490e      	ldr	r1, [pc, #56]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cf2:	d106      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf4:	4b09      	ldr	r3, [pc, #36]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4a08      	ldr	r2, [pc, #32]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cfe:	60d3      	str	r3, [r2, #12]
 8007d00:	e020      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d0a:	d109      	bne.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d0c:	4b03      	ldr	r3, [pc, #12]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	4a02      	ldr	r2, [pc, #8]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d16:	60d3      	str	r3, [r2, #12]
 8007d18:	e014      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007d1a:	bf00      	nop
 8007d1c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d28:	d10c      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	2101      	movs	r1, #1
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 f8e1 	bl	8007ef8 <RCCEx_PLLSAI1_Config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d3a:	7cfb      	ldrb	r3, [r7, #19]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007d40:	7cfb      	ldrb	r3, [r7, #19]
 8007d42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d028      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d50:	4b68      	ldr	r3, [pc, #416]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d5e:	4965      	ldr	r1, [pc, #404]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d6e:	d106      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d70:	4b60      	ldr	r3, [pc, #384]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	4a5f      	ldr	r2, [pc, #380]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d7a:	60d3      	str	r3, [r2, #12]
 8007d7c:	e011      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d86:	d10c      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 f8b2 	bl	8007ef8 <RCCEx_PLLSAI1_Config>
 8007d94:	4603      	mov	r3, r0
 8007d96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d98:	7cfb      	ldrb	r3, [r7, #19]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007d9e:	7cfb      	ldrb	r3, [r7, #19]
 8007da0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d01e      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dae:	4b51      	ldr	r3, [pc, #324]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dbe:	494d      	ldr	r1, [pc, #308]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dd0:	d10c      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	2102      	movs	r1, #2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 f88d 	bl	8007ef8 <RCCEx_PLLSAI1_Config>
 8007dde:	4603      	mov	r3, r0
 8007de0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007de2:	7cfb      	ldrb	r3, [r7, #19]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007de8:	7cfb      	ldrb	r3, [r7, #19]
 8007dea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007df8:	4b3e      	ldr	r3, [pc, #248]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dfe:	f023 0204 	bic.w	r2, r3, #4
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e08:	493a      	ldr	r1, [pc, #232]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007e1c:	4b35      	ldr	r3, [pc, #212]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e22:	f023 0218 	bic.w	r2, r3, #24
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e2c:	4931      	ldr	r1, [pc, #196]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d035      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007e40:	4b2c      	ldr	r3, [pc, #176]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a2b      	ldr	r2, [pc, #172]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e4c:	f7fc fc1a 	bl	8004684 <HAL_GetTick>
 8007e50:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e52:	e009      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e54:	f7fc fc16 	bl	8004684 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d902      	bls.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	74fb      	strb	r3, [r7, #19]
        break;
 8007e66:	e005      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e68:	4b22      	ldr	r3, [pc, #136]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1ef      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8007e74:	7cfb      	ldrb	r3, [r7, #19]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d113      	bne.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8007e7a:	4b1e      	ldr	r3, [pc, #120]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e8a:	491a      	ldr	r1, [pc, #104]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3320      	adds	r3, #32
 8007e96:	2102      	movs	r1, #2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 f921 	bl	80080e0 <RCCEx_PLLSAI2_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8007ea2:	7cfb      	ldrb	r3, [r7, #19]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8007ea8:	7cfb      	ldrb	r3, [r7, #19]
 8007eaa:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d017      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007eb8:	4b0e      	ldr	r3, [pc, #56]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec8:	490a      	ldr	r1, [pc, #40]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eda:	d105      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	4a04      	ldr	r2, [pc, #16]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ee6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007ee8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40021000 	.word	0x40021000

08007ef8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f06:	4b72      	ldr	r3, [pc, #456]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00e      	beq.n	8007f30 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007f12:	4b6f      	ldr	r3, [pc, #444]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	f003 0203 	and.w	r2, r3, #3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d103      	bne.n	8007f2a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
       ||
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d142      	bne.n	8007fb0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	73fb      	strb	r3, [r7, #15]
 8007f2e:	e03f      	b.n	8007fb0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d018      	beq.n	8007f6a <RCCEx_PLLSAI1_Config+0x72>
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d825      	bhi.n	8007f88 <RCCEx_PLLSAI1_Config+0x90>
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d002      	beq.n	8007f46 <RCCEx_PLLSAI1_Config+0x4e>
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d009      	beq.n	8007f58 <RCCEx_PLLSAI1_Config+0x60>
 8007f44:	e020      	b.n	8007f88 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f46:	4b62      	ldr	r3, [pc, #392]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d11d      	bne.n	8007f8e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f56:	e01a      	b.n	8007f8e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f58:	4b5d      	ldr	r3, [pc, #372]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d116      	bne.n	8007f92 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f68:	e013      	b.n	8007f92 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f6a:	4b59      	ldr	r3, [pc, #356]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10f      	bne.n	8007f96 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f76:	4b56      	ldr	r3, [pc, #344]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d109      	bne.n	8007f96 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f86:	e006      	b.n	8007f96 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8c:	e004      	b.n	8007f98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f8e:	bf00      	nop
 8007f90:	e002      	b.n	8007f98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f92:	bf00      	nop
 8007f94:	e000      	b.n	8007f98 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f96:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d108      	bne.n	8007fb0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007f9e:	4b4c      	ldr	r3, [pc, #304]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f023 0203 	bic.w	r2, r3, #3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4949      	ldr	r1, [pc, #292]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 8086 	bne.w	80080c4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007fb8:	4b45      	ldr	r3, [pc, #276]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a44      	ldr	r2, [pc, #272]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc4:	f7fc fb5e 	bl	8004684 <HAL_GetTick>
 8007fc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007fca:	e009      	b.n	8007fe0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007fcc:	f7fc fb5a 	bl	8004684 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d902      	bls.n	8007fe0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	73fb      	strb	r3, [r7, #15]
        break;
 8007fde:	e005      	b.n	8007fec <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007fe0:	4b3b      	ldr	r3, [pc, #236]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1ef      	bne.n	8007fcc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d168      	bne.n	80080c4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d113      	bne.n	8008020 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ff8:	4b35      	ldr	r3, [pc, #212]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	4b35      	ldr	r3, [pc, #212]	; (80080d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ffe:	4013      	ands	r3, r2
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6892      	ldr	r2, [r2, #8]
 8008004:	0211      	lsls	r1, r2, #8
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	68d2      	ldr	r2, [r2, #12]
 800800a:	06d2      	lsls	r2, r2, #27
 800800c:	4311      	orrs	r1, r2
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6852      	ldr	r2, [r2, #4]
 8008012:	3a01      	subs	r2, #1
 8008014:	0112      	lsls	r2, r2, #4
 8008016:	430a      	orrs	r2, r1
 8008018:	492d      	ldr	r1, [pc, #180]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800801a:	4313      	orrs	r3, r2
 800801c:	610b      	str	r3, [r1, #16]
 800801e:	e02d      	b.n	800807c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d115      	bne.n	8008052 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008026:	4b2a      	ldr	r3, [pc, #168]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008028:	691a      	ldr	r2, [r3, #16]
 800802a:	4b2b      	ldr	r3, [pc, #172]	; (80080d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800802c:	4013      	ands	r3, r2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	6892      	ldr	r2, [r2, #8]
 8008032:	0211      	lsls	r1, r2, #8
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6912      	ldr	r2, [r2, #16]
 8008038:	0852      	lsrs	r2, r2, #1
 800803a:	3a01      	subs	r2, #1
 800803c:	0552      	lsls	r2, r2, #21
 800803e:	4311      	orrs	r1, r2
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6852      	ldr	r2, [r2, #4]
 8008044:	3a01      	subs	r2, #1
 8008046:	0112      	lsls	r2, r2, #4
 8008048:	430a      	orrs	r2, r1
 800804a:	4921      	ldr	r1, [pc, #132]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800804c:	4313      	orrs	r3, r2
 800804e:	610b      	str	r3, [r1, #16]
 8008050:	e014      	b.n	800807c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008052:	4b1f      	ldr	r3, [pc, #124]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008054:	691a      	ldr	r2, [r3, #16]
 8008056:	4b21      	ldr	r3, [pc, #132]	; (80080dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008058:	4013      	ands	r3, r2
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6892      	ldr	r2, [r2, #8]
 800805e:	0211      	lsls	r1, r2, #8
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6952      	ldr	r2, [r2, #20]
 8008064:	0852      	lsrs	r2, r2, #1
 8008066:	3a01      	subs	r2, #1
 8008068:	0652      	lsls	r2, r2, #25
 800806a:	4311      	orrs	r1, r2
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6852      	ldr	r2, [r2, #4]
 8008070:	3a01      	subs	r2, #1
 8008072:	0112      	lsls	r2, r2, #4
 8008074:	430a      	orrs	r2, r1
 8008076:	4916      	ldr	r1, [pc, #88]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008078:	4313      	orrs	r3, r2
 800807a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800807c:	4b14      	ldr	r3, [pc, #80]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a13      	ldr	r2, [pc, #76]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008082:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008086:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008088:	f7fc fafc 	bl	8004684 <HAL_GetTick>
 800808c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800808e:	e009      	b.n	80080a4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008090:	f7fc faf8 	bl	8004684 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b02      	cmp	r3, #2
 800809c:	d902      	bls.n	80080a4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	73fb      	strb	r3, [r7, #15]
          break;
 80080a2:	e005      	b.n	80080b0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80080a4:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0ef      	beq.n	8008090 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80080b6:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080b8:	691a      	ldr	r2, [r3, #16]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	4904      	ldr	r1, [pc, #16]	; (80080d0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	40021000 	.word	0x40021000
 80080d4:	07ff800f 	.word	0x07ff800f
 80080d8:	ff9f800f 	.word	0xff9f800f
 80080dc:	f9ff800f 	.word	0xf9ff800f

080080e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80080ee:	4b72      	ldr	r3, [pc, #456]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00e      	beq.n	8008118 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80080fa:	4b6f      	ldr	r3, [pc, #444]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f003 0203 	and.w	r2, r3, #3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d103      	bne.n	8008112 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
       ||
 800810e:	2b00      	cmp	r3, #0
 8008110:	d142      	bne.n	8008198 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	73fb      	strb	r3, [r7, #15]
 8008116:	e03f      	b.n	8008198 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b03      	cmp	r3, #3
 800811e:	d018      	beq.n	8008152 <RCCEx_PLLSAI2_Config+0x72>
 8008120:	2b03      	cmp	r3, #3
 8008122:	d825      	bhi.n	8008170 <RCCEx_PLLSAI2_Config+0x90>
 8008124:	2b01      	cmp	r3, #1
 8008126:	d002      	beq.n	800812e <RCCEx_PLLSAI2_Config+0x4e>
 8008128:	2b02      	cmp	r3, #2
 800812a:	d009      	beq.n	8008140 <RCCEx_PLLSAI2_Config+0x60>
 800812c:	e020      	b.n	8008170 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800812e:	4b62      	ldr	r3, [pc, #392]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d11d      	bne.n	8008176 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800813e:	e01a      	b.n	8008176 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008140:	4b5d      	ldr	r3, [pc, #372]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008148:	2b00      	cmp	r3, #0
 800814a:	d116      	bne.n	800817a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008150:	e013      	b.n	800817a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008152:	4b59      	ldr	r3, [pc, #356]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10f      	bne.n	800817e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800815e:	4b56      	ldr	r3, [pc, #344]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800816e:	e006      	b.n	800817e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	73fb      	strb	r3, [r7, #15]
      break;
 8008174:	e004      	b.n	8008180 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008176:	bf00      	nop
 8008178:	e002      	b.n	8008180 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800817a:	bf00      	nop
 800817c:	e000      	b.n	8008180 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800817e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d108      	bne.n	8008198 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008186:	4b4c      	ldr	r3, [pc, #304]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f023 0203 	bic.w	r2, r3, #3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4949      	ldr	r1, [pc, #292]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008194:	4313      	orrs	r3, r2
 8008196:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	2b00      	cmp	r3, #0
 800819c:	f040 8086 	bne.w	80082ac <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80081a0:	4b45      	ldr	r3, [pc, #276]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a44      	ldr	r2, [pc, #272]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ac:	f7fc fa6a 	bl	8004684 <HAL_GetTick>
 80081b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80081b2:	e009      	b.n	80081c8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80081b4:	f7fc fa66 	bl	8004684 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d902      	bls.n	80081c8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	73fb      	strb	r3, [r7, #15]
        break;
 80081c6:	e005      	b.n	80081d4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80081c8:	4b3b      	ldr	r3, [pc, #236]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1ef      	bne.n	80081b4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d168      	bne.n	80082ac <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d113      	bne.n	8008208 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80081e0:	4b35      	ldr	r3, [pc, #212]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081e2:	695a      	ldr	r2, [r3, #20]
 80081e4:	4b35      	ldr	r3, [pc, #212]	; (80082bc <RCCEx_PLLSAI2_Config+0x1dc>)
 80081e6:	4013      	ands	r3, r2
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	6892      	ldr	r2, [r2, #8]
 80081ec:	0211      	lsls	r1, r2, #8
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	68d2      	ldr	r2, [r2, #12]
 80081f2:	06d2      	lsls	r2, r2, #27
 80081f4:	4311      	orrs	r1, r2
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	6852      	ldr	r2, [r2, #4]
 80081fa:	3a01      	subs	r2, #1
 80081fc:	0112      	lsls	r2, r2, #4
 80081fe:	430a      	orrs	r2, r1
 8008200:	492d      	ldr	r1, [pc, #180]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008202:	4313      	orrs	r3, r2
 8008204:	614b      	str	r3, [r1, #20]
 8008206:	e02d      	b.n	8008264 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d115      	bne.n	800823a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800820e:	4b2a      	ldr	r3, [pc, #168]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008210:	695a      	ldr	r2, [r3, #20]
 8008212:	4b2b      	ldr	r3, [pc, #172]	; (80082c0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008214:	4013      	ands	r3, r2
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6892      	ldr	r2, [r2, #8]
 800821a:	0211      	lsls	r1, r2, #8
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	6912      	ldr	r2, [r2, #16]
 8008220:	0852      	lsrs	r2, r2, #1
 8008222:	3a01      	subs	r2, #1
 8008224:	0552      	lsls	r2, r2, #21
 8008226:	4311      	orrs	r1, r2
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6852      	ldr	r2, [r2, #4]
 800822c:	3a01      	subs	r2, #1
 800822e:	0112      	lsls	r2, r2, #4
 8008230:	430a      	orrs	r2, r1
 8008232:	4921      	ldr	r1, [pc, #132]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008234:	4313      	orrs	r3, r2
 8008236:	614b      	str	r3, [r1, #20]
 8008238:	e014      	b.n	8008264 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800823a:	4b1f      	ldr	r3, [pc, #124]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	4b21      	ldr	r3, [pc, #132]	; (80082c4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008240:	4013      	ands	r3, r2
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	6892      	ldr	r2, [r2, #8]
 8008246:	0211      	lsls	r1, r2, #8
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6952      	ldr	r2, [r2, #20]
 800824c:	0852      	lsrs	r2, r2, #1
 800824e:	3a01      	subs	r2, #1
 8008250:	0652      	lsls	r2, r2, #25
 8008252:	4311      	orrs	r1, r2
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	6852      	ldr	r2, [r2, #4]
 8008258:	3a01      	subs	r2, #1
 800825a:	0112      	lsls	r2, r2, #4
 800825c:	430a      	orrs	r2, r1
 800825e:	4916      	ldr	r1, [pc, #88]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008260:	4313      	orrs	r3, r2
 8008262:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008264:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a13      	ldr	r2, [pc, #76]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800826a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800826e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008270:	f7fc fa08 	bl	8004684 <HAL_GetTick>
 8008274:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008276:	e009      	b.n	800828c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008278:	f7fc fa04 	bl	8004684 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	2b02      	cmp	r3, #2
 8008284:	d902      	bls.n	800828c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	73fb      	strb	r3, [r7, #15]
          break;
 800828a:	e005      	b.n	8008298 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800828c:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0ef      	beq.n	8008278 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800829e:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082a0:	695a      	ldr	r2, [r3, #20]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	4904      	ldr	r1, [pc, #16]	; (80082b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	40021000 	.word	0x40021000
 80082bc:	07ff800f 	.word	0x07ff800f
 80082c0:	ff9f800f 	.word	0xff9f800f
 80082c4:	f9ff800f 	.word	0xf9ff800f

080082c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e095      	b.n	8008406 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d108      	bne.n	80082f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082ea:	d009      	beq.n	8008300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	61da      	str	r2, [r3, #28]
 80082f2:	e005      	b.n	8008300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d106      	bne.n	8008320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7fb ff3c 	bl	8004198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008336:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008340:	d902      	bls.n	8008348 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
 8008346:	e002      	b.n	800834e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800834c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008356:	d007      	beq.n	8008368 <HAL_SPI_Init+0xa0>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008360:	d002      	beq.n	8008368 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008378:	431a      	orrs	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	431a      	orrs	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	431a      	orrs	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083a0:	431a      	orrs	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083aa:	ea42 0103 	orr.w	r1, r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	0c1b      	lsrs	r3, r3, #16
 80083c4:	f003 0204 	and.w	r2, r3, #4
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	f003 0310 	and.w	r3, r3, #16
 80083d0:	431a      	orrs	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d6:	f003 0308 	and.w	r3, r3, #8
 80083da:	431a      	orrs	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083e4:	ea42 0103 	orr.w	r1, r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <_ZdlPvj>:
 800840e:	f000 b800 	b.w	8008412 <_ZdlPv>

08008412 <_ZdlPv>:
 8008412:	f000 b85b 	b.w	80084cc <free>
	...

08008418 <__assert_func>:
 8008418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800841a:	4614      	mov	r4, r2
 800841c:	461a      	mov	r2, r3
 800841e:	4b09      	ldr	r3, [pc, #36]	; (8008444 <__assert_func+0x2c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4605      	mov	r5, r0
 8008424:	68d8      	ldr	r0, [r3, #12]
 8008426:	b14c      	cbz	r4, 800843c <__assert_func+0x24>
 8008428:	4b07      	ldr	r3, [pc, #28]	; (8008448 <__assert_func+0x30>)
 800842a:	9100      	str	r1, [sp, #0]
 800842c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008430:	4906      	ldr	r1, [pc, #24]	; (800844c <__assert_func+0x34>)
 8008432:	462b      	mov	r3, r5
 8008434:	f000 f814 	bl	8008460 <fiprintf>
 8008438:	f000 fd04 	bl	8008e44 <abort>
 800843c:	4b04      	ldr	r3, [pc, #16]	; (8008450 <__assert_func+0x38>)
 800843e:	461c      	mov	r4, r3
 8008440:	e7f3      	b.n	800842a <__assert_func+0x12>
 8008442:	bf00      	nop
 8008444:	20000220 	.word	0x20000220
 8008448:	080097f4 	.word	0x080097f4
 800844c:	08009801 	.word	0x08009801
 8008450:	0800982f 	.word	0x0800982f

08008454 <__errno>:
 8008454:	4b01      	ldr	r3, [pc, #4]	; (800845c <__errno+0x8>)
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	20000220 	.word	0x20000220

08008460 <fiprintf>:
 8008460:	b40e      	push	{r1, r2, r3}
 8008462:	b503      	push	{r0, r1, lr}
 8008464:	4601      	mov	r1, r0
 8008466:	ab03      	add	r3, sp, #12
 8008468:	4805      	ldr	r0, [pc, #20]	; (8008480 <fiprintf+0x20>)
 800846a:	f853 2b04 	ldr.w	r2, [r3], #4
 800846e:	6800      	ldr	r0, [r0, #0]
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	f000 f953 	bl	800871c <_vfiprintf_r>
 8008476:	b002      	add	sp, #8
 8008478:	f85d eb04 	ldr.w	lr, [sp], #4
 800847c:	b003      	add	sp, #12
 800847e:	4770      	bx	lr
 8008480:	20000220 	.word	0x20000220

08008484 <__libc_init_array>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	4d0d      	ldr	r5, [pc, #52]	; (80084bc <__libc_init_array+0x38>)
 8008488:	4c0d      	ldr	r4, [pc, #52]	; (80084c0 <__libc_init_array+0x3c>)
 800848a:	1b64      	subs	r4, r4, r5
 800848c:	10a4      	asrs	r4, r4, #2
 800848e:	2600      	movs	r6, #0
 8008490:	42a6      	cmp	r6, r4
 8008492:	d109      	bne.n	80084a8 <__libc_init_array+0x24>
 8008494:	4d0b      	ldr	r5, [pc, #44]	; (80084c4 <__libc_init_array+0x40>)
 8008496:	4c0c      	ldr	r4, [pc, #48]	; (80084c8 <__libc_init_array+0x44>)
 8008498:	f000 fff8 	bl	800948c <_init>
 800849c:	1b64      	subs	r4, r4, r5
 800849e:	10a4      	asrs	r4, r4, #2
 80084a0:	2600      	movs	r6, #0
 80084a2:	42a6      	cmp	r6, r4
 80084a4:	d105      	bne.n	80084b2 <__libc_init_array+0x2e>
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ac:	4798      	blx	r3
 80084ae:	3601      	adds	r6, #1
 80084b0:	e7ee      	b.n	8008490 <__libc_init_array+0xc>
 80084b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b6:	4798      	blx	r3
 80084b8:	3601      	adds	r6, #1
 80084ba:	e7f2      	b.n	80084a2 <__libc_init_array+0x1e>
 80084bc:	080098c8 	.word	0x080098c8
 80084c0:	080098c8 	.word	0x080098c8
 80084c4:	080098c8 	.word	0x080098c8
 80084c8:	080098d0 	.word	0x080098d0

080084cc <free>:
 80084cc:	4b02      	ldr	r3, [pc, #8]	; (80084d8 <free+0xc>)
 80084ce:	4601      	mov	r1, r0
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	f000 b819 	b.w	8008508 <_free_r>
 80084d6:	bf00      	nop
 80084d8:	20000220 	.word	0x20000220

080084dc <memcpy>:
 80084dc:	440a      	add	r2, r1
 80084de:	4291      	cmp	r1, r2
 80084e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084e4:	d100      	bne.n	80084e8 <memcpy+0xc>
 80084e6:	4770      	bx	lr
 80084e8:	b510      	push	{r4, lr}
 80084ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084f2:	4291      	cmp	r1, r2
 80084f4:	d1f9      	bne.n	80084ea <memcpy+0xe>
 80084f6:	bd10      	pop	{r4, pc}

080084f8 <memset>:
 80084f8:	4402      	add	r2, r0
 80084fa:	4603      	mov	r3, r0
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d100      	bne.n	8008502 <memset+0xa>
 8008500:	4770      	bx	lr
 8008502:	f803 1b01 	strb.w	r1, [r3], #1
 8008506:	e7f9      	b.n	80084fc <memset+0x4>

08008508 <_free_r>:
 8008508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800850a:	2900      	cmp	r1, #0
 800850c:	d044      	beq.n	8008598 <_free_r+0x90>
 800850e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008512:	9001      	str	r0, [sp, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	f1a1 0404 	sub.w	r4, r1, #4
 800851a:	bfb8      	it	lt
 800851c:	18e4      	addlt	r4, r4, r3
 800851e:	f000 feb9 	bl	8009294 <__malloc_lock>
 8008522:	4a1e      	ldr	r2, [pc, #120]	; (800859c <_free_r+0x94>)
 8008524:	9801      	ldr	r0, [sp, #4]
 8008526:	6813      	ldr	r3, [r2, #0]
 8008528:	b933      	cbnz	r3, 8008538 <_free_r+0x30>
 800852a:	6063      	str	r3, [r4, #4]
 800852c:	6014      	str	r4, [r2, #0]
 800852e:	b003      	add	sp, #12
 8008530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008534:	f000 beb4 	b.w	80092a0 <__malloc_unlock>
 8008538:	42a3      	cmp	r3, r4
 800853a:	d908      	bls.n	800854e <_free_r+0x46>
 800853c:	6825      	ldr	r5, [r4, #0]
 800853e:	1961      	adds	r1, r4, r5
 8008540:	428b      	cmp	r3, r1
 8008542:	bf01      	itttt	eq
 8008544:	6819      	ldreq	r1, [r3, #0]
 8008546:	685b      	ldreq	r3, [r3, #4]
 8008548:	1949      	addeq	r1, r1, r5
 800854a:	6021      	streq	r1, [r4, #0]
 800854c:	e7ed      	b.n	800852a <_free_r+0x22>
 800854e:	461a      	mov	r2, r3
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	b10b      	cbz	r3, 8008558 <_free_r+0x50>
 8008554:	42a3      	cmp	r3, r4
 8008556:	d9fa      	bls.n	800854e <_free_r+0x46>
 8008558:	6811      	ldr	r1, [r2, #0]
 800855a:	1855      	adds	r5, r2, r1
 800855c:	42a5      	cmp	r5, r4
 800855e:	d10b      	bne.n	8008578 <_free_r+0x70>
 8008560:	6824      	ldr	r4, [r4, #0]
 8008562:	4421      	add	r1, r4
 8008564:	1854      	adds	r4, r2, r1
 8008566:	42a3      	cmp	r3, r4
 8008568:	6011      	str	r1, [r2, #0]
 800856a:	d1e0      	bne.n	800852e <_free_r+0x26>
 800856c:	681c      	ldr	r4, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	6053      	str	r3, [r2, #4]
 8008572:	4421      	add	r1, r4
 8008574:	6011      	str	r1, [r2, #0]
 8008576:	e7da      	b.n	800852e <_free_r+0x26>
 8008578:	d902      	bls.n	8008580 <_free_r+0x78>
 800857a:	230c      	movs	r3, #12
 800857c:	6003      	str	r3, [r0, #0]
 800857e:	e7d6      	b.n	800852e <_free_r+0x26>
 8008580:	6825      	ldr	r5, [r4, #0]
 8008582:	1961      	adds	r1, r4, r5
 8008584:	428b      	cmp	r3, r1
 8008586:	bf04      	itt	eq
 8008588:	6819      	ldreq	r1, [r3, #0]
 800858a:	685b      	ldreq	r3, [r3, #4]
 800858c:	6063      	str	r3, [r4, #4]
 800858e:	bf04      	itt	eq
 8008590:	1949      	addeq	r1, r1, r5
 8008592:	6021      	streq	r1, [r4, #0]
 8008594:	6054      	str	r4, [r2, #4]
 8008596:	e7ca      	b.n	800852e <_free_r+0x26>
 8008598:	b003      	add	sp, #12
 800859a:	bd30      	pop	{r4, r5, pc}
 800859c:	20000788 	.word	0x20000788

080085a0 <sbrk_aligned>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	4e0e      	ldr	r6, [pc, #56]	; (80085dc <sbrk_aligned+0x3c>)
 80085a4:	460c      	mov	r4, r1
 80085a6:	6831      	ldr	r1, [r6, #0]
 80085a8:	4605      	mov	r5, r0
 80085aa:	b911      	cbnz	r1, 80085b2 <sbrk_aligned+0x12>
 80085ac:	f000 fb7a 	bl	8008ca4 <_sbrk_r>
 80085b0:	6030      	str	r0, [r6, #0]
 80085b2:	4621      	mov	r1, r4
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 fb75 	bl	8008ca4 <_sbrk_r>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d00a      	beq.n	80085d4 <sbrk_aligned+0x34>
 80085be:	1cc4      	adds	r4, r0, #3
 80085c0:	f024 0403 	bic.w	r4, r4, #3
 80085c4:	42a0      	cmp	r0, r4
 80085c6:	d007      	beq.n	80085d8 <sbrk_aligned+0x38>
 80085c8:	1a21      	subs	r1, r4, r0
 80085ca:	4628      	mov	r0, r5
 80085cc:	f000 fb6a 	bl	8008ca4 <_sbrk_r>
 80085d0:	3001      	adds	r0, #1
 80085d2:	d101      	bne.n	80085d8 <sbrk_aligned+0x38>
 80085d4:	f04f 34ff 	mov.w	r4, #4294967295
 80085d8:	4620      	mov	r0, r4
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	2000078c 	.word	0x2000078c

080085e0 <_malloc_r>:
 80085e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e4:	1ccd      	adds	r5, r1, #3
 80085e6:	f025 0503 	bic.w	r5, r5, #3
 80085ea:	3508      	adds	r5, #8
 80085ec:	2d0c      	cmp	r5, #12
 80085ee:	bf38      	it	cc
 80085f0:	250c      	movcc	r5, #12
 80085f2:	2d00      	cmp	r5, #0
 80085f4:	4607      	mov	r7, r0
 80085f6:	db01      	blt.n	80085fc <_malloc_r+0x1c>
 80085f8:	42a9      	cmp	r1, r5
 80085fa:	d905      	bls.n	8008608 <_malloc_r+0x28>
 80085fc:	230c      	movs	r3, #12
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	2600      	movs	r6, #0
 8008602:	4630      	mov	r0, r6
 8008604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008608:	4e2e      	ldr	r6, [pc, #184]	; (80086c4 <_malloc_r+0xe4>)
 800860a:	f000 fe43 	bl	8009294 <__malloc_lock>
 800860e:	6833      	ldr	r3, [r6, #0]
 8008610:	461c      	mov	r4, r3
 8008612:	bb34      	cbnz	r4, 8008662 <_malloc_r+0x82>
 8008614:	4629      	mov	r1, r5
 8008616:	4638      	mov	r0, r7
 8008618:	f7ff ffc2 	bl	80085a0 <sbrk_aligned>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	4604      	mov	r4, r0
 8008620:	d14d      	bne.n	80086be <_malloc_r+0xde>
 8008622:	6834      	ldr	r4, [r6, #0]
 8008624:	4626      	mov	r6, r4
 8008626:	2e00      	cmp	r6, #0
 8008628:	d140      	bne.n	80086ac <_malloc_r+0xcc>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	4631      	mov	r1, r6
 800862e:	4638      	mov	r0, r7
 8008630:	eb04 0803 	add.w	r8, r4, r3
 8008634:	f000 fb36 	bl	8008ca4 <_sbrk_r>
 8008638:	4580      	cmp	r8, r0
 800863a:	d13a      	bne.n	80086b2 <_malloc_r+0xd2>
 800863c:	6821      	ldr	r1, [r4, #0]
 800863e:	3503      	adds	r5, #3
 8008640:	1a6d      	subs	r5, r5, r1
 8008642:	f025 0503 	bic.w	r5, r5, #3
 8008646:	3508      	adds	r5, #8
 8008648:	2d0c      	cmp	r5, #12
 800864a:	bf38      	it	cc
 800864c:	250c      	movcc	r5, #12
 800864e:	4629      	mov	r1, r5
 8008650:	4638      	mov	r0, r7
 8008652:	f7ff ffa5 	bl	80085a0 <sbrk_aligned>
 8008656:	3001      	adds	r0, #1
 8008658:	d02b      	beq.n	80086b2 <_malloc_r+0xd2>
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	442b      	add	r3, r5
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	e00e      	b.n	8008680 <_malloc_r+0xa0>
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	1b52      	subs	r2, r2, r5
 8008666:	d41e      	bmi.n	80086a6 <_malloc_r+0xc6>
 8008668:	2a0b      	cmp	r2, #11
 800866a:	d916      	bls.n	800869a <_malloc_r+0xba>
 800866c:	1961      	adds	r1, r4, r5
 800866e:	42a3      	cmp	r3, r4
 8008670:	6025      	str	r5, [r4, #0]
 8008672:	bf18      	it	ne
 8008674:	6059      	strne	r1, [r3, #4]
 8008676:	6863      	ldr	r3, [r4, #4]
 8008678:	bf08      	it	eq
 800867a:	6031      	streq	r1, [r6, #0]
 800867c:	5162      	str	r2, [r4, r5]
 800867e:	604b      	str	r3, [r1, #4]
 8008680:	4638      	mov	r0, r7
 8008682:	f104 060b 	add.w	r6, r4, #11
 8008686:	f000 fe0b 	bl	80092a0 <__malloc_unlock>
 800868a:	f026 0607 	bic.w	r6, r6, #7
 800868e:	1d23      	adds	r3, r4, #4
 8008690:	1af2      	subs	r2, r6, r3
 8008692:	d0b6      	beq.n	8008602 <_malloc_r+0x22>
 8008694:	1b9b      	subs	r3, r3, r6
 8008696:	50a3      	str	r3, [r4, r2]
 8008698:	e7b3      	b.n	8008602 <_malloc_r+0x22>
 800869a:	6862      	ldr	r2, [r4, #4]
 800869c:	42a3      	cmp	r3, r4
 800869e:	bf0c      	ite	eq
 80086a0:	6032      	streq	r2, [r6, #0]
 80086a2:	605a      	strne	r2, [r3, #4]
 80086a4:	e7ec      	b.n	8008680 <_malloc_r+0xa0>
 80086a6:	4623      	mov	r3, r4
 80086a8:	6864      	ldr	r4, [r4, #4]
 80086aa:	e7b2      	b.n	8008612 <_malloc_r+0x32>
 80086ac:	4634      	mov	r4, r6
 80086ae:	6876      	ldr	r6, [r6, #4]
 80086b0:	e7b9      	b.n	8008626 <_malloc_r+0x46>
 80086b2:	230c      	movs	r3, #12
 80086b4:	603b      	str	r3, [r7, #0]
 80086b6:	4638      	mov	r0, r7
 80086b8:	f000 fdf2 	bl	80092a0 <__malloc_unlock>
 80086bc:	e7a1      	b.n	8008602 <_malloc_r+0x22>
 80086be:	6025      	str	r5, [r4, #0]
 80086c0:	e7de      	b.n	8008680 <_malloc_r+0xa0>
 80086c2:	bf00      	nop
 80086c4:	20000788 	.word	0x20000788

080086c8 <__sfputc_r>:
 80086c8:	6893      	ldr	r3, [r2, #8]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	b410      	push	{r4}
 80086d0:	6093      	str	r3, [r2, #8]
 80086d2:	da08      	bge.n	80086e6 <__sfputc_r+0x1e>
 80086d4:	6994      	ldr	r4, [r2, #24]
 80086d6:	42a3      	cmp	r3, r4
 80086d8:	db01      	blt.n	80086de <__sfputc_r+0x16>
 80086da:	290a      	cmp	r1, #10
 80086dc:	d103      	bne.n	80086e6 <__sfputc_r+0x1e>
 80086de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086e2:	f000 baef 	b.w	8008cc4 <__swbuf_r>
 80086e6:	6813      	ldr	r3, [r2, #0]
 80086e8:	1c58      	adds	r0, r3, #1
 80086ea:	6010      	str	r0, [r2, #0]
 80086ec:	7019      	strb	r1, [r3, #0]
 80086ee:	4608      	mov	r0, r1
 80086f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <__sfputs_r>:
 80086f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f8:	4606      	mov	r6, r0
 80086fa:	460f      	mov	r7, r1
 80086fc:	4614      	mov	r4, r2
 80086fe:	18d5      	adds	r5, r2, r3
 8008700:	42ac      	cmp	r4, r5
 8008702:	d101      	bne.n	8008708 <__sfputs_r+0x12>
 8008704:	2000      	movs	r0, #0
 8008706:	e007      	b.n	8008718 <__sfputs_r+0x22>
 8008708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870c:	463a      	mov	r2, r7
 800870e:	4630      	mov	r0, r6
 8008710:	f7ff ffda 	bl	80086c8 <__sfputc_r>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d1f3      	bne.n	8008700 <__sfputs_r+0xa>
 8008718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800871c <_vfiprintf_r>:
 800871c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	460d      	mov	r5, r1
 8008722:	b09d      	sub	sp, #116	; 0x74
 8008724:	4614      	mov	r4, r2
 8008726:	4698      	mov	r8, r3
 8008728:	4606      	mov	r6, r0
 800872a:	b118      	cbz	r0, 8008734 <_vfiprintf_r+0x18>
 800872c:	6983      	ldr	r3, [r0, #24]
 800872e:	b90b      	cbnz	r3, 8008734 <_vfiprintf_r+0x18>
 8008730:	f000 fcaa 	bl	8009088 <__sinit>
 8008734:	4b89      	ldr	r3, [pc, #548]	; (800895c <_vfiprintf_r+0x240>)
 8008736:	429d      	cmp	r5, r3
 8008738:	d11b      	bne.n	8008772 <_vfiprintf_r+0x56>
 800873a:	6875      	ldr	r5, [r6, #4]
 800873c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800873e:	07d9      	lsls	r1, r3, #31
 8008740:	d405      	bmi.n	800874e <_vfiprintf_r+0x32>
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	059a      	lsls	r2, r3, #22
 8008746:	d402      	bmi.n	800874e <_vfiprintf_r+0x32>
 8008748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800874a:	f000 fd3b 	bl	80091c4 <__retarget_lock_acquire_recursive>
 800874e:	89ab      	ldrh	r3, [r5, #12]
 8008750:	071b      	lsls	r3, r3, #28
 8008752:	d501      	bpl.n	8008758 <_vfiprintf_r+0x3c>
 8008754:	692b      	ldr	r3, [r5, #16]
 8008756:	b9eb      	cbnz	r3, 8008794 <_vfiprintf_r+0x78>
 8008758:	4629      	mov	r1, r5
 800875a:	4630      	mov	r0, r6
 800875c:	f000 fb04 	bl	8008d68 <__swsetup_r>
 8008760:	b1c0      	cbz	r0, 8008794 <_vfiprintf_r+0x78>
 8008762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008764:	07dc      	lsls	r4, r3, #31
 8008766:	d50e      	bpl.n	8008786 <_vfiprintf_r+0x6a>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295
 800876c:	b01d      	add	sp, #116	; 0x74
 800876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008772:	4b7b      	ldr	r3, [pc, #492]	; (8008960 <_vfiprintf_r+0x244>)
 8008774:	429d      	cmp	r5, r3
 8008776:	d101      	bne.n	800877c <_vfiprintf_r+0x60>
 8008778:	68b5      	ldr	r5, [r6, #8]
 800877a:	e7df      	b.n	800873c <_vfiprintf_r+0x20>
 800877c:	4b79      	ldr	r3, [pc, #484]	; (8008964 <_vfiprintf_r+0x248>)
 800877e:	429d      	cmp	r5, r3
 8008780:	bf08      	it	eq
 8008782:	68f5      	ldreq	r5, [r6, #12]
 8008784:	e7da      	b.n	800873c <_vfiprintf_r+0x20>
 8008786:	89ab      	ldrh	r3, [r5, #12]
 8008788:	0598      	lsls	r0, r3, #22
 800878a:	d4ed      	bmi.n	8008768 <_vfiprintf_r+0x4c>
 800878c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800878e:	f000 fd1a 	bl	80091c6 <__retarget_lock_release_recursive>
 8008792:	e7e9      	b.n	8008768 <_vfiprintf_r+0x4c>
 8008794:	2300      	movs	r3, #0
 8008796:	9309      	str	r3, [sp, #36]	; 0x24
 8008798:	2320      	movs	r3, #32
 800879a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800879e:	f8cd 800c 	str.w	r8, [sp, #12]
 80087a2:	2330      	movs	r3, #48	; 0x30
 80087a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008968 <_vfiprintf_r+0x24c>
 80087a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ac:	f04f 0901 	mov.w	r9, #1
 80087b0:	4623      	mov	r3, r4
 80087b2:	469a      	mov	sl, r3
 80087b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b8:	b10a      	cbz	r2, 80087be <_vfiprintf_r+0xa2>
 80087ba:	2a25      	cmp	r2, #37	; 0x25
 80087bc:	d1f9      	bne.n	80087b2 <_vfiprintf_r+0x96>
 80087be:	ebba 0b04 	subs.w	fp, sl, r4
 80087c2:	d00b      	beq.n	80087dc <_vfiprintf_r+0xc0>
 80087c4:	465b      	mov	r3, fp
 80087c6:	4622      	mov	r2, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7ff ff93 	bl	80086f6 <__sfputs_r>
 80087d0:	3001      	adds	r0, #1
 80087d2:	f000 80aa 	beq.w	800892a <_vfiprintf_r+0x20e>
 80087d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d8:	445a      	add	r2, fp
 80087da:	9209      	str	r2, [sp, #36]	; 0x24
 80087dc:	f89a 3000 	ldrb.w	r3, [sl]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80a2 	beq.w	800892a <_vfiprintf_r+0x20e>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f04f 32ff 	mov.w	r2, #4294967295
 80087ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087f0:	f10a 0a01 	add.w	sl, sl, #1
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	9307      	str	r3, [sp, #28]
 80087f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087fc:	931a      	str	r3, [sp, #104]	; 0x68
 80087fe:	4654      	mov	r4, sl
 8008800:	2205      	movs	r2, #5
 8008802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008806:	4858      	ldr	r0, [pc, #352]	; (8008968 <_vfiprintf_r+0x24c>)
 8008808:	f7f7 fcfa 	bl	8000200 <memchr>
 800880c:	9a04      	ldr	r2, [sp, #16]
 800880e:	b9d8      	cbnz	r0, 8008848 <_vfiprintf_r+0x12c>
 8008810:	06d1      	lsls	r1, r2, #27
 8008812:	bf44      	itt	mi
 8008814:	2320      	movmi	r3, #32
 8008816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800881a:	0713      	lsls	r3, r2, #28
 800881c:	bf44      	itt	mi
 800881e:	232b      	movmi	r3, #43	; 0x2b
 8008820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008824:	f89a 3000 	ldrb.w	r3, [sl]
 8008828:	2b2a      	cmp	r3, #42	; 0x2a
 800882a:	d015      	beq.n	8008858 <_vfiprintf_r+0x13c>
 800882c:	9a07      	ldr	r2, [sp, #28]
 800882e:	4654      	mov	r4, sl
 8008830:	2000      	movs	r0, #0
 8008832:	f04f 0c0a 	mov.w	ip, #10
 8008836:	4621      	mov	r1, r4
 8008838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800883c:	3b30      	subs	r3, #48	; 0x30
 800883e:	2b09      	cmp	r3, #9
 8008840:	d94e      	bls.n	80088e0 <_vfiprintf_r+0x1c4>
 8008842:	b1b0      	cbz	r0, 8008872 <_vfiprintf_r+0x156>
 8008844:	9207      	str	r2, [sp, #28]
 8008846:	e014      	b.n	8008872 <_vfiprintf_r+0x156>
 8008848:	eba0 0308 	sub.w	r3, r0, r8
 800884c:	fa09 f303 	lsl.w	r3, r9, r3
 8008850:	4313      	orrs	r3, r2
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	46a2      	mov	sl, r4
 8008856:	e7d2      	b.n	80087fe <_vfiprintf_r+0xe2>
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	1d19      	adds	r1, r3, #4
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	9103      	str	r1, [sp, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	bfbb      	ittet	lt
 8008864:	425b      	neglt	r3, r3
 8008866:	f042 0202 	orrlt.w	r2, r2, #2
 800886a:	9307      	strge	r3, [sp, #28]
 800886c:	9307      	strlt	r3, [sp, #28]
 800886e:	bfb8      	it	lt
 8008870:	9204      	strlt	r2, [sp, #16]
 8008872:	7823      	ldrb	r3, [r4, #0]
 8008874:	2b2e      	cmp	r3, #46	; 0x2e
 8008876:	d10c      	bne.n	8008892 <_vfiprintf_r+0x176>
 8008878:	7863      	ldrb	r3, [r4, #1]
 800887a:	2b2a      	cmp	r3, #42	; 0x2a
 800887c:	d135      	bne.n	80088ea <_vfiprintf_r+0x1ce>
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	1d1a      	adds	r2, r3, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	9203      	str	r2, [sp, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	bfb8      	it	lt
 800888a:	f04f 33ff 	movlt.w	r3, #4294967295
 800888e:	3402      	adds	r4, #2
 8008890:	9305      	str	r3, [sp, #20]
 8008892:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008978 <_vfiprintf_r+0x25c>
 8008896:	7821      	ldrb	r1, [r4, #0]
 8008898:	2203      	movs	r2, #3
 800889a:	4650      	mov	r0, sl
 800889c:	f7f7 fcb0 	bl	8000200 <memchr>
 80088a0:	b140      	cbz	r0, 80088b4 <_vfiprintf_r+0x198>
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	eba0 000a 	sub.w	r0, r0, sl
 80088a8:	fa03 f000 	lsl.w	r0, r3, r0
 80088ac:	9b04      	ldr	r3, [sp, #16]
 80088ae:	4303      	orrs	r3, r0
 80088b0:	3401      	adds	r4, #1
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b8:	482c      	ldr	r0, [pc, #176]	; (800896c <_vfiprintf_r+0x250>)
 80088ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088be:	2206      	movs	r2, #6
 80088c0:	f7f7 fc9e 	bl	8000200 <memchr>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d03f      	beq.n	8008948 <_vfiprintf_r+0x22c>
 80088c8:	4b29      	ldr	r3, [pc, #164]	; (8008970 <_vfiprintf_r+0x254>)
 80088ca:	bb1b      	cbnz	r3, 8008914 <_vfiprintf_r+0x1f8>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	3307      	adds	r3, #7
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	3308      	adds	r3, #8
 80088d6:	9303      	str	r3, [sp, #12]
 80088d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088da:	443b      	add	r3, r7
 80088dc:	9309      	str	r3, [sp, #36]	; 0x24
 80088de:	e767      	b.n	80087b0 <_vfiprintf_r+0x94>
 80088e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80088e4:	460c      	mov	r4, r1
 80088e6:	2001      	movs	r0, #1
 80088e8:	e7a5      	b.n	8008836 <_vfiprintf_r+0x11a>
 80088ea:	2300      	movs	r3, #0
 80088ec:	3401      	adds	r4, #1
 80088ee:	9305      	str	r3, [sp, #20]
 80088f0:	4619      	mov	r1, r3
 80088f2:	f04f 0c0a 	mov.w	ip, #10
 80088f6:	4620      	mov	r0, r4
 80088f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088fc:	3a30      	subs	r2, #48	; 0x30
 80088fe:	2a09      	cmp	r2, #9
 8008900:	d903      	bls.n	800890a <_vfiprintf_r+0x1ee>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0c5      	beq.n	8008892 <_vfiprintf_r+0x176>
 8008906:	9105      	str	r1, [sp, #20]
 8008908:	e7c3      	b.n	8008892 <_vfiprintf_r+0x176>
 800890a:	fb0c 2101 	mla	r1, ip, r1, r2
 800890e:	4604      	mov	r4, r0
 8008910:	2301      	movs	r3, #1
 8008912:	e7f0      	b.n	80088f6 <_vfiprintf_r+0x1da>
 8008914:	ab03      	add	r3, sp, #12
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	462a      	mov	r2, r5
 800891a:	4b16      	ldr	r3, [pc, #88]	; (8008974 <_vfiprintf_r+0x258>)
 800891c:	a904      	add	r1, sp, #16
 800891e:	4630      	mov	r0, r6
 8008920:	f3af 8000 	nop.w
 8008924:	4607      	mov	r7, r0
 8008926:	1c78      	adds	r0, r7, #1
 8008928:	d1d6      	bne.n	80088d8 <_vfiprintf_r+0x1bc>
 800892a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800892c:	07d9      	lsls	r1, r3, #31
 800892e:	d405      	bmi.n	800893c <_vfiprintf_r+0x220>
 8008930:	89ab      	ldrh	r3, [r5, #12]
 8008932:	059a      	lsls	r2, r3, #22
 8008934:	d402      	bmi.n	800893c <_vfiprintf_r+0x220>
 8008936:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008938:	f000 fc45 	bl	80091c6 <__retarget_lock_release_recursive>
 800893c:	89ab      	ldrh	r3, [r5, #12]
 800893e:	065b      	lsls	r3, r3, #25
 8008940:	f53f af12 	bmi.w	8008768 <_vfiprintf_r+0x4c>
 8008944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008946:	e711      	b.n	800876c <_vfiprintf_r+0x50>
 8008948:	ab03      	add	r3, sp, #12
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	462a      	mov	r2, r5
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <_vfiprintf_r+0x258>)
 8008950:	a904      	add	r1, sp, #16
 8008952:	4630      	mov	r0, r6
 8008954:	f000 f880 	bl	8008a58 <_printf_i>
 8008958:	e7e4      	b.n	8008924 <_vfiprintf_r+0x208>
 800895a:	bf00      	nop
 800895c:	08009888 	.word	0x08009888
 8008960:	080098a8 	.word	0x080098a8
 8008964:	08009868 	.word	0x08009868
 8008968:	08009834 	.word	0x08009834
 800896c:	0800983e 	.word	0x0800983e
 8008970:	00000000 	.word	0x00000000
 8008974:	080086f7 	.word	0x080086f7
 8008978:	0800983a 	.word	0x0800983a

0800897c <_printf_common>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	4616      	mov	r6, r2
 8008982:	4699      	mov	r9, r3
 8008984:	688a      	ldr	r2, [r1, #8]
 8008986:	690b      	ldr	r3, [r1, #16]
 8008988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800898c:	4293      	cmp	r3, r2
 800898e:	bfb8      	it	lt
 8008990:	4613      	movlt	r3, r2
 8008992:	6033      	str	r3, [r6, #0]
 8008994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008998:	4607      	mov	r7, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b10a      	cbz	r2, 80089a2 <_printf_common+0x26>
 800899e:	3301      	adds	r3, #1
 80089a0:	6033      	str	r3, [r6, #0]
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	0699      	lsls	r1, r3, #26
 80089a6:	bf42      	ittt	mi
 80089a8:	6833      	ldrmi	r3, [r6, #0]
 80089aa:	3302      	addmi	r3, #2
 80089ac:	6033      	strmi	r3, [r6, #0]
 80089ae:	6825      	ldr	r5, [r4, #0]
 80089b0:	f015 0506 	ands.w	r5, r5, #6
 80089b4:	d106      	bne.n	80089c4 <_printf_common+0x48>
 80089b6:	f104 0a19 	add.w	sl, r4, #25
 80089ba:	68e3      	ldr	r3, [r4, #12]
 80089bc:	6832      	ldr	r2, [r6, #0]
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	42ab      	cmp	r3, r5
 80089c2:	dc26      	bgt.n	8008a12 <_printf_common+0x96>
 80089c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089c8:	1e13      	subs	r3, r2, #0
 80089ca:	6822      	ldr	r2, [r4, #0]
 80089cc:	bf18      	it	ne
 80089ce:	2301      	movne	r3, #1
 80089d0:	0692      	lsls	r2, r2, #26
 80089d2:	d42b      	bmi.n	8008a2c <_printf_common+0xb0>
 80089d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089d8:	4649      	mov	r1, r9
 80089da:	4638      	mov	r0, r7
 80089dc:	47c0      	blx	r8
 80089de:	3001      	adds	r0, #1
 80089e0:	d01e      	beq.n	8008a20 <_printf_common+0xa4>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	68e5      	ldr	r5, [r4, #12]
 80089e6:	6832      	ldr	r2, [r6, #0]
 80089e8:	f003 0306 	and.w	r3, r3, #6
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	bf08      	it	eq
 80089f0:	1aad      	subeq	r5, r5, r2
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	6922      	ldr	r2, [r4, #16]
 80089f6:	bf0c      	ite	eq
 80089f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089fc:	2500      	movne	r5, #0
 80089fe:	4293      	cmp	r3, r2
 8008a00:	bfc4      	itt	gt
 8008a02:	1a9b      	subgt	r3, r3, r2
 8008a04:	18ed      	addgt	r5, r5, r3
 8008a06:	2600      	movs	r6, #0
 8008a08:	341a      	adds	r4, #26
 8008a0a:	42b5      	cmp	r5, r6
 8008a0c:	d11a      	bne.n	8008a44 <_printf_common+0xc8>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e008      	b.n	8008a24 <_printf_common+0xa8>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4652      	mov	r2, sl
 8008a16:	4649      	mov	r1, r9
 8008a18:	4638      	mov	r0, r7
 8008a1a:	47c0      	blx	r8
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d103      	bne.n	8008a28 <_printf_common+0xac>
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a28:	3501      	adds	r5, #1
 8008a2a:	e7c6      	b.n	80089ba <_printf_common+0x3e>
 8008a2c:	18e1      	adds	r1, r4, r3
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	2030      	movs	r0, #48	; 0x30
 8008a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a36:	4422      	add	r2, r4
 8008a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a40:	3302      	adds	r3, #2
 8008a42:	e7c7      	b.n	80089d4 <_printf_common+0x58>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4622      	mov	r2, r4
 8008a48:	4649      	mov	r1, r9
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	47c0      	blx	r8
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0e6      	beq.n	8008a20 <_printf_common+0xa4>
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7d9      	b.n	8008a0a <_printf_common+0x8e>
	...

08008a58 <_printf_i>:
 8008a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5c:	7e0f      	ldrb	r7, [r1, #24]
 8008a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a60:	2f78      	cmp	r7, #120	; 0x78
 8008a62:	4691      	mov	r9, r2
 8008a64:	4680      	mov	r8, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	469a      	mov	sl, r3
 8008a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a6e:	d807      	bhi.n	8008a80 <_printf_i+0x28>
 8008a70:	2f62      	cmp	r7, #98	; 0x62
 8008a72:	d80a      	bhi.n	8008a8a <_printf_i+0x32>
 8008a74:	2f00      	cmp	r7, #0
 8008a76:	f000 80d8 	beq.w	8008c2a <_printf_i+0x1d2>
 8008a7a:	2f58      	cmp	r7, #88	; 0x58
 8008a7c:	f000 80a3 	beq.w	8008bc6 <_printf_i+0x16e>
 8008a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a88:	e03a      	b.n	8008b00 <_printf_i+0xa8>
 8008a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a8e:	2b15      	cmp	r3, #21
 8008a90:	d8f6      	bhi.n	8008a80 <_printf_i+0x28>
 8008a92:	a101      	add	r1, pc, #4	; (adr r1, 8008a98 <_printf_i+0x40>)
 8008a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a98:	08008af1 	.word	0x08008af1
 8008a9c:	08008b05 	.word	0x08008b05
 8008aa0:	08008a81 	.word	0x08008a81
 8008aa4:	08008a81 	.word	0x08008a81
 8008aa8:	08008a81 	.word	0x08008a81
 8008aac:	08008a81 	.word	0x08008a81
 8008ab0:	08008b05 	.word	0x08008b05
 8008ab4:	08008a81 	.word	0x08008a81
 8008ab8:	08008a81 	.word	0x08008a81
 8008abc:	08008a81 	.word	0x08008a81
 8008ac0:	08008a81 	.word	0x08008a81
 8008ac4:	08008c11 	.word	0x08008c11
 8008ac8:	08008b35 	.word	0x08008b35
 8008acc:	08008bf3 	.word	0x08008bf3
 8008ad0:	08008a81 	.word	0x08008a81
 8008ad4:	08008a81 	.word	0x08008a81
 8008ad8:	08008c33 	.word	0x08008c33
 8008adc:	08008a81 	.word	0x08008a81
 8008ae0:	08008b35 	.word	0x08008b35
 8008ae4:	08008a81 	.word	0x08008a81
 8008ae8:	08008a81 	.word	0x08008a81
 8008aec:	08008bfb 	.word	0x08008bfb
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	602a      	str	r2, [r5, #0]
 8008af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b00:	2301      	movs	r3, #1
 8008b02:	e0a3      	b.n	8008c4c <_printf_i+0x1f4>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	6829      	ldr	r1, [r5, #0]
 8008b08:	0606      	lsls	r6, r0, #24
 8008b0a:	f101 0304 	add.w	r3, r1, #4
 8008b0e:	d50a      	bpl.n	8008b26 <_printf_i+0xce>
 8008b10:	680e      	ldr	r6, [r1, #0]
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	2e00      	cmp	r6, #0
 8008b16:	da03      	bge.n	8008b20 <_printf_i+0xc8>
 8008b18:	232d      	movs	r3, #45	; 0x2d
 8008b1a:	4276      	negs	r6, r6
 8008b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b20:	485e      	ldr	r0, [pc, #376]	; (8008c9c <_printf_i+0x244>)
 8008b22:	230a      	movs	r3, #10
 8008b24:	e019      	b.n	8008b5a <_printf_i+0x102>
 8008b26:	680e      	ldr	r6, [r1, #0]
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b2e:	bf18      	it	ne
 8008b30:	b236      	sxthne	r6, r6
 8008b32:	e7ef      	b.n	8008b14 <_printf_i+0xbc>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	6820      	ldr	r0, [r4, #0]
 8008b38:	1d19      	adds	r1, r3, #4
 8008b3a:	6029      	str	r1, [r5, #0]
 8008b3c:	0601      	lsls	r1, r0, #24
 8008b3e:	d501      	bpl.n	8008b44 <_printf_i+0xec>
 8008b40:	681e      	ldr	r6, [r3, #0]
 8008b42:	e002      	b.n	8008b4a <_printf_i+0xf2>
 8008b44:	0646      	lsls	r6, r0, #25
 8008b46:	d5fb      	bpl.n	8008b40 <_printf_i+0xe8>
 8008b48:	881e      	ldrh	r6, [r3, #0]
 8008b4a:	4854      	ldr	r0, [pc, #336]	; (8008c9c <_printf_i+0x244>)
 8008b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b4e:	bf0c      	ite	eq
 8008b50:	2308      	moveq	r3, #8
 8008b52:	230a      	movne	r3, #10
 8008b54:	2100      	movs	r1, #0
 8008b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b5a:	6865      	ldr	r5, [r4, #4]
 8008b5c:	60a5      	str	r5, [r4, #8]
 8008b5e:	2d00      	cmp	r5, #0
 8008b60:	bfa2      	ittt	ge
 8008b62:	6821      	ldrge	r1, [r4, #0]
 8008b64:	f021 0104 	bicge.w	r1, r1, #4
 8008b68:	6021      	strge	r1, [r4, #0]
 8008b6a:	b90e      	cbnz	r6, 8008b70 <_printf_i+0x118>
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	d04d      	beq.n	8008c0c <_printf_i+0x1b4>
 8008b70:	4615      	mov	r5, r2
 8008b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b76:	fb03 6711 	mls	r7, r3, r1, r6
 8008b7a:	5dc7      	ldrb	r7, [r0, r7]
 8008b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b80:	4637      	mov	r7, r6
 8008b82:	42bb      	cmp	r3, r7
 8008b84:	460e      	mov	r6, r1
 8008b86:	d9f4      	bls.n	8008b72 <_printf_i+0x11a>
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d10b      	bne.n	8008ba4 <_printf_i+0x14c>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	07de      	lsls	r6, r3, #31
 8008b90:	d508      	bpl.n	8008ba4 <_printf_i+0x14c>
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	6861      	ldr	r1, [r4, #4]
 8008b96:	4299      	cmp	r1, r3
 8008b98:	bfde      	ittt	le
 8008b9a:	2330      	movle	r3, #48	; 0x30
 8008b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ba4:	1b52      	subs	r2, r2, r5
 8008ba6:	6122      	str	r2, [r4, #16]
 8008ba8:	f8cd a000 	str.w	sl, [sp]
 8008bac:	464b      	mov	r3, r9
 8008bae:	aa03      	add	r2, sp, #12
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	f7ff fee2 	bl	800897c <_printf_common>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d14c      	bne.n	8008c56 <_printf_i+0x1fe>
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	b004      	add	sp, #16
 8008bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc6:	4835      	ldr	r0, [pc, #212]	; (8008c9c <_printf_i+0x244>)
 8008bc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bcc:	6829      	ldr	r1, [r5, #0]
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bd4:	6029      	str	r1, [r5, #0]
 8008bd6:	061d      	lsls	r5, r3, #24
 8008bd8:	d514      	bpl.n	8008c04 <_printf_i+0x1ac>
 8008bda:	07df      	lsls	r7, r3, #31
 8008bdc:	bf44      	itt	mi
 8008bde:	f043 0320 	orrmi.w	r3, r3, #32
 8008be2:	6023      	strmi	r3, [r4, #0]
 8008be4:	b91e      	cbnz	r6, 8008bee <_printf_i+0x196>
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	f023 0320 	bic.w	r3, r3, #32
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	2310      	movs	r3, #16
 8008bf0:	e7b0      	b.n	8008b54 <_printf_i+0xfc>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	f043 0320 	orr.w	r3, r3, #32
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	2378      	movs	r3, #120	; 0x78
 8008bfc:	4828      	ldr	r0, [pc, #160]	; (8008ca0 <_printf_i+0x248>)
 8008bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c02:	e7e3      	b.n	8008bcc <_printf_i+0x174>
 8008c04:	0659      	lsls	r1, r3, #25
 8008c06:	bf48      	it	mi
 8008c08:	b2b6      	uxthmi	r6, r6
 8008c0a:	e7e6      	b.n	8008bda <_printf_i+0x182>
 8008c0c:	4615      	mov	r5, r2
 8008c0e:	e7bb      	b.n	8008b88 <_printf_i+0x130>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	6826      	ldr	r6, [r4, #0]
 8008c14:	6961      	ldr	r1, [r4, #20]
 8008c16:	1d18      	adds	r0, r3, #4
 8008c18:	6028      	str	r0, [r5, #0]
 8008c1a:	0635      	lsls	r5, r6, #24
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	d501      	bpl.n	8008c24 <_printf_i+0x1cc>
 8008c20:	6019      	str	r1, [r3, #0]
 8008c22:	e002      	b.n	8008c2a <_printf_i+0x1d2>
 8008c24:	0670      	lsls	r0, r6, #25
 8008c26:	d5fb      	bpl.n	8008c20 <_printf_i+0x1c8>
 8008c28:	8019      	strh	r1, [r3, #0]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6123      	str	r3, [r4, #16]
 8008c2e:	4615      	mov	r5, r2
 8008c30:	e7ba      	b.n	8008ba8 <_printf_i+0x150>
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	1d1a      	adds	r2, r3, #4
 8008c36:	602a      	str	r2, [r5, #0]
 8008c38:	681d      	ldr	r5, [r3, #0]
 8008c3a:	6862      	ldr	r2, [r4, #4]
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f7f7 fade 	bl	8000200 <memchr>
 8008c44:	b108      	cbz	r0, 8008c4a <_printf_i+0x1f2>
 8008c46:	1b40      	subs	r0, r0, r5
 8008c48:	6060      	str	r0, [r4, #4]
 8008c4a:	6863      	ldr	r3, [r4, #4]
 8008c4c:	6123      	str	r3, [r4, #16]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c54:	e7a8      	b.n	8008ba8 <_printf_i+0x150>
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	47d0      	blx	sl
 8008c60:	3001      	adds	r0, #1
 8008c62:	d0ab      	beq.n	8008bbc <_printf_i+0x164>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	079b      	lsls	r3, r3, #30
 8008c68:	d413      	bmi.n	8008c92 <_printf_i+0x23a>
 8008c6a:	68e0      	ldr	r0, [r4, #12]
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	4298      	cmp	r0, r3
 8008c70:	bfb8      	it	lt
 8008c72:	4618      	movlt	r0, r3
 8008c74:	e7a4      	b.n	8008bc0 <_printf_i+0x168>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4632      	mov	r2, r6
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	47d0      	blx	sl
 8008c80:	3001      	adds	r0, #1
 8008c82:	d09b      	beq.n	8008bbc <_printf_i+0x164>
 8008c84:	3501      	adds	r5, #1
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	9903      	ldr	r1, [sp, #12]
 8008c8a:	1a5b      	subs	r3, r3, r1
 8008c8c:	42ab      	cmp	r3, r5
 8008c8e:	dcf2      	bgt.n	8008c76 <_printf_i+0x21e>
 8008c90:	e7eb      	b.n	8008c6a <_printf_i+0x212>
 8008c92:	2500      	movs	r5, #0
 8008c94:	f104 0619 	add.w	r6, r4, #25
 8008c98:	e7f5      	b.n	8008c86 <_printf_i+0x22e>
 8008c9a:	bf00      	nop
 8008c9c:	08009845 	.word	0x08009845
 8008ca0:	08009856 	.word	0x08009856

08008ca4 <_sbrk_r>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4d06      	ldr	r5, [pc, #24]	; (8008cc0 <_sbrk_r+0x1c>)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	f7fb fba6 	bl	8004400 <_sbrk>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_sbrk_r+0x1a>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_sbrk_r+0x1a>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	20000794 	.word	0x20000794

08008cc4 <__swbuf_r>:
 8008cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc6:	460e      	mov	r6, r1
 8008cc8:	4614      	mov	r4, r2
 8008cca:	4605      	mov	r5, r0
 8008ccc:	b118      	cbz	r0, 8008cd6 <__swbuf_r+0x12>
 8008cce:	6983      	ldr	r3, [r0, #24]
 8008cd0:	b90b      	cbnz	r3, 8008cd6 <__swbuf_r+0x12>
 8008cd2:	f000 f9d9 	bl	8009088 <__sinit>
 8008cd6:	4b21      	ldr	r3, [pc, #132]	; (8008d5c <__swbuf_r+0x98>)
 8008cd8:	429c      	cmp	r4, r3
 8008cda:	d12b      	bne.n	8008d34 <__swbuf_r+0x70>
 8008cdc:	686c      	ldr	r4, [r5, #4]
 8008cde:	69a3      	ldr	r3, [r4, #24]
 8008ce0:	60a3      	str	r3, [r4, #8]
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	071a      	lsls	r2, r3, #28
 8008ce6:	d52f      	bpl.n	8008d48 <__swbuf_r+0x84>
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	b36b      	cbz	r3, 8008d48 <__swbuf_r+0x84>
 8008cec:	6923      	ldr	r3, [r4, #16]
 8008cee:	6820      	ldr	r0, [r4, #0]
 8008cf0:	1ac0      	subs	r0, r0, r3
 8008cf2:	6963      	ldr	r3, [r4, #20]
 8008cf4:	b2f6      	uxtb	r6, r6
 8008cf6:	4283      	cmp	r3, r0
 8008cf8:	4637      	mov	r7, r6
 8008cfa:	dc04      	bgt.n	8008d06 <__swbuf_r+0x42>
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 f92e 	bl	8008f60 <_fflush_r>
 8008d04:	bb30      	cbnz	r0, 8008d54 <__swbuf_r+0x90>
 8008d06:	68a3      	ldr	r3, [r4, #8]
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	60a3      	str	r3, [r4, #8]
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	1c5a      	adds	r2, r3, #1
 8008d10:	6022      	str	r2, [r4, #0]
 8008d12:	701e      	strb	r6, [r3, #0]
 8008d14:	6963      	ldr	r3, [r4, #20]
 8008d16:	3001      	adds	r0, #1
 8008d18:	4283      	cmp	r3, r0
 8008d1a:	d004      	beq.n	8008d26 <__swbuf_r+0x62>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	07db      	lsls	r3, r3, #31
 8008d20:	d506      	bpl.n	8008d30 <__swbuf_r+0x6c>
 8008d22:	2e0a      	cmp	r6, #10
 8008d24:	d104      	bne.n	8008d30 <__swbuf_r+0x6c>
 8008d26:	4621      	mov	r1, r4
 8008d28:	4628      	mov	r0, r5
 8008d2a:	f000 f919 	bl	8008f60 <_fflush_r>
 8008d2e:	b988      	cbnz	r0, 8008d54 <__swbuf_r+0x90>
 8008d30:	4638      	mov	r0, r7
 8008d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d34:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <__swbuf_r+0x9c>)
 8008d36:	429c      	cmp	r4, r3
 8008d38:	d101      	bne.n	8008d3e <__swbuf_r+0x7a>
 8008d3a:	68ac      	ldr	r4, [r5, #8]
 8008d3c:	e7cf      	b.n	8008cde <__swbuf_r+0x1a>
 8008d3e:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <__swbuf_r+0xa0>)
 8008d40:	429c      	cmp	r4, r3
 8008d42:	bf08      	it	eq
 8008d44:	68ec      	ldreq	r4, [r5, #12]
 8008d46:	e7ca      	b.n	8008cde <__swbuf_r+0x1a>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f000 f80c 	bl	8008d68 <__swsetup_r>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d0cb      	beq.n	8008cec <__swbuf_r+0x28>
 8008d54:	f04f 37ff 	mov.w	r7, #4294967295
 8008d58:	e7ea      	b.n	8008d30 <__swbuf_r+0x6c>
 8008d5a:	bf00      	nop
 8008d5c:	08009888 	.word	0x08009888
 8008d60:	080098a8 	.word	0x080098a8
 8008d64:	08009868 	.word	0x08009868

08008d68 <__swsetup_r>:
 8008d68:	4b32      	ldr	r3, [pc, #200]	; (8008e34 <__swsetup_r+0xcc>)
 8008d6a:	b570      	push	{r4, r5, r6, lr}
 8008d6c:	681d      	ldr	r5, [r3, #0]
 8008d6e:	4606      	mov	r6, r0
 8008d70:	460c      	mov	r4, r1
 8008d72:	b125      	cbz	r5, 8008d7e <__swsetup_r+0x16>
 8008d74:	69ab      	ldr	r3, [r5, #24]
 8008d76:	b913      	cbnz	r3, 8008d7e <__swsetup_r+0x16>
 8008d78:	4628      	mov	r0, r5
 8008d7a:	f000 f985 	bl	8009088 <__sinit>
 8008d7e:	4b2e      	ldr	r3, [pc, #184]	; (8008e38 <__swsetup_r+0xd0>)
 8008d80:	429c      	cmp	r4, r3
 8008d82:	d10f      	bne.n	8008da4 <__swsetup_r+0x3c>
 8008d84:	686c      	ldr	r4, [r5, #4]
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d8c:	0719      	lsls	r1, r3, #28
 8008d8e:	d42c      	bmi.n	8008dea <__swsetup_r+0x82>
 8008d90:	06dd      	lsls	r5, r3, #27
 8008d92:	d411      	bmi.n	8008db8 <__swsetup_r+0x50>
 8008d94:	2309      	movs	r3, #9
 8008d96:	6033      	str	r3, [r6, #0]
 8008d98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d9c:	81a3      	strh	r3, [r4, #12]
 8008d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008da2:	e03e      	b.n	8008e22 <__swsetup_r+0xba>
 8008da4:	4b25      	ldr	r3, [pc, #148]	; (8008e3c <__swsetup_r+0xd4>)
 8008da6:	429c      	cmp	r4, r3
 8008da8:	d101      	bne.n	8008dae <__swsetup_r+0x46>
 8008daa:	68ac      	ldr	r4, [r5, #8]
 8008dac:	e7eb      	b.n	8008d86 <__swsetup_r+0x1e>
 8008dae:	4b24      	ldr	r3, [pc, #144]	; (8008e40 <__swsetup_r+0xd8>)
 8008db0:	429c      	cmp	r4, r3
 8008db2:	bf08      	it	eq
 8008db4:	68ec      	ldreq	r4, [r5, #12]
 8008db6:	e7e6      	b.n	8008d86 <__swsetup_r+0x1e>
 8008db8:	0758      	lsls	r0, r3, #29
 8008dba:	d512      	bpl.n	8008de2 <__swsetup_r+0x7a>
 8008dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dbe:	b141      	cbz	r1, 8008dd2 <__swsetup_r+0x6a>
 8008dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dc4:	4299      	cmp	r1, r3
 8008dc6:	d002      	beq.n	8008dce <__swsetup_r+0x66>
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f7ff fb9d 	bl	8008508 <_free_r>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	6363      	str	r3, [r4, #52]	; 0x34
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6063      	str	r3, [r4, #4]
 8008dde:	6923      	ldr	r3, [r4, #16]
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	f043 0308 	orr.w	r3, r3, #8
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	b94b      	cbnz	r3, 8008e02 <__swsetup_r+0x9a>
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008df8:	d003      	beq.n	8008e02 <__swsetup_r+0x9a>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f000 fa09 	bl	8009214 <__smakebuf_r>
 8008e02:	89a0      	ldrh	r0, [r4, #12]
 8008e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e08:	f010 0301 	ands.w	r3, r0, #1
 8008e0c:	d00a      	beq.n	8008e24 <__swsetup_r+0xbc>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60a3      	str	r3, [r4, #8]
 8008e12:	6963      	ldr	r3, [r4, #20]
 8008e14:	425b      	negs	r3, r3
 8008e16:	61a3      	str	r3, [r4, #24]
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	b943      	cbnz	r3, 8008e2e <__swsetup_r+0xc6>
 8008e1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e20:	d1ba      	bne.n	8008d98 <__swsetup_r+0x30>
 8008e22:	bd70      	pop	{r4, r5, r6, pc}
 8008e24:	0781      	lsls	r1, r0, #30
 8008e26:	bf58      	it	pl
 8008e28:	6963      	ldrpl	r3, [r4, #20]
 8008e2a:	60a3      	str	r3, [r4, #8]
 8008e2c:	e7f4      	b.n	8008e18 <__swsetup_r+0xb0>
 8008e2e:	2000      	movs	r0, #0
 8008e30:	e7f7      	b.n	8008e22 <__swsetup_r+0xba>
 8008e32:	bf00      	nop
 8008e34:	20000220 	.word	0x20000220
 8008e38:	08009888 	.word	0x08009888
 8008e3c:	080098a8 	.word	0x080098a8
 8008e40:	08009868 	.word	0x08009868

08008e44 <abort>:
 8008e44:	b508      	push	{r3, lr}
 8008e46:	2006      	movs	r0, #6
 8008e48:	f000 fa58 	bl	80092fc <raise>
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	f7fb fa5f 	bl	8004310 <_exit>
	...

08008e54 <__sflush_r>:
 8008e54:	898a      	ldrh	r2, [r1, #12]
 8008e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	0710      	lsls	r0, r2, #28
 8008e5e:	460c      	mov	r4, r1
 8008e60:	d458      	bmi.n	8008f14 <__sflush_r+0xc0>
 8008e62:	684b      	ldr	r3, [r1, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dc05      	bgt.n	8008e74 <__sflush_r+0x20>
 8008e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	dc02      	bgt.n	8008e74 <__sflush_r+0x20>
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e76:	2e00      	cmp	r6, #0
 8008e78:	d0f9      	beq.n	8008e6e <__sflush_r+0x1a>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e80:	682f      	ldr	r7, [r5, #0]
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	d032      	beq.n	8008eec <__sflush_r+0x98>
 8008e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	075a      	lsls	r2, r3, #29
 8008e8c:	d505      	bpl.n	8008e9a <__sflush_r+0x46>
 8008e8e:	6863      	ldr	r3, [r4, #4]
 8008e90:	1ac0      	subs	r0, r0, r3
 8008e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e94:	b10b      	cbz	r3, 8008e9a <__sflush_r+0x46>
 8008e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e98:	1ac0      	subs	r0, r0, r3
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ea0:	6a21      	ldr	r1, [r4, #32]
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b0      	blx	r6
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	d106      	bne.n	8008eba <__sflush_r+0x66>
 8008eac:	6829      	ldr	r1, [r5, #0]
 8008eae:	291d      	cmp	r1, #29
 8008eb0:	d82c      	bhi.n	8008f0c <__sflush_r+0xb8>
 8008eb2:	4a2a      	ldr	r2, [pc, #168]	; (8008f5c <__sflush_r+0x108>)
 8008eb4:	40ca      	lsrs	r2, r1
 8008eb6:	07d6      	lsls	r6, r2, #31
 8008eb8:	d528      	bpl.n	8008f0c <__sflush_r+0xb8>
 8008eba:	2200      	movs	r2, #0
 8008ebc:	6062      	str	r2, [r4, #4]
 8008ebe:	04d9      	lsls	r1, r3, #19
 8008ec0:	6922      	ldr	r2, [r4, #16]
 8008ec2:	6022      	str	r2, [r4, #0]
 8008ec4:	d504      	bpl.n	8008ed0 <__sflush_r+0x7c>
 8008ec6:	1c42      	adds	r2, r0, #1
 8008ec8:	d101      	bne.n	8008ece <__sflush_r+0x7a>
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	b903      	cbnz	r3, 8008ed0 <__sflush_r+0x7c>
 8008ece:	6560      	str	r0, [r4, #84]	; 0x54
 8008ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ed2:	602f      	str	r7, [r5, #0]
 8008ed4:	2900      	cmp	r1, #0
 8008ed6:	d0ca      	beq.n	8008e6e <__sflush_r+0x1a>
 8008ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008edc:	4299      	cmp	r1, r3
 8008ede:	d002      	beq.n	8008ee6 <__sflush_r+0x92>
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f7ff fb11 	bl	8008508 <_free_r>
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8008eea:	e7c1      	b.n	8008e70 <__sflush_r+0x1c>
 8008eec:	6a21      	ldr	r1, [r4, #32]
 8008eee:	2301      	movs	r3, #1
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b0      	blx	r6
 8008ef4:	1c41      	adds	r1, r0, #1
 8008ef6:	d1c7      	bne.n	8008e88 <__sflush_r+0x34>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0c4      	beq.n	8008e88 <__sflush_r+0x34>
 8008efe:	2b1d      	cmp	r3, #29
 8008f00:	d001      	beq.n	8008f06 <__sflush_r+0xb2>
 8008f02:	2b16      	cmp	r3, #22
 8008f04:	d101      	bne.n	8008f0a <__sflush_r+0xb6>
 8008f06:	602f      	str	r7, [r5, #0]
 8008f08:	e7b1      	b.n	8008e6e <__sflush_r+0x1a>
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	e7ad      	b.n	8008e70 <__sflush_r+0x1c>
 8008f14:	690f      	ldr	r7, [r1, #16]
 8008f16:	2f00      	cmp	r7, #0
 8008f18:	d0a9      	beq.n	8008e6e <__sflush_r+0x1a>
 8008f1a:	0793      	lsls	r3, r2, #30
 8008f1c:	680e      	ldr	r6, [r1, #0]
 8008f1e:	bf08      	it	eq
 8008f20:	694b      	ldreq	r3, [r1, #20]
 8008f22:	600f      	str	r7, [r1, #0]
 8008f24:	bf18      	it	ne
 8008f26:	2300      	movne	r3, #0
 8008f28:	eba6 0807 	sub.w	r8, r6, r7
 8008f2c:	608b      	str	r3, [r1, #8]
 8008f2e:	f1b8 0f00 	cmp.w	r8, #0
 8008f32:	dd9c      	ble.n	8008e6e <__sflush_r+0x1a>
 8008f34:	6a21      	ldr	r1, [r4, #32]
 8008f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f38:	4643      	mov	r3, r8
 8008f3a:	463a      	mov	r2, r7
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	47b0      	blx	r6
 8008f40:	2800      	cmp	r0, #0
 8008f42:	dc06      	bgt.n	8008f52 <__sflush_r+0xfe>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4a:	81a3      	strh	r3, [r4, #12]
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f50:	e78e      	b.n	8008e70 <__sflush_r+0x1c>
 8008f52:	4407      	add	r7, r0
 8008f54:	eba8 0800 	sub.w	r8, r8, r0
 8008f58:	e7e9      	b.n	8008f2e <__sflush_r+0xda>
 8008f5a:	bf00      	nop
 8008f5c:	20400001 	.word	0x20400001

08008f60 <_fflush_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	4605      	mov	r5, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	b913      	cbnz	r3, 8008f70 <_fflush_r+0x10>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	b118      	cbz	r0, 8008f7a <_fflush_r+0x1a>
 8008f72:	6983      	ldr	r3, [r0, #24]
 8008f74:	b90b      	cbnz	r3, 8008f7a <_fflush_r+0x1a>
 8008f76:	f000 f887 	bl	8009088 <__sinit>
 8008f7a:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <_fflush_r+0x6c>)
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	d11b      	bne.n	8008fb8 <_fflush_r+0x58>
 8008f80:	686c      	ldr	r4, [r5, #4]
 8008f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0ef      	beq.n	8008f6a <_fflush_r+0xa>
 8008f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f8c:	07d0      	lsls	r0, r2, #31
 8008f8e:	d404      	bmi.n	8008f9a <_fflush_r+0x3a>
 8008f90:	0599      	lsls	r1, r3, #22
 8008f92:	d402      	bmi.n	8008f9a <_fflush_r+0x3a>
 8008f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f96:	f000 f915 	bl	80091c4 <__retarget_lock_acquire_recursive>
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	f7ff ff59 	bl	8008e54 <__sflush_r>
 8008fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fa4:	07da      	lsls	r2, r3, #31
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	d4e0      	bmi.n	8008f6c <_fflush_r+0xc>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	059b      	lsls	r3, r3, #22
 8008fae:	d4dd      	bmi.n	8008f6c <_fflush_r+0xc>
 8008fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fb2:	f000 f908 	bl	80091c6 <__retarget_lock_release_recursive>
 8008fb6:	e7d9      	b.n	8008f6c <_fflush_r+0xc>
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <_fflush_r+0x70>)
 8008fba:	429c      	cmp	r4, r3
 8008fbc:	d101      	bne.n	8008fc2 <_fflush_r+0x62>
 8008fbe:	68ac      	ldr	r4, [r5, #8]
 8008fc0:	e7df      	b.n	8008f82 <_fflush_r+0x22>
 8008fc2:	4b04      	ldr	r3, [pc, #16]	; (8008fd4 <_fflush_r+0x74>)
 8008fc4:	429c      	cmp	r4, r3
 8008fc6:	bf08      	it	eq
 8008fc8:	68ec      	ldreq	r4, [r5, #12]
 8008fca:	e7da      	b.n	8008f82 <_fflush_r+0x22>
 8008fcc:	08009888 	.word	0x08009888
 8008fd0:	080098a8 	.word	0x080098a8
 8008fd4:	08009868 	.word	0x08009868

08008fd8 <std>:
 8008fd8:	2300      	movs	r3, #0
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	4604      	mov	r4, r0
 8008fde:	e9c0 3300 	strd	r3, r3, [r0]
 8008fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fe6:	6083      	str	r3, [r0, #8]
 8008fe8:	8181      	strh	r1, [r0, #12]
 8008fea:	6643      	str	r3, [r0, #100]	; 0x64
 8008fec:	81c2      	strh	r2, [r0, #14]
 8008fee:	6183      	str	r3, [r0, #24]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	2208      	movs	r2, #8
 8008ff4:	305c      	adds	r0, #92	; 0x5c
 8008ff6:	f7ff fa7f 	bl	80084f8 <memset>
 8008ffa:	4b05      	ldr	r3, [pc, #20]	; (8009010 <std+0x38>)
 8008ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8008ffe:	4b05      	ldr	r3, [pc, #20]	; (8009014 <std+0x3c>)
 8009000:	62a3      	str	r3, [r4, #40]	; 0x28
 8009002:	4b05      	ldr	r3, [pc, #20]	; (8009018 <std+0x40>)
 8009004:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009006:	4b05      	ldr	r3, [pc, #20]	; (800901c <std+0x44>)
 8009008:	6224      	str	r4, [r4, #32]
 800900a:	6323      	str	r3, [r4, #48]	; 0x30
 800900c:	bd10      	pop	{r4, pc}
 800900e:	bf00      	nop
 8009010:	08009335 	.word	0x08009335
 8009014:	08009357 	.word	0x08009357
 8009018:	0800938f 	.word	0x0800938f
 800901c:	080093b3 	.word	0x080093b3

08009020 <_cleanup_r>:
 8009020:	4901      	ldr	r1, [pc, #4]	; (8009028 <_cleanup_r+0x8>)
 8009022:	f000 b8af 	b.w	8009184 <_fwalk_reent>
 8009026:	bf00      	nop
 8009028:	08008f61 	.word	0x08008f61

0800902c <__sfmoreglue>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	2268      	movs	r2, #104	; 0x68
 8009030:	1e4d      	subs	r5, r1, #1
 8009032:	4355      	muls	r5, r2
 8009034:	460e      	mov	r6, r1
 8009036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800903a:	f7ff fad1 	bl	80085e0 <_malloc_r>
 800903e:	4604      	mov	r4, r0
 8009040:	b140      	cbz	r0, 8009054 <__sfmoreglue+0x28>
 8009042:	2100      	movs	r1, #0
 8009044:	e9c0 1600 	strd	r1, r6, [r0]
 8009048:	300c      	adds	r0, #12
 800904a:	60a0      	str	r0, [r4, #8]
 800904c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009050:	f7ff fa52 	bl	80084f8 <memset>
 8009054:	4620      	mov	r0, r4
 8009056:	bd70      	pop	{r4, r5, r6, pc}

08009058 <__sfp_lock_acquire>:
 8009058:	4801      	ldr	r0, [pc, #4]	; (8009060 <__sfp_lock_acquire+0x8>)
 800905a:	f000 b8b3 	b.w	80091c4 <__retarget_lock_acquire_recursive>
 800905e:	bf00      	nop
 8009060:	20000791 	.word	0x20000791

08009064 <__sfp_lock_release>:
 8009064:	4801      	ldr	r0, [pc, #4]	; (800906c <__sfp_lock_release+0x8>)
 8009066:	f000 b8ae 	b.w	80091c6 <__retarget_lock_release_recursive>
 800906a:	bf00      	nop
 800906c:	20000791 	.word	0x20000791

08009070 <__sinit_lock_acquire>:
 8009070:	4801      	ldr	r0, [pc, #4]	; (8009078 <__sinit_lock_acquire+0x8>)
 8009072:	f000 b8a7 	b.w	80091c4 <__retarget_lock_acquire_recursive>
 8009076:	bf00      	nop
 8009078:	20000792 	.word	0x20000792

0800907c <__sinit_lock_release>:
 800907c:	4801      	ldr	r0, [pc, #4]	; (8009084 <__sinit_lock_release+0x8>)
 800907e:	f000 b8a2 	b.w	80091c6 <__retarget_lock_release_recursive>
 8009082:	bf00      	nop
 8009084:	20000792 	.word	0x20000792

08009088 <__sinit>:
 8009088:	b510      	push	{r4, lr}
 800908a:	4604      	mov	r4, r0
 800908c:	f7ff fff0 	bl	8009070 <__sinit_lock_acquire>
 8009090:	69a3      	ldr	r3, [r4, #24]
 8009092:	b11b      	cbz	r3, 800909c <__sinit+0x14>
 8009094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009098:	f7ff bff0 	b.w	800907c <__sinit_lock_release>
 800909c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090a0:	6523      	str	r3, [r4, #80]	; 0x50
 80090a2:	4b13      	ldr	r3, [pc, #76]	; (80090f0 <__sinit+0x68>)
 80090a4:	4a13      	ldr	r2, [pc, #76]	; (80090f4 <__sinit+0x6c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80090aa:	42a3      	cmp	r3, r4
 80090ac:	bf04      	itt	eq
 80090ae:	2301      	moveq	r3, #1
 80090b0:	61a3      	streq	r3, [r4, #24]
 80090b2:	4620      	mov	r0, r4
 80090b4:	f000 f820 	bl	80090f8 <__sfp>
 80090b8:	6060      	str	r0, [r4, #4]
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 f81c 	bl	80090f8 <__sfp>
 80090c0:	60a0      	str	r0, [r4, #8]
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 f818 	bl	80090f8 <__sfp>
 80090c8:	2200      	movs	r2, #0
 80090ca:	60e0      	str	r0, [r4, #12]
 80090cc:	2104      	movs	r1, #4
 80090ce:	6860      	ldr	r0, [r4, #4]
 80090d0:	f7ff ff82 	bl	8008fd8 <std>
 80090d4:	68a0      	ldr	r0, [r4, #8]
 80090d6:	2201      	movs	r2, #1
 80090d8:	2109      	movs	r1, #9
 80090da:	f7ff ff7d 	bl	8008fd8 <std>
 80090de:	68e0      	ldr	r0, [r4, #12]
 80090e0:	2202      	movs	r2, #2
 80090e2:	2112      	movs	r1, #18
 80090e4:	f7ff ff78 	bl	8008fd8 <std>
 80090e8:	2301      	movs	r3, #1
 80090ea:	61a3      	str	r3, [r4, #24]
 80090ec:	e7d2      	b.n	8009094 <__sinit+0xc>
 80090ee:	bf00      	nop
 80090f0:	08009830 	.word	0x08009830
 80090f4:	08009021 	.word	0x08009021

080090f8 <__sfp>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	4607      	mov	r7, r0
 80090fc:	f7ff ffac 	bl	8009058 <__sfp_lock_acquire>
 8009100:	4b1e      	ldr	r3, [pc, #120]	; (800917c <__sfp+0x84>)
 8009102:	681e      	ldr	r6, [r3, #0]
 8009104:	69b3      	ldr	r3, [r6, #24]
 8009106:	b913      	cbnz	r3, 800910e <__sfp+0x16>
 8009108:	4630      	mov	r0, r6
 800910a:	f7ff ffbd 	bl	8009088 <__sinit>
 800910e:	3648      	adds	r6, #72	; 0x48
 8009110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009114:	3b01      	subs	r3, #1
 8009116:	d503      	bpl.n	8009120 <__sfp+0x28>
 8009118:	6833      	ldr	r3, [r6, #0]
 800911a:	b30b      	cbz	r3, 8009160 <__sfp+0x68>
 800911c:	6836      	ldr	r6, [r6, #0]
 800911e:	e7f7      	b.n	8009110 <__sfp+0x18>
 8009120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009124:	b9d5      	cbnz	r5, 800915c <__sfp+0x64>
 8009126:	4b16      	ldr	r3, [pc, #88]	; (8009180 <__sfp+0x88>)
 8009128:	60e3      	str	r3, [r4, #12]
 800912a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800912e:	6665      	str	r5, [r4, #100]	; 0x64
 8009130:	f000 f847 	bl	80091c2 <__retarget_lock_init_recursive>
 8009134:	f7ff ff96 	bl	8009064 <__sfp_lock_release>
 8009138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800913c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009140:	6025      	str	r5, [r4, #0]
 8009142:	61a5      	str	r5, [r4, #24]
 8009144:	2208      	movs	r2, #8
 8009146:	4629      	mov	r1, r5
 8009148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800914c:	f7ff f9d4 	bl	80084f8 <memset>
 8009150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009158:	4620      	mov	r0, r4
 800915a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800915c:	3468      	adds	r4, #104	; 0x68
 800915e:	e7d9      	b.n	8009114 <__sfp+0x1c>
 8009160:	2104      	movs	r1, #4
 8009162:	4638      	mov	r0, r7
 8009164:	f7ff ff62 	bl	800902c <__sfmoreglue>
 8009168:	4604      	mov	r4, r0
 800916a:	6030      	str	r0, [r6, #0]
 800916c:	2800      	cmp	r0, #0
 800916e:	d1d5      	bne.n	800911c <__sfp+0x24>
 8009170:	f7ff ff78 	bl	8009064 <__sfp_lock_release>
 8009174:	230c      	movs	r3, #12
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	e7ee      	b.n	8009158 <__sfp+0x60>
 800917a:	bf00      	nop
 800917c:	08009830 	.word	0x08009830
 8009180:	ffff0001 	.word	0xffff0001

08009184 <_fwalk_reent>:
 8009184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009188:	4606      	mov	r6, r0
 800918a:	4688      	mov	r8, r1
 800918c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009190:	2700      	movs	r7, #0
 8009192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009196:	f1b9 0901 	subs.w	r9, r9, #1
 800919a:	d505      	bpl.n	80091a8 <_fwalk_reent+0x24>
 800919c:	6824      	ldr	r4, [r4, #0]
 800919e:	2c00      	cmp	r4, #0
 80091a0:	d1f7      	bne.n	8009192 <_fwalk_reent+0xe>
 80091a2:	4638      	mov	r0, r7
 80091a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091a8:	89ab      	ldrh	r3, [r5, #12]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d907      	bls.n	80091be <_fwalk_reent+0x3a>
 80091ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091b2:	3301      	adds	r3, #1
 80091b4:	d003      	beq.n	80091be <_fwalk_reent+0x3a>
 80091b6:	4629      	mov	r1, r5
 80091b8:	4630      	mov	r0, r6
 80091ba:	47c0      	blx	r8
 80091bc:	4307      	orrs	r7, r0
 80091be:	3568      	adds	r5, #104	; 0x68
 80091c0:	e7e9      	b.n	8009196 <_fwalk_reent+0x12>

080091c2 <__retarget_lock_init_recursive>:
 80091c2:	4770      	bx	lr

080091c4 <__retarget_lock_acquire_recursive>:
 80091c4:	4770      	bx	lr

080091c6 <__retarget_lock_release_recursive>:
 80091c6:	4770      	bx	lr

080091c8 <__swhatbuf_r>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	460e      	mov	r6, r1
 80091cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d0:	2900      	cmp	r1, #0
 80091d2:	b096      	sub	sp, #88	; 0x58
 80091d4:	4614      	mov	r4, r2
 80091d6:	461d      	mov	r5, r3
 80091d8:	da08      	bge.n	80091ec <__swhatbuf_r+0x24>
 80091da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	602a      	str	r2, [r5, #0]
 80091e2:	061a      	lsls	r2, r3, #24
 80091e4:	d410      	bmi.n	8009208 <__swhatbuf_r+0x40>
 80091e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ea:	e00e      	b.n	800920a <__swhatbuf_r+0x42>
 80091ec:	466a      	mov	r2, sp
 80091ee:	f000 f907 	bl	8009400 <_fstat_r>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	dbf1      	blt.n	80091da <__swhatbuf_r+0x12>
 80091f6:	9a01      	ldr	r2, [sp, #4]
 80091f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009200:	425a      	negs	r2, r3
 8009202:	415a      	adcs	r2, r3
 8009204:	602a      	str	r2, [r5, #0]
 8009206:	e7ee      	b.n	80091e6 <__swhatbuf_r+0x1e>
 8009208:	2340      	movs	r3, #64	; 0x40
 800920a:	2000      	movs	r0, #0
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	b016      	add	sp, #88	; 0x58
 8009210:	bd70      	pop	{r4, r5, r6, pc}
	...

08009214 <__smakebuf_r>:
 8009214:	898b      	ldrh	r3, [r1, #12]
 8009216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009218:	079d      	lsls	r5, r3, #30
 800921a:	4606      	mov	r6, r0
 800921c:	460c      	mov	r4, r1
 800921e:	d507      	bpl.n	8009230 <__smakebuf_r+0x1c>
 8009220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	6123      	str	r3, [r4, #16]
 8009228:	2301      	movs	r3, #1
 800922a:	6163      	str	r3, [r4, #20]
 800922c:	b002      	add	sp, #8
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	ab01      	add	r3, sp, #4
 8009232:	466a      	mov	r2, sp
 8009234:	f7ff ffc8 	bl	80091c8 <__swhatbuf_r>
 8009238:	9900      	ldr	r1, [sp, #0]
 800923a:	4605      	mov	r5, r0
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff f9cf 	bl	80085e0 <_malloc_r>
 8009242:	b948      	cbnz	r0, 8009258 <__smakebuf_r+0x44>
 8009244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009248:	059a      	lsls	r2, r3, #22
 800924a:	d4ef      	bmi.n	800922c <__smakebuf_r+0x18>
 800924c:	f023 0303 	bic.w	r3, r3, #3
 8009250:	f043 0302 	orr.w	r3, r3, #2
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	e7e3      	b.n	8009220 <__smakebuf_r+0xc>
 8009258:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <__smakebuf_r+0x7c>)
 800925a:	62b3      	str	r3, [r6, #40]	; 0x28
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	6020      	str	r0, [r4, #0]
 8009260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009264:	81a3      	strh	r3, [r4, #12]
 8009266:	9b00      	ldr	r3, [sp, #0]
 8009268:	6163      	str	r3, [r4, #20]
 800926a:	9b01      	ldr	r3, [sp, #4]
 800926c:	6120      	str	r0, [r4, #16]
 800926e:	b15b      	cbz	r3, 8009288 <__smakebuf_r+0x74>
 8009270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009274:	4630      	mov	r0, r6
 8009276:	f000 f8d5 	bl	8009424 <_isatty_r>
 800927a:	b128      	cbz	r0, 8009288 <__smakebuf_r+0x74>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f023 0303 	bic.w	r3, r3, #3
 8009282:	f043 0301 	orr.w	r3, r3, #1
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	89a0      	ldrh	r0, [r4, #12]
 800928a:	4305      	orrs	r5, r0
 800928c:	81a5      	strh	r5, [r4, #12]
 800928e:	e7cd      	b.n	800922c <__smakebuf_r+0x18>
 8009290:	08009021 	.word	0x08009021

08009294 <__malloc_lock>:
 8009294:	4801      	ldr	r0, [pc, #4]	; (800929c <__malloc_lock+0x8>)
 8009296:	f7ff bf95 	b.w	80091c4 <__retarget_lock_acquire_recursive>
 800929a:	bf00      	nop
 800929c:	20000790 	.word	0x20000790

080092a0 <__malloc_unlock>:
 80092a0:	4801      	ldr	r0, [pc, #4]	; (80092a8 <__malloc_unlock+0x8>)
 80092a2:	f7ff bf90 	b.w	80091c6 <__retarget_lock_release_recursive>
 80092a6:	bf00      	nop
 80092a8:	20000790 	.word	0x20000790

080092ac <_raise_r>:
 80092ac:	291f      	cmp	r1, #31
 80092ae:	b538      	push	{r3, r4, r5, lr}
 80092b0:	4604      	mov	r4, r0
 80092b2:	460d      	mov	r5, r1
 80092b4:	d904      	bls.n	80092c0 <_raise_r+0x14>
 80092b6:	2316      	movs	r3, #22
 80092b8:	6003      	str	r3, [r0, #0]
 80092ba:	f04f 30ff 	mov.w	r0, #4294967295
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092c2:	b112      	cbz	r2, 80092ca <_raise_r+0x1e>
 80092c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092c8:	b94b      	cbnz	r3, 80092de <_raise_r+0x32>
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 f830 	bl	8009330 <_getpid_r>
 80092d0:	462a      	mov	r2, r5
 80092d2:	4601      	mov	r1, r0
 80092d4:	4620      	mov	r0, r4
 80092d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092da:	f000 b817 	b.w	800930c <_kill_r>
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d00a      	beq.n	80092f8 <_raise_r+0x4c>
 80092e2:	1c59      	adds	r1, r3, #1
 80092e4:	d103      	bne.n	80092ee <_raise_r+0x42>
 80092e6:	2316      	movs	r3, #22
 80092e8:	6003      	str	r3, [r0, #0]
 80092ea:	2001      	movs	r0, #1
 80092ec:	e7e7      	b.n	80092be <_raise_r+0x12>
 80092ee:	2400      	movs	r4, #0
 80092f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092f4:	4628      	mov	r0, r5
 80092f6:	4798      	blx	r3
 80092f8:	2000      	movs	r0, #0
 80092fa:	e7e0      	b.n	80092be <_raise_r+0x12>

080092fc <raise>:
 80092fc:	4b02      	ldr	r3, [pc, #8]	; (8009308 <raise+0xc>)
 80092fe:	4601      	mov	r1, r0
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	f7ff bfd3 	b.w	80092ac <_raise_r>
 8009306:	bf00      	nop
 8009308:	20000220 	.word	0x20000220

0800930c <_kill_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4d07      	ldr	r5, [pc, #28]	; (800932c <_kill_r+0x20>)
 8009310:	2300      	movs	r3, #0
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	f7fa ffe9 	bl	80042f0 <_kill>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d102      	bne.n	8009328 <_kill_r+0x1c>
 8009322:	682b      	ldr	r3, [r5, #0]
 8009324:	b103      	cbz	r3, 8009328 <_kill_r+0x1c>
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	bd38      	pop	{r3, r4, r5, pc}
 800932a:	bf00      	nop
 800932c:	20000794 	.word	0x20000794

08009330 <_getpid_r>:
 8009330:	f7fa bfd6 	b.w	80042e0 <_getpid>

08009334 <__sread>:
 8009334:	b510      	push	{r4, lr}
 8009336:	460c      	mov	r4, r1
 8009338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933c:	f000 f894 	bl	8009468 <_read_r>
 8009340:	2800      	cmp	r0, #0
 8009342:	bfab      	itete	ge
 8009344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009346:	89a3      	ldrhlt	r3, [r4, #12]
 8009348:	181b      	addge	r3, r3, r0
 800934a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800934e:	bfac      	ite	ge
 8009350:	6563      	strge	r3, [r4, #84]	; 0x54
 8009352:	81a3      	strhlt	r3, [r4, #12]
 8009354:	bd10      	pop	{r4, pc}

08009356 <__swrite>:
 8009356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935a:	461f      	mov	r7, r3
 800935c:	898b      	ldrh	r3, [r1, #12]
 800935e:	05db      	lsls	r3, r3, #23
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	4616      	mov	r6, r2
 8009366:	d505      	bpl.n	8009374 <__swrite+0x1e>
 8009368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936c:	2302      	movs	r3, #2
 800936e:	2200      	movs	r2, #0
 8009370:	f000 f868 	bl	8009444 <_lseek_r>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800937a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	4632      	mov	r2, r6
 8009382:	463b      	mov	r3, r7
 8009384:	4628      	mov	r0, r5
 8009386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800938a:	f000 b817 	b.w	80093bc <_write_r>

0800938e <__sseek>:
 800938e:	b510      	push	{r4, lr}
 8009390:	460c      	mov	r4, r1
 8009392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009396:	f000 f855 	bl	8009444 <_lseek_r>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	bf15      	itete	ne
 80093a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80093a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093aa:	81a3      	strheq	r3, [r4, #12]
 80093ac:	bf18      	it	ne
 80093ae:	81a3      	strhne	r3, [r4, #12]
 80093b0:	bd10      	pop	{r4, pc}

080093b2 <__sclose>:
 80093b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b6:	f000 b813 	b.w	80093e0 <_close_r>
	...

080093bc <_write_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	4d07      	ldr	r5, [pc, #28]	; (80093dc <_write_r+0x20>)
 80093c0:	4604      	mov	r4, r0
 80093c2:	4608      	mov	r0, r1
 80093c4:	4611      	mov	r1, r2
 80093c6:	2200      	movs	r2, #0
 80093c8:	602a      	str	r2, [r5, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f7fa ffc7 	bl	800435e <_write>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_write_r+0x1e>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_write_r+0x1e>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	20000794 	.word	0x20000794

080093e0 <_close_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d06      	ldr	r5, [pc, #24]	; (80093fc <_close_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	f7fa ffd3 	bl	8004396 <_close>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_close_r+0x1a>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_close_r+0x1a>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	20000794 	.word	0x20000794

08009400 <_fstat_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	; (8009420 <_fstat_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	f7fa ffce 	bl	80043ae <_fstat>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_fstat_r+0x1c>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b103      	cbz	r3, 800941c <_fstat_r+0x1c>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	20000794 	.word	0x20000794

08009424 <_isatty_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d06      	ldr	r5, [pc, #24]	; (8009440 <_isatty_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7fa ffcd 	bl	80043ce <_isatty>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_isatty_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_isatty_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	20000794 	.word	0x20000794

08009444 <_lseek_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d07      	ldr	r5, [pc, #28]	; (8009464 <_lseek_r+0x20>)
 8009448:	4604      	mov	r4, r0
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	2200      	movs	r2, #0
 8009450:	602a      	str	r2, [r5, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	f7fa ffc6 	bl	80043e4 <_lseek>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_lseek_r+0x1e>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_lseek_r+0x1e>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	20000794 	.word	0x20000794

08009468 <_read_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	; (8009488 <_read_r+0x20>)
 800946c:	4604      	mov	r4, r0
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	2200      	movs	r2, #0
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f7fa ff54 	bl	8004324 <_read>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_read_r+0x1e>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_read_r+0x1e>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	20000794 	.word	0x20000794

0800948c <_init>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	bf00      	nop
 8009490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009492:	bc08      	pop	{r3}
 8009494:	469e      	mov	lr, r3
 8009496:	4770      	bx	lr

08009498 <_fini>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	bf00      	nop
 800949c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949e:	bc08      	pop	{r3}
 80094a0:	469e      	mov	lr, r3
 80094a2:	4770      	bx	lr
