
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002798  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002954  08002954  00012954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029a0  080029a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029a0  080029a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029a0  080029a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080029b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080029b8  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151c4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da8  00000000  00000000  00035200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  00037fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  000389c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030586  00000000  00000000  00039400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5ee  00000000  00000000  00069986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111bb9  00000000  00000000  00077f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00189b2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b4  00000000  00000000  00189b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000010d9  00000000  00000000  0018c234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800293c 	.word	0x0800293c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800293c 	.word	0x0800293c

080001fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN1_Init+0x60>)
 8000202:	4a17      	ldr	r2, [pc, #92]	; (8000260 <MX_CAN1_Init+0x64>)
 8000204:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <MX_CAN1_Init+0x60>)
 8000208:	2210      	movs	r2, #16
 800020a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN1_Init+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <MX_CAN1_Init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <MX_CAN1_Init+0x60>)
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN1_Init+0x60>)
 8000220:	2200      	movs	r2, #0
 8000222:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN1_Init+0x60>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN1_Init+0x60>)
 800022c:	2200      	movs	r2, #0
 800022e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN1_Init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN1_Init+0x60>)
 8000238:	2200      	movs	r2, #0
 800023a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN1_Init+0x60>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN1_Init+0x60>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN1_Init+0x60>)
 800024a:	f000 ff55 	bl	80010f8 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000254:	f000 fcda 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028
 8000260:	40006400 	.word	0x40006400

08000264 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <HAL_CAN_MspInit+0x80>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d129      	bne.n	80002da <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800028a:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 800028c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000290:	6593      	str	r3, [r2, #88]	; 0x58
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002bc:	2302      	movs	r3, #2
 80002be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c4:	2303      	movs	r3, #3
 80002c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002c8:	2309      	movs	r3, #9
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f001 f8f1 	bl	80014bc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002da:	bf00      	nop
 80002dc:	3728      	adds	r7, #40	; 0x28
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40006400 	.word	0x40006400
 80002e8:	40021000 	.word	0x40021000

080002ec <_ZL8checkGSBh>:
	if (buff & 0x01) *(x + 2) |= (1 << 0);
}

static SmartFuseState checkGSB(uint8_t gsb)
{
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 80002ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80002f0:	d117      	bne.n	8000322 <_ZL8checkGSBh+0x36>
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 80002f2:	f010 0f01 	tst.w	r0, #1
 80002f6:	d116      	bne.n	8000326 <_ZL8checkGSBh+0x3a>
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 80002f8:	f010 0f02 	tst.w	r0, #2
 80002fc:	d115      	bne.n	800032a <_ZL8checkGSBh+0x3e>
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 80002fe:	f010 0f04 	tst.w	r0, #4
 8000302:	d114      	bne.n	800032e <_ZL8checkGSBh+0x42>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000304:	f010 0f08 	tst.w	r0, #8
 8000308:	d113      	bne.n	8000332 <_ZL8checkGSBh+0x46>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 800030a:	f010 0f10 	tst.w	r0, #16
 800030e:	d112      	bne.n	8000336 <_ZL8checkGSBh+0x4a>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 8000310:	f010 0f20 	tst.w	r0, #32
 8000314:	d111      	bne.n	800033a <_ZL8checkGSBh+0x4e>
	if(gsb & 0b01000000) return SmartFuseState::ResetState;
 8000316:	f010 0f40 	tst.w	r0, #64	; 0x40
 800031a:	bf0c      	ite	eq
 800031c:	2008      	moveq	r0, #8
 800031e:	2001      	movne	r0, #1
 8000320:	4770      	bx	lr
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000322:	2000      	movs	r0, #0
 8000324:	4770      	bx	lr
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 8000326:	2007      	movs	r0, #7
 8000328:	4770      	bx	lr
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 800032a:	2006      	movs	r0, #6
 800032c:	4770      	bx	lr
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 800032e:	2005      	movs	r0, #5
 8000330:	4770      	bx	lr
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000332:	2004      	movs	r0, #4
 8000334:	4770      	bx	lr
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 8000336:	2003      	movs	r0, #3
 8000338:	4770      	bx	lr
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 800033a:	2002      	movs	r0, #2
	return SmartFuseState::NotResponding;
}
 800033c:	4770      	bx	lr

0800033e <_ZN9SmartFuse4FuseC1Ev>:
    T2 second;

    /// Default constructor
    ETL_CONSTEXPR pair()
      : first(T1())
      , second(T2())
 800033e:	2200      	movs	r2, #0
 8000340:	8082      	strh	r2, [r0, #4]
 8000342:	80c2      	strh	r2, [r0, #6]

/*Fuse declarations -------------------------------------------------------------------------------------------------*/

SmartFuse::Fuse::Fuse()
{
	active = false;
 8000344:	7002      	strb	r2, [r0, #0]
	current = 0x0000;
 8000346:	8042      	strh	r2, [r0, #2]
}
 8000348:	4770      	bx	lr

0800034a <_ZN9SmartFuse11slaveSelectEv>:

	slaveDeselect();
}

void SmartFuse::slaveSelect(void)
{
 800034a:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin( (GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	8881      	ldrh	r1, [r0, #4]
 8000350:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000352:	f001 fa45 	bl	80017e0 <HAL_GPIO_WritePin>
}
 8000356:	bd08      	pop	{r3, pc}

08000358 <_ZN9SmartFuse13slaveDeselectEv>:

void SmartFuse::slaveDeselect(void)
{
 8000358:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	8881      	ldrh	r1, [r0, #4]
 800035e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000360:	f001 fa3e 	bl	80017e0 <HAL_GPIO_WritePin>
}
 8000364:	bd08      	pop	{r3, pc}

08000366 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>:
SmartFuse::SmartFuse(const GPIO_TypeDef *port, const uint32_t pin, const SPI_HandleTypeDef *hspi, const FusesSettings &fuses_settings) :
 8000366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800036a:	4606      	mov	r6, r0
 800036c:	468a      	mov	sl, r1
 800036e:	4699      	mov	r9, r3
 8000370:	9f08      	ldr	r7, [sp, #32]
					 port(port), pin(pin), hspi(hspi), fuses_settings(fuses_settings)
 8000372:	6042      	str	r2, [r0, #4]
 8000374:	f100 0508 	add.w	r5, r0, #8
 8000378:	4604      	mov	r4, r0
 800037a:	f100 0838 	add.w	r8, r0, #56	; 0x38
 800037e:	4628      	mov	r0, r5
 8000380:	f7ff ffdd 	bl	800033e <_ZN9SmartFuse4FuseC1Ev>
 8000384:	3508      	adds	r5, #8
 8000386:	4545      	cmp	r5, r8
 8000388:	d1f9      	bne.n	800037e <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0x18>
 800038a:	f8c6 a038 	str.w	sl, [r6, #56]	; 0x38
 800038e:	f8c6 903c 	str.w	r9, [r6, #60]	; 0x3c
	f3,
	f4,
	f5
};

struct FusesSettings
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	6433      	str	r3, [r6, #64]	; 0x40
 8000396:	88bb      	ldrh	r3, [r7, #4]
 8000398:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
 800039c:	f8d7 3006 	ldr.w	r3, [r7, #6]
 80003a0:	f8c6 3046 	str.w	r3, [r6, #70]	; 0x46
 80003a4:	897b      	ldrh	r3, [r7, #10]
 80003a6:	f8a6 304a 	strh.w	r3, [r6, #74]	; 0x4a
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	64f3      	str	r3, [r6, #76]	; 0x4c
 80003ae:	8a3b      	ldrh	r3, [r7, #16]
 80003b0:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 80003b4:	f8d7 1012 	ldr.w	r1, [r7, #18]
 80003b8:	f8d7 2016 	ldr.w	r2, [r7, #22]
 80003bc:	f8d7 301a 	ldr.w	r3, [r7, #26]
 80003c0:	f8c6 1052 	str.w	r1, [r6, #82]	; 0x52
 80003c4:	f8c6 2056 	str.w	r2, [r6, #86]	; 0x56
 80003c8:	f8c6 305a 	str.w	r3, [r6, #90]	; 0x5a
 80003cc:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80003d0:	f106 025e 	add.w	r2, r6, #94	; 0x5e
 80003d4:	463d      	mov	r5, r7
 80003d6:	f107 003a 	add.w	r0, r7, #58	; 0x3a
    {
    }

    /// Copy constructor
    pair(const pair<T1, T2>& other)
      : first(other.first)
 80003da:	f833 1c04 	ldrh.w	r1, [r3, #-4]
      , second(other.second)
 80003de:	8011      	strh	r1, [r2, #0]
 80003e0:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 80003e4:	8051      	strh	r1, [r2, #2]
 80003e6:	3304      	adds	r3, #4
 80003e8:	3204      	adds	r2, #4
 80003ea:	4283      	cmp	r3, r0
 80003ec:	d1f5      	bne.n	80003da <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0x74>
 80003ee:	f106 0078 	add.w	r0, r6, #120	; 0x78
 80003f2:	f000 fdcf 	bl	8000f94 <_ZN5TimerC1Ev>
	this->toggle = false;
 80003f6:	2300      	movs	r3, #0
 80003f8:	7033      	strb	r3, [r6, #0]
	for (int i = 0; i < 6; i++)
 80003fa:	1e7b      	subs	r3, r7, #1
 80003fc:	3705      	adds	r7, #5
      swap(second, other.second);
    }

    pair<T1, T2>& operator =(const pair<T1, T2>& other)
    {
      first = other.first;
 80003fe:	8bea      	ldrh	r2, [r5, #30]
 8000400:	81a2      	strh	r2, [r4, #12]
      second = other.second;
 8000402:	8c2a      	ldrh	r2, [r5, #32]
 8000404:	81e2      	strh	r2, [r4, #14]
		this->fuses[i].active = fuses_settings.active[i];
 8000406:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800040a:	f804 2f08 	strb.w	r2, [r4, #8]!
	for (int i = 0; i < 6; i++)
 800040e:	3504      	adds	r5, #4
 8000410:	42bb      	cmp	r3, r7
 8000412:	d1f4      	bne.n	80003fe <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings+0x98>
	slaveDeselect();
 8000414:	4630      	mov	r0, r6
 8000416:	f7ff ff9f 	bl	8000358 <_ZN9SmartFuse13slaveDeselectEv>
}
 800041a:	4630      	mov	r0, r6
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>:
{
	return this->state;
}

void SmartFuse::transmitReceiveData(uint8_t *tx_data, uint8_t *rx_data)
{
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	4607      	mov	r7, r0
 8000424:	460d      	mov	r5, r1
 8000426:	4616      	mov	r6, r2
	/// just check
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8000428:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0xbc>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000432:	d103      	bne.n	800043c <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x1c>
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800043a:	601a      	str	r2, [r3, #0]
	uint32_t buff = *(uint32_t*)(x);
 800043c:	682a      	ldr	r2, [r5, #0]
	buff &= ~(0xff << 24 | 1 << 0);
 800043e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 8000442:	f023 0301 	bic.w	r3, r3, #1
	buff ^= (buff >> 16);
 8000446:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800044a:	4053      	eors	r3, r2
	buff ^= (buff >> 8);
 800044c:	ea83 2313 	eor.w	r3, r3, r3, lsr #8
	buff ^= (buff >> 4);
 8000450:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
	buff ^= (buff >> 2);
 8000454:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
	buff ^= (buff >> 1);
 8000458:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
	if (buff & 0x01) *(x + 2) |= (1 << 0);
 800045c:	f013 0f01 	tst.w	r3, #1
 8000460:	d003      	beq.n	800046a <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x4a>
 8000462:	78ab      	ldrb	r3, [r5, #2]
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	70ab      	strb	r3, [r5, #2]

	/// data needs to have a parity check bit
	calculateParityBit(tx_data);

	slaveSelect();
 800046a:	4638      	mov	r0, r7
 800046c:	f7ff ff6d 	bl	800034a <_ZN9SmartFuse11slaveSelectEv>

	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8000470:	2000      	movs	r0, #0
 8000472:	4684      	mov	ip, r0
			(*(uint8_t*) rx_data) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
			rx_data++;
			rx++;
		}

		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000474:	4919      	ldr	r1, [pc, #100]	; (80004dc <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0xbc>)
 8000476:	e00b      	b.n	8000490 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x70>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 8000478:	680b      	ldr	r3, [r1, #0]
 800047a:	689c      	ldr	r4, [r3, #8]
 800047c:	f014 0f01 	tst.w	r4, #1
 8000480:	d001      	beq.n	8000486 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x66>
 8000482:	2802      	cmp	r0, #2
 8000484:	d910      	bls.n	80004a8 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x88>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000486:	680b      	ldr	r3, [r1, #0]
 8000488:	689a      	ldr	r2, [r3, #8]
 800048a:	f012 0f02 	tst.w	r2, #2
 800048e:	d118      	bne.n	80004c2 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0xa2>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8000490:	f1bc 0f02 	cmp.w	ip, #2
 8000494:	d9f0      	bls.n	8000478 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x58>
 8000496:	2802      	cmp	r0, #2
 8000498:	d81b      	bhi.n	80004d2 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0xb2>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 800049a:	680b      	ldr	r3, [r1, #0]
 800049c:	689a      	ldr	r2, [r3, #8]
 800049e:	f012 0f01 	tst.w	r2, #1
 80004a2:	d101      	bne.n	80004a8 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x88>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	e7f3      	b.n	8000490 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x70>
			(*(uint8_t*) rx_data) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 80004a8:	7b1b      	ldrb	r3, [r3, #12]
 80004aa:	f806 3b01 	strb.w	r3, [r6], #1
			rx++;
 80004ae:	3001      	adds	r0, #1
 80004b0:	b2c0      	uxtb	r0, r0
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 80004b2:	680b      	ldr	r3, [r1, #0]
 80004b4:	689a      	ldr	r2, [r3, #8]
 80004b6:	f012 0f02 	tst.w	r2, #2
 80004ba:	d0e9      	beq.n	8000490 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x70>
 80004bc:	f1bc 0f02 	cmp.w	ip, #2
 80004c0:	d8e6      	bhi.n	8000490 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x70>
		{
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = (*tx_data);
 80004c2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80004c6:	731a      	strb	r2, [r3, #12]
			tx_data++;
			tx++;
 80004c8:	f10c 0c01 	add.w	ip, ip, #1
 80004cc:	fa5f fc8c 	uxtb.w	ip, ip
 80004d0:	e7de      	b.n	8000490 <_ZN9SmartFuse19transmitReceiveDataEPhS0_+0x70>
		}
	}

	slaveDeselect();
 80004d2:	4638      	mov	r0, r7
 80004d4:	f7ff ff40 	bl	8000358 <_ZN9SmartFuse13slaveDeselectEv>
}
 80004d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000058 	.word	0x20000058

080004e0 <_ZN9SmartFuse4initEv>:
{
 80004e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	4604      	mov	r4, r0
	uint8_t tx_data[3] = { 0, 0, 0 };
 80004e8:	4b83      	ldr	r3, [pc, #524]	; (80006f8 <_ZN9SmartFuse4initEv+0x218>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f8ad 3004 	strh.w	r3, [sp, #4]
 80004f0:	0c1a      	lsrs	r2, r3, #16
 80004f2:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t rx_data[3] = { 0, 0, 0 };
 80004f6:	f8ad 3000 	strh.w	r3, [sp]
 80004fa:	f88d 2002 	strb.w	r2, [sp, #2]
	tx_data[0] = RESET_SMARTFUSE();
 80004fe:	23ff      	movs	r3, #255	; 0xff
 8000500:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 8000504:	466a      	mov	r2, sp
 8000506:	a901      	add	r1, sp, #4
 8000508:	f7ff ff8a 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	tx_data[0] = READ_ROM(0x00);
 800050c:	23c0      	movs	r3, #192	; 0xc0
 800050e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000512:	2506      	movs	r5, #6
 8000514:	e00b      	b.n	800052e <_ZN9SmartFuse4initEv+0x4e>
		if(!IF_RESET_STATE(rx_data)) break;
 8000516:	f013 0f40 	tst.w	r3, #64	; 0x40
 800051a:	d012      	beq.n	8000542 <_ZN9SmartFuse4initEv+0x62>
		else if(i == 5)
 800051c:	2d01      	cmp	r5, #1
 800051e:	f000 80e1 	beq.w	80006e4 <_ZN9SmartFuse4initEv+0x204>
		transmitReceiveData(tx_data, rx_data);
 8000522:	466a      	mov	r2, sp
 8000524:	a901      	add	r1, sp, #4
 8000526:	4620      	mov	r0, r4
 8000528:	f7ff ff7a 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	for (int i = 0; i < FUSE_TIMEOUT; i++)
 800052c:	3d01      	subs	r5, #1
		if(!IF_RESET_STATE(rx_data)) break;
 800052e:	f89d 3000 	ldrb.w	r3, [sp]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d1ef      	bne.n	8000516 <_ZN9SmartFuse4initEv+0x36>
 8000536:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800053a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800053e:	4313      	orrs	r3, r2
 8000540:	d0ec      	beq.n	800051c <_ZN9SmartFuse4initEv+0x3c>
	MODIFY(tx_data, WRITE_RAM(0x14), 1 << 6, 0);
 8000542:	2614      	movs	r6, #20
 8000544:	f88d 6004 	strb.w	r6, [sp, #4]
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	f88d 3005 	strb.w	r3, [sp, #5]
 800054e:	2500      	movs	r5, #0
 8000550:	f88d 5006 	strb.w	r5, [sp, #6]
	transmitReceiveData(tx_data, rx_data);
 8000554:	466a      	mov	r2, sp
 8000556:	a901      	add	r1, sp, #4
 8000558:	4620      	mov	r0, r4
 800055a:	f7ff ff61 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	MODIFY(tx_data, WRITE_RAM(0x14), 1 << 3, 0);
 800055e:	f88d 6004 	strb.w	r6, [sp, #4]
 8000562:	2308      	movs	r3, #8
 8000564:	f88d 3005 	strb.w	r3, [sp, #5]
 8000568:	f88d 5006 	strb.w	r5, [sp, #6]
	transmitReceiveData(tx_data, rx_data);
 800056c:	466a      	mov	r2, sp
 800056e:	a901      	add	r1, sp, #4
 8000570:	4620      	mov	r0, r4
 8000572:	f7ff ff55 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	this->watch_dog.restart();
 8000576:	f104 0878 	add.w	r8, r4, #120	; 0x78
 800057a:	4640      	mov	r0, r8
 800057c:	f000 fd18 	bl	8000fb0 <_ZN5Timer7restartEv>
	this->toggle = false;
 8000580:	4626      	mov	r6, r4
 8000582:	f806 5b52 	strb.w	r5, [r6], #82
	for(int i = 0; i < 6; i++)
 8000586:	f104 074c 	add.w	r7, r4, #76	; 0x4c
		tx_data[1] = 0x00;
 800058a:	46a9      	mov	r9, r5
 800058c:	e012      	b.n	80005b4 <_ZN9SmartFuse4initEv+0xd4>
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 800058e:	f88d 9006 	strb.w	r9, [sp, #6]
		tx_data[0] = WRITE_RAM(0x08 + i);
 8000592:	f10a 0a08 	add.w	sl, sl, #8
 8000596:	f88d a004 	strb.w	sl, [sp, #4]
		transmitReceiveData(tx_data, rx_data);
 800059a:	466a      	mov	r2, sp
 800059c:	a901      	add	r1, sp, #4
 800059e:	4620      	mov	r0, r4
 80005a0:	f7ff ff3e 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		if(watch_dog.getPassedTime() >= 30)
 80005a4:	4640      	mov	r0, r8
 80005a6:	f000 fcfc 	bl	8000fa2 <_ZN5Timer13getPassedTimeEv>
 80005aa:	281d      	cmp	r0, #29
 80005ac:	d834      	bhi.n	8000618 <_ZN9SmartFuse4initEv+0x138>
	for(int i = 0; i < 6; i++)
 80005ae:	3501      	adds	r5, #1
 80005b0:	2d06      	cmp	r5, #6
 80005b2:	d055      	beq.n	8000660 <_ZN9SmartFuse4initEv+0x180>
		tx_data[1] = uint8_t(this->fuses_settings.duty_cykle[i] >> 8);
 80005b4:	f836 3b02 	ldrh.w	r3, [r6], #2
 80005b8:	0a1a      	lsrs	r2, r3, #8
 80005ba:	f88d 2005 	strb.w	r2, [sp, #5]
		tx_data[2] = uint8_t(this->fuses_settings.duty_cykle[i] << 4) | this->toggle << 1;
 80005be:	7822      	ldrb	r2, [r4, #0]
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80005c6:	f88d 3006 	strb.w	r3, [sp, #6]
		tx_data[0] = WRITE_RAM(0x00 + i);
 80005ca:	fa5f fa85 	uxtb.w	sl, r5
 80005ce:	f88d a004 	strb.w	sl, [sp, #4]
		transmitReceiveData(tx_data, rx_data);
 80005d2:	466a      	mov	r2, sp
 80005d4:	a901      	add	r1, sp, #4
 80005d6:	4620      	mov	r0, r4
 80005d8:	f7ff ff22 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		tx_data[1] = 0x00;
 80005dc:	f88d 9005 	strb.w	r9, [sp, #5]
		switch (this->fuses_settings.sampling_mode[i])
 80005e0:	f817 3b01 	ldrb.w	r3, [r7], #1
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d8d4      	bhi.n	8000592 <_ZN9SmartFuse4initEv+0xb2>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <_ZN9SmartFuse4initEv+0x110>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	0800058f 	.word	0x0800058f
 80005f4:	08000601 	.word	0x08000601
 80005f8:	08000609 	.word	0x08000609
 80005fc:	08000611 	.word	0x08000611
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 8000600:	2340      	movs	r3, #64	; 0x40
 8000602:	f88d 3006 	strb.w	r3, [sp, #6]
 8000606:	e7c4      	b.n	8000592 <_ZN9SmartFuse4initEv+0xb2>
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	f88d 3006 	strb.w	r3, [sp, #6]
 800060e:	e7c0      	b.n	8000592 <_ZN9SmartFuse4initEv+0xb2>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 8000610:	23c0      	movs	r3, #192	; 0xc0
 8000612:	f88d 3006 	strb.w	r3, [sp, #6]
 8000616:	e7bc      	b.n	8000592 <_ZN9SmartFuse4initEv+0xb2>
			tx_data[0] = READ_RAM(0x13);
 8000618:	2353      	movs	r3, #83	; 0x53
 800061a:	f88d 3004 	strb.w	r3, [sp, #4]
			transmitReceiveData(tx_data, rx_data);
 800061e:	466a      	mov	r2, sp
 8000620:	a901      	add	r1, sp, #4
 8000622:	4620      	mov	r0, r4
 8000624:	f7ff fefc 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
			MODIFY(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] ^= (1 << 1));
 8000628:	2313      	movs	r3, #19
 800062a:	f88d 3004 	strb.w	r3, [sp, #4]
 800062e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000632:	f88d 3005 	strb.w	r3, [sp, #5]
 8000636:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800063a:	f083 0302 	eor.w	r3, r3, #2
 800063e:	f88d 3002 	strb.w	r3, [sp, #2]
 8000642:	f88d 3006 	strb.w	r3, [sp, #6]
			transmitReceiveData(tx_data, rx_data);
 8000646:	466a      	mov	r2, sp
 8000648:	a901      	add	r1, sp, #4
 800064a:	4620      	mov	r0, r4
 800064c:	f7ff fee8 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
			this->watch_dog.restart();
 8000650:	4640      	mov	r0, r8
 8000652:	f000 fcad 	bl	8000fb0 <_ZN5Timer7restartEv>
			this->toggle = !this->toggle;
 8000656:	7823      	ldrb	r3, [r4, #0]
 8000658:	f083 0301 	eor.w	r3, r3, #1
 800065c:	7023      	strb	r3, [r4, #0]
 800065e:	e7a6      	b.n	80005ae <_ZN9SmartFuse4initEv+0xce>
		   this->fuses_settings.latch_off_time_out[1];
 8000660:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	tx_data[1] = this->fuses_settings.latch_off_time_out[2] << 4 |
 8000664:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8000668:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 800066c:	f88d 2005 	strb.w	r2, [sp, #5]
	tx_data[2] = this->fuses_settings.latch_off_time_out[1] << 4;
 8000670:	011b      	lsls	r3, r3, #4
 8000672:	f88d 3006 	strb.w	r3, [sp, #6]
	tx_data[0] = WRITE_RAM(0x10);
 8000676:	2310      	movs	r3, #16
 8000678:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 800067c:	466a      	mov	r2, sp
 800067e:	a901      	add	r1, sp, #4
 8000680:	4620      	mov	r0, r4
 8000682:	f7ff fecd 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	tx_data[1] = this->fuses_settings.latch_off_time_out[5] << 4 |
 8000686:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 800068a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800068e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000692:	f88d 3005 	strb.w	r3, [sp, #5]
	tx_data[2] = this->fuses_settings.latch_off_time_out[3] << 4;
 8000696:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	f88d 3006 	strb.w	r3, [sp, #6]
	tx_data[0] = WRITE_RAM(0x11);
 80006a0:	2311      	movs	r3, #17
 80006a2:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 80006a6:	466a      	mov	r2, sp
 80006a8:	a901      	add	r1, sp, #4
 80006aa:	4620      	mov	r0, r4
 80006ac:	f7ff feb8 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
 80006b0:	2200      	movs	r2, #0
	for(int i = 0; i < 6; i++)
 80006b2:	4613      	mov	r3, r2
		tx_data[1] |= this->fuses[i].active << i;
 80006b4:	f104 0008 	add.w	r0, r4, #8
 80006b8:	f810 1033 	ldrb.w	r1, [r0, r3, lsl #3]
 80006bc:	4099      	lsls	r1, r3
 80006be:	430a      	orrs	r2, r1
 80006c0:	b2d2      	uxtb	r2, r2
	for(int i = 0; i < 6; i++)
 80006c2:	3301      	adds	r3, #1
 80006c4:	2b06      	cmp	r3, #6
 80006c6:	d1f7      	bne.n	80006b8 <_ZN9SmartFuse4initEv+0x1d8>
 80006c8:	f88d 2005 	strb.w	r2, [sp, #5]
	tx_data[2] = this->toggle << 1;
 80006cc:	7823      	ldrb	r3, [r4, #0]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	f88d 3006 	strb.w	r3, [sp, #6]
	tx_data[0] = WRITE_RAM(0x13);
 80006d4:	2313      	movs	r3, #19
 80006d6:	f88d 3004 	strb.w	r3, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 80006da:	466a      	mov	r2, sp
 80006dc:	a901      	add	r1, sp, #4
 80006de:	4620      	mov	r0, r4
 80006e0:	f7ff fe9e 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
	this->state = checkGSB(rx_data[0]);
 80006e4:	f89d 0000 	ldrb.w	r0, [sp]
 80006e8:	f7ff fe00 	bl	80002ec <_ZL8checkGSBh>
 80006ec:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80006f0:	b002      	add	sp, #8
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	bf00      	nop
 80006f8:	08002954 	.word	0x08002954

080006fc <_ZN9SmartFuse6handleEv>:
{
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	4605      	mov	r5, r0
	uint8_t tx_data[3] = { 0, 0, 0 };
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <_ZN9SmartFuse6handleEv+0xb0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f8ad 3004 	strh.w	r3, [sp, #4]
 800070a:	0c1a      	lsrs	r2, r3, #16
 800070c:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t rx_data[3] = { 0, 0, 0 };
 8000710:	f8ad 3000 	strh.w	r3, [sp]
 8000714:	f88d 2002 	strb.w	r2, [sp, #2]
	if(watch_dog.getPassedTime() >= 30)
 8000718:	f100 0478 	add.w	r4, r0, #120	; 0x78
 800071c:	4620      	mov	r0, r4
 800071e:	f000 fc40 	bl	8000fa2 <_ZN5Timer13getPassedTimeEv>
 8000722:	281d      	cmp	r0, #29
 8000724:	d81e      	bhi.n	8000764 <_ZN9SmartFuse6handleEv+0x68>
{
 8000726:	2400      	movs	r4, #0
		this->fuses[i].current = (*(uint16_t*)(rx_data + 1) >> 4) & 0x03ff;
 8000728:	f105 060a 	add.w	r6, r5, #10
		tx_data[0] = READ_RAM(0x28 + i);
 800072c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8000730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000734:	f88d 3004 	strb.w	r3, [sp, #4]
		transmitReceiveData(tx_data, rx_data);
 8000738:	466a      	mov	r2, sp
 800073a:	a901      	add	r1, sp, #4
 800073c:	4628      	mov	r0, r5
 800073e:	f7ff fe6f 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		this->fuses[i].current = (*(uint16_t*)(rx_data + 1) >> 4) & 0x03ff;
 8000742:	f8bd 3001 	ldrh.w	r3, [sp, #1]
 8000746:	f3c3 1309 	ubfx	r3, r3, #4, #10
 800074a:	f826 3034 	strh.w	r3, [r6, r4, lsl #3]
	for(int i = 0; i < 6; i++)
 800074e:	3401      	adds	r4, #1
 8000750:	2c06      	cmp	r4, #6
 8000752:	d1eb      	bne.n	800072c <_ZN9SmartFuse6handleEv+0x30>
	this->state = checkGSB(rx_data[0]);
 8000754:	f89d 0000 	ldrb.w	r0, [sp]
 8000758:	f7ff fdc8 	bl	80002ec <_ZL8checkGSBh>
 800075c:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
}
 8000760:	b002      	add	sp, #8
 8000762:	bd70      	pop	{r4, r5, r6, pc}
		tx_data[0] = READ_RAM(0x13);
 8000764:	2353      	movs	r3, #83	; 0x53
 8000766:	f88d 3004 	strb.w	r3, [sp, #4]
		transmitReceiveData(tx_data, rx_data);
 800076a:	466a      	mov	r2, sp
 800076c:	a901      	add	r1, sp, #4
 800076e:	4628      	mov	r0, r5
 8000770:	f7ff fe56 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		MODIFY(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] ^= (1 << 1));
 8000774:	2313      	movs	r3, #19
 8000776:	f88d 3004 	strb.w	r3, [sp, #4]
 800077a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800077e:	f88d 3005 	strb.w	r3, [sp, #5]
 8000782:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000786:	f083 0302 	eor.w	r3, r3, #2
 800078a:	f88d 3002 	strb.w	r3, [sp, #2]
 800078e:	f88d 3006 	strb.w	r3, [sp, #6]
		transmitReceiveData(tx_data, rx_data);
 8000792:	466a      	mov	r2, sp
 8000794:	a901      	add	r1, sp, #4
 8000796:	4628      	mov	r0, r5
 8000798:	f7ff fe42 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		this->watch_dog.restart();
 800079c:	4620      	mov	r0, r4
 800079e:	f000 fc07 	bl	8000fb0 <_ZN5Timer7restartEv>
		this->toggle = !this->toggle;
 80007a2:	782b      	ldrb	r3, [r5, #0]
 80007a4:	f083 0301 	eor.w	r3, r3, #1
 80007a8:	702b      	strb	r3, [r5, #0]
 80007aa:	e7bc      	b.n	8000726 <_ZN9SmartFuse6handleEv+0x2a>
 80007ac:	08002954 	.word	0x08002954

080007b0 <_ZN16SmartFuseHandlerILi4EE10handle_allEv>:

template <int num_of_sf>
bool SmartFuseHandler<num_of_sf>::handle_all()
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b0a1      	sub	sp, #132	; 0x84
    /// Returns an iterator to the beginning of the vector.
    ///\return An iterator to the beginning of the vector.
    //*********************************************************************
    iterator begin()
    {
      return p_buffer;
 80007b4:	6845      	ldr	r5, [r0, #4]
    /// Returns an iterator to the end of the vector.
    ///\return An iterator to the end of the vector.
    //*********************************************************************
    iterator end()
    {
      return p_end;
 80007b6:	6887      	ldr	r7, [r0, #8]
{
	bool result = false;

	for(auto smart_fuse : smart_fuses)
 80007b8:	42bd      	cmp	r5, r7
 80007ba:	d074      	beq.n	80008a6 <_ZN16SmartFuseHandlerILi4EE10handle_allEv+0xf6>
 80007bc:	f105 047a 	add.w	r4, r5, #122	; 0x7a
 80007c0:	3540      	adds	r5, #64	; 0x40
	bool result = false;
 80007c2:	2600      	movs	r6, #0
 80007c4:	e013      	b.n	80007ee <_ZN16SmartFuseHandlerILi4EE10handle_allEv+0x3e>
	/*
	 * there is more but this much is enough for now
	 */
};

class SmartFuse
 80007c6:	f85c 3c02 	ldr.w	r3, [ip, #-2]
 80007ca:	931e      	str	r3, [sp, #120]	; 0x78
 80007cc:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80007d0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
		if(smart_fuse.handle() != SmartFuseState::Ok) result = true;
 80007d4:	4668      	mov	r0, sp
 80007d6:	f7ff ff91 	bl	80006fc <_ZN9SmartFuse6handleEv>
 80007da:	2800      	cmp	r0, #0
 80007dc:	bf18      	it	ne
 80007de:	2601      	movne	r6, #1
	for(auto smart_fuse : smart_fuses)
 80007e0:	f104 0380 	add.w	r3, r4, #128	; 0x80
 80007e4:	3580      	adds	r5, #128	; 0x80
 80007e6:	3406      	adds	r4, #6
 80007e8:	42a7      	cmp	r7, r4
 80007ea:	d05d      	beq.n	80008a8 <_ZN16SmartFuseHandlerILi4EE10handle_allEv+0xf8>
 80007ec:	461c      	mov	r4, r3
 80007ee:	46a4      	mov	ip, r4
 80007f0:	f814 3c7a 	ldrb.w	r3, [r4, #-122]
 80007f4:	f88d 3000 	strb.w	r3, [sp]
 80007f8:	f814 3c79 	ldrb.w	r3, [r4, #-121]
 80007fc:	f88d 3001 	strb.w	r3, [sp, #1]
 8000800:	f854 3c76 	ldr.w	r3, [r4, #-118]
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	f1a4 036a 	sub.w	r3, r4, #106	; 0x6a
 800080a:	4669      	mov	r1, sp
 800080c:	4608      	mov	r0, r1
 800080e:	4602      	mov	r2, r0

	private:
		/*
		 * helps the management of fuses
		 */
		struct Fuse
 8000810:	f813 ec08 	ldrb.w	lr, [r3, #-8]
 8000814:	f880 e008 	strb.w	lr, [r0, #8]
 8000818:	3008      	adds	r0, #8
 800081a:	f833 ec06 	ldrh.w	lr, [r3, #-6]
 800081e:	f8a2 e00a 	strh.w	lr, [r2, #10]
      : first(other.first)
 8000822:	f833 ec04 	ldrh.w	lr, [r3, #-4]
      , second(other.second)
 8000826:	f8a2 e00c 	strh.w	lr, [r2, #12]
 800082a:	f833 ec02 	ldrh.w	lr, [r3, #-2]
 800082e:	f8a2 e00e 	strh.w	lr, [r2, #14]
class SmartFuse
 8000832:	3308      	adds	r3, #8
 8000834:	42ab      	cmp	r3, r5
 8000836:	d1ea      	bne.n	800080e <_ZN16SmartFuseHandlerILi4EE10handle_allEv+0x5e>
 8000838:	f85c 3c42 	ldr.w	r3, [ip, #-66]
 800083c:	930e      	str	r3, [sp, #56]	; 0x38
 800083e:	f85c 3c3e 	ldr.w	r3, [ip, #-62]
 8000842:	930f      	str	r3, [sp, #60]	; 0x3c
struct FusesSettings
 8000844:	f85c 0c3a 	ldr.w	r0, [ip, #-58]
 8000848:	9010      	str	r0, [sp, #64]	; 0x40
 800084a:	f83c 3c36 	ldrh.w	r3, [ip, #-54]
 800084e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8000852:	f85c 3c34 	ldr.w	r3, [ip, #-52]
 8000856:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
 800085a:	f83c 3c30 	ldrh.w	r3, [ip, #-48]
 800085e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8000862:	f85c 0c2e 	ldr.w	r0, [ip, #-46]
 8000866:	9013      	str	r0, [sp, #76]	; 0x4c
 8000868:	f83c 3c2a 	ldrh.w	r3, [ip, #-42]
 800086c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 8000870:	f85c 0c28 	ldr.w	r0, [ip, #-40]
 8000874:	f85c 2c24 	ldr.w	r2, [ip, #-36]
 8000878:	f85c 3c20 	ldr.w	r3, [ip, #-32]
 800087c:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8000880:	f8cd 2056 	str.w	r2, [sp, #86]	; 0x56
 8000884:	f8cd 305a 	str.w	r3, [sp, #90]	; 0x5a
 8000888:	f1a4 0318 	sub.w	r3, r4, #24
      : first(other.first)
 800088c:	f833 2c04 	ldrh.w	r2, [r3, #-4]
      , second(other.second)
 8000890:	f8a1 205e 	strh.w	r2, [r1, #94]	; 0x5e
 8000894:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8000898:	f8a1 2060 	strh.w	r2, [r1, #96]	; 0x60
 800089c:	3304      	adds	r3, #4
 800089e:	3104      	adds	r1, #4
 80008a0:	42a3      	cmp	r3, r4
 80008a2:	d1f3      	bne.n	800088c <_ZN16SmartFuseHandlerILi4EE10handle_allEv+0xdc>
 80008a4:	e78f      	b.n	80007c6 <_ZN16SmartFuseHandlerILi4EE10handle_allEv+0x16>
	bool result = false;
 80008a6:	2600      	movs	r6, #0

	return result;
}
 80008a8:	4630      	mov	r0, r6
 80008aa:	b021      	add	sp, #132	; 0x84
 80008ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080008b0 <_ZN9SmartFuse12handle_timerEv>:
{
 80008b0:	b530      	push	{r4, r5, lr}
 80008b2:	b083      	sub	sp, #12
 80008b4:	4604      	mov	r4, r0
	uint8_t tx_data[3] = { 0, 0, 0 };
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <_ZN9SmartFuse12handle_timerEv+0x84>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f8ad 3004 	strh.w	r3, [sp, #4]
 80008be:	0c1a      	lsrs	r2, r3, #16
 80008c0:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t rx_data[3] = { 0, 0, 0 };
 80008c4:	f8ad 3000 	strh.w	r3, [sp]
 80008c8:	f88d 2002 	strb.w	r2, [sp, #2]
	if(watch_dog.getPassedTime() >= 30)
 80008cc:	f100 0578 	add.w	r5, r0, #120	; 0x78
 80008d0:	4628      	mov	r0, r5
 80008d2:	f000 fb66 	bl	8000fa2 <_ZN5Timer13getPassedTimeEv>
 80008d6:	281d      	cmp	r0, #29
 80008d8:	d807      	bhi.n	80008ea <_ZN9SmartFuse12handle_timerEv+0x3a>
	this->state = checkGSB(rx_data[0]);
 80008da:	f89d 0000 	ldrb.w	r0, [sp]
 80008de:	f7ff fd05 	bl	80002ec <_ZL8checkGSBh>
 80008e2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80008e6:	b003      	add	sp, #12
 80008e8:	bd30      	pop	{r4, r5, pc}
		tx_data[0] = READ_RAM(0x13);
 80008ea:	2353      	movs	r3, #83	; 0x53
 80008ec:	f88d 3004 	strb.w	r3, [sp, #4]
		transmitReceiveData(tx_data, rx_data);
 80008f0:	466a      	mov	r2, sp
 80008f2:	a901      	add	r1, sp, #4
 80008f4:	4620      	mov	r0, r4
 80008f6:	f7ff fd93 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		MODIFY(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] ^= (1 << 1));
 80008fa:	2313      	movs	r3, #19
 80008fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8000900:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000904:	f88d 3005 	strb.w	r3, [sp, #5]
 8000908:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800090c:	f083 0302 	eor.w	r3, r3, #2
 8000910:	f88d 3002 	strb.w	r3, [sp, #2]
 8000914:	f88d 3006 	strb.w	r3, [sp, #6]
		transmitReceiveData(tx_data, rx_data);
 8000918:	466a      	mov	r2, sp
 800091a:	a901      	add	r1, sp, #4
 800091c:	4620      	mov	r0, r4
 800091e:	f7ff fd7f 	bl	8000420 <_ZN9SmartFuse19transmitReceiveDataEPhS0_>
		this->watch_dog.restart();
 8000922:	4628      	mov	r0, r5
 8000924:	f000 fb44 	bl	8000fb0 <_ZN5Timer7restartEv>
		this->toggle = !this->toggle;
 8000928:	7823      	ldrb	r3, [r4, #0]
 800092a:	f083 0301 	eor.w	r3, r3, #1
 800092e:	7023      	strb	r3, [r4, #0]
 8000930:	e7d3      	b.n	80008da <_ZN9SmartFuse12handle_timerEv+0x2a>
 8000932:	bf00      	nop
 8000934:	08002954 	.word	0x08002954

08000938 <_ZN16SmartFuseHandlerILi4EE8init_allEv>:

template <int num_of_sf>
bool SmartFuseHandler<num_of_sf>::init_all()
 8000938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800093c:	b0a1      	sub	sp, #132	; 0x84
      return p_buffer;
 800093e:	6845      	ldr	r5, [r0, #4]
      return p_end;
 8000940:	f8d0 9008 	ldr.w	r9, [r0, #8]
{
	bool result = false;

	for(auto smart_fuse : smart_fuses)
 8000944:	454d      	cmp	r5, r9
 8000946:	d07e      	beq.n	8000a46 <_ZN16SmartFuseHandlerILi4EE8init_allEv+0x10e>
 8000948:	4680      	mov	r8, r0
 800094a:	357a      	adds	r5, #122	; 0x7a
	bool result = false;
 800094c:	2700      	movs	r7, #0
	{
		for(auto sf = this->smart_fuses.begin(); sf != &smart_fuse; ++sf)
 800094e:	466e      	mov	r6, sp
 8000950:	e01b      	b.n	800098a <_ZN16SmartFuseHandlerILi4EE8init_allEv+0x52>
class SmartFuse
 8000952:	f854 3c02 	ldr.w	r3, [r4, #-2]
 8000956:	931e      	str	r3, [sp, #120]	; 0x78
 8000958:	78a3      	ldrb	r3, [r4, #2]
 800095a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
      return p_buffer;
 800095e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8000962:	42b4      	cmp	r4, r6
 8000964:	d005      	beq.n	8000972 <_ZN16SmartFuseHandlerILi4EE8init_allEv+0x3a>
			sf->handle_timer();
 8000966:	4620      	mov	r0, r4
 8000968:	f7ff ffa2 	bl	80008b0 <_ZN9SmartFuse12handle_timerEv>
		for(auto sf = this->smart_fuses.begin(); sf != &smart_fuse; ++sf)
 800096c:	3480      	adds	r4, #128	; 0x80
 800096e:	42b4      	cmp	r4, r6
 8000970:	d1f9      	bne.n	8000966 <_ZN16SmartFuseHandlerILi4EE8init_allEv+0x2e>
		if(smart_fuse.init() != SmartFuseState::Ok) result = true;
 8000972:	4630      	mov	r0, r6
 8000974:	f7ff fdb4 	bl	80004e0 <_ZN9SmartFuse4initEv>
 8000978:	2800      	cmp	r0, #0
 800097a:	bf18      	it	ne
 800097c:	2701      	movne	r7, #1
	for(auto smart_fuse : smart_fuses)
 800097e:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8000982:	3506      	adds	r5, #6
 8000984:	45a9      	cmp	r9, r5
 8000986:	d05f      	beq.n	8000a48 <_ZN16SmartFuseHandlerILi4EE8init_allEv+0x110>
 8000988:	461d      	mov	r5, r3
 800098a:	462c      	mov	r4, r5
 800098c:	f815 3c7a 	ldrb.w	r3, [r5, #-122]
 8000990:	f88d 3000 	strb.w	r3, [sp]
 8000994:	f815 3c79 	ldrb.w	r3, [r5, #-121]
 8000998:	f88d 3001 	strb.w	r3, [sp, #1]
 800099c:	f855 3c76 	ldr.w	r3, [r5, #-118]
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	f1a5 036a 	sub.w	r3, r5, #106	; 0x6a
 80009a6:	4669      	mov	r1, sp
 80009a8:	4608      	mov	r0, r1
 80009aa:	f1a5 0e3a 	sub.w	lr, r5, #58	; 0x3a
 80009ae:	4602      	mov	r2, r0
		struct Fuse
 80009b0:	f813 cc08 	ldrb.w	ip, [r3, #-8]
 80009b4:	f880 c008 	strb.w	ip, [r0, #8]
 80009b8:	3008      	adds	r0, #8
 80009ba:	f833 cc06 	ldrh.w	ip, [r3, #-6]
 80009be:	f8a2 c00a 	strh.w	ip, [r2, #10]
      : first(other.first)
 80009c2:	f833 cc04 	ldrh.w	ip, [r3, #-4]
      , second(other.second)
 80009c6:	f8a2 c00c 	strh.w	ip, [r2, #12]
 80009ca:	f833 cc02 	ldrh.w	ip, [r3, #-2]
 80009ce:	f8a2 c00e 	strh.w	ip, [r2, #14]
class SmartFuse
 80009d2:	3308      	adds	r3, #8
 80009d4:	4573      	cmp	r3, lr
 80009d6:	d1ea      	bne.n	80009ae <_ZN16SmartFuseHandlerILi4EE8init_allEv+0x76>
 80009d8:	f854 3c42 	ldr.w	r3, [r4, #-66]
 80009dc:	930e      	str	r3, [sp, #56]	; 0x38
 80009de:	f854 3c3e 	ldr.w	r3, [r4, #-62]
 80009e2:	930f      	str	r3, [sp, #60]	; 0x3c
struct FusesSettings
 80009e4:	f854 0c3a 	ldr.w	r0, [r4, #-58]
 80009e8:	9010      	str	r0, [sp, #64]	; 0x40
 80009ea:	f834 3c36 	ldrh.w	r3, [r4, #-54]
 80009ee:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80009f2:	f854 3c34 	ldr.w	r3, [r4, #-52]
 80009f6:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
 80009fa:	f834 3c30 	ldrh.w	r3, [r4, #-48]
 80009fe:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8000a02:	f854 0c2e 	ldr.w	r0, [r4, #-46]
 8000a06:	9013      	str	r0, [sp, #76]	; 0x4c
 8000a08:	f834 3c2a 	ldrh.w	r3, [r4, #-42]
 8000a0c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 8000a10:	f854 0c28 	ldr.w	r0, [r4, #-40]
 8000a14:	f854 2c24 	ldr.w	r2, [r4, #-36]
 8000a18:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8000a1c:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8000a20:	f8cd 2056 	str.w	r2, [sp, #86]	; 0x56
 8000a24:	f8cd 305a 	str.w	r3, [sp, #90]	; 0x5a
 8000a28:	f1a5 0318 	sub.w	r3, r5, #24
      : first(other.first)
 8000a2c:	f833 2c04 	ldrh.w	r2, [r3, #-4]
      , second(other.second)
 8000a30:	f8a1 205e 	strh.w	r2, [r1, #94]	; 0x5e
 8000a34:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8000a38:	f8a1 2060 	strh.w	r2, [r1, #96]	; 0x60
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	3104      	adds	r1, #4
 8000a40:	42ab      	cmp	r3, r5
 8000a42:	d1f3      	bne.n	8000a2c <_ZN16SmartFuseHandlerILi4EE8init_allEv+0xf4>
 8000a44:	e785      	b.n	8000952 <_ZN16SmartFuseHandlerILi4EE8init_allEv+0x1a>
	bool result = false;
 8000a46:	2700      	movs	r7, #0
	}

	return result;
}
 8000a48:	4638      	mov	r0, r7
 8000a4a:	b021      	add	sp, #132	; 0x84
 8000a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a50 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b64      	ldr	r3, [pc, #400]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a63      	ldr	r2, [pc, #396]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b61      	ldr	r3, [pc, #388]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	4b5e      	ldr	r3, [pc, #376]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	4a5d      	ldr	r2, [pc, #372]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8a:	4b5b      	ldr	r3, [pc, #364]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b58      	ldr	r3, [pc, #352]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a57      	ldr	r2, [pc, #348]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b55      	ldr	r3, [pc, #340]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b52      	ldr	r3, [pc, #328]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4b4f      	ldr	r3, [pc, #316]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac6:	4b4c      	ldr	r3, [pc, #304]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a4b      	ldr	r2, [pc, #300]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b49      	ldr	r3, [pc, #292]	; (8000bf8 <MX_GPIO_Init+0x1a8>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	4846      	ldr	r0, [pc, #280]	; (8000bfc <MX_GPIO_Init+0x1ac>)
 8000ae4:	f000 fe7c 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	211e      	movs	r1, #30
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f000 fe76 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000afa:	4841      	ldr	r0, [pc, #260]	; (8000c00 <MX_GPIO_Init+0x1b0>)
 8000afc:	f000 fe70 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000b00:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b06:	2303      	movs	r3, #3
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4839      	ldr	r0, [pc, #228]	; (8000bfc <MX_GPIO_Init+0x1ac>)
 8000b16:	f000 fcd1 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4832      	ldr	r0, [pc, #200]	; (8000bfc <MX_GPIO_Init+0x1ac>)
 8000b32:	f000 fcc3 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000b36:	f248 7301 	movw	r3, #34561	; 0x8701
 8000b3a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 fcb5 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000b52:	231e      	movs	r3, #30
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f000 fca6 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000b70:	2357      	movs	r3, #87	; 0x57
 8000b72:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	481f      	ldr	r0, [pc, #124]	; (8000c00 <MX_GPIO_Init+0x1b0>)
 8000b84:	f000 fc9a 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000b88:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000b8c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4818      	ldr	r0, [pc, #96]	; (8000c00 <MX_GPIO_Init+0x1b0>)
 8000b9e:	f000 fc8d 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <MX_GPIO_Init+0x1b4>)
 8000bb6:	f000 fc81 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000bba:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480b      	ldr	r0, [pc, #44]	; (8000c00 <MX_GPIO_Init+0x1b0>)
 8000bd4:	f000 fc72 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_GPIO_Init+0x1b8>)
 8000bec:	f000 fc66 	bl	80014bc <HAL_GPIO_Init>

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	48000400 	.word	0x48000400
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	48001c00 	.word	0x48001c00

08000c0c <Error_Handler>:
/**
 *@brief  This function is executed in case of error occurrence.
 *@retval None
 */
void Error_Handler(void)
{
 8000c0c:	b508      	push	{r3, lr}
	/*USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_OK, GPIO_PIN_SET);
 8000c0e:	4c0b      	ldr	r4, [pc, #44]	; (8000c3c <Error_Handler+0x30>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	4611      	mov	r1, r2
 8000c14:	4620      	mov	r0, r4
 8000c16:	f000 fde3 	bl	80017e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING1, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f000 fdde 	bl	80017e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING2, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2104      	movs	r1, #4
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f000 fdd9 	bl	80017e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2108      	movs	r1, #8
 8000c32:	4620      	mov	r0, r4
 8000c34:	f000 fdd4 	bl	80017e0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
	__disable_irq();
	while (1) {}
 8000c3a:	e7fe      	b.n	8000c3a <Error_Handler+0x2e>
 8000c3c:	48000800 	.word	0x48000800

08000c40 <_Z18SystemClock_Configv>:
{
 8000c40:	b500      	push	{lr}
 8000c42:	b099      	sub	sp, #100	; 0x64
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c44:	2248      	movs	r2, #72	; 0x48
 8000c46:	2100      	movs	r1, #0
 8000c48:	a806      	add	r0, sp, #24
 8000c4a:	f001 fe6f 	bl	800292c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	9303      	str	r3, [sp, #12]
 8000c56:	9304      	str	r3, [sp, #16]
 8000c58:	9305      	str	r3, [sp, #20]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c5e:	f000 fdf7 	bl	8001850 <HAL_PWREx_ControlVoltageScaling>
 8000c62:	b9d0      	cbnz	r0, 8000c9a <_Z18SystemClock_Configv+0x5a>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c64:	2310      	movs	r3, #16
 8000c66:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c70:	2260      	movs	r2, #96	; 0x60
 8000c72:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c74:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	a806      	add	r0, sp, #24
 8000c78:	f000 fe8e 	bl	8001998 <HAL_RCC_OscConfig>
 8000c7c:	b978      	cbnz	r0, 8000c9e <_Z18SystemClock_Configv+0x5e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000c7e:	230f      	movs	r3, #15
 8000c80:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c82:	2100      	movs	r1, #0
 8000c84:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c86:	9103      	str	r1, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c88:	9104      	str	r1, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8a:	9105      	str	r1, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c8c:	a801      	add	r0, sp, #4
 8000c8e:	f001 fb0b 	bl	80022a8 <HAL_RCC_ClockConfig>
 8000c92:	b930      	cbnz	r0, 8000ca2 <_Z18SystemClock_Configv+0x62>
}
 8000c94:	b019      	add	sp, #100	; 0x64
 8000c96:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8000c9a:	f7ff ffb7 	bl	8000c0c <Error_Handler>
		Error_Handler();
 8000c9e:	f7ff ffb5 	bl	8000c0c <Error_Handler>
		Error_Handler();
 8000ca2:	f7ff ffb3 	bl	8000c0c <Error_Handler>
	...

08000ca8 <main>:
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
      : CAPACITY(max_size_)
 8000cae:	2604      	movs	r6, #4
 8000cb0:	9611      	str	r6, [sp, #68]	; 0x44
    /// Constructor.
    //*********************************************************************
    ivector(T* p_buffer_, size_t MAX_SIZE)
      : vector_base(MAX_SIZE)
      , p_buffer(p_buffer_)
      , p_end(p_buffer_)
 8000cb2:	ad14      	add	r5, sp, #80	; 0x50
 8000cb4:	9512      	str	r5, [sp, #72]	; 0x48
 8000cb6:	9513      	str	r5, [sp, #76]	; 0x4c
	FusesSettings fuses_settings
 8000cb8:	ac03      	add	r4, sp, #12
 8000cba:	2301      	movs	r3, #1
 8000cbc:	7023      	strb	r3, [r4, #0]
 8000cbe:	7063      	strb	r3, [r4, #1]
 8000cc0:	70a3      	strb	r3, [r4, #2]
 8000cc2:	70e3      	strb	r3, [r4, #3]
 8000cc4:	7123      	strb	r3, [r4, #4]
 8000cc6:	7163      	strb	r3, [r4, #5]
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <main+0xe0>)
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	f8cd 0012 	str.w	r0, [sp, #18]
 8000cd0:	889b      	ldrh	r3, [r3, #4]
 8000cd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	7323      	strb	r3, [r4, #12]
 8000cda:	7363      	strb	r3, [r4, #13]
 8000cdc:	73a3      	strb	r3, [r4, #14]
 8000cde:	73e3      	strb	r3, [r4, #15]
 8000ce0:	7423      	strb	r3, [r4, #16]
 8000ce2:	7463      	strb	r3, [r4, #17]
 8000ce4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000ce8:	8263      	strh	r3, [r4, #18]
 8000cea:	82a3      	strh	r3, [r4, #20]
 8000cec:	82e3      	strh	r3, [r4, #22]
 8000cee:	8323      	strh	r3, [r4, #24]
 8000cf0:	8363      	strh	r3, [r4, #26]
 8000cf2:	83a3      	strh	r3, [r4, #28]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	83e2      	strh	r2, [r4, #30]
 8000cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfc:	8423      	strh	r3, [r4, #32]
 8000cfe:	8462      	strh	r2, [r4, #34]	; 0x22
 8000d00:	84a3      	strh	r3, [r4, #36]	; 0x24
 8000d02:	84e2      	strh	r2, [r4, #38]	; 0x26
 8000d04:	8523      	strh	r3, [r4, #40]	; 0x28
 8000d06:	8562      	strh	r2, [r4, #42]	; 0x2a
 8000d08:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8000d0a:	85e2      	strh	r2, [r4, #46]	; 0x2e
 8000d0c:	8623      	strh	r3, [r4, #48]	; 0x30
 8000d0e:	8662      	strh	r2, [r4, #50]	; 0x32
 8000d10:	86a3      	strh	r3, [r4, #52]	; 0x34
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d12:	4f1e      	ldr	r7, [pc, #120]	; (8000d8c <main+0xe4>)
 8000d14:	9400      	str	r4, [sp, #0]
 8000d16:	463b      	mov	r3, r7
 8000d18:	2202      	movs	r2, #2
 8000d1a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d1e:	4628      	mov	r0, r5
 8000d20:	f7ff fb21 	bl	8000366 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000d24:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000d26:	3080      	adds	r0, #128	; 0x80
 8000d28:	9013      	str	r0, [sp, #76]	; 0x4c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d2a:	9400      	str	r4, [sp, #0]
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4632      	mov	r2, r6
 8000d30:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d34:	f7ff fb17 	bl	8000366 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000d38:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000d3a:	3080      	adds	r0, #128	; 0x80
 8000d3c:	9013      	str	r0, [sp, #76]	; 0x4c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d3e:	9400      	str	r4, [sp, #0]
 8000d40:	463b      	mov	r3, r7
 8000d42:	2208      	movs	r2, #8
 8000d44:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d48:	f7ff fb0d 	bl	8000366 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000d4c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000d4e:	3080      	adds	r0, #128	; 0x80
 8000d50:	9013      	str	r0, [sp, #76]	; 0x4c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d52:	9400      	str	r4, [sp, #0]
 8000d54:	463b      	mov	r3, r7
 8000d56:	2210      	movs	r2, #16
 8000d58:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d5c:	f7ff fb03 	bl	8000366 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000d60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000d62:	3380      	adds	r3, #128	; 0x80
 8000d64:	9313      	str	r3, [sp, #76]	; 0x4c
	HAL_Init();
 8000d66:	f000 f952 	bl	800100e <HAL_Init>
	SystemClock_Config();
 8000d6a:	f7ff ff69 	bl	8000c40 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8000d6e:	f7ff fe6f 	bl	8000a50 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000d72:	f7ff fa43 	bl	80001fc <MX_CAN1_Init>
	MX_SPI1_Init();
 8000d76:	f000 f817 	bl	8000da8 <MX_SPI1_Init>
	sf_handler.init_all();
 8000d7a:	a811      	add	r0, sp, #68	; 0x44
 8000d7c:	f7ff fddc 	bl	8000938 <_ZN16SmartFuseHandlerILi4EE8init_allEv>
		sf_handler.handle_all();
 8000d80:	a811      	add	r0, sp, #68	; 0x44
 8000d82:	f7ff fd15 	bl	80007b0 <_ZN16SmartFuseHandlerILi4EE10handle_allEv>
	while (1)
 8000d86:	e7fb      	b.n	8000d80 <main+0xd8>
 8000d88:	08002958 	.word	0x08002958
 8000d8c:	20000058 	.word	0x20000058

08000d90 <_GLOBAL__sub_I_fuse_watch_dog>:

	/*USER CODE END Error_Handler_Debug */
}
 8000d90:	b508      	push	{r3, lr}
Timer fuse_watch_dog;
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <_GLOBAL__sub_I_fuse_watch_dog+0x10>)
 8000d94:	f000 f8fe 	bl	8000f94 <_ZN5TimerC1Ev>
Timer fuses_cotrol;
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <_GLOBAL__sub_I_fuse_watch_dog+0x14>)
 8000d9a:	f000 f8fb 	bl	8000f94 <_ZN5TimerC1Ev>
}
 8000d9e:	bd08      	pop	{r3, pc}
 8000da0:	20000050 	.word	0x20000050
 8000da4:	20000054 	.word	0x20000054

08000da8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000dae:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <MX_SPI1_Init+0xa4>)
 8000db0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000dc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000dde:	2218      	movs	r2, #24
 8000de0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000df6:	2207      	movs	r2, #7
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e06:	4810      	ldr	r0, [pc, #64]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000e08:	f001 fcc8 	bl	800279c <HAL_SPI_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f7ff fefb 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e24:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e30:	2b40      	cmp	r3, #64	; 0x40
 8000e32:	d007      	beq.n	8000e44 <MX_SPI1_Init+0x9c>
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <MX_SPI1_Init+0xa0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e42:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000058 	.word	0x20000058
 8000e4c:	40013000 	.word	0x40013000

08000e50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_SPI_MspInit+0x7c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d128      	bne.n	8000ec4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ea2:	23e0      	movs	r3, #224	; 0xe0
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f000 fafc 	bl	80014bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40013000 	.word	0x40013000
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x44>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_MspInit+0x44>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_MspInit+0x44>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_MspInit+0x44>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x44>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x44>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 f8a6 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 8000f94:	b510      	push	{r4, lr}
 8000f96:	4604      	mov	r4, r0
{
	this->start_time = HAL_GetTick();
 8000f98:	f000 f8a2 	bl	80010e0 <HAL_GetTick>
 8000f9c:	6020      	str	r0, [r4, #0]
}
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	bd10      	pop	{r4, pc}

08000fa2 <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 8000fa2:	b510      	push	{r4, lr}
 8000fa4:	4604      	mov	r4, r0
	return HAL_GetTick() - this->start_time;
 8000fa6:	f000 f89b 	bl	80010e0 <HAL_GetTick>
 8000faa:	6823      	ldr	r3, [r4, #0]
}
 8000fac:	1ac0      	subs	r0, r0, r3
 8000fae:	bd10      	pop	{r4, pc}

08000fb0 <_ZN5Timer7restartEv>:

void Timer::restart()
{
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	4604      	mov	r4, r0
	this->start_time = HAL_GetTick();
 8000fb4:	f000 f894 	bl	80010e0 <HAL_GetTick>
 8000fb8:	6020      	str	r0, [r4, #0]
}
 8000fba:	bd10      	pop	{r4, pc}

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff ffd6 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f001 fc7b 	bl	80028e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff fe5b 	bl	8000ca8 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001000:	080029ac 	.word	0x080029ac
  ldr r2, =_sbss
 8001004:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001008:	200000c0 	.word	0x200000c0

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>

0800100e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 fa1b 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101e:	200f      	movs	r0, #15
 8001020:	f000 f80e 	bl	8001040 <HAL_InitTick>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	e001      	b.n	8001034 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001030:	f7ff ff50 	bl	8000ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001034:	79fb      	ldrb	r3, [r7, #7]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_InitTick+0x6c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d023      	beq.n	800109c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_InitTick+0x70>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_InitTick+0x6c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fa19 	bl	80014a2 <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10f      	bne.n	8001096 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d809      	bhi.n	8001090 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f000 f9f1 	bl	800146a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_InitTick+0x74>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e007      	b.n	80010a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e004      	b.n	80010a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e001      	b.n	80010a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008
 80010dc:	200000bc 	.word	0x200000bc

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200000bc 	.word	0x200000bc

080010f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0ed      	b.n	80012e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff f8a4 	bl	8000264 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800112c:	f7ff ffd8 	bl	80010e0 <HAL_GetTick>
 8001130:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001132:	e012      	b.n	800115a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001134:	f7ff ffd4 	bl	80010e0 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d90b      	bls.n	800115a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2205      	movs	r2, #5
 8001152:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e0c5      	b.n	80012e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0e5      	beq.n	8001134 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0202 	bic.w	r2, r2, #2
 8001176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001178:	f7ff ffb2 	bl	80010e0 <HAL_GetTick>
 800117c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800117e:	e012      	b.n	80011a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001180:	f7ff ffae 	bl	80010e0 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b0a      	cmp	r3, #10
 800118c:	d90b      	bls.n	80011a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2205      	movs	r2, #5
 800119e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e09f      	b.n	80012e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e5      	bne.n	8001180 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7e1b      	ldrb	r3, [r3, #24]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e007      	b.n	80011de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7e5b      	ldrb	r3, [r3, #25]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d108      	bne.n	80011f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e007      	b.n	8001208 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001206:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7e9b      	ldrb	r3, [r3, #26]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0220 	orr.w	r2, r2, #32
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e007      	b.n	8001232 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0220 	bic.w	r2, r2, #32
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7edb      	ldrb	r3, [r3, #27]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d108      	bne.n	800124c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0210 	bic.w	r2, r2, #16
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e007      	b.n	800125c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0210 	orr.w	r2, r2, #16
 800125a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7f1b      	ldrb	r3, [r3, #28]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d108      	bne.n	8001276 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0208 	orr.w	r2, r2, #8
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e007      	b.n	8001286 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0208 	bic.w	r2, r2, #8
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7f5b      	ldrb	r3, [r3, #29]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d108      	bne.n	80012a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 0204 	orr.w	r2, r2, #4
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e007      	b.n	80012b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0204 	bic.w	r2, r2, #4
 80012ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	ea42 0103 	orr.w	r1, r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff8e 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff47 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff5c 	bl	8001338 <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff8e 	bl	80013a8 <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5d 	bl	8001354 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffb0 	bl	8001410 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	e166      	b.n	800179a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8158 	beq.w	8001794 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d005      	beq.n	80014fc <HAL_GPIO_Init+0x40>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d130      	bne.n	800155e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001532:	2201      	movs	r2, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f003 0201 	and.w	r2, r3, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b03      	cmp	r3, #3
 8001568:	d017      	beq.n	800159a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d123      	bne.n	80015ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	6939      	ldr	r1, [r7, #16]
 80015ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0203 	and.w	r2, r3, #3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80b2 	beq.w	8001794 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001630:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_GPIO_Init+0x2fc>)
 8001632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001634:	4a60      	ldr	r2, [pc, #384]	; (80017b8 <HAL_GPIO_Init+0x2fc>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6613      	str	r3, [r2, #96]	; 0x60
 800163c:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <HAL_GPIO_Init+0x2fc>)
 800163e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001648:	4a5c      	ldr	r2, [pc, #368]	; (80017bc <HAL_GPIO_Init+0x300>)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001672:	d02b      	beq.n	80016cc <HAL_GPIO_Init+0x210>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_GPIO_Init+0x304>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d025      	beq.n	80016c8 <HAL_GPIO_Init+0x20c>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <HAL_GPIO_Init+0x308>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d01f      	beq.n	80016c4 <HAL_GPIO_Init+0x208>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a50      	ldr	r2, [pc, #320]	; (80017c8 <HAL_GPIO_Init+0x30c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d019      	beq.n	80016c0 <HAL_GPIO_Init+0x204>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a4f      	ldr	r2, [pc, #316]	; (80017cc <HAL_GPIO_Init+0x310>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d013      	beq.n	80016bc <HAL_GPIO_Init+0x200>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_GPIO_Init+0x314>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1fc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <HAL_GPIO_Init+0x318>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1f8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <HAL_GPIO_Init+0x31c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1f4>
 80016ac:	2307      	movs	r3, #7
 80016ae:	e00e      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016b0:	2308      	movs	r3, #8
 80016b2:	e00c      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016b4:	2306      	movs	r3, #6
 80016b6:	e00a      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016b8:	2305      	movs	r3, #5
 80016ba:	e008      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016bc:	2304      	movs	r3, #4
 80016be:	e006      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016c0:	2303      	movs	r3, #3
 80016c2:	e004      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e002      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_GPIO_Init+0x212>
 80016cc:	2300      	movs	r3, #0
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	f002 0203 	and.w	r2, r2, #3
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	4093      	lsls	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016de:	4937      	ldr	r1, [pc, #220]	; (80017bc <HAL_GPIO_Init+0x300>)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_GPIO_Init+0x320>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001710:	4a32      	ldr	r2, [pc, #200]	; (80017dc <HAL_GPIO_Init+0x320>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <HAL_GPIO_Init+0x320>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800173a:	4a28      	ldr	r2, [pc, #160]	; (80017dc <HAL_GPIO_Init+0x320>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_GPIO_Init+0x320>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_GPIO_Init+0x320>)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_GPIO_Init+0x320>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <HAL_GPIO_Init+0x320>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f47f ae91 	bne.w	80014cc <HAL_GPIO_Init+0x10>
  }
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000
 80017c0:	48000400 	.word	0x48000400
 80017c4:	48000800 	.word	0x48000800
 80017c8:	48000c00 	.word	0x48000c00
 80017cc:	48001000 	.word	0x48001000
 80017d0:	48001400 	.word	0x48001400
 80017d4:	48001800 	.word	0x48001800
 80017d8:	48001c00 	.word	0x48001c00
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800181c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001820:	d102      	bne.n	8001828 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001826:	e00b      	b.n	8001840 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_PWREx_GetVoltageRange+0x3c>)
 800182a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001836:	d102      	bne.n	800183e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800183c:	e000      	b.n	8001840 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800183e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40007000 	.word	0x40007000

08001850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d141      	bne.n	80018e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800185e:	4b4b      	ldr	r3, [pc, #300]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186a:	d131      	bne.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800186c:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001872:	4a46      	ldr	r2, [pc, #280]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800187c:	4b43      	ldr	r3, [pc, #268]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001884:	4a41      	ldr	r2, [pc, #260]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800188c:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2232      	movs	r2, #50	; 0x32
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	4a3f      	ldr	r2, [pc, #252]	; (8001994 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	0c9b      	lsrs	r3, r3, #18
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a2:	e002      	b.n	80018aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b6:	d102      	bne.n	80018be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f2      	bne.n	80018a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018be:	4b33      	ldr	r3, [pc, #204]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ca:	d158      	bne.n	800197e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e057      	b.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018d0:	4b2e      	ldr	r3, [pc, #184]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018d6:	4a2d      	ldr	r2, [pc, #180]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018e0:	e04d      	b.n	800197e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e8:	d141      	bne.n	800196e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ea:	4b28      	ldr	r3, [pc, #160]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f6:	d131      	bne.n	800195c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018fe:	4a23      	ldr	r2, [pc, #140]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001904:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001910:	4a1e      	ldr	r2, [pc, #120]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001916:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2232      	movs	r2, #50	; 0x32
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	3301      	adds	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800192e:	e002      	b.n	8001936 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3b01      	subs	r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001942:	d102      	bne.n	800194a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f2      	bne.n	8001930 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001956:	d112      	bne.n	800197e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e011      	b.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800196c:	e007      	b.n	800197e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001978:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40007000 	.word	0x40007000
 8001990:	20000000 	.word	0x20000000
 8001994:	431bde83 	.word	0x431bde83

08001998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f000 bc76 	b.w	8002298 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ac:	4b97      	ldr	r3, [pc, #604]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b6:	4b95      	ldr	r3, [pc, #596]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80e6 	beq.w	8001b9a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4c>
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	f040 808d 	bne.w	8001af6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 8089 	bne.w	8001af6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019e4:	4b89      	ldr	r3, [pc, #548]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_RCC_OscConfig+0x66>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f000 bc4d 	b.w	8002298 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a02:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_RCC_OscConfig+0x80>
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a16:	e005      	b.n	8001a24 <HAL_RCC_OscConfig+0x8c>
 8001a18:	4b7c      	ldr	r3, [pc, #496]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d224      	bcs.n	8001a72 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fdf3 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f000 bc2d 	b.w	8002298 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a72      	ldr	r2, [pc, #456]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	496d      	ldr	r1, [pc, #436]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5c:	4b6b      	ldr	r3, [pc, #428]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	4968      	ldr	r1, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e025      	b.n	8001abe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a72:	4b66      	ldr	r3, [pc, #408]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a65      	ldr	r2, [pc, #404]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	4960      	ldr	r1, [pc, #384]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a90:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	495b      	ldr	r1, [pc, #364]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fdb2 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e3ec      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001abe:	f000 fd1f 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b51      	ldr	r3, [pc, #324]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	4950      	ldr	r1, [pc, #320]	; (8001c10 <HAL_RCC_OscConfig+0x278>)
 8001ad0:	5ccb      	ldrb	r3, [r1, r3]
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	4a4e      	ldr	r2, [pc, #312]	; (8001c14 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ade:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff faac 	bl	8001040 <HAL_InitTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d052      	beq.n	8001b98 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	e3d0      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d032      	beq.n	8001b64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001afe:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a42      	ldr	r2, [pc, #264]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fae9 	bl	80010e0 <HAL_GetTick>
 8001b0e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b12:	f7ff fae5 	bl	80010e0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e3b9      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b24:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a35      	ldr	r2, [pc, #212]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b33      	ldr	r3, [pc, #204]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	4930      	ldr	r1, [pc, #192]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	492b      	ldr	r1, [pc, #172]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
 8001b62:	e01a      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a28      	ldr	r2, [pc, #160]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fab6 	bl	80010e0 <HAL_GetTick>
 8001b74:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b78:	f7ff fab2 	bl	80010e0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e386      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1e0>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d073      	beq.n	8001c8e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x220>
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d063      	beq.n	8001c8c <HAL_RCC_OscConfig+0x2f4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d15f      	bne.n	8001c8c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e363      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x250>
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e025      	b.n	8001c34 <HAL_RCC_OscConfig+0x29c>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf0:	d114      	bne.n	8001c1c <HAL_RCC_OscConfig+0x284>
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a02      	ldr	r2, [pc, #8]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e013      	b.n	8001c34 <HAL_RCC_OscConfig+0x29c>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	08002960 	.word	0x08002960
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	4b8f      	ldr	r3, [pc, #572]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a8e      	ldr	r2, [pc, #568]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b8c      	ldr	r3, [pc, #560]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a8b      	ldr	r2, [pc, #556]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fa50 	bl	80010e0 <HAL_GetTick>
 8001c40:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fa4c 	bl	80010e0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e320      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c56:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x2ac>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff fa3c 	bl	80010e0 <HAL_GetTick>
 8001c68:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fa38 	bl	80010e0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e30c      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7e:	4b77      	ldr	r3, [pc, #476]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x2d4>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d060      	beq.n	8001d5c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x314>
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d119      	bne.n	8001cda <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d116      	bne.n	8001cda <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cac:	4b6b      	ldr	r3, [pc, #428]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x32c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e2e9      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	4962      	ldr	r1, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd8:	e040      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d023      	beq.n	8001d2a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce2:	4b5e      	ldr	r3, [pc, #376]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a5d      	ldr	r2, [pc, #372]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff f9f7 	bl	80010e0 <HAL_GetTick>
 8001cf2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f9f3 	bl	80010e0 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e2c7      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d08:	4b54      	ldr	r3, [pc, #336]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	494e      	ldr	r1, [pc, #312]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e018      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a4b      	ldr	r2, [pc, #300]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f9d3 	bl	80010e0 <HAL_GetTick>
 8001d3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff f9cf 	bl	80010e0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e2a3      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d50:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8082 	beq.w	8001e6e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d05f      	beq.n	8001e32 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001d72:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d78:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d037      	beq.n	8001df8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e27b      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01b      	beq.n	8001de2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001daa:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db0:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dba:	f7ff f991 	bl	80010e0 <HAL_GetTick>
 8001dbe:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc2:	f7ff f98d 	bl	80010e0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b11      	cmp	r3, #17
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e261      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ef      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de8:	f023 0210 	bic.w	r2, r3, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	491a      	ldr	r1, [pc, #104]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff f96a 	bl	80010e0 <HAL_GetTick>
 8001e0c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff f966 	bl	80010e0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b11      	cmp	r3, #17
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e23a      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ef      	beq.n	8001e10 <HAL_RCC_OscConfig+0x478>
 8001e30:	e01d      	b.n	8001e6e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e38:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7ff f94d 	bl	80010e0 <HAL_GetTick>
 8001e46:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff f949 	bl	80010e0 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b11      	cmp	r3, #17
 8001e56:	d903      	bls.n	8001e60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e21d      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
 8001e5c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e60:	4b83      	ldr	r3, [pc, #524]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ed      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80bd 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e82:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10e      	bne.n	8001eac <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b78      	ldr	r3, [pc, #480]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a77      	ldr	r2, [pc, #476]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9a:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eac:	4b71      	ldr	r3, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x6dc>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d118      	bne.n	8001eea <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb8:	4b6e      	ldr	r3, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x6dc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6d      	ldr	r2, [pc, #436]	; (8002074 <HAL_RCC_OscConfig+0x6dc>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f90c 	bl	80010e0 <HAL_GetTick>
 8001ec8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7ff f908 	bl	80010e0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1dc      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ede:	4b65      	ldr	r3, [pc, #404]	; (8002074 <HAL_RCC_OscConfig+0x6dc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d02c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001ef6:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	4959      	ldr	r1, [pc, #356]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d010      	beq.n	8001f3e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f1c:	4b54      	ldr	r3, [pc, #336]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	4a53      	ldr	r2, [pc, #332]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	4a4f      	ldr	r2, [pc, #316]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3c:	e018      	b.n	8001f70 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f3e:	4b4c      	ldr	r3, [pc, #304]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f4e:	e00f      	b.n	8001f70 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f50:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a46      	ldr	r2, [pc, #280]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f60:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f68:	f023 0304 	bic.w	r3, r3, #4
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d016      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7ff f8b2 	bl	80010e0 <HAL_GetTick>
 8001f7c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7ff f8ae 	bl	80010e0 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e180      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ed      	beq.n	8001f80 <HAL_RCC_OscConfig+0x5e8>
 8001fa4:	e01d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f89b 	bl	80010e0 <HAL_GetTick>
 8001faa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff f897 	bl	80010e0 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e169      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ed      	bne.n	8001fae <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	4a25      	ldr	r2, [pc, #148]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d041      	beq.n	8002086 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01c      	beq.n	8002044 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 800200c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002010:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7ff f861 	bl	80010e0 <HAL_GetTick>
 800201e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002022:	f7ff f85d 	bl	80010e0 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e131      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8002036:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ef      	beq.n	8002022 <HAL_RCC_OscConfig+0x68a>
 8002042:	e020      	b.n	8002086 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 8002046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_OscConfig+0x6d8>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7ff f844 	bl	80010e0 <HAL_GetTick>
 8002058:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800205a:	e00d      	b.n	8002078 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800205c:	f7ff f840 	bl	80010e0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d906      	bls.n	8002078 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e114      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002078:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 800207a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ea      	bne.n	800205c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8103 	beq.w	8002296 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	2b02      	cmp	r3, #2
 8002096:	f040 80cb 	bne.w	8002230 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800209a:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0203 	and.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d12c      	bne.n	8002108 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	3b01      	subs	r3, #1
 80020ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d123      	bne.n	8002108 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d11b      	bne.n	8002108 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d113      	bne.n	8002108 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	3b01      	subs	r3, #1
 80020ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d109      	bne.n	8002108 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	3b01      	subs	r3, #1
 8002102:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d06d      	beq.n	80021e4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d068      	beq.n	80021e0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800210e:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800211a:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0b6      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800212a:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5c      	ldr	r2, [pc, #368]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002134:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002136:	f7fe ffd3 	bl	80010e0 <HAL_GetTick>
 800213a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7fe ffcf 	bl	80010e0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0a3      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215c:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <HAL_RCC_OscConfig+0x90c>)
 8002162:	4013      	ands	r3, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800216c:	3a01      	subs	r2, #1
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002176:	0212      	lsls	r2, r2, #8
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800217e:	0852      	lsrs	r2, r2, #1
 8002180:	3a01      	subs	r2, #1
 8002182:	0552      	lsls	r2, r2, #21
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800218a:	0852      	lsrs	r2, r2, #1
 800218c:	3a01      	subs	r2, #1
 800218e:	0652      	lsls	r2, r2, #25
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002196:	06d2      	lsls	r2, r2, #27
 8002198:	430a      	orrs	r2, r1
 800219a:	4941      	ldr	r1, [pc, #260]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 800219c:	4313      	orrs	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021a0:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3e      	ldr	r2, [pc, #248]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021ac:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 80021b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b8:	f7fe ff92 	bl	80010e0 <HAL_GetTick>
 80021bc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c0:	f7fe ff8e 	bl	80010e0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e062      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d2:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021de:	e05a      	b.n	8002296 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e059      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e4:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d152      	bne.n	8002296 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 80021f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021fc:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a27      	ldr	r2, [pc, #156]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002206:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002208:	f7fe ff6a 	bl	80010e0 <HAL_GetTick>
 800220c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe ff66 	bl	80010e0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e03a      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x878>
 800222e:	e032      	b.n	8002296 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d02d      	beq.n	8002292 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 800223c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002240:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002254:	f023 0303 	bic.w	r3, r3, #3
 8002258:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002260:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002268:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7fe ff39 	bl	80010e0 <HAL_GetTick>
 800226e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe ff35 	bl	80010e0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e009      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_OscConfig+0x908>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x8da>
 8002290:	e001      	b.n	8002296 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	019d800c 	.word	0x019d800c

080022a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e10f      	b.n	80024e0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b89      	ldr	r3, [pc, #548]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d910      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b86      	ldr	r3, [pc, #536]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 020f 	bic.w	r2, r3, #15
 80022d6:	4984      	ldr	r1, [pc, #528]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b82      	ldr	r3, [pc, #520]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0f7      	b.n	80024e0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8089 	beq.w	8002410 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d133      	bne.n	800236e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002306:	4b79      	ldr	r3, [pc, #484]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0e4      	b.n	80024e0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002316:	f000 f9d9 	bl	80026cc <RCC_GetSysClockFreqFromPLLSource>
 800231a:	4603      	mov	r3, r0
 800231c:	4a74      	ldr	r2, [pc, #464]	; (80024f0 <HAL_RCC_ClockConfig+0x248>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d955      	bls.n	80023ce <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002322:	4b72      	ldr	r3, [pc, #456]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10a      	bne.n	8002344 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800232e:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002336:	4a6d      	ldr	r2, [pc, #436]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800233c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e044      	b.n	80023ce <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d03e      	beq.n	80023ce <HAL_RCC_ClockConfig+0x126>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d13a      	bne.n	80023ce <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002360:	4a62      	ldr	r2, [pc, #392]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002366:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e02f      	b.n	80023ce <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002376:	4b5d      	ldr	r3, [pc, #372]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d115      	bne.n	80023ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0ac      	b.n	80024e0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800238e:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e0a0      	b.n	80024e0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239e:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e098      	b.n	80024e0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80023ae:	f000 f8a7 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a4e      	ldr	r2, [pc, #312]	; (80024f0 <HAL_RCC_ClockConfig+0x248>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d909      	bls.n	80023ce <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ba:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c2:	4a4a      	ldr	r2, [pc, #296]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4944      	ldr	r1, [pc, #272]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e0:	f7fe fe7e 	bl	80010e0 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7fe fe7a 	bl	80010e0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e070      	b.n	80024e0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4930      	ldr	r1, [pc, #192]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
 800242e:	e008      	b.n	8002442 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b80      	cmp	r3, #128	; 0x80
 8002434:	d105      	bne.n	8002442 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4a2c      	ldr	r2, [pc, #176]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800243c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002440:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002442:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d210      	bcs.n	8002472 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002450:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 020f 	bic.w	r2, r3, #15
 8002458:	4923      	ldr	r1, [pc, #140]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d001      	beq.n	8002472 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e036      	b.n	80024e0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4918      	ldr	r1, [pc, #96]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d009      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4910      	ldr	r1, [pc, #64]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b0:	f000 f826 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	490c      	ldr	r1, [pc, #48]	; (80024f4 <HAL_RCC_ClockConfig+0x24c>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x250>)
 80024ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x254>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fdb3 	bl	8001040 <HAL_InitTick>
 80024da:	4603      	mov	r3, r0
 80024dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	04c4b400 	.word	0x04c4b400
 80024f4:	08002960 	.word	0x08002960
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800250e:	4b3e      	ldr	r3, [pc, #248]	; (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002518:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x34>
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d121      	bne.n	8002572 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d11e      	bne.n	8002572 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002534:	4b34      	ldr	r3, [pc, #208]	; (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d107      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002540:	4b31      	ldr	r3, [pc, #196]	; (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 8002542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	e005      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <HAL_RCC_GetSysClockFreq+0x10c>)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10d      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d102      	bne.n	800257e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002578:	4b25      	ldr	r3, [pc, #148]	; (8002610 <HAL_RCC_GetSysClockFreq+0x110>)
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e004      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d101      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_RCC_GetSysClockFreq+0x114>)
 8002586:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d134      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d003      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0xac>
 80025a4:	e005      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <HAL_RCC_GetSysClockFreq+0x110>)
 80025a8:	617b      	str	r3, [r7, #20]
      break;
 80025aa:	e005      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ae:	617b      	str	r3, [r7, #20]
      break;
 80025b0:	e002      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	617b      	str	r3, [r7, #20]
      break;
 80025b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3301      	adds	r3, #1
 80025c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	fb03 f202 	mul.w	r2, r3, r2
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	0e5b      	lsrs	r3, r3, #25
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	3301      	adds	r3, #1
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025f8:	69bb      	ldr	r3, [r7, #24]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	08002970 	.word	0x08002970
 8002610:	00f42400 	.word	0x00f42400
 8002614:	007a1200 	.word	0x007a1200

08002618 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002630:	f7ff f8ee 	bl	8001810 <HAL_PWREx_GetVoltageRange>
 8002634:	6178      	str	r0, [r7, #20]
 8002636:	e014      	b.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	; 0x58
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002650:	f7ff f8de 	bl	8001810 <HAL_PWREx_GetVoltageRange>
 8002654:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002668:	d10b      	bne.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d913      	bls.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2ba0      	cmp	r3, #160	; 0xa0
 8002674:	d902      	bls.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002676:	2302      	movs	r3, #2
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	e00d      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e00a      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b7f      	cmp	r3, #127	; 0x7f
 8002686:	d902      	bls.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002688:	2302      	movs	r3, #2
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e004      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d101      	bne.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002694:	2301      	movs	r3, #1
 8002696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 020f 	bic.w	r2, r3, #15
 80026a0:	4909      	ldr	r1, [pc, #36]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40022000 	.word	0x40022000

080026cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80026d6:	4b2d      	ldr	r3, [pc, #180]	; (800278c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d118      	bne.n	8002714 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026e2:	4b2a      	ldr	r3, [pc, #168]	; (800278c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d107      	bne.n	80026fe <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026ee:	4b27      	ldr	r3, [pc, #156]	; (800278c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80026f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	e005      	b.n	800270a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026fe:	4b23      	ldr	r3, [pc, #140]	; (800278c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800270a:	4a21      	ldr	r2, [pc, #132]	; (8002790 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d003      	beq.n	800272c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d003      	beq.n	8002732 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800272a:	e005      	b.n	8002738 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800272e:	613b      	str	r3, [r7, #16]
    break;
 8002730:	e005      	b.n	800273e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002734:	613b      	str	r3, [r7, #16]
    break;
 8002736:	e002      	b.n	800273e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]
    break;
 800273c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	3301      	adds	r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	fb03 f202 	mul.w	r2, r3, r2
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0e5b      	lsrs	r3, r3, #25
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	3301      	adds	r3, #1
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800277e:	683b      	ldr	r3, [r7, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40021000 	.word	0x40021000
 8002790:	08002970 	.word	0x08002970
 8002794:	00f42400 	.word	0x00f42400
 8002798:	007a1200 	.word	0x007a1200

0800279c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e095      	b.n	80028da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027be:	d009      	beq.n	80027d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
 80027c6:	e005      	b.n	80027d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fb2e 	bl	8000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002814:	d902      	bls.n	800281c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e002      	b.n	8002822 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800281c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002820:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800282a:	d007      	beq.n	800283c <HAL_SPI_Init+0xa0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002834:	d002      	beq.n	800283c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	ea42 0103 	orr.w	r1, r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	f003 0204 	and.w	r2, r3, #4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028b8:	ea42 0103 	orr.w	r1, r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <__libc_init_array>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	4d0d      	ldr	r5, [pc, #52]	; (800291c <__libc_init_array+0x38>)
 80028e8:	4c0d      	ldr	r4, [pc, #52]	; (8002920 <__libc_init_array+0x3c>)
 80028ea:	1b64      	subs	r4, r4, r5
 80028ec:	10a4      	asrs	r4, r4, #2
 80028ee:	2600      	movs	r6, #0
 80028f0:	42a6      	cmp	r6, r4
 80028f2:	d109      	bne.n	8002908 <__libc_init_array+0x24>
 80028f4:	4d0b      	ldr	r5, [pc, #44]	; (8002924 <__libc_init_array+0x40>)
 80028f6:	4c0c      	ldr	r4, [pc, #48]	; (8002928 <__libc_init_array+0x44>)
 80028f8:	f000 f820 	bl	800293c <_init>
 80028fc:	1b64      	subs	r4, r4, r5
 80028fe:	10a4      	asrs	r4, r4, #2
 8002900:	2600      	movs	r6, #0
 8002902:	42a6      	cmp	r6, r4
 8002904:	d105      	bne.n	8002912 <__libc_init_array+0x2e>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	f855 3b04 	ldr.w	r3, [r5], #4
 800290c:	4798      	blx	r3
 800290e:	3601      	adds	r6, #1
 8002910:	e7ee      	b.n	80028f0 <__libc_init_array+0xc>
 8002912:	f855 3b04 	ldr.w	r3, [r5], #4
 8002916:	4798      	blx	r3
 8002918:	3601      	adds	r6, #1
 800291a:	e7f2      	b.n	8002902 <__libc_init_array+0x1e>
 800291c:	080029a0 	.word	0x080029a0
 8002920:	080029a0 	.word	0x080029a0
 8002924:	080029a0 	.word	0x080029a0
 8002928:	080029a8 	.word	0x080029a8

0800292c <memset>:
 800292c:	4402      	add	r2, r0
 800292e:	4603      	mov	r3, r0
 8002930:	4293      	cmp	r3, r2
 8002932:	d100      	bne.n	8002936 <memset+0xa>
 8002934:	4770      	bx	lr
 8002936:	f803 1b01 	strb.w	r1, [r3], #1
 800293a:	e7f9      	b.n	8002930 <memset+0x4>

0800293c <_init>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	bf00      	nop
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr

08002948 <_fini>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	bf00      	nop
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr
