
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08009590  08009590  00019590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a44  08009a44  00020280  2**0
                  CONTENTS
  4 .ARM          00000000  08009a44  08009a44  00020280  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a44  08009a44  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009a44  08009a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  08009a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000280  08009cd4  00020280  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08009cd4  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002af4b  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004367  00000000  00000000  0004b1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0004f568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00050ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033f31  00000000  00000000  00052070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001740a  00000000  00000000  00085fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013245a  00000000  00000000  0009d3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cf805  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006808  00000000  00000000  001cf858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000280 	.word	0x20000280
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009578 	.word	0x08009578

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000284 	.word	0x20000284
 80001fc:	08009578 	.word	0x08009578

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002a6:	f107 031c 	add.w	r3, r7, #28
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002c4:	4a2f      	ldr	r2, [pc, #188]	; (8000384 <MX_ADC1_Init+0xe4>)
 80002c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c8:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ce:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d4:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002da:	4b29      	ldr	r3, [pc, #164]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002e0:	4b27      	ldr	r3, [pc, #156]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002e2:	2204      	movs	r2, #4
 80002e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002e6:	4b26      	ldr	r3, [pc, #152]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ec:	4b24      	ldr	r3, [pc, #144]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f8:	4b21      	ldr	r3, [pc, #132]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000300:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000302:	2200      	movs	r2, #0
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000306:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000308:	2200      	movs	r2, #0
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800030c:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_ADC1_Init+0xe0>)
 800030e:	2200      	movs	r2, #0
 8000310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000316:	2200      	movs	r2, #0
 8000318:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_ADC1_Init+0xe0>)
 800031c:	2200      	movs	r2, #0
 800031e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000324:	f004 fbf4 	bl	8004b10 <HAL_ADC_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800032e:	f003 f88b 	bl	8003448 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000336:	f107 031c 	add.w	r3, r7, #28
 800033a:	4619      	mov	r1, r3
 800033c:	4810      	ldr	r0, [pc, #64]	; (8000380 <MX_ADC1_Init+0xe0>)
 800033e:	f005 f95b 	bl	80055f8 <HAL_ADCEx_MultiModeConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000348:	f003 f87e 	bl	8003448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_ADC1_Init+0xe8>)
 800034e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000350:	2306      	movs	r3, #6
 8000352:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000358:	237f      	movs	r3, #127	; 0x7f
 800035a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800035c:	2304      	movs	r3, #4
 800035e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_ADC1_Init+0xe0>)
 800036a:	f004 fd23 	bl	8004db4 <HAL_ADC_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000374:	f003 f868 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000378:	bf00      	nop
 800037a:	3728      	adds	r7, #40	; 0x28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	2000029c 	.word	0x2000029c
 8000384:	50040000 	.word	0x50040000
 8000388:	36902000 	.word	0x36902000

0800038c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b0b2      	sub	sp, #200	; 0xc8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a4:	f107 031c 	add.w	r3, r7, #28
 80003a8:	2298      	movs	r2, #152	; 0x98
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f008 f919 	bl	80085e4 <memset>
  if(adcHandle->Instance==ADC1)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <HAL_ADC_MspInit+0x134>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d17d      	bne.n	80004b8 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80003d2:	2308      	movs	r3, #8
 80003d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003da:	2302      	movs	r3, #2
 80003dc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003de:	2302      	movs	r3, #2
 80003e0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003e6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	4618      	mov	r0, r3
 80003ee:	f007 fa8d 	bl	800790c <HAL_RCCEx_PeriphCLKConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80003f8:	f003 f826 	bl	8003448 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003fc:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a30      	ldr	r2, [pc, #192]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000408:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000410:	61bb      	str	r3, [r7, #24]
 8000412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000418:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800042e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000430:	4a24      	ldr	r2, [pc, #144]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800043a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000448:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800044a:	f043 0302 	orr.w	r3, r3, #2
 800044e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000454:	f003 0302 	and.w	r3, r3, #2
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800045c:	2301      	movs	r3, #1
 800045e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000462:	230b      	movs	r3, #11
 8000464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000472:	4619      	mov	r1, r3
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f006 f8c0 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800047c:	2330      	movs	r3, #48	; 0x30
 800047e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000482:	230b      	movs	r3, #11
 8000484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000492:	4619      	mov	r1, r3
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <HAL_ADC_MspInit+0x13c>)
 8000496:	f006 f8b1 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800049a:	2303      	movs	r3, #3
 800049c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004a0:	230b      	movs	r3, #11
 80004a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80004b0:	4619      	mov	r1, r3
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <HAL_ADC_MspInit+0x140>)
 80004b4:	f006 f8a2 	bl	80065fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004b8:	bf00      	nop
 80004ba:	37c8      	adds	r7, #200	; 0xc8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	50040000 	.word	0x50040000
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000800 	.word	0x48000800
 80004cc:	48000400 	.word	0x48000400

080004d0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MX_CAN1_Init+0x64>)
 80004d6:	4a18      	ldr	r2, [pc, #96]	; (8000538 <MX_CAN1_Init+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_CAN1_Init+0x64>)
 80004dc:	2206      	movs	r2, #6
 80004de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_CAN1_Init+0x64>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_CAN1_Init+0x64>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_CAN1_Init+0x64>)
 80004ee:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80004f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_CAN1_Init+0x64>)
 80004f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80004fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <MX_CAN1_Init+0x64>)
 800050a:	2200      	movs	r2, #0
 800050c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_CAN1_Init+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <MX_CAN1_Init+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_CAN1_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <MX_CAN1_Init+0x64>)
 8000522:	f005 f90d 	bl	8005740 <HAL_CAN_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800052c:	f002 ff8c 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000304 	.word	0x20000304
 8000538:	40006400 	.word	0x40006400

0800053c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <HAL_CAN_MspInit+0xa0>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d139      	bne.n	80005d2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800058e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005a0:	2309      	movs	r3, #9
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f006 f825 	bl	80065fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2014      	movs	r0, #20
 80005b8:	f005 ffe9 	bl	800658e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005bc:	2014      	movs	r0, #20
 80005be:	f006 f802 	bl	80065c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2015      	movs	r0, #21
 80005c8:	f005 ffe1 	bl	800658e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005cc:	2015      	movs	r0, #21
 80005ce:	f005 fffa 	bl	80065c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d2:	bf00      	nop
 80005d4:	3728      	adds	r7, #40	; 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40006400 	.word	0x40006400
 80005e0:	40021000 	.word	0x40021000

080005e4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>:
{
	return this->channels[size_t(channel)].current;
}

template <uint32_t num_of_sf>
void SmartFuseHandler<num_of_sf>::emplaceBack(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef *const hspi, const ChannelsSettings &channels_settings)
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b087      	sub	sp, #28
 8000600:	af02      	add	r7, sp, #8
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	603b      	str	r3, [r7, #0]
{
	this->smart_fuses.emplace_back(port, pin, hspi, channels_settings);
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	463c      	mov	r4, r7
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	f107 0108 	add.w	r1, r7, #8
 8000614:	6a3b      	ldr	r3, [r7, #32]
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	4623      	mov	r3, r4
 800061a:	f001 faa4 	bl	8001b66 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRK16ChannelsSettingsEEEvDpOT_>
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bd90      	pop	{r4, r7, pc}

08000626 <_ZN16SmartFuseHandlerILm4EE9handleAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::handleAll()
 8000626:	b580      	push	{r7, lr}
 8000628:	b088      	sub	sp, #32
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 800062e:	2300      	movs	r3, #0
 8000630:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fac5 	bl	8001bc8 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 800063e:	61b8      	str	r0, [r7, #24]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	4618      	mov	r0, r3
 8000644:	f001 facc 	bl	8001be0 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 8000648:	6138      	str	r0, [r7, #16]
 800064a:	69ba      	ldr	r2, [r7, #24]
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	429a      	cmp	r2, r3
 8000650:	d00f      	beq.n	8000672 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x4c>
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.handle();
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f000 fc22 	bl	8000ea0 <_ZN9SmartFuse6handleEv>
 800065c:	4603      	mov	r3, r0
 800065e:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 8000660:	7afb      	ldrb	r3, [r7, #11]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x44>
 8000666:	7afb      	ldrb	r3, [r7, #11]
 8000668:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	3390      	adds	r3, #144	; 0x90
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	e7eb      	b.n	800064a <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x24>
	}

	return result;
 8000672:	7ffb      	ldrb	r3, [r7, #31]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <_ZN16SmartFuseHandlerILm4EE7initAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::initAll()
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 8000684:	2300      	movs	r3, #0
 8000686:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fa9a 	bl	8001bc8 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 8000694:	61b8      	str	r0, [r7, #24]
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	4618      	mov	r0, r3
 800069a:	f001 faa1 	bl	8001be0 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 800069e:	6138      	str	r0, [r7, #16]
 80006a0:	69ba      	ldr	r2, [r7, #24]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d00f      	beq.n	80006c8 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x4c>
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.init();
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 fb9d 	bl	8000dec <_ZN9SmartFuse4initEv>
 80006b2:	4603      	mov	r3, r0
 80006b4:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x44>
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	3390      	adds	r3, #144	; 0x90
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	e7eb      	b.n	80006a0 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x24>
	}

	return result;
 80006c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <_ZN16SmartFuseHandlerILm4EE9enableAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::enableAll()
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b088      	sub	sp, #32
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 80006da:	2300      	movs	r3, #0
 80006dc:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fa6f 	bl	8001bc8 <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 80006ea:	61b8      	str	r0, [r7, #24]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fa76 	bl	8001be0 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 80006f4:	6138      	str	r0, [r7, #16]
 80006f6:	69ba      	ldr	r2, [r7, #24]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d012      	beq.n	8000724 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x52>
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.enable();
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f000 fb8c 	bl	8000e20 <_ZN9SmartFuse6enableEv>
 8000708:	4603      	mov	r3, r0
 800070a:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(5);
 800070c:	2005      	movs	r0, #5
 800070e:	f004 f83b 	bl	8004788 <HAL_Delay>
		if(x != SmartFuseState::Ok) result = x;
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x4a>
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	3390      	adds	r3, #144	; 0x90
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	e7e8      	b.n	80006f6 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x24>
	}

	return result;
 8000724:	7ffb      	ldrb	r3, [r7, #31]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_ZN16SmartFuseHandlerILm4EE9getStatesEv>:

	return result;
}

template <uint32_t num_of_sf>
std::array < SmartFuseState, num_of_sf >  SmartFuseHandler<num_of_sf>::getStates()
 800072e:	b5b0      	push	{r4, r5, r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
{
	std::array < SmartFuseState, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d815      	bhi.n	800076c <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0x3e>
	{
		x[i] = this->smart_fuses[i].getState();
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6979      	ldr	r1, [r7, #20]
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fa66 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800074a:	4605      	mov	r5, r0
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	6979      	ldr	r1, [r7, #20]
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fa50 	bl	8001bf8 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8000758:	4604      	mov	r4, r0
 800075a:	4628      	mov	r0, r5
 800075c:	f000 fe0c 	bl	8001378 <_ZNK9SmartFuse8getStateEv>
 8000760:	4603      	mov	r3, r0
 8000762:	7023      	strb	r3, [r4, #0]
	for(size_t i = 0; i < num_of_sf; i++)
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e7e6      	b.n	800073a <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0xc>
	}

	return x;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	2300      	movs	r3, #0
 8000772:	7c3a      	ldrb	r2, [r7, #16]
 8000774:	f362 0307 	bfi	r3, r2, #0, #8
 8000778:	7c7a      	ldrb	r2, [r7, #17]
 800077a:	f362 230f 	bfi	r3, r2, #8, #8
 800077e:	7cba      	ldrb	r2, [r7, #18]
 8000780:	f362 4317 	bfi	r3, r2, #16, #8
 8000784:	7cfa      	ldrb	r2, [r7, #19]
 8000786:	f362 631f 	bfi	r3, r2, #24, #8
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bdb0      	pop	{r4, r5, r7, pc}

08000792 <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>:

template <uint32_t num_of_sf>
std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsStates()
 8000792:	b5b0      	push	{r4, r5, r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	60b9      	str	r1, [r7, #8]
{
	std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d819      	bhi.n	80007da <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0x48>
	{
		x[i] = this->smart_fuses[i].getChannelsStates();
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	6979      	ldr	r1, [r7, #20]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fa33 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80007b0:	4604      	mov	r4, r0
 80007b2:	6979      	ldr	r1, [r7, #20]
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f001 fa41 	bl	8001c3c <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>
 80007ba:	4605      	mov	r5, r0
 80007bc:	463b      	mov	r3, r7
 80007be:	4621      	mov	r1, r4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fdf9 	bl	80013b8 <_ZN9SmartFuse17getChannelsStatesEv>
 80007c6:	462a      	mov	r2, r5
 80007c8:	463b      	mov	r3, r7
 80007ca:	6819      	ldr	r1, [r3, #0]
 80007cc:	6011      	str	r1, [r2, #0]
 80007ce:	889b      	ldrh	r3, [r3, #4]
 80007d0:	8093      	strh	r3, [r2, #4]
	for(size_t i = 0; i < num_of_sf; i++)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e7e2      	b.n	80007a0 <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0xe>
	}

	return x;
 80007da:	bf00      	nop
}
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bdb0      	pop	{r4, r5, r7, pc}

080007e4 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>:

template <uint32_t num_of_sf>
std::array < std::array < uint16_t, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsCurrents()
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6178      	str	r0, [r7, #20]
 80007ec:	6139      	str	r1, [r7, #16]
{
	std::array < std::array < uint16_t, number_of_channels_per_fuse >, num_of_sf > x;
	for(size_t i = 0; i < num_of_sf; i++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d81b      	bhi.n	8000830 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0x4c>
	{
		x[i] = this->smart_fuses[i].getChannelsCurrents();
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	69f9      	ldr	r1, [r7, #28]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fa0a 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8000802:	4604      	mov	r4, r0
 8000804:	69f9      	ldr	r1, [r7, #28]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f001 fa27 	bl	8001c5a <_ZNSt5arrayIS_ItLj6EELj4EEixEj>
 800080c:	4605      	mov	r5, r0
 800080e:	463b      	mov	r3, r7
 8000810:	4621      	mov	r1, r4
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fe15 	bl	8001442 <_ZN9SmartFuse19getChannelsCurrentsEv>
 8000818:	462a      	mov	r2, r5
 800081a:	463b      	mov	r3, r7
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	6859      	ldr	r1, [r3, #4]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	6010      	str	r0, [r2, #0]
 8000824:	6051      	str	r1, [r2, #4]
 8000826:	6093      	str	r3, [r2, #8]
	for(size_t i = 0; i < num_of_sf; i++)
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	3301      	adds	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e7e0      	b.n	80007f2 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0xe>
	}

	return x;
 8000830:	bf00      	nop
}
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bdb0      	pop	{r4, r5, r7, pc}

0800083a <_ZNK16SmartFuseHandlerILm4EE13getSmartFusesEv>:

template <uint32_t num_of_sf>
const etl::vector < SmartFuse, num_of_sf >& SmartFuseHandler<num_of_sf>::getSmartFuses() const
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
{
	return this->smart_fuses;
 8000842:	687b      	ldr	r3, [r7, #4]
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_ZNK3etl7ibitset5countEv>:
    }

    //*************************************************************************
    /// Count the number of bits set.
    //*************************************************************************
    size_t count() const
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    {
      size_t n = 0UL;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]

      for (size_t i = 0UL; i < SIZE; ++i)
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	68ba      	ldr	r2, [r7, #8]
 8000866:	429a      	cmp	r2, r3
 8000868:	d210      	bcs.n	800088c <_ZNK3etl7ibitset5countEv+0x3c>
      {
        n += etl::count_bits(pdata[i]);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68da      	ldr	r2, [r3, #12]
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f001 f8cc 	bl	8001a12 <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4413      	add	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
      for (size_t i = 0UL; i < SIZE; ++i)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	3301      	adds	r3, #1
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	e7e9      	b.n	8000860 <_ZNK3etl7ibitset5countEv+0x10>
      }

      return n;
 800088c:	68fb      	ldr	r3, [r7, #12]
    }
 800088e:	4618      	mov	r0, r3
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <_ZN3etl7ibitset5resetEv>:
    }

    //*************************************************************************
    /// Resets the bitset.
    //*************************************************************************
    ibitset& reset()
 8000896:	b480      	push	{r7}
 8000898:	b085      	sub	sp, #20
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
    {
      for (size_t i = 0UL; i < SIZE; ++i)
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d209      	bcs.n	80008c0 <_ZN3etl7ibitset5resetEv+0x2a>
      {
        pdata[i] = ALL_CLEAR;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
      for (size_t i = 0UL; i < SIZE; ++i)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3301      	adds	r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	e7f0      	b.n	80008a2 <_ZN3etl7ibitset5resetEv+0xc>
      }

      return *this;
 80008c0:	687b      	ldr	r3, [r7, #4]
    }
 80008c2:	4618      	mov	r0, r3
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <_ZN3etl7ibitset10initialiseEy>:
  protected:

    //*************************************************************************
    /// Initialise from an unsigned long long.
    //*************************************************************************
    ibitset& initialise(unsigned long long value)
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	e9c7 2300 	strd	r2, r3, [r7]
    {
      reset();
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f7ff ffdb 	bl	8000896 <_ZN3etl7ibitset5resetEv>

      const size_t SHIFT = (integral_limits<unsigned long long>::bits <= (int)BITS_PER_ELEMENT) ? 0 : BITS_PER_ELEMENT;
 80008e0:	2308      	movs	r3, #8
 80008e2:	613b      	str	r3, [r7, #16]
      {
        pdata[0] = element_t(value);
      }
      else
      {
        size_t i = 0UL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

        while ((value != 0) && (i < SIZE))
 80008e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	d019      	beq.n	8000924 <_ZN3etl7ibitset10initialiseEy+0x56>
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d214      	bcs.n	8000924 <_ZN3etl7ibitset10initialiseEy+0x56>
        {
          pdata[i++] = value & ALL_SET;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	68da      	ldr	r2, [r3, #12]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	1c59      	adds	r1, r3, #1
 8000902:	6179      	str	r1, [r7, #20]
 8000904:	4413      	add	r3, r2
 8000906:	783a      	ldrb	r2, [r7, #0]
 8000908:	701a      	strb	r2, [r3, #0]
          value = value >> SHIFT;
 800090a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800090e:	f04f 0200 	mov.w	r2, #0
 8000912:	f04f 0300 	mov.w	r3, #0
 8000916:	0a02      	lsrs	r2, r0, #8
 8000918:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800091c:	0a0b      	lsrs	r3, r1, #8
 800091e:	e9c7 2300 	strd	r2, r3, [r7]
        while ((value != 0) && (i < SIZE))
 8000922:	e7e1      	b.n	80008e8 <_ZN3etl7ibitset10initialiseEy+0x1a>
        }
      }

      pdata[SIZE - 1] &= TOP_MASK;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	68da      	ldr	r2, [r3, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	3b01      	subs	r3, #1
 800092e:	4413      	add	r3, r2
 8000930:	7819      	ldrb	r1, [r3, #0]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	68d8      	ldr	r0, [r3, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	3b01      	subs	r3, #1
 8000940:	4403      	add	r3, r0
 8000942:	400a      	ands	r2, r1
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	701a      	strb	r2, [r3, #0]

      return *this;
 8000948:	68fb      	ldr	r3, [r7, #12]
    }
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_ZN3etl7ibitsetC1EjjPh>:
    }

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    ibitset(size_t nbits_, size_t size_, element_t* pdata_)
 8000952:	b480      	push	{r7}
 8000954:	b087      	sub	sp, #28
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	603b      	str	r3, [r7, #0]
      : NBITS(nbits_),
        SIZE(size_),
        pdata(pdata_)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	60da      	str	r2, [r3, #12]
    {
      size_t allocated_bits = SIZE * BITS_PER_ELEMENT;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	617b      	str	r3, [r7, #20]
      size_t top_mask_shift = ((BITS_PER_ELEMENT - (allocated_bits - NBITS)) % BITS_PER_ELEMENT);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	613b      	str	r3, [r7, #16]
      TOP_MASK = element_t(top_mask_shift == 0 ? ALL_SET : ~(ALL_SET << top_mask_shift));
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <_ZN3etl7ibitsetC1EjjPh+0x4c>
 800098e:	22ff      	movs	r2, #255	; 0xff
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	b2da      	uxtb	r2, r3
 800099c:	e000      	b.n	80009a0 <_ZN3etl7ibitsetC1EjjPh+0x4e>
 800099e:	22ff      	movs	r2, #255	; 0xff
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	701a      	strb	r2, [r3, #0]
    }
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4618      	mov	r0, r3
 80009a8:	371c      	adds	r7, #28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_ZN3etl7ibitsetD1Ev>:
    virtual ~ibitset()
    {
    }
#else
  protected:
    ~ibitset()
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
    {
    }
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <_ZN3etl6bitsetILj8EED1Ev>:
  /// Does not use std::string.
  ///\tparam MAXN The number of bits.
  ///\ingroup bitset
  //*************************************************************************
  template <const size_t MAXN>
  class bitset : public etl::ibitset
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ffed 	bl	80009b2 <_ZN3etl7ibitsetD1Ev>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  Nm  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 80009e2:	b590      	push	{r4, r7, lr}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d00a      	beq.n	8000a06 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429c      	cmp	r4, r3
 80009fa:	d004      	beq.n	8000a06 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 80009fc:	3c14      	subs	r4, #20
 80009fe:	4620      	mov	r0, r4
 8000a00:	f7ff ffe2 	bl	80009c8 <_ZN3etl6bitsetILj8EED1Ev>
 8000a04:	e7f7      	b.n	80009f6 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x14>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd90      	pop	{r4, r7, pc}

08000a10 <_ZL11checkParitySt5arrayIhLj3EE>:
{
 8000a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a14:	b097      	sub	sp, #92	; 0x5c
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	size_t buff = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	657b      	str	r3, [r7, #84]	; 0x54
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000a1e:	f107 0408 	add.w	r4, r7, #8
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f81a 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2200      	movs	r2, #0
 8000a34:	461d      	mov	r5, r3
 8000a36:	4616      	mov	r6, r2
 8000a38:	462a      	mov	r2, r5
 8000a3a:	4633      	mov	r3, r6
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f001 f81e 	bl	8001a7e <_ZN3etl6bitsetILj8EEC1Ey>
 8000a42:	3414      	adds	r4, #20
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2101      	movs	r1, #1
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 f809 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2200      	movs	r2, #0
 8000a56:	469a      	mov	sl, r3
 8000a58:	4693      	mov	fp, r2
 8000a5a:	4652      	mov	r2, sl
 8000a5c:	465b      	mov	r3, fp
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f001 f80d 	bl	8001a7e <_ZN3etl6bitsetILj8EEC1Ey>
 8000a64:	3414      	adds	r4, #20
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fff8 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000a70:	4603      	mov	r3, r0
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2200      	movs	r2, #0
 8000a78:	4698      	mov	r8, r3
 8000a7a:	4691      	mov	r9, r2
 8000a7c:	4642      	mov	r2, r8
 8000a7e:	464b      	mov	r3, r9
 8000a80:	4620      	mov	r0, r4
 8000a82:	f000 fffc 	bl	8001a7e <_ZN3etl6bitsetILj8EEC1Ey>
	for (auto &bit : bits) buff += bit.count();
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a8c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000a8e:	f001 f80e 	bl	8001aae <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>
 8000a92:	6538      	str	r0, [r7, #80]	; 0x50
 8000a94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000a96:	f001 f816 	bl	8001ac6 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>
 8000a9a:	64b8      	str	r0, [r7, #72]	; 0x48
 8000a9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d00d      	beq.n	8000ac0 <_ZL11checkParitySt5arrayIhLj3EE+0xb0>
 8000aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8000aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fed0 	bl	8000850 <_ZNK3etl7ibitset5countEv>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ab4:	4413      	add	r3, r2
 8000ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8000ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aba:	3314      	adds	r3, #20
 8000abc:	653b      	str	r3, [r7, #80]	; 0x50
 8000abe:	e7ed      	b.n	8000a9c <_ZL11checkParitySt5arrayIhLj3EE+0x8c>
	return (buff % 2 == 0);
 8000ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf0c      	ite	eq
 8000aca:	2301      	moveq	r3, #1
 8000acc:	2300      	movne	r3, #0
 8000ace:	b2dc      	uxtb	r4, r3
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff84 	bl	80009e2 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>
	return (buff % 2 == 0);
 8000ada:	4623      	mov	r3, r4
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	375c      	adds	r7, #92	; 0x5c
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ae6 <_ZL18calculateParityBitRSt5arrayIhLj3EE>:
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
	data[2] &= ~(1 << 0);
 8000aee:	2102      	movs	r1, #2
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 ffb5 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000af6:	4603      	mov	r3, r0
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	f022 0201 	bic.w	r2, r2, #1
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	701a      	strb	r2, [r3, #0]
	if (checkParity(data)) data[2] |= (1 << 0);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	7859      	ldrb	r1, [r3, #1]
 8000b08:	0209      	lsls	r1, r1, #8
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	789b      	ldrb	r3, [r3, #2]
 8000b0e:	041b      	lsls	r3, r3, #16
 8000b10:	431a      	orrs	r2, r3
 8000b12:	2300      	movs	r3, #0
 8000b14:	f362 0317 	bfi	r3, r2, #0, #24
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff79 	bl	8000a10 <_ZL11checkParitySt5arrayIhLj3EE>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d009      	beq.n	8000b38 <_ZL18calculateParityBitRSt5arrayIhLj3EE+0x52>
 8000b24:	2102      	movs	r1, #2
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 ff9a 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	f042 0201 	orr.w	r2, r2, #1
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	701a      	strb	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>:
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	this->last_gsb = x[0];
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 ff86 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000b54:	4603      	mov	r3, r0
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	705a      	strb	r2, [r3, #1]
	if(x[0] & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 ff7d 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000b66:	4603      	mov	r3, r0
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	09db      	lsrs	r3, r3, #7
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x3a>
 8000b76:	2300      	movs	r3, #0
 8000b78:	e07e      	b.n	8000c78 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000001) return SmartFuseState::FailSafe;
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 ff6e 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000b84:	4603      	mov	r3, r0
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf14      	ite	ne
 8000b90:	2301      	movne	r3, #1
 8000b92:	2300      	moveq	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x5e>
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	e06c      	b.n	8000c78 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000010) return SmartFuseState::OLOFF;
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 ff5c 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf14      	ite	ne
 8000bb4:	2301      	movne	r3, #1
 8000bb6:	2300      	moveq	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x82>
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	e05a      	b.n	8000c78 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000100) return SmartFuseState::LatchOff;
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 ff4a 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bf14      	ite	ne
 8000bd8:	2301      	movne	r3, #1
 8000bda:	2300      	moveq	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xa6>
 8000be2:	2305      	movs	r3, #5
 8000be4:	e048      	b.n	8000c78 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00001000) return SmartFuseState::TempFail;
 8000be6:	463b      	mov	r3, r7
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 ff38 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f003 0308 	and.w	r3, r3, #8
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf14      	ite	ne
 8000bfc:	2301      	movne	r3, #1
 8000bfe:	2300      	moveq	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xca>
 8000c06:	2304      	movs	r3, #4
 8000c08:	e036      	b.n	8000c78 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00010000) return SmartFuseState::OTPLVDS;
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 ff26 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000c14:	4603      	mov	r3, r0
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bf14      	ite	ne
 8000c20:	2301      	movne	r3, #1
 8000c22:	2300      	moveq	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xee>
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e024      	b.n	8000c78 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00100000) return SmartFuseState::SPIError;
 8000c2e:	463b      	mov	r3, r7
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 ff14 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f003 0320 	and.w	r3, r3, #32
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	bf14      	ite	ne
 8000c44:	2301      	movne	r3, #1
 8000c46:	2300      	moveq	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x112>
 8000c4e:	2302      	movs	r3, #2
 8000c50:	e012      	b.n	8000c78 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b01000000) return SmartFuseState::ResetState;
 8000c52:	463b      	mov	r3, r7
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 ff02 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bf14      	ite	ne
 8000c68:	2301      	movne	r3, #1
 8000c6a:	2300      	moveq	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x136>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	return SmartFuseState::NotResponding;
 8000c76:	2308      	movs	r3, #8
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN9SmartFuse11ChannelDataC1Ev>:
SmartFuse::ChannelData::ChannelData()
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 ff27 	bl	8001ae0 <_ZNSt4pairIttEC1IttLb1EEEv>
	active = false;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
	current = 0x0000;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	805a      	strh	r2, [r3, #2]
	state = ChannelState::Ok;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	721a      	strb	r2, [r3, #8]
}
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev>:
 8000cae:	b5b0      	push	{r4, r5, r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2405      	movs	r4, #5
 8000cba:	461d      	mov	r5, r3
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	db05      	blt.n	8000ccc <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev+0x1e>
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	f7ff ffdd 	bl	8000c80 <_ZN9SmartFuse11ChannelDataC1Ev>
 8000cc6:	350a      	adds	r5, #10
 8000cc8:	3c01      	subs	r4, #1
 8000cca:	e7f7      	b.n	8000cbc <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev+0xe>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bdb0      	pop	{r4, r5, r7, pc}

08000cd6 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, const ChannelsSettings &fuses_settings) :
 8000cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	603b      	str	r3, [r7, #0]
					 port(port), pin(pin), hspi(hspi), channels_settings(channels_settings), toggle(false)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3308      	adds	r3, #8
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ffda 	bl	8000cae <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEC1Ev>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	645a      	str	r2, [r3, #68]	; 0x44
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	649a      	str	r2, [r3, #72]	; 0x48
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8000d12:	4694      	mov	ip, r2
 8000d14:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d18:	4665      	mov	r5, ip
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d1e:	6028      	str	r0, [r5, #0]
 8000d20:	6069      	str	r1, [r5, #4]
 8000d22:	60aa      	str	r2, [r5, #8]
 8000d24:	60eb      	str	r3, [r5, #12]
 8000d26:	3410      	adds	r4, #16
 8000d28:	f10c 0c10 	add.w	ip, ip, #16
 8000d2c:	4574      	cmp	r4, lr
 8000d2e:	d1f3      	bne.n	8000d18 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings+0x42>
 8000d30:	4663      	mov	r3, ip
 8000d32:	4622      	mov	r2, r4
 8000d34:	6810      	ldr	r0, [r2, #0]
 8000d36:	6018      	str	r0, [r3, #0]
 8000d38:	8892      	ldrh	r2, [r2, #4]
 8000d3a:	809a      	strh	r2, [r3, #4]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3384      	adds	r3, #132	; 0x84
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 fc29 	bl	8004598 <_ZN5TimerC1Ev>
	for (int i = 0; i < 6; i++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2b05      	cmp	r3, #5
 8000d4e:	dc23      	bgt.n	8000d98 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings+0xc2>
		this->channels[i].clamping_currents = channels_settings.clamping_currents[i];
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3308      	adds	r3, #8
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fed2 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	1d18      	adds	r0, r3, #4
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3318      	adds	r3, #24
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	330a      	adds	r3, #10
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f000 fed6 	bl	8001b20 <_ZNSt4pairIttEaSERKS0_>
		this->channels[i].active = channels_settings.active[i];
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3308      	adds	r3, #8
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fec0 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8000d82:	4601      	mov	r1, r0
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	4413      	add	r3, r2
 8000d8a:	334c      	adds	r3, #76	; 0x4c
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	700b      	strb	r3, [r1, #0]
	for (int i = 0; i < 6; i++)
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e7d8      	b.n	8000d4a <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings+0x74>
	slaveDeselect();
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f000 f816 	bl	8000dca <_ZN9SmartFuse13slaveDeselectEv>
}
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4618      	mov	r0, r3
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000da8 <_ZN9SmartFuse11slaveSelectEv>:
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f005 fdc7 	bl	8006950 <HAL_GPIO_WritePin>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_ZN9SmartFuse13slaveDeselectEv>:
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4619      	mov	r1, r3
 8000de0:	f005 fdb6 	bl	8006950 <HAL_GPIO_WritePin>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_ZN9SmartFuse4initEv>:
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	this->reset();
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 fb69 	bl	80014cc <_ZN9SmartFuse5resetEv>
	this->setUpAllDutyCycles();
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 fbd4 	bl	80015a8 <_ZN9SmartFuse18setUpAllDutyCyclesEv>
	this->setUpAllSamplingModes();
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 fc27 	bl	8001654 <_ZN9SmartFuse21setUpAllSamplingModesEv>
	this->setUpAllLatchOffTimers();
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 fc98 	bl	800173c <_ZN9SmartFuse22setUpAllLatchOffTimersEv>
	this->setUpAllChannelsStates();
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fd1d 	bl	800184c <_ZN9SmartFuse22setUpAllChannelsStatesEv>
	return this->state;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_ZN9SmartFuse6enableEv>:
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	tx_data = { WRITE_RAM(0x14), 1 << 6, 0 };
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <_ZN9SmartFuse6enableEv+0x78>)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	4611      	mov	r1, r2
 8000e32:	8019      	strh	r1, [r3, #0]
 8000e34:	3302      	adds	r3, #2
 8000e36:	0c12      	lsrs	r2, r2, #16
 8000e38:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68f9      	ldr	r1, [r7, #12]
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fd5e 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { WRITE_RAM(0x14), 1 << 3, 0 };
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_ZN9SmartFuse6enableEv+0x7c>)
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	4611      	mov	r1, r2
 8000e52:	8019      	strh	r1, [r3, #0]
 8000e54:	3302      	adds	r3, #2
 8000e56:	0c12      	lsrs	r2, r2, #16
 8000e58:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68f9      	ldr	r1, [r7, #12]
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 fd4e 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->watch_dog.restart();
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3384      	adds	r3, #132	; 0x84
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 fbb6 	bl	80045de <_ZN5Timer7restartEv>
	this->toggle = false;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
	this->state = getGSB(rx_data);
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fe60 	bl	8000b40 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	return this->state;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	08009590 	.word	0x08009590
 8000e9c:	08009594 	.word	0x08009594

08000ea0 <_ZN9SmartFuse6handleEv>:
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b08f      	sub	sp, #60	; 0x3c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	bool lock_state = false;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	bool fuse_state_changed = false;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	std::array < bool, number_of_channels_per_fuse > read_fuses_states { false };
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	809a      	strh	r2, [r3, #4]
	std::array < uint8_t, 3 > tx_data { };
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	801a      	strh	r2, [r3, #0]
 8000ec8:	460a      	mov	r2, r1
 8000eca:	709a      	strb	r2, [r3, #2]
	std::array < uint8_t, 3 > rx_data { };
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	460a      	mov	r2, r1
 8000ed4:	801a      	strh	r2, [r3, #0]
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	709a      	strb	r2, [r3, #2]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++) this->channels[i].state = ChannelState::Ok;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
 8000ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	d80c      	bhi.n	8000efe <_ZN9SmartFuse6handleEv+0x5e>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3308      	adds	r3, #8
 8000ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fe09 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	721a      	strb	r2, [r3, #8]
 8000ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef8:	3301      	adds	r3, #1
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
 8000efc:	e7ef      	b.n	8000ede <_ZN9SmartFuse6handleEv+0x3e>
	if(watch_dog.getPassedTime() >= 31)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3384      	adds	r3, #132	; 0x84
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 fb93 	bl	800462e <_ZN5Timer13getPassedTimeEv>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b1e      	cmp	r3, #30
 8000f0c:	bf8c      	ite	hi
 8000f0e:	2301      	movhi	r3, #1
 8000f10:	2300      	movls	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d04d      	beq.n	8000fb4 <_ZN9SmartFuse6handleEv+0x114>
		this->toggle = !this->toggle;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	f083 0301 	eor.w	r3, r3, #1
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	701a      	strb	r2, [r3, #0]
		tx_data[0] = READ_RAM(0x13);
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fd97 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2253      	movs	r2, #83	; 0x53
 8000f36:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	6939      	ldr	r1, [r7, #16]
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fcdf 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		rx_data[2] &= ~(1 << 1);
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fd87 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000f52:	4603      	mov	r3, r0
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	f022 0202 	bic.w	r2, r2, #2
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	701a      	strb	r2, [r3, #0]
		tx_data = { WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1) };
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2101      	movs	r1, #1
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fd7b 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	781c      	ldrb	r4, [r3, #0]
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	2102      	movs	r1, #2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fd73 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	b251      	sxtb	r1, r2
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	0052      	lsls	r2, r2, #1
 8000f86:	b252      	sxtb	r2, r2
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	b252      	sxtb	r2, r2
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2213      	movs	r2, #19
 8000f94:	743a      	strb	r2, [r7, #16]
 8000f96:	4622      	mov	r2, r4
 8000f98:	747a      	strb	r2, [r7, #17]
 8000f9a:	74bb      	strb	r3, [r7, #18]
		this->transmitReceiveData(tx_data, rx_data);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	6939      	ldr	r1, [r7, #16]
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 fcad 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3384      	adds	r3, #132	; 0x84
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fb15 	bl	80045de <_ZN5Timer7restartEv>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	d850      	bhi.n	8001060 <_ZN9SmartFuse6handleEv+0x1c0>
		tx_data[0] = READ_RAM(0x28 + i);
 8000fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3328      	adds	r3, #40	; 0x28
 8000fc4:	b2dc      	uxtb	r4, r3
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fd47 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f044 0240 	orr.w	r2, r4, #64	; 0x40
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	6939      	ldr	r1, [r7, #16]
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 fc8d 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->channels[i].current = uint16_t(rx_data[1]) << 4 | uint16_t(rx_data[2]) >> 4;
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fd35 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	b21c      	sxth	r4, r3
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2102      	movs	r1, #2
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fd2b 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 800100a:	4603      	mov	r3, r0
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	b2db      	uxtb	r3, r3
 8001012:	b21b      	sxth	r3, r3
 8001014:	4323      	orrs	r3, r4
 8001016:	b21c      	sxth	r4, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3308      	adds	r3, #8
 800101c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fd6f 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001024:	4603      	mov	r3, r0
 8001026:	b2a2      	uxth	r2, r4
 8001028:	805a      	strh	r2, [r3, #2]
		read_fuses_states[i] = bool(rx_data[2] & (1 << 2));
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2102      	movs	r1, #2
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fd15 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001036:	4603      	mov	r3, r0
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	f003 0404 	and.w	r4, r3, #4
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fd7f 	bl	8001b48 <_ZNSt5arrayIbLj6EEixEj>
 800104a:	4603      	mov	r3, r0
 800104c:	2c00      	cmp	r4, #0
 800104e:	bf14      	ite	ne
 8001050:	2201      	movne	r2, #1
 8001052:	2200      	moveq	r2, #0
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105a:	3301      	adds	r3, #1
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800105e:	e7ab      	b.n	8000fb8 <_ZN9SmartFuse6handleEv+0x118>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001060:	2300      	movs	r3, #0
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001066:	2b05      	cmp	r3, #5
 8001068:	d869      	bhi.n	800113e <_ZN9SmartFuse6handleEv+0x29e>
		if (this->channels[i].current < this->channels[i].clamping_currents.first)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3308      	adds	r3, #8
 800106e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fd46 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001076:	4603      	mov	r3, r0
 8001078:	885c      	ldrh	r4, [r3, #2]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3308      	adds	r3, #8
 800107e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fd3e 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001086:	4603      	mov	r3, r0
 8001088:	889b      	ldrh	r3, [r3, #4]
 800108a:	429c      	cmp	r4, r3
 800108c:	bf34      	ite	cc
 800108e:	2301      	movcc	r3, #1
 8001090:	2300      	movcs	r3, #0
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d01b      	beq.n	80010d0 <_ZN9SmartFuse6handleEv+0x230>
			this->channels[i].active = false;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3308      	adds	r3, #8
 800109c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fd2f 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			fuse_state_changed = true;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			this->state = SmartFuseState::OTPLVDS;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2203      	movs	r2, #3
 80010ba:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			this->channels[i].state = ChannelState::UnderCurrent;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3308      	adds	r3, #8
 80010c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fd1c 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2201      	movs	r2, #1
 80010ce:	721a      	strb	r2, [r3, #8]
		if (this->channels[i].current > this->channels[i].clamping_currents.second)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3308      	adds	r3, #8
 80010d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fd13 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80010dc:	4603      	mov	r3, r0
 80010de:	885c      	ldrh	r4, [r3, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3308      	adds	r3, #8
 80010e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fd0b 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80010ec:	4603      	mov	r3, r0
 80010ee:	88db      	ldrh	r3, [r3, #6]
 80010f0:	429c      	cmp	r4, r3
 80010f2:	bf8c      	ite	hi
 80010f4:	2301      	movhi	r3, #1
 80010f6:	2300      	movls	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d01b      	beq.n	8001136 <_ZN9SmartFuse6handleEv+0x296>
			this->channels[i].active = false;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3308      	adds	r3, #8
 8001102:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fcfc 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800110a:	4603      	mov	r3, r0
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 8001110:	2301      	movs	r3, #1
 8001112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			fuse_state_changed = true;
 8001116:	2301      	movs	r3, #1
 8001118:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			this->state = SmartFuseState::OTPLVDS;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2203      	movs	r2, #3
 8001120:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
			this->channels[i].state = ChannelState::OverCurrent;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3308      	adds	r3, #8
 8001128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fce9 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001130:	4603      	mov	r3, r0
 8001132:	2202      	movs	r2, #2
 8001134:	721a      	strb	r2, [r3, #8]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001138:	3301      	adds	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
 800113c:	e792      	b.n	8001064 <_ZN9SmartFuse6handleEv+0x1c4>
	if(fuse_state_changed)
 800113e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001142:	2b00      	cmp	r3, #0
 8001144:	d049      	beq.n	80011da <_ZN9SmartFuse6handleEv+0x33a>
		tx_data[0] = WRITE_RAM(0x13);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fc87 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001152:	4603      	mov	r3, r0
 8001154:	2213      	movs	r2, #19
 8001156:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0x00;
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2101      	movs	r1, #1
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fc7e 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001164:	4603      	mov	r3, r0
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	2b05      	cmp	r3, #5
 8001172:	d81e      	bhi.n	80011b2 <_ZN9SmartFuse6handleEv+0x312>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3308      	adds	r3, #8
 8001178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fcc0 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001182:	4603      	mov	r3, r0
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	fa02 f403 	lsl.w	r4, r2, r3
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fc63 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 800119a:	4603      	mov	r3, r0
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	b251      	sxtb	r1, r2
 80011a0:	b262      	sxtb	r2, r4
 80011a2:	430a      	orrs	r2, r1
 80011a4:	b252      	sxtb	r2, r2
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	3301      	adds	r3, #1
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
 80011b0:	e7dd      	b.n	800116e <_ZN9SmartFuse6handleEv+0x2ce>
		tx_data[2] = this->toggle << 1;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461c      	mov	r4, r3
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2102      	movs	r1, #2
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fc4e 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80011c4:	4603      	mov	r3, r0
 80011c6:	0062      	lsls	r2, r4, #1
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	461a      	mov	r2, r3
 80011d2:	6939      	ldr	r1, [r7, #16]
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fb95 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d82a      	bhi.n	800123a <_ZN9SmartFuse6handleEv+0x39a>
		if(this->channels[i].active != read_fuses_states[i])
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3308      	adds	r3, #8
 80011e8:	6a39      	ldr	r1, [r7, #32]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fc89 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80011f0:	4603      	mov	r3, r0
 80011f2:	781c      	ldrb	r4, [r3, #0]
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	6a39      	ldr	r1, [r7, #32]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fca4 	bl	8001b48 <_ZNSt5arrayIbLj6EEixEj>
 8001200:	4603      	mov	r3, r0
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	429c      	cmp	r4, r3
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00f      	beq.n	8001232 <_ZN9SmartFuse6handleEv+0x392>
			this->channels[i].state = ChannelState::ShortedToGround;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3308      	adds	r3, #8
 8001216:	6a39      	ldr	r1, [r7, #32]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fc72 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800121e:	4603      	mov	r3, r0
 8001220:	2203      	movs	r2, #3
 8001222:	721a      	strb	r2, [r3, #8]
			lock_state = true;
 8001224:	2301      	movs	r3, #1
 8001226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			this->state = SmartFuseState::OLOFF;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2206      	movs	r2, #6
 800122e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	3301      	adds	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	e7d1      	b.n	80011de <_ZN9SmartFuse6handleEv+0x33e>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	2b05      	cmp	r3, #5
 8001242:	f200 8082 	bhi.w	800134a <_ZN9SmartFuse6handleEv+0x4aa>
		tx_data[0] = READ_AND_CLEAR(0x20 + i);
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3320      	adds	r3, #32
 800124c:	b2dc      	uxtb	r4, r3
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fc03 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 800125a:	4603      	mov	r3, r0
 800125c:	f064 027f 	orn	r2, r4, #127	; 0x7f
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	461a      	mov	r2, r3
 800126a:	6939      	ldr	r1, [r7, #16]
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fb49 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		if(rx_data[1] & (1 << 0)) this->channels[i].state = ChannelState::LatchOff;
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2101      	movs	r1, #1
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fbf1 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 800127e:	4603      	mov	r3, r0
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	bf14      	ite	ne
 800128a:	2301      	movne	r3, #1
 800128c:	2300      	moveq	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <_ZN9SmartFuse6handleEv+0x406>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3308      	adds	r3, #8
 8001298:	69f9      	ldr	r1, [r7, #28]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fc31 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2204      	movs	r2, #4
 80012a4:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 2)) this->channels[i].state = ChannelState::STKFLTR;
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2101      	movs	r1, #1
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fbd7 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80012b2:	4603      	mov	r3, r0
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf14      	ite	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	2300      	moveq	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <_ZN9SmartFuse6handleEv+0x43a>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3308      	adds	r3, #8
 80012cc:	69f9      	ldr	r1, [r7, #28]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fc17 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2205      	movs	r2, #5
 80012d8:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 3)) this->channels[i].state = ChannelState::VDSFS;
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2101      	movs	r1, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fbbd 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80012e6:	4603      	mov	r3, r0
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bf14      	ite	ne
 80012f2:	2301      	movne	r3, #1
 80012f4:	2300      	moveq	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <_ZN9SmartFuse6handleEv+0x46e>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3308      	adds	r3, #8
 8001300:	69f9      	ldr	r1, [r7, #28]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fbfd 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001308:	4603      	mov	r3, r0
 800130a:	2206      	movs	r2, #6
 800130c:	721a      	strb	r2, [r3, #8]
		if(rx_data[1] & (1 << 4)) this->channels[i].state = ChannelState::CHFBSR;
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2101      	movs	r1, #1
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fba3 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 800131a:	4603      	mov	r3, r0
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <_ZN9SmartFuse6handleEv+0x4a2>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3308      	adds	r3, #8
 8001334:	69f9      	ldr	r1, [r7, #28]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fbe3 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800133c:	4603      	mov	r3, r0
 800133e:	2207      	movs	r2, #7
 8001340:	721a      	strb	r2, [r3, #8]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	e779      	b.n	800123e <_ZN9SmartFuse6handleEv+0x39e>
	if (!lock_state) this->state = getGSB(rx_data);
 800134a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <_ZN9SmartFuse6handleEv+0x4ca>
 8001358:	68f9      	ldr	r1, [r7, #12]
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fbf0 	bl	8000b40 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	return this->state;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
 8001370:	4618      	mov	r0, r3
 8001372:	373c      	adds	r7, #60	; 0x3c
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}

08001378 <_ZNK9SmartFuse8getStateEv>:
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	return this->state;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_ZN9SmartFuse15getChannelStateE7Channel>:
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	70fb      	strb	r3, [r7, #3]
	return this->channels[size_t(channel)].state;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3308      	adds	r3, #8
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fbab 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80013ac:	4603      	mov	r3, r0
 80013ae:	7a1b      	ldrb	r3, [r3, #8]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_ZN9SmartFuse17getChannelsStatesEv>:
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	3308      	adds	r3, #8
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fb9a 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80013ce:	4603      	mov	r3, r0
 80013d0:	7a1a      	ldrb	r2, [r3, #8]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	701a      	strb	r2, [r3, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3308      	adds	r3, #8
 80013da:	2101      	movs	r1, #1
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fb90 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80013e2:	4603      	mov	r3, r0
 80013e4:	7a1a      	ldrb	r2, [r3, #8]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	705a      	strb	r2, [r3, #1]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3308      	adds	r3, #8
 80013ee:	2102      	movs	r1, #2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fb86 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80013f6:	4603      	mov	r3, r0
 80013f8:	7a1a      	ldrb	r2, [r3, #8]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	709a      	strb	r2, [r3, #2]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3308      	adds	r3, #8
 8001402:	2103      	movs	r1, #3
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fb7c 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800140a:	4603      	mov	r3, r0
 800140c:	7a1a      	ldrb	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	70da      	strb	r2, [r3, #3]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	3308      	adds	r3, #8
 8001416:	2104      	movs	r1, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fb72 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800141e:	4603      	mov	r3, r0
 8001420:	7a1a      	ldrb	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	711a      	strb	r2, [r3, #4]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	3308      	adds	r3, #8
 800142a:	2105      	movs	r1, #5
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fb68 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001432:	4603      	mov	r3, r0
 8001434:	7a1a      	ldrb	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	715a      	strb	r2, [r3, #5]
}
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_ZN9SmartFuse19getChannelsCurrentsEv>:
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	3308      	adds	r3, #8
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fb55 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001458:	4603      	mov	r3, r0
 800145a:	885a      	ldrh	r2, [r3, #2]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	801a      	strh	r2, [r3, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3308      	adds	r3, #8
 8001464:	2101      	movs	r1, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fb4b 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 800146c:	4603      	mov	r3, r0
 800146e:	885a      	ldrh	r2, [r3, #2]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	805a      	strh	r2, [r3, #2]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3308      	adds	r3, #8
 8001478:	2102      	movs	r1, #2
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fb41 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001480:	4603      	mov	r3, r0
 8001482:	885a      	ldrh	r2, [r3, #2]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	809a      	strh	r2, [r3, #4]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	3308      	adds	r3, #8
 800148c:	2103      	movs	r1, #3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fb37 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001494:	4603      	mov	r3, r0
 8001496:	885a      	ldrh	r2, [r3, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	80da      	strh	r2, [r3, #6]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3308      	adds	r3, #8
 80014a0:	2104      	movs	r1, #4
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fb2d 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80014a8:	4603      	mov	r3, r0
 80014aa:	885a      	ldrh	r2, [r3, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	811a      	strh	r2, [r3, #8]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	3308      	adds	r3, #8
 80014b4:	2105      	movs	r1, #5
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fb23 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 80014bc:	4603      	mov	r3, r0
 80014be:	885a      	ldrh	r2, [r3, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	815a      	strh	r2, [r3, #10]
}
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_ZN9SmartFuse5resetEv>:
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	tx_data = { RESET_SMARTFUSE(), 0, 0 };
 80014d4:	23ff      	movs	r3, #255	; 0xff
 80014d6:	743b      	strb	r3, [r7, #16]
 80014d8:	2300      	movs	r3, #0
 80014da:	747b      	strb	r3, [r7, #17]
 80014dc:	2300      	movs	r3, #0
 80014de:	74bb      	strb	r3, [r7, #18]
	this->transmitReceiveData(tx_data, rx_data);
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	461a      	mov	r2, r3
 80014e6:	6939      	ldr	r1, [r7, #16]
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fa0b 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { READ_ROM(0x01), 0, 0 };
 80014ee:	23c1      	movs	r3, #193	; 0xc1
 80014f0:	743b      	strb	r3, [r7, #16]
 80014f2:	2300      	movs	r3, #0
 80014f4:	747b      	strb	r3, [r7, #17]
 80014f6:	2300      	movs	r3, #0
 80014f8:	74bb      	strb	r3, [r7, #18]
	for (size_t i = 0; i < fuse_timeout; i++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d845      	bhi.n	8001590 <_ZN9SmartFuse5resetEv+0xc4>
		if(!IF_RESET_STATE(rx_data)) break;
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f000 faa8 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001510:	4603      	mov	r3, r0
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d113      	bne.n	8001540 <_ZN9SmartFuse5resetEv+0x74>
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fa9e 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001524:	4603      	mov	r3, r0
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <_ZN9SmartFuse5resetEv+0x74>
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2102      	movs	r1, #2
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fa94 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001538:	4603      	mov	r3, r0
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00d      	beq.n	800155c <_ZN9SmartFuse5resetEv+0x90>
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fa8a 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 800154c:	4603      	mov	r3, r0
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <_ZN9SmartFuse5resetEv+0x90>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <_ZN9SmartFuse5resetEv+0x92>
 800155c:	2300      	movs	r3, #0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d115      	bne.n	800158e <_ZN9SmartFuse5resetEv+0xc2>
		else if(i == fuse_timeout - 1)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b05      	cmp	r3, #5
 8001566:	d104      	bne.n	8001572 <_ZN9SmartFuse5resetEv+0xa6>
			this->state = SmartFuseState::NotResponding;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2208      	movs	r2, #8
 800156c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001570:	e017      	b.n	80015a2 <_ZN9SmartFuse5resetEv+0xd6>
		this->transmitReceiveData(tx_data, rx_data);
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	461a      	mov	r2, r3
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f9c2 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		HAL_Delay(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f003 f901 	bl	8004788 <HAL_Delay>
	for (size_t i = 0; i < fuse_timeout; i++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e7b7      	b.n	80014fe <_ZN9SmartFuse5resetEv+0x32>
		if(!IF_RESET_STATE(rx_data)) break;
 800158e:	bf00      	nop
	this->state = getGSB(rx_data);
 8001590:	68f9      	ldr	r1, [r7, #12]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fad4 	bl	8000b40 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_ZN9SmartFuse18setUpAllDutyCyclesEv>:
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < 6; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d83e      	bhi.n	8001638 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0x90>
		tx_data[0] = WRITE_RAM(0x00 + i);
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fa4d 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80015c6:	4603      	mov	r3, r0
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]
		tx_data[1] = uint8_t(this->channels_settings.duty_cycle[i] >> 4);
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	332c      	adds	r3, #44	; 0x2c
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	88db      	ldrh	r3, [r3, #6]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	b29c      	uxth	r4, r3
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	2101      	movs	r1, #1
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fa3b 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b2e2      	uxtb	r2, r4
 80015ee:	701a      	strb	r2, [r3, #0]
		tx_data[2] = uint8_t(this->channels_settings.duty_cycle[i] << 4) | this->toggle << 1;
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	332c      	adds	r3, #44	; 0x2c
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	88db      	ldrh	r3, [r3, #6]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	b2db      	uxtb	r3, r3
 8001602:	b25a      	sxtb	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	b25b      	sxtb	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b25c      	sxtb	r4, r3
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	2102      	movs	r1, #2
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fa22 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 800161c:	4603      	mov	r3, r0
 800161e:	b2e2      	uxtb	r2, r4
 8001620:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	461a      	mov	r2, r3
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f96a 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < 6; i++)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e7bd      	b.n	80015b4 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0xc>
	this->state = getGSB(rx_data);
 8001638:	68f9      	ldr	r1, [r7, #12]
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fa80 	bl	8000b40 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800164a:	bf00      	nop
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
	...

08001654 <_ZN9SmartFuse21setUpAllSamplingModesEv>:
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data = { 0, 0, 0 };
 800165c:	4a36      	ldr	r2, [pc, #216]	; (8001738 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xe4>)
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4611      	mov	r1, r2
 8001666:	8019      	strh	r1, [r3, #0]
 8001668:	3302      	adds	r3, #2
 800166a:	0c12      	lsrs	r2, r2, #16
 800166c:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2b05      	cmp	r3, #5
 8001676:	d852      	bhi.n	800171e <_ZN9SmartFuse21setUpAllSamplingModesEv+0xca>
		tx_data[0] = WRITE_RAM(0x08 + i);
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	b2dc      	uxtb	r4, r3
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f9ec 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001688:	4603      	mov	r3, r0
 800168a:	f104 0208 	add.w	r2, r4, #8
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]
		switch (this->channels_settings.sampling_mode[i])
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4413      	add	r3, r2
 8001698:	3358      	adds	r3, #88	; 0x58
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d833      	bhi.n	8001708 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
 80016a0:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <_ZN9SmartFuse21setUpAllSamplingModesEv+0x54>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	080016b9 	.word	0x080016b9
 80016ac:	080016cd 	.word	0x080016cd
 80016b0:	080016e1 	.word	0x080016e1
 80016b4:	080016f5 	.word	0x080016f5
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	2102      	movs	r1, #2
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f9ce 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e01d      	b.n	8001708 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	2102      	movs	r1, #2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f9c4 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80016d8:	4603      	mov	r3, r0
 80016da:	2240      	movs	r2, #64	; 0x40
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	e013      	b.n	8001708 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f9ba 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e009      	b.n	8001708 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb4>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	2102      	movs	r1, #2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f9b0 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001700:	4603      	mov	r3, r0
 8001702:	22c0      	movs	r2, #192	; 0xc0
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	bf00      	nop
		this->transmitReceiveData(tx_data, rx_data);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	461a      	mov	r2, r3
 800170e:	6939      	ldr	r1, [r7, #16]
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f8f7 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e7a9      	b.n	8001672 <_ZN9SmartFuse21setUpAllSamplingModesEv+0x1e>
	this->state = getGSB(rx_data);
 800171e:	68f9      	ldr	r1, [r7, #12]
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fa0d 	bl	8000b40 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	08009598 	.word	0x08009598

0800173c <_ZN9SmartFuse22setUpAllLatchOffTimersEv>:
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 8001744:	4a40      	ldr	r2, [pc, #256]	; (8001848 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x10c>)
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	4611      	mov	r1, r2
 800174e:	8019      	strh	r1, [r3, #0]
 8001750:	3302      	adds	r3, #2
 8001752:	0c12      	lsrs	r2, r2, #16
 8001754:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 > rx_data { 0, 0, 0 };
 8001756:	4a3c      	ldr	r2, [pc, #240]	; (8001848 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x10c>)
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	8019      	strh	r1, [r3, #0]
 8001762:	3302      	adds	r3, #2
 8001764:	0c12      	lsrs	r2, r2, #16
 8001766:	701a      	strb	r2, [r3, #0]
	tx_data[1] = this->channels_settings.latch_off_time_out[2] << 4 |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	b25a      	sxtb	r2, r3
		   this->channels_settings.latch_off_time_out[1];
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001778:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels_settings.latch_off_time_out[2] << 4 |
 800177a:	4313      	orrs	r3, r2
 800177c:	b25c      	sxtb	r4, r3
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f000 f96b 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 800178a:	4603      	mov	r3, r0
 800178c:	b2e2      	uxtb	r2, r4
 800178e:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels_settings.latch_off_time_out[1] << 4;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 4053 	ldrb.w	r4, [r3, #83]	; 0x53
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2102      	movs	r1, #2
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f95f 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80017a2:	4603      	mov	r3, r0
 80017a4:	0122      	lsls	r2, r4, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x10);
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f955 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2210      	movs	r2, #16
 80017ba:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	461a      	mov	r2, r3
 80017c2:	68f9      	ldr	r1, [r7, #12]
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f89d 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data[1] = this->channels_settings.latch_off_time_out[5] << 4 |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	b25a      	sxtb	r2, r3
	       this->channels_settings.latch_off_time_out[4];
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80017da:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels_settings.latch_off_time_out[5] << 4 |
 80017dc:	4313      	orrs	r3, r2
 80017de:	b25c      	sxtb	r4, r3
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2101      	movs	r1, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f93a 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b2e2      	uxtb	r2, r4
 80017f0:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels_settings.latch_off_time_out[3] << 4;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 4055 	ldrb.w	r4, [r3, #85]	; 0x55
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2102      	movs	r1, #2
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f92e 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001804:	4603      	mov	r3, r0
 8001806:	0122      	lsls	r2, r4, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x11);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f924 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001818:	4603      	mov	r3, r0
 800181a:	2211      	movs	r2, #17
 800181c:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	461a      	mov	r2, r3
 8001824:	68f9      	ldr	r1, [r7, #12]
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f86c 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff f986 	bl	8000b40 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	08009598 	.word	0x08009598

0800184c <_ZN9SmartFuse22setUpAllChannelsStatesEv>:
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	tx_data[0] = WRITE_RAM(0x13);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f900 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001860:	4603      	mov	r3, r0
 8001862:	2213      	movs	r2, #19
 8001864:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2101      	movs	r1, #1
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f8f7 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 8001872:	4603      	mov	r3, r0
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b05      	cmp	r3, #5
 8001880:	d81e      	bhi.n	80018c0 <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x74>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3308      	adds	r3, #8
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f939 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001890:	4603      	mov	r3, r0
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa02 f403 	lsl.w	r4, r2, r3
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	2101      	movs	r1, #1
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f8dc 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80018a8:	4603      	mov	r3, r0
 80018aa:	781a      	ldrb	r2, [r3, #0]
 80018ac:	b251      	sxtb	r1, r2
 80018ae:	b262      	sxtb	r2, r4
 80018b0:	430a      	orrs	r2, r1
 80018b2:	b252      	sxtb	r2, r2
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e7dd      	b.n	800187c <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x30>
	tx_data[2] = this->toggle << 1;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461c      	mov	r4, r3
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	2102      	movs	r1, #2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f8c7 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80018d2:	4603      	mov	r3, r0
 80018d4:	0062      	lsls	r2, r4, #1
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	461a      	mov	r2, r3
 80018e0:	6939      	ldr	r1, [r7, #16]
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f80e 	bl	8001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff f928 	bl	8000b40 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 80018fa:	bf00      	nop
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd90      	pop	{r4, r7, pc}
	...

08001904 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>:
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191a:	2b40      	cmp	r3, #64	; 0x40
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x34>
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001936:	601a      	str	r2, [r3, #0]
	calculateParityBit(tx_data);
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f8d2 	bl	8000ae6 <_ZL18calculateParityBitRSt5arrayIhLj3EE>
	this->slaveSelect();
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7ff fa30 	bl	8000da8 <_ZN9SmartFuse11slaveSelectEv>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]
 800194c:	2300      	movs	r3, #0
 800194e:	75bb      	strb	r3, [r7, #22]
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d902      	bls.n	800195c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x58>
 8001956:	7dbb      	ldrb	r3, [r7, #22]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d83e      	bhi.n	80019da <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xd6>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d104      	bne.n	8001974 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 800196a:	7dbb      	ldrb	r3, [r7, #22]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d801      	bhi.n	8001974 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x72>
 8001974:	2300      	movs	r3, #0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00f      	beq.n	800199a <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x96>
			(*(uint8_t*) &rx_data[rx]) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f103 040c 	add.w	r4, r3, #12
 8001982:	7dbb      	ldrb	r3, [r7, #22]
 8001984:	4619      	mov	r1, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f86a 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 800198c:	4603      	mov	r3, r0
 800198e:	7822      	ldrb	r2, [r4, #0]
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
			rx++;
 8001994:	7dbb      	ldrb	r3, [r7, #22]
 8001996:	3301      	adds	r3, #1
 8001998:	75bb      	strb	r3, [r7, #22]
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d104      	bne.n	80019b2 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d801      	bhi.n	80019b2 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xb0>
 80019b2:	2300      	movs	r3, #0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0cb      	beq.n	8001950 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = tx_data[tx];
 80019b8:	7dfa      	ldrb	r2, [r7, #23]
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f84d 	bl	8001a60 <_ZNSt5arrayIhLj3EEixEj>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	330c      	adds	r3, #12
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	701a      	strb	r2, [r3, #0]
			tx++;
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	3301      	adds	r3, #1
 80019d6:	75fb      	strb	r3, [r7, #23]
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 80019d8:	e7ba      	b.n	8001950 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
	this->slaveDeselect();
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff f9f5 	bl	8000dca <_ZN9SmartFuse13slaveDeselectEv>
}
 80019e0:	bf00      	nop
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	200006d8 	.word	0x200006d8

080019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>:
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70fb      	strb	r3, [r7, #3]
	return this->channels[size_t(channel)].current;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3308      	adds	r3, #8
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f87e 	bl	8001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>
 8001a06:	4603      	mov	r3, r0
 8001a08:	885b      	ldrh	r3, [r3, #2]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>:
  ///\ingroup binary
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR14
    typename etl::enable_if<etl::is_integral<T>::value && etl::is_unsigned<T>::value && (etl::integral_limits<T>::bits == 8U), uint_least8_t>::type
    count_bits(T value)
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  {
#if ETL_CPP23_SUPPORTED && ETL_USING_STL
    return std::popcount(value);
#else
    uint32_t count = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]

    count = value - ((value >> 1U) & 0x55U);
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	60fb      	str	r3, [r7, #12]
    count = ((count >> 2U) & 0x33U) + (count & 0x33U);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    count = ((count >> 4U) + count) & 0x0FU;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	091a      	lsrs	r2, r3, #4
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	60fb      	str	r3, [r7, #12]

    return uint_least8_t(count);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	b2db      	uxtb	r3, r3
#endif
  }
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_ZNSt5arrayIhLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6839      	ldr	r1, [r7, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f902 	bl	8001c78 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_ZN3etl6bitsetILj8EEC1Ey>:
    }

    //*************************************************************************
    /// Construct from a value.
    //*************************************************************************
    bitset(unsigned long long value)
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	e9c7 2300 	strd	r2, r3, [r7]
      : etl::ibitset(MAXN, ARRAY_SIZE, data)
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3310      	adds	r3, #16
 8001a90:	2201      	movs	r2, #1
 8001a92:	2108      	movs	r1, #8
 8001a94:	f7fe ff5d 	bl	8000952 <_ZN3etl7ibitsetC1EjjPh>
    {
      initialise(value);
 8001a98:	68f9      	ldr	r1, [r7, #12]
 8001a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	f7fe ff15 	bl	80008ce <_ZN3etl7ibitset10initialiseEy>
    }
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>:
      begin() noexcept
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f8ec 	bl	8001c94 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>:
      end() noexcept
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8e0 	bl	8001c94 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	333c      	adds	r3, #60	; 0x3c
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_ZNSt4pairIttEC1IttLb1EEEv>:
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>
#endif
      _GLIBCXX_CONSTEXPR pair()
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	801a      	strh	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	805a      	strh	r2, [r3, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_ZNSt5arrayIN9SmartFuse11ChannelDataELj6EEixEj>:
      operator[](size_type __n) noexcept
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f8cc 	bl	8001cae <_ZNSt14__array_traitsIN9SmartFuse11ChannelDataELj6EE6_S_refERA6_KS1_j>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZNSt4pairIttEaSERKS0_>:
      template<typename... _Args1, typename... _Args2>
	_GLIBCXX20_CONSTEXPR
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      _GLIBCXX20_CONSTEXPR pair&
      operator=(typename conditional<
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
		__and_<is_copy_assignable<_T1>,
		       is_copy_assignable<_T2>>::value,
		const pair&, const __nonesuch&>::type __p)
      {
	first = __p.first;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	801a      	strh	r2, [r3, #0]
	second = __p.second;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	885a      	ldrh	r2, [r3, #2]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	805a      	strh	r2, [r3, #2]
	return *this;
 8001b3a:	687b      	ldr	r3, [r7, #4]
      }
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_ZNSt5arrayIbLj6EEixEj>:
      operator[](size_type __n) noexcept
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6839      	ldr	r1, [r7, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f8bb 	bl	8001cd2 <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRK16ChannelsSettingsEEEvDpOT_>:
    /// Constructs a value at the end of the vector.
    /// If asserts or exceptions are enabled, emits vector_full if the vector is already full.
    ///\param value The value to add.
    //*********************************************************************
    template <typename ... Args>
    void emplace_back(Args && ... args)
 8001b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b68:	b089      	sub	sp, #36	; 0x24
 8001b6a:	af02      	add	r7, sp, #8
 8001b6c:	6178      	str	r0, [r7, #20]
 8001b6e:	6139      	str	r1, [r7, #16]
 8001b70:	60fa      	str	r2, [r7, #12]
 8001b72:	60bb      	str	r3, [r7, #8]
    {
#if defined(ETL_CHECK_PUSH_POP)
      ETL_ASSERT(size() != CAPACITY, ETL_ERROR(vector_full));
#endif
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001b74:	6938      	ldr	r0, [r7, #16]
 8001b76:	f000 f8ba 	bl	8001cee <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	681c      	ldr	r4, [r3, #0]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f8c0 	bl	8001d04 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001b84:	4603      	mov	r3, r0
 8001b86:	681d      	ldr	r5, [r3, #0]
 8001b88:	68b8      	ldr	r0, [r7, #8]
 8001b8a:	f000 f8c6 	bl	8001d1a <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	681e      	ldr	r6, [r3, #0]
 8001b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b94:	f000 f8cc 	bl	8001d30 <_ZN3etl7forwardIRK16ChannelsSettingsEEOT_RNS_16remove_referenceIS4_E4typeE>
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2090      	movs	r0, #144	; 0x90
 8001ba2:	f7fe fd1f 	bl	80005e4 <_ZnwjPv>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4633      	mov	r3, r6
 8001bac:	462a      	mov	r2, r5
 8001bae:	4621      	mov	r1, r4
 8001bb0:	f7ff f891 	bl	8000cd6 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
      ++p_end;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	609a      	str	r2, [r3, #8]
      ETL_INCREMENT_DEBUG_COUNT
    }
 8001bc0:	bf00      	nop
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bc8 <_ZN3etl7ivectorI9SmartFuseE5beginEv>:
    iterator begin()
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
      return p_buffer;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
    }
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_ZN3etl7ivectorI9SmartFuseE3endEv>:
    iterator end()
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
      return p_end;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
    }
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>:
      operator[](size_type __n) noexcept
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f89d 	bl	8001d46 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>:
    reference operator [](size_t i)
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
      return p_buffer[i];
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	440b      	add	r3, r1
    }
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6839      	ldr	r1, [r7, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f889 	bl	8001d62 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_ZNSt5arrayIS_ItLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6839      	ldr	r1, [r7, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 f88c 	bl	8001d86 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_refERA4_KS1_j>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f883 	bl	8001daa <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_ZNSt14__array_traitsIN9SmartFuse11ChannelDataELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8001cf6:	687b      	ldr	r3, [r7, #4]
  }
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8001d0c:	687b      	ldr	r3, [r7, #4]
  }
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8001d22:	687b      	ldr	r3, [r7, #4]
  }
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_ZN3etl7forwardIRK16ChannelsSettingsEEOT_RNS_16remove_referenceIS4_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8001d38:	687b      	ldr	r3, [r7, #4]
  }
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_ZN11GpioElementD1Ev>:
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		//virtual void handle();
		virtual ~GpioElement() { };
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <_ZN11GpioElementD1Ev+0x1c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	0800970c 	.word	0x0800970c

08001de0 <_ZN11GpioElementD0Ev>:
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ffe9 	bl	8001dc0 <_ZN11GpioElementD1Ev>
 8001dee:	2110      	movs	r1, #16
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f006 fb82 	bl	80084fa <_ZdlPvj>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
 *      Author: Piotr Lesicki
 */

#include "gpio elements.hpp"

GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	70fb      	strb	r3, [r7, #3]
						 port(port), pin(pin), is_inverted(is_inverted) { }
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x34>)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	715a      	strb	r2, [r3, #5]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	0800970c 	.word	0x0800970c

08001e38 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin) :
							   GpioElement(port, pin, false) { }

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	70fb      	strb	r3, [r7, #3]
							   GpioElement(port, pin, is_inverted) { }
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	f7ff ffd7 	bl	8001e00 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x2c>)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	080096fc 	.word	0x080096fc

08001e68 <_ZN14GpioOutElement8activateEv>:

void GpioOutElement::activate()
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68d8      	ldr	r0, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	795b      	ldrb	r3, [r3, #5]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <_ZN14GpioOutElement8activateEv+0x1e>
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <_ZN14GpioOutElement8activateEv+0x20>
 8001e86:	2301      	movs	r3, #1
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f004 fd61 	bl	8006950 <HAL_GPIO_WritePin>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_ZN14GpioOutElement10deactivateEv>:

void GpioOutElement::deactivate()
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68d8      	ldr	r0, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	b299      	uxth	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	795b      	ldrb	r3, [r3, #5]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <_ZN14GpioOutElement10deactivateEv+0x1e>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <_ZN14GpioOutElement10deactivateEv+0x20>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f004 fd4a 	bl	8006950 <HAL_GPIO_WritePin>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>:
}

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin) :
							 GpioElement(port, pin, false) { }

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	70fb      	strb	r3, [r7, #3]
							 GpioElement(port, pin, is_inverted) { }
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	f7ff ff91 	bl	8001e00 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb+0x2c>)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	080096ec 	.word	0x080096ec

08001ef4 <_ZN13GpioInElement8isActiveEv>:

bool GpioInElement::isActive()
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	 *		  1  |    1   |  0
	 *
	 *	  basically a XOR operation
	 *
	 */
	return ((HAL_GPIO_ReadPin((GPIO_TypeDef*)(this->port), this->pin) == GPIO_PIN_SET) != this->is_inverted);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f004 fd09 	bl	8006920 <HAL_GPIO_ReadPin>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	795b      	ldrb	r3, [r3, #5]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <_ZN13GpioInElementD1Ev>:

		//void handle() override;
		void toggle();
};

class GpioInElement : public GpioElement
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <_ZN13GpioInElementD1Ev+0x20>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff3b 	bl	8001dc0 <_ZN11GpioElementD1Ev>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	080096ec 	.word	0x080096ec

08001f58 <_ZN13GpioInElementD0Ev>:
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ffe7 	bl	8001f34 <_ZN13GpioInElementD1Ev>
 8001f66:	2110      	movs	r1, #16
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f006 fac6 	bl	80084fa <_ZdlPvj>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZN14GpioOutElementD1Ev>:
class GpioOutElement : public GpioElement
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <_ZN14GpioOutElementD1Ev+0x20>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff19 	bl	8001dc0 <_ZN11GpioElementD1Ev>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	080096fc 	.word	0x080096fc

08001f9c <_ZN14GpioOutElementD0Ev>:
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ffe7 	bl	8001f78 <_ZN14GpioOutElementD1Ev>
 8001faa:	2110      	movs	r1, #16
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f006 faa4 	bl	80084fa <_ZdlPvj>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd2:	4b5e      	ldr	r3, [pc, #376]	; (800214c <MX_GPIO_Init+0x190>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	4a5d      	ldr	r2, [pc, #372]	; (800214c <MX_GPIO_Init+0x190>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fde:	4b5b      	ldr	r3, [pc, #364]	; (800214c <MX_GPIO_Init+0x190>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fea:	4b58      	ldr	r3, [pc, #352]	; (800214c <MX_GPIO_Init+0x190>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	4a57      	ldr	r2, [pc, #348]	; (800214c <MX_GPIO_Init+0x190>)
 8001ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff6:	4b55      	ldr	r3, [pc, #340]	; (800214c <MX_GPIO_Init+0x190>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b52      	ldr	r3, [pc, #328]	; (800214c <MX_GPIO_Init+0x190>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	4a51      	ldr	r2, [pc, #324]	; (800214c <MX_GPIO_Init+0x190>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200e:	4b4f      	ldr	r3, [pc, #316]	; (800214c <MX_GPIO_Init+0x190>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	4b4c      	ldr	r3, [pc, #304]	; (800214c <MX_GPIO_Init+0x190>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	4a4b      	ldr	r2, [pc, #300]	; (800214c <MX_GPIO_Init+0x190>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002026:	4b49      	ldr	r3, [pc, #292]	; (800214c <MX_GPIO_Init+0x190>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002032:	4b46      	ldr	r3, [pc, #280]	; (800214c <MX_GPIO_Init+0x190>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	4a45      	ldr	r2, [pc, #276]	; (800214c <MX_GPIO_Init+0x190>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203e:	4b43      	ldr	r3, [pc, #268]	; (800214c <MX_GPIO_Init+0x190>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	210f      	movs	r1, #15
 800204e:	4840      	ldr	r0, [pc, #256]	; (8002150 <MX_GPIO_Init+0x194>)
 8002050:	f004 fc7e 	bl	8006950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	211e      	movs	r1, #30
 8002058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205c:	f004 fc78 	bl	8006950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 7109 	mov.w	r1, #548	; 0x224
 8002066:	483b      	ldr	r0, [pc, #236]	; (8002154 <MX_GPIO_Init+0x198>)
 8002068:	f004 fc72 	bl	8006950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 800206c:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8002070:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002072:	2303      	movs	r3, #3
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4833      	ldr	r0, [pc, #204]	; (8002150 <MX_GPIO_Init+0x194>)
 8002082:	f004 fabb 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002086:	230f      	movs	r3, #15
 8002088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208a:	2301      	movs	r3, #1
 800208c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	482c      	ldr	r0, [pc, #176]	; (8002150 <MX_GPIO_Init+0x194>)
 800209e:	f004 faad 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80020a2:	231e      	movs	r3, #30
 80020a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a6:	2301      	movs	r3, #1
 80020a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020bc:	f004 fa9e 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9;
 80020c0:	f44f 7309 	mov.w	r3, #548	; 0x224
 80020c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	481e      	ldr	r0, [pc, #120]	; (8002154 <MX_GPIO_Init+0x198>)
 80020da:	f004 fa8f 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB4 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80020de:	f64f 53d0 	movw	r3, #64976	; 0xfdd0
 80020e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e4:	2303      	movs	r3, #3
 80020e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	4619      	mov	r1, r3
 80020f2:	4818      	ldr	r0, [pc, #96]	; (8002154 <MX_GPIO_Init+0x198>)
 80020f4:	f004 fa82 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 80020f8:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 80020fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020fe:	2303      	movs	r3, #3
 8002100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002110:	f004 fa74 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002114:	2304      	movs	r3, #4
 8002116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002118:	2303      	movs	r3, #3
 800211a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	480c      	ldr	r0, [pc, #48]	; (8002158 <MX_GPIO_Init+0x19c>)
 8002128:	f004 fa68 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800212c:	2308      	movs	r3, #8
 800212e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002130:	2303      	movs	r3, #3
 8002132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	4807      	ldr	r0, [pc, #28]	; (800215c <MX_GPIO_Init+0x1a0>)
 8002140:	f004 fa5c 	bl	80065fc <HAL_GPIO_Init>

}
 8002144:	bf00      	nop
 8002146:	3728      	adds	r7, #40	; 0x28
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	48000800 	.word	0x48000800
 8002154:	48000400 	.word	0x48000400
 8002158:	48000c00 	.word	0x48000c00
 800215c:	48001c00 	.word	0x48001c00

08002160 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	601a      	str	r2, [r3, #0]
    {
    }
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
    {
    }
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	461a      	mov	r2, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	6053      	str	r3, [r2, #4]
 80021aa:	6093      	str	r3, [r2, #8]
 80021ac:	60d3      	str	r3, [r2, #12]
 80021ae:	6113      	str	r3, [r2, #16]
 80021b0:	6153      	str	r3, [r2, #20]
 80021b2:	6193      	str	r3, [r2, #24]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	331c      	adds	r3, #28
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	331c      	adds	r3, #28
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68b8      	ldr	r0, [r7, #8]
 80021c8:	f003 fd9e 	bl	8005d08 <HAL_CAN_GetRxMessage>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
    this->status =
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	791a      	ldrb	r2, [r3, #4]
 80021ec:	795b      	ldrb	r3, [r3, #5]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	6938      	ldr	r0, [r7, #16]
 8002218:	f001 f930 	bl	800347c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>
 800221c:	6178      	str	r0, [r7, #20]
 800221e:	6938      	ldr	r0, [r7, #16]
 8002220:	f001 f938 	bl	8003494 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	429a      	cmp	r2, r3
 800222c:	d01f      	beq.n	800226e <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ffd2 	bl	80021e0 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 800223c:	4602      	mov	r2, r0
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6839      	ldr	r1, [r7, #0]
 800225e:	4610      	mov	r0, r2
 8002260:	4798      	blx	r3
        return true;
 8002262:	2301      	movs	r3, #1
 8002264:	e004      	b.n	8002270 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3304      	adds	r3, #4
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e7db      	b.n	8002226 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 800226e:	2300      	movs	r3, #0
  }
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff83 	bl	8002194 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 800228e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	4619      	mov	r1, r3
 800229c:	4803      	ldr	r0, [pc, #12]	; (80022ac <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800229e:	f7ff ffb1 	bl	8002204 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 80022a2:	bf00      	nop
 80022a4:	3730      	adds	r7, #48	; 0x30
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000000 	.word	0x20000000

080022b0 <_ZN16SmartFuseHandlerILm4EEC1Ev>:

		SmartFuseState getGSB(std::array < uint8_t, 3 > x);
};

template <uint32_t num_of_sf>
class SmartFuseHandler
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 f904 	bl	80034c8 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <_ZN11GpioElementC1ERKS_>:
class GpioElement
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	4a0d      	ldr	r2, [pc, #52]	; (800230c <_ZN11GpioElementC1ERKS_+0x40>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	791a      	ldrb	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	711a      	strb	r2, [r3, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	795a      	ldrb	r2, [r3, #5]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	715a      	strb	r2, [r3, #5]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	0800970c 	.word	0x0800970c

08002310 <_ZN13GpioInElementC1ERKS_>:
class GpioInElement : public GpioElement
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ffd3 	bl	80022cc <_ZN11GpioElementC1ERKS_>
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <_ZN13GpioInElementC1ERKS_+0x28>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	080096ec 	.word	0x080096ec

0800233c <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4614      	mov	r4, r2
 800234e:	461d      	mov	r5, r3
 8002350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002354:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002358:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3318      	adds	r3, #24
 8002360:	2203      	movs	r2, #3
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	4618      	mov	r0, r3
 8002366:	f006 f92f 	bl	80085c8 <memcpy>
  }
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bdb0      	pop	{r4, r5, r7, pc}

08002374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002376:	b0d9      	sub	sp, #356	; 0x164
 8002378:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint8_t _1 = 0x2;
 800237a:	2302      	movs	r3, #2
 800237c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	ChannelsSettings channels_settings
 8002380:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002384:	2236      	movs	r2, #54	; 0x36
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f006 f92b 	bl	80085e4 <memset>
 800238e:	2301      	movs	r3, #1
 8002390:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8002394:	2301      	movs	r3, #1
 8002396:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 800239a:	2301      	movs	r3, #1
 800239c:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80023ac:	2301      	movs	r3, #1
 80023ae:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 80023b2:	2302      	movs	r3, #2
 80023b4:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 80023b8:	2302      	movs	r3, #2
 80023ba:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 80023be:	2302      	movs	r3, #2
 80023c0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80023c4:	2302      	movs	r3, #2
 80023c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 80023ca:	2302      	movs	r3, #2
 80023cc:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 80023d0:	2302      	movs	r3, #2
 80023d2:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
 80023d6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80023da:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 80023de:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80023e2:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 80023e6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80023ea:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 80023ee:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80023f2:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80023f6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80023fa:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80023fe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002402:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8002406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240a:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 800240e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002412:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8002416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 800241e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002422:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
 8002426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800242a:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 800242e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002432:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		.latch_off_time_out = { _1, _1, _1, _1, _1, _1 },
		.sampling_mode = { SamplingMode::Continuous, SamplingMode::Continuous, SamplingMode::Continuous,
							SamplingMode::Continuous, SamplingMode::Continuous, SamplingMode::Continuous },
		.duty_cycle = { 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff },
		.clamping_currents = { { 0x0000, 0xffff },  { 0x0000, 0xffff }, { 0x0000, 0xffff }, { 0x0000, 0xffff }, { 0x0000, 0xffff }, { 0x0000, 0xffff } }
	};
 8002436:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800243a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800243e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002442:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8002446:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800244a:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 800244e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002452:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8002456:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800245a:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 800245e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002462:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	sf_handler.emplaceBack(GPIOA, GPIO_PIN_1, &hspi1, channels_settings);
 8002466:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	4bc9      	ldr	r3, [pc, #804]	; (8002794 <main+0x420>)
 800246e:	2202      	movs	r2, #2
 8002470:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002474:	48c8      	ldr	r0, [pc, #800]	; (8002798 <main+0x424>)
 8002476:	f7fe f8c1 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_2, &hspi1, channels_settings);
 800247a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4bc4      	ldr	r3, [pc, #784]	; (8002794 <main+0x420>)
 8002482:	2204      	movs	r2, #4
 8002484:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002488:	48c3      	ldr	r0, [pc, #780]	; (8002798 <main+0x424>)
 800248a:	f7fe f8b7 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_3, &hspi1, channels_settings);
 800248e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	4bbf      	ldr	r3, [pc, #764]	; (8002794 <main+0x420>)
 8002496:	2208      	movs	r2, #8
 8002498:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800249c:	48be      	ldr	r0, [pc, #760]	; (8002798 <main+0x424>)
 800249e:	f7fe f8ad 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_4, &hspi1, channels_settings);
 80024a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	4bba      	ldr	r3, [pc, #744]	; (8002794 <main+0x420>)
 80024aa:	2210      	movs	r2, #16
 80024ac:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80024b0:	48b9      	ldr	r0, [pc, #740]	; (8002798 <main+0x424>)
 80024b2:	f7fe f8a3 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK16ChannelsSettings>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024b6:	f002 f8f2 	bl	800469e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024ba:	f000 fa57 	bl	800296c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024be:	f7ff fd7d 	bl	8001fbc <MX_GPIO_Init>
  MX_CAN1_Init();
 80024c2:	f7fe f805 	bl	80004d0 <MX_CAN1_Init>
  MX_ADC1_Init();
 80024c6:	f7fd feeb 	bl	80002a0 <MX_ADC1_Init>
  MX_SPI1_Init();
 80024ca:	f001 fe95 	bl	80041f8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	sf_handler.initAll();
 80024ce:	48b2      	ldr	r0, [pc, #712]	; (8002798 <main+0x424>)
 80024d0:	f7fe f8d4 	bl	800067c <_ZN16SmartFuseHandlerILm4EE7initAllEv>
	initCAN();
 80024d4:	f000 faaa 	bl	8002a2c <_Z7initCANv>

	led_ok.deactivate();
 80024d8:	48b0      	ldr	r0, [pc, #704]	; (800279c <main+0x428>)
 80024da:	f7ff fcdc 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 80024de:	48b0      	ldr	r0, [pc, #704]	; (80027a0 <main+0x42c>)
 80024e0:	f7ff fcd9 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 80024e4:	48af      	ldr	r0, [pc, #700]	; (80027a4 <main+0x430>)
 80024e6:	f7ff fcd6 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 80024ea:	48af      	ldr	r0, [pc, #700]	; (80027a8 <main+0x434>)
 80024ec:	f7ff fcd3 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>

	std::array < GpioInElement, 5 > optos { safety_ams, safety_spare, safety_tms, safety_td, safety_hvd };
 80024f0:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80024f4:	49ad      	ldr	r1, [pc, #692]	; (80027ac <main+0x438>)
 80024f6:	4620      	mov	r0, r4
 80024f8:	f7ff ff0a 	bl	8002310 <_ZN13GpioInElementC1ERKS_>
 80024fc:	3410      	adds	r4, #16
 80024fe:	49ac      	ldr	r1, [pc, #688]	; (80027b0 <main+0x43c>)
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff ff05 	bl	8002310 <_ZN13GpioInElementC1ERKS_>
 8002506:	3410      	adds	r4, #16
 8002508:	49aa      	ldr	r1, [pc, #680]	; (80027b4 <main+0x440>)
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff ff00 	bl	8002310 <_ZN13GpioInElementC1ERKS_>
 8002510:	3410      	adds	r4, #16
 8002512:	49a9      	ldr	r1, [pc, #676]	; (80027b8 <main+0x444>)
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff fefb 	bl	8002310 <_ZN13GpioInElementC1ERKS_>
 800251a:	f104 0310 	add.w	r3, r4, #16
 800251e:	49a7      	ldr	r1, [pc, #668]	; (80027bc <main+0x448>)
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fef5 	bl	8002310 <_ZN13GpioInElementC1ERKS_>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	sf_handler.enableAll();
 8002526:	489c      	ldr	r0, [pc, #624]	; (8002798 <main+0x424>)
 8002528:	f7fe f8d3 	bl	80006d2 <_ZN16SmartFuseHandlerILm4EE9enableAllEv>

	enable_mosfets.activate();
 800252c:	48a4      	ldr	r0, [pc, #656]	; (80027c0 <main+0x44c>)
 800252e:	f7ff fc9b 	bl	8001e68 <_ZN14GpioOutElement8activateEv>

	led_ok.activate();
 8002532:	489a      	ldr	r0, [pc, #616]	; (800279c <main+0x428>)
 8002534:	f7ff fc98 	bl	8001e68 <_ZN14GpioOutElement8activateEv>

	Timer timer_can_send_main_frame(10);
 8002538:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800253c:	210a      	movs	r1, #10
 800253e:	4618      	mov	r0, r3
 8002540:	f002 f83b 	bl	80045ba <_ZN5TimerC1Em>
	Timer timer_can_send_other_frames(100);
 8002544:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002548:	2164      	movs	r1, #100	; 0x64
 800254a:	4618      	mov	r0, r3
 800254c:	f002 f835 	bl	80045ba <_ZN5TimerC1Em>

	while (1)
	{
		//----------------------------------------------------------------------------------------
		// handle smart fuses and show as Ok/Warnings/Error
		auto state = sf_handler.handleAll();
 8002550:	4891      	ldr	r0, [pc, #580]	; (8002798 <main+0x424>)
 8002552:	f7fe f868 	bl	8000626 <_ZN16SmartFuseHandlerILm4EE9handleAllEv>
 8002556:	4603      	mov	r3, r0
 8002558:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		switch (state)
 800255c:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8002560:	3b01      	subs	r3, #1
 8002562:	2b07      	cmp	r3, #7
 8002564:	d832      	bhi.n	80025cc <main+0x258>
 8002566:	a201      	add	r2, pc, #4	; (adr r2, 800256c <main+0x1f8>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	08002595 	.word	0x08002595
 8002570:	080025bd 	.word	0x080025bd
 8002574:	080025a5 	.word	0x080025a5
 8002578:	080025ad 	.word	0x080025ad
 800257c:	0800258d 	.word	0x0800258d
 8002580:	0800259d 	.word	0x0800259d
 8002584:	080025c5 	.word	0x080025c5
 8002588:	080025b5 	.word	0x080025b5
		{
			case SmartFuseState::LatchOff: led_warning_1.activate(); break;
 800258c:	4884      	ldr	r0, [pc, #528]	; (80027a0 <main+0x42c>)
 800258e:	f7ff fc6b 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
 8002592:	e024      	b.n	80025de <main+0x26a>
			case SmartFuseState::ResetState: led_warning_2.activate(); break;
 8002594:	4883      	ldr	r0, [pc, #524]	; (80027a4 <main+0x430>)
 8002596:	f7ff fc67 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
 800259a:	e020      	b.n	80025de <main+0x26a>
			case SmartFuseState::OLOFF: led_warning_2.activate(); break;
 800259c:	4881      	ldr	r0, [pc, #516]	; (80027a4 <main+0x430>)
 800259e:	f7ff fc63 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
 80025a2:	e01c      	b.n	80025de <main+0x26a>
			case SmartFuseState::OTPLVDS: led_warning_2.activate(); break;
 80025a4:	487f      	ldr	r0, [pc, #508]	; (80027a4 <main+0x430>)
 80025a6:	f7ff fc5f 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
 80025aa:	e018      	b.n	80025de <main+0x26a>
			case SmartFuseState::TempFail: led_warning_2.activate(); break;
 80025ac:	487d      	ldr	r0, [pc, #500]	; (80027a4 <main+0x430>)
 80025ae:	f7ff fc5b 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
 80025b2:	e014      	b.n	80025de <main+0x26a>
			case SmartFuseState::NotResponding: led_error.activate(); break;
 80025b4:	487c      	ldr	r0, [pc, #496]	; (80027a8 <main+0x434>)
 80025b6:	f7ff fc57 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
 80025ba:	e010      	b.n	80025de <main+0x26a>
			case SmartFuseState::SPIError: led_error.activate(); break;
 80025bc:	487a      	ldr	r0, [pc, #488]	; (80027a8 <main+0x434>)
 80025be:	f7ff fc53 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
 80025c2:	e00c      	b.n	80025de <main+0x26a>
			case SmartFuseState::FailSafe: led_error.activate(); break;
 80025c4:	4878      	ldr	r0, [pc, #480]	; (80027a8 <main+0x434>)
 80025c6:	f7ff fc4f 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
 80025ca:	e008      	b.n	80025de <main+0x26a>
			default:
			{
				led_warning_1.deactivate();
 80025cc:	4874      	ldr	r0, [pc, #464]	; (80027a0 <main+0x42c>)
 80025ce:	f7ff fc62 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>
				led_warning_2.deactivate();
 80025d2:	4874      	ldr	r0, [pc, #464]	; (80027a4 <main+0x430>)
 80025d4:	f7ff fc5f 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>
				led_error.deactivate();
 80025d8:	4873      	ldr	r0, [pc, #460]	; (80027a8 <main+0x434>)
 80025da:	f7ff fc5c 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>
			}
		}
		// debug stuff
		fuses_states = sf_handler.getStates();
 80025de:	486e      	ldr	r0, [pc, #440]	; (8002798 <main+0x424>)
 80025e0:	f7fe f8a5 	bl	800072e <_ZN16SmartFuseHandlerILm4EE9getStatesEv>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <main+0x450>)
 80025e8:	6013      	str	r3, [r2, #0]
		channels_states = sf_handler.getChannelsStates();
 80025ea:	4c77      	ldr	r4, [pc, #476]	; (80027c8 <main+0x454>)
 80025ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025f0:	4969      	ldr	r1, [pc, #420]	; (8002798 <main+0x424>)
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe f8cd 	bl	8000792 <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>
 80025f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80025fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002600:	461d      	mov	r5, r3
 8002602:	6828      	ldr	r0, [r5, #0]
 8002604:	6869      	ldr	r1, [r5, #4]
 8002606:	68aa      	ldr	r2, [r5, #8]
 8002608:	68eb      	ldr	r3, [r5, #12]
 800260a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800260c:	6928      	ldr	r0, [r5, #16]
 800260e:	6969      	ldr	r1, [r5, #20]
 8002610:	c403      	stmia	r4!, {r0, r1}
		channels_currents = sf_handler.getChannelsCurrents();
 8002612:	4d6e      	ldr	r5, [pc, #440]	; (80027cc <main+0x458>)
 8002614:	463b      	mov	r3, r7
 8002616:	4960      	ldr	r1, [pc, #384]	; (8002798 <main+0x424>)
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe f8e3 	bl	80007e4 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>
 800261e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002622:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002626:	461c      	mov	r4, r3
 8002628:	462e      	mov	r6, r5
 800262a:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800262e:	4635      	mov	r5, r6
 8002630:	4623      	mov	r3, r4
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800263c:	3410      	adds	r4, #16
 800263e:	3610      	adds	r6, #16
 8002640:	4564      	cmp	r4, ip
 8002642:	d1f4      	bne.n	800262e <main+0x2ba>

		//----------------------------------------------------------------------------------------
		// handle safety
		for (auto& safety : optos)
 8002644:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002648:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800264c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002650:	f000 ff5f 	bl	8003512 <_ZNSt5arrayI13GpioInElementLj5EE5beginEv>
 8002654:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
 8002658:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800265c:	f000 ff65 	bl	800352a <_ZNSt5arrayI13GpioInElementLj5EE3endEv>
 8002660:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 8002664:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002668:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800266c:	429a      	cmp	r2, r3
 800266e:	d00d      	beq.n	800268c <main+0x318>
 8002670:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002674:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		{
			safety.isActive();
 8002678:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800267c:	f7ff fc3a 	bl	8001ef4 <_ZN13GpioInElement8isActiveEv>
		for (auto& safety : optos)
 8002680:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002684:	3310      	adds	r3, #16
 8002686:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800268a:	e7eb      	b.n	8002664 <main+0x2f0>
		}

		//----------------------------------------------------------------------------------------
		// transmit receive can and handle
		if(timer_can_send_main_frame.checkIfTimedOutAndReset())
 800268c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002690:	4618      	mov	r0, r3
 8002692:	f001 ffb1 	bl	80045f8 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80f7 	beq.w	800288c <main+0x518>
		{
			auto device_state = PUTM_CAN::SF_states::OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

			PUTM_CAN::FuseData fuses_overall_state { };
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

			for(size_t i = 0; i < 4; i++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d819      	bhi.n	80026ec <main+0x378>
				if(fuses_states[i] != SmartFuseState::Ok)
 80026b8:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80026bc:	4841      	ldr	r0, [pc, #260]	; (80027c4 <main+0x450>)
 80026be:	f7ff fa9b 	bl	8001bf8 <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 80026c2:	4603      	mov	r3, r0
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bf14      	ite	ne
 80026ca:	2301      	movne	r3, #1
 80026cc:	2300      	moveq	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <main+0x36c>
					device_state = static_cast<PUTM_CAN::SF_states>(i + 2);
 80026d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	3302      	adds	r3, #2
 80026dc:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			for(size_t i = 0; i < 4; i++)
 80026e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026e4:	3301      	adds	r3, #1
 80026e6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026ea:	e7e1      	b.n	80026b0 <main+0x33c>

			for(auto& sf : channels_currents)
 80026ec:	4b37      	ldr	r3, [pc, #220]	; (80027cc <main+0x458>)
 80026ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80026f2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80026f6:	f000 ff25 	bl	8003544 <_ZNSt5arrayIS_ItLj6EELj4EE5beginEv>
 80026fa:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 80026fe:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002702:	f000 ff2b 	bl	800355c <_ZNSt5arrayIS_ItLj6EELj4EE3endEv>
 8002706:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 800270a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800270e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002712:	429a      	cmp	r2, r3
 8002714:	d05c      	beq.n	80027d0 <main+0x45c>
 8002716:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800271a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				for(auto& ch_current : sf)
 800271e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002722:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002726:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800272a:	f000 ff24 	bl	8003576 <_ZNSt5arrayItLj6EE5beginEv>
 800272e:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
 8002732:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002736:	f000 ff2a 	bl	800358e <_ZNSt5arrayItLj6EE3endEv>
 800273a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 800273e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002742:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002746:	429a      	cmp	r2, r3
 8002748:	d01d      	beq.n	8002786 <main+0x412>
 800274a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800274e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
					fuses_overall_state.current += ch_current;
 8002752:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002756:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800275a:	b29b      	uxth	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	4413      	add	r3, r2
 8002766:	b29b      	uxth	r3, r3
 8002768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276c:	b29a      	uxth	r2, r3
 800276e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002772:	f362 130f 	bfi	r3, r2, #4, #12
 8002776:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				for(auto& ch_current : sf)
 800277a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800277e:	3302      	adds	r3, #2
 8002780:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002784:	e7db      	b.n	800273e <main+0x3ca>
			for(auto& sf : channels_currents)
 8002786:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800278a:	330c      	adds	r3, #12
 800278c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002790:	e7bb      	b.n	800270a <main+0x396>
 8002792:	bf00      	nop
 8002794:	200006d8 	.word	0x200006d8
 8002798:	20000470 	.word	0x20000470
 800279c:	2000032c 	.word	0x2000032c
 80027a0:	2000033c 	.word	0x2000033c
 80027a4:	2000034c 	.word	0x2000034c
 80027a8:	2000035c 	.word	0x2000035c
 80027ac:	200003ac 	.word	0x200003ac
 80027b0:	200003bc 	.word	0x200003bc
 80027b4:	200003cc 	.word	0x200003cc
 80027b8:	200003dc 	.word	0x200003dc
 80027bc:	200003ec 	.word	0x200003ec
 80027c0:	2000039c 	.word	0x2000039c
 80027c4:	20000424 	.word	0x20000424
 80027c8:	20000428 	.word	0x20000428
 80027cc:	20000440 	.word	0x20000440

			for(auto& sf : fuses_states)
 80027d0:	4b61      	ldr	r3, [pc, #388]	; (8002958 <main+0x5e4>)
 80027d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80027d6:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80027da:	f000 fee5 	bl	80035a8 <_ZNSt5arrayI14SmartFuseStateLj4EE5beginEv>
 80027de:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
 80027e2:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80027e6:	f000 feeb 	bl	80035c0 <_ZNSt5arrayI14SmartFuseStateLj4EE3endEv>
 80027ea:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80027ee:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80027f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d023      	beq.n	8002842 <main+0x4ce>
 80027fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80027fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				fuses_overall_state.ok |= (sf == SmartFuseState::Ok);
 8002802:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002806:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	b25a      	sxtb	r2, r3
 800280e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	b25b      	sxtb	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	b25b      	sxtb	r3, r3
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	b2da      	uxtb	r2, r3
 800282a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800282e:	f362 0300 	bfi	r3, r2, #0, #1
 8002832:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			for(auto& sf : fuses_states)
 8002836:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800283a:	3301      	adds	r3, #1
 800283c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002840:	e7d5      	b.n	80027ee <main+0x47a>

			PUTM_CAN::SF_main sf_main
			{
				.fuses_overall_state = fuses_overall_state,
				.device_state =	device_state
			};
 8002842:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002846:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800284a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800284e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

			PUTM_CAN::Can_tx_message<PUTM_CAN::SF_main> can_sender(sf_main, PUTM_CAN::can_tx_header_SF_MAIN);
 8002852:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002856:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800285a:	4a40      	ldr	r2, [pc, #256]	; (800295c <main+0x5e8>)
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fd6d 	bl	800233c <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

			if(can_sender.send(hcan1) != HAL_StatusTypeDef::HAL_OK) led_error.activate();
 8002862:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002866:	493e      	ldr	r1, [pc, #248]	; (8002960 <main+0x5ec>)
 8002868:	4618      	mov	r0, r3
 800286a:	f000 feb7 	bl	80035dc <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <main+0x512>
 800287e:	4839      	ldr	r0, [pc, #228]	; (8002964 <main+0x5f0>)
 8002880:	f7ff faf2 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
 8002884:	e002      	b.n	800288c <main+0x518>
			else led_error.deactivate();
 8002886:	4837      	ldr	r0, [pc, #220]	; (8002964 <main+0x5f0>)
 8002888:	f7ff fb05 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>
		}

		if(timer_can_send_other_frames.checkIfTimedOutAndReset())
 800288c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002890:	4618      	mov	r0, r3
 8002892:	f001 feb1 	bl	80045f8 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	f43f ae59 	beq.w	8002550 <main+0x1dc>
		{
			if( sendCanFrameFrontBox() != HAL_OK ) led_warning_2.activate();
 800289e:	f000 f931 	bl	8002b04 <_Z20sendCanFrameFrontBoxv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf14      	ite	ne
 80028a8:	2301      	movne	r3, #1
 80028aa:	2300      	moveq	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <main+0x544>
 80028b2:	482d      	ldr	r0, [pc, #180]	; (8002968 <main+0x5f4>)
 80028b4:	f7ff fad8 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
			if( sendCanFrameCoolingAndSafety() != HAL_OK ) led_warning_2.activate();
 80028b8:	f000 fa06 	bl	8002cc8 <_Z28sendCanFrameCoolingAndSafetyv>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <main+0x55e>
 80028cc:	4826      	ldr	r0, [pc, #152]	; (8002968 <main+0x5f4>)
 80028ce:	f7ff facb 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
			if( sendCanFrameDV() != HAL_OK ) led_warning_2.activate();
 80028d2:	f000 fb0b 	bl	8002eec <_Z14sendCanFrameDVv>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <main+0x578>
 80028e6:	4820      	ldr	r0, [pc, #128]	; (8002968 <main+0x5f4>)
 80028e8:	f7ff fabe 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
			if( sendCanFrameDV() != HAL_OK ) led_warning_2.activate();
 80028ec:	f000 fafe 	bl	8002eec <_Z14sendCanFrameDVv>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <main+0x592>
 8002900:	4819      	ldr	r0, [pc, #100]	; (8002968 <main+0x5f4>)
 8002902:	f7ff fab1 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
			if( sendCanFrameWS() != HAL_OK ) led_warning_2.activate();
 8002906:	f000 fc03 	bl	8003110 <_Z14sendCanFrameWSv>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf14      	ite	ne
 8002910:	2301      	movne	r3, #1
 8002912:	2300      	moveq	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <main+0x5ac>
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <main+0x5f4>)
 800291c:	f7ff faa4 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
			if( sendCanFrameNucs() != HAL_OK ) led_warning_2.activate();
 8002920:	f000 fca8 	bl	8003274 <_Z16sendCanFrameNucsv>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <main+0x5c6>
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <main+0x5f4>)
 8002936:	f7ff fa97 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
			if( sendCanFrameSafety() != HAL_OK ) led_warning_2.activate();
 800293a:	f000 fd1b 	bl	8003374 <_Z18sendCanFrameSafetyv>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	f43f ae00 	beq.w	8002550 <main+0x1dc>
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <main+0x5f4>)
 8002952:	f7ff fa89 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 8002956:	e5fb      	b.n	8002550 <main+0x1dc>
 8002958:	20000424 	.word	0x20000424
 800295c:	08009714 	.word	0x08009714
 8002960:	20000304 	.word	0x20000304
 8002964:	2000035c 	.word	0x2000035c
 8002968:	2000034c 	.word	0x2000034c

0800296c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b098      	sub	sp, #96	; 0x60
 8002970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002972:	f107 0318 	add.w	r3, r7, #24
 8002976:	2248      	movs	r2, #72	; 0x48
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f005 fe32 	bl	80085e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800298e:	2000      	movs	r0, #0
 8002990:	f004 f816 	bl	80069c0 <HAL_PWREx_ControlVoltageScaling>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2300      	moveq	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80029a4:	f000 fd50 	bl	8003448 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029a8:	2302      	movs	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029b2:	2340      	movs	r3, #64	; 0x40
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b6:	2302      	movs	r3, #2
 80029b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029ba:	2302      	movs	r3, #2
 80029bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80029be:	2302      	movs	r3, #2
 80029c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 80029c2:	231e      	movs	r3, #30
 80029c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029c6:	2302      	movs	r3, #2
 80029c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029ca:	2302      	movs	r3, #2
 80029cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029ce:	2302      	movs	r3, #2
 80029d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d2:	f107 0318 	add.w	r3, r7, #24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f004 f896 	bl	8006b08 <HAL_RCC_OscConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 80029ec:	f000 fd2c 	bl	8003448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f0:	230f      	movs	r3, #15
 80029f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f4:	2303      	movs	r3, #3
 80029f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2105      	movs	r1, #5
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f004 fd05 	bl	8007418 <HAL_RCC_ClockConfig>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8002a1e:	f000 fd13 	bl	8003448 <Error_Handler>
  }
}
 8002a22:	bf00      	nop
 8002a24:	3760      	adds	r7, #96	; 0x60
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <_Z7initCANv>:

/* USER CODE BEGIN 4 */

void initCAN()
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	can_filtering_config.FilterBank = 0;
 8002a30:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
	can_filtering_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8002a36:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
	can_filtering_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	61da      	str	r2, [r3, #28]
	can_filtering_config.FilterIdHigh = 0x0000;
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
	can_filtering_config.FilterIdLow = 0x0000;
 8002a48:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	605a      	str	r2, [r3, #4]
	can_filtering_config.FilterMaskIdHigh = 0x0000;
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
	can_filtering_config.FilterMaskIdLow = 0x0000;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
	can_filtering_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
	can_filtering_config.FilterActivation = ENABLE;
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	621a      	str	r2, [r3, #32]
	can_filtering_config.SlaveStartFilterBank = 14;
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a68:	220e      	movs	r2, #14
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24

	if ( HAL_CAN_ConfigFilter(&hcan1, &can_filtering_config) != HAL_OK )
 8002a6c:	4915      	ldr	r1, [pc, #84]	; (8002ac4 <_Z7initCANv+0x98>)
 8002a6e:	4816      	ldr	r0, [pc, #88]	; (8002ac8 <_Z7initCANv+0x9c>)
 8002a70:	f002 ff61 	bl	8005936 <HAL_CAN_ConfigFilter>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <_Z7initCANv+0x5c>
		Error_Handler();
 8002a84:	f000 fce0 	bl	8003448 <Error_Handler>

	if ( HAL_CAN_Start(&hcan1) != HAL_OK )
 8002a88:	480f      	ldr	r0, [pc, #60]	; (8002ac8 <_Z7initCANv+0x9c>)
 8002a8a:	f003 f81e 	bl	8005aca <HAL_CAN_Start>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <_Z7initCANv+0x76>
		Error_Handler();
 8002a9e:	f000 fcd3 	bl	8003448 <Error_Handler>

	if ( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4808      	ldr	r0, [pc, #32]	; (8002ac8 <_Z7initCANv+0x9c>)
 8002aa6:	f003 fa41 	bl	8005f2c <HAL_CAN_ActivateNotification>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <_Z7initCANv+0x92>
		Error_Handler();
 8002aba:	f000 fcc5 	bl	8003448 <Error_Handler>
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200003fc 	.word	0x200003fc
 8002ac8:	20000304 	.word	0x20000304

08002acc <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002acc:	b5b0      	push	{r4, r5, r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4614      	mov	r4, r2
 8002ade:	461d      	mov	r5, r3
 8002ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ae8:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3318      	adds	r3, #24
 8002af0:	2208      	movs	r2, #8
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f005 fd67 	bl	80085c8 <memcpy>
  }
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bdb0      	pop	{r4, r5, r7, pc}

08002b04 <_Z20sendCanFrameFrontBoxv>:

HAL_StatusTypeDef sendCanFrameFrontBox()
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002b0a:	af00      	add	r7, sp, #0
	auto sf_buff = sf_handler.getSmartFuses();
 8002b0c:	485d      	ldr	r0, [pc, #372]	; (8002c84 <_Z20sendCanFrameFrontBoxv+0x180>)
 8002b0e:	f7fd fe94 	bl	800083a <_ZNK16SmartFuseHandlerILm4EE13getSmartFusesEv>
 8002b12:	4602      	mov	r2, r0
 8002b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fd72 	bl	8003604 <_ZN3etl6vectorI9SmartFuseLj4EEC1ERKS2_>

	PUTM_CAN::SF_FrontBox front_box
 8002b20:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002b24:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	6053      	str	r3, [r2, #4]
	{
		.fuse_0_inverter =
		{
			.ok = sf_buff[0].getChannelState(fuse_0_inverter) == ChannelState::Ok,
 8002b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f86d 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fc26 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2d9      	uxtb	r1, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
		}
	};
 8002b52:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002b56:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002b5a:	7813      	ldrb	r3, [r2, #0]
 8002b5c:	f361 0300 	bfi	r3, r1, #0, #1
 8002b60:	7013      	strb	r3, [r2, #0]
			.current = sf_buff[0].getChannelCurrent(fuse_0_inverter)
 8002b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff f854 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe ff3a 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7e:	b299      	uxth	r1, r3
	};
 8002b80:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002b84:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002b88:	8813      	ldrh	r3, [r2, #0]
 8002b8a:	f361 130f 	bfi	r3, r1, #4, #12
 8002b8e:	8013      	strh	r3, [r2, #0]
			.ok = sf_buff[0].getChannelState(fuse_0_box) == ChannelState::Ok,
 8002b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff f83d 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fbf6 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2d9      	uxtb	r1, r3
	};
 8002bb2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002bb6:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002bba:	7893      	ldrb	r3, [r2, #2]
 8002bbc:	f361 0300 	bfi	r3, r1, #0, #1
 8002bc0:	7093      	strb	r3, [r2, #2]
			.current = sf_buff[0].getChannelCurrent(fuse_0_box)
 8002bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff f824 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe ff0a 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bde:	b299      	uxth	r1, r3
	};
 8002be0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002be4:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002be8:	8853      	ldrh	r3, [r2, #2]
 8002bea:	f361 130f 	bfi	r3, r1, #4, #12
 8002bee:	8053      	strh	r3, [r2, #2]
			.ok = sf_buff[0].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8002bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f80d 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2102      	movs	r1, #2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe fbc6 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2d9      	uxtb	r1, r3
	};
 8002c12:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002c16:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002c1a:	7993      	ldrb	r3, [r2, #6]
 8002c1c:	f361 0300 	bfi	r3, r1, #0, #1
 8002c20:	7193      	strb	r3, [r2, #6]
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
 8002c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe fff4 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2102      	movs	r1, #2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe feda 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3e:	b299      	uxth	r1, r3
	};
 8002c40:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002c44:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002c48:	88d3      	ldrh	r3, [r2, #6]
 8002c4a:	f361 130f 	bfi	r3, r1, #4, #12
 8002c4e:	80d3      	strh	r3, [r2, #6]

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_FrontBox> sender(front_box, PUTM_CAN::can_tx_header_SF_FRONTBOX);
 8002c50:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <_Z20sendCanFrameFrontBoxv+0x184>)
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff37 	bl	8002acc <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	490a      	ldr	r1, [pc, #40]	; (8002c8c <_Z20sendCanFrameFrontBoxv+0x188>)
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fcf0 	bl	8003648 <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461c      	mov	r4, r3
 8002c6c:	bf00      	nop
	auto sf_buff = sf_handler.getSmartFuses();
 8002c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fc3c 	bl	80034f0 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
	return sender.send(hcan1);
 8002c78:	4623      	mov	r3, r4
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f507 771f 	add.w	r7, r7, #636	; 0x27c
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	20000470 	.word	0x20000470
 8002c88:	0800972c 	.word	0x0800972c
 8002c8c:	20000304 	.word	0x20000304

08002c90 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002c90:	b5b0      	push	{r4, r5, r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	461d      	mov	r5, r3
 8002ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ca8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002cac:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3318      	adds	r3, #24
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 fc85 	bl	80085c8 <memcpy>
  }
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bdb0      	pop	{r4, r5, r7, pc}

08002cc8 <_Z28sendCanFrameCoolingAndSafetyv>:

HAL_StatusTypeDef sendCanFrameCoolingAndSafety()
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002cce:	af00      	add	r7, sp, #0
	auto sf_buff = sf_handler.getSmartFuses();
 8002cd0:	4875      	ldr	r0, [pc, #468]	; (8002ea8 <_Z28sendCanFrameCoolingAndSafetyv+0x1e0>)
 8002cd2:	f7fd fdb2 	bl	800083a <_ZNK16SmartFuseHandlerILm4EE13getSmartFusesEv>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fc90 	bl	8003604 <_ZN3etl6vectorI9SmartFuseLj4EEC1ERKS2_>

	PUTM_CAN::SF_CoolingAndVSafety cooling_and_safety
 8002ce4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002ce8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002cec:	461a      	mov	r2, r3
 8002cee:	2300      	movs	r3, #0
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	6053      	str	r3, [r2, #4]
	{
		.fuse_1_fan_l =
		{
			.ok = sf_buff[1].getChannelState(fuse_1_fan_l) == ChannelState::Ok,
 8002cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe ff8b 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2103      	movs	r1, #3
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fb44 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2d9      	uxtb	r1, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[2].getChannelCurrent(fuse_0_tsal_assi)
		}
	};
 8002d16:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002d1a:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002d1e:	7813      	ldrb	r3, [r2, #0]
 8002d20:	f361 0300 	bfi	r3, r1, #0, #1
 8002d24:	7013      	strb	r3, [r2, #0]
			.current = sf_buff[1].getChannelCurrent(fuse_0_inverter)
 8002d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe ff72 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fe58 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d42:	b299      	uxth	r1, r3
	};
 8002d44:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002d48:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002d4c:	8813      	ldrh	r3, [r2, #0]
 8002d4e:	f361 130f 	bfi	r3, r1, #4, #12
 8002d52:	8013      	strh	r3, [r2, #0]
			.ok = sf_buff[1].getChannelState(fuse_0_box) == ChannelState::Ok,
 8002d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe ff5b 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe fb14 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2d9      	uxtb	r1, r3
	};
 8002d76:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002d7a:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002d7e:	7893      	ldrb	r3, [r2, #2]
 8002d80:	f361 0300 	bfi	r3, r1, #0, #1
 8002d84:	7093      	strb	r3, [r2, #2]
			.current = sf_buff[1].getChannelCurrent(fuse_0_box)
 8002d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe ff42 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2101      	movs	r1, #1
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fe28 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da2:	b299      	uxth	r1, r3
	};
 8002da4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002da8:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002dac:	8853      	ldrh	r3, [r2, #2]
 8002dae:	f361 130f 	bfi	r3, r1, #4, #12
 8002db2:	8053      	strh	r3, [r2, #2]
			.ok = sf_buff[3].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8002db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002db8:	2103      	movs	r1, #3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe ff2b 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fae4 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2d9      	uxtb	r1, r3
	};
 8002dd6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002dda:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002dde:	7913      	ldrb	r3, [r2, #4]
 8002de0:	f361 0300 	bfi	r3, r1, #0, #1
 8002de4:	7113      	strb	r3, [r2, #4]
			.current = sf_buff[3].getChannelCurrent(fuse_0_tsal_assi)
 8002de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dea:	2103      	movs	r1, #3
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe ff12 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2102      	movs	r1, #2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fdf8 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e02:	b299      	uxth	r1, r3
	};
 8002e04:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002e08:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002e0c:	8893      	ldrh	r3, [r2, #4]
 8002e0e:	f361 130f 	bfi	r3, r1, #4, #12
 8002e12:	8093      	strh	r3, [r2, #4]
			.ok = sf_buff[2].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8002e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e18:	2102      	movs	r1, #2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fefb 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2102      	movs	r1, #2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe fab4 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2d9      	uxtb	r1, r3
	};
 8002e36:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002e3a:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002e3e:	7993      	ldrb	r3, [r2, #6]
 8002e40:	f361 0300 	bfi	r3, r1, #0, #1
 8002e44:	7193      	strb	r3, [r2, #6]
			.current = sf_buff[2].getChannelCurrent(fuse_0_tsal_assi)
 8002e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fee2 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2102      	movs	r1, #2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fdc8 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e62:	b299      	uxth	r1, r3
	};
 8002e64:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002e68:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002e6c:	88d3      	ldrh	r3, [r2, #6]
 8002e6e:	f361 130f 	bfi	r3, r1, #4, #12
 8002e72:	80d3      	strh	r3, [r2, #6]

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_CoolingAndVSafety> sender(cooling_and_safety, PUTM_CAN::can_tx_header_SF_FRONTBOX);
 8002e74:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <_Z28sendCanFrameCoolingAndSafetyv+0x1e4>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff07 	bl	8002c90 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	490a      	ldr	r1, [pc, #40]	; (8002eb0 <_Z28sendCanFrameCoolingAndSafetyv+0x1e8>)
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fbf2 	bl	8003670 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461c      	mov	r4, r3
 8002e90:	bf00      	nop
	auto sf_buff = sf_handler.getSmartFuses();
 8002e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fb2a 	bl	80034f0 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
	return sender.send(hcan1);
 8002e9c:	4623      	mov	r3, r4
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f507 771f 	add.w	r7, r7, #636	; 0x27c
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd90      	pop	{r4, r7, pc}
 8002ea8:	20000470 	.word	0x20000470
 8002eac:	0800972c 	.word	0x0800972c
 8002eb0:	20000304 	.word	0x20000304

08002eb4 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	461d      	mov	r5, r3
 8002ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ecc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ed0:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3318      	adds	r3, #24
 8002ed8:	2208      	movs	r2, #8
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f005 fb73 	bl	80085c8 <memcpy>
  }
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bdb0      	pop	{r4, r5, r7, pc}

08002eec <_Z14sendCanFrameDVv>:

HAL_StatusTypeDef sendCanFrameDV()
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002ef2:	af00      	add	r7, sp, #0
	auto sf_buff = sf_handler.getSmartFuses();
 8002ef4:	4875      	ldr	r0, [pc, #468]	; (80030cc <_Z14sendCanFrameDVv+0x1e0>)
 8002ef6:	f7fd fca0 	bl	800083a <_ZNK16SmartFuseHandlerILm4EE13getSmartFusesEv>
 8002efa:	4602      	mov	r2, r0
 8002efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fb7e 	bl	8003604 <_ZN3etl6vectorI9SmartFuseLj4EEC1ERKS2_>

	PUTM_CAN::SF_DV dv
 8002f08:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002f0c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002f10:	461a      	mov	r2, r3
 8002f12:	2300      	movs	r3, #0
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	6053      	str	r3, [r2, #4]
	{
		.fuse_0_box_dv =
		{
			.ok = sf_buff[2].getChannelState(fuse_2_box_dv) == ChannelState::Ok,
 8002f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fe79 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2104      	movs	r1, #4
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fa32 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2d9      	uxtb	r1, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[1].getChannelCurrent(fuse_1_dash)
		}
	};
 8002f3a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002f3e:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002f42:	7813      	ldrb	r3, [r2, #0]
 8002f44:	f361 0300 	bfi	r3, r1, #0, #1
 8002f48:	7013      	strb	r3, [r2, #0]
			.current = sf_buff[2].getChannelCurrent(fuse_2_box_dv)
 8002f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f4e:	2102      	movs	r1, #2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe fe60 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2104      	movs	r1, #4
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fd46 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f66:	b299      	uxth	r1, r3
	};
 8002f68:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002f6c:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002f70:	8813      	ldrh	r3, [r2, #0]
 8002f72:	f361 130f 	bfi	r3, r1, #4, #12
 8002f76:	8013      	strh	r3, [r2, #0]
			.ok = sf_buff[0].getChannelState(fuse_0_tsal_assi) == ChannelState::Ok,
 8002f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fe49 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2102      	movs	r1, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe fa02 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2d9      	uxtb	r1, r3
	};
 8002f9a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002f9e:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002fa2:	7893      	ldrb	r3, [r2, #2]
 8002fa4:	f361 0300 	bfi	r3, r1, #0, #1
 8002fa8:	7093      	strb	r3, [r2, #2]
			.current = sf_buff[0].getChannelCurrent(fuse_0_tsal_assi)
 8002faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fe fe30 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fd16 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc6:	b299      	uxth	r1, r3
	};
 8002fc8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002fcc:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002fd0:	8853      	ldrh	r3, [r2, #2]
 8002fd2:	f361 130f 	bfi	r3, r1, #4, #12
 8002fd6:	8053      	strh	r3, [r2, #2]
			.ok = sf_buff[1].getChannelState(fuse_1_wheel_speed_1) == ChannelState::Ok,
 8002fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fe19 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe f9d2 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2d9      	uxtb	r1, r3
	};
 8002ffa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002ffe:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8003002:	7913      	ldrb	r3, [r2, #4]
 8003004:	f361 0300 	bfi	r3, r1, #0, #1
 8003008:	7113      	strb	r3, [r2, #4]
			.current = sf_buff[1].getChannelCurrent(fuse_1_wheel_speed_1)
 800300a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800300e:	2101      	movs	r1, #1
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe fe00 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003016:	4603      	mov	r3, r0
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fce6 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003020:	4603      	mov	r3, r0
 8003022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003026:	b299      	uxth	r1, r3
	};
 8003028:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800302c:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8003030:	8893      	ldrh	r3, [r2, #4]
 8003032:	f361 130f 	bfi	r3, r1, #4, #12
 8003036:	8093      	strh	r3, [r2, #4]
			.ok = sf_buff[1].getChannelState(fuse_1_dash) == ChannelState::Ok,
 8003038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800303c:	2101      	movs	r1, #1
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fde9 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003044:	4603      	mov	r3, r0
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe f9a2 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2d9      	uxtb	r1, r3
	};
 800305a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800305e:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8003062:	7993      	ldrb	r3, [r2, #6]
 8003064:	f361 0300 	bfi	r3, r1, #0, #1
 8003068:	7193      	strb	r3, [r2, #6]
			.current = sf_buff[1].getChannelCurrent(fuse_1_dash)
 800306a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800306e:	2101      	movs	r1, #1
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fdd0 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003076:	4603      	mov	r3, r0
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fcb6 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003080:	4603      	mov	r3, r0
 8003082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003086:	b299      	uxth	r1, r3
	};
 8003088:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800308c:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8003090:	88d3      	ldrh	r3, [r2, #6]
 8003092:	f361 130f 	bfi	r3, r1, #4, #12
 8003096:	80d3      	strh	r3, [r2, #6]

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_DV> sender(dv, PUTM_CAN::can_tx_header_SF_DV);
 8003098:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <_Z14sendCanFrameDVv+0x1e4>)
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff07 	bl	8002eb4 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	490a      	ldr	r1, [pc, #40]	; (80030d4 <_Z14sendCanFrameDVv+0x1e8>)
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 faf4 	bl	8003698 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461c      	mov	r4, r3
 80030b4:	bf00      	nop
	auto sf_buff = sf_handler.getSmartFuses();
 80030b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fa18 	bl	80034f0 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
	return sender.send(hcan1);
 80030c0:	4623      	mov	r3, r4
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	f507 771f 	add.w	r7, r7, #636	; 0x27c
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd90      	pop	{r4, r7, pc}
 80030cc:	20000470 	.word	0x20000470
 80030d0:	08009744 	.word	0x08009744
 80030d4:	20000304 	.word	0x20000304

080030d8 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80030d8:	b5b0      	push	{r4, r5, r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4614      	mov	r4, r2
 80030ea:	461d      	mov	r5, r3
 80030ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80030f4:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3318      	adds	r3, #24
 80030fc:	2208      	movs	r2, #8
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f005 fa61 	bl	80085c8 <memcpy>
  }
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bdb0      	pop	{r4, r5, r7, pc}

08003110 <_Z14sendCanFrameWSv>:

HAL_StatusTypeDef sendCanFrameWS()
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8003116:	af00      	add	r7, sp, #0
	auto sf_buff = sf_handler.getSmartFuses();
 8003118:	4845      	ldr	r0, [pc, #276]	; (8003230 <_Z14sendCanFrameWSv+0x120>)
 800311a:	f7fd fb8e 	bl	800083a <_ZNK16SmartFuseHandlerILm4EE13getSmartFusesEv>
 800311e:	4602      	mov	r2, r0
 8003120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fa6c 	bl	8003604 <_ZN3etl6vectorI9SmartFuseLj4EEC1ERKS2_>

	PUTM_CAN::SF_WS ws
 800312c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003130:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003134:	461a      	mov	r2, r3
 8003136:	2300      	movs	r3, #0
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	6053      	str	r3, [r2, #4]
	{
		.fuse_1_ws_rl =
		{
			.ok = sf_buff[1].getChannelState(fuse_1_wheel_speed_1) == ChannelState::Ok,
 800313c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003140:	2101      	movs	r1, #1
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fd67 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003148:	4603      	mov	r3, r0
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe f920 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2d9      	uxtb	r1, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = sf_buff[2].getChannelCurrent(fuse_2_wheel_speed_2)
		}
	};
 800315e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003162:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8003166:	7813      	ldrb	r3, [r2, #0]
 8003168:	f361 0300 	bfi	r3, r1, #0, #1
 800316c:	7013      	strb	r3, [r2, #0]
			.current = sf_buff[1].getChannelCurrent(fuse_1_wheel_speed_1)
 800316e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe fd4e 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 800317a:	4603      	mov	r3, r0
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fc34 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 8003184:	4603      	mov	r3, r0
 8003186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318a:	b299      	uxth	r1, r3
	};
 800318c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003190:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8003194:	8813      	ldrh	r3, [r2, #0]
 8003196:	f361 130f 	bfi	r3, r1, #4, #12
 800319a:	8013      	strh	r3, [r2, #0]
			.ok = sf_buff[2].getChannelState(fuse_2_wheel_speed_2) == ChannelState::Ok,
 800319c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a0:	2102      	movs	r1, #2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fd37 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2103      	movs	r1, #3
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe f8f0 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2d9      	uxtb	r1, r3
	};
 80031be:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80031c2:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 80031c6:	7993      	ldrb	r3, [r2, #6]
 80031c8:	f361 0300 	bfi	r3, r1, #0, #1
 80031cc:	7193      	strb	r3, [r2, #6]
			.current = sf_buff[2].getChannelCurrent(fuse_2_wheel_speed_2)
 80031ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031d2:	2102      	movs	r1, #2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fd1e 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80031da:	4603      	mov	r3, r0
 80031dc:	2103      	movs	r1, #3
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe fc04 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ea:	b299      	uxth	r1, r3
	};
 80031ec:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80031f0:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 80031f4:	88d3      	ldrh	r3, [r2, #6]
 80031f6:	f361 130f 	bfi	r3, r1, #4, #12
 80031fa:	80d3      	strh	r3, [r2, #6]

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_WS> sender(ws, PUTM_CAN::can_tx_header_SF_WS);
 80031fc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <_Z14sendCanFrameWSv+0x124>)
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff67 	bl	80030d8 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 800320a:	1d3b      	adds	r3, r7, #4
 800320c:	490a      	ldr	r1, [pc, #40]	; (8003238 <_Z14sendCanFrameWSv+0x128>)
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fa56 	bl	80036c0 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef>
 8003214:	4603      	mov	r3, r0
 8003216:	461c      	mov	r4, r3
 8003218:	bf00      	nop
	auto sf_buff = sf_handler.getSmartFuses();
 800321a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f966 	bl	80034f0 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
	return sender.send(hcan1);
 8003224:	4623      	mov	r3, r4
}
 8003226:	4618      	mov	r0, r3
 8003228:	f507 771f 	add.w	r7, r7, #636	; 0x27c
 800322c:	46bd      	mov	sp, r7
 800322e:	bd90      	pop	{r4, r7, pc}
 8003230:	20000470 	.word	0x20000470
 8003234:	0800975c 	.word	0x0800975c
 8003238:	20000304 	.word	0x20000304

0800323c <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800323c:	b4b0      	push	{r4, r5, r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4614      	mov	r4, r2
 800324e:	461d      	mov	r5, r3
 8003250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003254:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003258:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3318      	adds	r3, #24
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	601a      	str	r2, [r3, #0]
  }
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bcb0      	pop	{r4, r5, r7}
 8003270:	4770      	bx	lr
	...

08003274 <_Z16sendCanFrameNucsv>:

HAL_StatusTypeDef sendCanFrameNucs()
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 800327a:	af00      	add	r7, sp, #0
	auto sf_buff = sf_handler.getSmartFuses();
 800327c:	482c      	ldr	r0, [pc, #176]	; (8003330 <_Z16sendCanFrameNucsv+0xbc>)
 800327e:	f7fd fadc 	bl	800083a <_ZNK16SmartFuseHandlerILm4EE13getSmartFusesEv>
 8003282:	4602      	mov	r2, r0
 8003284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f9ba 	bl	8003604 <_ZN3etl6vectorI9SmartFuseLj4EEC1ERKS2_>

	PUTM_CAN::SF_NUCS nucs
 8003290:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8003294:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
	{
		.fuse_2_jetson =
		{
			.ok = sf_buff[2].getChannelState(fuse_2_jetson) == ChannelState::Ok,
 800329c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fcb7 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2105      	movs	r1, #5
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe f870 	bl	8001392 <_ZN9SmartFuse15getChannelStateE7Channel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2d9      	uxtb	r1, r3
			.overheat = 0,
			.undercurrent = 0,
			.overcurrent = 0,
			.current = 0
		}
	};
 80032be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80032c2:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80032c6:	7813      	ldrb	r3, [r2, #0]
 80032c8:	f361 0300 	bfi	r3, r1, #0, #1
 80032cc:	7013      	strb	r3, [r2, #0]
			.current = sf_buff[2].getChannelCurrent(fuse_2_jetson)
 80032ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d2:	2102      	movs	r1, #2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe fc9e 	bl	8001c16 <_ZN3etl7ivectorI9SmartFuseEixEj>
 80032da:	4603      	mov	r3, r0
 80032dc:	2105      	movs	r1, #5
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fb84 	bl	80019ec <_ZN9SmartFuse17getChannelCurrentE7Channel>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ea:	b299      	uxth	r1, r3
	};
 80032ec:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80032f0:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80032f4:	8813      	ldrh	r3, [r2, #0]
 80032f6:	f361 130f 	bfi	r3, r1, #4, #12
 80032fa:	8013      	strh	r3, [r2, #0]

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_NUCS> sender(nucs, PUTM_CAN::can_tx_header_SF_NUCS);
 80032fc:	f107 0120 	add.w	r1, r7, #32
 8003300:	463b      	mov	r3, r7
 8003302:	4a0c      	ldr	r2, [pc, #48]	; (8003334 <_Z16sendCanFrameNucsv+0xc0>)
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff99 	bl	800323c <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 800330a:	463b      	mov	r3, r7
 800330c:	490a      	ldr	r1, [pc, #40]	; (8003338 <_Z16sendCanFrameNucsv+0xc4>)
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f9ea 	bl	80036e8 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef>
 8003314:	4603      	mov	r3, r0
 8003316:	461c      	mov	r4, r3
 8003318:	bf00      	nop
	auto sf_buff = sf_handler.getSmartFuses();
 800331a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f8e6 	bl	80034f0 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
	return sender.send(hcan1);
 8003324:	4623      	mov	r3, r4
}
 8003326:	4618      	mov	r0, r3
 8003328:	f507 771d 	add.w	r7, r7, #628	; 0x274
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}
 8003330:	20000470 	.word	0x20000470
 8003334:	08009774 	.word	0x08009774
 8003338:	20000304 	.word	0x20000304

0800333c <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800333c:	b5b0      	push	{r4, r5, r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4614      	mov	r4, r2
 800334e:	461d      	mov	r5, r3
 8003350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003354:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003358:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3318      	adds	r3, #24
 8003360:	2205      	movs	r2, #5
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f005 f92f 	bl	80085c8 <memcpy>
  }
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bdb0      	pop	{r4, r5, r7, pc}

08003374 <_Z18sendCanFrameSafetyv>:

HAL_StatusTypeDef sendCanFrameSafety()
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 800337a:	af00      	add	r7, sp, #0
	auto sf_buff = sf_handler.getSmartFuses();
 800337c:	482a      	ldr	r0, [pc, #168]	; (8003428 <_Z18sendCanFrameSafetyv+0xb4>)
 800337e:	f7fd fa5c 	bl	800083a <_ZNK16SmartFuseHandlerILm4EE13getSmartFusesEv>
 8003382:	4602      	mov	r2, r0
 8003384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f93a 	bl	8003604 <_ZN3etl6vectorI9SmartFuseLj4EEC1ERKS2_>

	PUTM_CAN::SF_safety safety
	{
		.firewall = safety_ams.isActive(),
 8003390:	4826      	ldr	r0, [pc, #152]	; (800342c <_Z18sendCanFrameSafetyv+0xb8>)
 8003392:	f7fe fdaf 	bl	8001ef4 <_ZN13GpioInElement8isActiveEv>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
		.hvd = safety_hvd.isActive(),
		.inverter = safety_spare.isActive(),
		.dv = safety_td.isActive(),
		.tsms = safety_tms.isActive()
	};
 800339a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800339e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80033a2:	701a      	strb	r2, [r3, #0]
		.hvd = safety_hvd.isActive(),
 80033a4:	4822      	ldr	r0, [pc, #136]	; (8003430 <_Z18sendCanFrameSafetyv+0xbc>)
 80033a6:	f7fe fda5 	bl	8001ef4 <_ZN13GpioInElement8isActiveEv>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
	};
 80033ae:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80033b2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80033b6:	705a      	strb	r2, [r3, #1]
		.inverter = safety_spare.isActive(),
 80033b8:	481e      	ldr	r0, [pc, #120]	; (8003434 <_Z18sendCanFrameSafetyv+0xc0>)
 80033ba:	f7fe fd9b 	bl	8001ef4 <_ZN13GpioInElement8isActiveEv>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
	};
 80033c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80033c6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80033ca:	709a      	strb	r2, [r3, #2]
		.dv = safety_td.isActive(),
 80033cc:	481a      	ldr	r0, [pc, #104]	; (8003438 <_Z18sendCanFrameSafetyv+0xc4>)
 80033ce:	f7fe fd91 	bl	8001ef4 <_ZN13GpioInElement8isActiveEv>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
	};
 80033d6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80033da:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80033de:	70da      	strb	r2, [r3, #3]
		.tsms = safety_tms.isActive()
 80033e0:	4816      	ldr	r0, [pc, #88]	; (800343c <_Z18sendCanFrameSafetyv+0xc8>)
 80033e2:	f7fe fd87 	bl	8001ef4 <_ZN13GpioInElement8isActiveEv>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
	};
 80033ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80033ee:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80033f2:	711a      	strb	r2, [r3, #4]

	PUTM_CAN::Can_tx_message<PUTM_CAN::SF_safety> sender(safety, PUTM_CAN::can_tx_header_SF_SAFETY);
 80033f4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	4a11      	ldr	r2, [pc, #68]	; (8003440 <_Z18sendCanFrameSafetyv+0xcc>)
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff9d 	bl	800333c <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

	return sender.send(hcan1);
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	490f      	ldr	r1, [pc, #60]	; (8003444 <_Z18sendCanFrameSafetyv+0xd0>)
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f982 	bl	8003710 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>
 800340c:	4603      	mov	r3, r0
 800340e:	461c      	mov	r4, r3
 8003410:	bf00      	nop
	auto sf_buff = sf_handler.getSmartFuses();
 8003412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f86a 	bl	80034f0 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
	return sender.send(hcan1);
 800341c:	4623      	mov	r3, r4
}
 800341e:	4618      	mov	r0, r3
 8003420:	f507 771f 	add.w	r7, r7, #636	; 0x27c
 8003424:	46bd      	mov	sp, r7
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	20000470 	.word	0x20000470
 800342c:	200003ac 	.word	0x200003ac
 8003430:	200003ec 	.word	0x200003ec
 8003434:	200003bc 	.word	0x200003bc
 8003438:	200003dc 	.word	0x200003dc
 800343c:	200003cc 	.word	0x200003cc
 8003440:	0800978c 	.word	0x0800978c
 8003444:	20000304 	.word	0x20000304

08003448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	led_ok.deactivate();
 800344c:	4807      	ldr	r0, [pc, #28]	; (800346c <Error_Handler+0x24>)
 800344e:	f7fe fd22 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 8003452:	4807      	ldr	r0, [pc, #28]	; (8003470 <Error_Handler+0x28>)
 8003454:	f7fe fd1f 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8003458:	4806      	ldr	r0, [pc, #24]	; (8003474 <Error_Handler+0x2c>)
 800345a:	f7fe fd1c 	bl	8001e96 <_ZN14GpioOutElement10deactivateEv>
	led_error.activate();
 800345e:	4806      	ldr	r0, [pc, #24]	; (8003478 <Error_Handler+0x30>)
 8003460:	f7fe fd02 	bl	8001e68 <_ZN14GpioOutElement8activateEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003464:	b672      	cpsid	i
}
 8003466:	bf00      	nop

	__disable_irq();
	while (1) {}
 8003468:	e7fe      	b.n	8003468 <Error_Handler+0x20>
 800346a:	bf00      	nop
 800346c:	2000032c 	.word	0x2000032c
 8003470:	2000033c 	.word	0x2000033c
 8003474:	2000034c 	.word	0x2000034c
 8003478:	2000035c 	.word	0x2000035c

0800347c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>:
      begin() noexcept
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f957 	bl	8003738 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 800348a:	4603      	mov	r3, r0
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>:
      end() noexcept
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f94b 	bl	8003738 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 80034a2:	4603      	mov	r3, r0
 80034a4:	3384      	adds	r3, #132	; 0x84
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <_ZN3etl7ivectorI9SmartFuseED1Ev>:
  class ivector : public etl::vector_base
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe fe60 	bl	800217e <_ZN3etl11vector_baseD1Ev>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	330c      	adds	r3, #12
 80034d6:	2204      	movs	r2, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	f000 f93a 	bl	8003752 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>
    {
      this->initialise();
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f94c 	bl	800377e <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f953 	bl	80037a6 <_ZN3etl7ivectorI9SmartFuseE5clearEv>
    }
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff ffd3 	bl	80034ae <_ZN3etl7ivectorI9SmartFuseED1Ev>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <_ZNSt5arrayI13GpioInElementLj5EE5beginEv>:
      begin() noexcept
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f94e 	bl	80037bc <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>
 8003520:	4603      	mov	r3, r0
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <_ZNSt5arrayI13GpioInElementLj5EE3endEv>:
      end() noexcept
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f942 	bl	80037bc <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>
 8003538:	4603      	mov	r3, r0
 800353a:	3350      	adds	r3, #80	; 0x50
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_ZNSt5arrayIS_ItLj6EELj4EE5beginEv>:
      begin() noexcept
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f942 	bl	80037d6 <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>
 8003552:	4603      	mov	r3, r0
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <_ZNSt5arrayIS_ItLj6EELj4EE3endEv>:
      end() noexcept
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f936 	bl	80037d6 <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>
 800356a:	4603      	mov	r3, r0
 800356c:	3330      	adds	r3, #48	; 0x30
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_ZNSt5arrayItLj6EE5beginEv>:
      begin() noexcept
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f936 	bl	80037f0 <_ZNSt5arrayItLj6EE4dataEv>
 8003584:	4603      	mov	r3, r0
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <_ZNSt5arrayItLj6EE3endEv>:
      end() noexcept
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f92a 	bl	80037f0 <_ZNSt5arrayItLj6EE4dataEv>
 800359c:	4603      	mov	r3, r0
 800359e:	330c      	adds	r3, #12
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_ZNSt5arrayI14SmartFuseStateLj4EE5beginEv>:
      begin() noexcept
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f92a 	bl	800380a <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_ZNSt5arrayI14SmartFuseStateLj4EE3endEv>:
      end() noexcept
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f91e 	bl	800380a <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>
 80035ce:	4603      	mov	r3, r0
 80035d0:	3304      	adds	r3, #4
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f103 0218 	add.w	r2, r3, #24
 80035ee:	4b04      	ldr	r3, [pc, #16]	; (8003600 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 80035f0:	6838      	ldr	r0, [r7, #0]
 80035f2:	f002 faae 	bl	8005b52 <HAL_CAN_AddTxMessage>
 80035f6:	4603      	mov	r3, r0
  }
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	200006bc 	.word	0x200006bc

08003604 <_ZN3etl6vectorI9SmartFuseLj4EEC1ERKS2_>:
    vector(const vector& other)
 8003604:	b5b0      	push	{r4, r5, r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	330c      	adds	r3, #12
 8003614:	2204      	movs	r2, #4
 8003616:	4619      	mov	r1, r3
 8003618:	f000 f89b 	bl	8003752 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>
      this->assign(other.begin(), other.end());
 800361c:	687c      	ldr	r4, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f8ff 	bl	8003824 <_ZNK3etl7ivectorI9SmartFuseE5beginEv>
 8003626:	4605      	mov	r5, r0
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f906 	bl	800383c <_ZNK3etl7ivectorI9SmartFuseE3endEv>
 8003630:	4603      	mov	r3, r0
 8003632:	461a      	mov	r2, r3
 8003634:	4629      	mov	r1, r5
 8003636:	4620      	mov	r0, r4
 8003638:	f000 f90c 	bl	8003854 <_ZN3etl7ivectorI9SmartFuseE6assignIPKS1_EENS_9enable_ifIXntsrNS_11is_integralIT_EE5valueEvE4typeES8_S8_>
    }
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003648 <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f103 0218 	add.w	r2, r3, #24
 800365a:	4b04      	ldr	r3, [pc, #16]	; (800366c <_ZN8PUTM_CAN14Can_tx_messageINS_11SF_FrontBoxEE4sendER19__CAN_HandleTypeDef+0x24>)
 800365c:	6838      	ldr	r0, [r7, #0]
 800365e:	f002 fa78 	bl	8005b52 <HAL_CAN_AddTxMessage>
 8003662:	4603      	mov	r3, r0
  }
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	200006c0 	.word	0x200006c0

08003670 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f103 0218 	add.w	r2, r3, #24
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <_ZN8PUTM_CAN14Can_tx_messageINS_20SF_CoolingAndVSafetyEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003684:	6838      	ldr	r0, [r7, #0]
 8003686:	f002 fa64 	bl	8005b52 <HAL_CAN_AddTxMessage>
 800368a:	4603      	mov	r3, r0
  }
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	200006c4 	.word	0x200006c4

08003698 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f103 0218 	add.w	r2, r3, #24
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_DVEE4sendER19__CAN_HandleTypeDef+0x24>)
 80036ac:	6838      	ldr	r0, [r7, #0]
 80036ae:	f002 fa50 	bl	8005b52 <HAL_CAN_AddTxMessage>
 80036b2:	4603      	mov	r3, r0
  }
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	200006c8 	.word	0x200006c8

080036c0 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f103 0218 	add.w	r2, r3, #24
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <_ZN8PUTM_CAN14Can_tx_messageINS_5SF_WSEE4sendER19__CAN_HandleTypeDef+0x24>)
 80036d4:	6838      	ldr	r0, [r7, #0]
 80036d6:	f002 fa3c 	bl	8005b52 <HAL_CAN_AddTxMessage>
 80036da:	4603      	mov	r3, r0
  }
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	200006cc 	.word	0x200006cc

080036e8 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f103 0218 	add.w	r2, r3, #24
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_NUCSEE4sendER19__CAN_HandleTypeDef+0x24>)
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	f002 fa28 	bl	8005b52 <HAL_CAN_AddTxMessage>
 8003702:	4603      	mov	r3, r0
  }
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200006d0 	.word	0x200006d0

08003710 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f103 0218 	add.w	r2, r3, #24
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003724:	6838      	ldr	r0, [r7, #0]
 8003726:	f002 fa14 	bl	8005b52 <HAL_CAN_AddTxMessage>
 800372a:	4603      	mov	r3, r0
  }
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	200006d4 	.word	0x200006d4

08003738 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>:
      data() noexcept
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f8b4 	bl	80038b0 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>
 8003748:	4603      	mov	r3, r0
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fcfc 	bl	8002160 <_ZN3etl11vector_baseC1Ej>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	609a      	str	r2, [r3, #8]
    }
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>:
    void initialise()
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f000 f898 	bl	80038c6 <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>
      p_end = p_buffer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	609a      	str	r2, [r3, #8]
    }
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <_ZN3etl7ivectorI9SmartFuseE5clearEv>:
    void clear()
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
      initialise();
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffe5 	bl	800377e <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <_ZNSt5arrayI13GpioInElementLj5EE4dataEv>:
      data() noexcept
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f888 	bl	80038dc <_ZNSt14__array_traitsI13GpioInElementLj5EE6_S_ptrERA5_KS0_>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_ZNSt5arrayIS_ItLj6EELj4EE4dataEv>:
      data() noexcept
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f886 	bl	80038f2 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_ptrERA4_KS1_>
 80037e6:	4603      	mov	r3, r0
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_ZNSt5arrayItLj6EE4dataEv>:
      data() noexcept
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f884 	bl	8003908 <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>
 8003800:	4603      	mov	r3, r0
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <_ZNSt5arrayI14SmartFuseStateLj4EE4dataEv>:
      data() noexcept
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f882 	bl	800391e <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_ptrERA4_KS0_>
 800381a:	4603      	mov	r3, r0
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <_ZNK3etl7ivectorI9SmartFuseE5beginEv>:
    const_iterator begin() const
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
      return p_buffer;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
    }
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <_ZNK3etl7ivectorI9SmartFuseE3endEv>:
    const_iterator end() const
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
      return p_end;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
    }
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_ZN3etl7ivectorI9SmartFuseE6assignIPKS1_EENS_9enable_ifIXntsrNS_11is_integralIT_EE5valueEvE4typeES8_S8_>:
      assign(TIterator first, TIterator last)
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
      difference_type d = etl::distance(first, last);
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	68b8      	ldr	r0, [r7, #8]
 8003864:	f000 f866 	bl	8003934 <_ZN3etl8distanceIPK9SmartFuseEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8003868:	6178      	str	r0, [r7, #20]
      ETL_ASSERT(static_cast<size_t>(d) <= CAPACITY, ETL_ERROR(vector_full));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	429a      	cmp	r2, r3
 8003872:	d206      	bcs.n	8003882 <_ZN3etl7ivectorI9SmartFuseE6assignIPKS1_EENS_9enable_ifIXntsrNS_11is_integralIT_EE5valueEvE4typeES8_S8_+0x2e>
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <_ZN3etl7ivectorI9SmartFuseE6assignIPKS1_EENS_9enable_ifIXntsrNS_11is_integralIT_EE5valueEvE4typeES8_S8_+0x50>)
 8003876:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <_ZN3etl7ivectorI9SmartFuseE6assignIPKS1_EENS_9enable_ifIXntsrNS_11is_integralIT_EE5valueEvE4typeES8_S8_+0x54>)
 8003878:	f240 1187 	movw	r1, #391	; 0x187
 800387c:	480b      	ldr	r0, [pc, #44]	; (80038ac <_ZN3etl7ivectorI9SmartFuseE6assignIPKS1_EENS_9enable_ifIXntsrNS_11is_integralIT_EE5valueEvE4typeES8_S8_+0x58>)
 800387e:	f004 fe41 	bl	8008504 <__assert_func>
      initialise();
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff ff7b 	bl	800377e <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
      p_end = etl::uninitialized_copy(first, last, p_buffer);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	461a      	mov	r2, r3
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	68b8      	ldr	r0, [r7, #8]
 8003892:	f000 f85d 	bl	8003950 <_ZN3etl18uninitialized_copyIPK9SmartFusePS1_EET0_T_S6_S5_>
 8003896:	4602      	mov	r2, r0
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	609a      	str	r2, [r3, #8]
    }
 800389c:	bf00      	nop
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	0800959c 	.word	0x0800959c
 80038a8:	080095c4 	.word	0x080095c4
 80038ac:	080096c8 	.word	0x080096c8

080038b0 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <_ZN3etl7destroyIP9SmartFuseEENS_9enable_ifIXsrNS_25is_trivially_destructibleINS_15iterator_traitsIT_NS3_IXntsrNS_14is_fundamentalIS6_EE5valueEvE4typeEE10value_typeEEE5valueEvE4typeES6_S6_>:
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  typename etl::enable_if<etl::is_trivially_destructible<typename etl::iterator_traits<TIterator>::value_type>::value, void>::type
    destroy(TIterator /*i_begin*/, TIterator /*i_end*/)
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
  {
  }
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <_ZNSt14__array_traitsI13GpioInElementLj5EE6_S_ptrERA5_KS0_>:
      _S_ptr(const _Type& __t) noexcept
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_ptrERA4_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <_ZNSt14__array_traitsItLj6EE6_S_ptrERA6_Kt>:
      _S_ptr(const _Type& __t) noexcept
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_ptrERA4_KS0_>:
      _S_ptr(const _Type& __t) noexcept
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <_ZN3etl8distanceIPK9SmartFuseEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
  }

#else

  template<typename TIterator>
  ETL_CONSTEXPR17 typename std::iterator_traits<TIterator>::difference_type distance(TIterator first, TIterator last)
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  {
    return std::distance(first, last);
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f815 	bl	8003970 <_ZSt8distanceIPK9SmartFuseENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8003946:	4603      	mov	r3, r0
  }
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <_ZN3etl18uninitialized_copyIPK9SmartFusePS1_EET0_T_S6_S5_>:
  TOutputIterator  uninitialized_copy(TInputIterator i_begin, TInputIterator i_end, TOutputIterator o_begin)
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
    return std::uninitialized_copy(i_begin, i_end, o_begin);
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f819 	bl	8003998 <_ZSt18uninitialized_copyIPK9SmartFusePS0_ET0_T_S5_S4_>
 8003966:	4603      	mov	r3, r0
  }
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <_ZSt8distanceIPK9SmartFuseENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800397a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f81c 	bl	80039bc <_ZSt19__iterator_categoryIPK9SmartFuseENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 8003984:	462a      	mov	r2, r5
 8003986:	6839      	ldr	r1, [r7, #0]
 8003988:	4620      	mov	r0, r4
 800398a:	f000 f823 	bl	80039d4 <_ZSt10__distanceIPK9SmartFuseENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 800398e:	4603      	mov	r3, r0
    }
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bdb0      	pop	{r4, r5, r7, pc}

08003998 <_ZSt18uninitialized_copyIPK9SmartFusePS0_ET0_T_S5_S4_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]

      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
      // Trivial types can have deleted assignment, so using std::copy
      // would be ill-formed. Require assignability before using std::copy:
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80039a4:	2300      	movs	r3, #0
 80039a6:	75fb      	strb	r3, [r7, #23]
#endif

      return std::__uninitialized_copy<__is_trivial(_ValueType1)
				       && __is_trivial(_ValueType2)
				       && __assignable>::
	__uninit_copy(__first, __last, __result);
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f827 	bl	8003a00 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK9SmartFusePS2_EET0_T_S7_S6_>
 80039b2:	4603      	mov	r3, r0
    }
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_ZSt19__iterator_categoryIPK9SmartFuseENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80039c4:	bf00      	nop
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <_ZSt10__distanceIPK9SmartFuseENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	111b      	asrs	r3, r3, #4
 80039e8:	4a04      	ldr	r2, [pc, #16]	; (80039fc <_ZSt10__distanceIPK9SmartFuseENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
    }
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	38e38e39 	.word	0x38e38e39

08003a00 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK9SmartFusePS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d00e      	beq.n	8003a36 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK9SmartFusePS2_EET0_T_S7_S6_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8003a18:	6978      	ldr	r0, [r7, #20]
 8003a1a:	f000 f811 	bl	8003a40 <_ZSt11__addressofI9SmartFuseEPT_RS1_>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f817 	bl	8003a56 <_ZSt10_ConstructI9SmartFuseJRKS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3390      	adds	r3, #144	; 0x90
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3390      	adds	r3, #144	; 0x90
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e7ec      	b.n	8003a10 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK9SmartFusePS2_EET0_T_S7_S6_+0x10>
	      return __cur;
 8003a36:	697b      	ldr	r3, [r7, #20]
	}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_ZSt11__addressofI9SmartFuseEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <_ZSt10_ConstructI9SmartFuseJRKS0_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
 8003a56:	b590      	push	{r4, r7, lr}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8003a60:	6838      	ldr	r0, [r7, #0]
 8003a62:	f000 f811 	bl	8003a88 <_ZSt7forwardIRK9SmartFuseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a66:	4604      	mov	r4, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	2090      	movs	r0, #144	; 0x90
 8003a6e:	f7fc fdb9 	bl	80005e4 <_ZnwjPv>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4618      	mov	r0, r3
 8003a76:	4621      	mov	r1, r4
 8003a78:	2390      	movs	r3, #144	; 0x90
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f004 fda4 	bl	80085c8 <memcpy>
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd90      	pop	{r4, r7, pc}

08003a88 <_ZSt7forwardIRK9SmartFuseEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <_ZN16SmartFuseHandlerILm4EED1Ev>:
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fd21 	bl	80034f0 <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <_Z41__static_initialization_and_destruction_0ii>:

  /* USER CODE END Error_Handler_Debug */
}
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d157      	bne.n	8003b78 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d152      	bne.n	8003b78 <_Z41__static_initialization_and_destruction_0ii+0xc0>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4943      	ldr	r1, [pc, #268]	; (8003be4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003ad8:	4843      	ldr	r0, [pc, #268]	; (8003be8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003ada:	f7fe f9ad 	bl	8001e38 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 8003ade:	2301      	movs	r3, #1
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	4940      	ldr	r1, [pc, #256]	; (8003be4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003ae4:	4841      	ldr	r0, [pc, #260]	; (8003bec <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8003ae6:	f7fe f9a7 	bl	8001e38 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 8003aea:	2301      	movs	r3, #1
 8003aec:	2204      	movs	r2, #4
 8003aee:	493d      	ldr	r1, [pc, #244]	; (8003be4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003af0:	483f      	ldr	r0, [pc, #252]	; (8003bf0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8003af2:	f7fe f9a1 	bl	8001e38 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 8003af6:	2301      	movs	r3, #1
 8003af8:	2208      	movs	r2, #8
 8003afa:	493a      	ldr	r1, [pc, #232]	; (8003be4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003afc:	483d      	ldr	r0, [pc, #244]	; (8003bf4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003afe:	f7fe f99b 	bl	8001e38 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 8003b02:	2300      	movs	r3, #0
 8003b04:	2220      	movs	r2, #32
 8003b06:	493c      	ldr	r1, [pc, #240]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003b08:	483c      	ldr	r0, [pc, #240]	; (8003bfc <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003b0a:	f7fe f995 	bl	8001e38 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2280      	movs	r2, #128	; 0x80
 8003b12:	4939      	ldr	r1, [pc, #228]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003b14:	483a      	ldr	r0, [pc, #232]	; (8003c00 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8003b16:	f7fe f98f 	bl	8001e38 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b20:	4935      	ldr	r1, [pc, #212]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003b22:	4838      	ldr	r0, [pc, #224]	; (8003c04 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8003b24:	f7fe f988 	bl	8001e38 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement enable_mosfets(GPIOB, GPIO_PIN_9, false);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b2e:	4932      	ldr	r1, [pc, #200]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003b30:	4835      	ldr	r0, [pc, #212]	; (8003c08 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8003b32:	f7fe f981 	bl	8001e38 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_ams(GPIOB, GPIO_PIN_0, true);
 8003b36:	2301      	movs	r3, #1
 8003b38:	2201      	movs	r2, #1
 8003b3a:	492f      	ldr	r1, [pc, #188]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003b3c:	4833      	ldr	r0, [pc, #204]	; (8003c0c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8003b3e:	f7fe f9c1 	bl	8001ec4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_spare(GPIOB, GPIO_PIN_1, true);
 8003b42:	2301      	movs	r3, #1
 8003b44:	2202      	movs	r2, #2
 8003b46:	492c      	ldr	r1, [pc, #176]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003b48:	4831      	ldr	r0, [pc, #196]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8003b4a:	f7fe f9bb 	bl	8001ec4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_tms(GPIOB, GPIO_PIN_2, true);
 8003b4e:	2301      	movs	r3, #1
 8003b50:	2204      	movs	r2, #4
 8003b52:	4929      	ldr	r1, [pc, #164]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003b54:	482f      	ldr	r0, [pc, #188]	; (8003c14 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8003b56:	f7fe f9b5 	bl	8001ec4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_td(GPIOB, GPIO_PIN_4, true);
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	4926      	ldr	r1, [pc, #152]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003b60:	482d      	ldr	r0, [pc, #180]	; (8003c18 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8003b62:	f7fe f9af 	bl	8001ec4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement safety_hvd(GPIOB, GPIO_PIN_6, true);
 8003b66:	2301      	movs	r3, #1
 8003b68:	2240      	movs	r2, #64	; 0x40
 8003b6a:	4923      	ldr	r1, [pc, #140]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8003b6c:	482b      	ldr	r0, [pc, #172]	; (8003c1c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8003b6e:	f7fe f9a9 	bl	8001ec4 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
SmartFuseHandler < number_of_fuses > sf_handler;
 8003b72:	482b      	ldr	r0, [pc, #172]	; (8003c20 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8003b74:	f7fe fb9c 	bl	80022b0 <_ZN16SmartFuseHandlerILm4EEC1Ev>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d12e      	bne.n	8003bdc <_Z41__static_initialization_and_destruction_0ii+0x124>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d129      	bne.n	8003bdc <_Z41__static_initialization_and_destruction_0ii+0x124>
 8003b88:	4825      	ldr	r0, [pc, #148]	; (8003c20 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8003b8a:	f7ff ff88 	bl	8003a9e <_ZN16SmartFuseHandlerILm4EED1Ev>
GpioInElement safety_hvd(GPIOB, GPIO_PIN_6, true);
 8003b8e:	4823      	ldr	r0, [pc, #140]	; (8003c1c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8003b90:	f7fe f9d0 	bl	8001f34 <_ZN13GpioInElementD1Ev>
GpioInElement safety_td(GPIOB, GPIO_PIN_4, true);
 8003b94:	4820      	ldr	r0, [pc, #128]	; (8003c18 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8003b96:	f7fe f9cd 	bl	8001f34 <_ZN13GpioInElementD1Ev>
GpioInElement safety_tms(GPIOB, GPIO_PIN_2, true);
 8003b9a:	481e      	ldr	r0, [pc, #120]	; (8003c14 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8003b9c:	f7fe f9ca 	bl	8001f34 <_ZN13GpioInElementD1Ev>
GpioInElement safety_spare(GPIOB, GPIO_PIN_1, true);
 8003ba0:	481b      	ldr	r0, [pc, #108]	; (8003c10 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8003ba2:	f7fe f9c7 	bl	8001f34 <_ZN13GpioInElementD1Ev>
GpioInElement safety_ams(GPIOB, GPIO_PIN_0, true);
 8003ba6:	4819      	ldr	r0, [pc, #100]	; (8003c0c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8003ba8:	f7fe f9c4 	bl	8001f34 <_ZN13GpioInElementD1Ev>
GpioOutElement enable_mosfets(GPIOB, GPIO_PIN_9, false);
 8003bac:	4816      	ldr	r0, [pc, #88]	; (8003c08 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8003bae:	f7fe f9e3 	bl	8001f78 <_ZN14GpioOutElementD1Ev>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003bb2:	4814      	ldr	r0, [pc, #80]	; (8003c04 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8003bb4:	f7fe f9e0 	bl	8001f78 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003bb8:	4811      	ldr	r0, [pc, #68]	; (8003c00 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8003bba:	f7fe f9dd 	bl	8001f78 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 8003bbe:	480f      	ldr	r0, [pc, #60]	; (8003bfc <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8003bc0:	f7fe f9da 	bl	8001f78 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 8003bc4:	480b      	ldr	r0, [pc, #44]	; (8003bf4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8003bc6:	f7fe f9d7 	bl	8001f78 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 8003bca:	4809      	ldr	r0, [pc, #36]	; (8003bf0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8003bcc:	f7fe f9d4 	bl	8001f78 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 8003bd0:	4806      	ldr	r0, [pc, #24]	; (8003bec <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8003bd2:	f7fe f9d1 	bl	8001f78 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 8003bd6:	4804      	ldr	r0, [pc, #16]	; (8003be8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8003bd8:	f7fe f9ce 	bl	8001f78 <_ZN14GpioOutElementD1Ev>
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	48000800 	.word	0x48000800
 8003be8:	2000032c 	.word	0x2000032c
 8003bec:	2000033c 	.word	0x2000033c
 8003bf0:	2000034c 	.word	0x2000034c
 8003bf4:	2000035c 	.word	0x2000035c
 8003bf8:	48000400 	.word	0x48000400
 8003bfc:	2000036c 	.word	0x2000036c
 8003c00:	2000037c 	.word	0x2000037c
 8003c04:	2000038c 	.word	0x2000038c
 8003c08:	2000039c 	.word	0x2000039c
 8003c0c:	200003ac 	.word	0x200003ac
 8003c10:	200003bc 	.word	0x200003bc
 8003c14:	200003cc 	.word	0x200003cc
 8003c18:	200003dc 	.word	0x200003dc
 8003c1c:	200003ec 	.word	0x200003ec
 8003c20:	20000470 	.word	0x20000470

08003c24 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	7993      	ldrb	r3, [r2, #6]
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	1dd8      	adds	r0, r3, #7
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	331c      	adds	r3, #28
 8003c40:	2203      	movs	r2, #3
 8003c42:	4619      	mov	r1, r3
 8003c44:	f004 fcc0 	bl	80085c8 <memcpy>
  }
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	7993      	ldrb	r3, [r2, #6]
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3307      	adds	r3, #7
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	321c      	adds	r2, #28
 8003c6c:	8812      	ldrh	r2, [r2, #0]
 8003c6e:	b292      	uxth	r2, r2
 8003c70:	801a      	strh	r2, [r3, #0]
  }
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	7993      	ldrb	r3, [r2, #6]
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3307      	adds	r3, #7
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	321c      	adds	r2, #28
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	601a      	str	r2, [r3, #0]
  }
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	7993      	ldrb	r3, [r2, #6]
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1dd8      	adds	r0, r3, #7
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	331c      	adds	r3, #28
 8003cc6:	2206      	movs	r2, #6
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f004 fc7d 	bl	80085c8 <memcpy>
  }
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	7993      	ldrb	r3, [r2, #6]
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	1dd8      	adds	r0, r3, #7
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	331c      	adds	r3, #28
 8003cf2:	2206      	movs	r2, #6
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f004 fc67 	bl	80085c8 <memcpy>
  }
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	7993      	ldrb	r3, [r2, #6]
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	1dd8      	adds	r0, r3, #7
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	331c      	adds	r3, #28
 8003d1e:	2206      	movs	r2, #6
 8003d20:	4619      	mov	r1, r3
 8003d22:	f004 fc51 	bl	80085c8 <memcpy>
  }
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	7993      	ldrb	r3, [r2, #6]
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	1dd8      	adds	r0, r3, #7
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	331c      	adds	r3, #28
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f004 fc3b 	bl	80085c8 <memcpy>
  }
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	7993      	ldrb	r3, [r2, #6]
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3307      	adds	r3, #7
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	321c      	adds	r2, #28
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	601a      	str	r2, [r3, #0]
  }
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	7993      	ldrb	r3, [r2, #6]
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	1dd8      	adds	r0, r3, #7
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	331c      	adds	r3, #28
 8003da2:	2208      	movs	r2, #8
 8003da4:	4619      	mov	r1, r3
 8003da6:	f004 fc0f 	bl	80085c8 <memcpy>
  }
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	7993      	ldrb	r3, [r2, #6]
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	1dd8      	adds	r0, r3, #7
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	331c      	adds	r3, #28
 8003dce:	2203      	movs	r2, #3
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f004 fbf9 	bl	80085c8 <memcpy>
  }
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	7993      	ldrb	r3, [r2, #6]
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	1dd8      	adds	r0, r3, #7
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	331c      	adds	r3, #28
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f004 fbe3 	bl	80085c8 <memcpy>
  }
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_ZN8PUTM_CAN6DeviceINS_7SF_NUCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	7993      	ldrb	r3, [r2, #6]
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3307      	adds	r3, #7
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	321c      	adds	r2, #28
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	601a      	str	r2, [r3, #0]
  }
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <_ZN8PUTM_CAN6DeviceINS_5SF_WSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	7993      	ldrb	r3, [r2, #6]
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	1dd8      	adds	r0, r3, #7
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	331c      	adds	r3, #28
 8003e52:	2208      	movs	r2, #8
 8003e54:	4619      	mov	r1, r3
 8003e56:	f004 fbb7 	bl	80085c8 <memcpy>
  }
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <_ZN8PUTM_CAN6DeviceINS_5SF_DVEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	7993      	ldrb	r3, [r2, #6]
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	1dd8      	adds	r0, r3, #7
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	331c      	adds	r3, #28
 8003e7e:	2208      	movs	r2, #8
 8003e80:	4619      	mov	r1, r3
 8003e82:	f004 fba1 	bl	80085c8 <memcpy>
  }
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_ZN8PUTM_CAN6DeviceINS_20SF_CoolingAndVSafetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	7993      	ldrb	r3, [r2, #6]
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	1dd8      	adds	r0, r3, #7
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	331c      	adds	r3, #28
 8003eaa:	2208      	movs	r2, #8
 8003eac:	4619      	mov	r1, r3
 8003eae:	f004 fb8b 	bl	80085c8 <memcpy>
  }
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <_ZN8PUTM_CAN6DeviceINS_11SF_FrontBoxEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	7993      	ldrb	r3, [r2, #6]
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	1dd8      	adds	r0, r3, #7
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	331c      	adds	r3, #28
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f004 fb75 	bl	80085c8 <memcpy>
  }
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	7993      	ldrb	r3, [r2, #6]
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	1dd8      	adds	r0, r3, #7
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	331c      	adds	r3, #28
 8003f02:	2203      	movs	r2, #3
 8003f04:	4619      	mov	r1, r3
 8003f06:	f004 fb5f 	bl	80085c8 <memcpy>
  }
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	7993      	ldrb	r3, [r2, #6]
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	1dd8      	adds	r0, r3, #7
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	331c      	adds	r3, #28
 8003f2e:	2205      	movs	r2, #5
 8003f30:	4619      	mov	r1, r3
 8003f32:	f004 fb49 	bl	80085c8 <memcpy>
  }
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	7993      	ldrb	r3, [r2, #6]
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3307      	adds	r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	321c      	adds	r2, #28
 8003f5a:	8812      	ldrh	r2, [r2, #0]
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	801a      	strh	r2, [r3, #0]
  }
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	7993      	ldrb	r3, [r2, #6]
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3307      	adds	r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	321c      	adds	r2, #28
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	701a      	strb	r2, [r3, #0]
  }
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	7993      	ldrb	r3, [r2, #6]
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3307      	adds	r3, #7
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	321c      	adds	r2, #28
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	601a      	str	r2, [r3, #0]
  }
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	7993      	ldrb	r3, [r2, #6]
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3307      	adds	r3, #7
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	321c      	adds	r2, #28
 8003fe0:	7812      	ldrb	r2, [r2, #0]
 8003fe2:	701a      	strb	r2, [r3, #0]
  }
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
    new_data = true;
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	7993      	ldrb	r3, [r2, #6]
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3307      	adds	r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	321c      	adds	r2, #28
 800400c:	8812      	ldrh	r2, [r2, #0]
 800400e:	b292      	uxth	r2, r2
 8004010:	801a      	strh	r2, [r3, #0]
  }
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	7993      	ldrb	r3, [r2, #6]
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	1dd8      	adds	r0, r3, #7
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	331c      	adds	r3, #28
 800403a:	2208      	movs	r2, #8
 800403c:	4619      	mov	r1, r3
 800403e:	f004 fac3 	bl	80085c8 <memcpy>
  }
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	7993      	ldrb	r3, [r2, #6]
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3307      	adds	r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	321c      	adds	r2, #28
 8004066:	7812      	ldrb	r2, [r2, #0]
 8004068:	701a      	strb	r2, [r3, #0]
  }
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	7993      	ldrb	r3, [r2, #6]
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	1dd8      	adds	r0, r3, #7
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	331c      	adds	r3, #28
 8004092:	2208      	movs	r2, #8
 8004094:	4619      	mov	r1, r3
 8004096:	f004 fa97 	bl	80085c8 <memcpy>
  }
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
    new_data = true;
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	7993      	ldrb	r3, [r2, #6]
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	1dd8      	adds	r0, r3, #7
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	331c      	adds	r3, #28
 80040be:	2206      	movs	r2, #6
 80040c0:	4619      	mov	r1, r3
 80040c2:	f004 fa81 	bl	80085c8 <memcpy>
  }
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	7993      	ldrb	r3, [r2, #6]
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	1dd8      	adds	r0, r3, #7
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	331c      	adds	r3, #28
 80040ea:	2208      	movs	r2, #8
 80040ec:	4619      	mov	r1, r3
 80040ee:	f004 fa6b 	bl	80085c8 <memcpy>
  }
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	7993      	ldrb	r3, [r2, #6]
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3307      	adds	r3, #7
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	321c      	adds	r2, #28
 8004116:	7812      	ldrb	r2, [r2, #0]
 8004118:	701a      	strb	r2, [r3, #0]
  }
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	7993      	ldrb	r3, [r2, #6]
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	1dd8      	adds	r0, r3, #7
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	331c      	adds	r3, #28
 8004142:	2206      	movs	r2, #6
 8004144:	4619      	mov	r1, r3
 8004146:	f004 fa3f 	bl	80085c8 <memcpy>
  }
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	7993      	ldrb	r3, [r2, #6]
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	1dd8      	adds	r0, r3, #7
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	331c      	adds	r3, #28
 800416e:	2206      	movs	r2, #6
 8004170:	4619      	mov	r1, r3
 8004172:	f004 fa29 	bl	80085c8 <memcpy>
  }
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	7993      	ldrb	r3, [r2, #6]
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	1dd8      	adds	r0, r3, #7
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	331c      	adds	r3, #28
 800419a:	2208      	movs	r2, #8
 800419c:	4619      	mov	r1, r3
 800419e:	f004 fa13 	bl	80085c8 <memcpy>
  }
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	7993      	ldrb	r3, [r2, #6]
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	1dd8      	adds	r0, r3, #7
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	331c      	adds	r3, #28
 80041c6:	2205      	movs	r2, #5
 80041c8:	4619      	mov	r1, r3
 80041ca:	f004 f9fd 	bl	80085c8 <memcpy>
  }
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 80041d6:	b580      	push	{r7, lr}
 80041d8:	af00      	add	r7, sp, #0
 80041da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041de:	2001      	movs	r0, #1
 80041e0:	f7ff fc6a 	bl	8003ab8 <_Z41__static_initialization_and_destruction_0ii>
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <_GLOBAL__sub_D__ZN8PUTM_CAN3canE>:
 80041e6:	b580      	push	{r7, lr}
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041ee:	2000      	movs	r0, #0
 80041f0:	f7ff fc62 	bl	8003ab8 <_Z41__static_initialization_and_destruction_0ii>
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80041fc:	4b26      	ldr	r3, [pc, #152]	; (8004298 <MX_SPI1_Init+0xa0>)
 80041fe:	4a27      	ldr	r2, [pc, #156]	; (800429c <MX_SPI1_Init+0xa4>)
 8004200:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004202:	4b25      	ldr	r3, [pc, #148]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004204:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004208:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800420a:	4b23      	ldr	r3, [pc, #140]	; (8004298 <MX_SPI1_Init+0xa0>)
 800420c:	2200      	movs	r2, #0
 800420e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004212:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004216:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004218:	4b1f      	ldr	r3, [pc, #124]	; (8004298 <MX_SPI1_Init+0xa0>)
 800421a:	2200      	movs	r2, #0
 800421c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004220:	2200      	movs	r2, #0
 8004222:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004224:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800422a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800422c:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <MX_SPI1_Init+0xa0>)
 800422e:	2218      	movs	r2, #24
 8004230:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004232:	4b19      	ldr	r3, [pc, #100]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004234:	2200      	movs	r2, #0
 8004236:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004238:	4b17      	ldr	r3, [pc, #92]	; (8004298 <MX_SPI1_Init+0xa0>)
 800423a:	2200      	movs	r2, #0
 800423c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800423e:	4b16      	ldr	r3, [pc, #88]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004240:	2200      	movs	r2, #0
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004244:	4b14      	ldr	r3, [pc, #80]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004246:	2207      	movs	r2, #7
 8004248:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800424a:	4b13      	ldr	r3, [pc, #76]	; (8004298 <MX_SPI1_Init+0xa0>)
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004252:	2200      	movs	r2, #0
 8004254:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004256:	4810      	ldr	r0, [pc, #64]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004258:	f004 f8ac 	bl	80083b4 <HAL_SPI_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004262:	f7ff f8f1 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <MX_SPI1_Init+0xa0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004274:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d007      	beq.n	8004294 <MX_SPI1_Init+0x9c>
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <MX_SPI1_Init+0xa0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b03      	ldr	r3, [pc, #12]	; (8004298 <MX_SPI1_Init+0xa0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8004294:	bf00      	nop
 8004296:	bd80      	pop	{r7, pc}
 8004298:	200006d8 	.word	0x200006d8
 800429c:	40013000 	.word	0x40013000

080042a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a17      	ldr	r2, [pc, #92]	; (800431c <HAL_SPI_MspInit+0x7c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d128      	bne.n	8004314 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <HAL_SPI_MspInit+0x80>)
 80042c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <HAL_SPI_MspInit+0x80>)
 80042c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042cc:	6613      	str	r3, [r2, #96]	; 0x60
 80042ce:	4b14      	ldr	r3, [pc, #80]	; (8004320 <HAL_SPI_MspInit+0x80>)
 80042d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <HAL_SPI_MspInit+0x80>)
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	4a10      	ldr	r2, [pc, #64]	; (8004320 <HAL_SPI_MspInit+0x80>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042e6:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_SPI_MspInit+0x80>)
 80042e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80042f2:	23e0      	movs	r3, #224	; 0xe0
 80042f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f6:	2302      	movs	r3, #2
 80042f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042fa:	2302      	movs	r3, #2
 80042fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fe:	2303      	movs	r3, #3
 8004300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004302:	2305      	movs	r3, #5
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	4619      	mov	r1, r3
 800430c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004310:	f002 f974 	bl	80065fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004314:	bf00      	nop
 8004316:	3728      	adds	r7, #40	; 0x28
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40013000 	.word	0x40013000
 8004320:	40021000 	.word	0x40021000

08004324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <HAL_MspInit+0x44>)
 800432c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432e:	4a0e      	ldr	r2, [pc, #56]	; (8004368 <HAL_MspInit+0x44>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6613      	str	r3, [r2, #96]	; 0x60
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <HAL_MspInit+0x44>)
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <HAL_MspInit+0x44>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004346:	4a08      	ldr	r2, [pc, #32]	; (8004368 <HAL_MspInit+0x44>)
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434c:	6593      	str	r3, [r2, #88]	; 0x58
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_MspInit+0x44>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000

0800436c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004370:	e7fe      	b.n	8004370 <NMI_Handler+0x4>

08004372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004376:	e7fe      	b.n	8004376 <HardFault_Handler+0x4>

08004378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800437c:	e7fe      	b.n	800437c <MemManage_Handler+0x4>

0800437e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004382:	e7fe      	b.n	8004382 <BusFault_Handler+0x4>

08004384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004388:	e7fe      	b.n	8004388 <UsageFault_Handler+0x4>

0800438a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043a6:	b480      	push	{r7}
 80043a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043b8:	f000 f9c6 	bl	8004748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043bc:	bf00      	nop
 80043be:	bd80      	pop	{r7, pc}

080043c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80043c4:	4802      	ldr	r0, [pc, #8]	; (80043d0 <CAN1_RX0_IRQHandler+0x10>)
 80043c6:	f001 fdd7 	bl	8005f78 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000304 	.word	0x20000304

080043d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80043d8:	4802      	ldr	r0, [pc, #8]	; (80043e4 <CAN1_RX1_IRQHandler+0x10>)
 80043da:	f001 fdcd 	bl	8005f78 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000304 	.word	0x20000304

080043e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
	return 1;
 80043ec:	2301      	movs	r3, #1
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <_kill>:

int _kill(int pid, int sig)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004402:	f004 f89d 	bl	8008540 <__errno>
 8004406:	4603      	mov	r3, r0
 8004408:	2216      	movs	r2, #22
 800440a:	601a      	str	r2, [r3, #0]
	return -1;
 800440c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <_exit>:

void _exit (int status)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004420:	f04f 31ff 	mov.w	r1, #4294967295
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff ffe7 	bl	80043f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800442a:	e7fe      	b.n	800442a <_exit+0x12>

0800442c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	e00a      	b.n	8004454 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800443e:	f3af 8000 	nop.w
 8004442:	4601      	mov	r1, r0
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	60ba      	str	r2, [r7, #8]
 800444a:	b2ca      	uxtb	r2, r1
 800444c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	3301      	adds	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	dbf0      	blt.n	800443e <_read+0x12>
	}

return len;
 800445c:	687b      	ldr	r3, [r7, #4]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b086      	sub	sp, #24
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e009      	b.n	800448c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	60ba      	str	r2, [r7, #8]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	3301      	adds	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	429a      	cmp	r2, r3
 8004492:	dbf1      	blt.n	8004478 <_write+0x12>
	}
	return len;
 8004494:	687b      	ldr	r3, [r7, #4]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <_close>:

int _close(int file)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
	return -1;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044c6:	605a      	str	r2, [r3, #4]
	return 0;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <_isatty>:

int _isatty(int file)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
	return 1;
 80044de:	2301      	movs	r3, #1
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
	return 0;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <_sbrk+0x5c>)
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <_sbrk+0x60>)
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <_sbrk+0x64>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004524:	4b11      	ldr	r3, [pc, #68]	; (800456c <_sbrk+0x64>)
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <_sbrk+0x68>)
 8004528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <_sbrk+0x64>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	429a      	cmp	r2, r3
 8004536:	d207      	bcs.n	8004548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004538:	f004 f802 	bl	8008540 <__errno>
 800453c:	4603      	mov	r3, r0
 800453e:	220c      	movs	r2, #12
 8004540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004542:	f04f 33ff 	mov.w	r3, #4294967295
 8004546:	e009      	b.n	800455c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004548:	4b08      	ldr	r3, [pc, #32]	; (800456c <_sbrk+0x64>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <_sbrk+0x64>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	4a05      	ldr	r2, [pc, #20]	; (800456c <_sbrk+0x64>)
 8004558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800455a:	68fb      	ldr	r3, [r7, #12]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20050000 	.word	0x20050000
 8004568:	00000400 	.word	0x00000400
 800456c:	2000073c 	.word	0x2000073c
 8004570:	20000758 	.word	0x20000758

08004574 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <SystemInit+0x20>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	4a05      	ldr	r2, [pc, #20]	; (8004594 <SystemInit+0x20>)
 8004580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 80045a6:	f000 f8e3 	bl	8004770 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	601a      	str	r2, [r3, #0]
}
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <_ZN5TimerC1Em>:

Timer::Timer(uint32_t timeout) : timeout(timeout)
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 80045ca:	f000 f8d1 	bl	8004770 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <_ZN5Timer7restartEv>:

void Timer::restart()
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
	this->start_time = HAL_GetTick();
 80045e6:	f000 f8c3 	bl	8004770 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	601a      	str	r2, [r3, #0]
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <_ZN5Timer23checkIfTimedOutAndResetEv>:

bool Timer::checkIfTimedOutAndReset()
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	if(this->getPassedTime() >= this->timeout)
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f814 	bl	800462e <_ZN5Timer13getPassedTimeEv>
 8004606:	4602      	mov	r2, r0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	bf2c      	ite	cs
 8004610:	2301      	movcs	r3, #1
 8004612:	2300      	movcc	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d004      	beq.n	8004624 <_ZN5Timer23checkIfTimedOutAndResetEv+0x2c>
	{
		this->restart();
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff ffdf 	bl	80045de <_ZN5Timer7restartEv>
		return true;
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <_ZN5Timer23checkIfTimedOutAndResetEv+0x2e>
	}

	return false;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - this->start_time;
 8004636:	f000 f89b 	bl	8004770 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	1ad3      	subs	r3, r2, r3
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800464c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004684 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004650:	f7ff ff90 	bl	8004574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004654:	480c      	ldr	r0, [pc, #48]	; (8004688 <LoopForever+0x6>)
  ldr r1, =_edata
 8004656:	490d      	ldr	r1, [pc, #52]	; (800468c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004658:	4a0d      	ldr	r2, [pc, #52]	; (8004690 <LoopForever+0xe>)
  movs r3, #0
 800465a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800465c:	e002      	b.n	8004664 <LoopCopyDataInit>

0800465e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800465e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004662:	3304      	adds	r3, #4

08004664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004668:	d3f9      	bcc.n	800465e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800466a:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800466c:	4c0a      	ldr	r4, [pc, #40]	; (8004698 <LoopForever+0x16>)
  movs r3, #0
 800466e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004670:	e001      	b.n	8004676 <LoopFillZerobss>

08004672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004674:	3204      	adds	r2, #4

08004676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004678:	d3fb      	bcc.n	8004672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800467a:	f003 ff79 	bl	8008570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800467e:	f7fd fe79 	bl	8002374 <main>

08004682 <LoopForever>:

LoopForever:
    b LoopForever
 8004682:	e7fe      	b.n	8004682 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004684:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800468c:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8004690:	08009a54 	.word	0x08009a54
  ldr r2, =_sbss
 8004694:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8004698:	20000754 	.word	0x20000754

0800469c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800469c:	e7fe      	b.n	800469c <ADC1_2_IRQHandler>

0800469e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046a8:	2003      	movs	r0, #3
 80046aa:	f001 ff65 	bl	8006578 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046ae:	200f      	movs	r0, #15
 80046b0:	f000 f80e 	bl	80046d0 <HAL_InitTick>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	71fb      	strb	r3, [r7, #7]
 80046be:	e001      	b.n	80046c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046c0:	f7ff fe30 	bl	8004324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046c4:	79fb      	ldrb	r3, [r7, #7]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80046dc:	4b17      	ldr	r3, [pc, #92]	; (800473c <HAL_InitTick+0x6c>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d023      	beq.n	800472c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <HAL_InitTick+0x70>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_InitTick+0x6c>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 ff71 	bl	80065e2 <HAL_SYSTICK_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b0f      	cmp	r3, #15
 800470a:	d809      	bhi.n	8004720 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800470c:	2200      	movs	r2, #0
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	f001 ff3b 	bl	800658e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004718:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <HAL_InitTick+0x74>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e007      	b.n	8004730 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
 8004724:	e004      	b.n	8004730 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
 800472a:	e001      	b.n	8004730 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000218 	.word	0x20000218
 8004740:	20000210 	.word	0x20000210
 8004744:	20000214 	.word	0x20000214

08004748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800474c:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_IncTick+0x20>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	4b06      	ldr	r3, [pc, #24]	; (800476c <HAL_IncTick+0x24>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4413      	add	r3, r2
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <HAL_IncTick+0x24>)
 800475a:	6013      	str	r3, [r2, #0]
}
 800475c:	bf00      	nop
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20000218 	.word	0x20000218
 800476c:	20000740 	.word	0x20000740

08004770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return uwTick;
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <HAL_GetTick+0x14>)
 8004776:	681b      	ldr	r3, [r3, #0]
}
 8004778:	4618      	mov	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000740 	.word	0x20000740

08004788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004790:	f7ff ffee 	bl	8004770 <HAL_GetTick>
 8004794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d005      	beq.n	80047ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80047a2:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <HAL_Delay+0x44>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047ae:	bf00      	nop
 80047b0:	f7ff ffde 	bl	8004770 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d8f7      	bhi.n	80047b0 <HAL_Delay+0x28>
  {
  }
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000218 	.word	0x20000218

080047d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3360      	adds	r3, #96	; 0x60
 800484a:	461a      	mov	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b08      	ldr	r3, [pc, #32]	; (800487c <LL_ADC_SetOffset+0x44>)
 800485a:	4013      	ands	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	03fff000 	.word	0x03fff000

08004880 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3360      	adds	r3, #96	; 0x60
 800488e:	461a      	mov	r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3360      	adds	r3, #96	; 0x60
 80048bc:	461a      	mov	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	615a      	str	r2, [r3, #20]
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3330      	adds	r3, #48	; 0x30
 8004918:	461a      	mov	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	4413      	add	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	211f      	movs	r1, #31
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	401a      	ands	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	0e9b      	lsrs	r3, r3, #26
 8004940:	f003 011f 	and.w	r1, r3, #31
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	431a      	orrs	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3314      	adds	r3, #20
 8004970:	461a      	mov	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	0e5b      	lsrs	r3, r3, #25
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	4413      	add	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	0d1b      	lsrs	r3, r3, #20
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2107      	movs	r1, #7
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	401a      	ands	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	0d1b      	lsrs	r3, r3, #20
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	431a      	orrs	r2, r3
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d0:	43db      	mvns	r3, r3
 80049d2:	401a      	ands	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f003 0318 	and.w	r3, r3, #24
 80049da:	4908      	ldr	r1, [pc, #32]	; (80049fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80049dc:	40d9      	lsrs	r1, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	400b      	ands	r3, r1
 80049e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e6:	431a      	orrs	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	0007ffff 	.word	0x0007ffff

08004a00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004a10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6093      	str	r3, [r2, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a38:	d101      	bne.n	8004a3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004a5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a88:	d101      	bne.n	8004a8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <LL_ADC_IsEnabled+0x18>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <LL_ADC_IsEnabled+0x1a>
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d101      	bne.n	8004ada <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d101      	bne.n	8004b00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b089      	sub	sp, #36	; 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e134      	b.n	8004d94 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7fb fc27 	bl	800038c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff67 	bl	8004a24 <LL_ADC_IsDeepPowerDownEnabled>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff4d 	bl	8004a00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ff82 	bl	8004a74 <LL_ADC_IsInternalRegulatorEnabled>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d115      	bne.n	8004ba2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff66 	bl	8004a4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b80:	4b86      	ldr	r3, [pc, #536]	; (8004d9c <HAL_ADC_Init+0x28c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	4a86      	ldr	r2, [pc, #536]	; (8004da0 <HAL_ADC_Init+0x290>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	099b      	lsrs	r3, r3, #6
 8004b8e:	3301      	adds	r3, #1
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004b94:	e002      	b.n	8004b9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f9      	bne.n	8004b96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff ff64 	bl	8004a74 <LL_ADC_IsInternalRegulatorEnabled>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	f043 0210 	orr.w	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	f043 0201 	orr.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff75 	bl	8004ac2 <LL_ADC_REG_IsConversionOngoing>
 8004bd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 80cd 	bne.w	8004d82 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 80c9 	bne.w	8004d82 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004bf8:	f043 0202 	orr.w	r2, r3, #2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff ff49 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d110      	bne.n	8004c32 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c10:	4864      	ldr	r0, [pc, #400]	; (8004da4 <HAL_ADC_Init+0x294>)
 8004c12:	f7ff ff43 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c16:	4604      	mov	r4, r0
 8004c18:	4863      	ldr	r0, [pc, #396]	; (8004da8 <HAL_ADC_Init+0x298>)
 8004c1a:	f7ff ff3f 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4323      	orrs	r3, r4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	485f      	ldr	r0, [pc, #380]	; (8004dac <HAL_ADC_Init+0x29c>)
 8004c2e:	f7ff fdcf 	bl	80047d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	7e5b      	ldrb	r3, [r3, #25]
 8004c36:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c3c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004c42:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004c48:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c50:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c52:	4313      	orrs	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d106      	bne.n	8004c6e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	3b01      	subs	r3, #1
 8004c66:	045b      	lsls	r3, r3, #17
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	4b47      	ldr	r3, [pc, #284]	; (8004db0 <HAL_ADC_Init+0x2a0>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	69b9      	ldr	r1, [r7, #24]
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff ff0d 	bl	8004ac2 <LL_ADC_REG_IsConversionOngoing>
 8004ca8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff ff1a 	bl	8004ae8 <LL_ADC_INJ_IsConversionOngoing>
 8004cb4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d140      	bne.n	8004d3e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d13d      	bne.n	8004d3e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	7e1b      	ldrb	r3, [r3, #24]
 8004cca:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ccc:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cd4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ce4:	f023 0306 	bic.w	r3, r3, #6
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d118      	bne.n	8004d2e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d06:	f023 0304 	bic.w	r3, r3, #4
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d12:	4311      	orrs	r1, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d18:	4311      	orrs	r1, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	611a      	str	r2, [r3, #16]
 8004d2c:	e007      	b.n	8004d3e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d10c      	bne.n	8004d60 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	f023 010f 	bic.w	r1, r3, #15
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d5e:	e007      	b.n	8004d70 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 020f 	bic.w	r2, r2, #15
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d74:	f023 0303 	bic.w	r3, r3, #3
 8004d78:	f043 0201 	orr.w	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004d80:	e007      	b.n	8004d92 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d86:	f043 0210 	orr.w	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d92:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3724      	adds	r7, #36	; 0x24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd90      	pop	{r4, r7, pc}
 8004d9c:	20000210 	.word	0x20000210
 8004da0:	053e2d63 	.word	0x053e2d63
 8004da4:	50040000 	.word	0x50040000
 8004da8:	50040100 	.word	0x50040100
 8004dac:	50040300 	.word	0x50040300
 8004db0:	fff0c007 	.word	0xfff0c007

08004db4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b0b6      	sub	sp, #216	; 0xd8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x22>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e3d5      	b.n	8005582 <HAL_ADC_ConfigChannel+0x7ce>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fe6d 	bl	8004ac2 <LL_ADC_REG_IsConversionOngoing>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 83ba 	bne.w	8005564 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	d824      	bhi.n	8004e42 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	3b02      	subs	r3, #2
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d81b      	bhi.n	8004e3a <HAL_ADC_ConfigChannel+0x86>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <HAL_ADC_ConfigChannel+0x54>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e19 	.word	0x08004e19
 8004e0c:	08004e21 	.word	0x08004e21
 8004e10:	08004e29 	.word	0x08004e29
 8004e14:	08004e31 	.word	0x08004e31
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	220c      	movs	r2, #12
 8004e1c:	605a      	str	r2, [r3, #4]
          break;
 8004e1e:	e011      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2212      	movs	r2, #18
 8004e24:	605a      	str	r2, [r3, #4]
          break;
 8004e26:	e00d      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2218      	movs	r2, #24
 8004e2c:	605a      	str	r2, [r3, #4]
          break;
 8004e2e:	e009      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e36:	605a      	str	r2, [r3, #4]
          break;
 8004e38:	e004      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2206      	movs	r2, #6
 8004e3e:	605a      	str	r2, [r3, #4]
          break;
 8004e40:	e000      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004e42:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	f7ff fd59 	bl	8004908 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff fe31 	bl	8004ac2 <LL_ADC_REG_IsConversionOngoing>
 8004e60:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fe3d 	bl	8004ae8 <LL_ADC_INJ_IsConversionOngoing>
 8004e6e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 81c1 	bne.w	80051fe <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f040 81bc 	bne.w	80051fe <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e8e:	d10f      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f7ff fd60 	bl	8004960 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff fd1a 	bl	80048e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004eae:	e00e      	b.n	8004ece <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6819      	ldr	r1, [r3, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f7ff fd4f 	bl	8004960 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fd0a 	bl	80048e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	08db      	lsrs	r3, r3, #3
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d00a      	beq.n	8004f06 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6919      	ldr	r1, [r3, #16]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f00:	f7ff fc9a 	bl	8004838 <LL_ADC_SetOffset>
 8004f04:	e17b      	b.n	80051fe <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fcb7 	bl	8004880 <LL_ADC_GetOffsetChannel>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x17e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fcac 	bl	8004880 <LL_ADC_GetOffsetChannel>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	0e9b      	lsrs	r3, r3, #26
 8004f2c:	f003 021f 	and.w	r2, r3, #31
 8004f30:	e01e      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x1bc>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff fca1 	bl	8004880 <LL_ADC_GetOffsetChannel>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f48:	fa93 f3a3 	rbit	r3, r3
 8004f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004f60:	2320      	movs	r3, #32
 8004f62:	e004      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f68:	fab3 f383 	clz	r3, r3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x1d4>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	0e9b      	lsrs	r3, r3, #26
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	e018      	b.n	8004fba <HAL_ADC_ConfigChannel+0x206>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f94:	fa93 f3a3 	rbit	r3, r3
 8004f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004fa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004fac:	2320      	movs	r3, #32
 8004fae:	e004      	b.n	8004fba <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004fb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004fb4:	fab3 f383 	clz	r3, r3
 8004fb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d106      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fc70 	bl	80048ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fc54 	bl	8004880 <LL_ADC_GetOffsetChannel>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x244>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff fc49 	bl	8004880 <LL_ADC_GetOffsetChannel>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	0e9b      	lsrs	r3, r3, #26
 8004ff2:	f003 021f 	and.w	r2, r3, #31
 8004ff6:	e01e      	b.n	8005036 <HAL_ADC_ConfigChannel+0x282>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fc3e 	bl	8004880 <LL_ADC_GetOffsetChannel>
 8005004:	4603      	mov	r3, r0
 8005006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800500e:	fa93 f3a3 	rbit	r3, r3
 8005012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800501a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800501e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8005026:	2320      	movs	r3, #32
 8005028:	e004      	b.n	8005034 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800502a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800502e:	fab3 f383 	clz	r3, r3
 8005032:	b2db      	uxtb	r3, r3
 8005034:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <HAL_ADC_ConfigChannel+0x29a>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	0e9b      	lsrs	r3, r3, #26
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	e018      	b.n	8005080 <HAL_ADC_ConfigChannel+0x2cc>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005056:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005062:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800506a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8005072:	2320      	movs	r3, #32
 8005074:	e004      	b.n	8005080 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8005076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800507a:	fab3 f383 	clz	r3, r3
 800507e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005080:	429a      	cmp	r2, r3
 8005082:	d106      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2200      	movs	r2, #0
 800508a:	2101      	movs	r1, #1
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fc0d 	bl	80048ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2102      	movs	r1, #2
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fbf1 	bl	8004880 <LL_ADC_GetOffsetChannel>
 800509e:	4603      	mov	r3, r0
 80050a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <HAL_ADC_ConfigChannel+0x30a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fbe6 	bl	8004880 <LL_ADC_GetOffsetChannel>
 80050b4:	4603      	mov	r3, r0
 80050b6:	0e9b      	lsrs	r3, r3, #26
 80050b8:	f003 021f 	and.w	r2, r3, #31
 80050bc:	e01e      	b.n	80050fc <HAL_ADC_ConfigChannel+0x348>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2102      	movs	r1, #2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff fbdb 	bl	8004880 <LL_ADC_GetOffsetChannel>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050d4:	fa93 f3a3 	rbit	r3, r3
 80050d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80050dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80050e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80050ec:	2320      	movs	r3, #32
 80050ee:	e004      	b.n	80050fa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80050f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050f4:	fab3 f383 	clz	r3, r3
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_ADC_ConfigChannel+0x360>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	0e9b      	lsrs	r3, r3, #26
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	e016      	b.n	8005142 <HAL_ADC_ConfigChannel+0x38e>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005120:	fa93 f3a3 	rbit	r3, r3
 8005124:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800512c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8005134:	2320      	movs	r3, #32
 8005136:	e004      	b.n	8005142 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800513c:	fab3 f383 	clz	r3, r3
 8005140:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005142:	429a      	cmp	r2, r3
 8005144:	d106      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	2102      	movs	r1, #2
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fbac 	bl	80048ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2103      	movs	r1, #3
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fb90 	bl	8004880 <LL_ADC_GetOffsetChannel>
 8005160:	4603      	mov	r3, r0
 8005162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x3cc>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2103      	movs	r1, #3
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff fb85 	bl	8004880 <LL_ADC_GetOffsetChannel>
 8005176:	4603      	mov	r3, r0
 8005178:	0e9b      	lsrs	r3, r3, #26
 800517a:	f003 021f 	and.w	r2, r3, #31
 800517e:	e017      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x3fc>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2103      	movs	r1, #3
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fb7a 	bl	8004880 <LL_ADC_GetOffsetChannel>
 800518c:	4603      	mov	r3, r0
 800518e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005192:	fa93 f3a3 	rbit	r3, r3
 8005196:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800519a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800519c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80051a2:	2320      	movs	r3, #32
 80051a4:	e003      	b.n	80051ae <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80051a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a8:	fab3 f383 	clz	r3, r3
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d105      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x414>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	0e9b      	lsrs	r3, r3, #26
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	e011      	b.n	80051ec <HAL_ADC_ConfigChannel+0x438>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051d0:	fa93 f3a3 	rbit	r3, r3
 80051d4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80051d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80051da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80051e0:	2320      	movs	r3, #32
 80051e2:	e003      	b.n	80051ec <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80051e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e6:	fab3 f383 	clz	r3, r3
 80051ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d106      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2200      	movs	r2, #0
 80051f6:	2103      	movs	r1, #3
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fb57 	bl	80048ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fc4a 	bl	8004a9c <LL_ADC_IsEnabled>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	f040 8140 	bne.w	8005490 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	6819      	ldr	r1, [r3, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	461a      	mov	r2, r3
 800521e:	f7ff fbcb 	bl	80049b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4a8f      	ldr	r2, [pc, #572]	; (8005464 <HAL_ADC_ConfigChannel+0x6b0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	f040 8131 	bne.w	8005490 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <HAL_ADC_ConfigChannel+0x4a2>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	0e9b      	lsrs	r3, r3, #26
 8005244:	3301      	adds	r3, #1
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2b09      	cmp	r3, #9
 800524c:	bf94      	ite	ls
 800524e:	2301      	movls	r3, #1
 8005250:	2300      	movhi	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e019      	b.n	800528a <HAL_ADC_ConfigChannel+0x4d6>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800525e:	fa93 f3a3 	rbit	r3, r3
 8005262:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005266:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800526e:	2320      	movs	r3, #32
 8005270:	e003      	b.n	800527a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8005272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005274:	fab3 f383 	clz	r3, r3
 8005278:	b2db      	uxtb	r3, r3
 800527a:	3301      	adds	r3, #1
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	2b09      	cmp	r3, #9
 8005282:	bf94      	ite	ls
 8005284:	2301      	movls	r3, #1
 8005286:	2300      	movhi	r3, #0
 8005288:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800528a:	2b00      	cmp	r3, #0
 800528c:	d079      	beq.n	8005382 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005296:	2b00      	cmp	r3, #0
 8005298:	d107      	bne.n	80052aa <HAL_ADC_ConfigChannel+0x4f6>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	0e9b      	lsrs	r3, r3, #26
 80052a0:	3301      	adds	r3, #1
 80052a2:	069b      	lsls	r3, r3, #26
 80052a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052a8:	e015      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x522>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b2:	fa93 f3a3 	rbit	r3, r3
 80052b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80052b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80052bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80052c2:	2320      	movs	r3, #32
 80052c4:	e003      	b.n	80052ce <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80052c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c8:	fab3 f383 	clz	r3, r3
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	3301      	adds	r3, #1
 80052d0:	069b      	lsls	r3, r3, #26
 80052d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x542>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	0e9b      	lsrs	r3, r3, #26
 80052e8:	3301      	adds	r3, #1
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	2101      	movs	r1, #1
 80052f0:	fa01 f303 	lsl.w	r3, r1, r3
 80052f4:	e017      	b.n	8005326 <HAL_ADC_ConfigChannel+0x572>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fe:	fa93 f3a3 	rbit	r3, r3
 8005302:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005306:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800530e:	2320      	movs	r3, #32
 8005310:	e003      	b.n	800531a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8005312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005314:	fab3 f383 	clz	r3, r3
 8005318:	b2db      	uxtb	r3, r3
 800531a:	3301      	adds	r3, #1
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	2101      	movs	r1, #1
 8005322:	fa01 f303 	lsl.w	r3, r1, r3
 8005326:	ea42 0103 	orr.w	r1, r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10a      	bne.n	800534c <HAL_ADC_ConfigChannel+0x598>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	0e9b      	lsrs	r3, r3, #26
 800533c:	3301      	adds	r3, #1
 800533e:	f003 021f 	and.w	r2, r3, #31
 8005342:	4613      	mov	r3, r2
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	4413      	add	r3, r2
 8005348:	051b      	lsls	r3, r3, #20
 800534a:	e018      	b.n	800537e <HAL_ADC_ConfigChannel+0x5ca>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	fa93 f3a3 	rbit	r3, r3
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800535a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800535e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8005364:	2320      	movs	r3, #32
 8005366:	e003      	b.n	8005370 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8005368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536a:	fab3 f383 	clz	r3, r3
 800536e:	b2db      	uxtb	r3, r3
 8005370:	3301      	adds	r3, #1
 8005372:	f003 021f 	and.w	r2, r3, #31
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800537e:	430b      	orrs	r3, r1
 8005380:	e081      	b.n	8005486 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538a:	2b00      	cmp	r3, #0
 800538c:	d107      	bne.n	800539e <HAL_ADC_ConfigChannel+0x5ea>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	0e9b      	lsrs	r3, r3, #26
 8005394:	3301      	adds	r3, #1
 8005396:	069b      	lsls	r3, r3, #26
 8005398:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800539c:	e015      	b.n	80053ca <HAL_ADC_ConfigChannel+0x616>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80053b6:	2320      	movs	r3, #32
 80053b8:	e003      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	3301      	adds	r3, #1
 80053c4:	069b      	lsls	r3, r3, #26
 80053c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <HAL_ADC_ConfigChannel+0x636>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	0e9b      	lsrs	r3, r3, #26
 80053dc:	3301      	adds	r3, #1
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	2101      	movs	r1, #1
 80053e4:	fa01 f303 	lsl.w	r3, r1, r3
 80053e8:	e017      	b.n	800541a <HAL_ADC_ConfigChannel+0x666>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	fa93 f3a3 	rbit	r3, r3
 80053f6:	61fb      	str	r3, [r7, #28]
  return result;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8005402:	2320      	movs	r3, #32
 8005404:	e003      	b.n	800540e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	b2db      	uxtb	r3, r3
 800540e:	3301      	adds	r3, #1
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	2101      	movs	r1, #1
 8005416:	fa01 f303 	lsl.w	r3, r1, r3
 800541a:	ea42 0103 	orr.w	r1, r2, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10d      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x692>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	0e9b      	lsrs	r3, r3, #26
 8005430:	3301      	adds	r3, #1
 8005432:	f003 021f 	and.w	r2, r3, #31
 8005436:	4613      	mov	r3, r2
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	4413      	add	r3, r2
 800543c:	3b1e      	subs	r3, #30
 800543e:	051b      	lsls	r3, r3, #20
 8005440:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005444:	e01e      	b.n	8005484 <HAL_ADC_ConfigChannel+0x6d0>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	fa93 f3a3 	rbit	r3, r3
 8005452:	613b      	str	r3, [r7, #16]
  return result;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800545e:	2320      	movs	r3, #32
 8005460:	e006      	b.n	8005470 <HAL_ADC_ConfigChannel+0x6bc>
 8005462:	bf00      	nop
 8005464:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	fab3 f383 	clz	r3, r3
 800546e:	b2db      	uxtb	r3, r3
 8005470:	3301      	adds	r3, #1
 8005472:	f003 021f 	and.w	r2, r3, #31
 8005476:	4613      	mov	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4413      	add	r3, r2
 800547c:	3b1e      	subs	r3, #30
 800547e:	051b      	lsls	r3, r3, #20
 8005480:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005484:	430b      	orrs	r3, r1
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	6892      	ldr	r2, [r2, #8]
 800548a:	4619      	mov	r1, r3
 800548c:	f7ff fa68 	bl	8004960 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4b3d      	ldr	r3, [pc, #244]	; (800558c <HAL_ADC_ConfigChannel+0x7d8>)
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d06c      	beq.n	8005576 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800549c:	483c      	ldr	r0, [pc, #240]	; (8005590 <HAL_ADC_ConfigChannel+0x7dc>)
 800549e:	f7ff f9bd 	bl	800481c <LL_ADC_GetCommonPathInternalCh>
 80054a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a3a      	ldr	r2, [pc, #232]	; (8005594 <HAL_ADC_ConfigChannel+0x7e0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d127      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d121      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a35      	ldr	r2, [pc, #212]	; (8005598 <HAL_ADC_ConfigChannel+0x7e4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d157      	bne.n	8005576 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054ce:	4619      	mov	r1, r3
 80054d0:	482f      	ldr	r0, [pc, #188]	; (8005590 <HAL_ADC_ConfigChannel+0x7dc>)
 80054d2:	f7ff f990 	bl	80047f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054d6:	4b31      	ldr	r3, [pc, #196]	; (800559c <HAL_ADC_ConfigChannel+0x7e8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	099b      	lsrs	r3, r3, #6
 80054dc:	4a30      	ldr	r2, [pc, #192]	; (80055a0 <HAL_ADC_ConfigChannel+0x7ec>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	099b      	lsrs	r3, r3, #6
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	4613      	mov	r3, r2
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054f0:	e002      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f9      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054fe:	e03a      	b.n	8005576 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <HAL_ADC_ConfigChannel+0x7f0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d113      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x77e>
 800550a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800550e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10d      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1f      	ldr	r2, [pc, #124]	; (8005598 <HAL_ADC_ConfigChannel+0x7e4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d12a      	bne.n	8005576 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005528:	4619      	mov	r1, r3
 800552a:	4819      	ldr	r0, [pc, #100]	; (8005590 <HAL_ADC_ConfigChannel+0x7dc>)
 800552c:	f7ff f963 	bl	80047f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005530:	e021      	b.n	8005576 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1c      	ldr	r2, [pc, #112]	; (80055a8 <HAL_ADC_ConfigChannel+0x7f4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d11c      	bne.n	8005576 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800553c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d116      	bne.n	8005576 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a12      	ldr	r2, [pc, #72]	; (8005598 <HAL_ADC_ConfigChannel+0x7e4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d111      	bne.n	8005576 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005556:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800555a:	4619      	mov	r1, r3
 800555c:	480c      	ldr	r0, [pc, #48]	; (8005590 <HAL_ADC_ConfigChannel+0x7dc>)
 800555e:	f7ff f94a 	bl	80047f6 <LL_ADC_SetCommonPathInternalCh>
 8005562:	e008      	b.n	8005576 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800557e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005582:	4618      	mov	r0, r3
 8005584:	37d8      	adds	r7, #216	; 0xd8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	80080000 	.word	0x80080000
 8005590:	50040300 	.word	0x50040300
 8005594:	c7520000 	.word	0xc7520000
 8005598:	50040000 	.word	0x50040000
 800559c:	20000210 	.word	0x20000210
 80055a0:	053e2d63 	.word	0x053e2d63
 80055a4:	cb840000 	.word	0xcb840000
 80055a8:	80000001 	.word	0x80000001

080055ac <LL_ADC_IsEnabled>:
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <LL_ADC_IsEnabled+0x18>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <LL_ADC_IsEnabled+0x1a>
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d101      	bne.n	80055ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b0a1      	sub	sp, #132	; 0x84
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005612:	2302      	movs	r3, #2
 8005614:	e089      	b.n	800572a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800561e:	2300      	movs	r3, #0
 8005620:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005622:	2300      	movs	r3, #0
 8005624:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a42      	ldr	r2, [pc, #264]	; (8005734 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d102      	bne.n	8005636 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005630:	4b41      	ldr	r3, [pc, #260]	; (8005738 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e001      	b.n	800563a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005644:	f043 0220 	orr.w	r2, r3, #32
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e068      	b.n	800572a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ffb9 	bl	80055d2 <LL_ADC_REG_IsConversionOngoing>
 8005660:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff ffb3 	bl	80055d2 <LL_ADC_REG_IsConversionOngoing>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d14a      	bne.n	8005708 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005674:	2b00      	cmp	r3, #0
 8005676:	d147      	bne.n	8005708 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005678:	4b30      	ldr	r3, [pc, #192]	; (800573c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800567a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d027      	beq.n	80056d4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6859      	ldr	r1, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005696:	035b      	lsls	r3, r3, #13
 8005698:	430b      	orrs	r3, r1
 800569a:	431a      	orrs	r2, r3
 800569c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800569e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056a0:	4824      	ldr	r0, [pc, #144]	; (8005734 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80056a2:	f7ff ff83 	bl	80055ac <LL_ADC_IsEnabled>
 80056a6:	4604      	mov	r4, r0
 80056a8:	4823      	ldr	r0, [pc, #140]	; (8005738 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80056aa:	f7ff ff7f 	bl	80055ac <LL_ADC_IsEnabled>
 80056ae:	4603      	mov	r3, r0
 80056b0:	4323      	orrs	r3, r4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d132      	bne.n	800571c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80056b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80056be:	f023 030f 	bic.w	r3, r3, #15
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	6811      	ldr	r1, [r2, #0]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	6892      	ldr	r2, [r2, #8]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	431a      	orrs	r2, r3
 80056ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056d2:	e023      	b.n	800571c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80056d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056e0:	4814      	ldr	r0, [pc, #80]	; (8005734 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80056e2:	f7ff ff63 	bl	80055ac <LL_ADC_IsEnabled>
 80056e6:	4604      	mov	r4, r0
 80056e8:	4813      	ldr	r0, [pc, #76]	; (8005738 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80056ea:	f7ff ff5f 	bl	80055ac <LL_ADC_IsEnabled>
 80056ee:	4603      	mov	r3, r0
 80056f0:	4323      	orrs	r3, r4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d112      	bne.n	800571c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80056f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80056fe:	f023 030f 	bic.w	r3, r3, #15
 8005702:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005704:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005706:	e009      	b.n	800571c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f043 0220 	orr.w	r2, r3, #32
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800571a:	e000      	b.n	800571e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800571c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005726:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800572a:	4618      	mov	r0, r3
 800572c:	3784      	adds	r7, #132	; 0x84
 800572e:	46bd      	mov	sp, r7
 8005730:	bd90      	pop	{r4, r7, pc}
 8005732:	bf00      	nop
 8005734:	50040000 	.word	0x50040000
 8005738:	50040100 	.word	0x50040100
 800573c:	50040300 	.word	0x50040300

08005740 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0ed      	b.n	800592e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d102      	bne.n	8005764 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fa feec 	bl	800053c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005774:	f7fe fffc 	bl	8004770 <HAL_GetTick>
 8005778:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800577a:	e012      	b.n	80057a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800577c:	f7fe fff8 	bl	8004770 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b0a      	cmp	r3, #10
 8005788:	d90b      	bls.n	80057a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2205      	movs	r2, #5
 800579a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e0c5      	b.n	800592e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0e5      	beq.n	800577c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0202 	bic.w	r2, r2, #2
 80057be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057c0:	f7fe ffd6 	bl	8004770 <HAL_GetTick>
 80057c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80057c6:	e012      	b.n	80057ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80057c8:	f7fe ffd2 	bl	8004770 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b0a      	cmp	r3, #10
 80057d4:	d90b      	bls.n	80057ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2205      	movs	r2, #5
 80057e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e09f      	b.n	800592e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e5      	bne.n	80057c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	7e1b      	ldrb	r3, [r3, #24]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d108      	bne.n	8005816 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	e007      	b.n	8005826 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005824:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7e5b      	ldrb	r3, [r3, #25]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d108      	bne.n	8005840 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e007      	b.n	8005850 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	7e9b      	ldrb	r3, [r3, #26]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d108      	bne.n	800586a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0220 	orr.w	r2, r2, #32
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e007      	b.n	800587a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0220 	bic.w	r2, r2, #32
 8005878:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	7edb      	ldrb	r3, [r3, #27]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d108      	bne.n	8005894 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0210 	bic.w	r2, r2, #16
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e007      	b.n	80058a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0210 	orr.w	r2, r2, #16
 80058a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7f1b      	ldrb	r3, [r3, #28]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d108      	bne.n	80058be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0208 	orr.w	r2, r2, #8
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e007      	b.n	80058ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0208 	bic.w	r2, r2, #8
 80058cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7f5b      	ldrb	r3, [r3, #29]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d108      	bne.n	80058e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0204 	orr.w	r2, r2, #4
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	e007      	b.n	80058f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0204 	bic.w	r2, r2, #4
 80058f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	ea42 0103 	orr.w	r1, r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	1e5a      	subs	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005936:	b480      	push	{r7}
 8005938:	b087      	sub	sp, #28
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800594c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800594e:	7cfb      	ldrb	r3, [r7, #19]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d003      	beq.n	800595c <HAL_CAN_ConfigFilter+0x26>
 8005954:	7cfb      	ldrb	r3, [r7, #19]
 8005956:	2b02      	cmp	r3, #2
 8005958:	f040 80aa 	bne.w	8005ab0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005962:	f043 0201 	orr.w	r2, r3, #1
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2201      	movs	r2, #1
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	43db      	mvns	r3, r3
 8005986:	401a      	ands	r2, r3
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d123      	bne.n	80059de <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	43db      	mvns	r3, r3
 80059a0:	401a      	ands	r2, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80059b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	3248      	adds	r2, #72	; 0x48
 80059be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80059d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80059d4:	6979      	ldr	r1, [r7, #20]
 80059d6:	3348      	adds	r3, #72	; 0x48
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	440b      	add	r3, r1
 80059dc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d122      	bne.n	8005a2c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005a06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	3248      	adds	r2, #72	; 0x48
 8005a0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a22:	6979      	ldr	r1, [r7, #20]
 8005a24:	3348      	adds	r3, #72	; 0x48
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	440b      	add	r3, r1
 8005a2a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	401a      	ands	r2, r3
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005a46:	e007      	b.n	8005a58 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	431a      	orrs	r2, r3
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d109      	bne.n	8005a74 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005a72:	e007      	b.n	8005a84 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	431a      	orrs	r2, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aa2:	f023 0201 	bic.w	r2, r3, #1
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	e006      	b.n	8005abe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
  }
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d12e      	bne.n	8005b3c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005af6:	f7fe fe3b 	bl	8004770 <HAL_GetTick>
 8005afa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005afc:	e012      	b.n	8005b24 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005afe:	f7fe fe37 	bl	8004770 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b0a      	cmp	r3, #10
 8005b0a:	d90b      	bls.n	8005b24 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e012      	b.n	8005b4a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e5      	bne.n	8005afe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e006      	b.n	8005b4a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
  }
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b089      	sub	sp, #36	; 0x24
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b66:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005b70:	7ffb      	ldrb	r3, [r7, #31]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d003      	beq.n	8005b7e <HAL_CAN_AddTxMessage+0x2c>
 8005b76:	7ffb      	ldrb	r3, [r7, #31]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	f040 80b8 	bne.w	8005cee <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d105      	bne.n	8005b9e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 80a0 	beq.w	8005cde <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	0e1b      	lsrs	r3, r3, #24
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d907      	bls.n	8005bbe <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e09e      	b.n	8005cfc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10d      	bne.n	8005bec <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	6809      	ldr	r1, [r1, #0]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	3318      	adds	r3, #24
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	440b      	add	r3, r1
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e00f      	b.n	8005c0c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bf6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bfc:	68f9      	ldr	r1, [r7, #12]
 8005bfe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005c00:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	3318      	adds	r3, #24
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	440b      	add	r3, r1
 8005c0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6819      	ldr	r1, [r3, #0]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3318      	adds	r3, #24
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	7d1b      	ldrb	r3, [r3, #20]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d111      	bne.n	8005c4c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	3318      	adds	r3, #24
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	4413      	add	r3, r2
 8005c34:	3304      	adds	r3, #4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	6811      	ldr	r1, [r2, #0]
 8005c3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	3318      	adds	r3, #24
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	440b      	add	r3, r1
 8005c48:	3304      	adds	r3, #4
 8005c4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3307      	adds	r3, #7
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	061a      	lsls	r2, r3, #24
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3306      	adds	r3, #6
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	041b      	lsls	r3, r3, #16
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3305      	adds	r3, #5
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	4313      	orrs	r3, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	3204      	adds	r2, #4
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	4610      	mov	r0, r2
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	6811      	ldr	r1, [r2, #0]
 8005c74:	ea43 0200 	orr.w	r2, r3, r0
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	440b      	add	r3, r1
 8005c7e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005c82:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3303      	adds	r3, #3
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	061a      	lsls	r2, r3, #24
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3302      	adds	r3, #2
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	7812      	ldrb	r2, [r2, #0]
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	6811      	ldr	r1, [r2, #0]
 8005caa:	ea43 0200 	orr.w	r2, r3, r0
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	440b      	add	r3, r1
 8005cb4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005cb8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	3318      	adds	r3, #24
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	4413      	add	r3, r2
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	6811      	ldr	r1, [r2, #0]
 8005ccc:	f043 0201 	orr.w	r2, r3, #1
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	3318      	adds	r3, #24
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	440b      	add	r3, r1
 8005cd8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e00e      	b.n	8005cfc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e006      	b.n	8005cfc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
  }
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3724      	adds	r7, #36	; 0x24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d1c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d003      	beq.n	8005d2c <HAL_CAN_GetRxMessage+0x24>
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	f040 80f3 	bne.w	8005f12 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10e      	bne.n	8005d50 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d116      	bne.n	8005d6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0e7      	b.n	8005f20 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d107      	bne.n	8005d6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e0d8      	b.n	8005f20 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	331b      	adds	r3, #27
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	4413      	add	r3, r2
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0204 	and.w	r2, r3, #4
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10c      	bne.n	8005da6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	331b      	adds	r3, #27
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	4413      	add	r3, r2
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	0d5b      	lsrs	r3, r3, #21
 8005d9c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e00b      	b.n	8005dbe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	331b      	adds	r3, #27
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	4413      	add	r3, r2
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	08db      	lsrs	r3, r3, #3
 8005db6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	331b      	adds	r3, #27
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	4413      	add	r3, r2
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0202 	and.w	r2, r3, #2
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	331b      	adds	r3, #27
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	4413      	add	r3, r2
 8005de0:	3304      	adds	r3, #4
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 020f 	and.w	r2, r3, #15
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	331b      	adds	r3, #27
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	4413      	add	r3, r2
 8005df8:	3304      	adds	r3, #4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	331b      	adds	r3, #27
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	4413      	add	r3, r2
 8005e10:	3304      	adds	r3, #4
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	0c1b      	lsrs	r3, r3, #16
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	0a1a      	lsrs	r2, r3, #8
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	3301      	adds	r3, #1
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	0c1a      	lsrs	r2, r3, #16
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	3302      	adds	r3, #2
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	0e1a      	lsrs	r2, r3, #24
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	3303      	adds	r3, #3
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	3304      	adds	r3, #4
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	0a1a      	lsrs	r2, r3, #8
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	3305      	adds	r3, #5
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	0c1a      	lsrs	r2, r3, #16
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	3306      	adds	r3, #6
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	0e1a      	lsrs	r2, r3, #24
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d108      	bne.n	8005efe <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0220 	orr.w	r2, r2, #32
 8005efa:	60da      	str	r2, [r3, #12]
 8005efc:	e007      	b.n	8005f0e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0220 	orr.w	r2, r2, #32
 8005f0c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e006      	b.n	8005f20 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
  }
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f3c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d002      	beq.n	8005f4a <HAL_CAN_ActivateNotification+0x1e>
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d109      	bne.n	8005f5e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6959      	ldr	r1, [r3, #20]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e006      	b.n	8005f6c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
  }
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005f80:	2300      	movs	r3, #0
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d07c      	beq.n	80060b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d023      	beq.n	8006010 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f983 	bl	80062e6 <HAL_CAN_TxMailbox0CompleteCallback>
 8005fe0:	e016      	b.n	8006010 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff4:	e00c      	b.n	8006010 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
 8006008:	e002      	b.n	8006010 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f989 	bl	8006322 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006016:	2b00      	cmp	r3, #0
 8006018:	d024      	beq.n	8006064 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006022:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f963 	bl	80062fa <HAL_CAN_TxMailbox1CompleteCallback>
 8006034:	e016      	b.n	8006064 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
 8006048:	e00c      	b.n	8006064 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
 800605c:	e002      	b.n	8006064 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f969 	bl	8006336 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d024      	beq.n	80060b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006076:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f943 	bl	800630e <HAL_CAN_TxMailbox2CompleteCallback>
 8006088:	e016      	b.n	80060b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
 800609c:	e00c      	b.n	80060b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
 80060b0:	e002      	b.n	80060b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f949 	bl	800634a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00c      	beq.n	80060dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d007      	beq.n	80060dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2210      	movs	r2, #16
 80060da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00b      	beq.n	80060fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d006      	beq.n	80060fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2208      	movs	r2, #8
 80060f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f930 	bl	800635e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fc f8ae 	bl	8002278 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00c      	beq.n	8006140 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	d007      	beq.n	8006140 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006136:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2210      	movs	r2, #16
 800613e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00b      	beq.n	8006162 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d006      	beq.n	8006162 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2208      	movs	r2, #8
 800615a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f912 	bl	8006386 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f8f9 	bl	8006372 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f003 0310 	and.w	r3, r3, #16
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2210      	movs	r2, #16
 800619a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8fc 	bl	800639a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d006      	beq.n	80061c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2208      	movs	r2, #8
 80061bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f8f5 	bl	80063ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d07b      	beq.n	80062c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d072      	beq.n	80062be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d008      	beq.n	80061f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	f043 0302 	orr.w	r3, r3, #2
 800620e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	f043 0304 	orr.w	r3, r3, #4
 800622a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006232:	2b00      	cmp	r3, #0
 8006234:	d043      	beq.n	80062be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800623c:	2b00      	cmp	r3, #0
 800623e:	d03e      	beq.n	80062be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006246:	2b60      	cmp	r3, #96	; 0x60
 8006248:	d02b      	beq.n	80062a2 <HAL_CAN_IRQHandler+0x32a>
 800624a:	2b60      	cmp	r3, #96	; 0x60
 800624c:	d82e      	bhi.n	80062ac <HAL_CAN_IRQHandler+0x334>
 800624e:	2b50      	cmp	r3, #80	; 0x50
 8006250:	d022      	beq.n	8006298 <HAL_CAN_IRQHandler+0x320>
 8006252:	2b50      	cmp	r3, #80	; 0x50
 8006254:	d82a      	bhi.n	80062ac <HAL_CAN_IRQHandler+0x334>
 8006256:	2b40      	cmp	r3, #64	; 0x40
 8006258:	d019      	beq.n	800628e <HAL_CAN_IRQHandler+0x316>
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d826      	bhi.n	80062ac <HAL_CAN_IRQHandler+0x334>
 800625e:	2b30      	cmp	r3, #48	; 0x30
 8006260:	d010      	beq.n	8006284 <HAL_CAN_IRQHandler+0x30c>
 8006262:	2b30      	cmp	r3, #48	; 0x30
 8006264:	d822      	bhi.n	80062ac <HAL_CAN_IRQHandler+0x334>
 8006266:	2b10      	cmp	r3, #16
 8006268:	d002      	beq.n	8006270 <HAL_CAN_IRQHandler+0x2f8>
 800626a:	2b20      	cmp	r3, #32
 800626c:	d005      	beq.n	800627a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800626e:	e01d      	b.n	80062ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	f043 0308 	orr.w	r3, r3, #8
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006278:	e019      	b.n	80062ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	f043 0310 	orr.w	r3, r3, #16
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006282:	e014      	b.n	80062ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	f043 0320 	orr.w	r3, r3, #32
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800628c:	e00f      	b.n	80062ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006296:	e00a      	b.n	80062ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062a0:	e005      	b.n	80062ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062aa:	e000      	b.n	80062ae <HAL_CAN_IRQHandler+0x336>
            break;
 80062ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2204      	movs	r2, #4
 80062c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f872 	bl	80063c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80062de:	bf00      	nop
 80062e0:	3728      	adds	r7, #40	; 0x28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
	...

080063d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <__NVIC_SetPriorityGrouping+0x44>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063f4:	4013      	ands	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800640a:	4a04      	ldr	r2, [pc, #16]	; (800641c <__NVIC_SetPriorityGrouping+0x44>)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	60d3      	str	r3, [r2, #12]
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	e000ed00 	.word	0xe000ed00

08006420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006424:	4b04      	ldr	r3, [pc, #16]	; (8006438 <__NVIC_GetPriorityGrouping+0x18>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	f003 0307 	and.w	r3, r3, #7
}
 800642e:	4618      	mov	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	e000ed00 	.word	0xe000ed00

0800643c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644a:	2b00      	cmp	r3, #0
 800644c:	db0b      	blt.n	8006466 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	f003 021f 	and.w	r2, r3, #31
 8006454:	4907      	ldr	r1, [pc, #28]	; (8006474 <__NVIC_EnableIRQ+0x38>)
 8006456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	2001      	movs	r0, #1
 800645e:	fa00 f202 	lsl.w	r2, r0, r2
 8006462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	e000e100 	.word	0xe000e100

08006478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	6039      	str	r1, [r7, #0]
 8006482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006488:	2b00      	cmp	r3, #0
 800648a:	db0a      	blt.n	80064a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	490c      	ldr	r1, [pc, #48]	; (80064c4 <__NVIC_SetPriority+0x4c>)
 8006492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006496:	0112      	lsls	r2, r2, #4
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	440b      	add	r3, r1
 800649c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064a0:	e00a      	b.n	80064b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	4908      	ldr	r1, [pc, #32]	; (80064c8 <__NVIC_SetPriority+0x50>)
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	3b04      	subs	r3, #4
 80064b0:	0112      	lsls	r2, r2, #4
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	440b      	add	r3, r1
 80064b6:	761a      	strb	r2, [r3, #24]
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	e000e100 	.word	0xe000e100
 80064c8:	e000ed00 	.word	0xe000ed00

080064cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b089      	sub	sp, #36	; 0x24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f1c3 0307 	rsb	r3, r3, #7
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	bf28      	it	cs
 80064ea:	2304      	movcs	r3, #4
 80064ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	3304      	adds	r3, #4
 80064f2:	2b06      	cmp	r3, #6
 80064f4:	d902      	bls.n	80064fc <NVIC_EncodePriority+0x30>
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	3b03      	subs	r3, #3
 80064fa:	e000      	b.n	80064fe <NVIC_EncodePriority+0x32>
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006500:	f04f 32ff 	mov.w	r2, #4294967295
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43da      	mvns	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	401a      	ands	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006514:	f04f 31ff 	mov.w	r1, #4294967295
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	fa01 f303 	lsl.w	r3, r1, r3
 800651e:	43d9      	mvns	r1, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006524:	4313      	orrs	r3, r2
         );
}
 8006526:	4618      	mov	r0, r3
 8006528:	3724      	adds	r7, #36	; 0x24
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3b01      	subs	r3, #1
 8006540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006544:	d301      	bcc.n	800654a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006546:	2301      	movs	r3, #1
 8006548:	e00f      	b.n	800656a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800654a:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <SysTick_Config+0x40>)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3b01      	subs	r3, #1
 8006550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006552:	210f      	movs	r1, #15
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	f7ff ff8e 	bl	8006478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <SysTick_Config+0x40>)
 800655e:	2200      	movs	r2, #0
 8006560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006562:	4b04      	ldr	r3, [pc, #16]	; (8006574 <SysTick_Config+0x40>)
 8006564:	2207      	movs	r2, #7
 8006566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	e000e010 	.word	0xe000e010

08006578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff ff29 	bl	80063d8 <__NVIC_SetPriorityGrouping>
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b086      	sub	sp, #24
 8006592:	af00      	add	r7, sp, #0
 8006594:	4603      	mov	r3, r0
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800659c:	2300      	movs	r3, #0
 800659e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80065a0:	f7ff ff3e 	bl	8006420 <__NVIC_GetPriorityGrouping>
 80065a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	6978      	ldr	r0, [r7, #20]
 80065ac:	f7ff ff8e 	bl	80064cc <NVIC_EncodePriority>
 80065b0:	4602      	mov	r2, r0
 80065b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff ff5d 	bl	8006478 <__NVIC_SetPriority>
}
 80065be:	bf00      	nop
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	4603      	mov	r3, r0
 80065ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff ff31 	bl	800643c <__NVIC_EnableIRQ>
}
 80065da:	bf00      	nop
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b082      	sub	sp, #8
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff ffa2 	bl	8006534 <SysTick_Config>
 80065f0:	4603      	mov	r3, r0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800660a:	e166      	b.n	80068da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	2101      	movs	r1, #1
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	fa01 f303 	lsl.w	r3, r1, r3
 8006618:	4013      	ands	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8158 	beq.w	80068d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d005      	beq.n	800663c <HAL_GPIO_Init+0x40>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d130      	bne.n	800669e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	2203      	movs	r2, #3
 8006648:	fa02 f303 	lsl.w	r3, r2, r3
 800664c:	43db      	mvns	r3, r3
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4013      	ands	r3, r2
 8006652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006672:	2201      	movs	r2, #1
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	43db      	mvns	r3, r3
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4013      	ands	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	091b      	lsrs	r3, r3, #4
 8006688:	f003 0201 	and.w	r2, r3, #1
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	fa02 f303 	lsl.w	r3, r2, r3
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d017      	beq.n	80066da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	2203      	movs	r2, #3
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	43db      	mvns	r3, r3
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4013      	ands	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d123      	bne.n	800672e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	08da      	lsrs	r2, r3, #3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3208      	adds	r2, #8
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	220f      	movs	r2, #15
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	43db      	mvns	r3, r3
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4013      	ands	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	08da      	lsrs	r2, r3, #3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3208      	adds	r2, #8
 8006728:	6939      	ldr	r1, [r7, #16]
 800672a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	2203      	movs	r2, #3
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4013      	ands	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f003 0203 	and.w	r2, r3, #3
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80b2 	beq.w	80068d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006770:	4b61      	ldr	r3, [pc, #388]	; (80068f8 <HAL_GPIO_Init+0x2fc>)
 8006772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006774:	4a60      	ldr	r2, [pc, #384]	; (80068f8 <HAL_GPIO_Init+0x2fc>)
 8006776:	f043 0301 	orr.w	r3, r3, #1
 800677a:	6613      	str	r3, [r2, #96]	; 0x60
 800677c:	4b5e      	ldr	r3, [pc, #376]	; (80068f8 <HAL_GPIO_Init+0x2fc>)
 800677e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006788:	4a5c      	ldr	r2, [pc, #368]	; (80068fc <HAL_GPIO_Init+0x300>)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	089b      	lsrs	r3, r3, #2
 800678e:	3302      	adds	r3, #2
 8006790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	220f      	movs	r2, #15
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	43db      	mvns	r3, r3
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4013      	ands	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80067b2:	d02b      	beq.n	800680c <HAL_GPIO_Init+0x210>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a52      	ldr	r2, [pc, #328]	; (8006900 <HAL_GPIO_Init+0x304>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d025      	beq.n	8006808 <HAL_GPIO_Init+0x20c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a51      	ldr	r2, [pc, #324]	; (8006904 <HAL_GPIO_Init+0x308>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d01f      	beq.n	8006804 <HAL_GPIO_Init+0x208>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a50      	ldr	r2, [pc, #320]	; (8006908 <HAL_GPIO_Init+0x30c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d019      	beq.n	8006800 <HAL_GPIO_Init+0x204>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a4f      	ldr	r2, [pc, #316]	; (800690c <HAL_GPIO_Init+0x310>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <HAL_GPIO_Init+0x200>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a4e      	ldr	r2, [pc, #312]	; (8006910 <HAL_GPIO_Init+0x314>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00d      	beq.n	80067f8 <HAL_GPIO_Init+0x1fc>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a4d      	ldr	r2, [pc, #308]	; (8006914 <HAL_GPIO_Init+0x318>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d007      	beq.n	80067f4 <HAL_GPIO_Init+0x1f8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a4c      	ldr	r2, [pc, #304]	; (8006918 <HAL_GPIO_Init+0x31c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d101      	bne.n	80067f0 <HAL_GPIO_Init+0x1f4>
 80067ec:	2307      	movs	r3, #7
 80067ee:	e00e      	b.n	800680e <HAL_GPIO_Init+0x212>
 80067f0:	2308      	movs	r3, #8
 80067f2:	e00c      	b.n	800680e <HAL_GPIO_Init+0x212>
 80067f4:	2306      	movs	r3, #6
 80067f6:	e00a      	b.n	800680e <HAL_GPIO_Init+0x212>
 80067f8:	2305      	movs	r3, #5
 80067fa:	e008      	b.n	800680e <HAL_GPIO_Init+0x212>
 80067fc:	2304      	movs	r3, #4
 80067fe:	e006      	b.n	800680e <HAL_GPIO_Init+0x212>
 8006800:	2303      	movs	r3, #3
 8006802:	e004      	b.n	800680e <HAL_GPIO_Init+0x212>
 8006804:	2302      	movs	r3, #2
 8006806:	e002      	b.n	800680e <HAL_GPIO_Init+0x212>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <HAL_GPIO_Init+0x212>
 800680c:	2300      	movs	r3, #0
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	f002 0203 	and.w	r2, r2, #3
 8006814:	0092      	lsls	r2, r2, #2
 8006816:	4093      	lsls	r3, r2
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800681e:	4937      	ldr	r1, [pc, #220]	; (80068fc <HAL_GPIO_Init+0x300>)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	3302      	adds	r3, #2
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800682c:	4b3b      	ldr	r3, [pc, #236]	; (800691c <HAL_GPIO_Init+0x320>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	43db      	mvns	r3, r3
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	4013      	ands	r3, r2
 800683a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006850:	4a32      	ldr	r2, [pc, #200]	; (800691c <HAL_GPIO_Init+0x320>)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006856:	4b31      	ldr	r3, [pc, #196]	; (800691c <HAL_GPIO_Init+0x320>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	43db      	mvns	r3, r3
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4013      	ands	r3, r2
 8006864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800687a:	4a28      	ldr	r2, [pc, #160]	; (800691c <HAL_GPIO_Init+0x320>)
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006880:	4b26      	ldr	r3, [pc, #152]	; (800691c <HAL_GPIO_Init+0x320>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	43db      	mvns	r3, r3
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4013      	ands	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068a4:	4a1d      	ldr	r2, [pc, #116]	; (800691c <HAL_GPIO_Init+0x320>)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80068aa:	4b1c      	ldr	r3, [pc, #112]	; (800691c <HAL_GPIO_Init+0x320>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	43db      	mvns	r3, r3
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4013      	ands	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068ce:	4a13      	ldr	r2, [pc, #76]	; (800691c <HAL_GPIO_Init+0x320>)
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	3301      	adds	r3, #1
 80068d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f47f ae91 	bne.w	800660c <HAL_GPIO_Init+0x10>
  }
}
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40021000 	.word	0x40021000
 80068fc:	40010000 	.word	0x40010000
 8006900:	48000400 	.word	0x48000400
 8006904:	48000800 	.word	0x48000800
 8006908:	48000c00 	.word	0x48000c00
 800690c:	48001000 	.word	0x48001000
 8006910:	48001400 	.word	0x48001400
 8006914:	48001800 	.word	0x48001800
 8006918:	48001c00 	.word	0x48001c00
 800691c:	40010400 	.word	0x40010400

08006920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	887b      	ldrh	r3, [r7, #2]
 8006932:	4013      	ands	r3, r2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006938:	2301      	movs	r3, #1
 800693a:	73fb      	strb	r3, [r7, #15]
 800693c:	e001      	b.n	8006942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800693e:	2300      	movs	r3, #0
 8006940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	807b      	strh	r3, [r7, #2]
 800695c:	4613      	mov	r3, r2
 800695e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006960:	787b      	ldrb	r3, [r7, #1]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006966:	887a      	ldrh	r2, [r7, #2]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800696c:	e002      	b.n	8006974 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800696e:	887a      	ldrh	r2, [r7, #2]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006984:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <HAL_PWREx_GetVoltageRange+0x3c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800698c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006990:	d102      	bne.n	8006998 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006996:	e00b      	b.n	80069b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006998:	4b08      	ldr	r3, [pc, #32]	; (80069bc <HAL_PWREx_GetVoltageRange+0x3c>)
 800699a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800699e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a6:	d102      	bne.n	80069ae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80069a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069ac:	e000      	b.n	80069b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80069ae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40007000 	.word	0x40007000

080069c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d141      	bne.n	8006a52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80069ce:	4b4b      	ldr	r3, [pc, #300]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069da:	d131      	bne.n	8006a40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069dc:	4b47      	ldr	r3, [pc, #284]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e2:	4a46      	ldr	r2, [pc, #280]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069ec:	4b43      	ldr	r3, [pc, #268]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069f4:	4a41      	ldr	r2, [pc, #260]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80069fc:	4b40      	ldr	r3, [pc, #256]	; (8006b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2232      	movs	r2, #50	; 0x32
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	4a3f      	ldr	r2, [pc, #252]	; (8006b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	0c9b      	lsrs	r3, r3, #18
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a12:	e002      	b.n	8006a1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a1a:	4b38      	ldr	r3, [pc, #224]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a26:	d102      	bne.n	8006a2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f2      	bne.n	8006a14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a2e:	4b33      	ldr	r3, [pc, #204]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3a:	d158      	bne.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e057      	b.n	8006af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a40:	4b2e      	ldr	r3, [pc, #184]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a46:	4a2d      	ldr	r2, [pc, #180]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006a50:	e04d      	b.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a58:	d141      	bne.n	8006ade <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a5a:	4b28      	ldr	r3, [pc, #160]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a66:	d131      	bne.n	8006acc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a68:	4b24      	ldr	r3, [pc, #144]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a6e:	4a23      	ldr	r2, [pc, #140]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a78:	4b20      	ldr	r3, [pc, #128]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a80:	4a1e      	ldr	r2, [pc, #120]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006a88:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2232      	movs	r2, #50	; 0x32
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	0c9b      	lsrs	r3, r3, #18
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a9e:	e002      	b.n	8006aa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006aa6:	4b15      	ldr	r3, [pc, #84]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab2:	d102      	bne.n	8006aba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f2      	bne.n	8006aa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006aba:	4b10      	ldr	r3, [pc, #64]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac6:	d112      	bne.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e011      	b.n	8006af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad2:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006adc:	e007      	b.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ade:	4b07      	ldr	r3, [pc, #28]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ae6:	4a05      	ldr	r2, [pc, #20]	; (8006afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006aec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	40007000 	.word	0x40007000
 8006b00:	20000210 	.word	0x20000210
 8006b04:	431bde83 	.word	0x431bde83

08006b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08a      	sub	sp, #40	; 0x28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f000 bc76 	b.w	8007408 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b1c:	4b97      	ldr	r3, [pc, #604]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 030c 	and.w	r3, r3, #12
 8006b24:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b26:	4b95      	ldr	r3, [pc, #596]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80e6 	beq.w	8006d0a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d007      	beq.n	8006b54 <HAL_RCC_OscConfig+0x4c>
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	2b0c      	cmp	r3, #12
 8006b48:	f040 808d 	bne.w	8006c66 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	f040 8089 	bne.w	8006c66 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b54:	4b89      	ldr	r3, [pc, #548]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d006      	beq.n	8006b6e <HAL_RCC_OscConfig+0x66>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f000 bc4d 	b.w	8007408 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b72:	4b82      	ldr	r3, [pc, #520]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <HAL_RCC_OscConfig+0x80>
 8006b7e:	4b7f      	ldr	r3, [pc, #508]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b86:	e005      	b.n	8006b94 <HAL_RCC_OscConfig+0x8c>
 8006b88:	4b7c      	ldr	r3, [pc, #496]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b8e:	091b      	lsrs	r3, r3, #4
 8006b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d224      	bcs.n	8006be2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 fdf3 	bl	8007788 <RCC_SetFlashLatencyFromMSIRange>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f000 bc2d 	b.w	8007408 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bae:	4b73      	ldr	r3, [pc, #460]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a72      	ldr	r2, [pc, #456]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006bb4:	f043 0308 	orr.w	r3, r3, #8
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	4b70      	ldr	r3, [pc, #448]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	496d      	ldr	r1, [pc, #436]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bcc:	4b6b      	ldr	r3, [pc, #428]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	021b      	lsls	r3, r3, #8
 8006bda:	4968      	ldr	r1, [pc, #416]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	604b      	str	r3, [r1, #4]
 8006be0:	e025      	b.n	8006c2e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006be2:	4b66      	ldr	r3, [pc, #408]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a65      	ldr	r2, [pc, #404]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006be8:	f043 0308 	orr.w	r3, r3, #8
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	4b63      	ldr	r3, [pc, #396]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	4960      	ldr	r1, [pc, #384]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c00:	4b5e      	ldr	r3, [pc, #376]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	495b      	ldr	r1, [pc, #364]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fdb2 	bl	8007788 <RCC_SetFlashLatencyFromMSIRange>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e3ec      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c2e:	f000 fd1f 	bl	8007670 <HAL_RCC_GetSysClockFreq>
 8006c32:	4602      	mov	r2, r0
 8006c34:	4b51      	ldr	r3, [pc, #324]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	4950      	ldr	r1, [pc, #320]	; (8006d80 <HAL_RCC_OscConfig+0x278>)
 8006c40:	5ccb      	ldrb	r3, [r1, r3]
 8006c42:	f003 031f 	and.w	r3, r3, #31
 8006c46:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4a:	4a4e      	ldr	r2, [pc, #312]	; (8006d84 <HAL_RCC_OscConfig+0x27c>)
 8006c4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c4e:	4b4e      	ldr	r3, [pc, #312]	; (8006d88 <HAL_RCC_OscConfig+0x280>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fd fd3c 	bl	80046d0 <HAL_InitTick>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d052      	beq.n	8006d08 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	e3d0      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d032      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c6e:	4b43      	ldr	r3, [pc, #268]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a42      	ldr	r2, [pc, #264]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c7a:	f7fd fd79 	bl	8004770 <HAL_GetTick>
 8006c7e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c82:	f7fd fd75 	bl	8004770 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e3b9      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c94:	4b39      	ldr	r3, [pc, #228]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f0      	beq.n	8006c82 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ca0:	4b36      	ldr	r3, [pc, #216]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a35      	ldr	r2, [pc, #212]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006ca6:	f043 0308 	orr.w	r3, r3, #8
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	4b33      	ldr	r3, [pc, #204]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	4930      	ldr	r1, [pc, #192]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	021b      	lsls	r3, r3, #8
 8006ccc:	492b      	ldr	r1, [pc, #172]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	604b      	str	r3, [r1, #4]
 8006cd2:	e01a      	b.n	8006d0a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006cd4:	4b29      	ldr	r3, [pc, #164]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a28      	ldr	r2, [pc, #160]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ce0:	f7fd fd46 	bl	8004770 <HAL_GetTick>
 8006ce4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ce8:	f7fd fd42 	bl	8004770 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e386      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006cfa:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f0      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x1e0>
 8006d06:	e000      	b.n	8006d0a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d073      	beq.n	8006dfe <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d005      	beq.n	8006d28 <HAL_RCC_OscConfig+0x220>
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	2b0c      	cmp	r3, #12
 8006d20:	d10e      	bne.n	8006d40 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d10b      	bne.n	8006d40 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d28:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d063      	beq.n	8006dfc <HAL_RCC_OscConfig+0x2f4>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d15f      	bne.n	8006dfc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e363      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d48:	d106      	bne.n	8006d58 <HAL_RCC_OscConfig+0x250>
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a0b      	ldr	r2, [pc, #44]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	e025      	b.n	8006da4 <HAL_RCC_OscConfig+0x29c>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d60:	d114      	bne.n	8006d8c <HAL_RCC_OscConfig+0x284>
 8006d62:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a05      	ldr	r2, [pc, #20]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	4b03      	ldr	r3, [pc, #12]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a02      	ldr	r2, [pc, #8]	; (8006d7c <HAL_RCC_OscConfig+0x274>)
 8006d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e013      	b.n	8006da4 <HAL_RCC_OscConfig+0x29c>
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	08009930 	.word	0x08009930
 8006d84:	20000210 	.word	0x20000210
 8006d88:	20000214 	.word	0x20000214
 8006d8c:	4b8f      	ldr	r3, [pc, #572]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a8e      	ldr	r2, [pc, #568]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	4b8c      	ldr	r3, [pc, #560]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a8b      	ldr	r2, [pc, #556]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d013      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dac:	f7fd fce0 	bl	8004770 <HAL_GetTick>
 8006db0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006db4:	f7fd fcdc 	bl	8004770 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b64      	cmp	r3, #100	; 0x64
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e320      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dc6:	4b81      	ldr	r3, [pc, #516]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f0      	beq.n	8006db4 <HAL_RCC_OscConfig+0x2ac>
 8006dd2:	e014      	b.n	8006dfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fd fccc 	bl	8004770 <HAL_GetTick>
 8006dd8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ddc:	f7fd fcc8 	bl	8004770 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b64      	cmp	r3, #100	; 0x64
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e30c      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dee:	4b77      	ldr	r3, [pc, #476]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1f0      	bne.n	8006ddc <HAL_RCC_OscConfig+0x2d4>
 8006dfa:	e000      	b.n	8006dfe <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d060      	beq.n	8006ecc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d005      	beq.n	8006e1c <HAL_RCC_OscConfig+0x314>
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	2b0c      	cmp	r3, #12
 8006e14:	d119      	bne.n	8006e4a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d116      	bne.n	8006e4a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e1c:	4b6b      	ldr	r3, [pc, #428]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCC_OscConfig+0x32c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e2e9      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e34:	4b65      	ldr	r3, [pc, #404]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	061b      	lsls	r3, r3, #24
 8006e42:	4962      	ldr	r1, [pc, #392]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e48:	e040      	b.n	8006ecc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d023      	beq.n	8006e9a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e52:	4b5e      	ldr	r3, [pc, #376]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a5d      	ldr	r2, [pc, #372]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5e:	f7fd fc87 	bl	8004770 <HAL_GetTick>
 8006e62:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e66:	f7fd fc83 	bl	8004770 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e2c7      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e78:	4b54      	ldr	r3, [pc, #336]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e84:	4b51      	ldr	r3, [pc, #324]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	061b      	lsls	r3, r3, #24
 8006e92:	494e      	ldr	r1, [pc, #312]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	604b      	str	r3, [r1, #4]
 8006e98:	e018      	b.n	8006ecc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e9a:	4b4c      	ldr	r3, [pc, #304]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a4b      	ldr	r2, [pc, #300]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea6:	f7fd fc63 	bl	8004770 <HAL_GetTick>
 8006eaa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006eac:	e008      	b.n	8006ec0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eae:	f7fd fc5f 	bl	8004770 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e2a3      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ec0:	4b42      	ldr	r3, [pc, #264]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1f0      	bne.n	8006eae <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8082 	beq.w	8006fde <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d05f      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8006ee2:	4b3a      	ldr	r3, [pc, #232]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d037      	beq.n	8006f68 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d006      	beq.n	8006f10 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e27b      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d01b      	beq.n	8006f52 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8006f1a:	4b2c      	ldr	r3, [pc, #176]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f20:	4a2a      	ldr	r2, [pc, #168]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f2a:	f7fd fc21 	bl	8004770 <HAL_GetTick>
 8006f2e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f32:	f7fd fc1d 	bl	8004770 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b11      	cmp	r3, #17
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e261      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f44:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1ef      	bne.n	8006f32 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8006f52:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f58:	f023 0210 	bic.w	r2, r3, #16
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	491a      	ldr	r1, [pc, #104]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f68:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006f70:	f043 0301 	orr.w	r3, r3, #1
 8006f74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f78:	f7fd fbfa 	bl	8004770 <HAL_GetTick>
 8006f7c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f80:	f7fd fbf6 	bl	8004770 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b11      	cmp	r3, #17
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e23a      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f92:	4b0e      	ldr	r3, [pc, #56]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0ef      	beq.n	8006f80 <HAL_RCC_OscConfig+0x478>
 8006fa0:	e01d      	b.n	8006fde <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fa2:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fa8:	4a08      	ldr	r2, [pc, #32]	; (8006fcc <HAL_RCC_OscConfig+0x4c4>)
 8006faa:	f023 0301 	bic.w	r3, r3, #1
 8006fae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb2:	f7fd fbdd 	bl	8004770 <HAL_GetTick>
 8006fb6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fb8:	e00a      	b.n	8006fd0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fba:	f7fd fbd9 	bl	8004770 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b11      	cmp	r3, #17
 8006fc6:	d903      	bls.n	8006fd0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e21d      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
 8006fcc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fd0:	4b83      	ldr	r3, [pc, #524]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8006fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1ed      	bne.n	8006fba <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0304 	and.w	r3, r3, #4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 80bd 	beq.w	8007166 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fec:	2300      	movs	r3, #0
 8006fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006ff2:	4b7b      	ldr	r3, [pc, #492]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10e      	bne.n	800701c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ffe:	4b78      	ldr	r3, [pc, #480]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8007000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007002:	4a77      	ldr	r2, [pc, #476]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8007004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007008:	6593      	str	r3, [r2, #88]	; 0x58
 800700a:	4b75      	ldr	r3, [pc, #468]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 800700c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800701c:	4b71      	ldr	r3, [pc, #452]	; (80071e4 <HAL_RCC_OscConfig+0x6dc>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007024:	2b00      	cmp	r3, #0
 8007026:	d118      	bne.n	800705a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007028:	4b6e      	ldr	r3, [pc, #440]	; (80071e4 <HAL_RCC_OscConfig+0x6dc>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a6d      	ldr	r2, [pc, #436]	; (80071e4 <HAL_RCC_OscConfig+0x6dc>)
 800702e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007032:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007034:	f7fd fb9c 	bl	8004770 <HAL_GetTick>
 8007038:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800703c:	f7fd fb98 	bl	8004770 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e1dc      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800704e:	4b65      	ldr	r3, [pc, #404]	; (80071e4 <HAL_RCC_OscConfig+0x6dc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f0      	beq.n	800703c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d02c      	beq.n	80070c0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8007066:	4b5e      	ldr	r3, [pc, #376]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8007068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007078:	4959      	ldr	r1, [pc, #356]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 800707a:	4313      	orrs	r3, r2
 800707c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	d010      	beq.n	80070ae <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800708c:	4b54      	ldr	r3, [pc, #336]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 800708e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007092:	4a53      	ldr	r2, [pc, #332]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8007094:	f043 0304 	orr.w	r3, r3, #4
 8007098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800709c:	4b50      	ldr	r3, [pc, #320]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 800709e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a2:	4a4f      	ldr	r2, [pc, #316]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 80070a4:	f043 0301 	orr.w	r3, r3, #1
 80070a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070ac:	e018      	b.n	80070e0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80070ae:	4b4c      	ldr	r3, [pc, #304]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 80070b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b4:	4a4a      	ldr	r2, [pc, #296]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 80070b6:	f043 0301 	orr.w	r3, r3, #1
 80070ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070be:	e00f      	b.n	80070e0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80070c0:	4b47      	ldr	r3, [pc, #284]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c6:	4a46      	ldr	r2, [pc, #280]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80070d0:	4b43      	ldr	r3, [pc, #268]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d6:	4a42      	ldr	r2, [pc, #264]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 80070d8:	f023 0304 	bic.w	r3, r3, #4
 80070dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d016      	beq.n	8007116 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e8:	f7fd fb42 	bl	8004770 <HAL_GetTick>
 80070ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070ee:	e00a      	b.n	8007106 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f0:	f7fd fb3e 	bl	8004770 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e180      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007106:	4b36      	ldr	r3, [pc, #216]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8007108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0ed      	beq.n	80070f0 <HAL_RCC_OscConfig+0x5e8>
 8007114:	e01d      	b.n	8007152 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007116:	f7fd fb2b 	bl	8004770 <HAL_GetTick>
 800711a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800711c:	e00a      	b.n	8007134 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800711e:	f7fd fb27 	bl	8004770 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	f241 3288 	movw	r2, #5000	; 0x1388
 800712c:	4293      	cmp	r3, r2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e169      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007134:	4b2a      	ldr	r3, [pc, #168]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8007136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1ed      	bne.n	800711e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8007142:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	4a25      	ldr	r2, [pc, #148]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 800714a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800714e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007156:	2b01      	cmp	r3, #1
 8007158:	d105      	bne.n	8007166 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800715a:	4b21      	ldr	r3, [pc, #132]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 800715c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715e:	4a20      	ldr	r2, [pc, #128]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8007160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007164:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d041      	beq.n	80071f6 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01c      	beq.n	80071b4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800717a:	4b19      	ldr	r3, [pc, #100]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 800717c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007180:	4a17      	ldr	r2, [pc, #92]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 8007182:	f043 0301 	orr.w	r3, r3, #1
 8007186:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800718a:	f7fd faf1 	bl	8004770 <HAL_GetTick>
 800718e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007192:	f7fd faed 	bl	8004770 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e131      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071a4:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 80071a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0ef      	beq.n	8007192 <HAL_RCC_OscConfig+0x68a>
 80071b2:	e020      	b.n	80071f6 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071b4:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 80071b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ba:	4a09      	ldr	r2, [pc, #36]	; (80071e0 <HAL_RCC_OscConfig+0x6d8>)
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c4:	f7fd fad4 	bl	8004770 <HAL_GetTick>
 80071c8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071ca:	e00d      	b.n	80071e8 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071cc:	f7fd fad0 	bl	8004770 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d906      	bls.n	80071e8 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e114      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
 80071de:	bf00      	nop
 80071e0:	40021000 	.word	0x40021000
 80071e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071e8:	4b89      	ldr	r3, [pc, #548]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80071ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1ea      	bne.n	80071cc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 8103 	beq.w	8007406 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	2b02      	cmp	r3, #2
 8007206:	f040 80cb 	bne.w	80073a0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800720a:	4b81      	ldr	r3, [pc, #516]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f003 0203 	and.w	r2, r3, #3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	429a      	cmp	r2, r3
 800721c:	d12c      	bne.n	8007278 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007228:	3b01      	subs	r3, #1
 800722a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800722c:	429a      	cmp	r2, r3
 800722e:	d123      	bne.n	8007278 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800723c:	429a      	cmp	r2, r3
 800723e:	d11b      	bne.n	8007278 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800724c:	429a      	cmp	r2, r3
 800724e:	d113      	bne.n	8007278 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	3b01      	subs	r3, #1
 800725e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007260:	429a      	cmp	r2, r3
 8007262:	d109      	bne.n	8007278 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	085b      	lsrs	r3, r3, #1
 8007270:	3b01      	subs	r3, #1
 8007272:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007274:	429a      	cmp	r2, r3
 8007276:	d06d      	beq.n	8007354 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	2b0c      	cmp	r3, #12
 800727c:	d068      	beq.n	8007350 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800727e:	4b64      	ldr	r3, [pc, #400]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d105      	bne.n	8007296 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800728a:	4b61      	ldr	r3, [pc, #388]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e0b6      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800729a:	4b5d      	ldr	r3, [pc, #372]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a5c      	ldr	r2, [pc, #368]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80072a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80072a6:	f7fd fa63 	bl	8004770 <HAL_GetTick>
 80072aa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ae:	f7fd fa5f 	bl	8004770 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e0a3      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072c0:	4b53      	ldr	r3, [pc, #332]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1f0      	bne.n	80072ae <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072cc:	4b50      	ldr	r3, [pc, #320]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	4b50      	ldr	r3, [pc, #320]	; (8007414 <HAL_RCC_OscConfig+0x90c>)
 80072d2:	4013      	ands	r3, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072dc:	3a01      	subs	r2, #1
 80072de:	0112      	lsls	r2, r2, #4
 80072e0:	4311      	orrs	r1, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072e6:	0212      	lsls	r2, r2, #8
 80072e8:	4311      	orrs	r1, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80072ee:	0852      	lsrs	r2, r2, #1
 80072f0:	3a01      	subs	r2, #1
 80072f2:	0552      	lsls	r2, r2, #21
 80072f4:	4311      	orrs	r1, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80072fa:	0852      	lsrs	r2, r2, #1
 80072fc:	3a01      	subs	r2, #1
 80072fe:	0652      	lsls	r2, r2, #25
 8007300:	4311      	orrs	r1, r2
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007306:	06d2      	lsls	r2, r2, #27
 8007308:	430a      	orrs	r2, r1
 800730a:	4941      	ldr	r1, [pc, #260]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 800730c:	4313      	orrs	r3, r2
 800730e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007310:	4b3f      	ldr	r3, [pc, #252]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a3e      	ldr	r2, [pc, #248]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 8007316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800731a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800731c:	4b3c      	ldr	r3, [pc, #240]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4a3b      	ldr	r2, [pc, #236]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 8007322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007326:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007328:	f7fd fa22 	bl	8004770 <HAL_GetTick>
 800732c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800732e:	e008      	b.n	8007342 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007330:	f7fd fa1e 	bl	8004770 <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e062      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007342:	4b33      	ldr	r3, [pc, #204]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0f0      	beq.n	8007330 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800734e:	e05a      	b.n	8007406 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e059      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007354:	4b2e      	ldr	r3, [pc, #184]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d152      	bne.n	8007406 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007360:	4b2b      	ldr	r3, [pc, #172]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a2a      	ldr	r2, [pc, #168]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 8007366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800736a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800736c:	4b28      	ldr	r3, [pc, #160]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	4a27      	ldr	r2, [pc, #156]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 8007372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007376:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007378:	f7fd f9fa 	bl	8004770 <HAL_GetTick>
 800737c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007380:	f7fd f9f6 	bl	8004770 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e03a      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007392:	4b1f      	ldr	r3, [pc, #124]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <HAL_RCC_OscConfig+0x878>
 800739e:	e032      	b.n	8007406 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	2b0c      	cmp	r3, #12
 80073a4:	d02d      	beq.n	8007402 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a6:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a19      	ldr	r2, [pc, #100]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80073ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80073b2:	4b17      	ldr	r3, [pc, #92]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d105      	bne.n	80073ca <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80073be:	4b14      	ldr	r3, [pc, #80]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	4a13      	ldr	r2, [pc, #76]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80073c4:	f023 0303 	bic.w	r3, r3, #3
 80073c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80073ca:	4b11      	ldr	r3, [pc, #68]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	4a10      	ldr	r2, [pc, #64]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80073d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80073d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073da:	f7fd f9c9 	bl	8004770 <HAL_GetTick>
 80073de:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e2:	f7fd f9c5 	bl	8004770 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e009      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073f4:	4b06      	ldr	r3, [pc, #24]	; (8007410 <HAL_RCC_OscConfig+0x908>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f0      	bne.n	80073e2 <HAL_RCC_OscConfig+0x8da>
 8007400:	e001      	b.n	8007406 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3728      	adds	r7, #40	; 0x28
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	40021000 	.word	0x40021000
 8007414:	019d800c 	.word	0x019d800c

08007418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007422:	2300      	movs	r3, #0
 8007424:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e10f      	b.n	8007650 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007430:	4b89      	ldr	r3, [pc, #548]	; (8007658 <HAL_RCC_ClockConfig+0x240>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d910      	bls.n	8007460 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743e:	4b86      	ldr	r3, [pc, #536]	; (8007658 <HAL_RCC_ClockConfig+0x240>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f023 020f 	bic.w	r2, r3, #15
 8007446:	4984      	ldr	r1, [pc, #528]	; (8007658 <HAL_RCC_ClockConfig+0x240>)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	4313      	orrs	r3, r2
 800744c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800744e:	4b82      	ldr	r3, [pc, #520]	; (8007658 <HAL_RCC_ClockConfig+0x240>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d001      	beq.n	8007460 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e0f7      	b.n	8007650 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8089 	beq.w	8007580 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	2b03      	cmp	r3, #3
 8007474:	d133      	bne.n	80074de <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007476:	4b79      	ldr	r3, [pc, #484]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e0e4      	b.n	8007650 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007486:	f000 f9d9 	bl	800783c <RCC_GetSysClockFreqFromPLLSource>
 800748a:	4603      	mov	r3, r0
 800748c:	4a74      	ldr	r2, [pc, #464]	; (8007660 <HAL_RCC_ClockConfig+0x248>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d955      	bls.n	800753e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007492:	4b72      	ldr	r3, [pc, #456]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800749e:	4b6f      	ldr	r3, [pc, #444]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074a6:	4a6d      	ldr	r2, [pc, #436]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 80074a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80074ae:	2380      	movs	r3, #128	; 0x80
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	e044      	b.n	800753e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d03e      	beq.n	800753e <HAL_RCC_ClockConfig+0x126>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d13a      	bne.n	800753e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074c8:	4b64      	ldr	r3, [pc, #400]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074d0:	4a62      	ldr	r2, [pc, #392]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 80074d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80074d8:	2380      	movs	r3, #128	; 0x80
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	e02f      	b.n	800753e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d107      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074e6:	4b5d      	ldr	r3, [pc, #372]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d115      	bne.n	800751e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e0ac      	b.n	8007650 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d107      	bne.n	800750e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80074fe:	4b57      	ldr	r3, [pc, #348]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d109      	bne.n	800751e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e0a0      	b.n	8007650 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800750e:	4b53      	ldr	r3, [pc, #332]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e098      	b.n	8007650 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800751e:	f000 f8a7 	bl	8007670 <HAL_RCC_GetSysClockFreq>
 8007522:	4603      	mov	r3, r0
 8007524:	4a4e      	ldr	r2, [pc, #312]	; (8007660 <HAL_RCC_ClockConfig+0x248>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d909      	bls.n	800753e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800752a:	4b4c      	ldr	r3, [pc, #304]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007532:	4a4a      	ldr	r2, [pc, #296]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800753a:	2380      	movs	r3, #128	; 0x80
 800753c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800753e:	4b47      	ldr	r3, [pc, #284]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f023 0203 	bic.w	r2, r3, #3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4944      	ldr	r1, [pc, #272]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 800754c:	4313      	orrs	r3, r2
 800754e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007550:	f7fd f90e 	bl	8004770 <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007556:	e00a      	b.n	800756e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007558:	f7fd f90a 	bl	8004770 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f241 3288 	movw	r2, #5000	; 0x1388
 8007566:	4293      	cmp	r3, r2
 8007568:	d901      	bls.n	800756e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e070      	b.n	8007650 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800756e:	4b3b      	ldr	r3, [pc, #236]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 020c 	and.w	r2, r3, #12
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	429a      	cmp	r2, r3
 800757e:	d1eb      	bne.n	8007558 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d009      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800758c:	4b33      	ldr	r3, [pc, #204]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	4930      	ldr	r1, [pc, #192]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 800759a:	4313      	orrs	r3, r2
 800759c:	608b      	str	r3, [r1, #8]
 800759e:	e008      	b.n	80075b2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2b80      	cmp	r3, #128	; 0x80
 80075a4:	d105      	bne.n	80075b2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80075a6:	4b2d      	ldr	r3, [pc, #180]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	4a2c      	ldr	r2, [pc, #176]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 80075ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075b0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075b2:	4b29      	ldr	r3, [pc, #164]	; (8007658 <HAL_RCC_ClockConfig+0x240>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d210      	bcs.n	80075e2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c0:	4b25      	ldr	r3, [pc, #148]	; (8007658 <HAL_RCC_ClockConfig+0x240>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f023 020f 	bic.w	r2, r3, #15
 80075c8:	4923      	ldr	r1, [pc, #140]	; (8007658 <HAL_RCC_ClockConfig+0x240>)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075d0:	4b21      	ldr	r3, [pc, #132]	; (8007658 <HAL_RCC_ClockConfig+0x240>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 030f 	and.w	r3, r3, #15
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d001      	beq.n	80075e2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e036      	b.n	8007650 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075ee:	4b1b      	ldr	r3, [pc, #108]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	4918      	ldr	r1, [pc, #96]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b00      	cmp	r3, #0
 800760a:	d009      	beq.n	8007620 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800760c:	4b13      	ldr	r3, [pc, #76]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	4910      	ldr	r1, [pc, #64]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 800761c:	4313      	orrs	r3, r2
 800761e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007620:	f000 f826 	bl	8007670 <HAL_RCC_GetSysClockFreq>
 8007624:	4602      	mov	r2, r0
 8007626:	4b0d      	ldr	r3, [pc, #52]	; (800765c <HAL_RCC_ClockConfig+0x244>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	091b      	lsrs	r3, r3, #4
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	490c      	ldr	r1, [pc, #48]	; (8007664 <HAL_RCC_ClockConfig+0x24c>)
 8007632:	5ccb      	ldrb	r3, [r1, r3]
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
 800763c:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <HAL_RCC_ClockConfig+0x250>)
 800763e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007640:	4b0a      	ldr	r3, [pc, #40]	; (800766c <HAL_RCC_ClockConfig+0x254>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4618      	mov	r0, r3
 8007646:	f7fd f843 	bl	80046d0 <HAL_InitTick>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]

  return status;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40022000 	.word	0x40022000
 800765c:	40021000 	.word	0x40021000
 8007660:	04c4b400 	.word	0x04c4b400
 8007664:	08009930 	.word	0x08009930
 8007668:	20000210 	.word	0x20000210
 800766c:	20000214 	.word	0x20000214

08007670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007670:	b480      	push	{r7}
 8007672:	b089      	sub	sp, #36	; 0x24
 8007674:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	2300      	movs	r3, #0
 800767c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800767e:	4b3e      	ldr	r3, [pc, #248]	; (8007778 <HAL_RCC_GetSysClockFreq+0x108>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 030c 	and.w	r3, r3, #12
 8007686:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007688:	4b3b      	ldr	r3, [pc, #236]	; (8007778 <HAL_RCC_GetSysClockFreq+0x108>)
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f003 0303 	and.w	r3, r3, #3
 8007690:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d005      	beq.n	80076a4 <HAL_RCC_GetSysClockFreq+0x34>
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2b0c      	cmp	r3, #12
 800769c:	d121      	bne.n	80076e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d11e      	bne.n	80076e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80076a4:	4b34      	ldr	r3, [pc, #208]	; (8007778 <HAL_RCC_GetSysClockFreq+0x108>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0308 	and.w	r3, r3, #8
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d107      	bne.n	80076c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80076b0:	4b31      	ldr	r3, [pc, #196]	; (8007778 <HAL_RCC_GetSysClockFreq+0x108>)
 80076b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076b6:	0a1b      	lsrs	r3, r3, #8
 80076b8:	f003 030f 	and.w	r3, r3, #15
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	e005      	b.n	80076cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80076c0:	4b2d      	ldr	r3, [pc, #180]	; (8007778 <HAL_RCC_GetSysClockFreq+0x108>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	091b      	lsrs	r3, r3, #4
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80076cc:	4a2b      	ldr	r2, [pc, #172]	; (800777c <HAL_RCC_GetSysClockFreq+0x10c>)
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10d      	bne.n	80076f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80076e0:	e00a      	b.n	80076f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d102      	bne.n	80076ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80076e8:	4b25      	ldr	r3, [pc, #148]	; (8007780 <HAL_RCC_GetSysClockFreq+0x110>)
 80076ea:	61bb      	str	r3, [r7, #24]
 80076ec:	e004      	b.n	80076f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d101      	bne.n	80076f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076f4:	4b23      	ldr	r3, [pc, #140]	; (8007784 <HAL_RCC_GetSysClockFreq+0x114>)
 80076f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b0c      	cmp	r3, #12
 80076fc:	d134      	bne.n	8007768 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076fe:	4b1e      	ldr	r3, [pc, #120]	; (8007778 <HAL_RCC_GetSysClockFreq+0x108>)
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d003      	beq.n	8007716 <HAL_RCC_GetSysClockFreq+0xa6>
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b03      	cmp	r3, #3
 8007712:	d003      	beq.n	800771c <HAL_RCC_GetSysClockFreq+0xac>
 8007714:	e005      	b.n	8007722 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007716:	4b1a      	ldr	r3, [pc, #104]	; (8007780 <HAL_RCC_GetSysClockFreq+0x110>)
 8007718:	617b      	str	r3, [r7, #20]
      break;
 800771a:	e005      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800771c:	4b19      	ldr	r3, [pc, #100]	; (8007784 <HAL_RCC_GetSysClockFreq+0x114>)
 800771e:	617b      	str	r3, [r7, #20]
      break;
 8007720:	e002      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	617b      	str	r3, [r7, #20]
      break;
 8007726:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007728:	4b13      	ldr	r3, [pc, #76]	; (8007778 <HAL_RCC_GetSysClockFreq+0x108>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	3301      	adds	r3, #1
 8007734:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <HAL_RCC_GetSysClockFreq+0x108>)
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	fb03 f202 	mul.w	r2, r3, r2
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	fbb2 f3f3 	udiv	r3, r2, r3
 800774c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800774e:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <HAL_RCC_GetSysClockFreq+0x108>)
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	0e5b      	lsrs	r3, r3, #25
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	3301      	adds	r3, #1
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	fbb2 f3f3 	udiv	r3, r2, r3
 8007766:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007768:	69bb      	ldr	r3, [r7, #24]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3724      	adds	r7, #36	; 0x24
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40021000 	.word	0x40021000
 800777c:	08009940 	.word	0x08009940
 8007780:	00f42400 	.word	0x00f42400
 8007784:	007a1200 	.word	0x007a1200

08007788 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007790:	2300      	movs	r3, #0
 8007792:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007794:	4b27      	ldr	r3, [pc, #156]	; (8007834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80077a0:	f7ff f8ee 	bl	8006980 <HAL_PWREx_GetVoltageRange>
 80077a4:	6178      	str	r0, [r7, #20]
 80077a6:	e014      	b.n	80077d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80077a8:	4b22      	ldr	r3, [pc, #136]	; (8007834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ac:	4a21      	ldr	r2, [pc, #132]	; (8007834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b2:	6593      	str	r3, [r2, #88]	; 0x58
 80077b4:	4b1f      	ldr	r3, [pc, #124]	; (8007834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80077c0:	f7ff f8de 	bl	8006980 <HAL_PWREx_GetVoltageRange>
 80077c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80077c6:	4b1b      	ldr	r3, [pc, #108]	; (8007834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ca:	4a1a      	ldr	r2, [pc, #104]	; (8007834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d8:	d10b      	bne.n	80077f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b80      	cmp	r3, #128	; 0x80
 80077de:	d913      	bls.n	8007808 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2ba0      	cmp	r3, #160	; 0xa0
 80077e4:	d902      	bls.n	80077ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80077e6:	2302      	movs	r3, #2
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	e00d      	b.n	8007808 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077ec:	2301      	movs	r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	e00a      	b.n	8007808 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b7f      	cmp	r3, #127	; 0x7f
 80077f6:	d902      	bls.n	80077fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80077f8:	2302      	movs	r3, #2
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	e004      	b.n	8007808 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b70      	cmp	r3, #112	; 0x70
 8007802:	d101      	bne.n	8007808 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007804:	2301      	movs	r3, #1
 8007806:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007808:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f023 020f 	bic.w	r2, r3, #15
 8007810:	4909      	ldr	r1, [pc, #36]	; (8007838 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007818:	4b07      	ldr	r3, [pc, #28]	; (8007838 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	429a      	cmp	r2, r3
 8007824:	d001      	beq.n	800782a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	40021000 	.word	0x40021000
 8007838:	40022000 	.word	0x40022000

0800783c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8007846:	4b2d      	ldr	r3, [pc, #180]	; (80078fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	2b01      	cmp	r3, #1
 8007850:	d118      	bne.n	8007884 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007852:	4b2a      	ldr	r3, [pc, #168]	; (80078fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d107      	bne.n	800786e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800785e:	4b27      	ldr	r3, [pc, #156]	; (80078fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007864:	0a1b      	lsrs	r3, r3, #8
 8007866:	f003 030f 	and.w	r3, r3, #15
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e005      	b.n	800787a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800786e:	4b23      	ldr	r3, [pc, #140]	; (80078fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	091b      	lsrs	r3, r3, #4
 8007874:	f003 030f 	and.w	r3, r3, #15
 8007878:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800787a:	4a21      	ldr	r2, [pc, #132]	; (8007900 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007882:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007884:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d003      	beq.n	800789c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b03      	cmp	r3, #3
 8007898:	d003      	beq.n	80078a2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800789a:	e005      	b.n	80078a8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800789c:	4b19      	ldr	r3, [pc, #100]	; (8007904 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800789e:	613b      	str	r3, [r7, #16]
    break;
 80078a0:	e005      	b.n	80078ae <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80078a2:	4b19      	ldr	r3, [pc, #100]	; (8007908 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80078a4:	613b      	str	r3, [r7, #16]
    break;
 80078a6:	e002      	b.n	80078ae <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	613b      	str	r3, [r7, #16]
    break;
 80078ac:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078ae:	4b13      	ldr	r3, [pc, #76]	; (80078fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	091b      	lsrs	r3, r3, #4
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	3301      	adds	r3, #1
 80078ba:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80078bc:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	0a1b      	lsrs	r3, r3, #8
 80078c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	fb03 f202 	mul.w	r2, r3, r2
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078d4:	4b09      	ldr	r3, [pc, #36]	; (80078fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	0e5b      	lsrs	r3, r3, #25
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	3301      	adds	r3, #1
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ec:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80078ee:	683b      	ldr	r3, [r7, #0]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	40021000 	.word	0x40021000
 8007900:	08009940 	.word	0x08009940
 8007904:	00f42400 	.word	0x00f42400
 8007908:	007a1200 	.word	0x007a1200

0800790c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007914:	2300      	movs	r3, #0
 8007916:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007918:	2300      	movs	r3, #0
 800791a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007924:	2b00      	cmp	r3, #0
 8007926:	d040      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792c:	2b80      	cmp	r3, #128	; 0x80
 800792e:	d02a      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007930:	2b80      	cmp	r3, #128	; 0x80
 8007932:	d825      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007934:	2b60      	cmp	r3, #96	; 0x60
 8007936:	d026      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007938:	2b60      	cmp	r3, #96	; 0x60
 800793a:	d821      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800793c:	2b40      	cmp	r3, #64	; 0x40
 800793e:	d006      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d81d      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007944:	2b00      	cmp	r3, #0
 8007946:	d009      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007948:	2b20      	cmp	r3, #32
 800794a:	d010      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800794c:	e018      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800794e:	4b89      	ldr	r3, [pc, #548]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	4a88      	ldr	r2, [pc, #544]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007958:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800795a:	e015      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3304      	adds	r3, #4
 8007960:	2100      	movs	r1, #0
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fb3e 	bl	8007fe4 <RCCEx_PLLSAI1_Config>
 8007968:	4603      	mov	r3, r0
 800796a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800796c:	e00c      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3320      	adds	r3, #32
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f000 fc29 	bl	80081cc <RCCEx_PLLSAI2_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800797e:	e003      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	74fb      	strb	r3, [r7, #19]
      break;
 8007984:	e000      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007988:	7cfb      	ldrb	r3, [r7, #19]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10b      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800798e:	4b79      	ldr	r3, [pc, #484]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007990:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007994:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800799c:	4975      	ldr	r1, [pc, #468]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80079a4:	e001      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a6:	7cfb      	ldrb	r3, [r7, #19]
 80079a8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d047      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079be:	d030      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80079c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c4:	d82a      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80079c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ca:	d02a      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80079cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d0:	d824      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80079d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d6:	d008      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xde>
 80079d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079dc:	d81e      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80079e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e6:	d010      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80079e8:	e018      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80079ea:	4b62      	ldr	r3, [pc, #392]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	4a61      	ldr	r2, [pc, #388]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079f4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079f6:	e015      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3304      	adds	r3, #4
 80079fc:	2100      	movs	r1, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 faf0 	bl	8007fe4 <RCCEx_PLLSAI1_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a08:	e00c      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3320      	adds	r3, #32
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fbdb 	bl	80081cc <RCCEx_PLLSAI2_Config>
 8007a16:	4603      	mov	r3, r0
 8007a18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a1a:	e003      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	74fb      	strb	r3, [r7, #19]
      break;
 8007a20:	e000      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a24:	7cfb      	ldrb	r3, [r7, #19]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a2a:	4b52      	ldr	r3, [pc, #328]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a38:	494e      	ldr	r1, [pc, #312]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007a40:	e001      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a42:	7cfb      	ldrb	r3, [r7, #19]
 8007a44:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 809f 	beq.w	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a54:	2300      	movs	r3, #0
 8007a56:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a58:	4b46      	ldr	r3, [pc, #280]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00d      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a6e:	4b41      	ldr	r3, [pc, #260]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a72:	4a40      	ldr	r2, [pc, #256]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a78:	6593      	str	r3, [r2, #88]	; 0x58
 8007a7a:	4b3e      	ldr	r3, [pc, #248]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a82:	60bb      	str	r3, [r7, #8]
 8007a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a86:	2301      	movs	r3, #1
 8007a88:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a8a:	4b3b      	ldr	r3, [pc, #236]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a3a      	ldr	r2, [pc, #232]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a96:	f7fc fe6b 	bl	8004770 <HAL_GetTick>
 8007a9a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a9c:	e009      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a9e:	f7fc fe67 	bl	8004770 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d902      	bls.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	74fb      	strb	r3, [r7, #19]
        break;
 8007ab0:	e005      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ab2:	4b31      	ldr	r3, [pc, #196]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0ef      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007abe:	7cfb      	ldrb	r3, [r7, #19]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d15b      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ac4:	4b2b      	ldr	r3, [pc, #172]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ace:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d01f      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d019      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ae2:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007aee:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af4:	4a1f      	ldr	r2, [pc, #124]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007afe:	4b1d      	ldr	r3, [pc, #116]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b04:	4a1b      	ldr	r2, [pc, #108]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b0e:	4a19      	ldr	r2, [pc, #100]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d016      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b20:	f7fc fe26 	bl	8004770 <HAL_GetTick>
 8007b24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b26:	e00b      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b28:	f7fc fe22 	bl	8004770 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d902      	bls.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	74fb      	strb	r3, [r7, #19]
            break;
 8007b3e:	e006      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b40:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0ec      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007b4e:	7cfb      	ldrb	r3, [r7, #19]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10c      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b54:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b64:	4903      	ldr	r1, [pc, #12]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b6c:	e008      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b6e:	7cfb      	ldrb	r3, [r7, #19]
 8007b70:	74bb      	strb	r3, [r7, #18]
 8007b72:	e005      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007b74:	40021000 	.word	0x40021000
 8007b78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	7cfb      	ldrb	r3, [r7, #19]
 8007b7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b80:	7c7b      	ldrb	r3, [r7, #17]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d105      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b86:	4ba0      	ldr	r3, [pc, #640]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	4a9f      	ldr	r2, [pc, #636]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b9e:	4b9a      	ldr	r3, [pc, #616]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba4:	f023 0203 	bic.w	r2, r3, #3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bac:	4996      	ldr	r1, [pc, #600]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bc0:	4b91      	ldr	r3, [pc, #580]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	f023 020c 	bic.w	r2, r3, #12
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	498e      	ldr	r1, [pc, #568]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007be2:	4b89      	ldr	r3, [pc, #548]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf0:	4985      	ldr	r1, [pc, #532]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c04:	4b80      	ldr	r3, [pc, #512]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c12:	497d      	ldr	r1, [pc, #500]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0310 	and.w	r3, r3, #16
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c26:	4b78      	ldr	r3, [pc, #480]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c34:	4974      	ldr	r1, [pc, #464]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c48:	4b6f      	ldr	r3, [pc, #444]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c56:	496c      	ldr	r1, [pc, #432]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c6a:	4b67      	ldr	r3, [pc, #412]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c78:	4963      	ldr	r1, [pc, #396]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c8c:	4b5e      	ldr	r3, [pc, #376]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c9a:	495b      	ldr	r1, [pc, #364]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cae:	4b56      	ldr	r3, [pc, #344]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cbc:	4952      	ldr	r1, [pc, #328]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007cd0:	4b4d      	ldr	r3, [pc, #308]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cde:	494a      	ldr	r1, [pc, #296]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007cf2:	4b45      	ldr	r3, [pc, #276]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d00:	4941      	ldr	r1, [pc, #260]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d14:	4b3c      	ldr	r3, [pc, #240]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d1a:	f023 0203 	bic.w	r2, r3, #3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d22:	4939      	ldr	r1, [pc, #228]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d028      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d36:	4b34      	ldr	r3, [pc, #208]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d44:	4930      	ldr	r1, [pc, #192]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d54:	d106      	bne.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d56:	4b2c      	ldr	r3, [pc, #176]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	4a2b      	ldr	r2, [pc, #172]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d60:	60d3      	str	r3, [r2, #12]
 8007d62:	e011      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d6c:	d10c      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3304      	adds	r3, #4
 8007d72:	2101      	movs	r1, #1
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 f935 	bl	8007fe4 <RCCEx_PLLSAI1_Config>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007d7e:	7cfb      	ldrb	r3, [r7, #19]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007d84:	7cfb      	ldrb	r3, [r7, #19]
 8007d86:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d04d      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d9c:	d108      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007d9e:	4b1a      	ldr	r3, [pc, #104]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007da4:	4a18      	ldr	r2, [pc, #96]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007daa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007dae:	e012      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007db0:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007db6:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dbc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007dc0:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dce:	490e      	ldr	r1, [pc, #56]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dde:	d106      	bne.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007de0:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	4a08      	ldr	r2, [pc, #32]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dea:	60d3      	str	r3, [r2, #12]
 8007dec:	e020      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007df6:	d109      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007df8:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	4a02      	ldr	r2, [pc, #8]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e02:	60d3      	str	r3, [r2, #12]
 8007e04:	e014      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007e06:	bf00      	nop
 8007e08:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e14:	d10c      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 f8e1 	bl	8007fe4 <RCCEx_PLLSAI1_Config>
 8007e22:	4603      	mov	r3, r0
 8007e24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e26:	7cfb      	ldrb	r3, [r7, #19]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007e2c:	7cfb      	ldrb	r3, [r7, #19]
 8007e2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d028      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e3c:	4b68      	ldr	r3, [pc, #416]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e4a:	4965      	ldr	r1, [pc, #404]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e5a:	d106      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e5c:	4b60      	ldr	r3, [pc, #384]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	4a5f      	ldr	r2, [pc, #380]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e66:	60d3      	str	r3, [r2, #12]
 8007e68:	e011      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e72:	d10c      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3304      	adds	r3, #4
 8007e78:	2101      	movs	r1, #1
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 f8b2 	bl	8007fe4 <RCCEx_PLLSAI1_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e84:	7cfb      	ldrb	r3, [r7, #19]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007e8a:	7cfb      	ldrb	r3, [r7, #19]
 8007e8c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01e      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e9a:	4b51      	ldr	r3, [pc, #324]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eaa:	494d      	ldr	r1, [pc, #308]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ebc:	d10c      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	2102      	movs	r1, #2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 f88d 	bl	8007fe4 <RCCEx_PLLSAI1_Config>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ece:	7cfb      	ldrb	r3, [r7, #19]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007ed4:	7cfb      	ldrb	r3, [r7, #19]
 8007ed6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00b      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ee4:	4b3e      	ldr	r3, [pc, #248]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007eea:	f023 0204 	bic.w	r2, r3, #4
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef4:	493a      	ldr	r1, [pc, #232]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007f08:	4b35      	ldr	r3, [pc, #212]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f0e:	f023 0218 	bic.w	r2, r3, #24
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f18:	4931      	ldr	r1, [pc, #196]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d035      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007f2c:	4b2c      	ldr	r3, [pc, #176]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a2b      	ldr	r2, [pc, #172]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f38:	f7fc fc1a 	bl	8004770 <HAL_GetTick>
 8007f3c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f3e:	e009      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007f40:	f7fc fc16 	bl	8004770 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d902      	bls.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	74fb      	strb	r3, [r7, #19]
        break;
 8007f52:	e005      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f54:	4b22      	ldr	r3, [pc, #136]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1ef      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8007f60:	7cfb      	ldrb	r3, [r7, #19]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d113      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8007f66:	4b1e      	ldr	r3, [pc, #120]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f76:	491a      	ldr	r1, [pc, #104]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3320      	adds	r3, #32
 8007f82:	2102      	movs	r1, #2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 f921 	bl	80081cc <RCCEx_PLLSAI2_Config>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8007f8e:	7cfb      	ldrb	r3, [r7, #19]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8007f94:	7cfb      	ldrb	r3, [r7, #19]
 8007f96:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d017      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007faa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb4:	490a      	ldr	r1, [pc, #40]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fc6:	d105      	bne.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fc8:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	4a04      	ldr	r2, [pc, #16]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8007fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007fd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	40021000 	.word	0x40021000

08007fe4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007ff2:	4b72      	ldr	r3, [pc, #456]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00e      	beq.n	800801c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007ffe:	4b6f      	ldr	r3, [pc, #444]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f003 0203 	and.w	r2, r3, #3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d103      	bne.n	8008016 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
       ||
 8008012:	2b00      	cmp	r3, #0
 8008014:	d142      	bne.n	800809c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	73fb      	strb	r3, [r7, #15]
 800801a:	e03f      	b.n	800809c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b03      	cmp	r3, #3
 8008022:	d018      	beq.n	8008056 <RCCEx_PLLSAI1_Config+0x72>
 8008024:	2b03      	cmp	r3, #3
 8008026:	d825      	bhi.n	8008074 <RCCEx_PLLSAI1_Config+0x90>
 8008028:	2b01      	cmp	r3, #1
 800802a:	d002      	beq.n	8008032 <RCCEx_PLLSAI1_Config+0x4e>
 800802c:	2b02      	cmp	r3, #2
 800802e:	d009      	beq.n	8008044 <RCCEx_PLLSAI1_Config+0x60>
 8008030:	e020      	b.n	8008074 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008032:	4b62      	ldr	r3, [pc, #392]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d11d      	bne.n	800807a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008042:	e01a      	b.n	800807a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008044:	4b5d      	ldr	r3, [pc, #372]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800804c:	2b00      	cmp	r3, #0
 800804e:	d116      	bne.n	800807e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008054:	e013      	b.n	800807e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008056:	4b59      	ldr	r3, [pc, #356]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10f      	bne.n	8008082 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008062:	4b56      	ldr	r3, [pc, #344]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008072:	e006      	b.n	8008082 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
      break;
 8008078:	e004      	b.n	8008084 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800807a:	bf00      	nop
 800807c:	e002      	b.n	8008084 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800807e:	bf00      	nop
 8008080:	e000      	b.n	8008084 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008082:	bf00      	nop
    }

    if(status == HAL_OK)
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d108      	bne.n	800809c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800808a:	4b4c      	ldr	r3, [pc, #304]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f023 0203 	bic.w	r2, r3, #3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4949      	ldr	r1, [pc, #292]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008098:	4313      	orrs	r3, r2
 800809a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f040 8086 	bne.w	80081b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80080a4:	4b45      	ldr	r3, [pc, #276]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a44      	ldr	r2, [pc, #272]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80080aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b0:	f7fc fb5e 	bl	8004770 <HAL_GetTick>
 80080b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80080b6:	e009      	b.n	80080cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080b8:	f7fc fb5a 	bl	8004770 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d902      	bls.n	80080cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	73fb      	strb	r3, [r7, #15]
        break;
 80080ca:	e005      	b.n	80080d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80080cc:	4b3b      	ldr	r3, [pc, #236]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1ef      	bne.n	80080b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d168      	bne.n	80081b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d113      	bne.n	800810c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080e4:	4b35      	ldr	r3, [pc, #212]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80080e6:	691a      	ldr	r2, [r3, #16]
 80080e8:	4b35      	ldr	r3, [pc, #212]	; (80081c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080ea:	4013      	ands	r3, r2
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	6892      	ldr	r2, [r2, #8]
 80080f0:	0211      	lsls	r1, r2, #8
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	68d2      	ldr	r2, [r2, #12]
 80080f6:	06d2      	lsls	r2, r2, #27
 80080f8:	4311      	orrs	r1, r2
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	6852      	ldr	r2, [r2, #4]
 80080fe:	3a01      	subs	r2, #1
 8008100:	0112      	lsls	r2, r2, #4
 8008102:	430a      	orrs	r2, r1
 8008104:	492d      	ldr	r1, [pc, #180]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008106:	4313      	orrs	r3, r2
 8008108:	610b      	str	r3, [r1, #16]
 800810a:	e02d      	b.n	8008168 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d115      	bne.n	800813e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008112:	4b2a      	ldr	r3, [pc, #168]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	4b2b      	ldr	r3, [pc, #172]	; (80081c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008118:	4013      	ands	r3, r2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6892      	ldr	r2, [r2, #8]
 800811e:	0211      	lsls	r1, r2, #8
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6912      	ldr	r2, [r2, #16]
 8008124:	0852      	lsrs	r2, r2, #1
 8008126:	3a01      	subs	r2, #1
 8008128:	0552      	lsls	r2, r2, #21
 800812a:	4311      	orrs	r1, r2
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6852      	ldr	r2, [r2, #4]
 8008130:	3a01      	subs	r2, #1
 8008132:	0112      	lsls	r2, r2, #4
 8008134:	430a      	orrs	r2, r1
 8008136:	4921      	ldr	r1, [pc, #132]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008138:	4313      	orrs	r3, r2
 800813a:	610b      	str	r3, [r1, #16]
 800813c:	e014      	b.n	8008168 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800813e:	4b1f      	ldr	r3, [pc, #124]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008140:	691a      	ldr	r2, [r3, #16]
 8008142:	4b21      	ldr	r3, [pc, #132]	; (80081c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008144:	4013      	ands	r3, r2
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6892      	ldr	r2, [r2, #8]
 800814a:	0211      	lsls	r1, r2, #8
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6952      	ldr	r2, [r2, #20]
 8008150:	0852      	lsrs	r2, r2, #1
 8008152:	3a01      	subs	r2, #1
 8008154:	0652      	lsls	r2, r2, #25
 8008156:	4311      	orrs	r1, r2
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6852      	ldr	r2, [r2, #4]
 800815c:	3a01      	subs	r2, #1
 800815e:	0112      	lsls	r2, r2, #4
 8008160:	430a      	orrs	r2, r1
 8008162:	4916      	ldr	r1, [pc, #88]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008164:	4313      	orrs	r3, r2
 8008166:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008168:	4b14      	ldr	r3, [pc, #80]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a13      	ldr	r2, [pc, #76]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800816e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008172:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008174:	f7fc fafc 	bl	8004770 <HAL_GetTick>
 8008178:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800817a:	e009      	b.n	8008190 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800817c:	f7fc faf8 	bl	8004770 <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	2b02      	cmp	r3, #2
 8008188:	d902      	bls.n	8008190 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	73fb      	strb	r3, [r7, #15]
          break;
 800818e:	e005      	b.n	800819c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008190:	4b0a      	ldr	r3, [pc, #40]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d0ef      	beq.n	800817c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80081a2:	4b06      	ldr	r3, [pc, #24]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80081a4:	691a      	ldr	r2, [r3, #16]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	4904      	ldr	r1, [pc, #16]	; (80081bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	40021000 	.word	0x40021000
 80081c0:	07ff800f 	.word	0x07ff800f
 80081c4:	ff9f800f 	.word	0xff9f800f
 80081c8:	f9ff800f 	.word	0xf9ff800f

080081cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80081da:	4b72      	ldr	r3, [pc, #456]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f003 0303 	and.w	r3, r3, #3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00e      	beq.n	8008204 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80081e6:	4b6f      	ldr	r3, [pc, #444]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f003 0203 	and.w	r2, r3, #3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d103      	bne.n	80081fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
       ||
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d142      	bne.n	8008284 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	73fb      	strb	r3, [r7, #15]
 8008202:	e03f      	b.n	8008284 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d018      	beq.n	800823e <RCCEx_PLLSAI2_Config+0x72>
 800820c:	2b03      	cmp	r3, #3
 800820e:	d825      	bhi.n	800825c <RCCEx_PLLSAI2_Config+0x90>
 8008210:	2b01      	cmp	r3, #1
 8008212:	d002      	beq.n	800821a <RCCEx_PLLSAI2_Config+0x4e>
 8008214:	2b02      	cmp	r3, #2
 8008216:	d009      	beq.n	800822c <RCCEx_PLLSAI2_Config+0x60>
 8008218:	e020      	b.n	800825c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800821a:	4b62      	ldr	r3, [pc, #392]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0302 	and.w	r3, r3, #2
 8008222:	2b00      	cmp	r3, #0
 8008224:	d11d      	bne.n	8008262 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800822a:	e01a      	b.n	8008262 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800822c:	4b5d      	ldr	r3, [pc, #372]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008234:	2b00      	cmp	r3, #0
 8008236:	d116      	bne.n	8008266 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800823c:	e013      	b.n	8008266 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800823e:	4b59      	ldr	r3, [pc, #356]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10f      	bne.n	800826a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800824a:	4b56      	ldr	r3, [pc, #344]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800825a:	e006      	b.n	800826a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	73fb      	strb	r3, [r7, #15]
      break;
 8008260:	e004      	b.n	800826c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008262:	bf00      	nop
 8008264:	e002      	b.n	800826c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008266:	bf00      	nop
 8008268:	e000      	b.n	800826c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800826a:	bf00      	nop
    }

    if(status == HAL_OK)
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d108      	bne.n	8008284 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008272:	4b4c      	ldr	r3, [pc, #304]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	f023 0203 	bic.w	r2, r3, #3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4949      	ldr	r1, [pc, #292]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008280:	4313      	orrs	r3, r2
 8008282:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f040 8086 	bne.w	8008398 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800828c:	4b45      	ldr	r3, [pc, #276]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a44      	ldr	r2, [pc, #272]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008298:	f7fc fa6a 	bl	8004770 <HAL_GetTick>
 800829c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800829e:	e009      	b.n	80082b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80082a0:	f7fc fa66 	bl	8004770 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d902      	bls.n	80082b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	73fb      	strb	r3, [r7, #15]
        break;
 80082b2:	e005      	b.n	80082c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80082b4:	4b3b      	ldr	r3, [pc, #236]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1ef      	bne.n	80082a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d168      	bne.n	8008398 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d113      	bne.n	80082f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80082cc:	4b35      	ldr	r3, [pc, #212]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082ce:	695a      	ldr	r2, [r3, #20]
 80082d0:	4b35      	ldr	r3, [pc, #212]	; (80083a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80082d2:	4013      	ands	r3, r2
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6892      	ldr	r2, [r2, #8]
 80082d8:	0211      	lsls	r1, r2, #8
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	68d2      	ldr	r2, [r2, #12]
 80082de:	06d2      	lsls	r2, r2, #27
 80082e0:	4311      	orrs	r1, r2
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6852      	ldr	r2, [r2, #4]
 80082e6:	3a01      	subs	r2, #1
 80082e8:	0112      	lsls	r2, r2, #4
 80082ea:	430a      	orrs	r2, r1
 80082ec:	492d      	ldr	r1, [pc, #180]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	614b      	str	r3, [r1, #20]
 80082f2:	e02d      	b.n	8008350 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d115      	bne.n	8008326 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80082fa:	4b2a      	ldr	r3, [pc, #168]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082fc:	695a      	ldr	r2, [r3, #20]
 80082fe:	4b2b      	ldr	r3, [pc, #172]	; (80083ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8008300:	4013      	ands	r3, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6892      	ldr	r2, [r2, #8]
 8008306:	0211      	lsls	r1, r2, #8
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6912      	ldr	r2, [r2, #16]
 800830c:	0852      	lsrs	r2, r2, #1
 800830e:	3a01      	subs	r2, #1
 8008310:	0552      	lsls	r2, r2, #21
 8008312:	4311      	orrs	r1, r2
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6852      	ldr	r2, [r2, #4]
 8008318:	3a01      	subs	r2, #1
 800831a:	0112      	lsls	r2, r2, #4
 800831c:	430a      	orrs	r2, r1
 800831e:	4921      	ldr	r1, [pc, #132]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008320:	4313      	orrs	r3, r2
 8008322:	614b      	str	r3, [r1, #20]
 8008324:	e014      	b.n	8008350 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008326:	4b1f      	ldr	r3, [pc, #124]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008328:	695a      	ldr	r2, [r3, #20]
 800832a:	4b21      	ldr	r3, [pc, #132]	; (80083b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800832c:	4013      	ands	r3, r2
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	6892      	ldr	r2, [r2, #8]
 8008332:	0211      	lsls	r1, r2, #8
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6952      	ldr	r2, [r2, #20]
 8008338:	0852      	lsrs	r2, r2, #1
 800833a:	3a01      	subs	r2, #1
 800833c:	0652      	lsls	r2, r2, #25
 800833e:	4311      	orrs	r1, r2
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6852      	ldr	r2, [r2, #4]
 8008344:	3a01      	subs	r2, #1
 8008346:	0112      	lsls	r2, r2, #4
 8008348:	430a      	orrs	r2, r1
 800834a:	4916      	ldr	r1, [pc, #88]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800834c:	4313      	orrs	r3, r2
 800834e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008350:	4b14      	ldr	r3, [pc, #80]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a13      	ldr	r2, [pc, #76]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800835a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800835c:	f7fc fa08 	bl	8004770 <HAL_GetTick>
 8008360:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008362:	e009      	b.n	8008378 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008364:	f7fc fa04 	bl	8004770 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d902      	bls.n	8008378 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	73fb      	strb	r3, [r7, #15]
          break;
 8008376:	e005      	b.n	8008384 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008378:	4b0a      	ldr	r3, [pc, #40]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0ef      	beq.n	8008364 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d106      	bne.n	8008398 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800838a:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800838c:	695a      	ldr	r2, [r3, #20]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	4904      	ldr	r1, [pc, #16]	; (80083a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008394:	4313      	orrs	r3, r2
 8008396:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008398:	7bfb      	ldrb	r3, [r7, #15]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40021000 	.word	0x40021000
 80083a8:	07ff800f 	.word	0x07ff800f
 80083ac:	ff9f800f 	.word	0xff9f800f
 80083b0:	f9ff800f 	.word	0xf9ff800f

080083b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e095      	b.n	80084f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d108      	bne.n	80083e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083d6:	d009      	beq.n	80083ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	61da      	str	r2, [r3, #28]
 80083de:	e005      	b.n	80083ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fb ff4a 	bl	80042a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008422:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800842c:	d902      	bls.n	8008434 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	e002      	b.n	800843a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008438:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008442:	d007      	beq.n	8008454 <HAL_SPI_Init+0xa0>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800844c:	d002      	beq.n	8008454 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	f003 0301 	and.w	r3, r3, #1
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008496:	ea42 0103 	orr.w	r1, r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	0c1b      	lsrs	r3, r3, #16
 80084b0:	f003 0204 	and.w	r2, r3, #4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c2:	f003 0308 	and.w	r3, r3, #8
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80084d0:	ea42 0103 	orr.w	r1, r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <_ZdlPvj>:
 80084fa:	f000 b800 	b.w	80084fe <_ZdlPv>

080084fe <_ZdlPv>:
 80084fe:	f000 b85b 	b.w	80085b8 <free>
	...

08008504 <__assert_func>:
 8008504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008506:	4614      	mov	r4, r2
 8008508:	461a      	mov	r2, r3
 800850a:	4b09      	ldr	r3, [pc, #36]	; (8008530 <__assert_func+0x2c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4605      	mov	r5, r0
 8008510:	68d8      	ldr	r0, [r3, #12]
 8008512:	b14c      	cbz	r4, 8008528 <__assert_func+0x24>
 8008514:	4b07      	ldr	r3, [pc, #28]	; (8008534 <__assert_func+0x30>)
 8008516:	9100      	str	r1, [sp, #0]
 8008518:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800851c:	4906      	ldr	r1, [pc, #24]	; (8008538 <__assert_func+0x34>)
 800851e:	462b      	mov	r3, r5
 8008520:	f000 f814 	bl	800854c <fiprintf>
 8008524:	f000 fd04 	bl	8008f30 <abort>
 8008528:	4b04      	ldr	r3, [pc, #16]	; (800853c <__assert_func+0x38>)
 800852a:	461c      	mov	r4, r3
 800852c:	e7f3      	b.n	8008516 <__assert_func+0x12>
 800852e:	bf00      	nop
 8008530:	2000021c 	.word	0x2000021c
 8008534:	08009970 	.word	0x08009970
 8008538:	0800997d 	.word	0x0800997d
 800853c:	080099ab 	.word	0x080099ab

08008540 <__errno>:
 8008540:	4b01      	ldr	r3, [pc, #4]	; (8008548 <__errno+0x8>)
 8008542:	6818      	ldr	r0, [r3, #0]
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	2000021c 	.word	0x2000021c

0800854c <fiprintf>:
 800854c:	b40e      	push	{r1, r2, r3}
 800854e:	b503      	push	{r0, r1, lr}
 8008550:	4601      	mov	r1, r0
 8008552:	ab03      	add	r3, sp, #12
 8008554:	4805      	ldr	r0, [pc, #20]	; (800856c <fiprintf+0x20>)
 8008556:	f853 2b04 	ldr.w	r2, [r3], #4
 800855a:	6800      	ldr	r0, [r0, #0]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	f000 f953 	bl	8008808 <_vfiprintf_r>
 8008562:	b002      	add	sp, #8
 8008564:	f85d eb04 	ldr.w	lr, [sp], #4
 8008568:	b003      	add	sp, #12
 800856a:	4770      	bx	lr
 800856c:	2000021c 	.word	0x2000021c

08008570 <__libc_init_array>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	4d0d      	ldr	r5, [pc, #52]	; (80085a8 <__libc_init_array+0x38>)
 8008574:	4c0d      	ldr	r4, [pc, #52]	; (80085ac <__libc_init_array+0x3c>)
 8008576:	1b64      	subs	r4, r4, r5
 8008578:	10a4      	asrs	r4, r4, #2
 800857a:	2600      	movs	r6, #0
 800857c:	42a6      	cmp	r6, r4
 800857e:	d109      	bne.n	8008594 <__libc_init_array+0x24>
 8008580:	4d0b      	ldr	r5, [pc, #44]	; (80085b0 <__libc_init_array+0x40>)
 8008582:	4c0c      	ldr	r4, [pc, #48]	; (80085b4 <__libc_init_array+0x44>)
 8008584:	f000 fff8 	bl	8009578 <_init>
 8008588:	1b64      	subs	r4, r4, r5
 800858a:	10a4      	asrs	r4, r4, #2
 800858c:	2600      	movs	r6, #0
 800858e:	42a6      	cmp	r6, r4
 8008590:	d105      	bne.n	800859e <__libc_init_array+0x2e>
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	f855 3b04 	ldr.w	r3, [r5], #4
 8008598:	4798      	blx	r3
 800859a:	3601      	adds	r6, #1
 800859c:	e7ee      	b.n	800857c <__libc_init_array+0xc>
 800859e:	f855 3b04 	ldr.w	r3, [r5], #4
 80085a2:	4798      	blx	r3
 80085a4:	3601      	adds	r6, #1
 80085a6:	e7f2      	b.n	800858e <__libc_init_array+0x1e>
 80085a8:	08009a44 	.word	0x08009a44
 80085ac:	08009a44 	.word	0x08009a44
 80085b0:	08009a44 	.word	0x08009a44
 80085b4:	08009a4c 	.word	0x08009a4c

080085b8 <free>:
 80085b8:	4b02      	ldr	r3, [pc, #8]	; (80085c4 <free+0xc>)
 80085ba:	4601      	mov	r1, r0
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	f000 b819 	b.w	80085f4 <_free_r>
 80085c2:	bf00      	nop
 80085c4:	2000021c 	.word	0x2000021c

080085c8 <memcpy>:
 80085c8:	440a      	add	r2, r1
 80085ca:	4291      	cmp	r1, r2
 80085cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80085d0:	d100      	bne.n	80085d4 <memcpy+0xc>
 80085d2:	4770      	bx	lr
 80085d4:	b510      	push	{r4, lr}
 80085d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085de:	4291      	cmp	r1, r2
 80085e0:	d1f9      	bne.n	80085d6 <memcpy+0xe>
 80085e2:	bd10      	pop	{r4, pc}

080085e4 <memset>:
 80085e4:	4402      	add	r2, r0
 80085e6:	4603      	mov	r3, r0
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d100      	bne.n	80085ee <memset+0xa>
 80085ec:	4770      	bx	lr
 80085ee:	f803 1b01 	strb.w	r1, [r3], #1
 80085f2:	e7f9      	b.n	80085e8 <memset+0x4>

080085f4 <_free_r>:
 80085f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085f6:	2900      	cmp	r1, #0
 80085f8:	d044      	beq.n	8008684 <_free_r+0x90>
 80085fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fe:	9001      	str	r0, [sp, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f1a1 0404 	sub.w	r4, r1, #4
 8008606:	bfb8      	it	lt
 8008608:	18e4      	addlt	r4, r4, r3
 800860a:	f000 feb9 	bl	8009380 <__malloc_lock>
 800860e:	4a1e      	ldr	r2, [pc, #120]	; (8008688 <_free_r+0x94>)
 8008610:	9801      	ldr	r0, [sp, #4]
 8008612:	6813      	ldr	r3, [r2, #0]
 8008614:	b933      	cbnz	r3, 8008624 <_free_r+0x30>
 8008616:	6063      	str	r3, [r4, #4]
 8008618:	6014      	str	r4, [r2, #0]
 800861a:	b003      	add	sp, #12
 800861c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008620:	f000 beb4 	b.w	800938c <__malloc_unlock>
 8008624:	42a3      	cmp	r3, r4
 8008626:	d908      	bls.n	800863a <_free_r+0x46>
 8008628:	6825      	ldr	r5, [r4, #0]
 800862a:	1961      	adds	r1, r4, r5
 800862c:	428b      	cmp	r3, r1
 800862e:	bf01      	itttt	eq
 8008630:	6819      	ldreq	r1, [r3, #0]
 8008632:	685b      	ldreq	r3, [r3, #4]
 8008634:	1949      	addeq	r1, r1, r5
 8008636:	6021      	streq	r1, [r4, #0]
 8008638:	e7ed      	b.n	8008616 <_free_r+0x22>
 800863a:	461a      	mov	r2, r3
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	b10b      	cbz	r3, 8008644 <_free_r+0x50>
 8008640:	42a3      	cmp	r3, r4
 8008642:	d9fa      	bls.n	800863a <_free_r+0x46>
 8008644:	6811      	ldr	r1, [r2, #0]
 8008646:	1855      	adds	r5, r2, r1
 8008648:	42a5      	cmp	r5, r4
 800864a:	d10b      	bne.n	8008664 <_free_r+0x70>
 800864c:	6824      	ldr	r4, [r4, #0]
 800864e:	4421      	add	r1, r4
 8008650:	1854      	adds	r4, r2, r1
 8008652:	42a3      	cmp	r3, r4
 8008654:	6011      	str	r1, [r2, #0]
 8008656:	d1e0      	bne.n	800861a <_free_r+0x26>
 8008658:	681c      	ldr	r4, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	6053      	str	r3, [r2, #4]
 800865e:	4421      	add	r1, r4
 8008660:	6011      	str	r1, [r2, #0]
 8008662:	e7da      	b.n	800861a <_free_r+0x26>
 8008664:	d902      	bls.n	800866c <_free_r+0x78>
 8008666:	230c      	movs	r3, #12
 8008668:	6003      	str	r3, [r0, #0]
 800866a:	e7d6      	b.n	800861a <_free_r+0x26>
 800866c:	6825      	ldr	r5, [r4, #0]
 800866e:	1961      	adds	r1, r4, r5
 8008670:	428b      	cmp	r3, r1
 8008672:	bf04      	itt	eq
 8008674:	6819      	ldreq	r1, [r3, #0]
 8008676:	685b      	ldreq	r3, [r3, #4]
 8008678:	6063      	str	r3, [r4, #4]
 800867a:	bf04      	itt	eq
 800867c:	1949      	addeq	r1, r1, r5
 800867e:	6021      	streq	r1, [r4, #0]
 8008680:	6054      	str	r4, [r2, #4]
 8008682:	e7ca      	b.n	800861a <_free_r+0x26>
 8008684:	b003      	add	sp, #12
 8008686:	bd30      	pop	{r4, r5, pc}
 8008688:	20000744 	.word	0x20000744

0800868c <sbrk_aligned>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	4e0e      	ldr	r6, [pc, #56]	; (80086c8 <sbrk_aligned+0x3c>)
 8008690:	460c      	mov	r4, r1
 8008692:	6831      	ldr	r1, [r6, #0]
 8008694:	4605      	mov	r5, r0
 8008696:	b911      	cbnz	r1, 800869e <sbrk_aligned+0x12>
 8008698:	f000 fb7a 	bl	8008d90 <_sbrk_r>
 800869c:	6030      	str	r0, [r6, #0]
 800869e:	4621      	mov	r1, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 fb75 	bl	8008d90 <_sbrk_r>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	d00a      	beq.n	80086c0 <sbrk_aligned+0x34>
 80086aa:	1cc4      	adds	r4, r0, #3
 80086ac:	f024 0403 	bic.w	r4, r4, #3
 80086b0:	42a0      	cmp	r0, r4
 80086b2:	d007      	beq.n	80086c4 <sbrk_aligned+0x38>
 80086b4:	1a21      	subs	r1, r4, r0
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 fb6a 	bl	8008d90 <_sbrk_r>
 80086bc:	3001      	adds	r0, #1
 80086be:	d101      	bne.n	80086c4 <sbrk_aligned+0x38>
 80086c0:	f04f 34ff 	mov.w	r4, #4294967295
 80086c4:	4620      	mov	r0, r4
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	20000748 	.word	0x20000748

080086cc <_malloc_r>:
 80086cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d0:	1ccd      	adds	r5, r1, #3
 80086d2:	f025 0503 	bic.w	r5, r5, #3
 80086d6:	3508      	adds	r5, #8
 80086d8:	2d0c      	cmp	r5, #12
 80086da:	bf38      	it	cc
 80086dc:	250c      	movcc	r5, #12
 80086de:	2d00      	cmp	r5, #0
 80086e0:	4607      	mov	r7, r0
 80086e2:	db01      	blt.n	80086e8 <_malloc_r+0x1c>
 80086e4:	42a9      	cmp	r1, r5
 80086e6:	d905      	bls.n	80086f4 <_malloc_r+0x28>
 80086e8:	230c      	movs	r3, #12
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	2600      	movs	r6, #0
 80086ee:	4630      	mov	r0, r6
 80086f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f4:	4e2e      	ldr	r6, [pc, #184]	; (80087b0 <_malloc_r+0xe4>)
 80086f6:	f000 fe43 	bl	8009380 <__malloc_lock>
 80086fa:	6833      	ldr	r3, [r6, #0]
 80086fc:	461c      	mov	r4, r3
 80086fe:	bb34      	cbnz	r4, 800874e <_malloc_r+0x82>
 8008700:	4629      	mov	r1, r5
 8008702:	4638      	mov	r0, r7
 8008704:	f7ff ffc2 	bl	800868c <sbrk_aligned>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	4604      	mov	r4, r0
 800870c:	d14d      	bne.n	80087aa <_malloc_r+0xde>
 800870e:	6834      	ldr	r4, [r6, #0]
 8008710:	4626      	mov	r6, r4
 8008712:	2e00      	cmp	r6, #0
 8008714:	d140      	bne.n	8008798 <_malloc_r+0xcc>
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	4631      	mov	r1, r6
 800871a:	4638      	mov	r0, r7
 800871c:	eb04 0803 	add.w	r8, r4, r3
 8008720:	f000 fb36 	bl	8008d90 <_sbrk_r>
 8008724:	4580      	cmp	r8, r0
 8008726:	d13a      	bne.n	800879e <_malloc_r+0xd2>
 8008728:	6821      	ldr	r1, [r4, #0]
 800872a:	3503      	adds	r5, #3
 800872c:	1a6d      	subs	r5, r5, r1
 800872e:	f025 0503 	bic.w	r5, r5, #3
 8008732:	3508      	adds	r5, #8
 8008734:	2d0c      	cmp	r5, #12
 8008736:	bf38      	it	cc
 8008738:	250c      	movcc	r5, #12
 800873a:	4629      	mov	r1, r5
 800873c:	4638      	mov	r0, r7
 800873e:	f7ff ffa5 	bl	800868c <sbrk_aligned>
 8008742:	3001      	adds	r0, #1
 8008744:	d02b      	beq.n	800879e <_malloc_r+0xd2>
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	442b      	add	r3, r5
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	e00e      	b.n	800876c <_malloc_r+0xa0>
 800874e:	6822      	ldr	r2, [r4, #0]
 8008750:	1b52      	subs	r2, r2, r5
 8008752:	d41e      	bmi.n	8008792 <_malloc_r+0xc6>
 8008754:	2a0b      	cmp	r2, #11
 8008756:	d916      	bls.n	8008786 <_malloc_r+0xba>
 8008758:	1961      	adds	r1, r4, r5
 800875a:	42a3      	cmp	r3, r4
 800875c:	6025      	str	r5, [r4, #0]
 800875e:	bf18      	it	ne
 8008760:	6059      	strne	r1, [r3, #4]
 8008762:	6863      	ldr	r3, [r4, #4]
 8008764:	bf08      	it	eq
 8008766:	6031      	streq	r1, [r6, #0]
 8008768:	5162      	str	r2, [r4, r5]
 800876a:	604b      	str	r3, [r1, #4]
 800876c:	4638      	mov	r0, r7
 800876e:	f104 060b 	add.w	r6, r4, #11
 8008772:	f000 fe0b 	bl	800938c <__malloc_unlock>
 8008776:	f026 0607 	bic.w	r6, r6, #7
 800877a:	1d23      	adds	r3, r4, #4
 800877c:	1af2      	subs	r2, r6, r3
 800877e:	d0b6      	beq.n	80086ee <_malloc_r+0x22>
 8008780:	1b9b      	subs	r3, r3, r6
 8008782:	50a3      	str	r3, [r4, r2]
 8008784:	e7b3      	b.n	80086ee <_malloc_r+0x22>
 8008786:	6862      	ldr	r2, [r4, #4]
 8008788:	42a3      	cmp	r3, r4
 800878a:	bf0c      	ite	eq
 800878c:	6032      	streq	r2, [r6, #0]
 800878e:	605a      	strne	r2, [r3, #4]
 8008790:	e7ec      	b.n	800876c <_malloc_r+0xa0>
 8008792:	4623      	mov	r3, r4
 8008794:	6864      	ldr	r4, [r4, #4]
 8008796:	e7b2      	b.n	80086fe <_malloc_r+0x32>
 8008798:	4634      	mov	r4, r6
 800879a:	6876      	ldr	r6, [r6, #4]
 800879c:	e7b9      	b.n	8008712 <_malloc_r+0x46>
 800879e:	230c      	movs	r3, #12
 80087a0:	603b      	str	r3, [r7, #0]
 80087a2:	4638      	mov	r0, r7
 80087a4:	f000 fdf2 	bl	800938c <__malloc_unlock>
 80087a8:	e7a1      	b.n	80086ee <_malloc_r+0x22>
 80087aa:	6025      	str	r5, [r4, #0]
 80087ac:	e7de      	b.n	800876c <_malloc_r+0xa0>
 80087ae:	bf00      	nop
 80087b0:	20000744 	.word	0x20000744

080087b4 <__sfputc_r>:
 80087b4:	6893      	ldr	r3, [r2, #8]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	b410      	push	{r4}
 80087bc:	6093      	str	r3, [r2, #8]
 80087be:	da08      	bge.n	80087d2 <__sfputc_r+0x1e>
 80087c0:	6994      	ldr	r4, [r2, #24]
 80087c2:	42a3      	cmp	r3, r4
 80087c4:	db01      	blt.n	80087ca <__sfputc_r+0x16>
 80087c6:	290a      	cmp	r1, #10
 80087c8:	d103      	bne.n	80087d2 <__sfputc_r+0x1e>
 80087ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087ce:	f000 baef 	b.w	8008db0 <__swbuf_r>
 80087d2:	6813      	ldr	r3, [r2, #0]
 80087d4:	1c58      	adds	r0, r3, #1
 80087d6:	6010      	str	r0, [r2, #0]
 80087d8:	7019      	strb	r1, [r3, #0]
 80087da:	4608      	mov	r0, r1
 80087dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <__sfputs_r>:
 80087e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e4:	4606      	mov	r6, r0
 80087e6:	460f      	mov	r7, r1
 80087e8:	4614      	mov	r4, r2
 80087ea:	18d5      	adds	r5, r2, r3
 80087ec:	42ac      	cmp	r4, r5
 80087ee:	d101      	bne.n	80087f4 <__sfputs_r+0x12>
 80087f0:	2000      	movs	r0, #0
 80087f2:	e007      	b.n	8008804 <__sfputs_r+0x22>
 80087f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f8:	463a      	mov	r2, r7
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7ff ffda 	bl	80087b4 <__sfputc_r>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d1f3      	bne.n	80087ec <__sfputs_r+0xa>
 8008804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008808 <_vfiprintf_r>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	460d      	mov	r5, r1
 800880e:	b09d      	sub	sp, #116	; 0x74
 8008810:	4614      	mov	r4, r2
 8008812:	4698      	mov	r8, r3
 8008814:	4606      	mov	r6, r0
 8008816:	b118      	cbz	r0, 8008820 <_vfiprintf_r+0x18>
 8008818:	6983      	ldr	r3, [r0, #24]
 800881a:	b90b      	cbnz	r3, 8008820 <_vfiprintf_r+0x18>
 800881c:	f000 fcaa 	bl	8009174 <__sinit>
 8008820:	4b89      	ldr	r3, [pc, #548]	; (8008a48 <_vfiprintf_r+0x240>)
 8008822:	429d      	cmp	r5, r3
 8008824:	d11b      	bne.n	800885e <_vfiprintf_r+0x56>
 8008826:	6875      	ldr	r5, [r6, #4]
 8008828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800882a:	07d9      	lsls	r1, r3, #31
 800882c:	d405      	bmi.n	800883a <_vfiprintf_r+0x32>
 800882e:	89ab      	ldrh	r3, [r5, #12]
 8008830:	059a      	lsls	r2, r3, #22
 8008832:	d402      	bmi.n	800883a <_vfiprintf_r+0x32>
 8008834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008836:	f000 fd3b 	bl	80092b0 <__retarget_lock_acquire_recursive>
 800883a:	89ab      	ldrh	r3, [r5, #12]
 800883c:	071b      	lsls	r3, r3, #28
 800883e:	d501      	bpl.n	8008844 <_vfiprintf_r+0x3c>
 8008840:	692b      	ldr	r3, [r5, #16]
 8008842:	b9eb      	cbnz	r3, 8008880 <_vfiprintf_r+0x78>
 8008844:	4629      	mov	r1, r5
 8008846:	4630      	mov	r0, r6
 8008848:	f000 fb04 	bl	8008e54 <__swsetup_r>
 800884c:	b1c0      	cbz	r0, 8008880 <_vfiprintf_r+0x78>
 800884e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008850:	07dc      	lsls	r4, r3, #31
 8008852:	d50e      	bpl.n	8008872 <_vfiprintf_r+0x6a>
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	b01d      	add	sp, #116	; 0x74
 800885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885e:	4b7b      	ldr	r3, [pc, #492]	; (8008a4c <_vfiprintf_r+0x244>)
 8008860:	429d      	cmp	r5, r3
 8008862:	d101      	bne.n	8008868 <_vfiprintf_r+0x60>
 8008864:	68b5      	ldr	r5, [r6, #8]
 8008866:	e7df      	b.n	8008828 <_vfiprintf_r+0x20>
 8008868:	4b79      	ldr	r3, [pc, #484]	; (8008a50 <_vfiprintf_r+0x248>)
 800886a:	429d      	cmp	r5, r3
 800886c:	bf08      	it	eq
 800886e:	68f5      	ldreq	r5, [r6, #12]
 8008870:	e7da      	b.n	8008828 <_vfiprintf_r+0x20>
 8008872:	89ab      	ldrh	r3, [r5, #12]
 8008874:	0598      	lsls	r0, r3, #22
 8008876:	d4ed      	bmi.n	8008854 <_vfiprintf_r+0x4c>
 8008878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800887a:	f000 fd1a 	bl	80092b2 <__retarget_lock_release_recursive>
 800887e:	e7e9      	b.n	8008854 <_vfiprintf_r+0x4c>
 8008880:	2300      	movs	r3, #0
 8008882:	9309      	str	r3, [sp, #36]	; 0x24
 8008884:	2320      	movs	r3, #32
 8008886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800888a:	f8cd 800c 	str.w	r8, [sp, #12]
 800888e:	2330      	movs	r3, #48	; 0x30
 8008890:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a54 <_vfiprintf_r+0x24c>
 8008894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008898:	f04f 0901 	mov.w	r9, #1
 800889c:	4623      	mov	r3, r4
 800889e:	469a      	mov	sl, r3
 80088a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a4:	b10a      	cbz	r2, 80088aa <_vfiprintf_r+0xa2>
 80088a6:	2a25      	cmp	r2, #37	; 0x25
 80088a8:	d1f9      	bne.n	800889e <_vfiprintf_r+0x96>
 80088aa:	ebba 0b04 	subs.w	fp, sl, r4
 80088ae:	d00b      	beq.n	80088c8 <_vfiprintf_r+0xc0>
 80088b0:	465b      	mov	r3, fp
 80088b2:	4622      	mov	r2, r4
 80088b4:	4629      	mov	r1, r5
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7ff ff93 	bl	80087e2 <__sfputs_r>
 80088bc:	3001      	adds	r0, #1
 80088be:	f000 80aa 	beq.w	8008a16 <_vfiprintf_r+0x20e>
 80088c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088c4:	445a      	add	r2, fp
 80088c6:	9209      	str	r2, [sp, #36]	; 0x24
 80088c8:	f89a 3000 	ldrb.w	r3, [sl]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 80a2 	beq.w	8008a16 <_vfiprintf_r+0x20e>
 80088d2:	2300      	movs	r3, #0
 80088d4:	f04f 32ff 	mov.w	r2, #4294967295
 80088d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088dc:	f10a 0a01 	add.w	sl, sl, #1
 80088e0:	9304      	str	r3, [sp, #16]
 80088e2:	9307      	str	r3, [sp, #28]
 80088e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088e8:	931a      	str	r3, [sp, #104]	; 0x68
 80088ea:	4654      	mov	r4, sl
 80088ec:	2205      	movs	r2, #5
 80088ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f2:	4858      	ldr	r0, [pc, #352]	; (8008a54 <_vfiprintf_r+0x24c>)
 80088f4:	f7f7 fc84 	bl	8000200 <memchr>
 80088f8:	9a04      	ldr	r2, [sp, #16]
 80088fa:	b9d8      	cbnz	r0, 8008934 <_vfiprintf_r+0x12c>
 80088fc:	06d1      	lsls	r1, r2, #27
 80088fe:	bf44      	itt	mi
 8008900:	2320      	movmi	r3, #32
 8008902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008906:	0713      	lsls	r3, r2, #28
 8008908:	bf44      	itt	mi
 800890a:	232b      	movmi	r3, #43	; 0x2b
 800890c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008910:	f89a 3000 	ldrb.w	r3, [sl]
 8008914:	2b2a      	cmp	r3, #42	; 0x2a
 8008916:	d015      	beq.n	8008944 <_vfiprintf_r+0x13c>
 8008918:	9a07      	ldr	r2, [sp, #28]
 800891a:	4654      	mov	r4, sl
 800891c:	2000      	movs	r0, #0
 800891e:	f04f 0c0a 	mov.w	ip, #10
 8008922:	4621      	mov	r1, r4
 8008924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008928:	3b30      	subs	r3, #48	; 0x30
 800892a:	2b09      	cmp	r3, #9
 800892c:	d94e      	bls.n	80089cc <_vfiprintf_r+0x1c4>
 800892e:	b1b0      	cbz	r0, 800895e <_vfiprintf_r+0x156>
 8008930:	9207      	str	r2, [sp, #28]
 8008932:	e014      	b.n	800895e <_vfiprintf_r+0x156>
 8008934:	eba0 0308 	sub.w	r3, r0, r8
 8008938:	fa09 f303 	lsl.w	r3, r9, r3
 800893c:	4313      	orrs	r3, r2
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	46a2      	mov	sl, r4
 8008942:	e7d2      	b.n	80088ea <_vfiprintf_r+0xe2>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	1d19      	adds	r1, r3, #4
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	9103      	str	r1, [sp, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	bfbb      	ittet	lt
 8008950:	425b      	neglt	r3, r3
 8008952:	f042 0202 	orrlt.w	r2, r2, #2
 8008956:	9307      	strge	r3, [sp, #28]
 8008958:	9307      	strlt	r3, [sp, #28]
 800895a:	bfb8      	it	lt
 800895c:	9204      	strlt	r2, [sp, #16]
 800895e:	7823      	ldrb	r3, [r4, #0]
 8008960:	2b2e      	cmp	r3, #46	; 0x2e
 8008962:	d10c      	bne.n	800897e <_vfiprintf_r+0x176>
 8008964:	7863      	ldrb	r3, [r4, #1]
 8008966:	2b2a      	cmp	r3, #42	; 0x2a
 8008968:	d135      	bne.n	80089d6 <_vfiprintf_r+0x1ce>
 800896a:	9b03      	ldr	r3, [sp, #12]
 800896c:	1d1a      	adds	r2, r3, #4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	9203      	str	r2, [sp, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	bfb8      	it	lt
 8008976:	f04f 33ff 	movlt.w	r3, #4294967295
 800897a:	3402      	adds	r4, #2
 800897c:	9305      	str	r3, [sp, #20]
 800897e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a64 <_vfiprintf_r+0x25c>
 8008982:	7821      	ldrb	r1, [r4, #0]
 8008984:	2203      	movs	r2, #3
 8008986:	4650      	mov	r0, sl
 8008988:	f7f7 fc3a 	bl	8000200 <memchr>
 800898c:	b140      	cbz	r0, 80089a0 <_vfiprintf_r+0x198>
 800898e:	2340      	movs	r3, #64	; 0x40
 8008990:	eba0 000a 	sub.w	r0, r0, sl
 8008994:	fa03 f000 	lsl.w	r0, r3, r0
 8008998:	9b04      	ldr	r3, [sp, #16]
 800899a:	4303      	orrs	r3, r0
 800899c:	3401      	adds	r4, #1
 800899e:	9304      	str	r3, [sp, #16]
 80089a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a4:	482c      	ldr	r0, [pc, #176]	; (8008a58 <_vfiprintf_r+0x250>)
 80089a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089aa:	2206      	movs	r2, #6
 80089ac:	f7f7 fc28 	bl	8000200 <memchr>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d03f      	beq.n	8008a34 <_vfiprintf_r+0x22c>
 80089b4:	4b29      	ldr	r3, [pc, #164]	; (8008a5c <_vfiprintf_r+0x254>)
 80089b6:	bb1b      	cbnz	r3, 8008a00 <_vfiprintf_r+0x1f8>
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	3307      	adds	r3, #7
 80089bc:	f023 0307 	bic.w	r3, r3, #7
 80089c0:	3308      	adds	r3, #8
 80089c2:	9303      	str	r3, [sp, #12]
 80089c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c6:	443b      	add	r3, r7
 80089c8:	9309      	str	r3, [sp, #36]	; 0x24
 80089ca:	e767      	b.n	800889c <_vfiprintf_r+0x94>
 80089cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80089d0:	460c      	mov	r4, r1
 80089d2:	2001      	movs	r0, #1
 80089d4:	e7a5      	b.n	8008922 <_vfiprintf_r+0x11a>
 80089d6:	2300      	movs	r3, #0
 80089d8:	3401      	adds	r4, #1
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	4619      	mov	r1, r3
 80089de:	f04f 0c0a 	mov.w	ip, #10
 80089e2:	4620      	mov	r0, r4
 80089e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089e8:	3a30      	subs	r2, #48	; 0x30
 80089ea:	2a09      	cmp	r2, #9
 80089ec:	d903      	bls.n	80089f6 <_vfiprintf_r+0x1ee>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0c5      	beq.n	800897e <_vfiprintf_r+0x176>
 80089f2:	9105      	str	r1, [sp, #20]
 80089f4:	e7c3      	b.n	800897e <_vfiprintf_r+0x176>
 80089f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80089fa:	4604      	mov	r4, r0
 80089fc:	2301      	movs	r3, #1
 80089fe:	e7f0      	b.n	80089e2 <_vfiprintf_r+0x1da>
 8008a00:	ab03      	add	r3, sp, #12
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	462a      	mov	r2, r5
 8008a06:	4b16      	ldr	r3, [pc, #88]	; (8008a60 <_vfiprintf_r+0x258>)
 8008a08:	a904      	add	r1, sp, #16
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f3af 8000 	nop.w
 8008a10:	4607      	mov	r7, r0
 8008a12:	1c78      	adds	r0, r7, #1
 8008a14:	d1d6      	bne.n	80089c4 <_vfiprintf_r+0x1bc>
 8008a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a18:	07d9      	lsls	r1, r3, #31
 8008a1a:	d405      	bmi.n	8008a28 <_vfiprintf_r+0x220>
 8008a1c:	89ab      	ldrh	r3, [r5, #12]
 8008a1e:	059a      	lsls	r2, r3, #22
 8008a20:	d402      	bmi.n	8008a28 <_vfiprintf_r+0x220>
 8008a22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a24:	f000 fc45 	bl	80092b2 <__retarget_lock_release_recursive>
 8008a28:	89ab      	ldrh	r3, [r5, #12]
 8008a2a:	065b      	lsls	r3, r3, #25
 8008a2c:	f53f af12 	bmi.w	8008854 <_vfiprintf_r+0x4c>
 8008a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a32:	e711      	b.n	8008858 <_vfiprintf_r+0x50>
 8008a34:	ab03      	add	r3, sp, #12
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	462a      	mov	r2, r5
 8008a3a:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <_vfiprintf_r+0x258>)
 8008a3c:	a904      	add	r1, sp, #16
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f000 f880 	bl	8008b44 <_printf_i>
 8008a44:	e7e4      	b.n	8008a10 <_vfiprintf_r+0x208>
 8008a46:	bf00      	nop
 8008a48:	08009a04 	.word	0x08009a04
 8008a4c:	08009a24 	.word	0x08009a24
 8008a50:	080099e4 	.word	0x080099e4
 8008a54:	080099b0 	.word	0x080099b0
 8008a58:	080099ba 	.word	0x080099ba
 8008a5c:	00000000 	.word	0x00000000
 8008a60:	080087e3 	.word	0x080087e3
 8008a64:	080099b6 	.word	0x080099b6

08008a68 <_printf_common>:
 8008a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a6c:	4616      	mov	r6, r2
 8008a6e:	4699      	mov	r9, r3
 8008a70:	688a      	ldr	r2, [r1, #8]
 8008a72:	690b      	ldr	r3, [r1, #16]
 8008a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	bfb8      	it	lt
 8008a7c:	4613      	movlt	r3, r2
 8008a7e:	6033      	str	r3, [r6, #0]
 8008a80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a84:	4607      	mov	r7, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	b10a      	cbz	r2, 8008a8e <_printf_common+0x26>
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	6033      	str	r3, [r6, #0]
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	0699      	lsls	r1, r3, #26
 8008a92:	bf42      	ittt	mi
 8008a94:	6833      	ldrmi	r3, [r6, #0]
 8008a96:	3302      	addmi	r3, #2
 8008a98:	6033      	strmi	r3, [r6, #0]
 8008a9a:	6825      	ldr	r5, [r4, #0]
 8008a9c:	f015 0506 	ands.w	r5, r5, #6
 8008aa0:	d106      	bne.n	8008ab0 <_printf_common+0x48>
 8008aa2:	f104 0a19 	add.w	sl, r4, #25
 8008aa6:	68e3      	ldr	r3, [r4, #12]
 8008aa8:	6832      	ldr	r2, [r6, #0]
 8008aaa:	1a9b      	subs	r3, r3, r2
 8008aac:	42ab      	cmp	r3, r5
 8008aae:	dc26      	bgt.n	8008afe <_printf_common+0x96>
 8008ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ab4:	1e13      	subs	r3, r2, #0
 8008ab6:	6822      	ldr	r2, [r4, #0]
 8008ab8:	bf18      	it	ne
 8008aba:	2301      	movne	r3, #1
 8008abc:	0692      	lsls	r2, r2, #26
 8008abe:	d42b      	bmi.n	8008b18 <_printf_common+0xb0>
 8008ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	47c0      	blx	r8
 8008aca:	3001      	adds	r0, #1
 8008acc:	d01e      	beq.n	8008b0c <_printf_common+0xa4>
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	68e5      	ldr	r5, [r4, #12]
 8008ad2:	6832      	ldr	r2, [r6, #0]
 8008ad4:	f003 0306 	and.w	r3, r3, #6
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	bf08      	it	eq
 8008adc:	1aad      	subeq	r5, r5, r2
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	6922      	ldr	r2, [r4, #16]
 8008ae2:	bf0c      	ite	eq
 8008ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ae8:	2500      	movne	r5, #0
 8008aea:	4293      	cmp	r3, r2
 8008aec:	bfc4      	itt	gt
 8008aee:	1a9b      	subgt	r3, r3, r2
 8008af0:	18ed      	addgt	r5, r5, r3
 8008af2:	2600      	movs	r6, #0
 8008af4:	341a      	adds	r4, #26
 8008af6:	42b5      	cmp	r5, r6
 8008af8:	d11a      	bne.n	8008b30 <_printf_common+0xc8>
 8008afa:	2000      	movs	r0, #0
 8008afc:	e008      	b.n	8008b10 <_printf_common+0xa8>
 8008afe:	2301      	movs	r3, #1
 8008b00:	4652      	mov	r2, sl
 8008b02:	4649      	mov	r1, r9
 8008b04:	4638      	mov	r0, r7
 8008b06:	47c0      	blx	r8
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d103      	bne.n	8008b14 <_printf_common+0xac>
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b14:	3501      	adds	r5, #1
 8008b16:	e7c6      	b.n	8008aa6 <_printf_common+0x3e>
 8008b18:	18e1      	adds	r1, r4, r3
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	2030      	movs	r0, #48	; 0x30
 8008b1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b22:	4422      	add	r2, r4
 8008b24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b2c:	3302      	adds	r3, #2
 8008b2e:	e7c7      	b.n	8008ac0 <_printf_common+0x58>
 8008b30:	2301      	movs	r3, #1
 8008b32:	4622      	mov	r2, r4
 8008b34:	4649      	mov	r1, r9
 8008b36:	4638      	mov	r0, r7
 8008b38:	47c0      	blx	r8
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d0e6      	beq.n	8008b0c <_printf_common+0xa4>
 8008b3e:	3601      	adds	r6, #1
 8008b40:	e7d9      	b.n	8008af6 <_printf_common+0x8e>
	...

08008b44 <_printf_i>:
 8008b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b48:	7e0f      	ldrb	r7, [r1, #24]
 8008b4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b4c:	2f78      	cmp	r7, #120	; 0x78
 8008b4e:	4691      	mov	r9, r2
 8008b50:	4680      	mov	r8, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	469a      	mov	sl, r3
 8008b56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b5a:	d807      	bhi.n	8008b6c <_printf_i+0x28>
 8008b5c:	2f62      	cmp	r7, #98	; 0x62
 8008b5e:	d80a      	bhi.n	8008b76 <_printf_i+0x32>
 8008b60:	2f00      	cmp	r7, #0
 8008b62:	f000 80d8 	beq.w	8008d16 <_printf_i+0x1d2>
 8008b66:	2f58      	cmp	r7, #88	; 0x58
 8008b68:	f000 80a3 	beq.w	8008cb2 <_printf_i+0x16e>
 8008b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b74:	e03a      	b.n	8008bec <_printf_i+0xa8>
 8008b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b7a:	2b15      	cmp	r3, #21
 8008b7c:	d8f6      	bhi.n	8008b6c <_printf_i+0x28>
 8008b7e:	a101      	add	r1, pc, #4	; (adr r1, 8008b84 <_printf_i+0x40>)
 8008b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b84:	08008bdd 	.word	0x08008bdd
 8008b88:	08008bf1 	.word	0x08008bf1
 8008b8c:	08008b6d 	.word	0x08008b6d
 8008b90:	08008b6d 	.word	0x08008b6d
 8008b94:	08008b6d 	.word	0x08008b6d
 8008b98:	08008b6d 	.word	0x08008b6d
 8008b9c:	08008bf1 	.word	0x08008bf1
 8008ba0:	08008b6d 	.word	0x08008b6d
 8008ba4:	08008b6d 	.word	0x08008b6d
 8008ba8:	08008b6d 	.word	0x08008b6d
 8008bac:	08008b6d 	.word	0x08008b6d
 8008bb0:	08008cfd 	.word	0x08008cfd
 8008bb4:	08008c21 	.word	0x08008c21
 8008bb8:	08008cdf 	.word	0x08008cdf
 8008bbc:	08008b6d 	.word	0x08008b6d
 8008bc0:	08008b6d 	.word	0x08008b6d
 8008bc4:	08008d1f 	.word	0x08008d1f
 8008bc8:	08008b6d 	.word	0x08008b6d
 8008bcc:	08008c21 	.word	0x08008c21
 8008bd0:	08008b6d 	.word	0x08008b6d
 8008bd4:	08008b6d 	.word	0x08008b6d
 8008bd8:	08008ce7 	.word	0x08008ce7
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	1d1a      	adds	r2, r3, #4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	602a      	str	r2, [r5, #0]
 8008be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0a3      	b.n	8008d38 <_printf_i+0x1f4>
 8008bf0:	6820      	ldr	r0, [r4, #0]
 8008bf2:	6829      	ldr	r1, [r5, #0]
 8008bf4:	0606      	lsls	r6, r0, #24
 8008bf6:	f101 0304 	add.w	r3, r1, #4
 8008bfa:	d50a      	bpl.n	8008c12 <_printf_i+0xce>
 8008bfc:	680e      	ldr	r6, [r1, #0]
 8008bfe:	602b      	str	r3, [r5, #0]
 8008c00:	2e00      	cmp	r6, #0
 8008c02:	da03      	bge.n	8008c0c <_printf_i+0xc8>
 8008c04:	232d      	movs	r3, #45	; 0x2d
 8008c06:	4276      	negs	r6, r6
 8008c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c0c:	485e      	ldr	r0, [pc, #376]	; (8008d88 <_printf_i+0x244>)
 8008c0e:	230a      	movs	r3, #10
 8008c10:	e019      	b.n	8008c46 <_printf_i+0x102>
 8008c12:	680e      	ldr	r6, [r1, #0]
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c1a:	bf18      	it	ne
 8008c1c:	b236      	sxthne	r6, r6
 8008c1e:	e7ef      	b.n	8008c00 <_printf_i+0xbc>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	6820      	ldr	r0, [r4, #0]
 8008c24:	1d19      	adds	r1, r3, #4
 8008c26:	6029      	str	r1, [r5, #0]
 8008c28:	0601      	lsls	r1, r0, #24
 8008c2a:	d501      	bpl.n	8008c30 <_printf_i+0xec>
 8008c2c:	681e      	ldr	r6, [r3, #0]
 8008c2e:	e002      	b.n	8008c36 <_printf_i+0xf2>
 8008c30:	0646      	lsls	r6, r0, #25
 8008c32:	d5fb      	bpl.n	8008c2c <_printf_i+0xe8>
 8008c34:	881e      	ldrh	r6, [r3, #0]
 8008c36:	4854      	ldr	r0, [pc, #336]	; (8008d88 <_printf_i+0x244>)
 8008c38:	2f6f      	cmp	r7, #111	; 0x6f
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2308      	moveq	r3, #8
 8008c3e:	230a      	movne	r3, #10
 8008c40:	2100      	movs	r1, #0
 8008c42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c46:	6865      	ldr	r5, [r4, #4]
 8008c48:	60a5      	str	r5, [r4, #8]
 8008c4a:	2d00      	cmp	r5, #0
 8008c4c:	bfa2      	ittt	ge
 8008c4e:	6821      	ldrge	r1, [r4, #0]
 8008c50:	f021 0104 	bicge.w	r1, r1, #4
 8008c54:	6021      	strge	r1, [r4, #0]
 8008c56:	b90e      	cbnz	r6, 8008c5c <_printf_i+0x118>
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	d04d      	beq.n	8008cf8 <_printf_i+0x1b4>
 8008c5c:	4615      	mov	r5, r2
 8008c5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c62:	fb03 6711 	mls	r7, r3, r1, r6
 8008c66:	5dc7      	ldrb	r7, [r0, r7]
 8008c68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c6c:	4637      	mov	r7, r6
 8008c6e:	42bb      	cmp	r3, r7
 8008c70:	460e      	mov	r6, r1
 8008c72:	d9f4      	bls.n	8008c5e <_printf_i+0x11a>
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d10b      	bne.n	8008c90 <_printf_i+0x14c>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	07de      	lsls	r6, r3, #31
 8008c7c:	d508      	bpl.n	8008c90 <_printf_i+0x14c>
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	6861      	ldr	r1, [r4, #4]
 8008c82:	4299      	cmp	r1, r3
 8008c84:	bfde      	ittt	le
 8008c86:	2330      	movle	r3, #48	; 0x30
 8008c88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c90:	1b52      	subs	r2, r2, r5
 8008c92:	6122      	str	r2, [r4, #16]
 8008c94:	f8cd a000 	str.w	sl, [sp]
 8008c98:	464b      	mov	r3, r9
 8008c9a:	aa03      	add	r2, sp, #12
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4640      	mov	r0, r8
 8008ca0:	f7ff fee2 	bl	8008a68 <_printf_common>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d14c      	bne.n	8008d42 <_printf_i+0x1fe>
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	b004      	add	sp, #16
 8008cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb2:	4835      	ldr	r0, [pc, #212]	; (8008d88 <_printf_i+0x244>)
 8008cb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cb8:	6829      	ldr	r1, [r5, #0]
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cc0:	6029      	str	r1, [r5, #0]
 8008cc2:	061d      	lsls	r5, r3, #24
 8008cc4:	d514      	bpl.n	8008cf0 <_printf_i+0x1ac>
 8008cc6:	07df      	lsls	r7, r3, #31
 8008cc8:	bf44      	itt	mi
 8008cca:	f043 0320 	orrmi.w	r3, r3, #32
 8008cce:	6023      	strmi	r3, [r4, #0]
 8008cd0:	b91e      	cbnz	r6, 8008cda <_printf_i+0x196>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	f023 0320 	bic.w	r3, r3, #32
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	2310      	movs	r3, #16
 8008cdc:	e7b0      	b.n	8008c40 <_printf_i+0xfc>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	f043 0320 	orr.w	r3, r3, #32
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	2378      	movs	r3, #120	; 0x78
 8008ce8:	4828      	ldr	r0, [pc, #160]	; (8008d8c <_printf_i+0x248>)
 8008cea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cee:	e7e3      	b.n	8008cb8 <_printf_i+0x174>
 8008cf0:	0659      	lsls	r1, r3, #25
 8008cf2:	bf48      	it	mi
 8008cf4:	b2b6      	uxthmi	r6, r6
 8008cf6:	e7e6      	b.n	8008cc6 <_printf_i+0x182>
 8008cf8:	4615      	mov	r5, r2
 8008cfa:	e7bb      	b.n	8008c74 <_printf_i+0x130>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	6826      	ldr	r6, [r4, #0]
 8008d00:	6961      	ldr	r1, [r4, #20]
 8008d02:	1d18      	adds	r0, r3, #4
 8008d04:	6028      	str	r0, [r5, #0]
 8008d06:	0635      	lsls	r5, r6, #24
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	d501      	bpl.n	8008d10 <_printf_i+0x1cc>
 8008d0c:	6019      	str	r1, [r3, #0]
 8008d0e:	e002      	b.n	8008d16 <_printf_i+0x1d2>
 8008d10:	0670      	lsls	r0, r6, #25
 8008d12:	d5fb      	bpl.n	8008d0c <_printf_i+0x1c8>
 8008d14:	8019      	strh	r1, [r3, #0]
 8008d16:	2300      	movs	r3, #0
 8008d18:	6123      	str	r3, [r4, #16]
 8008d1a:	4615      	mov	r5, r2
 8008d1c:	e7ba      	b.n	8008c94 <_printf_i+0x150>
 8008d1e:	682b      	ldr	r3, [r5, #0]
 8008d20:	1d1a      	adds	r2, r3, #4
 8008d22:	602a      	str	r2, [r5, #0]
 8008d24:	681d      	ldr	r5, [r3, #0]
 8008d26:	6862      	ldr	r2, [r4, #4]
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	f7f7 fa68 	bl	8000200 <memchr>
 8008d30:	b108      	cbz	r0, 8008d36 <_printf_i+0x1f2>
 8008d32:	1b40      	subs	r0, r0, r5
 8008d34:	6060      	str	r0, [r4, #4]
 8008d36:	6863      	ldr	r3, [r4, #4]
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d40:	e7a8      	b.n	8008c94 <_printf_i+0x150>
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	462a      	mov	r2, r5
 8008d46:	4649      	mov	r1, r9
 8008d48:	4640      	mov	r0, r8
 8008d4a:	47d0      	blx	sl
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d0ab      	beq.n	8008ca8 <_printf_i+0x164>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	079b      	lsls	r3, r3, #30
 8008d54:	d413      	bmi.n	8008d7e <_printf_i+0x23a>
 8008d56:	68e0      	ldr	r0, [r4, #12]
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	4298      	cmp	r0, r3
 8008d5c:	bfb8      	it	lt
 8008d5e:	4618      	movlt	r0, r3
 8008d60:	e7a4      	b.n	8008cac <_printf_i+0x168>
 8008d62:	2301      	movs	r3, #1
 8008d64:	4632      	mov	r2, r6
 8008d66:	4649      	mov	r1, r9
 8008d68:	4640      	mov	r0, r8
 8008d6a:	47d0      	blx	sl
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d09b      	beq.n	8008ca8 <_printf_i+0x164>
 8008d70:	3501      	adds	r5, #1
 8008d72:	68e3      	ldr	r3, [r4, #12]
 8008d74:	9903      	ldr	r1, [sp, #12]
 8008d76:	1a5b      	subs	r3, r3, r1
 8008d78:	42ab      	cmp	r3, r5
 8008d7a:	dcf2      	bgt.n	8008d62 <_printf_i+0x21e>
 8008d7c:	e7eb      	b.n	8008d56 <_printf_i+0x212>
 8008d7e:	2500      	movs	r5, #0
 8008d80:	f104 0619 	add.w	r6, r4, #25
 8008d84:	e7f5      	b.n	8008d72 <_printf_i+0x22e>
 8008d86:	bf00      	nop
 8008d88:	080099c1 	.word	0x080099c1
 8008d8c:	080099d2 	.word	0x080099d2

08008d90 <_sbrk_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d06      	ldr	r5, [pc, #24]	; (8008dac <_sbrk_r+0x1c>)
 8008d94:	2300      	movs	r3, #0
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	602b      	str	r3, [r5, #0]
 8008d9c:	f7fb fbb4 	bl	8004508 <_sbrk>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d102      	bne.n	8008daa <_sbrk_r+0x1a>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	b103      	cbz	r3, 8008daa <_sbrk_r+0x1a>
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	20000750 	.word	0x20000750

08008db0 <__swbuf_r>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	460e      	mov	r6, r1
 8008db4:	4614      	mov	r4, r2
 8008db6:	4605      	mov	r5, r0
 8008db8:	b118      	cbz	r0, 8008dc2 <__swbuf_r+0x12>
 8008dba:	6983      	ldr	r3, [r0, #24]
 8008dbc:	b90b      	cbnz	r3, 8008dc2 <__swbuf_r+0x12>
 8008dbe:	f000 f9d9 	bl	8009174 <__sinit>
 8008dc2:	4b21      	ldr	r3, [pc, #132]	; (8008e48 <__swbuf_r+0x98>)
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	d12b      	bne.n	8008e20 <__swbuf_r+0x70>
 8008dc8:	686c      	ldr	r4, [r5, #4]
 8008dca:	69a3      	ldr	r3, [r4, #24]
 8008dcc:	60a3      	str	r3, [r4, #8]
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	071a      	lsls	r2, r3, #28
 8008dd2:	d52f      	bpl.n	8008e34 <__swbuf_r+0x84>
 8008dd4:	6923      	ldr	r3, [r4, #16]
 8008dd6:	b36b      	cbz	r3, 8008e34 <__swbuf_r+0x84>
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	6820      	ldr	r0, [r4, #0]
 8008ddc:	1ac0      	subs	r0, r0, r3
 8008dde:	6963      	ldr	r3, [r4, #20]
 8008de0:	b2f6      	uxtb	r6, r6
 8008de2:	4283      	cmp	r3, r0
 8008de4:	4637      	mov	r7, r6
 8008de6:	dc04      	bgt.n	8008df2 <__swbuf_r+0x42>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4628      	mov	r0, r5
 8008dec:	f000 f92e 	bl	800904c <_fflush_r>
 8008df0:	bb30      	cbnz	r0, 8008e40 <__swbuf_r+0x90>
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	60a3      	str	r3, [r4, #8]
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	6022      	str	r2, [r4, #0]
 8008dfe:	701e      	strb	r6, [r3, #0]
 8008e00:	6963      	ldr	r3, [r4, #20]
 8008e02:	3001      	adds	r0, #1
 8008e04:	4283      	cmp	r3, r0
 8008e06:	d004      	beq.n	8008e12 <__swbuf_r+0x62>
 8008e08:	89a3      	ldrh	r3, [r4, #12]
 8008e0a:	07db      	lsls	r3, r3, #31
 8008e0c:	d506      	bpl.n	8008e1c <__swbuf_r+0x6c>
 8008e0e:	2e0a      	cmp	r6, #10
 8008e10:	d104      	bne.n	8008e1c <__swbuf_r+0x6c>
 8008e12:	4621      	mov	r1, r4
 8008e14:	4628      	mov	r0, r5
 8008e16:	f000 f919 	bl	800904c <_fflush_r>
 8008e1a:	b988      	cbnz	r0, 8008e40 <__swbuf_r+0x90>
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e20:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <__swbuf_r+0x9c>)
 8008e22:	429c      	cmp	r4, r3
 8008e24:	d101      	bne.n	8008e2a <__swbuf_r+0x7a>
 8008e26:	68ac      	ldr	r4, [r5, #8]
 8008e28:	e7cf      	b.n	8008dca <__swbuf_r+0x1a>
 8008e2a:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <__swbuf_r+0xa0>)
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	bf08      	it	eq
 8008e30:	68ec      	ldreq	r4, [r5, #12]
 8008e32:	e7ca      	b.n	8008dca <__swbuf_r+0x1a>
 8008e34:	4621      	mov	r1, r4
 8008e36:	4628      	mov	r0, r5
 8008e38:	f000 f80c 	bl	8008e54 <__swsetup_r>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d0cb      	beq.n	8008dd8 <__swbuf_r+0x28>
 8008e40:	f04f 37ff 	mov.w	r7, #4294967295
 8008e44:	e7ea      	b.n	8008e1c <__swbuf_r+0x6c>
 8008e46:	bf00      	nop
 8008e48:	08009a04 	.word	0x08009a04
 8008e4c:	08009a24 	.word	0x08009a24
 8008e50:	080099e4 	.word	0x080099e4

08008e54 <__swsetup_r>:
 8008e54:	4b32      	ldr	r3, [pc, #200]	; (8008f20 <__swsetup_r+0xcc>)
 8008e56:	b570      	push	{r4, r5, r6, lr}
 8008e58:	681d      	ldr	r5, [r3, #0]
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	b125      	cbz	r5, 8008e6a <__swsetup_r+0x16>
 8008e60:	69ab      	ldr	r3, [r5, #24]
 8008e62:	b913      	cbnz	r3, 8008e6a <__swsetup_r+0x16>
 8008e64:	4628      	mov	r0, r5
 8008e66:	f000 f985 	bl	8009174 <__sinit>
 8008e6a:	4b2e      	ldr	r3, [pc, #184]	; (8008f24 <__swsetup_r+0xd0>)
 8008e6c:	429c      	cmp	r4, r3
 8008e6e:	d10f      	bne.n	8008e90 <__swsetup_r+0x3c>
 8008e70:	686c      	ldr	r4, [r5, #4]
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e78:	0719      	lsls	r1, r3, #28
 8008e7a:	d42c      	bmi.n	8008ed6 <__swsetup_r+0x82>
 8008e7c:	06dd      	lsls	r5, r3, #27
 8008e7e:	d411      	bmi.n	8008ea4 <__swsetup_r+0x50>
 8008e80:	2309      	movs	r3, #9
 8008e82:	6033      	str	r3, [r6, #0]
 8008e84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e88:	81a3      	strh	r3, [r4, #12]
 8008e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8e:	e03e      	b.n	8008f0e <__swsetup_r+0xba>
 8008e90:	4b25      	ldr	r3, [pc, #148]	; (8008f28 <__swsetup_r+0xd4>)
 8008e92:	429c      	cmp	r4, r3
 8008e94:	d101      	bne.n	8008e9a <__swsetup_r+0x46>
 8008e96:	68ac      	ldr	r4, [r5, #8]
 8008e98:	e7eb      	b.n	8008e72 <__swsetup_r+0x1e>
 8008e9a:	4b24      	ldr	r3, [pc, #144]	; (8008f2c <__swsetup_r+0xd8>)
 8008e9c:	429c      	cmp	r4, r3
 8008e9e:	bf08      	it	eq
 8008ea0:	68ec      	ldreq	r4, [r5, #12]
 8008ea2:	e7e6      	b.n	8008e72 <__swsetup_r+0x1e>
 8008ea4:	0758      	lsls	r0, r3, #29
 8008ea6:	d512      	bpl.n	8008ece <__swsetup_r+0x7a>
 8008ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eaa:	b141      	cbz	r1, 8008ebe <__swsetup_r+0x6a>
 8008eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eb0:	4299      	cmp	r1, r3
 8008eb2:	d002      	beq.n	8008eba <__swsetup_r+0x66>
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7ff fb9d 	bl	80085f4 <_free_r>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	6063      	str	r3, [r4, #4]
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	f043 0308 	orr.w	r3, r3, #8
 8008ed4:	81a3      	strh	r3, [r4, #12]
 8008ed6:	6923      	ldr	r3, [r4, #16]
 8008ed8:	b94b      	cbnz	r3, 8008eee <__swsetup_r+0x9a>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee4:	d003      	beq.n	8008eee <__swsetup_r+0x9a>
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f000 fa09 	bl	8009300 <__smakebuf_r>
 8008eee:	89a0      	ldrh	r0, [r4, #12]
 8008ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ef4:	f010 0301 	ands.w	r3, r0, #1
 8008ef8:	d00a      	beq.n	8008f10 <__swsetup_r+0xbc>
 8008efa:	2300      	movs	r3, #0
 8008efc:	60a3      	str	r3, [r4, #8]
 8008efe:	6963      	ldr	r3, [r4, #20]
 8008f00:	425b      	negs	r3, r3
 8008f02:	61a3      	str	r3, [r4, #24]
 8008f04:	6923      	ldr	r3, [r4, #16]
 8008f06:	b943      	cbnz	r3, 8008f1a <__swsetup_r+0xc6>
 8008f08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f0c:	d1ba      	bne.n	8008e84 <__swsetup_r+0x30>
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	0781      	lsls	r1, r0, #30
 8008f12:	bf58      	it	pl
 8008f14:	6963      	ldrpl	r3, [r4, #20]
 8008f16:	60a3      	str	r3, [r4, #8]
 8008f18:	e7f4      	b.n	8008f04 <__swsetup_r+0xb0>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e7f7      	b.n	8008f0e <__swsetup_r+0xba>
 8008f1e:	bf00      	nop
 8008f20:	2000021c 	.word	0x2000021c
 8008f24:	08009a04 	.word	0x08009a04
 8008f28:	08009a24 	.word	0x08009a24
 8008f2c:	080099e4 	.word	0x080099e4

08008f30 <abort>:
 8008f30:	b508      	push	{r3, lr}
 8008f32:	2006      	movs	r0, #6
 8008f34:	f000 fa58 	bl	80093e8 <raise>
 8008f38:	2001      	movs	r0, #1
 8008f3a:	f7fb fa6d 	bl	8004418 <_exit>
	...

08008f40 <__sflush_r>:
 8008f40:	898a      	ldrh	r2, [r1, #12]
 8008f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f46:	4605      	mov	r5, r0
 8008f48:	0710      	lsls	r0, r2, #28
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	d458      	bmi.n	8009000 <__sflush_r+0xc0>
 8008f4e:	684b      	ldr	r3, [r1, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	dc05      	bgt.n	8008f60 <__sflush_r+0x20>
 8008f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dc02      	bgt.n	8008f60 <__sflush_r+0x20>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	d0f9      	beq.n	8008f5a <__sflush_r+0x1a>
 8008f66:	2300      	movs	r3, #0
 8008f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f6c:	682f      	ldr	r7, [r5, #0]
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	d032      	beq.n	8008fd8 <__sflush_r+0x98>
 8008f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	075a      	lsls	r2, r3, #29
 8008f78:	d505      	bpl.n	8008f86 <__sflush_r+0x46>
 8008f7a:	6863      	ldr	r3, [r4, #4]
 8008f7c:	1ac0      	subs	r0, r0, r3
 8008f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f80:	b10b      	cbz	r3, 8008f86 <__sflush_r+0x46>
 8008f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f84:	1ac0      	subs	r0, r0, r3
 8008f86:	2300      	movs	r3, #0
 8008f88:	4602      	mov	r2, r0
 8008f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f8c:	6a21      	ldr	r1, [r4, #32]
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b0      	blx	r6
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	d106      	bne.n	8008fa6 <__sflush_r+0x66>
 8008f98:	6829      	ldr	r1, [r5, #0]
 8008f9a:	291d      	cmp	r1, #29
 8008f9c:	d82c      	bhi.n	8008ff8 <__sflush_r+0xb8>
 8008f9e:	4a2a      	ldr	r2, [pc, #168]	; (8009048 <__sflush_r+0x108>)
 8008fa0:	40ca      	lsrs	r2, r1
 8008fa2:	07d6      	lsls	r6, r2, #31
 8008fa4:	d528      	bpl.n	8008ff8 <__sflush_r+0xb8>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6062      	str	r2, [r4, #4]
 8008faa:	04d9      	lsls	r1, r3, #19
 8008fac:	6922      	ldr	r2, [r4, #16]
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	d504      	bpl.n	8008fbc <__sflush_r+0x7c>
 8008fb2:	1c42      	adds	r2, r0, #1
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0x7a>
 8008fb6:	682b      	ldr	r3, [r5, #0]
 8008fb8:	b903      	cbnz	r3, 8008fbc <__sflush_r+0x7c>
 8008fba:	6560      	str	r0, [r4, #84]	; 0x54
 8008fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fbe:	602f      	str	r7, [r5, #0]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	d0ca      	beq.n	8008f5a <__sflush_r+0x1a>
 8008fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d002      	beq.n	8008fd2 <__sflush_r+0x92>
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f7ff fb11 	bl	80085f4 <_free_r>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8008fd6:	e7c1      	b.n	8008f5c <__sflush_r+0x1c>
 8008fd8:	6a21      	ldr	r1, [r4, #32]
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b0      	blx	r6
 8008fe0:	1c41      	adds	r1, r0, #1
 8008fe2:	d1c7      	bne.n	8008f74 <__sflush_r+0x34>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0c4      	beq.n	8008f74 <__sflush_r+0x34>
 8008fea:	2b1d      	cmp	r3, #29
 8008fec:	d001      	beq.n	8008ff2 <__sflush_r+0xb2>
 8008fee:	2b16      	cmp	r3, #22
 8008ff0:	d101      	bne.n	8008ff6 <__sflush_r+0xb6>
 8008ff2:	602f      	str	r7, [r5, #0]
 8008ff4:	e7b1      	b.n	8008f5a <__sflush_r+0x1a>
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	e7ad      	b.n	8008f5c <__sflush_r+0x1c>
 8009000:	690f      	ldr	r7, [r1, #16]
 8009002:	2f00      	cmp	r7, #0
 8009004:	d0a9      	beq.n	8008f5a <__sflush_r+0x1a>
 8009006:	0793      	lsls	r3, r2, #30
 8009008:	680e      	ldr	r6, [r1, #0]
 800900a:	bf08      	it	eq
 800900c:	694b      	ldreq	r3, [r1, #20]
 800900e:	600f      	str	r7, [r1, #0]
 8009010:	bf18      	it	ne
 8009012:	2300      	movne	r3, #0
 8009014:	eba6 0807 	sub.w	r8, r6, r7
 8009018:	608b      	str	r3, [r1, #8]
 800901a:	f1b8 0f00 	cmp.w	r8, #0
 800901e:	dd9c      	ble.n	8008f5a <__sflush_r+0x1a>
 8009020:	6a21      	ldr	r1, [r4, #32]
 8009022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009024:	4643      	mov	r3, r8
 8009026:	463a      	mov	r2, r7
 8009028:	4628      	mov	r0, r5
 800902a:	47b0      	blx	r6
 800902c:	2800      	cmp	r0, #0
 800902e:	dc06      	bgt.n	800903e <__sflush_r+0xfe>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	e78e      	b.n	8008f5c <__sflush_r+0x1c>
 800903e:	4407      	add	r7, r0
 8009040:	eba8 0800 	sub.w	r8, r8, r0
 8009044:	e7e9      	b.n	800901a <__sflush_r+0xda>
 8009046:	bf00      	nop
 8009048:	20400001 	.word	0x20400001

0800904c <_fflush_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	690b      	ldr	r3, [r1, #16]
 8009050:	4605      	mov	r5, r0
 8009052:	460c      	mov	r4, r1
 8009054:	b913      	cbnz	r3, 800905c <_fflush_r+0x10>
 8009056:	2500      	movs	r5, #0
 8009058:	4628      	mov	r0, r5
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	b118      	cbz	r0, 8009066 <_fflush_r+0x1a>
 800905e:	6983      	ldr	r3, [r0, #24]
 8009060:	b90b      	cbnz	r3, 8009066 <_fflush_r+0x1a>
 8009062:	f000 f887 	bl	8009174 <__sinit>
 8009066:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <_fflush_r+0x6c>)
 8009068:	429c      	cmp	r4, r3
 800906a:	d11b      	bne.n	80090a4 <_fflush_r+0x58>
 800906c:	686c      	ldr	r4, [r5, #4]
 800906e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0ef      	beq.n	8009056 <_fflush_r+0xa>
 8009076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009078:	07d0      	lsls	r0, r2, #31
 800907a:	d404      	bmi.n	8009086 <_fflush_r+0x3a>
 800907c:	0599      	lsls	r1, r3, #22
 800907e:	d402      	bmi.n	8009086 <_fflush_r+0x3a>
 8009080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009082:	f000 f915 	bl	80092b0 <__retarget_lock_acquire_recursive>
 8009086:	4628      	mov	r0, r5
 8009088:	4621      	mov	r1, r4
 800908a:	f7ff ff59 	bl	8008f40 <__sflush_r>
 800908e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009090:	07da      	lsls	r2, r3, #31
 8009092:	4605      	mov	r5, r0
 8009094:	d4e0      	bmi.n	8009058 <_fflush_r+0xc>
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	059b      	lsls	r3, r3, #22
 800909a:	d4dd      	bmi.n	8009058 <_fflush_r+0xc>
 800909c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800909e:	f000 f908 	bl	80092b2 <__retarget_lock_release_recursive>
 80090a2:	e7d9      	b.n	8009058 <_fflush_r+0xc>
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <_fflush_r+0x70>)
 80090a6:	429c      	cmp	r4, r3
 80090a8:	d101      	bne.n	80090ae <_fflush_r+0x62>
 80090aa:	68ac      	ldr	r4, [r5, #8]
 80090ac:	e7df      	b.n	800906e <_fflush_r+0x22>
 80090ae:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <_fflush_r+0x74>)
 80090b0:	429c      	cmp	r4, r3
 80090b2:	bf08      	it	eq
 80090b4:	68ec      	ldreq	r4, [r5, #12]
 80090b6:	e7da      	b.n	800906e <_fflush_r+0x22>
 80090b8:	08009a04 	.word	0x08009a04
 80090bc:	08009a24 	.word	0x08009a24
 80090c0:	080099e4 	.word	0x080099e4

080090c4 <std>:
 80090c4:	2300      	movs	r3, #0
 80090c6:	b510      	push	{r4, lr}
 80090c8:	4604      	mov	r4, r0
 80090ca:	e9c0 3300 	strd	r3, r3, [r0]
 80090ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090d2:	6083      	str	r3, [r0, #8]
 80090d4:	8181      	strh	r1, [r0, #12]
 80090d6:	6643      	str	r3, [r0, #100]	; 0x64
 80090d8:	81c2      	strh	r2, [r0, #14]
 80090da:	6183      	str	r3, [r0, #24]
 80090dc:	4619      	mov	r1, r3
 80090de:	2208      	movs	r2, #8
 80090e0:	305c      	adds	r0, #92	; 0x5c
 80090e2:	f7ff fa7f 	bl	80085e4 <memset>
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <std+0x38>)
 80090e8:	6263      	str	r3, [r4, #36]	; 0x24
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <std+0x3c>)
 80090ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <std+0x40>)
 80090f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <std+0x44>)
 80090f4:	6224      	str	r4, [r4, #32]
 80090f6:	6323      	str	r3, [r4, #48]	; 0x30
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	bf00      	nop
 80090fc:	08009421 	.word	0x08009421
 8009100:	08009443 	.word	0x08009443
 8009104:	0800947b 	.word	0x0800947b
 8009108:	0800949f 	.word	0x0800949f

0800910c <_cleanup_r>:
 800910c:	4901      	ldr	r1, [pc, #4]	; (8009114 <_cleanup_r+0x8>)
 800910e:	f000 b8af 	b.w	8009270 <_fwalk_reent>
 8009112:	bf00      	nop
 8009114:	0800904d 	.word	0x0800904d

08009118 <__sfmoreglue>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	2268      	movs	r2, #104	; 0x68
 800911c:	1e4d      	subs	r5, r1, #1
 800911e:	4355      	muls	r5, r2
 8009120:	460e      	mov	r6, r1
 8009122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009126:	f7ff fad1 	bl	80086cc <_malloc_r>
 800912a:	4604      	mov	r4, r0
 800912c:	b140      	cbz	r0, 8009140 <__sfmoreglue+0x28>
 800912e:	2100      	movs	r1, #0
 8009130:	e9c0 1600 	strd	r1, r6, [r0]
 8009134:	300c      	adds	r0, #12
 8009136:	60a0      	str	r0, [r4, #8]
 8009138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800913c:	f7ff fa52 	bl	80085e4 <memset>
 8009140:	4620      	mov	r0, r4
 8009142:	bd70      	pop	{r4, r5, r6, pc}

08009144 <__sfp_lock_acquire>:
 8009144:	4801      	ldr	r0, [pc, #4]	; (800914c <__sfp_lock_acquire+0x8>)
 8009146:	f000 b8b3 	b.w	80092b0 <__retarget_lock_acquire_recursive>
 800914a:	bf00      	nop
 800914c:	2000074d 	.word	0x2000074d

08009150 <__sfp_lock_release>:
 8009150:	4801      	ldr	r0, [pc, #4]	; (8009158 <__sfp_lock_release+0x8>)
 8009152:	f000 b8ae 	b.w	80092b2 <__retarget_lock_release_recursive>
 8009156:	bf00      	nop
 8009158:	2000074d 	.word	0x2000074d

0800915c <__sinit_lock_acquire>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__sinit_lock_acquire+0x8>)
 800915e:	f000 b8a7 	b.w	80092b0 <__retarget_lock_acquire_recursive>
 8009162:	bf00      	nop
 8009164:	2000074e 	.word	0x2000074e

08009168 <__sinit_lock_release>:
 8009168:	4801      	ldr	r0, [pc, #4]	; (8009170 <__sinit_lock_release+0x8>)
 800916a:	f000 b8a2 	b.w	80092b2 <__retarget_lock_release_recursive>
 800916e:	bf00      	nop
 8009170:	2000074e 	.word	0x2000074e

08009174 <__sinit>:
 8009174:	b510      	push	{r4, lr}
 8009176:	4604      	mov	r4, r0
 8009178:	f7ff fff0 	bl	800915c <__sinit_lock_acquire>
 800917c:	69a3      	ldr	r3, [r4, #24]
 800917e:	b11b      	cbz	r3, 8009188 <__sinit+0x14>
 8009180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009184:	f7ff bff0 	b.w	8009168 <__sinit_lock_release>
 8009188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800918c:	6523      	str	r3, [r4, #80]	; 0x50
 800918e:	4b13      	ldr	r3, [pc, #76]	; (80091dc <__sinit+0x68>)
 8009190:	4a13      	ldr	r2, [pc, #76]	; (80091e0 <__sinit+0x6c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	62a2      	str	r2, [r4, #40]	; 0x28
 8009196:	42a3      	cmp	r3, r4
 8009198:	bf04      	itt	eq
 800919a:	2301      	moveq	r3, #1
 800919c:	61a3      	streq	r3, [r4, #24]
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 f820 	bl	80091e4 <__sfp>
 80091a4:	6060      	str	r0, [r4, #4]
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 f81c 	bl	80091e4 <__sfp>
 80091ac:	60a0      	str	r0, [r4, #8]
 80091ae:	4620      	mov	r0, r4
 80091b0:	f000 f818 	bl	80091e4 <__sfp>
 80091b4:	2200      	movs	r2, #0
 80091b6:	60e0      	str	r0, [r4, #12]
 80091b8:	2104      	movs	r1, #4
 80091ba:	6860      	ldr	r0, [r4, #4]
 80091bc:	f7ff ff82 	bl	80090c4 <std>
 80091c0:	68a0      	ldr	r0, [r4, #8]
 80091c2:	2201      	movs	r2, #1
 80091c4:	2109      	movs	r1, #9
 80091c6:	f7ff ff7d 	bl	80090c4 <std>
 80091ca:	68e0      	ldr	r0, [r4, #12]
 80091cc:	2202      	movs	r2, #2
 80091ce:	2112      	movs	r1, #18
 80091d0:	f7ff ff78 	bl	80090c4 <std>
 80091d4:	2301      	movs	r3, #1
 80091d6:	61a3      	str	r3, [r4, #24]
 80091d8:	e7d2      	b.n	8009180 <__sinit+0xc>
 80091da:	bf00      	nop
 80091dc:	080099ac 	.word	0x080099ac
 80091e0:	0800910d 	.word	0x0800910d

080091e4 <__sfp>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	4607      	mov	r7, r0
 80091e8:	f7ff ffac 	bl	8009144 <__sfp_lock_acquire>
 80091ec:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <__sfp+0x84>)
 80091ee:	681e      	ldr	r6, [r3, #0]
 80091f0:	69b3      	ldr	r3, [r6, #24]
 80091f2:	b913      	cbnz	r3, 80091fa <__sfp+0x16>
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff ffbd 	bl	8009174 <__sinit>
 80091fa:	3648      	adds	r6, #72	; 0x48
 80091fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009200:	3b01      	subs	r3, #1
 8009202:	d503      	bpl.n	800920c <__sfp+0x28>
 8009204:	6833      	ldr	r3, [r6, #0]
 8009206:	b30b      	cbz	r3, 800924c <__sfp+0x68>
 8009208:	6836      	ldr	r6, [r6, #0]
 800920a:	e7f7      	b.n	80091fc <__sfp+0x18>
 800920c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009210:	b9d5      	cbnz	r5, 8009248 <__sfp+0x64>
 8009212:	4b16      	ldr	r3, [pc, #88]	; (800926c <__sfp+0x88>)
 8009214:	60e3      	str	r3, [r4, #12]
 8009216:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800921a:	6665      	str	r5, [r4, #100]	; 0x64
 800921c:	f000 f847 	bl	80092ae <__retarget_lock_init_recursive>
 8009220:	f7ff ff96 	bl	8009150 <__sfp_lock_release>
 8009224:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009228:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800922c:	6025      	str	r5, [r4, #0]
 800922e:	61a5      	str	r5, [r4, #24]
 8009230:	2208      	movs	r2, #8
 8009232:	4629      	mov	r1, r5
 8009234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009238:	f7ff f9d4 	bl	80085e4 <memset>
 800923c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009244:	4620      	mov	r0, r4
 8009246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009248:	3468      	adds	r4, #104	; 0x68
 800924a:	e7d9      	b.n	8009200 <__sfp+0x1c>
 800924c:	2104      	movs	r1, #4
 800924e:	4638      	mov	r0, r7
 8009250:	f7ff ff62 	bl	8009118 <__sfmoreglue>
 8009254:	4604      	mov	r4, r0
 8009256:	6030      	str	r0, [r6, #0]
 8009258:	2800      	cmp	r0, #0
 800925a:	d1d5      	bne.n	8009208 <__sfp+0x24>
 800925c:	f7ff ff78 	bl	8009150 <__sfp_lock_release>
 8009260:	230c      	movs	r3, #12
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	e7ee      	b.n	8009244 <__sfp+0x60>
 8009266:	bf00      	nop
 8009268:	080099ac 	.word	0x080099ac
 800926c:	ffff0001 	.word	0xffff0001

08009270 <_fwalk_reent>:
 8009270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009274:	4606      	mov	r6, r0
 8009276:	4688      	mov	r8, r1
 8009278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800927c:	2700      	movs	r7, #0
 800927e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009282:	f1b9 0901 	subs.w	r9, r9, #1
 8009286:	d505      	bpl.n	8009294 <_fwalk_reent+0x24>
 8009288:	6824      	ldr	r4, [r4, #0]
 800928a:	2c00      	cmp	r4, #0
 800928c:	d1f7      	bne.n	800927e <_fwalk_reent+0xe>
 800928e:	4638      	mov	r0, r7
 8009290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009294:	89ab      	ldrh	r3, [r5, #12]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d907      	bls.n	80092aa <_fwalk_reent+0x3a>
 800929a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800929e:	3301      	adds	r3, #1
 80092a0:	d003      	beq.n	80092aa <_fwalk_reent+0x3a>
 80092a2:	4629      	mov	r1, r5
 80092a4:	4630      	mov	r0, r6
 80092a6:	47c0      	blx	r8
 80092a8:	4307      	orrs	r7, r0
 80092aa:	3568      	adds	r5, #104	; 0x68
 80092ac:	e7e9      	b.n	8009282 <_fwalk_reent+0x12>

080092ae <__retarget_lock_init_recursive>:
 80092ae:	4770      	bx	lr

080092b0 <__retarget_lock_acquire_recursive>:
 80092b0:	4770      	bx	lr

080092b2 <__retarget_lock_release_recursive>:
 80092b2:	4770      	bx	lr

080092b4 <__swhatbuf_r>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	460e      	mov	r6, r1
 80092b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092bc:	2900      	cmp	r1, #0
 80092be:	b096      	sub	sp, #88	; 0x58
 80092c0:	4614      	mov	r4, r2
 80092c2:	461d      	mov	r5, r3
 80092c4:	da08      	bge.n	80092d8 <__swhatbuf_r+0x24>
 80092c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	602a      	str	r2, [r5, #0]
 80092ce:	061a      	lsls	r2, r3, #24
 80092d0:	d410      	bmi.n	80092f4 <__swhatbuf_r+0x40>
 80092d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092d6:	e00e      	b.n	80092f6 <__swhatbuf_r+0x42>
 80092d8:	466a      	mov	r2, sp
 80092da:	f000 f907 	bl	80094ec <_fstat_r>
 80092de:	2800      	cmp	r0, #0
 80092e0:	dbf1      	blt.n	80092c6 <__swhatbuf_r+0x12>
 80092e2:	9a01      	ldr	r2, [sp, #4]
 80092e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092ec:	425a      	negs	r2, r3
 80092ee:	415a      	adcs	r2, r3
 80092f0:	602a      	str	r2, [r5, #0]
 80092f2:	e7ee      	b.n	80092d2 <__swhatbuf_r+0x1e>
 80092f4:	2340      	movs	r3, #64	; 0x40
 80092f6:	2000      	movs	r0, #0
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	b016      	add	sp, #88	; 0x58
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009300 <__smakebuf_r>:
 8009300:	898b      	ldrh	r3, [r1, #12]
 8009302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009304:	079d      	lsls	r5, r3, #30
 8009306:	4606      	mov	r6, r0
 8009308:	460c      	mov	r4, r1
 800930a:	d507      	bpl.n	800931c <__smakebuf_r+0x1c>
 800930c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	6123      	str	r3, [r4, #16]
 8009314:	2301      	movs	r3, #1
 8009316:	6163      	str	r3, [r4, #20]
 8009318:	b002      	add	sp, #8
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	ab01      	add	r3, sp, #4
 800931e:	466a      	mov	r2, sp
 8009320:	f7ff ffc8 	bl	80092b4 <__swhatbuf_r>
 8009324:	9900      	ldr	r1, [sp, #0]
 8009326:	4605      	mov	r5, r0
 8009328:	4630      	mov	r0, r6
 800932a:	f7ff f9cf 	bl	80086cc <_malloc_r>
 800932e:	b948      	cbnz	r0, 8009344 <__smakebuf_r+0x44>
 8009330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009334:	059a      	lsls	r2, r3, #22
 8009336:	d4ef      	bmi.n	8009318 <__smakebuf_r+0x18>
 8009338:	f023 0303 	bic.w	r3, r3, #3
 800933c:	f043 0302 	orr.w	r3, r3, #2
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	e7e3      	b.n	800930c <__smakebuf_r+0xc>
 8009344:	4b0d      	ldr	r3, [pc, #52]	; (800937c <__smakebuf_r+0x7c>)
 8009346:	62b3      	str	r3, [r6, #40]	; 0x28
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	6020      	str	r0, [r4, #0]
 800934c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	9b00      	ldr	r3, [sp, #0]
 8009354:	6163      	str	r3, [r4, #20]
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	6120      	str	r0, [r4, #16]
 800935a:	b15b      	cbz	r3, 8009374 <__smakebuf_r+0x74>
 800935c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009360:	4630      	mov	r0, r6
 8009362:	f000 f8d5 	bl	8009510 <_isatty_r>
 8009366:	b128      	cbz	r0, 8009374 <__smakebuf_r+0x74>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	f023 0303 	bic.w	r3, r3, #3
 800936e:	f043 0301 	orr.w	r3, r3, #1
 8009372:	81a3      	strh	r3, [r4, #12]
 8009374:	89a0      	ldrh	r0, [r4, #12]
 8009376:	4305      	orrs	r5, r0
 8009378:	81a5      	strh	r5, [r4, #12]
 800937a:	e7cd      	b.n	8009318 <__smakebuf_r+0x18>
 800937c:	0800910d 	.word	0x0800910d

08009380 <__malloc_lock>:
 8009380:	4801      	ldr	r0, [pc, #4]	; (8009388 <__malloc_lock+0x8>)
 8009382:	f7ff bf95 	b.w	80092b0 <__retarget_lock_acquire_recursive>
 8009386:	bf00      	nop
 8009388:	2000074c 	.word	0x2000074c

0800938c <__malloc_unlock>:
 800938c:	4801      	ldr	r0, [pc, #4]	; (8009394 <__malloc_unlock+0x8>)
 800938e:	f7ff bf90 	b.w	80092b2 <__retarget_lock_release_recursive>
 8009392:	bf00      	nop
 8009394:	2000074c 	.word	0x2000074c

08009398 <_raise_r>:
 8009398:	291f      	cmp	r1, #31
 800939a:	b538      	push	{r3, r4, r5, lr}
 800939c:	4604      	mov	r4, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	d904      	bls.n	80093ac <_raise_r+0x14>
 80093a2:	2316      	movs	r3, #22
 80093a4:	6003      	str	r3, [r0, #0]
 80093a6:	f04f 30ff 	mov.w	r0, #4294967295
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093ae:	b112      	cbz	r2, 80093b6 <_raise_r+0x1e>
 80093b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093b4:	b94b      	cbnz	r3, 80093ca <_raise_r+0x32>
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 f830 	bl	800941c <_getpid_r>
 80093bc:	462a      	mov	r2, r5
 80093be:	4601      	mov	r1, r0
 80093c0:	4620      	mov	r0, r4
 80093c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093c6:	f000 b817 	b.w	80093f8 <_kill_r>
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d00a      	beq.n	80093e4 <_raise_r+0x4c>
 80093ce:	1c59      	adds	r1, r3, #1
 80093d0:	d103      	bne.n	80093da <_raise_r+0x42>
 80093d2:	2316      	movs	r3, #22
 80093d4:	6003      	str	r3, [r0, #0]
 80093d6:	2001      	movs	r0, #1
 80093d8:	e7e7      	b.n	80093aa <_raise_r+0x12>
 80093da:	2400      	movs	r4, #0
 80093dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093e0:	4628      	mov	r0, r5
 80093e2:	4798      	blx	r3
 80093e4:	2000      	movs	r0, #0
 80093e6:	e7e0      	b.n	80093aa <_raise_r+0x12>

080093e8 <raise>:
 80093e8:	4b02      	ldr	r3, [pc, #8]	; (80093f4 <raise+0xc>)
 80093ea:	4601      	mov	r1, r0
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	f7ff bfd3 	b.w	8009398 <_raise_r>
 80093f2:	bf00      	nop
 80093f4:	2000021c 	.word	0x2000021c

080093f8 <_kill_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	4d07      	ldr	r5, [pc, #28]	; (8009418 <_kill_r+0x20>)
 80093fc:	2300      	movs	r3, #0
 80093fe:	4604      	mov	r4, r0
 8009400:	4608      	mov	r0, r1
 8009402:	4611      	mov	r1, r2
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	f7fa fff7 	bl	80043f8 <_kill>
 800940a:	1c43      	adds	r3, r0, #1
 800940c:	d102      	bne.n	8009414 <_kill_r+0x1c>
 800940e:	682b      	ldr	r3, [r5, #0]
 8009410:	b103      	cbz	r3, 8009414 <_kill_r+0x1c>
 8009412:	6023      	str	r3, [r4, #0]
 8009414:	bd38      	pop	{r3, r4, r5, pc}
 8009416:	bf00      	nop
 8009418:	20000750 	.word	0x20000750

0800941c <_getpid_r>:
 800941c:	f7fa bfe4 	b.w	80043e8 <_getpid>

08009420 <__sread>:
 8009420:	b510      	push	{r4, lr}
 8009422:	460c      	mov	r4, r1
 8009424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009428:	f000 f894 	bl	8009554 <_read_r>
 800942c:	2800      	cmp	r0, #0
 800942e:	bfab      	itete	ge
 8009430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009432:	89a3      	ldrhlt	r3, [r4, #12]
 8009434:	181b      	addge	r3, r3, r0
 8009436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800943a:	bfac      	ite	ge
 800943c:	6563      	strge	r3, [r4, #84]	; 0x54
 800943e:	81a3      	strhlt	r3, [r4, #12]
 8009440:	bd10      	pop	{r4, pc}

08009442 <__swrite>:
 8009442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009446:	461f      	mov	r7, r3
 8009448:	898b      	ldrh	r3, [r1, #12]
 800944a:	05db      	lsls	r3, r3, #23
 800944c:	4605      	mov	r5, r0
 800944e:	460c      	mov	r4, r1
 8009450:	4616      	mov	r6, r2
 8009452:	d505      	bpl.n	8009460 <__swrite+0x1e>
 8009454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009458:	2302      	movs	r3, #2
 800945a:	2200      	movs	r2, #0
 800945c:	f000 f868 	bl	8009530 <_lseek_r>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	4632      	mov	r2, r6
 800946e:	463b      	mov	r3, r7
 8009470:	4628      	mov	r0, r5
 8009472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009476:	f000 b817 	b.w	80094a8 <_write_r>

0800947a <__sseek>:
 800947a:	b510      	push	{r4, lr}
 800947c:	460c      	mov	r4, r1
 800947e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009482:	f000 f855 	bl	8009530 <_lseek_r>
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	bf15      	itete	ne
 800948c:	6560      	strne	r0, [r4, #84]	; 0x54
 800948e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009496:	81a3      	strheq	r3, [r4, #12]
 8009498:	bf18      	it	ne
 800949a:	81a3      	strhne	r3, [r4, #12]
 800949c:	bd10      	pop	{r4, pc}

0800949e <__sclose>:
 800949e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a2:	f000 b813 	b.w	80094cc <_close_r>
	...

080094a8 <_write_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4d07      	ldr	r5, [pc, #28]	; (80094c8 <_write_r+0x20>)
 80094ac:	4604      	mov	r4, r0
 80094ae:	4608      	mov	r0, r1
 80094b0:	4611      	mov	r1, r2
 80094b2:	2200      	movs	r2, #0
 80094b4:	602a      	str	r2, [r5, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	f7fa ffd5 	bl	8004466 <_write>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d102      	bne.n	80094c6 <_write_r+0x1e>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	b103      	cbz	r3, 80094c6 <_write_r+0x1e>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
 80094c8:	20000750 	.word	0x20000750

080094cc <_close_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d06      	ldr	r5, [pc, #24]	; (80094e8 <_close_r+0x1c>)
 80094d0:	2300      	movs	r3, #0
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	f7fa ffe1 	bl	800449e <_close>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_close_r+0x1a>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_close_r+0x1a>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	20000750 	.word	0x20000750

080094ec <_fstat_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d07      	ldr	r5, [pc, #28]	; (800950c <_fstat_r+0x20>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	f7fa ffdc 	bl	80044b6 <_fstat>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d102      	bne.n	8009508 <_fstat_r+0x1c>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	b103      	cbz	r3, 8009508 <_fstat_r+0x1c>
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	bd38      	pop	{r3, r4, r5, pc}
 800950a:	bf00      	nop
 800950c:	20000750 	.word	0x20000750

08009510 <_isatty_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4d06      	ldr	r5, [pc, #24]	; (800952c <_isatty_r+0x1c>)
 8009514:	2300      	movs	r3, #0
 8009516:	4604      	mov	r4, r0
 8009518:	4608      	mov	r0, r1
 800951a:	602b      	str	r3, [r5, #0]
 800951c:	f7fa ffdb 	bl	80044d6 <_isatty>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_isatty_r+0x1a>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	b103      	cbz	r3, 800952a <_isatty_r+0x1a>
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	20000750 	.word	0x20000750

08009530 <_lseek_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4d07      	ldr	r5, [pc, #28]	; (8009550 <_lseek_r+0x20>)
 8009534:	4604      	mov	r4, r0
 8009536:	4608      	mov	r0, r1
 8009538:	4611      	mov	r1, r2
 800953a:	2200      	movs	r2, #0
 800953c:	602a      	str	r2, [r5, #0]
 800953e:	461a      	mov	r2, r3
 8009540:	f7fa ffd4 	bl	80044ec <_lseek>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_lseek_r+0x1e>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	b103      	cbz	r3, 800954e <_lseek_r+0x1e>
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	20000750 	.word	0x20000750

08009554 <_read_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d07      	ldr	r5, [pc, #28]	; (8009574 <_read_r+0x20>)
 8009558:	4604      	mov	r4, r0
 800955a:	4608      	mov	r0, r1
 800955c:	4611      	mov	r1, r2
 800955e:	2200      	movs	r2, #0
 8009560:	602a      	str	r2, [r5, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	f7fa ff62 	bl	800442c <_read>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_read_r+0x1e>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_read_r+0x1e>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	20000750 	.word	0x20000750

08009578 <_init>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	bf00      	nop
 800957c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957e:	bc08      	pop	{r3}
 8009580:	469e      	mov	lr, r3
 8009582:	4770      	bx	lr

08009584 <_fini>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	bf00      	nop
 8009588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958a:	bc08      	pop	{r3}
 800958c:	469e      	mov	lr, r3
 800958e:	4770      	bx	lr
