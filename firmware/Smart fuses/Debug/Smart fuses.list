
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009820  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de0  08009de0  0002026c  2**0
                  CONTENTS
  4 .ARM          00000000  08009de0  08009de0  0002026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009de0  08009de0  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08009df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  2000026c  0800a05c  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  0800a05c  00020a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002de74  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d2  00000000  00000000  0004e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  000527e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  00053ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034c33  00000000  00000000  00055470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001823f  00000000  00000000  0008a0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001372f0  00000000  00000000  000a22e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d95d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b78  00000000  00000000  001d9624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080099c8 	.word	0x080099c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000270 	.word	0x20000270
 80001fc:	080099c8 	.word	0x080099c8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002a6:	f107 031c 	add.w	r3, r7, #28
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002c4:	4a2f      	ldr	r2, [pc, #188]	; (8000384 <MX_ADC1_Init+0xe4>)
 80002c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c8:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ce:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d4:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002da:	4b29      	ldr	r3, [pc, #164]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002e0:	4b27      	ldr	r3, [pc, #156]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002e2:	2204      	movs	r2, #4
 80002e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002e6:	4b26      	ldr	r3, [pc, #152]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ec:	4b24      	ldr	r3, [pc, #144]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f8:	4b21      	ldr	r3, [pc, #132]	; (8000380 <MX_ADC1_Init+0xe0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000300:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000302:	2200      	movs	r2, #0
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000306:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000308:	2200      	movs	r2, #0
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800030c:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_ADC1_Init+0xe0>)
 800030e:	2200      	movs	r2, #0
 8000310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000316:	2200      	movs	r2, #0
 8000318:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_ADC1_Init+0xe0>)
 800031c:	2200      	movs	r2, #0
 800031e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <MX_ADC1_Init+0xe0>)
 8000324:	f004 fe1c 	bl	8004f60 <HAL_ADC_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800032e:	f003 fa69 	bl	8003804 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000336:	f107 031c 	add.w	r3, r7, #28
 800033a:	4619      	mov	r1, r3
 800033c:	4810      	ldr	r0, [pc, #64]	; (8000380 <MX_ADC1_Init+0xe0>)
 800033e:	f005 fb83 	bl	8005a48 <HAL_ADCEx_MultiModeConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000348:	f003 fa5c 	bl	8003804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_ADC1_Init+0xe8>)
 800034e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000350:	2306      	movs	r3, #6
 8000352:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000358:	237f      	movs	r3, #127	; 0x7f
 800035a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800035c:	2304      	movs	r3, #4
 800035e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_ADC1_Init+0xe0>)
 800036a:	f004 ff4b 	bl	8005204 <HAL_ADC_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000374:	f003 fa46 	bl	8003804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000378:	bf00      	nop
 800037a:	3728      	adds	r7, #40	; 0x28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000288 	.word	0x20000288
 8000384:	50040000 	.word	0x50040000
 8000388:	36902000 	.word	0x36902000

0800038c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b0b2      	sub	sp, #200	; 0xc8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a4:	f107 031c 	add.w	r3, r7, #28
 80003a8:	2298      	movs	r2, #152	; 0x98
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f008 fb41 	bl	8008a34 <memset>
  if(adcHandle->Instance==ADC1)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <HAL_ADC_MspInit+0x134>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d17d      	bne.n	80004b8 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80003d2:	2308      	movs	r3, #8
 80003d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003da:	2302      	movs	r3, #2
 80003dc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003de:	2302      	movs	r3, #2
 80003e0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003e6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	4618      	mov	r0, r3
 80003ee:	f007 fcb5 	bl	8007d5c <HAL_RCCEx_PeriphCLKConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80003f8:	f003 fa04 	bl	8003804 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003fc:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a30      	ldr	r2, [pc, #192]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000408:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000410:	61bb      	str	r3, [r7, #24]
 8000412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000418:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800042e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000430:	4a24      	ldr	r2, [pc, #144]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800043a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000448:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 800044a:	f043 0302 	orr.w	r3, r3, #2
 800044e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <HAL_ADC_MspInit+0x138>)
 8000452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000454:	f003 0302 	and.w	r3, r3, #2
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800045c:	2301      	movs	r3, #1
 800045e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000462:	230b      	movs	r3, #11
 8000464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000472:	4619      	mov	r1, r3
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f006 fae8 	bl	8006a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800047c:	2330      	movs	r3, #48	; 0x30
 800047e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000482:	230b      	movs	r3, #11
 8000484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000492:	4619      	mov	r1, r3
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <HAL_ADC_MspInit+0x13c>)
 8000496:	f006 fad9 	bl	8006a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800049a:	2303      	movs	r3, #3
 800049c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004a0:	230b      	movs	r3, #11
 80004a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80004b0:	4619      	mov	r1, r3
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <HAL_ADC_MspInit+0x140>)
 80004b4:	f006 faca 	bl	8006a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80004b8:	bf00      	nop
 80004ba:	37c8      	adds	r7, #200	; 0xc8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	50040000 	.word	0x50040000
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000800 	.word	0x48000800
 80004cc:	48000400 	.word	0x48000400

080004d0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MX_CAN1_Init+0x64>)
 80004d6:	4a18      	ldr	r2, [pc, #96]	; (8000538 <MX_CAN1_Init+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_CAN1_Init+0x64>)
 80004dc:	2206      	movs	r2, #6
 80004de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_CAN1_Init+0x64>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_CAN1_Init+0x64>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_CAN1_Init+0x64>)
 80004ee:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80004f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_CAN1_Init+0x64>)
 80004f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80004fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <MX_CAN1_Init+0x64>)
 800050a:	2200      	movs	r2, #0
 800050c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_CAN1_Init+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <MX_CAN1_Init+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_CAN1_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <MX_CAN1_Init+0x64>)
 8000522:	f005 fb35 	bl	8005b90 <HAL_CAN_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800052c:	f003 f96a 	bl	8003804 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200002f0 	.word	0x200002f0
 8000538:	40006400 	.word	0x40006400

0800053c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <HAL_CAN_MspInit+0xa0>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d139      	bne.n	80005d2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_CAN_MspInit+0xa4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800058e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005a0:	2309      	movs	r3, #9
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f006 fa4d 	bl	8006a4c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2014      	movs	r0, #20
 80005b8:	f006 fa11 	bl	80069de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005bc:	2014      	movs	r0, #20
 80005be:	f006 fa2a 	bl	8006a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2015      	movs	r0, #21
 80005c8:	f006 fa09 	bl	80069de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005cc:	2015      	movs	r0, #21
 80005ce:	f006 fa22 	bl	8006a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d2:	bf00      	nop
 80005d4:	3728      	adds	r7, #40	; 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40006400 	.word	0x40006400
 80005e0:	40021000 	.word	0x40021000

080005e4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>:
{
	return this->channels[size_t(channel)].current;
}

template <uint32_t num_of_sf>
void SmartFuseHandler<num_of_sf>::emplaceBack(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef *const hspi, std::array < ChannelSettings, number_of_channels_per_fuse >channels_settings)
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b087      	sub	sp, #28
 8000600:	af02      	add	r7, sp, #8
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	603b      	str	r3, [r7, #0]
{
	this->smart_fuses.emplace_back(port, pin, hspi, channels_settings);
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	463b      	mov	r3, r7
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	f107 0108 	add.w	r1, r7, #8
 8000614:	f107 0420 	add.w	r4, r7, #32
 8000618:	9400      	str	r4, [sp, #0]
 800061a:	f001 fcef 	bl	8001ffc <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EEEEEvDpOT_>
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bd90      	pop	{r4, r7, pc}

08000626 <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvP9SmartFuseEEE>:
template <uint32_t num_of_sf>
void SmartFuseHandler<num_of_sf>::emplaceBack(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef *const hspi, std::array < ChannelSettings, number_of_channels_per_fuse >channels_settings, const uint32_t interval, etl::delegate<void(SmartFuse*)> action)
 8000626:	b590      	push	{r4, r7, lr}
 8000628:	b089      	sub	sp, #36	; 0x24
 800062a:	af04      	add	r7, sp, #16
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	603b      	str	r3, [r7, #0]
{
	this->smart_fuses.emplace_back(port, pin, hspi, channels_settings, interval, action);
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	463c      	mov	r4, r7
 8000638:	1d3a      	adds	r2, r7, #4
 800063a:	f107 0108 	add.w	r1, r7, #8
 800063e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	4623      	mov	r3, r4
 8000652:	f001 fd2a 	bl	80020aa <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EESA_RNS_8delegateIFvPS1_EEEEEEvDpOT_>
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}

0800065e <_ZN16SmartFuseHandlerILm4EE9handleAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::handleAll()
 800065e:	b580      	push	{r7, lr}
 8000660:	b088      	sub	sp, #32
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 8000666:	2300      	movs	r3, #0
 8000668:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fd8b 	bl	800218c <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 8000676:	61b8      	str	r0, [r7, #24]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fd92 	bl	80021a4 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 8000680:	6138      	str	r0, [r7, #16]
 8000682:	69ba      	ldr	r2, [r7, #24]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	429a      	cmp	r2, r3
 8000688:	d00f      	beq.n	80006aa <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x4c>
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.handle();
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f000 fd78 	bl	8001184 <_ZN9SmartFuse6handleEv>
 8000694:	4603      	mov	r3, r0
 8000696:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 8000698:	7afb      	ldrb	r3, [r7, #11]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x44>
 800069e:	7afb      	ldrb	r3, [r7, #11]
 80006a0:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	3374      	adds	r3, #116	; 0x74
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	e7eb      	b.n	8000682 <_ZN16SmartFuseHandlerILm4EE9handleAllEv+0x24>
	}

	return result;
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <_ZN16SmartFuseHandlerILm4EE7initAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::initAll()
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 80006bc:	2300      	movs	r3, #0
 80006be:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fd60 	bl	800218c <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 80006cc:	61b8      	str	r0, [r7, #24]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fd67 	bl	80021a4 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 80006d6:	6138      	str	r0, [r7, #16]
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d00f      	beq.n	8000700 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x4c>
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.init();
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f000 fcf2 	bl	80010ce <_ZN9SmartFuse4initEv>
 80006ea:	4603      	mov	r3, r0
 80006ec:	72fb      	strb	r3, [r7, #11]
		if(x != SmartFuseState::Ok) result = x;
 80006ee:	7afb      	ldrb	r3, [r7, #11]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x44>
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	3374      	adds	r3, #116	; 0x74
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	e7eb      	b.n	80006d8 <_ZN16SmartFuseHandlerILm4EE7initAllEv+0x24>
	}

	return result;
 8000700:	7ffb      	ldrb	r3, [r7, #31]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <_ZN16SmartFuseHandlerILm4EE9enableAllEv>:

template <uint32_t num_of_sf>
SmartFuseState SmartFuseHandler<num_of_sf>::enableAll()
 800070a:	b580      	push	{r7, lr}
 800070c:	b088      	sub	sp, #32
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
{
	SmartFuseState result = SmartFuseState::Ok;
 8000712:	2300      	movs	r3, #0
 8000714:	77fb      	strb	r3, [r7, #31]

	for(auto &smart_fuse : smart_fuses)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fd35 	bl	800218c <_ZN3etl7ivectorI9SmartFuseE5beginEv>
 8000722:	61b8      	str	r0, [r7, #24]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd3c 	bl	80021a4 <_ZN3etl7ivectorI9SmartFuseE3endEv>
 800072c:	6138      	str	r0, [r7, #16]
 800072e:	69ba      	ldr	r2, [r7, #24]
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	429a      	cmp	r2, r3
 8000734:	d012      	beq.n	800075c <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x52>
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	60fb      	str	r3, [r7, #12]
	{
		SmartFuseState x = smart_fuse.enable();
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f000 fce2 	bl	8001104 <_ZN9SmartFuse6enableEv>
 8000740:	4603      	mov	r3, r0
 8000742:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(5);
 8000744:	2005      	movs	r0, #5
 8000746:	f004 fa47 	bl	8004bd8 <HAL_Delay>
		if(x != SmartFuseState::Ok) result = x;
 800074a:	7afb      	ldrb	r3, [r7, #11]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x4a>
 8000750:	7afb      	ldrb	r3, [r7, #11]
 8000752:	77fb      	strb	r3, [r7, #31]
	for(auto &smart_fuse : smart_fuses)
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	3374      	adds	r3, #116	; 0x74
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	e7e8      	b.n	800072e <_ZN16SmartFuseHandlerILm4EE9enableAllEv+0x24>
	}

	return result;
 800075c:	7ffb      	ldrb	r3, [r7, #31]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <_ZN16SmartFuseHandlerILm4EE9getStatesEv>:

	return result;
}

template <uint32_t num_of_sf>
std::array < SmartFuseState, num_of_sf >  SmartFuseHandler<num_of_sf>::getStates()
 8000766:	b590      	push	{r4, r7, lr}
 8000768:	b087      	sub	sp, #28
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
{
	std::array < SmartFuseState, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d817      	bhi.n	80007a8 <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0x42>
	{
		x[i] = this->smart_fuses[i].getState();
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6979      	ldr	r1, [r7, #20]
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fd2c 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8000782:	4603      	mov	r3, r0
 8000784:	4618      	mov	r0, r3
 8000786:	f000 ffcd 	bl	8001724 <_ZNK9SmartFuse8getStateEv>
 800078a:	4603      	mov	r3, r0
 800078c:	461c      	mov	r4, r3
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	6979      	ldr	r1, [r7, #20]
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fd11 	bl	80021bc <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 800079a:	4603      	mov	r3, r0
 800079c:	4622      	mov	r2, r4
 800079e:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < num_of_sf; i++)
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	3301      	adds	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	e7e4      	b.n	8000772 <_ZN16SmartFuseHandlerILm4EE9getStatesEv+0xc>
	}

	return x;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	2300      	movs	r3, #0
 80007ae:	7c3a      	ldrb	r2, [r7, #16]
 80007b0:	f362 0307 	bfi	r3, r2, #0, #8
 80007b4:	7c7a      	ldrb	r2, [r7, #17]
 80007b6:	f362 230f 	bfi	r3, r2, #8, #8
 80007ba:	7cba      	ldrb	r2, [r7, #18]
 80007bc:	f362 4317 	bfi	r3, r2, #16, #8
 80007c0:	7cfa      	ldrb	r2, [r7, #19]
 80007c2:	f362 631f 	bfi	r3, r2, #24, #8
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	371c      	adds	r7, #28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd90      	pop	{r4, r7, pc}

080007ce <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>:

template <uint32_t num_of_sf>
std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsStates()
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	6039      	str	r1, [r7, #0]
{
	std::array < std::array < ChannelState, number_of_channels_per_fuse >, num_of_sf > x;

	for(size_t i = 0; i < num_of_sf; i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d81b      	bhi.n	800081a <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0x4c>
	{
		x[i] = this->smart_fuses[i].getChannelsStates();
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	6979      	ldr	r1, [r7, #20]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fcf7 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 ffb5 	bl	8001764 <_ZN9SmartFuse17getChannelsStatesEv>
 80007fa:	6979      	ldr	r1, [r7, #20]
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f001 fcfe 	bl	80021fe <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	6010      	str	r0, [r2, #0]
 800080e:	889b      	ldrh	r3, [r3, #4]
 8000810:	8093      	strh	r3, [r2, #4]
	for(size_t i = 0; i < num_of_sf; i++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e7e0      	b.n	80007dc <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv+0xe>
	}

	return x;
 800081a:	bf00      	nop
}
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>:

template <uint32_t num_of_sf>
std::array < std::array < uint16_t, number_of_channels_per_fuse >, num_of_sf > SmartFuseHandler<num_of_sf>::getChannelsCurrents()
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
{
	std::array < std::array < uint16_t, number_of_channels_per_fuse >, num_of_sf > x;
	for(size_t i = 0; i < num_of_sf; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	2b03      	cmp	r3, #3
 8000836:	d81b      	bhi.n	8000870 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0x4c>
	{
		x[i] = this->smart_fuses[i].getChannelsCurrents();
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	6979      	ldr	r1, [r7, #20]
 800083c:	4618      	mov	r0, r3
 800083e:	f001 fccc 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8000842:	4602      	mov	r2, r0
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f000 ffcf 	bl	80017ee <_ZN9SmartFuse19getChannelsCurrentsEv>
 8000850:	6979      	ldr	r1, [r7, #20]
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f001 fce2 	bl	800221c <_ZNSt5arrayIS_ItLj6EELj4EEixEj>
 8000858:	4603      	mov	r3, r0
 800085a:	461c      	mov	r4, r3
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000862:	6020      	str	r0, [r4, #0]
 8000864:	6061      	str	r1, [r4, #4]
 8000866:	60a2      	str	r2, [r4, #8]
	for(size_t i = 0; i < num_of_sf; i++)
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	e7e0      	b.n	8000832 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv+0xe>
	}

	return x;
 8000870:	bf00      	nop
}
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	371c      	adds	r7, #28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}

0800087a <_ZNK3etl7ibitset5countEv>:
    }

    //*************************************************************************
    /// Count the number of bits set.
    //*************************************************************************
    size_t count() const
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
    {
      size_t n = 0UL;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]

      for (size_t i = 0UL; i < SIZE; ++i)
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	429a      	cmp	r2, r3
 8000892:	d210      	bcs.n	80008b6 <_ZNK3etl7ibitset5countEv+0x3c>
      {
        n += etl::count_bits(pdata[i]);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4413      	add	r3, r2
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 faa4 	bl	8001dec <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4413      	add	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
      for (size_t i = 0UL; i < SIZE; ++i)
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	e7e9      	b.n	800088a <_ZNK3etl7ibitset5countEv+0x10>
      }

      return n;
 80008b6:	68fb      	ldr	r3, [r7, #12]
    }
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN3etl7ibitset5resetEv>:
    }

    //*************************************************************************
    /// Resets the bitset.
    //*************************************************************************
    ibitset& reset()
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
    {
      for (size_t i = 0UL; i < SIZE; ++i)
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d209      	bcs.n	80008ea <_ZN3etl7ibitset5resetEv+0x2a>
      {
        pdata[i] = ALL_CLEAR;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68da      	ldr	r2, [r3, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	4413      	add	r3, r2
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
      for (size_t i = 0UL; i < SIZE; ++i)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e7f0      	b.n	80008cc <_ZN3etl7ibitset5resetEv+0xc>
      }

      return *this;
 80008ea:	687b      	ldr	r3, [r7, #4]
    }
 80008ec:	4618      	mov	r0, r3
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <_ZN3etl7ibitset10initialiseEy>:
  protected:

    //*************************************************************************
    /// Initialise from an unsigned long long.
    //*************************************************************************
    ibitset& initialise(unsigned long long value)
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	e9c7 2300 	strd	r2, r3, [r7]
    {
      reset();
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff ffdb 	bl	80008c0 <_ZN3etl7ibitset5resetEv>

      const size_t SHIFT = (integral_limits<unsigned long long>::bits <= (int)BITS_PER_ELEMENT) ? 0 : BITS_PER_ELEMENT;
 800090a:	2308      	movs	r3, #8
 800090c:	613b      	str	r3, [r7, #16]
      {
        pdata[0] = element_t(value);
      }
      else
      {
        size_t i = 0UL;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

        while ((value != 0) && (i < SIZE))
 8000912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000916:	4313      	orrs	r3, r2
 8000918:	d01a      	beq.n	8000950 <_ZN3etl7ibitset10initialiseEy+0x58>
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	429a      	cmp	r2, r3
 8000922:	d215      	bcs.n	8000950 <_ZN3etl7ibitset10initialiseEy+0x58>
        {
          pdata[i++] = value & ALL_SET;
 8000924:	7838      	ldrb	r0, [r7, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	1c59      	adds	r1, r3, #1
 800092e:	6179      	str	r1, [r7, #20]
 8000930:	4413      	add	r3, r2
 8000932:	4602      	mov	r2, r0
 8000934:	701a      	strb	r2, [r3, #0]
          value = value >> SHIFT;
 8000936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	f04f 0300 	mov.w	r3, #0
 8000942:	0a02      	lsrs	r2, r0, #8
 8000944:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000948:	0a0b      	lsrs	r3, r1, #8
 800094a:	e9c7 2300 	strd	r2, r3, [r7]
        while ((value != 0) && (i < SIZE))
 800094e:	e7e0      	b.n	8000912 <_ZN3etl7ibitset10initialiseEy+0x1a>
        }
      }

      pdata[SIZE - 1] &= TOP_MASK;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	68da      	ldr	r2, [r3, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	3b01      	subs	r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	7819      	ldrb	r1, [r3, #0]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	68d8      	ldr	r0, [r3, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	3b01      	subs	r3, #1
 800096c:	4403      	add	r3, r0
 800096e:	400a      	ands	r2, r1
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	701a      	strb	r2, [r3, #0]

      return *this;
 8000974:	68fb      	ldr	r3, [r7, #12]
    }
 8000976:	4618      	mov	r0, r3
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <_ZN3etl7ibitsetC1EjjPh>:
    }

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    ibitset(size_t nbits_, size_t size_, element_t* pdata_)
 800097e:	b480      	push	{r7}
 8000980:	b087      	sub	sp, #28
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	603b      	str	r3, [r7, #0]
      : NBITS(nbits_),
        SIZE(size_),
        pdata(pdata_)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	60da      	str	r2, [r3, #12]
    {
      size_t allocated_bits = SIZE * BITS_PER_ELEMENT;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	617b      	str	r3, [r7, #20]
      size_t top_mask_shift = ((BITS_PER_ELEMENT - (allocated_bits - NBITS)) % BITS_PER_ELEMENT);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	685a      	ldr	r2, [r3, #4]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	613b      	str	r3, [r7, #16]
      TOP_MASK = element_t(top_mask_shift == 0 ? ALL_SET : ~(ALL_SET << top_mask_shift));
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <_ZN3etl7ibitsetC1EjjPh+0x4c>
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	e000      	b.n	80009cc <_ZN3etl7ibitsetC1EjjPh+0x4e>
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	701a      	strb	r2, [r3, #0]
    }
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4618      	mov	r0, r3
 80009d4:	371c      	adds	r7, #28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_ZN3etl7ibitsetD1Ev>:
    virtual ~ibitset()
    {
    }
#else
  protected:
    ~ibitset()
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
    {
    }
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_ZNSt5arrayIhLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6839      	ldr	r1, [r7, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f805 	bl	8000a12 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_ZNSt14__array_traitsIhLj3EE6_S_refERA3_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	4413      	add	r3, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <_ZN3etl6bitsetILj8EED1Ev>:
  /// Does not use std::string.
  ///\tparam MAXN The number of bits.
  ///\ingroup bitset
  //*************************************************************************
  template <const size_t MAXN>
  class bitset : public etl::ibitset
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ffd0 	bl	80009de <_ZN3etl7ibitsetD1Ev>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>:
    struct array
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00a      	beq.n	8000a6c <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	429c      	cmp	r4, r3
 8000a60:	d004      	beq.n	8000a6c <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x24>
 8000a62:	3c14      	subs	r4, #20
 8000a64:	4620      	mov	r0, r4
 8000a66:	f7ff ffe2 	bl	8000a2e <_ZN3etl6bitsetILj8EED1Ev>
 8000a6a:	e7f7      	b.n	8000a5c <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev+0x14>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd90      	pop	{r4, r7, pc}

08000a76 <_ZL11checkParitySt5arrayIhLj3EE>:
{
 8000a76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a7a:	b097      	sub	sp, #92	; 0x5c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	size_t buff = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	657b      	str	r3, [r7, #84]	; 0x54
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000a84:	f107 0408 	add.w	r4, r7, #8
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ffb1 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000a92:	4603      	mov	r3, r0
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	461d      	mov	r5, r3
 8000a9c:	4616      	mov	r6, r2
 8000a9e:	462a      	mov	r2, r5
 8000aa0:	4633      	mov	r3, r6
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f001 f9c9 	bl	8001e3a <_ZN3etl6bitsetILj8EEC1Ey>
 8000aa8:	3414      	adds	r4, #20
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ffa0 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2200      	movs	r2, #0
 8000abc:	469a      	mov	sl, r3
 8000abe:	4693      	mov	fp, r2
 8000ac0:	4652      	mov	r2, sl
 8000ac2:	465b      	mov	r3, fp
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f001 f9b8 	bl	8001e3a <_ZN3etl6bitsetILj8EEC1Ey>
 8000aca:	3414      	adds	r4, #20
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff8f 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2200      	movs	r2, #0
 8000ade:	4698      	mov	r8, r3
 8000ae0:	4691      	mov	r9, r2
 8000ae2:	4642      	mov	r2, r8
 8000ae4:	464b      	mov	r3, r9
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f001 f9a7 	bl	8001e3a <_ZN3etl6bitsetILj8EEC1Ey>
	for (auto &bit : bits) buff += bit.count();
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000af2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000af4:	f001 f9b9 	bl	8001e6a <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>
 8000af8:	6538      	str	r0, [r7, #80]	; 0x50
 8000afa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000afc:	f001 f9c1 	bl	8001e82 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>
 8000b00:	64b8      	str	r0, [r7, #72]	; 0x48
 8000b02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d00d      	beq.n	8000b26 <_ZL11checkParitySt5arrayIhLj3EE+0xb0>
 8000b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8000b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff feb2 	bl	800087a <_ZNK3etl7ibitset5countEv>
 8000b16:	4602      	mov	r2, r0
 8000b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b1a:	4413      	add	r3, r2
 8000b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8000b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b20:	3314      	adds	r3, #20
 8000b22:	653b      	str	r3, [r7, #80]	; 0x50
 8000b24:	e7ed      	b.n	8000b02 <_ZL11checkParitySt5arrayIhLj3EE+0x8c>
	return (buff % 2 == 0);
 8000b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf0c      	ite	eq
 8000b30:	2301      	moveq	r3, #1
 8000b32:	2300      	movne	r3, #0
 8000b34:	b2dc      	uxtb	r4, r3
	std::array< etl::bitset<8>, 3 > bits { x[0], x[1], x[2] };
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff84 	bl	8000a48 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EED1Ev>
	return (buff % 2 == 0);
 8000b40:	4623      	mov	r3, r4
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	375c      	adds	r7, #92	; 0x5c
 8000b46:	46bd      	mov	sp, r7
 8000b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b4c <_ZL18calculateParityBitRSt5arrayIhLj3EE>:
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	data[2] &= ~(1 << 0);
 8000b54:	2102      	movs	r1, #2
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff4c 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	f022 0201 	bic.w	r2, r2, #1
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	701a      	strb	r2, [r3, #0]
	if (checkParity(data)) data[2] |= (1 << 0);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	7859      	ldrb	r1, [r3, #1]
 8000b6e:	0209      	lsls	r1, r1, #8
 8000b70:	430a      	orrs	r2, r1
 8000b72:	789b      	ldrb	r3, [r3, #2]
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	431a      	orrs	r2, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f362 0317 	bfi	r3, r2, #0, #24
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff79 	bl	8000a76 <_ZL11checkParitySt5arrayIhLj3EE>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d009      	beq.n	8000b9e <_ZL18calculateParityBitRSt5arrayIhLj3EE+0x52>
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff31 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000b92:	4603      	mov	r3, r0
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	f042 0201 	orr.w	r2, r2, #1
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	701a      	strb	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>:
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
	this->last_gsb = x[0];
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff1d 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	709a      	strb	r2, [r3, #2]
	if(x[0] & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff14 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	09db      	lsrs	r3, r3, #7
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x3a>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e07e      	b.n	8000cde <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000001) return SmartFuseState::FailSafe;
 8000be0:	463b      	mov	r3, r7
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff05 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000bea:	4603      	mov	r3, r0
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x5e>
 8000c00:	2307      	movs	r3, #7
 8000c02:	e06c      	b.n	8000cde <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000010) return SmartFuseState::OLOFF;
 8000c04:	463b      	mov	r3, r7
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fef3 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	bf14      	ite	ne
 8000c1a:	2301      	movne	r3, #1
 8000c1c:	2300      	moveq	r3, #0
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x82>
 8000c24:	2306      	movs	r3, #6
 8000c26:	e05a      	b.n	8000cde <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00000100) return SmartFuseState::LatchOff;
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fee1 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000c32:	4603      	mov	r3, r0
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf14      	ite	ne
 8000c3e:	2301      	movne	r3, #1
 8000c40:	2300      	moveq	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xa6>
 8000c48:	2305      	movs	r3, #5
 8000c4a:	e048      	b.n	8000cde <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00001000) return SmartFuseState::TempFail;
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fecf 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000c56:	4603      	mov	r3, r0
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf14      	ite	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	2300      	moveq	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xca>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	e036      	b.n	8000cde <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00010000) return SmartFuseState::OTPLVDS;
 8000c70:	463b      	mov	r3, r7
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff febd 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	bf14      	ite	ne
 8000c86:	2301      	movne	r3, #1
 8000c88:	2300      	moveq	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0xee>
 8000c90:	2303      	movs	r3, #3
 8000c92:	e024      	b.n	8000cde <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b00100000) return SmartFuseState::SPIError;
 8000c94:	463b      	mov	r3, r7
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff feab 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f003 0320 	and.w	r3, r3, #32
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bf14      	ite	ne
 8000caa:	2301      	movne	r3, #1
 8000cac:	2300      	moveq	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x112>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e012      	b.n	8000cde <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	if(x[0] & 0b01000000) return SmartFuseState::ResetState;
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe99 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bf14      	ite	ne
 8000cce:	2301      	movne	r3, #1
 8000cd0:	2300      	moveq	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x136>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE+0x138>
	return SmartFuseState::NotResponding;
 8000cdc:	2308      	movs	r3, #8
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_ZN9SmartFuse22ChannelSettingsAndDataC1Ev>:
SmartFuse::ChannelSettingsAndData::ChannelSettingsAndData()
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3306      	adds	r3, #6
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 f8d2 	bl	8001e9c <_ZNSt4pairIttEC1IttLb1EEEv>
	current = 0x0000;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	809a      	strh	r2, [r3, #4]
	state = ChannelState::Ok;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	72da      	strb	r2, [r3, #11]
}
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev>:
 8000d0e:	b5b0      	push	{r4, r5, r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2405      	movs	r4, #5
 8000d1a:	461d      	mov	r5, r3
 8000d1c:	2c00      	cmp	r4, #0
 8000d1e:	db05      	blt.n	8000d2c <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev+0x1e>
 8000d20:	4628      	mov	r0, r5
 8000d22:	f7ff ffe0 	bl	8000ce6 <_ZN9SmartFuse22ChannelSettingsAndDataC1Ev>
 8000d26:	350c      	adds	r5, #12
 8000d28:	3c01      	subs	r4, #1
 8000d2a:	e7f7      	b.n	8000d1c <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev+0xe>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bdb0      	pop	{r4, r5, r7, pc}

08000d36 <_ZNSt4pairIttEaSERKS0_>:
      template<typename... _Args1, typename... _Args2>
	_GLIBCXX20_CONSTEXPR
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      _GLIBCXX20_CONSTEXPR pair&
      operator=(typename conditional<
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
		__and_<is_copy_assignable<_T1>,
		       is_copy_assignable<_T2>>::value,
		const pair&, const __nonesuch&>::type __p)
      {
	first = __p.first;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	801a      	strh	r2, [r3, #0]
	second = __p.second;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	885a      	ldrh	r2, [r3, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	805a      	strh	r2, [r3, #2]
	return *this;
 8000d50:	687b      	ldr	r3, [r7, #4]
      }
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, std::array < ChannelSettings, number_of_channels_per_fuse > channels_settings) :
 8000d5e:	b590      	push	{r4, r7, lr}
 8000d60:	b087      	sub	sp, #28
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	603b      	str	r3, [r7, #0]
					 port(port), pin(pin), hspi(hspi), toggle(false)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ffc6 	bl	8000d0e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev>
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	651a      	str	r2, [r3, #80]	; 0x50
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	655a      	str	r2, [r3, #84]	; 0x54
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3358      	adds	r3, #88	; 0x58
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fe10 	bl	80049b8 <_ZN5TimerC1Ev>
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3360      	adds	r3, #96	; 0x60
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fe0b 	bl	80049b8 <_ZN5TimerC1Ev>
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	336c      	adds	r3, #108	; 0x6c
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 f89a 	bl	8001ee0 <_ZN3etl8delegateIFvP9SmartFuseEEC1Ev>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2b05      	cmp	r3, #5
 8000db4:	f200 808a 	bhi.w	8000ecc <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x16e>
		this->channels[i].active = channels_settings[i].active;
 8000db8:	6979      	ldr	r1, [r7, #20]
 8000dba:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000dbe:	f001 f8ab 	bl	8001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	781c      	ldrb	r4, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3308      	adds	r3, #8
 8000dca:	6979      	ldr	r1, [r7, #20]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f894 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4622      	mov	r2, r4
 8000dd6:	701a      	strb	r2, [r3, #0]
		this->channels[i].clamping_currents = channels_settings[i].clamping_currents;
 8000dd8:	6979      	ldr	r1, [r7, #20]
 8000dda:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000dde:	f001 f89b 	bl	8001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000de2:	4603      	mov	r3, r0
 8000de4:	1d9c      	adds	r4, r3, #6
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3308      	adds	r3, #8
 8000dea:	6979      	ldr	r1, [r7, #20]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 f884 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000df2:	4603      	mov	r3, r0
 8000df4:	3306      	adds	r3, #6
 8000df6:	4621      	mov	r1, r4
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff9c 	bl	8000d36 <_ZNSt4pairIttEaSERKS0_>
		this->channels[i].duty_cycle = channels_settings[i].duty_cycle;
 8000dfe:	6979      	ldr	r1, [r7, #20]
 8000e00:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000e04:	f001 f888 	bl	8001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	889c      	ldrh	r4, [r3, #4]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3308      	adds	r3, #8
 8000e10:	6979      	ldr	r1, [r7, #20]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 f871 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4622      	mov	r2, r4
 8000e1c:	805a      	strh	r2, [r3, #2]
		this->channels[i].latch_off_time_out = channels_settings[i].latch_off_time_out;
 8000e1e:	6979      	ldr	r1, [r7, #20]
 8000e20:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000e24:	f001 f878 	bl	8001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	785c      	ldrb	r4, [r3, #1]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3308      	adds	r3, #8
 8000e30:	6979      	ldr	r1, [r7, #20]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 f861 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	705a      	strb	r2, [r3, #1]
		this->channels[i].sampling_mode = channels_settings[i].sampling_mode;
 8000e3e:	6979      	ldr	r1, [r7, #20]
 8000e40:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000e44:	f001 f868 	bl	8001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	789c      	ldrb	r4, [r3, #2]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3308      	adds	r3, #8
 8000e50:	6979      	ldr	r1, [r7, #20]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 f851 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4622      	mov	r2, r4
 8000e5c:	729a      	strb	r2, [r3, #10]
		if(this->channels[i].duty_cycle > 0x3ff) this->channels[i].duty_cycle = 0x3ff;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3308      	adds	r3, #8
 8000e62:	6979      	ldr	r1, [r7, #20]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 f848 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	885b      	ldrh	r3, [r3, #2]
 8000e6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000e72:	4293      	cmp	r3, r2
 8000e74:	bf8c      	ite	hi
 8000e76:	2301      	movhi	r3, #1
 8000e78:	2300      	movls	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d009      	beq.n	8000e94 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x136>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3308      	adds	r3, #8
 8000e84:	6979      	ldr	r1, [r7, #20]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 f837 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000e92:	805a      	strh	r2, [r3, #2]
		if(this->channels[i].latch_off_time_out > 0xf) this->channels[i].latch_off_time_out = 0xf;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3308      	adds	r3, #8
 8000e98:	6979      	ldr	r1, [r7, #20]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 f82d 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	785b      	ldrb	r3, [r3, #1]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	bf8c      	ite	hi
 8000ea8:	2301      	movhi	r3, #1
 8000eaa:	2300      	movls	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d008      	beq.n	8000ec4 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x166>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3308      	adds	r3, #8
 8000eb6:	6979      	ldr	r1, [r7, #20]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 f81e 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	705a      	strb	r2, [r3, #1]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e771      	b.n	8000db0 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE+0x52>
	this->watch_dog.setTimeOut(31);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3358      	adds	r3, #88	; 0x58
 8000ed0:	211f      	movs	r1, #31
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fd93 	bl	80049fe <_ZN5Timer10setTimeOutEm>
	slaveDeselect();
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f000 f8e7 	bl	80010ac <_ZN9SmartFuse13slaveDeselectEv>
}
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}

08000ee8 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE>:
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, std::array < ChannelSettings, number_of_channels_per_fuse > channels_settings, const uint32_t interval, etl::delegate<void(SmartFuse*)> action) :
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
					 port(port), pin(pin), hspi(hspi), toggle(false), action(action)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3308      	adds	r3, #8
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff01 	bl	8000d0e <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEC1Ev>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	651a      	str	r2, [r3, #80]	; 0x50
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	655a      	str	r2, [r3, #84]	; 0x54
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3358      	adds	r3, #88	; 0x58
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f003 fd4b 	bl	80049b8 <_ZN5TimerC1Ev>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3360      	adds	r3, #96	; 0x60
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fd46 	bl	80049b8 <_ZN5TimerC1Ev>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	336c      	adds	r3, #108	; 0x6c
 8000f30:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000f34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f38:	e883 0003 	stmia.w	r3, {r0, r1}
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b05      	cmp	r3, #5
 8000f44:	f200 808a 	bhi.w	800105c <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE+0x174>
		this->channels[i].active = channels_settings[i].active;
 8000f48:	6979      	ldr	r1, [r7, #20]
 8000f4a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f4e:	f000 ffe3 	bl	8001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000f52:	4603      	mov	r3, r0
 8000f54:	781c      	ldrb	r4, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3308      	adds	r3, #8
 8000f5a:	6979      	ldr	r1, [r7, #20]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 ffcc 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4622      	mov	r2, r4
 8000f66:	701a      	strb	r2, [r3, #0]
		this->channels[i].clamping_currents = channels_settings[i].clamping_currents;
 8000f68:	6979      	ldr	r1, [r7, #20]
 8000f6a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f6e:	f000 ffd3 	bl	8001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000f72:	4603      	mov	r3, r0
 8000f74:	1d9c      	adds	r4, r3, #6
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3308      	adds	r3, #8
 8000f7a:	6979      	ldr	r1, [r7, #20]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 ffbc 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000f82:	4603      	mov	r3, r0
 8000f84:	3306      	adds	r3, #6
 8000f86:	4621      	mov	r1, r4
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fed4 	bl	8000d36 <_ZNSt4pairIttEaSERKS0_>
		this->channels[i].duty_cycle = channels_settings[i].duty_cycle;
 8000f8e:	6979      	ldr	r1, [r7, #20]
 8000f90:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f94:	f000 ffc0 	bl	8001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	889c      	ldrh	r4, [r3, #4]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3308      	adds	r3, #8
 8000fa0:	6979      	ldr	r1, [r7, #20]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 ffa9 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4622      	mov	r2, r4
 8000fac:	805a      	strh	r2, [r3, #2]
		this->channels[i].latch_off_time_out = channels_settings[i].latch_off_time_out;
 8000fae:	6979      	ldr	r1, [r7, #20]
 8000fb0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000fb4:	f000 ffb0 	bl	8001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	785c      	ldrb	r4, [r3, #1]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3308      	adds	r3, #8
 8000fc0:	6979      	ldr	r1, [r7, #20]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 ff99 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4622      	mov	r2, r4
 8000fcc:	705a      	strb	r2, [r3, #1]
		this->channels[i].sampling_mode = channels_settings[i].sampling_mode;
 8000fce:	6979      	ldr	r1, [r7, #20]
 8000fd0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000fd4:	f000 ffa0 	bl	8001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	789c      	ldrb	r4, [r3, #2]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	6979      	ldr	r1, [r7, #20]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 ff89 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4622      	mov	r2, r4
 8000fec:	729a      	strb	r2, [r3, #10]
		if(this->channels[i].duty_cycle > 0x3ff) this->channels[i].duty_cycle = 0x3ff;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3308      	adds	r3, #8
 8000ff2:	6979      	ldr	r1, [r7, #20]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 ff80 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	885b      	ldrh	r3, [r3, #2]
 8000ffe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001002:	4293      	cmp	r3, r2
 8001004:	bf8c      	ite	hi
 8001006:	2301      	movhi	r3, #1
 8001008:	2300      	movls	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d009      	beq.n	8001024 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE+0x13c>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3308      	adds	r3, #8
 8001014:	6979      	ldr	r1, [r7, #20]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 ff6f 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800101c:	4603      	mov	r3, r0
 800101e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001022:	805a      	strh	r2, [r3, #2]
		if(this->channels[i].latch_off_time_out > 0xf) this->channels[i].latch_off_time_out = 0xf;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3308      	adds	r3, #8
 8001028:	6979      	ldr	r1, [r7, #20]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 ff65 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001030:	4603      	mov	r3, r0
 8001032:	785b      	ldrb	r3, [r3, #1]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	bf8c      	ite	hi
 8001038:	2301      	movhi	r3, #1
 800103a:	2300      	movls	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d008      	beq.n	8001054 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE+0x16c>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3308      	adds	r3, #8
 8001046:	6979      	ldr	r1, [r7, #20]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 ff56 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800104e:	4603      	mov	r3, r0
 8001050:	220f      	movs	r2, #15
 8001052:	705a      	strb	r2, [r3, #1]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e771      	b.n	8000f40 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE+0x58>
	this->action_timer.setTimeOut(interval);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3360      	adds	r3, #96	; 0x60
 8001060:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fccb 	bl	80049fe <_ZN5Timer10setTimeOutEm>
	this->watch_dog.setTimeOut(31);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3358      	adds	r3, #88	; 0x58
 800106c:	211f      	movs	r1, #31
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fcc5 	bl	80049fe <_ZN5Timer10setTimeOutEm>
	this->action_defined = true;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2201      	movs	r2, #1
 8001078:	705a      	strb	r2, [r3, #1]
	slaveDeselect();
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 f816 	bl	80010ac <_ZN9SmartFuse13slaveDeselectEv>
}
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4618      	mov	r0, r3
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}

0800108a <_ZN9SmartFuse11slaveSelectEv>:
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	b29b      	uxth	r3, r3
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	f005 fe7e 	bl	8006da0 <HAL_GPIO_WritePin>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_ZN9SmartFuse13slaveDeselectEv>:
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	2201      	movs	r2, #1
 80010c0:	4619      	mov	r1, r3
 80010c2:	f005 fe6d 	bl	8006da0 <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_ZN9SmartFuse4initEv>:
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
	this->reset();
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fbce 	bl	8001878 <_ZN9SmartFuse5resetEv>
	this->setUpAllDutyCycles();
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 fc39 	bl	8001954 <_ZN9SmartFuse18setUpAllDutyCyclesEv>
	this->setUpAllSamplingModes();
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fc92 	bl	8001a0c <_ZN9SmartFuse21setUpAllSamplingModesEv>
	this->setUpAllLatchOffTimers();
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fd05 	bl	8001af8 <_ZN9SmartFuse22setUpAllLatchOffTimersEv>
	this->setUpAllChannelsStates();
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 fdac 	bl	8001c4c <_ZN9SmartFuse22setUpAllChannelsStatesEv>
	return this->state;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <_ZN9SmartFuse6enableEv>:
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	tx_data = { WRITE_RAM(0x14), 1 << 6, 0 };
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <_ZN9SmartFuse6enableEv+0x78>)
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	4611      	mov	r1, r2
 8001116:	8019      	strh	r1, [r3, #0]
 8001118:	3302      	adds	r3, #2
 800111a:	0c12      	lsrs	r2, r2, #16
 800111c:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	461a      	mov	r2, r3
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 fdec 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { WRITE_RAM(0x14), 1 << 3, 0 };
 800112c:	4a14      	ldr	r2, [pc, #80]	; (8001180 <_ZN9SmartFuse6enableEv+0x7c>)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	4611      	mov	r1, r2
 8001136:	8019      	strh	r1, [r3, #0]
 8001138:	3302      	adds	r3, #2
 800113a:	0c12      	lsrs	r2, r2, #16
 800113c:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	461a      	mov	r2, r3
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 fddc 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->watch_dog.restart();
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3358      	adds	r3, #88	; 0x58
 8001150:	4618      	mov	r0, r3
 8001152:	f003 fc62 	bl	8004a1a <_ZN5Timer7restartEv>
	this->toggle = false;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
	this->state = getGSB(rx_data);
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fd21 	bl	8000ba6 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	return this->state;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	080099e0 	.word	0x080099e0
 8001180:	080099e4 	.word	0x080099e4

08001184 <_ZN9SmartFuse6handleEv>:
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b091      	sub	sp, #68	; 0x44
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	bool lock_state = false;
 800118c:	2300      	movs	r3, #0
 800118e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bool fuse_state_changed = false;
 8001192:	2300      	movs	r3, #0
 8001194:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	std::array < bool, number_of_channels_per_fuse > read_fuses_states { false };
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	809a      	strh	r2, [r3, #4]
	std::array < uint8_t, 3 > tx_data { };
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2100      	movs	r1, #0
 80011a8:	460a      	mov	r2, r1
 80011aa:	801a      	strh	r2, [r3, #0]
 80011ac:	460a      	mov	r2, r1
 80011ae:	709a      	strb	r2, [r3, #2]
	std::array < uint8_t, 3 > rx_data { };
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	2100      	movs	r1, #0
 80011b6:	460a      	mov	r2, r1
 80011b8:	801a      	strh	r2, [r3, #0]
 80011ba:	460a      	mov	r2, r1
 80011bc:	709a      	strb	r2, [r3, #2]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++) this->channels[i].state = ChannelState::Ok;
 80011be:	2300      	movs	r3, #0
 80011c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80011c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d80c      	bhi.n	80011e2 <_ZN9SmartFuse6handleEv+0x5e>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3308      	adds	r3, #8
 80011cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fe93 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2200      	movs	r2, #0
 80011d8:	72da      	strb	r2, [r3, #11]
 80011da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011dc:	3301      	adds	r3, #1
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
 80011e0:	e7ef      	b.n	80011c2 <_ZN9SmartFuse6handleEv+0x3e>
	if(watch_dog.getPassedTime() >= 31)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3358      	adds	r3, #88	; 0x58
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fc4a 	bl	8004a80 <_ZN5Timer13getPassedTimeEv>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b1e      	cmp	r3, #30
 80011f0:	bf8c      	ite	hi
 80011f2:	2301      	movhi	r3, #1
 80011f4:	2300      	movls	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d04d      	beq.n	8001298 <_ZN9SmartFuse6handleEv+0x114>
		this->toggle = !this->toggle;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	f083 0301 	eor.w	r3, r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	701a      	strb	r2, [r3, #0]
		tx_data[0] = READ_RAM(0x13);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fbef 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001216:	4603      	mov	r3, r0
 8001218:	2253      	movs	r2, #83	; 0x53
 800121a:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	461a      	mov	r2, r3
 8001222:	68f9      	ldr	r1, [r7, #12]
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fd6d 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		rx_data[2] &= ~(1 << 1);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2102      	movs	r1, #2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fbdf 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001236:	4603      	mov	r3, r0
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	f022 0202 	bic.w	r2, r2, #2
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]
		tx_data = { WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1) };
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	2101      	movs	r1, #1
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fbd3 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 800124e:	4603      	mov	r3, r0
 8001250:	781c      	ldrb	r4, [r3, #0]
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2102      	movs	r1, #2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fbcb 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 800125e:	4603      	mov	r3, r0
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	b251      	sxtb	r1, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	0052      	lsls	r2, r2, #1
 800126a:	b252      	sxtb	r2, r2
 800126c:	430a      	orrs	r2, r1
 800126e:	b252      	sxtb	r2, r2
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2213      	movs	r2, #19
 8001278:	733a      	strb	r2, [r7, #12]
 800127a:	4622      	mov	r2, r4
 800127c:	737a      	strb	r2, [r7, #13]
 800127e:	73bb      	strb	r3, [r7, #14]
		this->transmitReceiveData(tx_data, rx_data);
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	461a      	mov	r2, r3
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fd3b 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3358      	adds	r3, #88	; 0x58
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fbc1 	bl	8004a1a <_ZN5Timer7restartEv>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
 800129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129e:	2b05      	cmp	r3, #5
 80012a0:	d853      	bhi.n	800134a <_ZN9SmartFuse6handleEv+0x1c6>
		tx_data[0] = READ_RAM(0x28 + i);
 80012a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	3328      	adds	r3, #40	; 0x28
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ae:	b2dc      	uxtb	r4, r3
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fb9c 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80012bc:	4603      	mov	r3, r0
 80012be:	4622      	mov	r2, r4
 80012c0:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	461a      	mov	r2, r3
 80012c8:	68f9      	ldr	r1, [r7, #12]
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fd1a 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->channels[i].current = uint16_t(rx_data[1]) << 4 | uint16_t(rx_data[2]) >> 4;
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	2101      	movs	r1, #1
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb8c 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80012dc:	4603      	mov	r3, r0
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	b21c      	sxth	r4, r3
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	2102      	movs	r1, #2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fb82 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80012f0:	4603      	mov	r3, r0
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4323      	orrs	r3, r4
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	b29c      	uxth	r4, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3308      	adds	r3, #8
 8001304:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fdf7 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800130c:	4603      	mov	r3, r0
 800130e:	4622      	mov	r2, r4
 8001310:	809a      	strh	r2, [r3, #4]
		read_fuses_states[i] = bool(rx_data[2] & (1 << 2));
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	2102      	movs	r1, #2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fb6b 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 800131e:	4603      	mov	r3, r0
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2dc      	uxtb	r4, r3
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fdfd 	bl	8001f36 <_ZNSt5arrayIbLj6EEixEj>
 800133c:	4603      	mov	r3, r0
 800133e:	4622      	mov	r2, r4
 8001340:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001344:	3301      	adds	r3, #1
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
 8001348:	e7a8      	b.n	800129c <_ZN9SmartFuse6handleEv+0x118>
	for(auto& channel : this->channels)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3308      	adds	r3, #8
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	6a38      	ldr	r0, [r7, #32]
 8001352:	f000 fdff 	bl	8001f54 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE5beginEv>
 8001356:	6338      	str	r0, [r7, #48]	; 0x30
 8001358:	6a38      	ldr	r0, [r7, #32]
 800135a:	f000 fe07 	bl	8001f6c <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE3endEv>
 800135e:	61f8      	str	r0, [r7, #28]
 8001360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	429a      	cmp	r2, r3
 8001366:	d03b      	beq.n	80013e0 <_ZN9SmartFuse6handleEv+0x25c>
 8001368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136a:	61bb      	str	r3, [r7, #24]
		if(channel.state == ChannelState::OverCurrent || channel.state == ChannelState::UnderCurrent) continue;
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	7adb      	ldrb	r3, [r3, #11]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d030      	beq.n	80013d6 <_ZN9SmartFuse6handleEv+0x252>
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	7adb      	ldrb	r3, [r3, #11]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d02c      	beq.n	80013d6 <_ZN9SmartFuse6handleEv+0x252>
		if (channel.current < channel.clamping_currents.first)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	889a      	ldrh	r2, [r3, #4]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	88db      	ldrh	r3, [r3, #6]
 8001384:	429a      	cmp	r2, r3
 8001386:	d20f      	bcs.n	80013a8 <_ZN9SmartFuse6handleEv+0x224>
			channel.active = false;
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 800138e:	2301      	movs	r3, #1
 8001390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			fuse_state_changed = true;
 8001394:	2301      	movs	r3, #1
 8001396:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			this->state = SmartFuseState::OTPLVDS;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2203      	movs	r2, #3
 800139e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			channel.state = ChannelState::UnderCurrent;
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2201      	movs	r2, #1
 80013a6:	72da      	strb	r2, [r3, #11]
		if (channel.current > channel.clamping_currents.second)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	889a      	ldrh	r2, [r3, #4]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	891b      	ldrh	r3, [r3, #8]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d911      	bls.n	80013d8 <_ZN9SmartFuse6handleEv+0x254>
			channel.active = false;
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			lock_state = true;
 80013ba:	2301      	movs	r3, #1
 80013bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			fuse_state_changed = true;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			this->state = SmartFuseState::OTPLVDS;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			channel.state = ChannelState::OverCurrent;
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2202      	movs	r2, #2
 80013d2:	72da      	strb	r2, [r3, #11]
 80013d4:	e000      	b.n	80013d8 <_ZN9SmartFuse6handleEv+0x254>
		if(channel.state == ChannelState::OverCurrent || channel.state == ChannelState::UnderCurrent) continue;
 80013d6:	bf00      	nop
	for(auto& channel : this->channels)
 80013d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013da:	330c      	adds	r3, #12
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
 80013de:	e7bf      	b.n	8001360 <_ZN9SmartFuse6handleEv+0x1dc>
	if(fuse_state_changed)
 80013e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d049      	beq.n	800147c <_ZN9SmartFuse6handleEv+0x2f8>
		tx_data[0] = WRITE_RAM(0x13);
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fb00 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2213      	movs	r2, #19
 80013f8:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0x00;
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2101      	movs	r1, #1
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff faf7 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001406:	4603      	mov	r3, r0
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001412:	2b05      	cmp	r3, #5
 8001414:	d81e      	bhi.n	8001454 <_ZN9SmartFuse6handleEv+0x2d0>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3308      	adds	r3, #8
 800141a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fd6b 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001424:	4603      	mov	r3, r0
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142c:	fa02 f403 	lsl.w	r4, r2, r3
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2101      	movs	r1, #1
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fadc 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 800143c:	4603      	mov	r3, r0
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	b251      	sxtb	r1, r2
 8001442:	b262      	sxtb	r2, r4
 8001444:	430a      	orrs	r2, r1
 8001446:	b252      	sxtb	r2, r2
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	3301      	adds	r3, #1
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001452:	e7dd      	b.n	8001410 <_ZN9SmartFuse6handleEv+0x28c>
		tx_data[2] = this->toggle << 1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	b2dc      	uxtb	r4, r3
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2102      	movs	r1, #2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fac6 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001468:	4603      	mov	r3, r0
 800146a:	4622      	mov	r2, r4
 800146c:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	461a      	mov	r2, r3
 8001474:	68f9      	ldr	r1, [r7, #12]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fc44 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	2b05      	cmp	r3, #5
 8001484:	d82a      	bhi.n	80014dc <_ZN9SmartFuse6handleEv+0x358>
		if(this->channels[i].active != read_fuses_states[i])
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3308      	adds	r3, #8
 800148a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fd34 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001492:	4603      	mov	r3, r0
 8001494:	781c      	ldrb	r4, [r3, #0]
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fd4a 	bl	8001f36 <_ZNSt5arrayIbLj6EEixEj>
 80014a2:	4603      	mov	r3, r0
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	429c      	cmp	r4, r3
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00f      	beq.n	80014d4 <_ZN9SmartFuse6handleEv+0x350>
			this->channels[i].state = ChannelState::STKFLTR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3308      	adds	r3, #8
 80014b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fd1d 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2204      	movs	r2, #4
 80014c4:	72da      	strb	r2, [r3, #11]
			lock_state = true;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			this->state = SmartFuseState::OLOFF;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2206      	movs	r2, #6
 80014d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	3301      	adds	r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014da:	e7d1      	b.n	8001480 <_ZN9SmartFuse6handleEv+0x2fc>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	f200 8083 	bhi.w	80015ee <_ZN9SmartFuse6handleEv+0x46a>
		tx_data[0] = READ_AND_CLEAR(0x20 + i);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	3320      	adds	r3, #32
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f4:	b2dc      	uxtb	r4, r3
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fa79 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001502:	4603      	mov	r3, r0
 8001504:	4622      	mov	r2, r4
 8001506:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	461a      	mov	r2, r3
 800150e:	68f9      	ldr	r1, [r7, #12]
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fbf7 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		if(rx_data[1] & (1 << 0)) this->channels[i].state = ChannelState::LatchOff;
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	2101      	movs	r1, #1
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fa69 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001522:	4603      	mov	r3, r0
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf14      	ite	ne
 800152e:	2301      	movne	r3, #1
 8001530:	2300      	moveq	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <_ZN9SmartFuse6handleEv+0x3c6>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3308      	adds	r3, #8
 800153c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fcdb 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001544:	4603      	mov	r3, r0
 8001546:	2203      	movs	r2, #3
 8001548:	72da      	strb	r2, [r3, #11]
		if(rx_data[1] & (1 << 2)) this->channels[i].state = ChannelState::STKFLTR;
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fa4f 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001556:	4603      	mov	r3, r0
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <_ZN9SmartFuse6handleEv+0x3fa>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3308      	adds	r3, #8
 8001570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fcc1 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001578:	4603      	mov	r3, r0
 800157a:	2204      	movs	r2, #4
 800157c:	72da      	strb	r2, [r3, #11]
		if(rx_data[1] & (1 << 3)) this->channels[i].state = ChannelState::VDSFS;
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2101      	movs	r1, #1
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fa35 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 800158a:	4603      	mov	r3, r0
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf14      	ite	ne
 8001596:	2301      	movne	r3, #1
 8001598:	2300      	moveq	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <_ZN9SmartFuse6handleEv+0x42e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3308      	adds	r3, #8
 80015a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fca7 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2205      	movs	r2, #5
 80015b0:	72da      	strb	r2, [r3, #11]
		if(rx_data[1] & (1 << 4)) this->channels[i].state = ChannelState::CHFBSR;
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fa1b 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80015be:	4603      	mov	r3, r0
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <_ZN9SmartFuse6handleEv+0x462>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3308      	adds	r3, #8
 80015d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fc8d 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2206      	movs	r2, #6
 80015e4:	72da      	strb	r2, [r3, #11]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	3301      	adds	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
 80015ec:	e778      	b.n	80014e0 <_ZN9SmartFuse6handleEv+0x35c>
	if(this->action_defined)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00d      	beq.n	8001612 <_ZN9SmartFuse6handleEv+0x48e>
		if(this->action_timer.checkIfTimedOutAndReset())
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3360      	adds	r3, #96	; 0x60
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fa1a 	bl	8004a34 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <_ZN9SmartFuse6handleEv+0x48e>
			this->action(this);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	336c      	adds	r3, #108	; 0x6c
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fccb 	bl	8001fa8 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_>
	if (!lock_state) this->state = getGSB(rx_data);
 8001612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001616:	f083 0301 	eor.w	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <_ZN9SmartFuse6handleEv+0x4ae>
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fabf 	bl	8000ba6 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001628:	4603      	mov	r3, r0
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	return this->state;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 8001638:	4618      	mov	r0, r3
 800163a:	3744      	adds	r7, #68	; 0x44
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}

08001640 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>:
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
 800164c:	4613      	mov	r3, r2
 800164e:	803b      	strh	r3, [r7, #0]
	std::array < uint8_t, 3 >  tx_data { 0, 0, 0 };
 8001650:	4a33      	ldr	r2, [pc, #204]	; (8001720 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0xe0>)
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4611      	mov	r1, r2
 800165a:	8019      	strh	r1, [r3, #0]
 800165c:	3302      	adds	r3, #2
 800165e:	0c12      	lsrs	r2, r2, #16
 8001660:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 >  rx_data { 0, 0, 0 };
 8001662:	4a2f      	ldr	r2, [pc, #188]	; (8001720 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0xe0>)
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	4611      	mov	r1, r2
 800166c:	8019      	strh	r1, [r3, #0]
 800166e:	3302      	adds	r3, #2
 8001670:	0c12      	lsrs	r2, r2, #16
 8001672:	701a      	strb	r2, [r3, #0]
	if(duty_cykle > 1023) duty_cykle = 1023;
 8001674:	883b      	ldrh	r3, [r7, #0]
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167a:	d302      	bcc.n	8001682 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt+0x42>
 800167c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001680:	803b      	strh	r3, [r7, #0]
	this->channels[size_t(channel)].duty_cycle = duty_cykle;
 8001682:	883c      	ldrh	r4, [r7, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3308      	adds	r3, #8
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fc34 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001692:	4603      	mov	r3, r0
 8001694:	4622      	mov	r2, r4
 8001696:	805a      	strh	r2, [r3, #2]
	tx_data[0] = WRITE_RAM(0x00 + size_t(channel));
 8001698:	78fc      	ldrb	r4, [r7, #3]
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff f9a7 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4622      	mov	r2, r4
 80016aa:	701a      	strb	r2, [r3, #0]
	tx_data[1] = uint8_t(duty_cykle >> 4);
 80016ac:	883b      	ldrh	r3, [r7, #0]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b2dc      	uxtb	r4, r3
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f99a 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4622      	mov	r2, r4
 80016c4:	701a      	strb	r2, [r3, #0]
	tx_data[2] = uint8_t(duty_cykle << 4) | this->toggle << 1;
 80016c6:	883b      	ldrh	r3, [r7, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	b2dc      	uxtb	r4, r3
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2102      	movs	r1, #2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f985 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4622      	mov	r2, r4
 80016ee:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	461a      	mov	r2, r3
 80016f6:	68f9      	ldr	r1, [r7, #12]
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fb03 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fa50 	bl	8000ba6 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	return this->state;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	bf00      	nop
 8001720:	080099e8 	.word	0x080099e8

08001724 <_ZNK9SmartFuse8getStateEv>:
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	return this->state;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_ZN9SmartFuse15getChannelStateE7Channel>:
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	70fb      	strb	r3, [r7, #3]
	return this->channels[size_t(channel)].state;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3308      	adds	r3, #8
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fbd1 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001758:	4603      	mov	r3, r0
 800175a:	7adb      	ldrb	r3, [r3, #11]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_ZN9SmartFuse17getChannelsStatesEv>:
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	3308      	adds	r3, #8
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fbc0 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800177a:	4603      	mov	r3, r0
 800177c:	7ada      	ldrb	r2, [r3, #11]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	701a      	strb	r2, [r3, #0]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	3308      	adds	r3, #8
 8001786:	2101      	movs	r1, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fbb6 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800178e:	4603      	mov	r3, r0
 8001790:	7ada      	ldrb	r2, [r3, #11]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	705a      	strb	r2, [r3, #1]
	return { this->channels[0].state, this->channels[1].state, this->channels[2].state,
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	3308      	adds	r3, #8
 800179a:	2102      	movs	r1, #2
 800179c:	4618      	mov	r0, r3
 800179e:	f000 fbac 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80017a2:	4603      	mov	r3, r0
 80017a4:	7ada      	ldrb	r2, [r3, #11]
			 this->channels[3].state, this->channels[4].state, this->channels[5].state };
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	709a      	strb	r2, [r3, #2]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3308      	adds	r3, #8
 80017ae:	2103      	movs	r1, #3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fba2 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80017b6:	4603      	mov	r3, r0
 80017b8:	7ada      	ldrb	r2, [r3, #11]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	70da      	strb	r2, [r3, #3]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	3308      	adds	r3, #8
 80017c2:	2104      	movs	r1, #4
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fb98 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80017ca:	4603      	mov	r3, r0
 80017cc:	7ada      	ldrb	r2, [r3, #11]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	711a      	strb	r2, [r3, #4]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	3308      	adds	r3, #8
 80017d6:	2105      	movs	r1, #5
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fb8e 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80017de:	4603      	mov	r3, r0
 80017e0:	7ada      	ldrb	r2, [r3, #11]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	715a      	strb	r2, [r3, #5]
}
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_ZN9SmartFuse19getChannelsCurrentsEv>:
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	3308      	adds	r3, #8
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fb7b 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001804:	4603      	mov	r3, r0
 8001806:	889a      	ldrh	r2, [r3, #4]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	801a      	strh	r2, [r3, #0]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3308      	adds	r3, #8
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fb71 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001818:	4603      	mov	r3, r0
 800181a:	889a      	ldrh	r2, [r3, #4]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	805a      	strh	r2, [r3, #2]
	return { this->channels[0].current, this->channels[1].current, this->channels[2].current,
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	3308      	adds	r3, #8
 8001824:	2102      	movs	r1, #2
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fb67 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 800182c:	4603      	mov	r3, r0
 800182e:	889a      	ldrh	r2, [r3, #4]
			 this->channels[3].current, this->channels[4].current, this->channels[5].current };
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	809a      	strh	r2, [r3, #4]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	3308      	adds	r3, #8
 8001838:	2103      	movs	r1, #3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fb5d 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001840:	4603      	mov	r3, r0
 8001842:	889a      	ldrh	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	80da      	strh	r2, [r3, #6]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	3308      	adds	r3, #8
 800184c:	2104      	movs	r1, #4
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fb53 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001854:	4603      	mov	r3, r0
 8001856:	889a      	ldrh	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	811a      	strh	r2, [r3, #8]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	3308      	adds	r3, #8
 8001860:	2105      	movs	r1, #5
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fb49 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001868:	4603      	mov	r3, r0
 800186a:	889a      	ldrh	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	815a      	strh	r2, [r3, #10]
}
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZN9SmartFuse5resetEv>:
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	tx_data = { RESET_SMARTFUSE(), 0, 0 };
 8001880:	23ff      	movs	r3, #255	; 0xff
 8001882:	743b      	strb	r3, [r7, #16]
 8001884:	2300      	movs	r3, #0
 8001886:	747b      	strb	r3, [r7, #17]
 8001888:	2300      	movs	r3, #0
 800188a:	74bb      	strb	r3, [r7, #18]
	this->transmitReceiveData(tx_data, rx_data);
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	461a      	mov	r2, r3
 8001892:	6939      	ldr	r1, [r7, #16]
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fa35 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data = { READ_ROM(0x01), 0, 0 };
 800189a:	23c1      	movs	r3, #193	; 0xc1
 800189c:	743b      	strb	r3, [r7, #16]
 800189e:	2300      	movs	r3, #0
 80018a0:	747b      	strb	r3, [r7, #17]
 80018a2:	2300      	movs	r3, #0
 80018a4:	74bb      	strb	r3, [r7, #18]
	for (size_t i = 0; i < fuse_timeout; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d845      	bhi.n	800193c <_ZN9SmartFuse5resetEv+0xc4>
		if(!IF_RESET_STATE(rx_data)) break;
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f89c 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80018bc:	4603      	mov	r3, r0
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d113      	bne.n	80018ec <_ZN9SmartFuse5resetEv+0x74>
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2101      	movs	r1, #1
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f892 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80018d0:	4603      	mov	r3, r0
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <_ZN9SmartFuse5resetEv+0x74>
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	2102      	movs	r1, #2
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f888 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80018e4:	4603      	mov	r3, r0
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00d      	beq.n	8001908 <_ZN9SmartFuse5resetEv+0x90>
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f87e 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80018f8:	4603      	mov	r3, r0
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <_ZN9SmartFuse5resetEv+0x90>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <_ZN9SmartFuse5resetEv+0x92>
 8001908:	2300      	movs	r3, #0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d115      	bne.n	800193a <_ZN9SmartFuse5resetEv+0xc2>
		else if(i == fuse_timeout - 1)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d104      	bne.n	800191e <_ZN9SmartFuse5resetEv+0xa6>
			this->state = SmartFuseState::NotResponding;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2208      	movs	r2, #8
 8001918:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800191c:	e017      	b.n	800194e <_ZN9SmartFuse5resetEv+0xd6>
		this->transmitReceiveData(tx_data, rx_data);
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	461a      	mov	r2, r3
 8001924:	6939      	ldr	r1, [r7, #16]
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f9ec 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		HAL_Delay(1);
 800192c:	2001      	movs	r0, #1
 800192e:	f003 f953 	bl	8004bd8 <HAL_Delay>
	for (size_t i = 0; i < fuse_timeout; i++)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e7b7      	b.n	80018aa <_ZN9SmartFuse5resetEv+0x32>
		if(!IF_RESET_STATE(rx_data)) break;
 800193a:	bf00      	nop
	this->state = getGSB(rx_data);
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff f931 	bl	8000ba6 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_ZN9SmartFuse18setUpAllDutyCyclesEv>:
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < 6; i++)
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b05      	cmp	r3, #5
 8001964:	d845      	bhi.n	80019f2 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0x9e>
		tx_data[0] = WRITE_RAM(0x00 + i);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	b2dc      	uxtb	r4, r3
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f83f 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001976:	4603      	mov	r3, r0
 8001978:	4622      	mov	r2, r4
 800197a:	701a      	strb	r2, [r3, #0]
		tx_data[1] = uint8_t(this->channels[i].duty_cycle >> 4);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3308      	adds	r3, #8
 8001980:	6979      	ldr	r1, [r7, #20]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fab9 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001988:	4603      	mov	r3, r0
 800198a:	885b      	ldrh	r3, [r3, #2]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	b29b      	uxth	r3, r3
 8001990:	b2dc      	uxtb	r4, r3
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	2101      	movs	r1, #1
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f82b 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 800199e:	4603      	mov	r3, r0
 80019a0:	4622      	mov	r2, r4
 80019a2:	701a      	strb	r2, [r3, #0]
		tx_data[2] = uint8_t(this->channels[i].duty_cycle << 4) | this->toggle << 1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3308      	adds	r3, #8
 80019a8:	6979      	ldr	r1, [r7, #20]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 faa5 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 80019b0:	4603      	mov	r3, r0
 80019b2:	885b      	ldrh	r3, [r3, #2]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	b25a      	sxtb	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2dc      	uxtb	r4, r3
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	2102      	movs	r1, #2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f80f 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4622      	mov	r2, r4
 80019da:	701a      	strb	r2, [r3, #0]
		this->transmitReceiveData(tx_data, rx_data);
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	461a      	mov	r2, r3
 80019e2:	6939      	ldr	r1, [r7, #16]
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f98d 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < 6; i++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e7b6      	b.n	8001960 <_ZN9SmartFuse18setUpAllDutyCyclesEv+0xc>
	this->state = getGSB(rx_data);
 80019f2:	68f9      	ldr	r1, [r7, #12]
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff f8d6 	bl	8000ba6 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}

08001a0c <_ZN9SmartFuse21setUpAllSamplingModesEv>:
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data = { 0, 0, 0 };
 8001a14:	4a37      	ldr	r2, [pc, #220]	; (8001af4 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xe8>)
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	8019      	strh	r1, [r3, #0]
 8001a20:	3302      	adds	r3, #2
 8001a22:	0c12      	lsrs	r2, r2, #16
 8001a24:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d854      	bhi.n	8001ada <_ZN9SmartFuse21setUpAllSamplingModesEv+0xce>
		tx_data[0] = WRITE_RAM(0x08 + i);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3308      	adds	r3, #8
 8001a36:	b2dc      	uxtb	r4, r3
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe ffd8 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4622      	mov	r2, r4
 8001a48:	701a      	strb	r2, [r3, #0]
		switch (this->channels[i].sampling_mode)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	6979      	ldr	r1, [r7, #20]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fa52 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001a56:	4603      	mov	r3, r0
 8001a58:	7a9b      	ldrb	r3, [r3, #10]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d832      	bhi.n	8001ac4 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
 8001a5e:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <_ZN9SmartFuse21setUpAllSamplingModesEv+0x58>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001a75 	.word	0x08001a75
 8001a68:	08001a89 	.word	0x08001a89
 8001a6c:	08001a9d 	.word	0x08001a9d
 8001a70:	08001ab1 	.word	0x08001ab1
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe ffba 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e01d      	b.n	8001ac4 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe ffb0 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2240      	movs	r2, #64	; 0x40
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	e013      	b.n	8001ac4 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe ffa6 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	e009      	b.n	8001ac4 <_ZN9SmartFuse21setUpAllSamplingModesEv+0xb8>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe ff9c 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001abc:	4603      	mov	r3, r0
 8001abe:	22c0      	movs	r2, #192	; 0xc0
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	bf00      	nop
		this->transmitReceiveData(tx_data, rx_data);
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	461a      	mov	r2, r3
 8001aca:	6939      	ldr	r1, [r7, #16]
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f919 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(size_t i = 0; i < number_of_channels_per_fuse; i++)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e7a7      	b.n	8001a2a <_ZN9SmartFuse21setUpAllSamplingModesEv+0x1e>
	this->state = getGSB(rx_data);
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff f862 	bl	8000ba6 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	080099e8 	.word	0x080099e8

08001af8 <_ZN9SmartFuse22setUpAllLatchOffTimersEv>:
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 8001b00:	4a51      	ldr	r2, [pc, #324]	; (8001c48 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x150>)
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	8019      	strh	r1, [r3, #0]
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	0c12      	lsrs	r2, r2, #16
 8001b10:	701a      	strb	r2, [r3, #0]
	std::array < uint8_t, 3 > rx_data { 0, 0, 0 };
 8001b12:	4a4d      	ldr	r2, [pc, #308]	; (8001c48 <_ZN9SmartFuse22setUpAllLatchOffTimersEv+0x150>)
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	8019      	strh	r1, [r3, #0]
 8001b1e:	3302      	adds	r3, #2
 8001b20:	0c12      	lsrs	r2, r2, #16
 8001b22:	701a      	strb	r2, [r3, #0]
	tx_data[0] = WRITE_RAM(0x10);
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe ff62 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2210      	movs	r2, #16
 8001b34:	701a      	strb	r2, [r3, #0]
	tx_data[1] = this->channels[2].latch_off_time_out << 4 |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3308      	adds	r3, #8
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f9dc 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001b42:	4603      	mov	r3, r0
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	b25c      	sxtb	r4, r3
			     this->channels[1].latch_off_time_out;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3308      	adds	r3, #8
 8001b4e:	2101      	movs	r1, #1
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f9d2 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001b56:	4603      	mov	r3, r0
 8001b58:	785b      	ldrb	r3, [r3, #1]
 8001b5a:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels[2].latch_off_time_out << 4 |
 8001b5c:	4323      	orrs	r3, r4
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	b2dc      	uxtb	r4, r3
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	2101      	movs	r1, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe ff43 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4622      	mov	r2, r4
 8001b72:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels[0].latch_off_time_out << 4;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3308      	adds	r3, #8
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f9bd 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001b80:	4603      	mov	r3, r0
 8001b82:	785b      	ldrb	r3, [r3, #1]
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	b2dc      	uxtb	r4, r3
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe ff30 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4622      	mov	r2, r4
 8001b98:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68f9      	ldr	r1, [r7, #12]
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8ae 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data[0] = WRITE_RAM(0x11);
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe ff20 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2211      	movs	r2, #17
 8001bb8:	701a      	strb	r2, [r3, #0]
	tx_data[1] = this->channels[5].latch_off_time_out << 4 |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	2105      	movs	r1, #5
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f99a 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	785b      	ldrb	r3, [r3, #1]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	b25c      	sxtb	r4, r3
	             this->channels[4].latch_off_time_out;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3308      	adds	r3, #8
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 f990 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	b25b      	sxtb	r3, r3
	tx_data[1] = this->channels[5].latch_off_time_out << 4 |
 8001be0:	4323      	orrs	r3, r4
 8001be2:	b25b      	sxtb	r3, r3
 8001be4:	b2dc      	uxtb	r4, r3
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe ff01 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	701a      	strb	r2, [r3, #0]
	tx_data[2] = this->channels[3].latch_off_time_out << 4;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f97b 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001c04:	4603      	mov	r3, r0
 8001c06:	785b      	ldrb	r3, [r3, #1]
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	b2dc      	uxtb	r4, r3
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2102      	movs	r1, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe feee 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	461a      	mov	r2, r3
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f86c 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe ffb9 	bl	8000ba6 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	080099e8 	.word	0x080099e8

08001c4c <_ZN9SmartFuse22setUpAllChannelsStatesEv>:
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	tx_data[0] = WRITE_RAM(0x13);
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe feca 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2213      	movs	r2, #19
 8001c64:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fec1 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < number_of_channels_per_fuse; i++) tx_data[1] |= this->channels[i].active << i;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d81e      	bhi.n	8001cc0 <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x74>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3308      	adds	r3, #8
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f935 	bl	8001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>
 8001c90:	4603      	mov	r3, r0
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	fa02 f403 	lsl.w	r4, r2, r3
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fea6 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	b251      	sxtb	r1, r2
 8001cae:	b262      	sxtb	r2, r4
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	b252      	sxtb	r2, r2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e7dd      	b.n	8001c7c <_ZN9SmartFuse22setUpAllChannelsStatesEv+0x30>
	tx_data[2] = this->toggle << 1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	b2dc      	uxtb	r4, r3
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	2102      	movs	r1, #2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fe90 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	701a      	strb	r2, [r3, #0]
	this->transmitReceiveData(tx_data, rx_data);
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6939      	ldr	r1, [r7, #16]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f80e 	bl	8001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = getGSB(rx_data);
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe ff5b 	bl	8000ba6 <_ZN9SmartFuse6getGSBESt5arrayIhLj3EE>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001cfa:	bf00      	nop
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}
	...

08001d04 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>:
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8001d10:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	2b40      	cmp	r3, #64	; 0x40
 8001d1c:	bf14      	ite	ne
 8001d1e:	2301      	movne	r3, #1
 8001d20:	2300      	moveq	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x34>
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d36:	601a      	str	r2, [r3, #0]
	calculateParityBit(tx_data);
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ff05 	bl	8000b4c <_ZL18calculateParityBitRSt5arrayIhLj3EE>
	this->slaveSelect();
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff f9a1 	bl	800108a <_ZN9SmartFuse11slaveSelectEv>
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	75fb      	strb	r3, [r7, #23]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	75bb      	strb	r3, [r7, #22]
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d902      	bls.n	8001d5c <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x58>
 8001d56:	7dbb      	ldrb	r3, [r7, #22]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d83e      	bhi.n	8001dda <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xd6>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d104      	bne.n	8001d74 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8001d6a:	7dbb      	ldrb	r3, [r7, #22]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d801      	bhi.n	8001d74 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x70>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x72>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00f      	beq.n	8001d9a <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x96>
			(*(uint8_t*) &rx_data[rx]) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	330c      	adds	r3, #12
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	b2dc      	uxtb	r4, r3
 8001d84:	7dbb      	ldrb	r3, [r7, #22]
 8001d86:	4619      	mov	r1, r3
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7fe fe33 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4622      	mov	r2, r4
 8001d92:	701a      	strb	r2, [r3, #0]
			rx++;
 8001d94:	7dbb      	ldrb	r3, [r7, #22]
 8001d96:	3301      	adds	r3, #1
 8001d98:	75bb      	strb	r3, [r7, #22]
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d104      	bne.n	8001db2 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d801      	bhi.n	8001db2 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xae>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xb0>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0cb      	beq.n	8001d50 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = tx_data[tx];
 8001db8:	7dfa      	ldrb	r2, [r7, #23]
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fe17 	bl	80009f4 <_ZNSt5arrayIhLj3EEixEj>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0xe4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	330c      	adds	r3, #12
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	701a      	strb	r2, [r3, #0]
			tx++;
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	75fb      	strb	r3, [r7, #23]
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8001dd8:	e7ba      	b.n	8001d50 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x4c>
	this->slaveDeselect();
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff f966 	bl	80010ac <_ZN9SmartFuse13slaveDeselectEv>
}
 8001de0:	bf00      	nop
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	200009e0 	.word	0x200009e0

08001dec <_ZN3etl10count_bitsIhEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueeqsrNS_15integral_limitsIS3_EE4bitsLj8EEhE4typeES3_>:
  ///\ingroup binary
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR14
    typename etl::enable_if<etl::is_integral<T>::value && etl::is_unsigned<T>::value && (etl::integral_limits<T>::bits == 8U), uint_least8_t>::type
    count_bits(T value)
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  {
#if ETL_CPP23_SUPPORTED && ETL_USING_STL
    return std::popcount(value);
#else
    uint32_t count = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]

    count = value - ((value >> 1U) & 0x55U);
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	085b      	lsrs	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	60fb      	str	r3, [r7, #12]
    count = ((count >> 2U) & 0x33U) + (count & 0x33U);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8001e18:	4413      	add	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
    count = ((count >> 4U) + count) & 0x0FU;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	091a      	lsrs	r2, r3, #4
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	60fb      	str	r3, [r7, #12]

    return uint_least8_t(count);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	b2db      	uxtb	r3, r3
#endif
  }
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_ZN3etl6bitsetILj8EEC1Ey>:
    }

    //*************************************************************************
    /// Construct from a value.
    //*************************************************************************
    bitset(unsigned long long value)
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	e9c7 2300 	strd	r2, r3, [r7]
      : etl::ibitset(MAXN, ARRAY_SIZE, data)
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3310      	adds	r3, #16
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2108      	movs	r1, #8
 8001e50:	f7fe fd95 	bl	800097e <_ZN3etl7ibitsetC1EjjPh>
    {
      initialise(value);
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e5a:	4608      	mov	r0, r1
 8001e5c:	f7fe fd4c 	bl	80008f8 <_ZN3etl7ibitset10initialiseEy>
    }
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE5beginEv>:
      begin() noexcept
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f9e1 	bl	800223a <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE3endEv>:
      end() noexcept
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f9d5 	bl	800223a <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>
 8001e90:	4603      	mov	r3, r0
 8001e92:	333c      	adds	r3, #60	; 0x3c
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_ZNSt4pairIttEC1IttLb1EEEv>:
      _GLIBCXX_CONSTEXPR pair()
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	801a      	strh	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	805a      	strh	r2, [r3, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>:
    //*************************************************************************
    /// The internal invocation object.
    //*************************************************************************
    struct invocation_element
    {
      invocation_element() = default;
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <_ZN3etl8delegateIFvP9SmartFuseEEC1Ev>:
    ETL_CONSTEXPR14 delegate()
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
    {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ffe7 	bl	8001ebe <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>
    }
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EEixEj>:
      operator[](size_type __n) noexcept
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f9a3 	bl	8002254 <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_refERA6_KS1_j>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_ZNSt5arrayI15ChannelSettingsLj6EEixEj>:
      operator[](size_type __n) noexcept
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6839      	ldr	r1, [r7, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f9a6 	bl	8002278 <_ZNSt14__array_traitsI15ChannelSettingsLj6EE6_S_refERA6_KS0_j>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_ZNSt5arrayIbLj6EEixEj>:
      operator[](size_type __n) noexcept
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f9a9 	bl	800229c <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE5beginEv>:
      begin() noexcept
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f9ab 	bl	80022b8 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE4dataEv>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE3endEv>:
      end() noexcept
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f99f 	bl	80022b8 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE4dataEv>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	3348      	adds	r3, #72	; 0x48
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_ZNK3etl8delegateIFvP9SmartFuseEE8is_validEv>:
    ETL_CONSTEXPR14 bool is_valid() const
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
      return invocation.stub != ETL_NULLPTR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bf14      	ite	ne
 8001f96:	2301      	movne	r3, #1
 8001f98:	2300      	moveq	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
    }
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_>:
    TReturn operator()(TParams... args) const
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
      ETL_ASSERT(is_valid(), ETL_ERROR(delegate_uninitialised));
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffe7 	bl	8001f86 <_ZNK3etl8delegateIFvP9SmartFuseEE8is_validEv>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x24>
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x48>)
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x4c>)
 8001fc2:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001fc6:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <_ZNK3etl8delegateIFvP9SmartFuseEEclES2_+0x50>)
 8001fc8:	f006 fcc4 	bl	8008954 <__assert_func>
      return (*invocation.stub)(invocation.object, etl::forward<TParams>(args)...);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685c      	ldr	r4, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681d      	ldr	r5, [r3, #0]
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f97b 	bl	80022d2 <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4628      	mov	r0, r5
 8001fe4:	47a0      	blx	r4
 8001fe6:	bf00      	nop
    }
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bdb0      	pop	{r4, r5, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	080099ec 	.word	0x080099ec
 8001ff4:	080099fc 	.word	0x080099fc
 8001ff8:	08009a78 	.word	0x08009a78

08001ffc <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EEEEEvDpOT_>:
    /// Constructs a value at the end of the vector.
    /// If asserts or exceptions are enabled, emits vector_full if the vector is already full.
    ///\param value The value to add.
    //*********************************************************************
    template <typename ... Args>
    void emplace_back(Args && ... args)
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	b0a9      	sub	sp, #164	; 0xa4
 8002000:	af10      	add	r7, sp, #64	; 0x40
 8002002:	61f8      	str	r0, [r7, #28]
 8002004:	61b9      	str	r1, [r7, #24]
 8002006:	617a      	str	r2, [r7, #20]
 8002008:	613b      	str	r3, [r7, #16]
    {
#if defined(ETL_CHECK_PUSH_POP)
      ETL_ASSERT(size() != CAPACITY, ETL_ERROR(vector_full));
#endif
      ::new (p_end) T(etl::forward<Args>(args)...);
 800200a:	69b8      	ldr	r0, [r7, #24]
 800200c:	f000 f96c 	bl	80022e8 <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8002010:	4603      	mov	r3, r0
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f000 f971 	bl	80022fe <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 800201c:	4603      	mov	r3, r0
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	6938      	ldr	r0, [r7, #16]
 8002024:	f000 f976 	bl	8002314 <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 8002028:	4603      	mov	r3, r0
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002030:	f000 f97b 	bl	800232a <_ZN3etl7forwardIRSt5arrayI15ChannelSettingsLj6EEEEOT_RNS_16remove_referenceIS5_E4typeE>
 8002034:	4603      	mov	r3, r0
 8002036:	461c      	mov	r4, r3
 8002038:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800203c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8002040:	4635      	mov	r5, r6
 8002042:	4623      	mov	r3, r4
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204e:	3410      	adds	r4, #16
 8002050:	3610      	adds	r6, #16
 8002052:	4564      	cmp	r4, ip
 8002054:	d1f4      	bne.n	8002040 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EEEEEvDpOT_+0x44>
 8002056:	4633      	mov	r3, r6
 8002058:	4622      	mov	r2, r4
 800205a:	6810      	ldr	r0, [r2, #0]
 800205c:	6851      	ldr	r1, [r2, #4]
 800205e:	6892      	ldr	r2, [r2, #8]
 8002060:	c307      	stmia	r3!, {r0, r1, r2}
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4619      	mov	r1, r3
 8002068:	2074      	movs	r0, #116	; 0x74
 800206a:	f7fe fabb 	bl	80005e4 <_ZnwjPv>
 800206e:	4606      	mov	r6, r0
 8002070:	466d      	mov	r5, sp
 8002072:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002082:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002086:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	68f9      	ldr	r1, [r7, #12]
 8002090:	4630      	mov	r0, r6
 8002092:	f7fe fe64 	bl	8000d5e <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
      ++p_end;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	609a      	str	r2, [r3, #8]
      ETL_INCREMENT_DEBUG_COUNT
    }
 80020a2:	bf00      	nop
 80020a4:	3764      	adds	r7, #100	; 0x64
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020aa <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EESA_RNS_8delegateIFvPS1_EEEEEEvDpOT_>:
    void emplace_back(Args && ... args)
 80020aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ac:	b0ad      	sub	sp, #180	; 0xb4
 80020ae:	af12      	add	r7, sp, #72	; 0x48
 80020b0:	61f8      	str	r0, [r7, #28]
 80020b2:	61b9      	str	r1, [r7, #24]
 80020b4:	617a      	str	r2, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
      ::new (p_end) T(etl::forward<Args>(args)...);
 80020b8:	69b8      	ldr	r0, [r7, #24]
 80020ba:	f000 f915 	bl	80022e8 <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 80020be:	4603      	mov	r3, r0
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f000 f91a 	bl	80022fe <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 80020ca:	4603      	mov	r3, r0
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	6938      	ldr	r0, [r7, #16]
 80020d2:	f000 f91f 	bl	8002314 <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>
 80020d6:	4603      	mov	r3, r0
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80020e0:	f000 f923 	bl	800232a <_ZN3etl7forwardIRSt5arrayI15ChannelSettingsLj6EEEEOT_RNS_16remove_referenceIS5_E4typeE>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461c      	mov	r4, r3
 80020e8:	f107 0624 	add.w	r6, r7, #36	; 0x24
 80020ec:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80020f0:	4635      	mov	r5, r6
 80020f2:	4623      	mov	r3, r4
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fe:	3410      	adds	r4, #16
 8002100:	3610      	adds	r6, #16
 8002102:	4564      	cmp	r4, ip
 8002104:	d1f4      	bne.n	80020f0 <_ZN3etl7ivectorI9SmartFuseE12emplace_backIJRKPK12GPIO_TypeDefRKmRKPK19__SPI_HandleTypeDefRSt5arrayI15ChannelSettingsLj6EESA_RNS_8delegateIFvPS1_EEEEEEvDpOT_+0x46>
 8002106:	4633      	mov	r3, r6
 8002108:	4622      	mov	r2, r4
 800210a:	6810      	ldr	r0, [r2, #0]
 800210c:	6851      	ldr	r1, [r2, #4]
 800210e:	6892      	ldr	r2, [r2, #8]
 8002110:	c307      	stmia	r3!, {r0, r1, r2}
 8002112:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002116:	f000 f8f2 	bl	80022fe <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 800211a:	4603      	mov	r3, r0
 800211c:	681c      	ldr	r4, [r3, #0]
 800211e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002122:	f000 f90d 	bl	8002340 <_ZN3etl7forwardIRNS_8delegateIFvP9SmartFuseEEEEEOT_RNS_16remove_referenceIS7_E4typeE>
 8002126:	4602      	mov	r2, r0
 8002128:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800212c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002130:	e883 0003 	stmia.w	r3, {r0, r1}
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4619      	mov	r1, r3
 800213a:	2074      	movs	r0, #116	; 0x74
 800213c:	f7fe fa52 	bl	80005e4 <_ZnwjPv>
 8002140:	4606      	mov	r6, r0
 8002142:	aa10      	add	r2, sp, #64	; 0x40
 8002144:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002148:	e893 0003 	ldmia.w	r3, {r0, r1}
 800214c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002150:	940f      	str	r4, [sp, #60]	; 0x3c
 8002152:	466d      	mov	r5, sp
 8002154:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002164:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002168:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	4630      	mov	r0, r6
 8002174:	f7fe feb8 	bl	8000ee8 <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvPS_EEE>
      ++p_end;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	609a      	str	r2, [r3, #8]
    }
 8002184:	bf00      	nop
 8002186:	376c      	adds	r7, #108	; 0x6c
 8002188:	46bd      	mov	sp, r7
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800218c <_ZN3etl7ivectorI9SmartFuseE5beginEv>:
    iterator begin()
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
      return p_buffer;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
    }
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_ZN3etl7ivectorI9SmartFuseE3endEv>:
    iterator end()
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
      return p_end;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
    }
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>:
      operator[](size_type __n) noexcept
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6839      	ldr	r1, [r7, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f8c3 	bl	8002356 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_ZN3etl7ivectorI9SmartFuseEixEj>:
    reference operator [](size_t i)
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
      return p_buffer[i];
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2174      	movs	r1, #116	; 0x74
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
    }
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_ZNSt5arrayIS_I12ChannelStateLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f8b0 	bl	8002372 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>
 8002212:	4603      	mov	r3, r0
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_ZNSt5arrayIS_ItLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6839      	ldr	r1, [r7, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f8b3 	bl	8002396 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_refERA4_KS1_j>
 8002230:	4603      	mov	r3, r0
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_ZNSt5arrayIN3etl6bitsetILj8EEELj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f8b8 	bl	80023ba <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_ZNSt14__array_traitsI15ChannelSettingsLj6EE6_S_refERA6_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_ZNSt14__array_traitsIbLj6EE6_S_refERA6_Kbj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_ZNSt5arrayIN9SmartFuse22ChannelSettingsAndDataELj6EE4dataEv>:
      data() noexcept
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f884 	bl	80023d0 <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_ptrERA6_KS1_>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 80022da:	687b      	ldr	r3, [r7, #4]
  }
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_ZN3etl7forwardIRKPK12GPIO_TypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 80022f0:	687b      	ldr	r3, [r7, #4]
  }
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8002306:	687b      	ldr	r3, [r7, #4]
  }
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_ZN3etl7forwardIRKPK19__SPI_HandleTypeDefEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800231c:	687b      	ldr	r3, [r7, #4]
  }
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_ZN3etl7forwardIRSt5arrayI15ChannelSettingsLj6EEEEOT_RNS_16remove_referenceIS5_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8002332:	687b      	ldr	r3, [r7, #4]
  }
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_ZN3etl7forwardIRNS_8delegateIFvP9SmartFuseEEEEEOT_RNS_16remove_referenceIS7_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8002348:	687b      	ldr	r3, [r7, #4]
  }
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_ZNSt14__array_traitsI14SmartFuseStateLj4EE6_S_refERA4_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_ZNSt14__array_traitsISt5arrayI12ChannelStateLj6EELj4EE6_S_refERA4_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_ZNSt14__array_traitsISt5arrayItLj6EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_ZNSt14__array_traitsIN3etl6bitsetILj8EEELj3EE6_S_ptrERA3_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_ZNSt14__array_traitsIN9SmartFuse22ChannelSettingsAndDataELj6EE6_S_ptrERA6_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <_ZN11GpioElementD1Ev>:
{
	public:
		GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted);

		//virtual void handle();
		virtual ~GpioElement() { };
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <_ZN11GpioElementD1Ev+0x1c>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	08009acc 	.word	0x08009acc

08002408 <_ZN11GpioElementD0Ev>:
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ffe9 	bl	80023e8 <_ZN11GpioElementD1Ev>
 8002416:	2110      	movs	r1, #16
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f006 fa96 	bl	800894a <_ZdlPvj>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>:
 *      Author: Piotr Lesicki
 */

#include "gpio elements.hpp"

GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	70fb      	strb	r3, [r7, #3]
						 port(port), pin(pin), is_inverted(is_inverted) { }
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <_ZN11GpioElementC1EPK12GPIO_TypeDefmb+0x34>)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	715a      	strb	r2, [r3, #5]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	08009acc 	.word	0x08009acc

08002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin) :
							   GpioElement(port, pin, false) { }

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	70fb      	strb	r3, [r7, #3]
							   GpioElement(port, pin, is_inverted) { }
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	f7ff ffd7 	bl	8002428 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 800247a:	4a04      	ldr	r2, [pc, #16]	; (800248c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0x2c>)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	08009abc 	.word	0x08009abc

08002490 <_ZN14GpioOutElement8activateEv>:

void GpioOutElement::activate()
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68d8      	ldr	r0, [r3, #12]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	b299      	uxth	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	795b      	ldrb	r3, [r3, #5]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <_ZN14GpioOutElement8activateEv+0x1e>
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <_ZN14GpioOutElement8activateEv+0x20>
 80024ae:	2301      	movs	r3, #1
 80024b0:	461a      	mov	r2, r3
 80024b2:	f004 fc75 	bl	8006da0 <HAL_GPIO_WritePin>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <_ZN14GpioOutElement10deactivateEv>:

void GpioOutElement::deactivate()
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, (this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68d8      	ldr	r0, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	b299      	uxth	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	795b      	ldrb	r3, [r3, #5]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <_ZN14GpioOutElement10deactivateEv+0x1e>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <_ZN14GpioOutElement10deactivateEv+0x20>
 80024dc:	2300      	movs	r3, #0
 80024de:	461a      	mov	r2, r3
 80024e0:	f004 fc5e 	bl	8006da0 <HAL_GPIO_WritePin>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>:
}

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin) :
							 GpioElement(port, pin, false) { }

GpioInElement::GpioInElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	70fb      	strb	r3, [r7, #3]
							 GpioElement(port, pin, is_inverted) { }
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	f7ff ff91 	bl	8002428 <_ZN11GpioElementC1EPK12GPIO_TypeDefmb>
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb+0x2c>)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	08009aac 	.word	0x08009aac

0800251c <_ZN13GpioInElement8isActiveEv>:

bool GpioInElement::isActive()
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	 *		  1  |    1   |  0
	 *
	 *	  basically a XOR operation
	 *
	 */
	return ((HAL_GPIO_ReadPin((GPIO_TypeDef*)(this->port), this->pin) == GPIO_PIN_SET) != this->is_inverted);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	4610      	mov	r0, r2
 8002532:	f004 fc1d 	bl	8006d70 <HAL_GPIO_ReadPin>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	795b      	ldrb	r3, [r3, #5]
 8002548:	429a      	cmp	r2, r3
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <_ZN13GpioInElementD1Ev>:

		//void handle() override;
		void toggle();
};

class GpioInElement : public GpioElement
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	4a05      	ldr	r2, [pc, #20]	; (800257c <_ZN13GpioInElementD1Ev+0x20>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff3b 	bl	80023e8 <_ZN11GpioElementD1Ev>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	08009aac 	.word	0x08009aac

08002580 <_ZN13GpioInElementD0Ev>:
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffe7 	bl	800255c <_ZN13GpioInElementD1Ev>
 800258e:	2110      	movs	r1, #16
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f006 f9da 	bl	800894a <_ZdlPvj>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZN14GpioOutElementD1Ev>:
class GpioOutElement : public GpioElement
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <_ZN14GpioOutElementD1Ev+0x20>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff19 	bl	80023e8 <_ZN11GpioElementD1Ev>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	08009abc 	.word	0x08009abc

080025c4 <_ZN14GpioOutElementD0Ev>:
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ffe7 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
 80025d2:	2110      	movs	r1, #16
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f006 f9b8 	bl	800894a <_ZdlPvj>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a71      	ldr	r2, [pc, #452]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002612:	4b6c      	ldr	r3, [pc, #432]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	4a6b      	ldr	r2, [pc, #428]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800261e:	4b69      	ldr	r3, [pc, #420]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b60      	ldr	r3, [pc, #384]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	4a5f      	ldr	r2, [pc, #380]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800265a:	4b5a      	ldr	r3, [pc, #360]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	4a59      	ldr	r2, [pc, #356]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002660:	f043 0308 	orr.w	r3, r3, #8
 8002664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002666:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <MX_GPIO_Init+0x1e0>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002672:	2200      	movs	r2, #0
 8002674:	210f      	movs	r1, #15
 8002676:	4854      	ldr	r0, [pc, #336]	; (80027c8 <MX_GPIO_Init+0x1e4>)
 8002678:	f004 fb92 	bl	8006da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800267c:	2200      	movs	r2, #0
 800267e:	211e      	movs	r1, #30
 8002680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002684:	f004 fb8c 	bl	8006da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_7
 8002688:	2200      	movs	r2, #0
 800268a:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800268e:	484f      	ldr	r0, [pc, #316]	; (80027cc <MX_GPIO_Init+0x1e8>)
 8002690:	f004 fb86 	bl	8006da0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002694:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8002698:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	4847      	ldr	r0, [pc, #284]	; (80027c8 <MX_GPIO_Init+0x1e4>)
 80026aa:	f004 f9cf 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026b4:	2303      	movs	r3, #3
 80026b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4619      	mov	r1, r3
 80026c2:	4841      	ldr	r0, [pc, #260]	; (80027c8 <MX_GPIO_Init+0x1e4>)
 80026c4:	f004 f9c2 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80026c8:	230f      	movs	r3, #15
 80026ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026cc:	2301      	movs	r3, #1
 80026ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	483a      	ldr	r0, [pc, #232]	; (80027c8 <MX_GPIO_Init+0x1e4>)
 80026e0:	f004 f9b4 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80026e4:	231e      	movs	r3, #30
 80026e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e8:	2301      	movs	r3, #1
 80026ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fe:	f004 f9a5 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002702:	2304      	movs	r3, #4
 8002704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800270a:	2301      	movs	r3, #1
 800270c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	482c      	ldr	r0, [pc, #176]	; (80027cc <MX_GPIO_Init+0x1e8>)
 800271a:	f004 f997 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 800271e:	f44f 63d4 	mov.w	r3, #1696	; 0x6a0
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	4825      	ldr	r0, [pc, #148]	; (80027cc <MX_GPIO_Init+0x1e8>)
 8002738:	f004 f988 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14
                           PB15 PB6 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800273c:	f64f 1340 	movw	r3, #63808	; 0xf940
 8002740:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002742:	2303      	movs	r3, #3
 8002744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	481e      	ldr	r0, [pc, #120]	; (80027cc <MX_GPIO_Init+0x1e8>)
 8002752:	f004 f97b 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8002756:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 800275a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800275c:	2303      	movs	r3, #3
 800275e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4619      	mov	r1, r3
 800276a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800276e:	f004 f96d 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002772:	2304      	movs	r3, #4
 8002774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002776:	2303      	movs	r3, #3
 8002778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4812      	ldr	r0, [pc, #72]	; (80027d0 <MX_GPIO_Init+0x1ec>)
 8002786:	f004 f961 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800278a:	2310      	movs	r3, #16
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	480b      	ldr	r0, [pc, #44]	; (80027cc <MX_GPIO_Init+0x1e8>)
 800279e:	f004 f955 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027a2:	2308      	movs	r3, #8
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a6:	2303      	movs	r3, #3
 80027a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4807      	ldr	r0, [pc, #28]	; (80027d4 <MX_GPIO_Init+0x1f0>)
 80027b6:	f004 f949 	bl	8006a4c <HAL_GPIO_Init>

}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	; 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	48000800 	.word	0x48000800
 80027cc:	48000400 	.word	0x48000400
 80027d0:	48000c00 	.word	0x48000c00
 80027d4:	48001c00 	.word	0x48001c00

080027d8 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
 80027dc:	2300      	movs	r3, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	601a      	str	r2, [r3, #0]
    {
    }
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
    {
    }
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	461a      	mov	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	6053      	str	r3, [r2, #4]
 8002832:	6093      	str	r3, [r2, #8]
 8002834:	60d3      	str	r3, [r2, #12]
 8002836:	6113      	str	r3, [r2, #16]
 8002838:	6153      	str	r3, [r2, #20]
 800283a:	6193      	str	r3, [r2, #24]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	331c      	adds	r3, #28
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	331c      	adds	r3, #28
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	68b8      	ldr	r0, [r7, #8]
 8002850:	f003 fc82 	bl	8006158 <HAL_CAN_GetRxMessage>
 8002854:	4603      	mov	r3, r0
 8002856:	461a      	mov	r2, r3
    this->status =
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	791a      	ldrb	r2, [r3, #4]
 8002874:	795b      	ldrb	r3, [r3, #5]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	4313      	orrs	r3, r2
 800287e:	b29b      	uxth	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	6938      	ldr	r0, [r7, #16]
 80028a0:	f000 ffca 	bl	8003838 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE5beginEv>
 80028a4:	6178      	str	r0, [r7, #20]
 80028a6:	6938      	ldr	r0, [r7, #16]
 80028a8:	f000 ffd2 	bl	8003850 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE3endEv>
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d01f      	beq.n	80028f6 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ffd2 	bl	8002868 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80028c4:	4602      	mov	r2, r0
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	6839      	ldr	r1, [r7, #0]
 80028e6:	4610      	mov	r0, r2
 80028e8:	4798      	blx	r3
        return true;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e004      	b.n	80028f8 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3304      	adds	r3, #4
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e7db      	b.n	80028ae <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 80028f6:	2300      	movs	r3, #0
  }
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_ZN8PUTM_CAN13Can_interface11get_tc_mainEv>:
    return steering_wheel_main.data;
  }
  Steering_Wheel_event get_steering_wheel_event() {
    return steering_wheel_event.data;
  }
  TC_main get_tc_main() { return tc_main.data; }
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f203 1315 	addw	r3, r3, #277	; 0x115
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	6011      	str	r1, [r2, #0]
 8002918:	6053      	str	r3, [r2, #4]
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	2200      	movs	r2, #0
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff6f 	bl	800281c <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 800293e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	4619      	mov	r1, r3
 800294c:	4803      	ldr	r0, [pc, #12]	; (800295c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800294e:	f7ff ff9d 	bl	800288c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 8002952:	bf00      	nop
 8002954:	3730      	adds	r7, #48	; 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000

08002960 <_ZN16SmartFuseHandlerILm4EEC1Ev>:

		SmartFuseState getGSB(std::array < uint8_t, 3 > x);
};

template <uint32_t num_of_sf>
class SmartFuseHandler
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 ff9a 	bl	80038a4 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <_ZZ4mainENKUlP9SmartFuseE_clES0_>:
			.duty_cycle = 0x000,
			.clamping_currents = { 0x0000, 0x0062 }
		},
		std_channel_setting
	};
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_2, &hspi1, fuse_1_channels_settings, 100, [](SmartFuse* sf)
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	{

		static uint16_t previous_setting = 0;

		uint16_t setting = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	82fb      	strh	r3, [r7, #22]
				previous_setting = setting;
			}
		}
		else
		{
			auto tc_on = PUTM_CAN::can.get_tc_main().tractive_system_on;
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	4914      	ldr	r1, [pc, #80]	; (80029e0 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x64>)
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ffb5 	bl	8002900 <_ZN8PUTM_CAN13Can_interface11get_tc_mainEv>
 8002996:	7c7b      	ldrb	r3, [r7, #17]
 8002998:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800299c:	757b      	strb	r3, [r7, #21]

			if(tc_on) setting = 1023;
 800299e:	7d7b      	ldrb	r3, [r7, #21]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x30>
 80029a4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80029a8:	82fb      	strh	r3, [r7, #22]
 80029aa:	e001      	b.n	80029b0 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x34>
			else setting = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	82fb      	strh	r3, [r7, #22]

			if(setting != previous_setting)
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x68>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	8afa      	ldrh	r2, [r7, #22]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d00e      	beq.n	80029d8 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x5c>
			{
				// fan left
				sf->setChannelDutyCykle(Channel::c3, setting);
 80029ba:	8afb      	ldrh	r3, [r7, #22]
 80029bc:	461a      	mov	r2, r3
 80029be:	2103      	movs	r1, #3
 80029c0:	6838      	ldr	r0, [r7, #0]
 80029c2:	f7fe fe3d 	bl	8001640 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>
				// fan right
				sf->setChannelDutyCykle(Channel::c4, setting);
 80029c6:	8afb      	ldrh	r3, [r7, #22]
 80029c8:	461a      	mov	r2, r3
 80029ca:	2104      	movs	r1, #4
 80029cc:	6838      	ldr	r0, [r7, #0]
 80029ce:	f7fe fe37 	bl	8001640 <_ZN9SmartFuse19setChannelDutyCykleE7Channelt>

				previous_setting = setting;
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <_ZZ4mainENKUlP9SmartFuseE_clES0_+0x68>)
 80029d4:	8afb      	ldrh	r3, [r7, #22]
 80029d6:	8013      	strh	r3, [r2, #0]
			}
		}
	});
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000000 	.word	0x20000000
 80029e4:	200009c0 	.word	0x200009c0

080029e8 <_ZN11GpioElementC1ERKS_>:
class GpioElement
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <_ZN11GpioElementC1ERKS_+0x40>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	791a      	ldrb	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	711a      	strb	r2, [r3, #4]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	795a      	ldrb	r2, [r3, #5]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	715a      	strb	r2, [r3, #5]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	08009acc 	.word	0x08009acc

08002a2c <_ZN13GpioInElementC1ERKS_>:
class GpioInElement : public GpioElement
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ffd3 	bl	80029e8 <_ZN11GpioElementC1ERKS_>
 8002a42:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <_ZN13GpioInElementC1ERKS_+0x28>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	08009aac 	.word	0x08009aac

08002a58 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4614      	mov	r4, r2
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a74:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f005 ffc9 	bl	8008a18 <memcpy>
  }
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bdb0      	pop	{r4, r5, r7, pc}

08002a90 <main>:
{
 8002a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a92:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8002a96:	af12      	add	r7, sp, #72	; 0x48
	Device::init();
 8002a98:	f000 fb3e 	bl	8003118 <_ZN6Device4initEv>
	ChannelSettings std_channel_setting
 8002a9c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	811a      	strh	r2, [r3, #8]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8002aba:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002abe:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
 8002ac2:	2362      	movs	r3, #98	; 0x62
 8002ac4:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc
	};
 8002ac8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002acc:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002ad0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ad2:	c303      	stmia	r3!, {r0, r1}
 8002ad4:	801a      	strh	r2, [r3, #0]
 8002ad6:	f507 72c1 	add.w	r2, r7, #386	; 0x182
 8002ada:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002ade:	cb03      	ldmia	r3!, {r0, r1}
 8002ae0:	6010      	str	r0, [r2, #0]
 8002ae2:	6051      	str	r1, [r2, #4]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	8113      	strh	r3, [r2, #8]
 8002ae8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8002aec:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002af0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002af2:	c303      	stmia	r3!, {r0, r1}
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	f507 72cb 	add.w	r2, r7, #406	; 0x196
 8002afa:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002afe:	cb03      	ldmia	r3!, {r0, r1}
 8002b00:	6010      	str	r0, [r2, #0]
 8002b02:	6051      	str	r1, [r2, #4]
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	8113      	strh	r3, [r2, #8]
 8002b08:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002b0c:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b12:	c303      	stmia	r3!, {r0, r1}
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	f507 72d5 	add.w	r2, r7, #426	; 0x1aa
 8002b1a:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002b1e:	cb03      	ldmia	r3!, {r0, r1}
 8002b20:	6010      	str	r0, [r2, #0]
 8002b22:	6051      	str	r1, [r2, #4]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	8113      	strh	r3, [r2, #8]
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_1, &hspi1, std_fuse_channels_settings);
 8002b28:	466d      	mov	r5, sp
 8002b2a:	f507 74bc 	add.w	r4, r7, #376	; 0x178
 8002b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002b3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002b42:	4bd2      	ldr	r3, [pc, #840]	; (8002e8c <main+0x3fc>)
 8002b44:	2202      	movs	r2, #2
 8002b46:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002b4a:	48d1      	ldr	r0, [pc, #836]	; (8002e90 <main+0x400>)
 8002b4c:	f7fd fd56 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
	std::array < ChannelSettings, number_of_channels_per_fuse > fuse_1_channels_settings
 8002b50:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002b54:	223c      	movs	r2, #60	; 0x3c
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f005 ff6b 	bl	8008a34 <memset>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8002b64:	2302      	movs	r3, #2
 8002b66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
 8002b70:	2362      	movs	r3, #98	; 0x62
 8002b72:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
 8002b82:	2302      	movs	r3, #2
 8002b84:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
 8002b88:	2362      	movs	r3, #98	; 0x62
 8002b8a:	f8a7 316c 	strh.w	r3, [r7, #364]	; 0x16c
	};
 8002b8e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002b92:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002b96:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b98:	c303      	stmia	r3!, {r0, r1}
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	f507 72a3 	add.w	r2, r7, #326	; 0x146
 8002ba0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002ba4:	cb03      	ldmia	r3!, {r0, r1}
 8002ba6:	6010      	str	r0, [r2, #0]
 8002ba8:	6051      	str	r1, [r2, #4]
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	8113      	strh	r3, [r2, #8]
 8002bae:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002bb2:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002bb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bb8:	c303      	stmia	r3!, {r0, r1}
 8002bba:	801a      	strh	r2, [r3, #0]
 8002bbc:	f507 72b7 	add.w	r2, r7, #366	; 0x16e
 8002bc0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002bc4:	cb03      	ldmia	r3!, {r0, r1}
 8002bc6:	6010      	str	r0, [r2, #0]
 8002bc8:	6051      	str	r1, [r2, #4]
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	8113      	strh	r3, [r2, #8]
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_2, &hspi1, fuse_1_channels_settings, 100, [](SmartFuse* sf)
 8002bce:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002bd2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fe89 	bl	80038f0 <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_>
 8002bde:	aa10      	add	r2, sp, #64	; 0x40
 8002be0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002be4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002be8:	e882 0003 	stmia.w	r2, {r0, r1}
 8002bec:	2364      	movs	r3, #100	; 0x64
 8002bee:	930f      	str	r3, [sp, #60]	; 0x3c
 8002bf0:	466d      	mov	r5, sp
 8002bf2:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8002bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002c06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002c0a:	4ba0      	ldr	r3, [pc, #640]	; (8002e8c <main+0x3fc>)
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002c12:	489f      	ldr	r0, [pc, #636]	; (8002e90 <main+0x400>)
 8002c14:	f7fd fd07 	bl	8000626 <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EEmN3etl8delegateIFvP9SmartFuseEEE>
	 * channel 2: lidar
	 * channel 3: wheel speed
	 * channel 4: box dv
	 * channel 5: jetson
	 */
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_3, &hspi1, std_fuse_channels_settings);
 8002c18:	466d      	mov	r5, sp
 8002c1a:	f507 74bc 	add.w	r4, r7, #376	; 0x178
 8002c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002c2e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002c32:	4b96      	ldr	r3, [pc, #600]	; (8002e8c <main+0x3fc>)
 8002c34:	2208      	movs	r2, #8
 8002c36:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002c3a:	4895      	ldr	r0, [pc, #596]	; (8002e90 <main+0x400>)
 8002c3c:	f7fd fcde 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
	 * channel 2: bat hv
	 * channel 3: spare 2
	 * channel 4: diagport
	 * channel 5: pump
	 */
	std::array < ChannelSettings, number_of_channels_per_fuse > fuse_3_channels_settings
 8002c40:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c44:	223c      	movs	r2, #60	; 0x3c
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f005 fef3 	bl	8008a34 <memset>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
 8002c54:	2302      	movs	r3, #2
 8002c56:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
 8002c60:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002c64:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8002c68:	23a2      	movs	r3, #162	; 0xa2
 8002c6a:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
			.latch_off_time_out = 0x2,
			.sampling_mode = SamplingMode::Continuous,
			.duty_cycle = 0xfff,
			.clamping_currents = { 0x0000, 0x00a2 }
		}
	};
 8002c6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c72:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002c76:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c78:	c303      	stmia	r3!, {r0, r1}
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	f507 7285 	add.w	r2, r7, #266	; 0x10a
 8002c80:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002c84:	cb03      	ldmia	r3!, {r0, r1}
 8002c86:	6010      	str	r0, [r2, #0]
 8002c88:	6051      	str	r1, [r2, #4]
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	8113      	strh	r3, [r2, #8]
 8002c8e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002c92:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002c96:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c98:	c303      	stmia	r3!, {r0, r1}
 8002c9a:	801a      	strh	r2, [r3, #0]
 8002c9c:	f507 728f 	add.w	r2, r7, #286	; 0x11e
 8002ca0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002ca4:	cb03      	ldmia	r3!, {r0, r1}
 8002ca6:	6010      	str	r0, [r2, #0]
 8002ca8:	6051      	str	r1, [r2, #4]
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	8113      	strh	r3, [r2, #8]
 8002cae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002cb2:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8002cb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cb8:	c303      	stmia	r3!, {r0, r1}
 8002cba:	801a      	strh	r2, [r3, #0]
	sf_handler.emplaceBack(GPIOA, GPIO_PIN_4, &hspi1, fuse_3_channels_settings);
 8002cbc:	466d      	mov	r5, sp
 8002cbe:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8002cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002cd2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002cd6:	4b6d      	ldr	r3, [pc, #436]	; (8002e8c <main+0x3fc>)
 8002cd8:	2210      	movs	r2, #16
 8002cda:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002cde:	486c      	ldr	r0, [pc, #432]	; (8002e90 <main+0x400>)
 8002ce0:	f7fd fc8c 	bl	80005fc <_ZN16SmartFuseHandlerILm4EE11emplaceBackEPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefSt5arrayI15ChannelSettingsLj6EE>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ce4:	f001 ff03 	bl	8004aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ce8:	f000 f9b6 	bl	8003058 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cec:	f7ff fc7a 	bl	80025e4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002cf0:	f7fd fbee 	bl	80004d0 <MX_CAN1_Init>
  MX_SPI1_Init();
 8002cf4:	f001 fc90 	bl	8004618 <MX_SPI1_Init>
  MX_ADC1_Init();
 8002cf8:	f7fd fad2 	bl	80002a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	sf_handler.initAll();
 8002cfc:	4864      	ldr	r0, [pc, #400]	; (8002e90 <main+0x400>)
 8002cfe:	f7fd fcd9 	bl	80006b4 <_ZN16SmartFuseHandlerILm4EE7initAllEv>
	initCAN();
 8002d02:	f000 fae3 	bl	80032cc <_Z7initCANv>
	water_pot_enable.activate();
 8002d06:	4863      	ldr	r0, [pc, #396]	; (8002e94 <main+0x404>)
 8002d08:	f7ff fbc2 	bl	8002490 <_ZN14GpioOutElement8activateEv>
	led_2_control.deactivate();
 8002d0c:	4862      	ldr	r0, [pc, #392]	; (8002e98 <main+0x408>)
 8002d0e:	f7ff fbd6 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_1_control.deactivate();
 8002d12:	4862      	ldr	r0, [pc, #392]	; (8002e9c <main+0x40c>)
 8002d14:	f7ff fbd3 	bl	80024be <_ZN14GpioOutElement10deactivateEv>

	led_ok.deactivate();
 8002d18:	4861      	ldr	r0, [pc, #388]	; (8002ea0 <main+0x410>)
 8002d1a:	f7ff fbd0 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 8002d1e:	4861      	ldr	r0, [pc, #388]	; (8002ea4 <main+0x414>)
 8002d20:	f7ff fbcd 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8002d24:	4860      	ldr	r0, [pc, #384]	; (8002ea8 <main+0x418>)
 8002d26:	f7ff fbca 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 8002d2a:	4860      	ldr	r0, [pc, #384]	; (8002eac <main+0x41c>)
 8002d2c:	f7ff fbc7 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	sf_handler.enableAll();
 8002d30:	4857      	ldr	r0, [pc, #348]	; (8002e90 <main+0x400>)
 8002d32:	f7fd fcea 	bl	800070a <_ZN16SmartFuseHandlerILm4EE9enableAllEv>

	led_ok.activate();
 8002d36:	485a      	ldr	r0, [pc, #360]	; (8002ea0 <main+0x410>)
 8002d38:	f7ff fbaa 	bl	8002490 <_ZN14GpioOutElement8activateEv>

	Timer timer_can_send_main_frame(10);
 8002d3c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002d40:	210a      	movs	r1, #10
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fe49 	bl	80049da <_ZN5TimerC1Em>
	Timer timer_can_send_other_frames(25);
 8002d48:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d4c:	2119      	movs	r1, #25
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 fe43 	bl	80049da <_ZN5TimerC1Em>
		hvd_sense_sig,
		inverter_sense_sig,
		firewall_sense_sig,
		dv_sense_sig,
		spare_1_sense_sig
	};
 8002d54:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002d58:	4955      	ldr	r1, [pc, #340]	; (8002eb0 <main+0x420>)
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7ff fe66 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002d60:	3410      	adds	r4, #16
 8002d62:	4954      	ldr	r1, [pc, #336]	; (8002eb4 <main+0x424>)
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7ff fe61 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002d6a:	3410      	adds	r4, #16
 8002d6c:	4952      	ldr	r1, [pc, #328]	; (8002eb8 <main+0x428>)
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f7ff fe5c 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002d74:	3410      	adds	r4, #16
 8002d76:	4951      	ldr	r1, [pc, #324]	; (8002ebc <main+0x42c>)
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7ff fe57 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002d7e:	3410      	adds	r4, #16
 8002d80:	494f      	ldr	r1, [pc, #316]	; (8002ec0 <main+0x430>)
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7ff fe52 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002d88:	3410      	adds	r4, #16
 8002d8a:	494e      	ldr	r1, [pc, #312]	; (8002ec4 <main+0x434>)
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7ff fe4d 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002d92:	3410      	adds	r4, #16
 8002d94:	494c      	ldr	r1, [pc, #304]	; (8002ec8 <main+0x438>)
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7ff fe48 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>
 8002d9c:	f104 0310 	add.w	r3, r4, #16
 8002da0:	494a      	ldr	r1, [pc, #296]	; (8002ecc <main+0x43c>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fe42 	bl	8002a2c <_ZN13GpioInElementC1ERKS_>

	while (1)
	{
		//----------------------------------------------------------------------------------------
		// handle smart fuses and show as Ok/Warnings/Error
		Device::handleStates();
 8002da8:	f000 fa56 	bl	8003258 <_ZN6Device12handleStatesEv>
		Device::resetState();
 8002dac:	f000 fa34 	bl	8003218 <_ZN6Device10resetStateEv>
		auto state = sf_handler.handleAll();
 8002db0:	4837      	ldr	r0, [pc, #220]	; (8002e90 <main+0x400>)
 8002db2:	f7fd fc54 	bl	800065e <_ZN16SmartFuseHandlerILm4EE9handleAllEv>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca
		if(state != SmartFuseState::Ok) Device::changeState(PUTM_CAN::SF_states::Warning_1);
 8002dbc:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <main+0x33a>
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f000 f9e5 	bl	8003194 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesE>
		// debug stuff
		fuses_states = sf_handler.getStates();
 8002dca:	4831      	ldr	r0, [pc, #196]	; (8002e90 <main+0x400>)
 8002dcc:	f7fd fccb 	bl	8000766 <_ZN16SmartFuseHandlerILm4EE9getStatesEv>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4a3f      	ldr	r2, [pc, #252]	; (8002ed0 <main+0x440>)
 8002dd4:	6013      	str	r3, [r2, #0]
		channels_states = sf_handler.getChannelsStates();
 8002dd6:	4c3f      	ldr	r4, [pc, #252]	; (8002ed4 <main+0x444>)
 8002dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ddc:	492c      	ldr	r1, [pc, #176]	; (8002e90 <main+0x400>)
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fcf5 	bl	80007ce <_ZN16SmartFuseHandlerILm4EE17getChannelsStatesEv>
 8002de4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002de8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002dec:	461d      	mov	r5, r3
 8002dee:	6828      	ldr	r0, [r5, #0]
 8002df0:	6869      	ldr	r1, [r5, #4]
 8002df2:	68aa      	ldr	r2, [r5, #8]
 8002df4:	68eb      	ldr	r3, [r5, #12]
 8002df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002df8:	6928      	ldr	r0, [r5, #16]
 8002dfa:	6969      	ldr	r1, [r5, #20]
 8002dfc:	c403      	stmia	r4!, {r0, r1}
		channels_currents = sf_handler.getChannelsCurrents();
 8002dfe:	4d36      	ldr	r5, [pc, #216]	; (8002ed8 <main+0x448>)
 8002e00:	463b      	mov	r3, r7
 8002e02:	4923      	ldr	r1, [pc, #140]	; (8002e90 <main+0x400>)
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fd0d 	bl	8000824 <_ZN16SmartFuseHandlerILm4EE19getChannelsCurrentsEv>
 8002e0a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002e0e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e12:	461c      	mov	r4, r3
 8002e14:	462e      	mov	r6, r5
 8002e16:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8002e1a:	4635      	mov	r5, r6
 8002e1c:	4623      	mov	r3, r4
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e28:	3410      	adds	r4, #16
 8002e2a:	3610      	adds	r6, #16
 8002e2c:	4564      	cmp	r4, ip
 8002e2e:	d1f4      	bne.n	8002e1a <main+0x38a>

		//----------------------------------------------------------------------------------------
		// handle safety
		for (size_t i = 0; i < optos.size(); i++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8002e36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fd6e 	bl	800391c <_ZNKSt5arrayI13GpioInElementLj8EE4sizeEv>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002e46:	4293      	cmp	r3, r2
 8002e48:	bf34      	ite	cc
 8002e4a:	2301      	movcc	r3, #1
 8002e4c:	2300      	movcs	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d045      	beq.n	8002ee0 <main+0x450>
			safeties[i] = optos[i].isActive();
 8002e54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e58:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fd68 	bl	8003932 <_ZNSt5arrayI13GpioInElementLj8EEixEj>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fb59 	bl	800251c <_ZN13GpioInElement8isActiveEv>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461c      	mov	r4, r3
 8002e6e:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8002e72:	481a      	ldr	r0, [pc, #104]	; (8002edc <main+0x44c>)
 8002e74:	f000 fc4a 	bl	800370c <_ZNSt5arrayIbLj8EEixEj>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < optos.size(); i++)
 8002e7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002e82:	3301      	adds	r3, #1
 8002e84:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8002e88:	e7d5      	b.n	8002e36 <main+0x3a6>
 8002e8a:	bf00      	nop
 8002e8c:	200009e0 	.word	0x200009e0
 8002e90:	200007e4 	.word	0x200007e4
 8002e94:	200006c0 	.word	0x200006c0
 8002e98:	200006a0 	.word	0x200006a0
 8002e9c:	20000690 	.word	0x20000690
 8002ea0:	20000680 	.word	0x20000680
 8002ea4:	20000670 	.word	0x20000670
 8002ea8:	20000660 	.word	0x20000660
 8002eac:	20000650 	.word	0x20000650
 8002eb0:	200006e0 	.word	0x200006e0
 8002eb4:	200006f0 	.word	0x200006f0
 8002eb8:	20000700 	.word	0x20000700
 8002ebc:	20000710 	.word	0x20000710
 8002ec0:	20000720 	.word	0x20000720
 8002ec4:	20000730 	.word	0x20000730
 8002ec8:	20000740 	.word	0x20000740
 8002ecc:	20000750 	.word	0x20000750
 8002ed0:	20000788 	.word	0x20000788
 8002ed4:	2000078c 	.word	0x2000078c
 8002ed8:	200007a4 	.word	0x200007a4
 8002edc:	200007d4 	.word	0x200007d4

		//----------------------------------------------------------------------------------------
		// transmit receive can and handle
		// main frame
		if(timer_can_send_main_frame.checkIfTimedOutAndReset())
 8002ee0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 fda5 	bl	8004a34 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d04f      	beq.n	8002f90 <main+0x500>
				.device_state =	device_state,
				.fuse_0_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[0]),
				.fuse_1_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[1]),
				.fuse_2_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[2]),
				.fuse_3_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[3])
			};
 8002ef0:	4b53      	ldr	r3, [pc, #332]	; (8003040 <main+0x5b0>)
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002ef8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002efc:	701a      	strb	r2, [r3, #0]
				.fuse_0_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[0]),
 8002efe:	2100      	movs	r1, #0
 8002f00:	4850      	ldr	r0, [pc, #320]	; (8003044 <main+0x5b4>)
 8002f02:	f7ff f95b 	bl	80021bc <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002f06:	4603      	mov	r3, r0
 8002f08:	781a      	ldrb	r2, [r3, #0]
			};
 8002f0a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002f0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f12:	705a      	strb	r2, [r3, #1]
				.fuse_1_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[1]),
 8002f14:	2101      	movs	r1, #1
 8002f16:	484b      	ldr	r0, [pc, #300]	; (8003044 <main+0x5b4>)
 8002f18:	f7ff f950 	bl	80021bc <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	781a      	ldrb	r2, [r3, #0]
			};
 8002f20:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002f24:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f28:	709a      	strb	r2, [r3, #2]
				.fuse_2_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[2]),
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	4845      	ldr	r0, [pc, #276]	; (8003044 <main+0x5b4>)
 8002f2e:	f7ff f945 	bl	80021bc <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002f32:	4603      	mov	r3, r0
 8002f34:	781a      	ldrb	r2, [r3, #0]
			};
 8002f36:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002f3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f3e:	70da      	strb	r2, [r3, #3]
				.fuse_3_state = static_cast<PUTM_CAN::SmartFuseState>(fuses_states[3])
 8002f40:	2103      	movs	r1, #3
 8002f42:	4840      	ldr	r0, [pc, #256]	; (8003044 <main+0x5b4>)
 8002f44:	f7ff f93a 	bl	80021bc <_ZNSt5arrayI14SmartFuseStateLj4EEixEj>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	781a      	ldrb	r2, [r3, #0]
			};
 8002f4c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002f50:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f54:	711a      	strb	r2, [r3, #4]

			PUTM_CAN::Can_tx_message<PUTM_CAN::SF_main> can_sender(sf_main, PUTM_CAN::can_tx_header_SF_MAIN);
 8002f56:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f5e:	4a3a      	ldr	r2, [pc, #232]	; (8003048 <main+0x5b8>)
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fd79 	bl	8002a58 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

			if(can_sender.send(hcan1) != HAL_StatusTypeDef::HAL_OK)
 8002f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f6a:	4938      	ldr	r1, [pc, #224]	; (800304c <main+0x5bc>)
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fcef 	bl	8003950 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <main+0x4fc>
				Device::changeState(PUTM_CAN::SF_states::Error, true);
 8002f82:	2101      	movs	r1, #1
 8002f84:	2003      	movs	r0, #3
 8002f86:	f000 f923 	bl	80031d0 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesEb>
 8002f8a:	e001      	b.n	8002f90 <main+0x500>
			else Device::unlockState();
 8002f8c:	f000 f958 	bl	8003240 <_ZN6Device11unlockStateEv>
		}

		// other frames
		if(timer_can_send_other_frames.checkIfTimedOutAndReset())
 8002f90:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f001 fd4d 	bl	8004a34 <_ZN5Timer23checkIfTimedOutAndResetEv>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f43f af03 	beq.w	8002da8 <main+0x318>
		{
			auto can_state = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
			static size_t send_frame = 0;

			switch (send_frame)
 8002fa8:	4b29      	ldr	r3, [pc, #164]	; (8003050 <main+0x5c0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d823      	bhi.n	8002ff8 <main+0x568>
 8002fb0:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <main+0x528>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08002fc9 	.word	0x08002fc9
 8002fbc:	08002fd5 	.word	0x08002fd5
 8002fc0:	08002fe1 	.word	0x08002fe1
 8002fc4:	08002fed 	.word	0x08002fed
			{
				case 0: can_state = sendCanFramePassiveElements(); break;
 8002fc8:	f000 f9ec 	bl	80033a4 <_Z27sendCanFramePassiveElementsv>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
 8002fd2:	e011      	b.n	8002ff8 <main+0x568>
				case 1: can_state = sendCanFrameLegendaryDVAndSupply(); break;
 8002fd4:	f000 fa8a 	bl	80034ec <_Z32sendCanFrameLegendaryDVAndSupplyv>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
 8002fde:	e00b      	b.n	8002ff8 <main+0x568>
				case 2: can_state = sendCanFrameSupply(); break;
 8002fe0:	f000 fb10 	bl	8003604 <_Z18sendCanFrameSupplyv>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
 8002fea:	e005      	b.n	8002ff8 <main+0x568>
				case 3: can_state = sendCanFrameSafety(); break;
 8002fec:	f000 fbc8 	bl	8003780 <_Z18sendCanFrameSafetyv>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
 8002ff6:	bf00      	nop
			}

			frame_send_fail[send_frame] = can_state;
 8002ff8:	f897 41cb 	ldrb.w	r4, [r7, #459]	; 0x1cb
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <main+0x5c0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	4814      	ldr	r0, [pc, #80]	; (8003054 <main+0x5c4>)
 8003004:	f000 fcb8 	bl	8003978 <_ZNSt5arrayI17HAL_StatusTypeDefLj6EEixEj>
 8003008:	4603      	mov	r3, r0
 800300a:	4622      	mov	r2, r4
 800300c:	701a      	strb	r2, [r3, #0]

			if(can_state != HAL_OK)
 800300e:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <main+0x592>
			{
				Device::changeState(PUTM_CAN::SF_states::Warning_2);
 8003016:	2002      	movs	r0, #2
 8003018:	f000 f8bc 	bl	8003194 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesE>
				Device::raiseError(DeviceError::CanDataFramesError);
 800301c:	2004      	movs	r0, #4
 800301e:	f000 f89f 	bl	8003160 <_ZN6Device10raiseErrorE11DeviceError>
			}

			send_frame++;
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <main+0x5c0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	4a09      	ldr	r2, [pc, #36]	; (8003050 <main+0x5c0>)
 800302a:	6013      	str	r3, [r2, #0]
			if(send_frame > 5) send_frame = 0;
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <main+0x5c0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b05      	cmp	r3, #5
 8003032:	f67f aeb9 	bls.w	8002da8 <main+0x318>
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <main+0x5c0>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
 800303c:	e6b4      	b.n	8002da8 <main+0x318>
 800303e:	bf00      	nop
 8003040:	200007e2 	.word	0x200007e2
 8003044:	20000788 	.word	0x20000788
 8003048:	08009ad4 	.word	0x08009ad4
 800304c:	200002f0 	.word	0x200002f0
 8003050:	200009c4 	.word	0x200009c4
 8003054:	200007dc 	.word	0x200007dc

08003058 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b098      	sub	sp, #96	; 0x60
 800305c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800305e:	f107 0318 	add.w	r3, r7, #24
 8003062:	2248      	movs	r2, #72	; 0x48
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f005 fce4 	bl	8008a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
 8003078:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800307a:	2000      	movs	r0, #0
 800307c:	f003 fec8 	bl	8006e10 <HAL_PWREx_ControlVoltageScaling>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8003090:	f000 fbb8 	bl	8003804 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003094:	2302      	movs	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800309e:	2340      	movs	r3, #64	; 0x40
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030a2:	2302      	movs	r3, #2
 80030a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030a6:	2302      	movs	r3, #2
 80030a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80030aa:	2302      	movs	r3, #2
 80030ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 30;
 80030ae:	231e      	movs	r3, #30
 80030b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030b2:	2302      	movs	r3, #2
 80030b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030b6:	2302      	movs	r3, #2
 80030b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030ba:	2302      	movs	r3, #2
 80030bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030be:	f107 0318 	add.w	r3, r7, #24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 ff48 	bl	8006f58 <HAL_RCC_OscConfig>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <_Z18SystemClock_Configv+0x84>
  {
    Error_Handler();
 80030d8:	f000 fb94 	bl	8003804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030dc:	230f      	movs	r3, #15
 80030de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030e0:	2303      	movs	r3, #3
 80030e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	2105      	movs	r1, #5
 80030f4:	4618      	mov	r0, r3
 80030f6:	f004 fbb7 	bl	8007868 <HAL_RCC_ClockConfig>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800310a:	f000 fb7b 	bl	8003804 <Error_Handler>
  }
}
 800310e:	bf00      	nop
 8003110:	3760      	adds	r7, #96	; 0x60
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <_ZN6Device4initEv>:

/* USER CODE BEGIN 4 */

void Device::init()
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
	for(size_t i = 0; i < Device::log.max_size(); i++)
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	480e      	ldr	r0, [pc, #56]	; (800315c <_ZN6Device4initEv+0x44>)
 8003124:	f000 fc37 	bl	8003996 <_ZNK3etl10queue_baseILj2EE8max_sizeEv>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4293      	cmp	r3, r2
 800312e:	bf34      	ite	cc
 8003130:	2301      	movcc	r3, #1
 8003132:	2300      	movcs	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <_ZN6Device4initEv+0x3c>
		Device::log.push({DeviceError::None, 0});
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4805      	ldr	r0, [pc, #20]	; (800315c <_ZN6Device4initEv+0x44>)
 8003148:	f000 fc31 	bl	80039ae <_ZN3etl6iqueueI5ErrorLj2EE4pushEOS1_>
	for(size_t i = 0; i < Device::log.max_size(); i++)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3301      	adds	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e7e6      	b.n	8003122 <_ZN6Device4initEv+0xa>
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	2000031c 	.word	0x2000031c

08003160 <_ZN6Device10raiseErrorE11DeviceError>:

void Device::raiseError(DeviceError error)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	Device::log.pop();
 8003168:	4809      	ldr	r0, [pc, #36]	; (8003190 <_ZN6Device10raiseErrorE11DeviceError+0x30>)
 800316a:	f000 fc41 	bl	80039f0 <_ZN3etl6iqueueI5ErrorLj2EE3popEv>
	Device::log.push({error, HAL_GetTick()});
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	f001 fd25 	bl	8004bc0 <HAL_GetTick>
 8003176:	4603      	mov	r3, r0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	f107 0308 	add.w	r3, r7, #8
 800317e:	4619      	mov	r1, r3
 8003180:	4803      	ldr	r0, [pc, #12]	; (8003190 <_ZN6Device10raiseErrorE11DeviceError+0x30>)
 8003182:	f000 fc14 	bl	80039ae <_ZN3etl6iqueueI5ErrorLj2EE4pushEOS1_>
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	2000031c 	.word	0x2000031c

08003194 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesE>:

void Device::changeState(PUTM_CAN::SF_states state)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
	if(int(Device::state) > int(state)) return;
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesE+0x34>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	79fa      	ldrb	r2, [r7, #7]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d307      	bcc.n	80031b8 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesE+0x24>
	if(Device::lock) return;
 80031a8:	4b08      	ldr	r3, [pc, #32]	; (80031cc <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesE+0x38>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesE+0x28>
	Device::state = state;
 80031b0:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesE+0x34>)
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	7013      	strb	r3, [r2, #0]
 80031b6:	e002      	b.n	80031be <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesE+0x2a>
	if(int(Device::state) > int(state)) return;
 80031b8:	bf00      	nop
 80031ba:	e000      	b.n	80031be <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesE+0x2a>
	if(Device::lock) return;
 80031bc:	bf00      	nop
}
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	20000319 	.word	0x20000319
 80031cc:	20000318 	.word	0x20000318

080031d0 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesEb>:

void Device::changeState(PUTM_CAN::SF_states state, bool lock)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	460a      	mov	r2, r1
 80031da:	71fb      	strb	r3, [r7, #7]
 80031dc:	4613      	mov	r3, r2
 80031de:	71bb      	strb	r3, [r7, #6]
	if(int(Device::state) > int(state)) return;
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesEb+0x40>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	79fa      	ldrb	r2, [r7, #7]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d30a      	bcc.n	8003200 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesEb+0x30>
	if(Device::lock) return;
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesEb+0x44>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesEb+0x34>
	Device::state = state;
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesEb+0x40>)
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	7013      	strb	r3, [r2, #0]
	Device::lock = lock;
 80031f8:	4a06      	ldr	r2, [pc, #24]	; (8003214 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesEb+0x44>)
 80031fa:	79bb      	ldrb	r3, [r7, #6]
 80031fc:	7013      	strb	r3, [r2, #0]
 80031fe:	e002      	b.n	8003206 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesEb+0x36>
	if(int(Device::state) > int(state)) return;
 8003200:	bf00      	nop
 8003202:	e000      	b.n	8003206 <_ZN6Device11changeStateEN8PUTM_CAN9SF_statesEb+0x36>
	if(Device::lock) return;
 8003204:	bf00      	nop
}
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	20000319 	.word	0x20000319
 8003214:	20000318 	.word	0x20000318

08003218 <_ZN6Device10resetStateEv>:


void Device::resetState()
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
	if(Device::lock) return;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <_ZN6Device10resetStateEv+0x20>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <_ZN6Device10resetStateEv+0x14>
	Device::state = PUTM_CAN::SF_states::Ok;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <_ZN6Device10resetStateEv+0x24>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e000      	b.n	800322e <_ZN6Device10resetStateEv+0x16>
	if(Device::lock) return;
 800322c:	bf00      	nop
}
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000318 	.word	0x20000318
 800323c:	20000319 	.word	0x20000319

08003240 <_ZN6Device11unlockStateEv>:
{
	Device::lock = true;
}

void Device::unlockState()
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
	Device::lock = false;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <_ZN6Device11unlockStateEv+0x14>)
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	20000318 	.word	0x20000318

08003258 <_ZN6Device12handleStatesEv>:

void Device::handleStates()
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
	led_ok.deactivate();
 800325c:	4816      	ldr	r0, [pc, #88]	; (80032b8 <_ZN6Device12handleStatesEv+0x60>)
 800325e:	f7ff f92e 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 8003262:	4816      	ldr	r0, [pc, #88]	; (80032bc <_ZN6Device12handleStatesEv+0x64>)
 8003264:	f7ff f92b 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8003268:	4815      	ldr	r0, [pc, #84]	; (80032c0 <_ZN6Device12handleStatesEv+0x68>)
 800326a:	f7ff f928 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 800326e:	4815      	ldr	r0, [pc, #84]	; (80032c4 <_ZN6Device12handleStatesEv+0x6c>)
 8003270:	f7ff f925 	bl	80024be <_ZN14GpioOutElement10deactivateEv>

	switch (Device::state)
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <_ZN6Device12handleStatesEv+0x70>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d81b      	bhi.n	80032b4 <_ZN6Device12handleStatesEv+0x5c>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <_ZN6Device12handleStatesEv+0x2c>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	08003295 	.word	0x08003295
 8003288:	0800329d 	.word	0x0800329d
 800328c:	080032a5 	.word	0x080032a5
 8003290:	080032ad 	.word	0x080032ad
	{
		case PUTM_CAN::SF_states::Ok:
			led_ok.activate(); break;
 8003294:	4808      	ldr	r0, [pc, #32]	; (80032b8 <_ZN6Device12handleStatesEv+0x60>)
 8003296:	f7ff f8fb 	bl	8002490 <_ZN14GpioOutElement8activateEv>
 800329a:	e00b      	b.n	80032b4 <_ZN6Device12handleStatesEv+0x5c>
		case PUTM_CAN::SF_states::Warning_1:
			led_warning_1.activate(); break;
 800329c:	4807      	ldr	r0, [pc, #28]	; (80032bc <_ZN6Device12handleStatesEv+0x64>)
 800329e:	f7ff f8f7 	bl	8002490 <_ZN14GpioOutElement8activateEv>
 80032a2:	e007      	b.n	80032b4 <_ZN6Device12handleStatesEv+0x5c>
		case PUTM_CAN::SF_states::Warning_2:
			led_warning_2.activate(); break;
 80032a4:	4806      	ldr	r0, [pc, #24]	; (80032c0 <_ZN6Device12handleStatesEv+0x68>)
 80032a6:	f7ff f8f3 	bl	8002490 <_ZN14GpioOutElement8activateEv>
 80032aa:	e003      	b.n	80032b4 <_ZN6Device12handleStatesEv+0x5c>
		case PUTM_CAN::SF_states::Error:
			led_error.activate();
 80032ac:	4805      	ldr	r0, [pc, #20]	; (80032c4 <_ZN6Device12handleStatesEv+0x6c>)
 80032ae:	f7ff f8ef 	bl	8002490 <_ZN14GpioOutElement8activateEv>
	}
}
 80032b2:	e7ff      	b.n	80032b4 <_ZN6Device12handleStatesEv+0x5c>
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000680 	.word	0x20000680
 80032bc:	20000670 	.word	0x20000670
 80032c0:	20000660 	.word	0x20000660
 80032c4:	20000650 	.word	0x20000650
 80032c8:	20000319 	.word	0x20000319

080032cc <_Z7initCANv>:

void initCAN()
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
	can_filtering_config.FilterBank = 0;
 80032d0:	4b24      	ldr	r3, [pc, #144]	; (8003364 <_Z7initCANv+0x98>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	615a      	str	r2, [r3, #20]
	can_filtering_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80032d6:	4b23      	ldr	r3, [pc, #140]	; (8003364 <_Z7initCANv+0x98>)
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]
	can_filtering_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <_Z7initCANv+0x98>)
 80032de:	2201      	movs	r2, #1
 80032e0:	61da      	str	r2, [r3, #28]
	can_filtering_config.FilterIdHigh = 0x0000;
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <_Z7initCANv+0x98>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
	can_filtering_config.FilterIdLow = 0x0000;
 80032e8:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <_Z7initCANv+0x98>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	605a      	str	r2, [r3, #4]
	can_filtering_config.FilterMaskIdHigh = 0x0000;
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <_Z7initCANv+0x98>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
	can_filtering_config.FilterMaskIdLow = 0x0000;
 80032f4:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <_Z7initCANv+0x98>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
	can_filtering_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <_Z7initCANv+0x98>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
	can_filtering_config.FilterActivation = ENABLE;
 8003300:	4b18      	ldr	r3, [pc, #96]	; (8003364 <_Z7initCANv+0x98>)
 8003302:	2201      	movs	r2, #1
 8003304:	621a      	str	r2, [r3, #32]
	can_filtering_config.SlaveStartFilterBank = 14;
 8003306:	4b17      	ldr	r3, [pc, #92]	; (8003364 <_Z7initCANv+0x98>)
 8003308:	220e      	movs	r2, #14
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

	if ( HAL_CAN_ConfigFilter(&hcan1, &can_filtering_config) != HAL_OK )
 800330c:	4915      	ldr	r1, [pc, #84]	; (8003364 <_Z7initCANv+0x98>)
 800330e:	4816      	ldr	r0, [pc, #88]	; (8003368 <_Z7initCANv+0x9c>)
 8003310:	f002 fd39 	bl	8005d86 <HAL_CAN_ConfigFilter>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <_Z7initCANv+0x5c>
		Error_Handler();
 8003324:	f000 fa6e 	bl	8003804 <Error_Handler>

	if ( HAL_CAN_Start(&hcan1) != HAL_OK )
 8003328:	480f      	ldr	r0, [pc, #60]	; (8003368 <_Z7initCANv+0x9c>)
 800332a:	f002 fdf6 	bl	8005f1a <HAL_CAN_Start>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <_Z7initCANv+0x76>
		Error_Handler();
 800333e:	f000 fa61 	bl	8003804 <Error_Handler>

	if ( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK )
 8003342:	2102      	movs	r1, #2
 8003344:	4808      	ldr	r0, [pc, #32]	; (8003368 <_Z7initCANv+0x9c>)
 8003346:	f003 f819 	bl	800637c <HAL_CAN_ActivateNotification>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <_Z7initCANv+0x92>
		Error_Handler();
 800335a:	f000 fa53 	bl	8003804 <Error_Handler>
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000760 	.word	0x20000760
 8003368:	200002f0 	.word	0x200002f0

0800336c <_ZN8PUTM_CAN14Can_tx_messageINS_18SF_PassiveElementsEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800336c:	b5b0      	push	{r4, r5, r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4614      	mov	r4, r2
 800337e:	461d      	mov	r5, r3
 8003380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003384:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003388:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3318      	adds	r3, #24
 8003390:	2208      	movs	r2, #8
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f005 fb3f 	bl	8008a18 <memcpy>
  }
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bdb0      	pop	{r4, r5, r7, pc}

080033a4 <_Z27sendCanFramePassiveElementsv>:

HAL_StatusTypeDef sendCanFramePassiveElements()
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	; 0x30
 80033a8:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 80033aa:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <_Z27sendCanFramePassiveElementsv+0x100>)
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	auto wat_pot_state = (water_pot_state.isActive() ? PUTM_CAN::ChannelState::Ok : PUTM_CAN::ChannelState::Error);
 80033ae:	483e      	ldr	r0, [pc, #248]	; (80034a8 <_Z27sendCanFramePassiveElementsv+0x104>)
 80033b0:	f7ff f8b4 	bl	800251c <_ZN13GpioInElement8isActiveEv>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <_Z27sendCanFramePassiveElementsv+0x1a>
 80033ba:	2300      	movs	r3, #0
 80033bc:	e000      	b.n	80033c0 <_Z27sendCanFramePassiveElementsv+0x1c>
 80033be:	2307      	movs	r3, #7
 80033c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		PUTM_CAN::SF_PassiveElements frame
		{
			.break_light = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_break_light)),
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe ff06 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2104      	movs	r1, #4
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe f9b3 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 80033d8:	4603      	mov	r3, r0
			.fan_r = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_fan_r)),
			.wheel_speed_1 = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_wheel_speed_1)), // idk which is left and which is right
			.wheel_speed_2 = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_wheel_speed_2)), // idk which is left and which is right or front or whatever
			.water_potentiometer = wat_pot_state, // they are together
			.tsal_assi = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_tsal_assi)) // supply for leds ex.
		};
 80033da:	f887 3020 	strb.w	r3, [r7, #32]
			.fan_mono = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_fan_mono)),
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fef9 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2105      	movs	r1, #5
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe f9a6 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 80033f2:	4603      	mov	r3, r0
		};
 80033f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			.fan_l = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_fan_l)),
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	2101      	movs	r1, #1
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe feec 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003402:	4603      	mov	r3, r0
 8003404:	2103      	movs	r1, #3
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe f999 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 800340c:	4603      	mov	r3, r0
		};
 800340e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			.fan_r = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_fan_r)),
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fedf 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 800341c:	4603      	mov	r3, r0
 800341e:	2104      	movs	r1, #4
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe f98c 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 8003426:	4603      	mov	r3, r0
		};
 8003428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			.wheel_speed_1 = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_wheel_speed_1)), // idk which is left and which is right
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	2101      	movs	r1, #1
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fed2 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003436:	4603      	mov	r3, r0
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe f97f 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 8003440:	4603      	mov	r3, r0
		};
 8003442:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.wheel_speed_2 = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_wheel_speed_2)), // idk which is left and which is right or front or whatever
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	2102      	movs	r1, #2
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fec5 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003450:	4603      	mov	r3, r0
 8003452:	2103      	movs	r1, #3
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe f972 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 800345a:	4603      	mov	r3, r0
		};
 800345c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003460:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003464:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.tsal_assi = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_tsal_assi)) // supply for leds ex.
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe feb4 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003472:	4603      	mov	r3, r0
 8003474:	2102      	movs	r1, #2
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe f961 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 800347c:	4603      	mov	r3, r0
		};
 800347e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		PUTM_CAN::Can_tx_message<PUTM_CAN::SF_PassiveElements> sender(frame, PUTM_CAN::can_tx_header_SF_PASSIVEELEMENTS);
 8003482:	f107 0120 	add.w	r1, r7, #32
 8003486:	463b      	mov	r3, r7
 8003488:	4a08      	ldr	r2, [pc, #32]	; (80034ac <_Z27sendCanFramePassiveElementsv+0x108>)
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff ff6e 	bl	800336c <_ZN8PUTM_CAN14Can_tx_messageINS_18SF_PassiveElementsEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		return sender.send(hcan1);
 8003490:	463b      	mov	r3, r7
 8003492:	4907      	ldr	r1, [pc, #28]	; (80034b0 <_Z27sendCanFramePassiveElementsv+0x10c>)
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fab7 	bl	8003a08 <_ZN8PUTM_CAN14Can_tx_messageINS_18SF_PassiveElementsEE4sendER19__CAN_HandleTypeDef>
 800349a:	4603      	mov	r3, r0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3730      	adds	r7, #48	; 0x30
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200007e4 	.word	0x200007e4
 80034a8:	200006d0 	.word	0x200006d0
 80034ac:	08009aec 	.word	0x08009aec
 80034b0:	200002f0 	.word	0x200002f0

080034b4 <_ZN8PUTM_CAN14Can_tx_messageINS_23SF_LegendaryDVAndSupplyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80034b4:	b5b0      	push	{r4, r5, r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4614      	mov	r4, r2
 80034c6:	461d      	mov	r5, r3
 80034c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034d0:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3318      	adds	r3, #24
 80034d8:	2208      	movs	r2, #8
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f005 fa9b 	bl	8008a18 <memcpy>
  }
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bdb0      	pop	{r4, r5, r7, pc}

080034ec <_Z32sendCanFrameLegendaryDVAndSupplyv>:

HAL_StatusTypeDef sendCanFrameLegendaryDVAndSupply()
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08c      	sub	sp, #48	; 0x30
 80034f0:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 80034f2:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <_Z32sendCanFrameLegendaryDVAndSupplyv+0xd4>)
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		PUTM_CAN::SF_LegendaryDVAndSupply frame
 80034f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
		{
			.lidar = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_lidar)),
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	2102      	movs	r1, #2
 8003504:	4618      	mov	r0, r3
 8003506:	f7fe fe68 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 800350a:	4603      	mov	r3, r0
 800350c:	2102      	movs	r1, #2
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe f915 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 8003514:	4603      	mov	r3, r0
			.odrive = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_odrive)),
			.tsal = static_cast<PUTM_CAN::ChannelState>(ChannelState::Ok),
			.bspd_esb = static_cast<PUTM_CAN::ChannelState>(ChannelState::Ok),
			.spare_1 = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_spare_1)),
			.spare_2 = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_spare_2))
		};
 8003516:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.box_dv = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_box_dv)),
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	2102      	movs	r1, #2
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fe5b 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003524:	4603      	mov	r3, r0
 8003526:	2104      	movs	r1, #4
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe f908 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 800352e:	4603      	mov	r3, r0
		};
 8003530:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			.jetson = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_jetson)),
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	2102      	movs	r1, #2
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe fe4e 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 800353e:	4603      	mov	r3, r0
 8003540:	2105      	movs	r1, #5
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe f8fb 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 8003548:	4603      	mov	r3, r0
		};
 800354a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.odrive = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_odrive)),
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	2101      	movs	r1, #1
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe fe41 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003558:	4603      	mov	r3, r0
 800355a:	2105      	movs	r1, #5
 800355c:	4618      	mov	r0, r3
 800355e:	f7fe f8ee 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 8003562:	4603      	mov	r3, r0
		};
 8003564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			.spare_1 = static_cast<PUTM_CAN::ChannelState>(sf_buff[2].getChannelState(fuse_2_spare_1)),
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	2102      	movs	r1, #2
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe fe34 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003572:	4603      	mov	r3, r0
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe f8e1 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 800357c:	4603      	mov	r3, r0
		};
 800357e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.spare_2 = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_spare_2))
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2103      	movs	r1, #3
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fe27 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 800358c:	4603      	mov	r3, r0
 800358e:	2103      	movs	r1, #3
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe f8d4 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 8003596:	4603      	mov	r3, r0
		};
 8003598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		PUTM_CAN::Can_tx_message<PUTM_CAN::SF_LegendaryDVAndSupply> sender(frame, PUTM_CAN::can_tx_header_SF_LEGENDARYDVANDSUPPLY);
 800359c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <_Z32sendCanFrameLegendaryDVAndSupplyv+0xd8>)
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff85 	bl	80034b4 <_ZN8PUTM_CAN14Can_tx_messageINS_23SF_LegendaryDVAndSupplyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		return sender.send(hcan1);
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	4906      	ldr	r1, [pc, #24]	; (80035c8 <_Z32sendCanFrameLegendaryDVAndSupplyv+0xdc>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fa3e 	bl	8003a30 <_ZN8PUTM_CAN14Can_tx_messageINS_23SF_LegendaryDVAndSupplyEE4sendER19__CAN_HandleTypeDef>
 80035b4:	4603      	mov	r3, r0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3730      	adds	r7, #48	; 0x30
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200007e4 	.word	0x200007e4
 80035c4:	08009b04 	.word	0x08009b04
 80035c8:	200002f0 	.word	0x200002f0

080035cc <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_SupplyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80035cc:	b5b0      	push	{r4, r5, r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4614      	mov	r4, r2
 80035de:	461d      	mov	r5, r3
 80035e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80035e8:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3318      	adds	r3, #24
 80035f0:	2208      	movs	r2, #8
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f005 fa0f 	bl	8008a18 <memcpy>
  }
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bdb0      	pop	{r4, r5, r7, pc}

08003604 <_Z18sendCanFrameSupplyv>:

HAL_StatusTypeDef sendCanFrameSupply()
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08c      	sub	sp, #48	; 0x30
 8003608:	af00      	add	r7, sp, #0
	auto& sf_buff = sf_handler.smart_fuses;
 800360a:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <_Z18sendCanFrameSupplyv+0xfc>)
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c

		PUTM_CAN::SF_Supply frame
		{
			.inverter = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_inverter)),
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fde1 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003618:	4603      	mov	r3, r0
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe f88e 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 8003622:	4603      	mov	r3, r0
			.laptimer = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_lapimer)),
			.bat_hv = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_bat_hv)),
			.diagport = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_diagport)),
			.pomp = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_pump)),
			.motec = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_motec))
		};
 8003624:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.front_box = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_front_box)),
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fdd4 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003632:	4603      	mov	r3, r0
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe f881 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 800363c:	4603      	mov	r3, r0
		};
 800363e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			.dash = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_dash)),
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fdc7 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 800364c:	4603      	mov	r3, r0
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe f874 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 8003656:	4603      	mov	r3, r0
		};
 8003658:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.laptimer = static_cast<PUTM_CAN::ChannelState>(sf_buff[1].getChannelState(fuse_1_lapimer)),
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe fdba 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003666:	4603      	mov	r3, r0
 8003668:	2102      	movs	r1, #2
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe f867 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 8003670:	4603      	mov	r3, r0
		};
 8003672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			.bat_hv = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_bat_hv)),
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	2103      	movs	r1, #3
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fdad 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 8003680:	4603      	mov	r3, r0
 8003682:	2102      	movs	r1, #2
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe f85a 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 800368a:	4603      	mov	r3, r0
		};
 800368c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			.diagport = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_diagport)),
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	2103      	movs	r1, #3
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe fda0 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 800369a:	4603      	mov	r3, r0
 800369c:	2104      	movs	r1, #4
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe f84d 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 80036a4:	4603      	mov	r3, r0
		};
 80036a6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			.pomp = static_cast<PUTM_CAN::ChannelState>(sf_buff[3].getChannelState(fuse_3_pump)),
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	2103      	movs	r1, #3
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fd93 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2105      	movs	r1, #5
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe f840 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 80036be:	4603      	mov	r3, r0
		};
 80036c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			.motec = static_cast<PUTM_CAN::ChannelState>(sf_buff[0].getChannelState(fuse_0_motec))
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fd86 	bl	80021da <_ZN3etl7ivectorI9SmartFuseEixEj>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2103      	movs	r1, #3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe f833 	bl	800173e <_ZN9SmartFuse15getChannelStateE7Channel>
 80036d8:	4603      	mov	r3, r0
		};
 80036da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		PUTM_CAN::Can_tx_message<PUTM_CAN::SF_Supply> sender(frame, PUTM_CAN::can_tx_header_SF_SUPPLY);
 80036de:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	4a07      	ldr	r2, [pc, #28]	; (8003704 <_Z18sendCanFrameSupplyv+0x100>)
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff70 	bl	80035cc <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_SupplyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		return sender.send(hcan1);
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	4906      	ldr	r1, [pc, #24]	; (8003708 <_Z18sendCanFrameSupplyv+0x104>)
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f9b1 	bl	8003a58 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_SupplyEE4sendER19__CAN_HandleTypeDef>
 80036f6:	4603      	mov	r3, r0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3730      	adds	r7, #48	; 0x30
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	200007e4 	.word	0x200007e4
 8003704:	08009b1c 	.word	0x08009b1c
 8003708:	200002f0 	.word	0x200002f0

0800370c <_ZNSt5arrayIbLj8EEixEj>:
      operator[](size_type __n) noexcept
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f805 	bl	800372a <_ZNSt14__array_traitsIbLj8EE6_S_refERA8_Kbj>
 8003720:	4603      	mov	r3, r0
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_ZNSt14__array_traitsIbLj8EE6_S_refERA8_Kbj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	4413      	add	r3, r2
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8003746:	b5b0      	push	{r4, r5, r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4614      	mov	r4, r2
 8003758:	461d      	mov	r5, r3
 800375a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800375c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800375e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003762:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3318      	adds	r3, #24
 800376a:	2205      	movs	r2, #5
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f005 f952 	bl	8008a18 <memcpy>
  }
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003780 <_Z18sendCanFrameSafetyv>:

HAL_StatusTypeDef sendCanFrameSafety()
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
		PUTM_CAN::SF_safety frame
		{
			.firewall = safeties[safety_firewall],
 8003786:	2105      	movs	r1, #5
 8003788:	481b      	ldr	r0, [pc, #108]	; (80037f8 <_Z18sendCanFrameSafetyv+0x78>)
 800378a:	f7ff ffbf 	bl	800370c <_ZNSt5arrayIbLj8EEixEj>
 800378e:	4603      	mov	r3, r0
			.dv = safeties[safety_dv],
			/*
			 * TODO: tsms not present should be hv_sense i guess
			 */
			.tsms = safeties[safety_inverter]
		};
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	f887 3020 	strb.w	r3, [r7, #32]
			.hvd = safeties[safety_hvd],
 8003796:	2103      	movs	r1, #3
 8003798:	4817      	ldr	r0, [pc, #92]	; (80037f8 <_Z18sendCanFrameSafetyv+0x78>)
 800379a:	f7ff ffb7 	bl	800370c <_ZNSt5arrayIbLj8EEixEj>
 800379e:	4603      	mov	r3, r0
		};
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			.inverter = safeties[safety_inverter],
 80037a6:	2104      	movs	r1, #4
 80037a8:	4813      	ldr	r0, [pc, #76]	; (80037f8 <_Z18sendCanFrameSafetyv+0x78>)
 80037aa:	f7ff ffaf 	bl	800370c <_ZNSt5arrayIbLj8EEixEj>
 80037ae:	4603      	mov	r3, r0
		};
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			.dv = safeties[safety_dv],
 80037b6:	2106      	movs	r1, #6
 80037b8:	480f      	ldr	r0, [pc, #60]	; (80037f8 <_Z18sendCanFrameSafetyv+0x78>)
 80037ba:	f7ff ffa7 	bl	800370c <_ZNSt5arrayIbLj8EEixEj>
 80037be:	4603      	mov	r3, r0
		};
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			.tsms = safeties[safety_inverter]
 80037c6:	2104      	movs	r1, #4
 80037c8:	480b      	ldr	r0, [pc, #44]	; (80037f8 <_Z18sendCanFrameSafetyv+0x78>)
 80037ca:	f7ff ff9f 	bl	800370c <_ZNSt5arrayIbLj8EEixEj>
 80037ce:	4603      	mov	r3, r0
		};
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PUTM_CAN::Can_tx_message<PUTM_CAN::SF_safety> sender(frame, PUTM_CAN::can_tx_header_SF_SAFETY);
 80037d6:	f107 0120 	add.w	r1, r7, #32
 80037da:	463b      	mov	r3, r7
 80037dc:	4a07      	ldr	r2, [pc, #28]	; (80037fc <_Z18sendCanFrameSafetyv+0x7c>)
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff ffb1 	bl	8003746 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		return sender.send(hcan1);
 80037e4:	463b      	mov	r3, r7
 80037e6:	4906      	ldr	r1, [pc, #24]	; (8003800 <_Z18sendCanFrameSafetyv+0x80>)
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f949 	bl	8003a80 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>
 80037ee:	4603      	mov	r3, r0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3728      	adds	r7, #40	; 0x28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200007d4 	.word	0x200007d4
 80037fc:	08009b34 	.word	0x08009b34
 8003800:	200002f0 	.word	0x200002f0

08003804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	led_ok.deactivate();
 8003808:	4807      	ldr	r0, [pc, #28]	; (8003828 <Error_Handler+0x24>)
 800380a:	f7fe fe58 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_1.deactivate();
 800380e:	4807      	ldr	r0, [pc, #28]	; (800382c <Error_Handler+0x28>)
 8003810:	f7fe fe55 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8003814:	4806      	ldr	r0, [pc, #24]	; (8003830 <Error_Handler+0x2c>)
 8003816:	f7fe fe52 	bl	80024be <_ZN14GpioOutElement10deactivateEv>
	led_error.activate();
 800381a:	4806      	ldr	r0, [pc, #24]	; (8003834 <Error_Handler+0x30>)
 800381c:	f7fe fe38 	bl	8002490 <_ZN14GpioOutElement8activateEv>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003820:	b672      	cpsid	i
}
 8003822:	bf00      	nop

	__disable_irq();
	while (1) {}
 8003824:	e7fe      	b.n	8003824 <Error_Handler+0x20>
 8003826:	bf00      	nop
 8003828:	20000680 	.word	0x20000680
 800382c:	20000670 	.word	0x20000670
 8003830:	20000660 	.word	0x20000660
 8003834:	20000650 	.word	0x20000650

08003838 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE5beginEv>:
      begin() noexcept
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f931 	bl	8003aa8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE4dataEv>
 8003846:	4603      	mov	r3, r0
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE3endEv>:
      end() noexcept
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f925 	bl	8003aa8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE4dataEv>
 800385e:	4603      	mov	r3, r0
 8003860:	3380      	adds	r3, #128	; 0x80
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <_ZN3etl5queueI5ErrorLj100ELj2EEC1Ev>:
    static ETL_CONSTANT size_type MAX_SIZE = size_type(SIZE);

    //*************************************************************************
    /// Default constructor.
    //*************************************************************************
    queue()
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
      : base_t(reinterpret_cast<T*>(&buffer[0]), SIZE)
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3314      	adds	r3, #20
 8003878:	2264      	movs	r2, #100	; 0x64
 800387a:	4619      	mov	r1, r3
 800387c:	f000 f921 	bl	8003ac2 <_ZN3etl6iqueueI5ErrorLj2EEC1EPS1_m>
    {
    }
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_ZN3etl7ivectorI9SmartFuseED1Ev>:
  class ivector : public etl::vector_base
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe ffb6 	bl	8002806 <_ZN3etl11vector_baseD1Ev>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZN3etl6vectorI9SmartFuseLj4EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	330c      	adds	r3, #12
 80038b2:	2204      	movs	r2, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	f000 f924 	bl	8003b02 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>
    {
      this->initialise();
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f936 	bl	8003b2e <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f93d 	bl	8003b56 <_ZN3etl7ivectorI9SmartFuseE5clearEv>
    }
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff ffd3 	bl	800388a <_ZN3etl7ivectorI9SmartFuseED1Ev>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_>:
    ETL_CONSTEXPR14 delegate(const TLambda& instance)
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
    {
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fade 	bl	8001ebe <_ZN3etl8delegateIFvP9SmartFuseEE18invocation_elementC1Ev>
      assign((void*)(&instance), lambda_stub<TLambda>);
 8003902:	4a05      	ldr	r2, [pc, #20]	; (8003918 <_ZN3etl8delegateIFvP9SmartFuseEEC1IZ4mainEUlS2_E_vEERKT_+0x28>)
 8003904:	6839      	ldr	r1, [r7, #0]
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f930 	bl	8003b6c <_ZN3etl8delegateIFvP9SmartFuseEE6assignEPvPFvS5_S2_E>
    }
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	08003b91 	.word	0x08003b91

0800391c <_ZNKSt5arrayI13GpioInElementLj8EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	2308      	movs	r3, #8
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <_ZNSt5arrayI13GpioInElementLj8EEixEj>:
      operator[](size_type __n) noexcept
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f93a 	bl	8003bba <_ZNSt14__array_traitsI13GpioInElementLj8EE6_S_refERA8_KS0_j>
 8003946:	4603      	mov	r3, r0
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f103 0218 	add.w	r2, r3, #24
 8003962:	4b04      	ldr	r3, [pc, #16]	; (8003974 <_ZN8PUTM_CAN14Can_tx_messageINS_7SF_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003964:	6838      	ldr	r0, [r7, #0]
 8003966:	f002 fb1c 	bl	8005fa2 <HAL_CAN_AddTxMessage>
 800396a:	4603      	mov	r3, r0
  }
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200009c8 	.word	0x200009c8

08003978 <_ZNSt5arrayI17HAL_StatusTypeDefLj6EEixEj>:
      operator[](size_type __n) noexcept
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6839      	ldr	r1, [r7, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f926 	bl	8003bd8 <_ZNSt14__array_traitsI17HAL_StatusTypeDefLj6EE6_S_refERA6_KS0_j>
 800398c:	4603      	mov	r3, r0
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <_ZNK3etl10queue_baseILj2EE8max_sizeEv>:
    size_type max_size() const
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
      return CAPACITY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
    }
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <_ZN3etl6iqueueI5ErrorLj2EE4pushEOS1_>:
    void push(rvalue_reference value)
 80039ae:	b590      	push	{r4, r7, lr}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
      ::new (&p_buffer[in]) T(etl::move(value));
 80039b8:	6838      	ldr	r0, [r7, #0]
 80039ba:	f000 f91b 	bl	8003bf4 <_ZN3etl4moveIR5ErrorEEONS_16remove_referenceIT_E4typeEOS4_>
 80039be:	4604      	mov	r4, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	2008      	movs	r0, #8
 80039d0:	f7fc fe08 	bl	80005e4 <_ZnwjPv>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4622      	mov	r2, r4
 80039d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039dc:	e883 0003 	stmia.w	r3, {r0, r1}
      add_in();
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f911 	bl	8003c0a <_ZN3etl10queue_baseILj2EE6add_inEv>
    }
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd90      	pop	{r4, r7, pc}

080039f0 <_ZN3etl6iqueueI5ErrorLj2EE3popEv>:
    void pop()
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
      del_out();
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f927 	bl	8003c4e <_ZN3etl10queue_baseILj2EE7del_outEv>
    }
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZN8PUTM_CAN14Can_tx_messageINS_18SF_PassiveElementsEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f103 0218 	add.w	r2, r3, #24
 8003a1a:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <_ZN8PUTM_CAN14Can_tx_messageINS_18SF_PassiveElementsEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003a1c:	6838      	ldr	r0, [r7, #0]
 8003a1e:	f002 fac0 	bl	8005fa2 <HAL_CAN_AddTxMessage>
 8003a22:	4603      	mov	r3, r0
  }
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	200009cc 	.word	0x200009cc

08003a30 <_ZN8PUTM_CAN14Can_tx_messageINS_23SF_LegendaryDVAndSupplyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f103 0218 	add.w	r2, r3, #24
 8003a42:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <_ZN8PUTM_CAN14Can_tx_messageINS_23SF_LegendaryDVAndSupplyEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003a44:	6838      	ldr	r0, [r7, #0]
 8003a46:	f002 faac 	bl	8005fa2 <HAL_CAN_AddTxMessage>
 8003a4a:	4603      	mov	r3, r0
  }
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	200009d0 	.word	0x200009d0

08003a58 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_SupplyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f103 0218 	add.w	r2, r3, #24
 8003a6a:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_SupplyEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003a6c:	6838      	ldr	r0, [r7, #0]
 8003a6e:	f002 fa98 	bl	8005fa2 <HAL_CAN_AddTxMessage>
 8003a72:	4603      	mov	r3, r0
  }
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200009d4 	.word	0x200009d4

08003a80 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f103 0218 	add.w	r2, r3, #24
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <_ZN8PUTM_CAN14Can_tx_messageINS_9SF_safetyEE4sendER19__CAN_HandleTypeDef+0x24>)
 8003a94:	6838      	ldr	r0, [r7, #0]
 8003a96:	f002 fa84 	bl	8005fa2 <HAL_CAN_AddTxMessage>
 8003a9a:	4603      	mov	r3, r0
  }
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	200009d8 	.word	0x200009d8

08003aa8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj32EE4dataEv>:
      data() noexcept
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 f8ed 	bl	8003c92 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj32EE6_S_ptrERA32_KS2_>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <_ZN3etl6iqueueI5ErrorLj2EEC1EPS1_m>:
    iqueue(T* p_buffer_, size_type max_size_)
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
        p_buffer(p_buffer_)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f8e8 	bl	8003ca8 <_ZN3etl10queue_baseILj2EEC1Em>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	611a      	str	r2, [r3, #16]
    }
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <_ZN3etl6iqueueI5ErrorLj2EED1Ev>:
    ~iqueue()
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
    }
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f8f0 	bl	8003cd8 <_ZN3etl10queue_baseILj2EED1Ev>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <_ZN3etl7ivectorI9SmartFuseEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fe68 	bl	80027e8 <_ZN3etl11vector_baseC1Ej>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	609a      	str	r2, [r3, #8]
    }
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>:
    void initialise()
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f000 f8d4 	bl	8003cee <_ZN3etl7destroyIP9SmartFuseEEvT_S3_>
      p_end = p_buffer;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
    }
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <_ZN3etl7ivectorI9SmartFuseE5clearEv>:
    void clear()
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
      initialise();
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ffe5 	bl	8003b2e <_ZN3etl7ivectorI9SmartFuseE10initialiseEv>
    }
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_ZN3etl8delegateIFvP9SmartFuseEE6assignEPvPFvS5_S2_E>:
    }

    //*************************************************************************
    /// Assign from an object and stub.
    //*************************************************************************
    ETL_CONSTEXPR14 void assign(void* object, stub_type stub)
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
    {
      invocation.object = object;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	601a      	str	r2, [r3, #0]
      invocation.stub   = stub;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	605a      	str	r2, [r3, #4]
    }
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_ZN3etl8delegateIFvP9SmartFuseEE11lambda_stubIZ4mainEUlS2_E_EEvPvS2_>:

    //*************************************************************************
    /// Stub call for a lambda or functor function.
    //*************************************************************************
    template <typename TLambda>
    static ETL_CONSTEXPR14 TReturn lambda_stub(void* object, TParams... arg)
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
    {
      TLambda* p = static_cast<TLambda*>(object);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	60fb      	str	r3, [r7, #12]
      return (p->operator())(etl::forward<TParams>(arg)...);
 8003b9e:	463b      	mov	r3, r7
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fb96 	bl	80022d2 <_ZN3etl7forwardIP9SmartFuseEEOT_RNS_16remove_referenceIS3_E4typeE>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4619      	mov	r1, r3
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7fe fee5 	bl	800297c <_ZZ4mainENKUlP9SmartFuseE_clES0_>
 8003bb2:	bf00      	nop
    }
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <_ZNSt14__array_traitsI13GpioInElementLj8EE6_S_refERA8_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4413      	add	r3, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <_ZNSt14__array_traitsI17HAL_StatusTypeDefLj6EE6_S_refERA6_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <_ZN3etl4moveIR5ErrorEEONS_16remove_referenceIT_E4typeEOS4_>:
  constexpr typename etl::remove_reference<T>::type&& move(T&& t) ETL_NOEXCEPT
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
 8003bfc:	687b      	ldr	r3, [r7, #4]
  }
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <_ZN3etl10queue_baseILj2EE6add_inEv>:
    void add_in()
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
      if (++in == CAPACITY)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <_ZN3etl10queue_baseILj2EE6add_inEv+0x2e>
        in = 0;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
      ++current_size;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	609a      	str	r2, [r3, #8]
    }
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <_ZN3etl10queue_baseILj2EE7del_outEv>:
    void del_out()
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
      if (++out == CAPACITY)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	605a      	str	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <_ZN3etl10queue_baseILj2EE7del_outEv+0x2e>
        out = 0;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
      --current_size;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	1e5a      	subs	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]
    }
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj32EE6_S_ptrERA32_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <_ZN3etl10queue_baseILj2EEC1Em>:
    queue_base(size_type max_size_)
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
        CAPACITY(max_size_)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	60da      	str	r2, [r3, #12]
    }
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <_ZN3etl10queue_baseILj2EED1Ev>:
    ~queue_base()
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
    }
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <_ZN3etl7destroyIP9SmartFuseEEvT_S3_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8003cf8:	6839      	ldr	r1, [r7, #0]
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f804 	bl	8003d08 <_ZSt7destroyIP9SmartFuseEvT_S2_>
  }
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_ZSt7destroyIP9SmartFuseEvT_S2_>:
    }

#if __cplusplus >= 201703L
  template <typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 8003d12:	6839      	ldr	r1, [r7, #0]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f804 	bl	8003d22 <_ZSt8_DestroyIP9SmartFuseEvT_S2_>
    }
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_ZSt8_DestroyIP9SmartFuseEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8003d2c:	f7fe fd54 	bl	80027d8 <_ZSt21is_constant_evaluatedv>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <_ZSt8_DestroyIP9SmartFuseEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f808 	bl	8003d4e <_ZNSt12_Destroy_auxILb0EE9__destroyIP9SmartFuseEEvT_S4_>
 8003d3e:	e003      	b.n	8003d48 <_ZSt8_DestroyIP9SmartFuseEvT_S2_+0x26>
	__destroy(__first, __last);
 8003d40:	6839      	ldr	r1, [r7, #0]
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f81b 	bl	8003d7e <_ZNSt12_Destroy_auxILb1EE9__destroyIP9SmartFuseEEvT_S4_>
    }
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <_ZNSt12_Destroy_auxILb0EE9__destroyIP9SmartFuseEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d00a      	beq.n	8003d76 <_ZNSt12_Destroy_auxILb0EE9__destroyIP9SmartFuseEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f817 	bl	8003d94 <_ZSt11__addressofI9SmartFuseEPT_RS1_>
 8003d66:	4603      	mov	r3, r0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f81e 	bl	8003daa <_ZSt8_DestroyI9SmartFuseEvPT_>
	  for (; __first != __last; ++__first)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3374      	adds	r3, #116	; 0x74
 8003d72:	607b      	str	r3, [r7, #4]
 8003d74:	e7f0      	b.n	8003d58 <_ZNSt12_Destroy_auxILb0EE9__destroyIP9SmartFuseEEvT_S4_+0xa>
	}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <_ZNSt12_Destroy_auxILb1EE9__destroyIP9SmartFuseEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	6039      	str	r1, [r7, #0]
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <_ZSt11__addressofI9SmartFuseEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <_ZSt8_DestroyI9SmartFuseEvPT_>:
    _Destroy(_Tp* __pointer)
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f804 	bl	8003dc0 <_ZSt10destroy_atI9SmartFuseEvPT_>
    }
 8003db8:	bf00      	nop
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_ZSt10destroy_atI9SmartFuseEvPT_>:
    destroy_at(_Tp* __location)
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
    }
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <_ZN16SmartFuseHandlerILm4EED1Ev>:
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fd74 	bl	80038cc <_ZN3etl6vectorI9SmartFuseLj4EED1Ev>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <_Z41__static_initialization_and_destruction_0ii>:

  /* USER CODE END Error_Handler_Debug */
}
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	f040 8087 	bne.w	8003f10 <_Z41__static_initialization_and_destruction_0ii+0x120>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	f040 8081 	bne.w	8003f10 <_Z41__static_initialization_and_destruction_0ii+0x120>
		inline static etl::queue<Error, 100> log;
 8003e0e:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3301      	adds	r3, #1
 8003e14:	4a68      	ldr	r2, [pc, #416]	; (8003fb8 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b67      	ldr	r3, [pc, #412]	; (8003fb8 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8003e2a:	4864      	ldr	r0, [pc, #400]	; (8003fbc <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8003e2c:	f7ff fd1d 	bl	800386a <_ZN3etl5queueI5ErrorLj100ELj2EEC1Ev>
GpioOutElement led_error(GPIOC, GPIO_PIN_0, true);
 8003e30:	2301      	movs	r3, #1
 8003e32:	2201      	movs	r2, #1
 8003e34:	4962      	ldr	r1, [pc, #392]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003e36:	4863      	ldr	r0, [pc, #396]	; (8003fc4 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8003e38:	f7fe fb12 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_1, true);
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	2202      	movs	r2, #2
 8003e40:	495f      	ldr	r1, [pc, #380]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003e42:	4861      	ldr	r0, [pc, #388]	; (8003fc8 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8003e44:	f7fe fb0c 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_2, true);
 8003e48:	2301      	movs	r3, #1
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	495c      	ldr	r1, [pc, #368]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003e4e:	485f      	ldr	r0, [pc, #380]	; (8003fcc <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8003e50:	f7fe fb06 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_ok(GPIOC, GPIO_PIN_3, true);
 8003e54:	2301      	movs	r3, #1
 8003e56:	2208      	movs	r2, #8
 8003e58:	4959      	ldr	r1, [pc, #356]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003e5a:	485d      	ldr	r0, [pc, #372]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8003e5c:	f7fe fb00 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 8003e60:	2300      	movs	r3, #0
 8003e62:	2220      	movs	r2, #32
 8003e64:	495b      	ldr	r1, [pc, #364]	; (8003fd4 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003e66:	485c      	ldr	r0, [pc, #368]	; (8003fd8 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8003e68:	f7fe fafa 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2280      	movs	r2, #128	; 0x80
 8003e70:	4958      	ldr	r1, [pc, #352]	; (8003fd4 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003e72:	485a      	ldr	r0, [pc, #360]	; (8003fdc <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8003e74:	f7fe faf4 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e7e:	4955      	ldr	r1, [pc, #340]	; (8003fd4 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003e80:	4857      	ldr	r0, [pc, #348]	; (8003fe0 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003e82:	f7fe faed 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioOutElement water_pot_enable(GPIOB, GPIO_PIN_2, true);
 8003e86:	2301      	movs	r3, #1
 8003e88:	2204      	movs	r2, #4
 8003e8a:	4952      	ldr	r1, [pc, #328]	; (8003fd4 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003e8c:	4855      	ldr	r0, [pc, #340]	; (8003fe4 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003e8e:	f7fe fae7 	bl	8002460 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
GpioInElement water_pot_state(GPIOB, GPIO_PIN_4, false);
 8003e92:	2300      	movs	r3, #0
 8003e94:	2210      	movs	r2, #16
 8003e96:	494f      	ldr	r1, [pc, #316]	; (8003fd4 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003e98:	4853      	ldr	r0, [pc, #332]	; (8003fe8 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8003e9a:	f7fe fb27 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement spare_2_sense_sig(GPIOC, GPIO_PIN_6, false);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2240      	movs	r2, #64	; 0x40
 8003ea2:	4947      	ldr	r1, [pc, #284]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003ea4:	4851      	ldr	r0, [pc, #324]	; (8003fec <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8003ea6:	f7fe fb21 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement spare_3_sense_sig(GPIOC, GPIO_PIN_7, false);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	4944      	ldr	r1, [pc, #272]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003eb0:	484f      	ldr	r0, [pc, #316]	; (8003ff0 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8003eb2:	f7fe fb1b 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement hv_sense_sig(GPIOC, GPIO_PIN_8, false);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ebc:	4940      	ldr	r1, [pc, #256]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003ebe:	484d      	ldr	r0, [pc, #308]	; (8003ff4 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8003ec0:	f7fe fb14 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement hvd_sense_sig(GPIOC, GPIO_PIN_9, false);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eca:	493d      	ldr	r1, [pc, #244]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003ecc:	484a      	ldr	r0, [pc, #296]	; (8003ff8 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8003ece:	f7fe fb0d 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement inverter_sense_sig(GPIOC, GPIO_PIN_10, false);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ed8:	4939      	ldr	r1, [pc, #228]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003eda:	4848      	ldr	r0, [pc, #288]	; (8003ffc <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8003edc:	f7fe fb06 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement firewall_sense_sig(GPIOC, GPIO_PIN_11, false);
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ee6:	4936      	ldr	r1, [pc, #216]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003ee8:	4845      	ldr	r0, [pc, #276]	; (8004000 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003eea:	f7fe faff 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement dv_sense_sig(GPIOC, GPIO_PIN_12, false);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ef4:	4932      	ldr	r1, [pc, #200]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003ef6:	4843      	ldr	r0, [pc, #268]	; (8004004 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003ef8:	f7fe faf8 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
GpioInElement spare_1_sense_sig(GPIOC, GPIO_PIN_13, false);
 8003efc:	2300      	movs	r3, #0
 8003efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f02:	492f      	ldr	r1, [pc, #188]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003f04:	4840      	ldr	r0, [pc, #256]	; (8004008 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003f06:	f7fe faf1 	bl	80024ec <_ZN13GpioInElementC1EPK12GPIO_TypeDefmb>
SmartFuseHandler < number_of_fuses > sf_handler;
 8003f0a:	4840      	ldr	r0, [pc, #256]	; (800400c <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003f0c:	f7fe fd28 	bl	8002960 <_ZN16SmartFuseHandlerILm4EEC1Ev>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d14b      	bne.n	8003fae <_Z41__static_initialization_and_destruction_0ii+0x1be>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d146      	bne.n	8003fae <_Z41__static_initialization_and_destruction_0ii+0x1be>
 8003f20:	483a      	ldr	r0, [pc, #232]	; (800400c <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003f22:	f7ff ff57 	bl	8003dd4 <_ZN16SmartFuseHandlerILm4EED1Ev>
GpioInElement spare_1_sense_sig(GPIOC, GPIO_PIN_13, false);
 8003f26:	4838      	ldr	r0, [pc, #224]	; (8004008 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003f28:	f7fe fb18 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement dv_sense_sig(GPIOC, GPIO_PIN_12, false);
 8003f2c:	4835      	ldr	r0, [pc, #212]	; (8004004 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003f2e:	f7fe fb15 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement firewall_sense_sig(GPIOC, GPIO_PIN_11, false);
 8003f32:	4833      	ldr	r0, [pc, #204]	; (8004000 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003f34:	f7fe fb12 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement inverter_sense_sig(GPIOC, GPIO_PIN_10, false);
 8003f38:	4830      	ldr	r0, [pc, #192]	; (8003ffc <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8003f3a:	f7fe fb0f 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement hvd_sense_sig(GPIOC, GPIO_PIN_9, false);
 8003f3e:	482e      	ldr	r0, [pc, #184]	; (8003ff8 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8003f40:	f7fe fb0c 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement hv_sense_sig(GPIOC, GPIO_PIN_8, false);
 8003f44:	482b      	ldr	r0, [pc, #172]	; (8003ff4 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8003f46:	f7fe fb09 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement spare_3_sense_sig(GPIOC, GPIO_PIN_7, false);
 8003f4a:	4829      	ldr	r0, [pc, #164]	; (8003ff0 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8003f4c:	f7fe fb06 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement spare_2_sense_sig(GPIOC, GPIO_PIN_6, false);
 8003f50:	4826      	ldr	r0, [pc, #152]	; (8003fec <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8003f52:	f7fe fb03 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioInElement water_pot_state(GPIOB, GPIO_PIN_4, false);
 8003f56:	4824      	ldr	r0, [pc, #144]	; (8003fe8 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8003f58:	f7fe fb00 	bl	800255c <_ZN13GpioInElementD1Ev>
GpioOutElement water_pot_enable(GPIOB, GPIO_PIN_2, true);
 8003f5c:	4821      	ldr	r0, [pc, #132]	; (8003fe4 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003f5e:	f7fe fb1f 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement buzzer_control(GPIOB, GPIO_PIN_10, false);
 8003f62:	481f      	ldr	r0, [pc, #124]	; (8003fe0 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003f64:	f7fe fb1c 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_2_control(GPIOB, GPIO_PIN_7, false);
 8003f68:	481c      	ldr	r0, [pc, #112]	; (8003fdc <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8003f6a:	f7fe fb19 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_1_control(GPIOB, GPIO_PIN_5, false);
 8003f6e:	481a      	ldr	r0, [pc, #104]	; (8003fd8 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8003f70:	f7fe fb16 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_ok(GPIOC, GPIO_PIN_3, true);
 8003f74:	4816      	ldr	r0, [pc, #88]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8003f76:	f7fe fb13 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_1(GPIOC, GPIO_PIN_2, true);
 8003f7a:	4814      	ldr	r0, [pc, #80]	; (8003fcc <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8003f7c:	f7fe fb10 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_warning_2(GPIOC, GPIO_PIN_1, true);
 8003f80:	4811      	ldr	r0, [pc, #68]	; (8003fc8 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8003f82:	f7fe fb0d 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
GpioOutElement led_error(GPIOC, GPIO_PIN_0, true);
 8003f86:	480f      	ldr	r0, [pc, #60]	; (8003fc4 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8003f88:	f7fe fb0a 	bl	80025a0 <_ZN14GpioOutElementD1Ev>
		inline static etl::queue<Error, 100> log;
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2301      	moveq	r3, #1
 8003fa0:	2300      	movne	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <_Z41__static_initialization_and_destruction_0ii+0x1be>
 8003fa8:	4804      	ldr	r0, [pc, #16]	; (8003fbc <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8003faa:	f000 faf5 	bl	8004598 <_ZN3etl5queueI5ErrorLj100ELj2EED1Ev>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	200009dc 	.word	0x200009dc
 8003fbc:	2000031c 	.word	0x2000031c
 8003fc0:	48000800 	.word	0x48000800
 8003fc4:	20000650 	.word	0x20000650
 8003fc8:	20000660 	.word	0x20000660
 8003fcc:	20000670 	.word	0x20000670
 8003fd0:	20000680 	.word	0x20000680
 8003fd4:	48000400 	.word	0x48000400
 8003fd8:	20000690 	.word	0x20000690
 8003fdc:	200006a0 	.word	0x200006a0
 8003fe0:	200006b0 	.word	0x200006b0
 8003fe4:	200006c0 	.word	0x200006c0
 8003fe8:	200006d0 	.word	0x200006d0
 8003fec:	200006e0 	.word	0x200006e0
 8003ff0:	200006f0 	.word	0x200006f0
 8003ff4:	20000700 	.word	0x20000700
 8003ff8:	20000710 	.word	0x20000710
 8003ffc:	20000720 	.word	0x20000720
 8004000:	20000730 	.word	0x20000730
 8004004:	20000740 	.word	0x20000740
 8004008:	20000750 	.word	0x20000750
 800400c:	200007e4 	.word	0x200007e4

08004010 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
    new_data = true;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	7993      	ldrb	r3, [r2, #6]
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1dd8      	adds	r0, r3, #7
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	331c      	adds	r3, #28
 800402c:	2203      	movs	r2, #3
 800402e:	4619      	mov	r1, r3
 8004030:	f004 fcf2 	bl	8008a18 <memcpy>
  }
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	7993      	ldrb	r3, [r2, #6]
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3307      	adds	r3, #7
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	321c      	adds	r2, #28
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	b292      	uxth	r2, r2
 800405c:	801a      	strh	r2, [r3, #0]
  }
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	7993      	ldrb	r3, [r2, #6]
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3307      	adds	r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	321c      	adds	r2, #28
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	601a      	str	r2, [r3, #0]
  }
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
    new_data = true;
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	7993      	ldrb	r3, [r2, #6]
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	1dd8      	adds	r0, r3, #7
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	331c      	adds	r3, #28
 80040b2:	2206      	movs	r2, #6
 80040b4:	4619      	mov	r1, r3
 80040b6:	f004 fcaf 	bl	8008a18 <memcpy>
  }
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	6039      	str	r1, [r7, #0]
    new_data = true;
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	7993      	ldrb	r3, [r2, #6]
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	1dd8      	adds	r0, r3, #7
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	331c      	adds	r3, #28
 80040de:	2206      	movs	r2, #6
 80040e0:	4619      	mov	r1, r3
 80040e2:	f004 fc99 	bl	8008a18 <memcpy>
  }
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	7993      	ldrb	r3, [r2, #6]
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	1dd8      	adds	r0, r3, #7
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	331c      	adds	r3, #28
 800410a:	2206      	movs	r2, #6
 800410c:	4619      	mov	r1, r3
 800410e:	f004 fc83 	bl	8008a18 <memcpy>
  }
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	7993      	ldrb	r3, [r2, #6]
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	1dd8      	adds	r0, r3, #7
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	331c      	adds	r3, #28
 8004136:	2208      	movs	r2, #8
 8004138:	4619      	mov	r1, r3
 800413a:	f004 fc6d 	bl	8008a18 <memcpy>
  }
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	7993      	ldrb	r3, [r2, #6]
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3307      	adds	r3, #7
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	321c      	adds	r2, #28
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	601a      	str	r2, [r3, #0]
  }
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	7993      	ldrb	r3, [r2, #6]
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	1dd8      	adds	r0, r3, #7
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	331c      	adds	r3, #28
 800418e:	2208      	movs	r2, #8
 8004190:	4619      	mov	r1, r3
 8004192:	f004 fc41 	bl	8008a18 <memcpy>
  }
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	7993      	ldrb	r3, [r2, #6]
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	1dd8      	adds	r0, r3, #7
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	331c      	adds	r3, #28
 80041ba:	2203      	movs	r2, #3
 80041bc:	4619      	mov	r1, r3
 80041be:	f004 fc2b 	bl	8008a18 <memcpy>
  }
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	7993      	ldrb	r3, [r2, #6]
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	1dd8      	adds	r0, r3, #7
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	331c      	adds	r3, #28
 80041e6:	2203      	movs	r2, #3
 80041e8:	4619      	mov	r1, r3
 80041ea:	f004 fc15 	bl	8008a18 <memcpy>
  }
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	7993      	ldrb	r3, [r2, #6]
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1dd8      	adds	r0, r3, #7
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	331c      	adds	r3, #28
 8004212:	2205      	movs	r2, #5
 8004214:	4619      	mov	r1, r3
 8004216:	f004 fbff 	bl	8008a18 <memcpy>
  }
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <_ZN8PUTM_CAN6DeviceINS_18SF_PassiveElementsEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	7993      	ldrb	r3, [r2, #6]
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	1dd8      	adds	r0, r3, #7
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	331c      	adds	r3, #28
 800423e:	2208      	movs	r2, #8
 8004240:	4619      	mov	r1, r3
 8004242:	f004 fbe9 	bl	8008a18 <memcpy>
  }
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <_ZN8PUTM_CAN6DeviceINS_9SF_SupplyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	7993      	ldrb	r3, [r2, #6]
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	1dd8      	adds	r0, r3, #7
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	331c      	adds	r3, #28
 800426a:	2208      	movs	r2, #8
 800426c:	4619      	mov	r1, r3
 800426e:	f004 fbd3 	bl	8008a18 <memcpy>
  }
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <_ZN8PUTM_CAN6DeviceINS_23SF_LegendaryDVAndSupplyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	7993      	ldrb	r3, [r2, #6]
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	1dd8      	adds	r0, r3, #7
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	331c      	adds	r3, #28
 8004296:	2208      	movs	r2, #8
 8004298:	4619      	mov	r1, r3
 800429a:	f004 fbbd 	bl	8008a18 <memcpy>
  }
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
    new_data = true;
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	7993      	ldrb	r3, [r2, #6]
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	1dd8      	adds	r0, r3, #7
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	331c      	adds	r3, #28
 80042c2:	2205      	movs	r2, #5
 80042c4:	4619      	mov	r1, r3
 80042c6:	f004 fba7 	bl	8008a18 <memcpy>
  }
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
    new_data = true;
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	7993      	ldrb	r3, [r2, #6]
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3307      	adds	r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	321c      	adds	r2, #28
 80042ee:	8812      	ldrh	r2, [r2, #0]
 80042f0:	b292      	uxth	r2, r2
 80042f2:	801a      	strh	r2, [r3, #0]
  }
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
    new_data = true;
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	7993      	ldrb	r3, [r2, #6]
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3307      	adds	r3, #7
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	321c      	adds	r2, #28
 800431c:	7812      	ldrb	r2, [r2, #0]
 800431e:	701a      	strb	r2, [r3, #0]
  }
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <_ZN8PUTM_CAN6DeviceINS_25Dash_steering_wheel_angleEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	7993      	ldrb	r3, [r2, #6]
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3307      	adds	r3, #7
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	321c      	adds	r2, #28
 8004348:	8812      	ldrh	r2, [r2, #0]
 800434a:	b292      	uxth	r2, r2
 800434c:	801a      	strh	r2, [r3, #0]
  }
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	7993      	ldrb	r3, [r2, #6]
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3307      	adds	r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	321c      	adds	r2, #28
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	601a      	str	r2, [r3, #0]
  }
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	7993      	ldrb	r3, [r2, #6]
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3307      	adds	r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	321c      	adds	r2, #28
 80043a2:	7812      	ldrb	r2, [r2, #0]
 80043a4:	701a      	strb	r2, [r3, #0]
  }
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
    new_data = true;
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	7993      	ldrb	r3, [r2, #6]
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3307      	adds	r3, #7
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	321c      	adds	r2, #28
 80043ce:	8812      	ldrh	r2, [r2, #0]
 80043d0:	b292      	uxth	r2, r2
 80043d2:	801a      	strh	r2, [r3, #0]
  }
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	7993      	ldrb	r3, [r2, #6]
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	1dd8      	adds	r0, r3, #7
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	331c      	adds	r3, #28
 80043fc:	2208      	movs	r2, #8
 80043fe:	4619      	mov	r1, r3
 8004400:	f004 fb0a 	bl	8008a18 <memcpy>
  }
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	7993      	ldrb	r3, [r2, #6]
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3307      	adds	r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	321c      	adds	r2, #28
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	701a      	strb	r2, [r3, #0]
  }
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	7993      	ldrb	r3, [r2, #6]
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	1dd8      	adds	r0, r3, #7
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	331c      	adds	r3, #28
 8004454:	2208      	movs	r2, #8
 8004456:	4619      	mov	r1, r3
 8004458:	f004 fade 	bl	8008a18 <memcpy>
  }
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	7993      	ldrb	r3, [r2, #6]
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1dd8      	adds	r0, r3, #7
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	331c      	adds	r3, #28
 8004480:	2206      	movs	r2, #6
 8004482:	4619      	mov	r1, r3
 8004484:	f004 fac8 	bl	8008a18 <memcpy>
  }
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
    new_data = true;
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	7993      	ldrb	r3, [r2, #6]
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	1dd8      	adds	r0, r3, #7
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	331c      	adds	r3, #28
 80044ac:	2208      	movs	r2, #8
 80044ae:	4619      	mov	r1, r3
 80044b0:	f004 fab2 	bl	8008a18 <memcpy>
  }
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	7993      	ldrb	r3, [r2, #6]
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3307      	adds	r3, #7
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	321c      	adds	r2, #28
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	701a      	strb	r2, [r3, #0]
  }
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	7993      	ldrb	r3, [r2, #6]
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	1dd8      	adds	r0, r3, #7
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	331c      	adds	r3, #28
 8004504:	2206      	movs	r2, #6
 8004506:	4619      	mov	r1, r3
 8004508:	f004 fa86 	bl	8008a18 <memcpy>
  }
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	7993      	ldrb	r3, [r2, #6]
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	1dd8      	adds	r0, r3, #7
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	331c      	adds	r3, #28
 8004530:	2206      	movs	r2, #6
 8004532:	4619      	mov	r1, r3
 8004534:	f004 fa70 	bl	8008a18 <memcpy>
  }
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
    new_data = true;
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	7993      	ldrb	r3, [r2, #6]
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	1dd8      	adds	r0, r3, #7
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	331c      	adds	r3, #28
 800455c:	2208      	movs	r2, #8
 800455e:	4619      	mov	r1, r3
 8004560:	f004 fa5a 	bl	8008a18 <memcpy>
  }
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
    new_data = true;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	7993      	ldrb	r3, [r2, #6]
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	1dd8      	adds	r0, r3, #7
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	331c      	adds	r3, #28
 8004588:	2205      	movs	r2, #5
 800458a:	4619      	mov	r1, r3
 800458c:	f004 fa44 	bl	8008a18 <memcpy>
  }
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <_ZN3etl5queueI5ErrorLj100ELj2EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~queue()
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
    {
      base_t::clear();
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f809 	bl	80045ba <_ZN3etl6iqueueI5ErrorLj2EE5clearEv>
    }
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fa9c 	bl	8003ae8 <_ZN3etl6iqueueI5ErrorLj2EED1Ev>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <_ZN3etl6iqueueI5ErrorLj2EE5clearEv>:
    void clear()
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
        base_t::index_clear();
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f804 	bl	80045d2 <_ZN3etl10queue_baseILj2EE11index_clearEv>
    }
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <_ZN3etl10queue_baseILj2EE11index_clearEv>:
    void index_clear()
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
      in = 0;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
      out = 0;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	605a      	str	r2, [r3, #4]
      current_size = 0;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	609a      	str	r2, [r3, #8]
    }
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004600:	2001      	movs	r0, #1
 8004602:	f7ff fbf5 	bl	8003df0 <_Z41__static_initialization_and_destruction_0ii>
 8004606:	bd80      	pop	{r7, pc}

08004608 <_GLOBAL__sub_D__ZN8PUTM_CAN3canE>:
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
 800460c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004610:	2000      	movs	r0, #0
 8004612:	f7ff fbed 	bl	8003df0 <_Z41__static_initialization_and_destruction_0ii>
 8004616:	bd80      	pop	{r7, pc}

08004618 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800461c:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <MX_SPI1_Init+0xa0>)
 800461e:	4a27      	ldr	r2, [pc, #156]	; (80046bc <MX_SPI1_Init+0xa4>)
 8004620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004622:	4b25      	ldr	r3, [pc, #148]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004628:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800462a:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <MX_SPI1_Init+0xa0>)
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004630:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004632:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004636:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004638:	4b1f      	ldr	r3, [pc, #124]	; (80046b8 <MX_SPI1_Init+0xa0>)
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800463e:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004640:	2200      	movs	r2, #0
 8004642:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004644:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800464a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800464c:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <MX_SPI1_Init+0xa0>)
 800464e:	2218      	movs	r2, #24
 8004650:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004652:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004654:	2200      	movs	r2, #0
 8004656:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004658:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <MX_SPI1_Init+0xa0>)
 800465a:	2200      	movs	r2, #0
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800465e:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004660:	2200      	movs	r2, #0
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004664:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004666:	2207      	movs	r2, #7
 8004668:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <MX_SPI1_Init+0xa0>)
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004672:	2200      	movs	r2, #0
 8004674:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004676:	4810      	ldr	r0, [pc, #64]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004678:	f004 f8c4 	bl	8008804 <HAL_SPI_Init>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004682:	f7ff f8bf 	bl	8003804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004686:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <MX_SPI1_Init+0xa0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004694:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <MX_SPI1_Init+0xa0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d007      	beq.n	80046b4 <MX_SPI1_Init+0x9c>
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <MX_SPI1_Init+0xa0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b03      	ldr	r3, [pc, #12]	; (80046b8 <MX_SPI1_Init+0xa0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 80046b4:	bf00      	nop
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200009e0 	.word	0x200009e0
 80046bc:	40013000 	.word	0x40013000

080046c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a17      	ldr	r2, [pc, #92]	; (800473c <HAL_SPI_MspInit+0x7c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d128      	bne.n	8004734 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046e2:	4b17      	ldr	r3, [pc, #92]	; (8004740 <HAL_SPI_MspInit+0x80>)
 80046e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e6:	4a16      	ldr	r2, [pc, #88]	; (8004740 <HAL_SPI_MspInit+0x80>)
 80046e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046ec:	6613      	str	r3, [r2, #96]	; 0x60
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <HAL_SPI_MspInit+0x80>)
 80046f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fa:	4b11      	ldr	r3, [pc, #68]	; (8004740 <HAL_SPI_MspInit+0x80>)
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	4a10      	ldr	r2, [pc, #64]	; (8004740 <HAL_SPI_MspInit+0x80>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004706:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <HAL_SPI_MspInit+0x80>)
 8004708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004712:	23e0      	movs	r3, #224	; 0xe0
 8004714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004716:	2302      	movs	r3, #2
 8004718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800471a:	2302      	movs	r3, #2
 800471c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800471e:	2303      	movs	r3, #3
 8004720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004722:	2305      	movs	r3, #5
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004726:	f107 0314 	add.w	r3, r7, #20
 800472a:	4619      	mov	r1, r3
 800472c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004730:	f002 f98c 	bl	8006a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004734:	bf00      	nop
 8004736:	3728      	adds	r7, #40	; 0x28
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40013000 	.word	0x40013000
 8004740:	40021000 	.word	0x40021000

08004744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <HAL_MspInit+0x44>)
 800474c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <HAL_MspInit+0x44>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6613      	str	r3, [r2, #96]	; 0x60
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_MspInit+0x44>)
 8004758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_MspInit+0x44>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004766:	4a08      	ldr	r2, [pc, #32]	; (8004788 <HAL_MspInit+0x44>)
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476c:	6593      	str	r3, [r2, #88]	; 0x58
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_MspInit+0x44>)
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000

0800478c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004790:	e7fe      	b.n	8004790 <NMI_Handler+0x4>

08004792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004796:	e7fe      	b.n	8004796 <HardFault_Handler+0x4>

08004798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800479c:	e7fe      	b.n	800479c <MemManage_Handler+0x4>

0800479e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800479e:	b480      	push	{r7}
 80047a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047a2:	e7fe      	b.n	80047a2 <BusFault_Handler+0x4>

080047a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047a8:	e7fe      	b.n	80047a8 <UsageFault_Handler+0x4>

080047aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047aa:	b480      	push	{r7}
 80047ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047d8:	f000 f9de 	bl	8004b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047dc:	bf00      	nop
 80047de:	bd80      	pop	{r7, pc}

080047e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80047e4:	4802      	ldr	r0, [pc, #8]	; (80047f0 <CAN1_RX0_IRQHandler+0x10>)
 80047e6:	f001 fdef 	bl	80063c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200002f0 	.word	0x200002f0

080047f4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80047f8:	4802      	ldr	r0, [pc, #8]	; (8004804 <CAN1_RX1_IRQHandler+0x10>)
 80047fa:	f001 fde5 	bl	80063c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200002f0 	.word	0x200002f0

08004808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
	return 1;
 800480c:	2301      	movs	r3, #1
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <_kill>:

int _kill(int pid, int sig)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004822:	f004 f8b5 	bl	8008990 <__errno>
 8004826:	4603      	mov	r3, r0
 8004828:	2216      	movs	r2, #22
 800482a:	601a      	str	r2, [r3, #0]
	return -1;
 800482c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <_exit>:

void _exit (int status)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004840:	f04f 31ff 	mov.w	r1, #4294967295
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ffe7 	bl	8004818 <_kill>
	while (1) {}		/* Make sure we hang here */
 800484a:	e7fe      	b.n	800484a <_exit+0x12>

0800484c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e00a      	b.n	8004874 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800485e:	f3af 8000 	nop.w
 8004862:	4601      	mov	r1, r0
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	60ba      	str	r2, [r7, #8]
 800486a:	b2ca      	uxtb	r2, r1
 800486c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	3301      	adds	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	429a      	cmp	r2, r3
 800487a:	dbf0      	blt.n	800485e <_read+0x12>
	}

return len;
 800487c:	687b      	ldr	r3, [r7, #4]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b086      	sub	sp, #24
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e009      	b.n	80048ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	60ba      	str	r2, [r7, #8]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	3301      	adds	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	dbf1      	blt.n	8004898 <_write+0x12>
	}
	return len;
 80048b4:	687b      	ldr	r3, [r7, #4]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <_close>:

int _close(int file)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
	return -1;
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048e6:	605a      	str	r2, [r3, #4]
	return 0;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <_isatty>:

int _isatty(int file)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
	return 1;
 80048fe:	2301      	movs	r3, #1
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	return 0;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004930:	4a14      	ldr	r2, [pc, #80]	; (8004984 <_sbrk+0x5c>)
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <_sbrk+0x60>)
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800493c:	4b13      	ldr	r3, [pc, #76]	; (800498c <_sbrk+0x64>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004944:	4b11      	ldr	r3, [pc, #68]	; (800498c <_sbrk+0x64>)
 8004946:	4a12      	ldr	r2, [pc, #72]	; (8004990 <_sbrk+0x68>)
 8004948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <_sbrk+0x64>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	429a      	cmp	r2, r3
 8004956:	d207      	bcs.n	8004968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004958:	f004 f81a 	bl	8008990 <__errno>
 800495c:	4603      	mov	r3, r0
 800495e:	220c      	movs	r2, #12
 8004960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	e009      	b.n	800497c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004968:	4b08      	ldr	r3, [pc, #32]	; (800498c <_sbrk+0x64>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <_sbrk+0x64>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	4a05      	ldr	r2, [pc, #20]	; (800498c <_sbrk+0x64>)
 8004978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800497a:	68fb      	ldr	r3, [r7, #12]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20050000 	.word	0x20050000
 8004988:	00000400 	.word	0x00000400
 800498c:	20000a44 	.word	0x20000a44
 8004990:	20000a60 	.word	0x20000a60

08004994 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <SystemInit+0x20>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	4a05      	ldr	r2, [pc, #20]	; (80049b4 <SystemInit+0x20>)
 80049a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80049a8:	bf00      	nop
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 80049c6:	f000 f8fb 	bl	8004bc0 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
}
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <_ZN5TimerC1Em>:

Timer::Timer(uint32_t timeout) : timeout(timeout)
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	605a      	str	r2, [r3, #4]
{
	this->start_time = HAL_GetTick();
 80049ea:	f000 f8e9 	bl	8004bc0 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	601a      	str	r2, [r3, #0]
}
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <_ZN5Timer10setTimeOutEm>:

void Timer::setTimeOut(uint32_t timeout)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
	this->timeout = timeout;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <_ZN5Timer7restartEv>:

void Timer::restart()
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
	this->start_time = HAL_GetTick();
 8004a22:	f000 f8cd 	bl	8004bc0 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <_ZN5Timer23checkIfTimedOutAndResetEv>:

bool Timer::checkIfTimedOutAndReset()
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	if(this->timeout == 0) return false;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <_ZN5Timer23checkIfTimedOutAndResetEv+0x1e>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e012      	b.n	8004a78 <_ZN5Timer23checkIfTimedOutAndResetEv+0x44>

	if(this->getPassedTime() >= this->timeout)
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f814 	bl	8004a80 <_ZN5Timer13getPassedTimeEv>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf2c      	ite	cs
 8004a62:	2301      	movcs	r3, #1
 8004a64:	2300      	movcc	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <_ZN5Timer23checkIfTimedOutAndResetEv+0x42>
	{
		this->restart();
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ffd4 	bl	8004a1a <_ZN5Timer7restartEv>
		return true;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <_ZN5Timer23checkIfTimedOutAndResetEv+0x44>
	}

	return false;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	return HAL_GetTick() - this->start_time;
 8004a88:	f000 f89a 	bl	8004bc0 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	1ad3      	subs	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004aa0:	f7ff ff78 	bl	8004994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004aa4:	480c      	ldr	r0, [pc, #48]	; (8004ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004aa6:	490d      	ldr	r1, [pc, #52]	; (8004adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004aa8:	4a0d      	ldr	r2, [pc, #52]	; (8004ae0 <LoopForever+0xe>)
  movs r3, #0
 8004aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004aac:	e002      	b.n	8004ab4 <LoopCopyDataInit>

08004aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ab2:	3304      	adds	r3, #4

08004ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ab8:	d3f9      	bcc.n	8004aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aba:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004abc:	4c0a      	ldr	r4, [pc, #40]	; (8004ae8 <LoopForever+0x16>)
  movs r3, #0
 8004abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ac0:	e001      	b.n	8004ac6 <LoopFillZerobss>

08004ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ac4:	3204      	adds	r2, #4

08004ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ac8:	d3fb      	bcc.n	8004ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004aca:	f003 ff79 	bl	80089c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ace:	f7fd ffdf 	bl	8002a90 <main>

08004ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ad2:	e7fe      	b.n	8004ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004ad4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004adc:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8004ae0:	08009df0 	.word	0x08009df0
  ldr r2, =_sbss
 8004ae4:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8004ae8:	20000a5c 	.word	0x20000a5c

08004aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004aec:	e7fe      	b.n	8004aec <ADC1_2_IRQHandler>

08004aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004af8:	2003      	movs	r0, #3
 8004afa:	f001 ff65 	bl	80069c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004afe:	200f      	movs	r0, #15
 8004b00:	f000 f80e 	bl	8004b20 <HAL_InitTick>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	71fb      	strb	r3, [r7, #7]
 8004b0e:	e001      	b.n	8004b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b10:	f7ff fe18 	bl	8004744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b14:	79fb      	ldrb	r3, [r7, #7]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004b2c:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <HAL_InitTick+0x6c>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d023      	beq.n	8004b7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004b34:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <HAL_InitTick+0x70>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <HAL_InitTick+0x6c>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f001 ff71 	bl	8006a32 <HAL_SYSTICK_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b0f      	cmp	r3, #15
 8004b5a:	d809      	bhi.n	8004b70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	f001 ff3b 	bl	80069de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b68:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <HAL_InitTick+0x74>)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e007      	b.n	8004b80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
 8004b74:	e004      	b.n	8004b80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
 8004b7a:	e001      	b.n	8004b80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000204 	.word	0x20000204
 8004b90:	200001fc 	.word	0x200001fc
 8004b94:	20000200 	.word	0x20000200

08004b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_IncTick+0x20>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_IncTick+0x24>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <HAL_IncTick+0x24>)
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000204 	.word	0x20000204
 8004bbc:	20000a48 	.word	0x20000a48

08004bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8004bc4:	4b03      	ldr	r3, [pc, #12]	; (8004bd4 <HAL_GetTick+0x14>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000a48 	.word	0x20000a48

08004bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004be0:	f7ff ffee 	bl	8004bc0 <HAL_GetTick>
 8004be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d005      	beq.n	8004bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <HAL_Delay+0x44>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bfe:	bf00      	nop
 8004c00:	f7ff ffde 	bl	8004bc0 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d8f7      	bhi.n	8004c00 <HAL_Delay+0x28>
  {
  }
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000204 	.word	0x20000204

08004c20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	609a      	str	r2, [r3, #8]
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3360      	adds	r3, #96	; 0x60
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <LL_ADC_SetOffset+0x44>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	03fff000 	.word	0x03fff000

08004cd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3360      	adds	r3, #96	; 0x60
 8004cde:	461a      	mov	r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3360      	adds	r3, #96	; 0x60
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	431a      	orrs	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	615a      	str	r2, [r3, #20]
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3330      	adds	r3, #48	; 0x30
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	4413      	add	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	211f      	movs	r1, #31
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	401a      	ands	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	0e9b      	lsrs	r3, r3, #26
 8004d90:	f003 011f 	and.w	r1, r3, #31
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004da4:	bf00      	nop
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	0e5b      	lsrs	r3, r3, #25
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	4413      	add	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	0d1b      	lsrs	r3, r3, #20
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	2107      	movs	r1, #7
 8004dde:	fa01 f303 	lsl.w	r3, r1, r3
 8004de2:	43db      	mvns	r3, r3
 8004de4:	401a      	ands	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	0d1b      	lsrs	r3, r3, #20
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	fa01 f303 	lsl.w	r3, r1, r3
 8004df4:	431a      	orrs	r2, r3
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e20:	43db      	mvns	r3, r3
 8004e22:	401a      	ands	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0318 	and.w	r3, r3, #24
 8004e2a:	4908      	ldr	r1, [pc, #32]	; (8004e4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8004e2c:	40d9      	lsrs	r1, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	400b      	ands	r3, r1
 8004e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e36:	431a      	orrs	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	0007ffff 	.word	0x0007ffff

08004e50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004e60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6093      	str	r3, [r2, #8]
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e88:	d101      	bne.n	8004e8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004eb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ed8:	d101      	bne.n	8004ede <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <LL_ADC_IsEnabled+0x18>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <LL_ADC_IsEnabled+0x1a>
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d101      	bne.n	8004f2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d101      	bne.n	8004f50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e134      	b.n	80051e4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d109      	bne.n	8004f9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fb f9ff 	bl	800038c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ff67 	bl	8004e74 <LL_ADC_IsDeepPowerDownEnabled>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d004      	beq.n	8004fb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff ff4d 	bl	8004e50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff ff82 	bl	8004ec4 <LL_ADC_IsInternalRegulatorEnabled>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d115      	bne.n	8004ff2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ff66 	bl	8004e9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fd0:	4b86      	ldr	r3, [pc, #536]	; (80051ec <HAL_ADC_Init+0x28c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	099b      	lsrs	r3, r3, #6
 8004fd6:	4a86      	ldr	r2, [pc, #536]	; (80051f0 <HAL_ADC_Init+0x290>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	099b      	lsrs	r3, r3, #6
 8004fde:	3301      	adds	r3, #1
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004fe4:	e002      	b.n	8004fec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f9      	bne.n	8004fe6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ff64 	bl	8004ec4 <LL_ADC_IsInternalRegulatorEnabled>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10d      	bne.n	800501e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005006:	f043 0210 	orr.w	r2, r3, #16
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005012:	f043 0201 	orr.w	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff ff75 	bl	8004f12 <LL_ADC_REG_IsConversionOngoing>
 8005028:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 80cd 	bne.w	80051d2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f040 80c9 	bne.w	80051d2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005048:	f043 0202 	orr.w	r2, r3, #2
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff49 	bl	8004eec <LL_ADC_IsEnabled>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d110      	bne.n	8005082 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005060:	4864      	ldr	r0, [pc, #400]	; (80051f4 <HAL_ADC_Init+0x294>)
 8005062:	f7ff ff43 	bl	8004eec <LL_ADC_IsEnabled>
 8005066:	4604      	mov	r4, r0
 8005068:	4863      	ldr	r0, [pc, #396]	; (80051f8 <HAL_ADC_Init+0x298>)
 800506a:	f7ff ff3f 	bl	8004eec <LL_ADC_IsEnabled>
 800506e:	4603      	mov	r3, r0
 8005070:	4323      	orrs	r3, r4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d105      	bne.n	8005082 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4619      	mov	r1, r3
 800507c:	485f      	ldr	r0, [pc, #380]	; (80051fc <HAL_ADC_Init+0x29c>)
 800507e:	f7ff fdcf 	bl	8004c20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7e5b      	ldrb	r3, [r3, #25]
 8005086:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800508c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005092:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005098:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050a0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d106      	bne.n	80050be <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	3b01      	subs	r3, #1
 80050b6:	045b      	lsls	r3, r3, #17
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	4b47      	ldr	r3, [pc, #284]	; (8005200 <HAL_ADC_Init+0x2a0>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	69b9      	ldr	r1, [r7, #24]
 80050ea:	430b      	orrs	r3, r1
 80050ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ff0d 	bl	8004f12 <LL_ADC_REG_IsConversionOngoing>
 80050f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ff1a 	bl	8004f38 <LL_ADC_INJ_IsConversionOngoing>
 8005104:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d140      	bne.n	800518e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d13d      	bne.n	800518e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7e1b      	ldrb	r3, [r3, #24]
 800511a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800511c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005124:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005134:	f023 0306 	bic.w	r3, r3, #6
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	69b9      	ldr	r1, [r7, #24]
 800513e:	430b      	orrs	r3, r1
 8005140:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005148:	2b01      	cmp	r3, #1
 800514a:	d118      	bne.n	800517e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005156:	f023 0304 	bic.w	r3, r3, #4
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005162:	4311      	orrs	r1, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005168:	4311      	orrs	r1, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800516e:	430a      	orrs	r2, r1
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	611a      	str	r2, [r3, #16]
 800517c:	e007      	b.n	800518e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d10c      	bne.n	80051b0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	f023 010f 	bic.w	r1, r3, #15
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	1e5a      	subs	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30
 80051ae:	e007      	b.n	80051c0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 020f 	bic.w	r2, r2, #15
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	f023 0303 	bic.w	r3, r3, #3
 80051c8:	f043 0201 	orr.w	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	659a      	str	r2, [r3, #88]	; 0x58
 80051d0:	e007      	b.n	80051e2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d6:	f043 0210 	orr.w	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80051e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3724      	adds	r7, #36	; 0x24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd90      	pop	{r4, r7, pc}
 80051ec:	200001fc 	.word	0x200001fc
 80051f0:	053e2d63 	.word	0x053e2d63
 80051f4:	50040000 	.word	0x50040000
 80051f8:	50040100 	.word	0x50040100
 80051fc:	50040300 	.word	0x50040300
 8005200:	fff0c007 	.word	0xfff0c007

08005204 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b0b6      	sub	sp, #216	; 0xd8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x22>
 8005222:	2302      	movs	r3, #2
 8005224:	e3d5      	b.n	80059d2 <HAL_ADC_ConfigChannel+0x7ce>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fe6d 	bl	8004f12 <LL_ADC_REG_IsConversionOngoing>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 83ba 	bne.w	80059b4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b05      	cmp	r3, #5
 8005246:	d824      	bhi.n	8005292 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	3b02      	subs	r3, #2
 800524e:	2b03      	cmp	r3, #3
 8005250:	d81b      	bhi.n	800528a <HAL_ADC_ConfigChannel+0x86>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <HAL_ADC_ConfigChannel+0x54>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	08005269 	.word	0x08005269
 800525c:	08005271 	.word	0x08005271
 8005260:	08005279 	.word	0x08005279
 8005264:	08005281 	.word	0x08005281
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	220c      	movs	r2, #12
 800526c:	605a      	str	r2, [r3, #4]
          break;
 800526e:	e011      	b.n	8005294 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2212      	movs	r2, #18
 8005274:	605a      	str	r2, [r3, #4]
          break;
 8005276:	e00d      	b.n	8005294 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2218      	movs	r2, #24
 800527c:	605a      	str	r2, [r3, #4]
          break;
 800527e:	e009      	b.n	8005294 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005286:	605a      	str	r2, [r3, #4]
          break;
 8005288:	e004      	b.n	8005294 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2206      	movs	r2, #6
 800528e:	605a      	str	r2, [r3, #4]
          break;
 8005290:	e000      	b.n	8005294 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005292:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6859      	ldr	r1, [r3, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	f7ff fd59 	bl	8004d58 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fe31 	bl	8004f12 <LL_ADC_REG_IsConversionOngoing>
 80052b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fe3d 	bl	8004f38 <LL_ADC_INJ_IsConversionOngoing>
 80052be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f040 81c1 	bne.w	800564e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f040 81bc 	bne.w	800564e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052de:	d10f      	bne.n	8005300 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2200      	movs	r2, #0
 80052ea:	4619      	mov	r1, r3
 80052ec:	f7ff fd60 	bl	8004db0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fd1a 	bl	8004d32 <LL_ADC_SetSamplingTimeCommonConfig>
 80052fe:	e00e      	b.n	800531e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	6819      	ldr	r1, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	461a      	mov	r2, r3
 800530e:	f7ff fd4f 	bl	8004db0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2100      	movs	r1, #0
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fd0a 	bl	8004d32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	08db      	lsrs	r3, r3, #3
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d00a      	beq.n	8005356 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	6919      	ldr	r1, [r3, #16]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005350:	f7ff fc9a 	bl	8004c88 <LL_ADC_SetOffset>
 8005354:	e17b      	b.n	800564e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fcb7 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 8005362:	4603      	mov	r3, r0
 8005364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x17e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2100      	movs	r1, #0
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fcac 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 8005378:	4603      	mov	r3, r0
 800537a:	0e9b      	lsrs	r3, r3, #26
 800537c:	f003 021f 	and.w	r2, r3, #31
 8005380:	e01e      	b.n	80053c0 <HAL_ADC_ConfigChannel+0x1bc>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2100      	movs	r1, #0
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff fca1 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 800538e:	4603      	mov	r3, r0
 8005390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005394:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005398:	fa93 f3a3 	rbit	r3, r3
 800539c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80053a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80053b0:	2320      	movs	r3, #32
 80053b2:	e004      	b.n	80053be <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80053b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053b8:	fab3 f383 	clz	r3, r3
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d105      	bne.n	80053d8 <HAL_ADC_ConfigChannel+0x1d4>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	0e9b      	lsrs	r3, r3, #26
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	e018      	b.n	800540a <HAL_ADC_ConfigChannel+0x206>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053e4:	fa93 f3a3 	rbit	r3, r3
 80053e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80053ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80053f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80053fc:	2320      	movs	r3, #32
 80053fe:	e004      	b.n	800540a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8005400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005404:	fab3 f383 	clz	r3, r3
 8005408:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800540a:	429a      	cmp	r2, r3
 800540c:	d106      	bne.n	800541c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fc70 	bl	8004cfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2101      	movs	r1, #1
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fc54 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 8005428:	4603      	mov	r3, r0
 800542a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10a      	bne.n	8005448 <HAL_ADC_ConfigChannel+0x244>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fc49 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 800543e:	4603      	mov	r3, r0
 8005440:	0e9b      	lsrs	r3, r3, #26
 8005442:	f003 021f 	and.w	r2, r3, #31
 8005446:	e01e      	b.n	8005486 <HAL_ADC_ConfigChannel+0x282>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2101      	movs	r1, #1
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fc3e 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 8005454:	4603      	mov	r3, r0
 8005456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800545e:	fa93 f3a3 	rbit	r3, r3
 8005462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800546a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800546e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8005476:	2320      	movs	r3, #32
 8005478:	e004      	b.n	8005484 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800547a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800548e:	2b00      	cmp	r3, #0
 8005490:	d105      	bne.n	800549e <HAL_ADC_ConfigChannel+0x29a>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	0e9b      	lsrs	r3, r3, #26
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	e018      	b.n	80054d0 <HAL_ADC_ConfigChannel+0x2cc>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80054b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80054ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80054c2:	2320      	movs	r3, #32
 80054c4:	e004      	b.n	80054d0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80054c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054ca:	fab3 f383 	clz	r3, r3
 80054ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d106      	bne.n	80054e2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2200      	movs	r2, #0
 80054da:	2101      	movs	r1, #1
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fc0d 	bl	8004cfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2102      	movs	r1, #2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff fbf1 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <HAL_ADC_ConfigChannel+0x30a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2102      	movs	r1, #2
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fbe6 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 8005504:	4603      	mov	r3, r0
 8005506:	0e9b      	lsrs	r3, r3, #26
 8005508:	f003 021f 	and.w	r2, r3, #31
 800550c:	e01e      	b.n	800554c <HAL_ADC_ConfigChannel+0x348>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2102      	movs	r1, #2
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fbdb 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 800551a:	4603      	mov	r3, r0
 800551c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005524:	fa93 f3a3 	rbit	r3, r3
 8005528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800552c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005530:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800553c:	2320      	movs	r3, #32
 800553e:	e004      	b.n	800554a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8005540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005544:	fab3 f383 	clz	r3, r3
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005554:	2b00      	cmp	r3, #0
 8005556:	d105      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x360>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	0e9b      	lsrs	r3, r3, #26
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	e016      	b.n	8005592 <HAL_ADC_ConfigChannel+0x38e>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005570:	fa93 f3a3 	rbit	r3, r3
 8005574:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800557c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8005584:	2320      	movs	r3, #32
 8005586:	e004      	b.n	8005592 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005592:	429a      	cmp	r2, r3
 8005594:	d106      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	2102      	movs	r1, #2
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fbac 	bl	8004cfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2103      	movs	r1, #3
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff fb90 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x3cc>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2103      	movs	r1, #3
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fb85 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 80055c6:	4603      	mov	r3, r0
 80055c8:	0e9b      	lsrs	r3, r3, #26
 80055ca:	f003 021f 	and.w	r2, r3, #31
 80055ce:	e017      	b.n	8005600 <HAL_ADC_ConfigChannel+0x3fc>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2103      	movs	r1, #3
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fb7a 	bl	8004cd0 <LL_ADC_GetOffsetChannel>
 80055dc:	4603      	mov	r3, r0
 80055de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80055e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80055ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80055f2:	2320      	movs	r3, #32
 80055f4:	e003      	b.n	80055fe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80055f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x414>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	0e9b      	lsrs	r3, r3, #26
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	e011      	b.n	800563c <HAL_ADC_ConfigChannel+0x438>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005620:	fa93 f3a3 	rbit	r3, r3
 8005624:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005628:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8005630:	2320      	movs	r3, #32
 8005632:	e003      	b.n	800563c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	fab3 f383 	clz	r3, r3
 800563a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800563c:	429a      	cmp	r2, r3
 800563e:	d106      	bne.n	800564e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2200      	movs	r2, #0
 8005646:	2103      	movs	r1, #3
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff fb57 	bl	8004cfc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fc4a 	bl	8004eec <LL_ADC_IsEnabled>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 8140 	bne.w	80058e0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6819      	ldr	r1, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	461a      	mov	r2, r3
 800566e:	f7ff fbcb 	bl	8004e08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	4a8f      	ldr	r2, [pc, #572]	; (80058b4 <HAL_ADC_ConfigChannel+0x6b0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	f040 8131 	bne.w	80058e0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x4a2>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	0e9b      	lsrs	r3, r3, #26
 8005694:	3301      	adds	r3, #1
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2b09      	cmp	r3, #9
 800569c:	bf94      	ite	ls
 800569e:	2301      	movls	r3, #1
 80056a0:	2300      	movhi	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	e019      	b.n	80056da <HAL_ADC_ConfigChannel+0x4d6>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80056b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80056b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80056be:	2320      	movs	r3, #32
 80056c0:	e003      	b.n	80056ca <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80056c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056c4:	fab3 f383 	clz	r3, r3
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	2b09      	cmp	r3, #9
 80056d2:	bf94      	ite	ls
 80056d4:	2301      	movls	r3, #1
 80056d6:	2300      	movhi	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d079      	beq.n	80057d2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x4f6>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0e9b      	lsrs	r3, r3, #26
 80056f0:	3301      	adds	r3, #1
 80056f2:	069b      	lsls	r3, r3, #26
 80056f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056f8:	e015      	b.n	8005726 <HAL_ADC_ConfigChannel+0x522>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800570c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8005712:	2320      	movs	r3, #32
 8005714:	e003      	b.n	800571e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8005716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005718:	fab3 f383 	clz	r3, r3
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3301      	adds	r3, #1
 8005720:	069b      	lsls	r3, r3, #26
 8005722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <HAL_ADC_ConfigChannel+0x542>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	0e9b      	lsrs	r3, r3, #26
 8005738:	3301      	adds	r3, #1
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2101      	movs	r1, #1
 8005740:	fa01 f303 	lsl.w	r3, r1, r3
 8005744:	e017      	b.n	8005776 <HAL_ADC_ConfigChannel+0x572>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574e:	fa93 f3a3 	rbit	r3, r3
 8005752:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005756:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800575e:	2320      	movs	r3, #32
 8005760:	e003      	b.n	800576a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8005762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005764:	fab3 f383 	clz	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	3301      	adds	r3, #1
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2101      	movs	r1, #1
 8005772:	fa01 f303 	lsl.w	r3, r1, r3
 8005776:	ea42 0103 	orr.w	r1, r2, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <HAL_ADC_ConfigChannel+0x598>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	0e9b      	lsrs	r3, r3, #26
 800578c:	3301      	adds	r3, #1
 800578e:	f003 021f 	and.w	r2, r3, #31
 8005792:	4613      	mov	r3, r2
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	4413      	add	r3, r2
 8005798:	051b      	lsls	r3, r3, #20
 800579a:	e018      	b.n	80057ce <HAL_ADC_ConfigChannel+0x5ca>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	fa93 f3a3 	rbit	r3, r3
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80057ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80057b4:	2320      	movs	r3, #32
 80057b6:	e003      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80057b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ba:	fab3 f383 	clz	r3, r3
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	3301      	adds	r3, #1
 80057c2:	f003 021f 	and.w	r2, r3, #31
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057ce:	430b      	orrs	r3, r1
 80057d0:	e081      	b.n	80058d6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d107      	bne.n	80057ee <HAL_ADC_ConfigChannel+0x5ea>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	0e9b      	lsrs	r3, r3, #26
 80057e4:	3301      	adds	r3, #1
 80057e6:	069b      	lsls	r3, r3, #26
 80057e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057ec:	e015      	b.n	800581a <HAL_ADC_ConfigChannel+0x616>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	fa93 f3a3 	rbit	r3, r3
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8005806:	2320      	movs	r3, #32
 8005808:	e003      	b.n	8005812 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	fab3 f383 	clz	r3, r3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	3301      	adds	r3, #1
 8005814:	069b      	lsls	r3, r3, #26
 8005816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_ADC_ConfigChannel+0x636>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	0e9b      	lsrs	r3, r3, #26
 800582c:	3301      	adds	r3, #1
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2101      	movs	r1, #1
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	e017      	b.n	800586a <HAL_ADC_ConfigChannel+0x666>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	fa93 f3a3 	rbit	r3, r3
 8005846:	61fb      	str	r3, [r7, #28]
  return result;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8005852:	2320      	movs	r3, #32
 8005854:	e003      	b.n	800585e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	fab3 f383 	clz	r3, r3
 800585c:	b2db      	uxtb	r3, r3
 800585e:	3301      	adds	r3, #1
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	2101      	movs	r1, #1
 8005866:	fa01 f303 	lsl.w	r3, r1, r3
 800586a:	ea42 0103 	orr.w	r1, r2, r3
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10d      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x692>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	0e9b      	lsrs	r3, r3, #26
 8005880:	3301      	adds	r3, #1
 8005882:	f003 021f 	and.w	r2, r3, #31
 8005886:	4613      	mov	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4413      	add	r3, r2
 800588c:	3b1e      	subs	r3, #30
 800588e:	051b      	lsls	r3, r3, #20
 8005890:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005894:	e01e      	b.n	80058d4 <HAL_ADC_ConfigChannel+0x6d0>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	613b      	str	r3, [r7, #16]
  return result;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80058ae:	2320      	movs	r3, #32
 80058b0:	e006      	b.n	80058c0 <HAL_ADC_ConfigChannel+0x6bc>
 80058b2:	bf00      	nop
 80058b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	fab3 f383 	clz	r3, r3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	3301      	adds	r3, #1
 80058c2:	f003 021f 	and.w	r2, r3, #31
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	3b1e      	subs	r3, #30
 80058ce:	051b      	lsls	r3, r3, #20
 80058d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058d4:	430b      	orrs	r3, r1
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	6892      	ldr	r2, [r2, #8]
 80058da:	4619      	mov	r1, r3
 80058dc:	f7ff fa68 	bl	8004db0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b3d      	ldr	r3, [pc, #244]	; (80059dc <HAL_ADC_ConfigChannel+0x7d8>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d06c      	beq.n	80059c6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058ec:	483c      	ldr	r0, [pc, #240]	; (80059e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80058ee:	f7ff f9bd 	bl	8004c6c <LL_ADC_GetCommonPathInternalCh>
 80058f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a3a      	ldr	r2, [pc, #232]	; (80059e4 <HAL_ADC_ConfigChannel+0x7e0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d127      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005900:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d121      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a35      	ldr	r2, [pc, #212]	; (80059e8 <HAL_ADC_ConfigChannel+0x7e4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d157      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005916:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800591a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800591e:	4619      	mov	r1, r3
 8005920:	482f      	ldr	r0, [pc, #188]	; (80059e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005922:	f7ff f990 	bl	8004c46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005926:	4b31      	ldr	r3, [pc, #196]	; (80059ec <HAL_ADC_ConfigChannel+0x7e8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	099b      	lsrs	r3, r3, #6
 800592c:	4a30      	ldr	r2, [pc, #192]	; (80059f0 <HAL_ADC_ConfigChannel+0x7ec>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	099b      	lsrs	r3, r3, #6
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005940:	e002      	b.n	8005948 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3b01      	subs	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f9      	bne.n	8005942 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800594e:	e03a      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <HAL_ADC_ConfigChannel+0x7f0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d113      	bne.n	8005982 <HAL_ADC_ConfigChannel+0x77e>
 800595a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800595e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10d      	bne.n	8005982 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d12a      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005978:	4619      	mov	r1, r3
 800597a:	4819      	ldr	r0, [pc, #100]	; (80059e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800597c:	f7ff f963 	bl	8004c46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005980:	e021      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_ADC_ConfigChannel+0x7f4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d11c      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800598c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d116      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d111      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059aa:	4619      	mov	r1, r3
 80059ac:	480c      	ldr	r0, [pc, #48]	; (80059e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80059ae:	f7ff f94a 	bl	8004c46 <LL_ADC_SetCommonPathInternalCh>
 80059b2:	e008      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80059ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	37d8      	adds	r7, #216	; 0xd8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	80080000 	.word	0x80080000
 80059e0:	50040300 	.word	0x50040300
 80059e4:	c7520000 	.word	0xc7520000
 80059e8:	50040000 	.word	0x50040000
 80059ec:	200001fc 	.word	0x200001fc
 80059f0:	053e2d63 	.word	0x053e2d63
 80059f4:	cb840000 	.word	0xcb840000
 80059f8:	80000001 	.word	0x80000001

080059fc <LL_ADC_IsEnabled>:
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <LL_ADC_IsEnabled+0x18>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <LL_ADC_IsEnabled+0x1a>
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <LL_ADC_REG_IsConversionOngoing>:
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d101      	bne.n	8005a3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b0a1      	sub	sp, #132	; 0x84
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e089      	b.n	8005b7a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005a72:	2300      	movs	r3, #0
 8005a74:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a42      	ldr	r2, [pc, #264]	; (8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d102      	bne.n	8005a86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005a80:	4b41      	ldr	r3, [pc, #260]	; (8005b88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	e001      	b.n	8005a8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a94:	f043 0220 	orr.w	r2, r3, #32
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e068      	b.n	8005b7a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff ffb9 	bl	8005a22 <LL_ADC_REG_IsConversionOngoing>
 8005ab0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff ffb3 	bl	8005a22 <LL_ADC_REG_IsConversionOngoing>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d14a      	bne.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d147      	bne.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005ac8:	4b30      	ldr	r3, [pc, #192]	; (8005b8c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005aca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d027      	beq.n	8005b24 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ae6:	035b      	lsls	r3, r3, #13
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	431a      	orrs	r2, r3
 8005aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005af0:	4824      	ldr	r0, [pc, #144]	; (8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005af2:	f7ff ff83 	bl	80059fc <LL_ADC_IsEnabled>
 8005af6:	4604      	mov	r4, r0
 8005af8:	4823      	ldr	r0, [pc, #140]	; (8005b88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005afa:	f7ff ff7f 	bl	80059fc <LL_ADC_IsEnabled>
 8005afe:	4603      	mov	r3, r0
 8005b00:	4323      	orrs	r3, r4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d132      	bne.n	8005b6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b0e:	f023 030f 	bic.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	6811      	ldr	r1, [r2, #0]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	6892      	ldr	r2, [r2, #8]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b20:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b22:	e023      	b.n	8005b6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b2e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b30:	4814      	ldr	r0, [pc, #80]	; (8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005b32:	f7ff ff63 	bl	80059fc <LL_ADC_IsEnabled>
 8005b36:	4604      	mov	r4, r0
 8005b38:	4813      	ldr	r0, [pc, #76]	; (8005b88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005b3a:	f7ff ff5f 	bl	80059fc <LL_ADC_IsEnabled>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4323      	orrs	r3, r4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d112      	bne.n	8005b6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b4e:	f023 030f 	bic.w	r3, r3, #15
 8005b52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005b54:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b56:	e009      	b.n	8005b6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5c:	f043 0220 	orr.w	r2, r3, #32
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005b6a:	e000      	b.n	8005b6e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005b76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3784      	adds	r7, #132	; 0x84
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd90      	pop	{r4, r7, pc}
 8005b82:	bf00      	nop
 8005b84:	50040000 	.word	0x50040000
 8005b88:	50040100 	.word	0x50040100
 8005b8c:	50040300 	.word	0x50040300

08005b90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e0ed      	b.n	8005d7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d102      	bne.n	8005bb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fa fcc4 	bl	800053c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bc4:	f7fe fffc 	bl	8004bc0 <HAL_GetTick>
 8005bc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005bca:	e012      	b.n	8005bf2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005bcc:	f7fe fff8 	bl	8004bc0 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b0a      	cmp	r3, #10
 8005bd8:	d90b      	bls.n	8005bf2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2205      	movs	r2, #5
 8005bea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e0c5      	b.n	8005d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0e5      	beq.n	8005bcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0202 	bic.w	r2, r2, #2
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c10:	f7fe ffd6 	bl	8004bc0 <HAL_GetTick>
 8005c14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005c16:	e012      	b.n	8005c3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005c18:	f7fe ffd2 	bl	8004bc0 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b0a      	cmp	r3, #10
 8005c24:	d90b      	bls.n	8005c3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2205      	movs	r2, #5
 8005c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e09f      	b.n	8005d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e5      	bne.n	8005c18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	7e1b      	ldrb	r3, [r3, #24]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d108      	bne.n	8005c66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	e007      	b.n	8005c76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	7e5b      	ldrb	r3, [r3, #25]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d108      	bne.n	8005c90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e007      	b.n	8005ca0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	7e9b      	ldrb	r3, [r3, #26]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d108      	bne.n	8005cba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0220 	orr.w	r2, r2, #32
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	e007      	b.n	8005cca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0220 	bic.w	r2, r2, #32
 8005cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	7edb      	ldrb	r3, [r3, #27]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d108      	bne.n	8005ce4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0210 	bic.w	r2, r2, #16
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e007      	b.n	8005cf4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0210 	orr.w	r2, r2, #16
 8005cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	7f1b      	ldrb	r3, [r3, #28]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d108      	bne.n	8005d0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0208 	orr.w	r2, r2, #8
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e007      	b.n	8005d1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0208 	bic.w	r2, r2, #8
 8005d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7f5b      	ldrb	r3, [r3, #29]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d108      	bne.n	8005d38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0204 	orr.w	r2, r2, #4
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e007      	b.n	8005d48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0204 	bic.w	r2, r2, #4
 8005d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	ea42 0103 	orr.w	r1, r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	1e5a      	subs	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b087      	sub	sp, #28
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d9c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005d9e:	7cfb      	ldrb	r3, [r7, #19]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d003      	beq.n	8005dac <HAL_CAN_ConfigFilter+0x26>
 8005da4:	7cfb      	ldrb	r3, [r7, #19]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	f040 80aa 	bne.w	8005f00 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005db2:	f043 0201 	orr.w	r2, r3, #1
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d123      	bne.n	8005e2e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	43db      	mvns	r3, r3
 8005df0:	401a      	ands	r2, r3
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005e08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	3248      	adds	r2, #72	; 0x48
 8005e0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005e22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005e24:	6979      	ldr	r1, [r7, #20]
 8005e26:	3348      	adds	r3, #72	; 0x48
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	440b      	add	r3, r1
 8005e2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d122      	bne.n	8005e7c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005e56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	3248      	adds	r2, #72	; 0x48
 8005e5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005e70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005e72:	6979      	ldr	r1, [r7, #20]
 8005e74:	3348      	adds	r3, #72	; 0x48
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	440b      	add	r3, r1
 8005e7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d109      	bne.n	8005e98 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	401a      	ands	r2, r3
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005e96:	e007      	b.n	8005ea8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	401a      	ands	r2, r3
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005ec2:	e007      	b.n	8005ed4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d107      	bne.n	8005eec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ef2:	f023 0201 	bic.w	r2, r3, #1
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e006      	b.n	8005f0e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
  }
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d12e      	bne.n	8005f8c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0201 	bic.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f46:	f7fe fe3b 	bl	8004bc0 <HAL_GetTick>
 8005f4a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005f4c:	e012      	b.n	8005f74 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005f4e:	f7fe fe37 	bl	8004bc0 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b0a      	cmp	r3, #10
 8005f5a:	d90b      	bls.n	8005f74 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2205      	movs	r2, #5
 8005f6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e012      	b.n	8005f9a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e5      	bne.n	8005f4e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e006      	b.n	8005f9a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b089      	sub	sp, #36	; 0x24
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005fc0:	7ffb      	ldrb	r3, [r7, #31]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d003      	beq.n	8005fce <HAL_CAN_AddTxMessage+0x2c>
 8005fc6:	7ffb      	ldrb	r3, [r7, #31]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	f040 80b8 	bne.w	800613e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10a      	bne.n	8005fee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d105      	bne.n	8005fee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80a0 	beq.w	800612e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	0e1b      	lsrs	r3, r3, #24
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d907      	bls.n	800600e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e09e      	b.n	800614c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800600e:	2201      	movs	r2, #1
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	409a      	lsls	r2, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10d      	bne.n	800603c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	6809      	ldr	r1, [r1, #0]
 800602e:	431a      	orrs	r2, r3
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	3318      	adds	r3, #24
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	440b      	add	r3, r1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e00f      	b.n	800605c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006046:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800604c:	68f9      	ldr	r1, [r7, #12]
 800604e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006050:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	3318      	adds	r3, #24
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	440b      	add	r3, r1
 800605a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	3318      	adds	r3, #24
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	440b      	add	r3, r1
 800606c:	3304      	adds	r3, #4
 800606e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	7d1b      	ldrb	r3, [r3, #20]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d111      	bne.n	800609c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	3318      	adds	r3, #24
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	4413      	add	r3, r2
 8006084:	3304      	adds	r3, #4
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	6811      	ldr	r1, [r2, #0]
 800608c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3318      	adds	r3, #24
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	440b      	add	r3, r1
 8006098:	3304      	adds	r3, #4
 800609a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3307      	adds	r3, #7
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	061a      	lsls	r2, r3, #24
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3306      	adds	r3, #6
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	041b      	lsls	r3, r3, #16
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3305      	adds	r3, #5
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	4313      	orrs	r3, r2
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	3204      	adds	r2, #4
 80060bc:	7812      	ldrb	r2, [r2, #0]
 80060be:	4610      	mov	r0, r2
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	6811      	ldr	r1, [r2, #0]
 80060c4:	ea43 0200 	orr.w	r2, r3, r0
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	440b      	add	r3, r1
 80060ce:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80060d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3303      	adds	r3, #3
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	061a      	lsls	r2, r3, #24
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3302      	adds	r3, #2
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3301      	adds	r3, #1
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	4313      	orrs	r3, r2
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	7812      	ldrb	r2, [r2, #0]
 80060f4:	4610      	mov	r0, r2
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	6811      	ldr	r1, [r2, #0]
 80060fa:	ea43 0200 	orr.w	r2, r3, r0
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	440b      	add	r3, r1
 8006104:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006108:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	3318      	adds	r3, #24
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	4413      	add	r3, r2
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	6811      	ldr	r1, [r2, #0]
 800611c:	f043 0201 	orr.w	r2, r3, #1
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	3318      	adds	r3, #24
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	440b      	add	r3, r1
 8006128:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	e00e      	b.n	800614c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e006      	b.n	800614c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
  }
}
 800614c:	4618      	mov	r0, r3
 800614e:	3724      	adds	r7, #36	; 0x24
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800616c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800616e:	7dfb      	ldrb	r3, [r7, #23]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d003      	beq.n	800617c <HAL_CAN_GetRxMessage+0x24>
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b02      	cmp	r3, #2
 8006178:	f040 80f3 	bne.w	8006362 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10e      	bne.n	80061a0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d116      	bne.n	80061be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e0e7      	b.n	8006370 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e0d8      	b.n	8006370 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	331b      	adds	r3, #27
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	4413      	add	r3, r2
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0204 	and.w	r2, r3, #4
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10c      	bne.n	80061f6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	331b      	adds	r3, #27
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	4413      	add	r3, r2
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	0d5b      	lsrs	r3, r3, #21
 80061ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e00b      	b.n	800620e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	331b      	adds	r3, #27
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	4413      	add	r3, r2
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	08db      	lsrs	r3, r3, #3
 8006206:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	331b      	adds	r3, #27
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	4413      	add	r3, r2
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0202 	and.w	r2, r3, #2
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	331b      	adds	r3, #27
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	4413      	add	r3, r2
 8006230:	3304      	adds	r3, #4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 020f 	and.w	r2, r3, #15
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	331b      	adds	r3, #27
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	4413      	add	r3, r2
 8006248:	3304      	adds	r3, #4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	0a1b      	lsrs	r3, r3, #8
 800624e:	b2da      	uxtb	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	331b      	adds	r3, #27
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	4413      	add	r3, r2
 8006260:	3304      	adds	r3, #4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	0c1b      	lsrs	r3, r3, #16
 8006266:	b29a      	uxth	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	4413      	add	r3, r2
 8006276:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	4413      	add	r3, r2
 800628c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	0a1a      	lsrs	r2, r3, #8
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	3301      	adds	r3, #1
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	0c1a      	lsrs	r2, r3, #16
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	3302      	adds	r3, #2
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	4413      	add	r3, r2
 80062c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	0e1a      	lsrs	r2, r3, #24
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	3303      	adds	r3, #3
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	4413      	add	r3, r2
 80062da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	3304      	adds	r3, #4
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	0a1a      	lsrs	r2, r3, #8
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	3305      	adds	r3, #5
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	4413      	add	r3, r2
 800630c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	0c1a      	lsrs	r2, r3, #16
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	3306      	adds	r3, #6
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	4413      	add	r3, r2
 8006326:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	0e1a      	lsrs	r2, r3, #24
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	3307      	adds	r3, #7
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d108      	bne.n	800634e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0220 	orr.w	r2, r2, #32
 800634a:	60da      	str	r2, [r3, #12]
 800634c:	e007      	b.n	800635e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0220 	orr.w	r2, r2, #32
 800635c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e006      	b.n	8006370 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
  }
}
 8006370:	4618      	mov	r0, r3
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800638c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d002      	beq.n	800639a <HAL_CAN_ActivateNotification+0x1e>
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d109      	bne.n	80063ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6959      	ldr	r1, [r3, #20]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e006      	b.n	80063bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
  }
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80063d0:	2300      	movs	r3, #0
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d07c      	beq.n	8006508 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d023      	beq.n	8006460 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2201      	movs	r2, #1
 800641e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f983 	bl	8006736 <HAL_CAN_TxMailbox0CompleteCallback>
 8006430:	e016      	b.n	8006460 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
 8006444:	e00c      	b.n	8006460 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
 8006458:	e002      	b.n	8006460 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f989 	bl	8006772 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006466:	2b00      	cmp	r3, #0
 8006468:	d024      	beq.n	80064b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006472:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f963 	bl	800674a <HAL_CAN_TxMailbox1CompleteCallback>
 8006484:	e016      	b.n	80064b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
 8006498:	e00c      	b.n	80064b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
 80064ac:	e002      	b.n	80064b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f969 	bl	8006786 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d024      	beq.n	8006508 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80064c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f943 	bl	800675e <HAL_CAN_TxMailbox2CompleteCallback>
 80064d8:	e016      	b.n	8006508 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
 80064ec:	e00c      	b.n	8006508 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006500:	e002      	b.n	8006508 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f949 	bl	800679a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00c      	beq.n	800652c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	d007      	beq.n	800652c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006522:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2210      	movs	r2, #16
 800652a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d006      	beq.n	800654e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2208      	movs	r2, #8
 8006546:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f930 	bl	80067ae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fc f9de 	bl	8002928 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00c      	beq.n	8006590 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f003 0310 	and.w	r3, r3, #16
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006586:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2210      	movs	r2, #16
 800658e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00b      	beq.n	80065b2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d006      	beq.n	80065b2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2208      	movs	r2, #8
 80065aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f912 	bl	80067d6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8f9 	bl	80067c2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d006      	beq.n	80065f2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2210      	movs	r2, #16
 80065ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f8fc 	bl	80067ea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d006      	beq.n	8006614 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2208      	movs	r2, #8
 800660c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f8f5 	bl	80067fe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d07b      	beq.n	8006716 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d072      	beq.n	800670e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662e:	2b00      	cmp	r3, #0
 8006630:	d008      	beq.n	8006644 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	f043 0302 	orr.w	r3, r3, #2
 800665e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	f043 0304 	orr.w	r3, r3, #4
 800667a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006682:	2b00      	cmp	r3, #0
 8006684:	d043      	beq.n	800670e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800668c:	2b00      	cmp	r3, #0
 800668e:	d03e      	beq.n	800670e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006696:	2b60      	cmp	r3, #96	; 0x60
 8006698:	d02b      	beq.n	80066f2 <HAL_CAN_IRQHandler+0x32a>
 800669a:	2b60      	cmp	r3, #96	; 0x60
 800669c:	d82e      	bhi.n	80066fc <HAL_CAN_IRQHandler+0x334>
 800669e:	2b50      	cmp	r3, #80	; 0x50
 80066a0:	d022      	beq.n	80066e8 <HAL_CAN_IRQHandler+0x320>
 80066a2:	2b50      	cmp	r3, #80	; 0x50
 80066a4:	d82a      	bhi.n	80066fc <HAL_CAN_IRQHandler+0x334>
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d019      	beq.n	80066de <HAL_CAN_IRQHandler+0x316>
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d826      	bhi.n	80066fc <HAL_CAN_IRQHandler+0x334>
 80066ae:	2b30      	cmp	r3, #48	; 0x30
 80066b0:	d010      	beq.n	80066d4 <HAL_CAN_IRQHandler+0x30c>
 80066b2:	2b30      	cmp	r3, #48	; 0x30
 80066b4:	d822      	bhi.n	80066fc <HAL_CAN_IRQHandler+0x334>
 80066b6:	2b10      	cmp	r3, #16
 80066b8:	d002      	beq.n	80066c0 <HAL_CAN_IRQHandler+0x2f8>
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d005      	beq.n	80066ca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80066be:	e01d      	b.n	80066fc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	f043 0308 	orr.w	r3, r3, #8
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80066c8:	e019      	b.n	80066fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	f043 0310 	orr.w	r3, r3, #16
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80066d2:	e014      	b.n	80066fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	f043 0320 	orr.w	r3, r3, #32
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80066dc:	e00f      	b.n	80066fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80066e6:	e00a      	b.n	80066fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80066f0:	e005      	b.n	80066fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80066fa:	e000      	b.n	80066fe <HAL_CAN_IRQHandler+0x336>
            break;
 80066fc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699a      	ldr	r2, [r3, #24]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800670c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2204      	movs	r2, #4
 8006714:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	2b00      	cmp	r3, #0
 800671a:	d008      	beq.n	800672e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f872 	bl	8006812 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800672e:	bf00      	nop
 8006730:	3728      	adds	r7, #40	; 0x28
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
	...

08006828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <__NVIC_SetPriorityGrouping+0x44>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006844:	4013      	ands	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800685a:	4a04      	ldr	r2, [pc, #16]	; (800686c <__NVIC_SetPriorityGrouping+0x44>)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	60d3      	str	r3, [r2, #12]
}
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	e000ed00 	.word	0xe000ed00

08006870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006874:	4b04      	ldr	r3, [pc, #16]	; (8006888 <__NVIC_GetPriorityGrouping+0x18>)
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	0a1b      	lsrs	r3, r3, #8
 800687a:	f003 0307 	and.w	r3, r3, #7
}
 800687e:	4618      	mov	r0, r3
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	e000ed00 	.word	0xe000ed00

0800688c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689a:	2b00      	cmp	r3, #0
 800689c:	db0b      	blt.n	80068b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	f003 021f 	and.w	r2, r3, #31
 80068a4:	4907      	ldr	r1, [pc, #28]	; (80068c4 <__NVIC_EnableIRQ+0x38>)
 80068a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	2001      	movs	r0, #1
 80068ae:	fa00 f202 	lsl.w	r2, r0, r2
 80068b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	e000e100 	.word	0xe000e100

080068c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	6039      	str	r1, [r7, #0]
 80068d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	db0a      	blt.n	80068f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	490c      	ldr	r1, [pc, #48]	; (8006914 <__NVIC_SetPriority+0x4c>)
 80068e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068e6:	0112      	lsls	r2, r2, #4
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	440b      	add	r3, r1
 80068ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068f0:	e00a      	b.n	8006908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	4908      	ldr	r1, [pc, #32]	; (8006918 <__NVIC_SetPriority+0x50>)
 80068f8:	79fb      	ldrb	r3, [r7, #7]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	3b04      	subs	r3, #4
 8006900:	0112      	lsls	r2, r2, #4
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	440b      	add	r3, r1
 8006906:	761a      	strb	r2, [r3, #24]
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	e000e100 	.word	0xe000e100
 8006918:	e000ed00 	.word	0xe000ed00

0800691c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800691c:	b480      	push	{r7}
 800691e:	b089      	sub	sp, #36	; 0x24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f1c3 0307 	rsb	r3, r3, #7
 8006936:	2b04      	cmp	r3, #4
 8006938:	bf28      	it	cs
 800693a:	2304      	movcs	r3, #4
 800693c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	3304      	adds	r3, #4
 8006942:	2b06      	cmp	r3, #6
 8006944:	d902      	bls.n	800694c <NVIC_EncodePriority+0x30>
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	3b03      	subs	r3, #3
 800694a:	e000      	b.n	800694e <NVIC_EncodePriority+0x32>
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006950:	f04f 32ff 	mov.w	r2, #4294967295
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	43da      	mvns	r2, r3
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	401a      	ands	r2, r3
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006964:	f04f 31ff 	mov.w	r1, #4294967295
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	fa01 f303 	lsl.w	r3, r1, r3
 800696e:	43d9      	mvns	r1, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006974:	4313      	orrs	r3, r2
         );
}
 8006976:	4618      	mov	r0, r3
 8006978:	3724      	adds	r7, #36	; 0x24
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3b01      	subs	r3, #1
 8006990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006994:	d301      	bcc.n	800699a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006996:	2301      	movs	r3, #1
 8006998:	e00f      	b.n	80069ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800699a:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <SysTick_Config+0x40>)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3b01      	subs	r3, #1
 80069a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069a2:	210f      	movs	r1, #15
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295
 80069a8:	f7ff ff8e 	bl	80068c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <SysTick_Config+0x40>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069b2:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <SysTick_Config+0x40>)
 80069b4:	2207      	movs	r2, #7
 80069b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	e000e010 	.word	0xe000e010

080069c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff ff29 	bl	8006828 <__NVIC_SetPriorityGrouping>
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b086      	sub	sp, #24
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	4603      	mov	r3, r0
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80069f0:	f7ff ff3e 	bl	8006870 <__NVIC_GetPriorityGrouping>
 80069f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	6978      	ldr	r0, [r7, #20]
 80069fc:	f7ff ff8e 	bl	800691c <NVIC_EncodePriority>
 8006a00:	4602      	mov	r2, r0
 8006a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff ff5d 	bl	80068c8 <__NVIC_SetPriority>
}
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7ff ff31 	bl	800688c <__NVIC_EnableIRQ>
}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff ffa2 	bl	8006984 <SysTick_Config>
 8006a40:	4603      	mov	r3, r0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a5a:	e166      	b.n	8006d2a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	2101      	movs	r1, #1
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	fa01 f303 	lsl.w	r3, r1, r3
 8006a68:	4013      	ands	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 8158 	beq.w	8006d24 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d005      	beq.n	8006a8c <HAL_GPIO_Init+0x40>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d130      	bne.n	8006aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	2203      	movs	r2, #3
 8006a98:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	43db      	mvns	r3, r3
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	091b      	lsrs	r3, r3, #4
 8006ad8:	f003 0201 	and.w	r2, r3, #1
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d017      	beq.n	8006b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	2203      	movs	r2, #3
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d123      	bne.n	8006b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	08da      	lsrs	r2, r3, #3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3208      	adds	r2, #8
 8006b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	220f      	movs	r2, #15
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	43db      	mvns	r3, r3
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4013      	ands	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	08da      	lsrs	r2, r3, #3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3208      	adds	r2, #8
 8006b78:	6939      	ldr	r1, [r7, #16]
 8006b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	2203      	movs	r2, #3
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4013      	ands	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f003 0203 	and.w	r2, r3, #3
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80b2 	beq.w	8006d24 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bc0:	4b61      	ldr	r3, [pc, #388]	; (8006d48 <HAL_GPIO_Init+0x2fc>)
 8006bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc4:	4a60      	ldr	r2, [pc, #384]	; (8006d48 <HAL_GPIO_Init+0x2fc>)
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	6613      	str	r3, [r2, #96]	; 0x60
 8006bcc:	4b5e      	ldr	r3, [pc, #376]	; (8006d48 <HAL_GPIO_Init+0x2fc>)
 8006bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006bd8:	4a5c      	ldr	r2, [pc, #368]	; (8006d4c <HAL_GPIO_Init+0x300>)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	089b      	lsrs	r3, r3, #2
 8006bde:	3302      	adds	r3, #2
 8006be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f003 0303 	and.w	r3, r3, #3
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	220f      	movs	r2, #15
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006c02:	d02b      	beq.n	8006c5c <HAL_GPIO_Init+0x210>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a52      	ldr	r2, [pc, #328]	; (8006d50 <HAL_GPIO_Init+0x304>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d025      	beq.n	8006c58 <HAL_GPIO_Init+0x20c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a51      	ldr	r2, [pc, #324]	; (8006d54 <HAL_GPIO_Init+0x308>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d01f      	beq.n	8006c54 <HAL_GPIO_Init+0x208>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a50      	ldr	r2, [pc, #320]	; (8006d58 <HAL_GPIO_Init+0x30c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d019      	beq.n	8006c50 <HAL_GPIO_Init+0x204>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a4f      	ldr	r2, [pc, #316]	; (8006d5c <HAL_GPIO_Init+0x310>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d013      	beq.n	8006c4c <HAL_GPIO_Init+0x200>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a4e      	ldr	r2, [pc, #312]	; (8006d60 <HAL_GPIO_Init+0x314>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00d      	beq.n	8006c48 <HAL_GPIO_Init+0x1fc>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a4d      	ldr	r2, [pc, #308]	; (8006d64 <HAL_GPIO_Init+0x318>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d007      	beq.n	8006c44 <HAL_GPIO_Init+0x1f8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a4c      	ldr	r2, [pc, #304]	; (8006d68 <HAL_GPIO_Init+0x31c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d101      	bne.n	8006c40 <HAL_GPIO_Init+0x1f4>
 8006c3c:	2307      	movs	r3, #7
 8006c3e:	e00e      	b.n	8006c5e <HAL_GPIO_Init+0x212>
 8006c40:	2308      	movs	r3, #8
 8006c42:	e00c      	b.n	8006c5e <HAL_GPIO_Init+0x212>
 8006c44:	2306      	movs	r3, #6
 8006c46:	e00a      	b.n	8006c5e <HAL_GPIO_Init+0x212>
 8006c48:	2305      	movs	r3, #5
 8006c4a:	e008      	b.n	8006c5e <HAL_GPIO_Init+0x212>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	e006      	b.n	8006c5e <HAL_GPIO_Init+0x212>
 8006c50:	2303      	movs	r3, #3
 8006c52:	e004      	b.n	8006c5e <HAL_GPIO_Init+0x212>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e002      	b.n	8006c5e <HAL_GPIO_Init+0x212>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <HAL_GPIO_Init+0x212>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	f002 0203 	and.w	r2, r2, #3
 8006c64:	0092      	lsls	r2, r2, #2
 8006c66:	4093      	lsls	r3, r2
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006c6e:	4937      	ldr	r1, [pc, #220]	; (8006d4c <HAL_GPIO_Init+0x300>)
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	089b      	lsrs	r3, r3, #2
 8006c74:	3302      	adds	r3, #2
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c7c:	4b3b      	ldr	r3, [pc, #236]	; (8006d6c <HAL_GPIO_Init+0x320>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	43db      	mvns	r3, r3
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ca0:	4a32      	ldr	r2, [pc, #200]	; (8006d6c <HAL_GPIO_Init+0x320>)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006ca6:	4b31      	ldr	r3, [pc, #196]	; (8006d6c <HAL_GPIO_Init+0x320>)
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	43db      	mvns	r3, r3
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006cca:	4a28      	ldr	r2, [pc, #160]	; (8006d6c <HAL_GPIO_Init+0x320>)
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006cd0:	4b26      	ldr	r3, [pc, #152]	; (8006d6c <HAL_GPIO_Init+0x320>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006cf4:	4a1d      	ldr	r2, [pc, #116]	; (8006d6c <HAL_GPIO_Init+0x320>)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006cfa:	4b1c      	ldr	r3, [pc, #112]	; (8006d6c <HAL_GPIO_Init+0x320>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	43db      	mvns	r3, r3
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4013      	ands	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d1e:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <HAL_GPIO_Init+0x320>)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	3301      	adds	r3, #1
 8006d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	fa22 f303 	lsr.w	r3, r2, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f47f ae91 	bne.w	8006a5c <HAL_GPIO_Init+0x10>
  }
}
 8006d3a:	bf00      	nop
 8006d3c:	bf00      	nop
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	48000400 	.word	0x48000400
 8006d54:	48000800 	.word	0x48000800
 8006d58:	48000c00 	.word	0x48000c00
 8006d5c:	48001000 	.word	0x48001000
 8006d60:	48001400 	.word	0x48001400
 8006d64:	48001800 	.word	0x48001800
 8006d68:	48001c00 	.word	0x48001c00
 8006d6c:	40010400 	.word	0x40010400

08006d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	887b      	ldrh	r3, [r7, #2]
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
 8006d8c:	e001      	b.n	8006d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	807b      	strh	r3, [r7, #2]
 8006dac:	4613      	mov	r3, r2
 8006dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006db0:	787b      	ldrb	r3, [r7, #1]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006db6:	887a      	ldrh	r2, [r7, #2]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006dbc:	e002      	b.n	8006dc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006dbe:	887a      	ldrh	r2, [r7, #2]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006dd4:	4b0d      	ldr	r3, [pc, #52]	; (8006e0c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de0:	d102      	bne.n	8006de8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006de6:	e00b      	b.n	8006e00 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006de8:	4b08      	ldr	r3, [pc, #32]	; (8006e0c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df6:	d102      	bne.n	8006dfe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dfc:	e000      	b.n	8006e00 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006dfe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40007000 	.word	0x40007000

08006e10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d141      	bne.n	8006ea2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e1e:	4b4b      	ldr	r3, [pc, #300]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2a:	d131      	bne.n	8006e90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e2c:	4b47      	ldr	r3, [pc, #284]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e32:	4a46      	ldr	r2, [pc, #280]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e3c:	4b43      	ldr	r3, [pc, #268]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e44:	4a41      	ldr	r2, [pc, #260]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006e4c:	4b40      	ldr	r3, [pc, #256]	; (8006f50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2232      	movs	r2, #50	; 0x32
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	4a3f      	ldr	r2, [pc, #252]	; (8006f54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e58:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5c:	0c9b      	lsrs	r3, r3, #18
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e62:	e002      	b.n	8006e6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e6a:	4b38      	ldr	r3, [pc, #224]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e76:	d102      	bne.n	8006e7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f2      	bne.n	8006e64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e7e:	4b33      	ldr	r3, [pc, #204]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8a:	d158      	bne.n	8006f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e057      	b.n	8006f40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e90:	4b2e      	ldr	r3, [pc, #184]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e96:	4a2d      	ldr	r2, [pc, #180]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ea0:	e04d      	b.n	8006f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea8:	d141      	bne.n	8006f2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006eaa:	4b28      	ldr	r3, [pc, #160]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb6:	d131      	bne.n	8006f1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006eb8:	4b24      	ldr	r3, [pc, #144]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ebe:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ec8:	4b20      	ldr	r3, [pc, #128]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ed0:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ed6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006ed8:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2232      	movs	r2, #50	; 0x32
 8006ede:	fb02 f303 	mul.w	r3, r2, r3
 8006ee2:	4a1c      	ldr	r2, [pc, #112]	; (8006f54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee8:	0c9b      	lsrs	r3, r3, #18
 8006eea:	3301      	adds	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eee:	e002      	b.n	8006ef6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ef6:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f02:	d102      	bne.n	8006f0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f2      	bne.n	8006ef0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f0a:	4b10      	ldr	r3, [pc, #64]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f16:	d112      	bne.n	8006f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e011      	b.n	8006f40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f22:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f2c:	e007      	b.n	8006f3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f36:	4a05      	ldr	r2, [pc, #20]	; (8006f4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f3c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	40007000 	.word	0x40007000
 8006f50:	200001fc 	.word	0x200001fc
 8006f54:	431bde83 	.word	0x431bde83

08006f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08a      	sub	sp, #40	; 0x28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	f000 bc76 	b.w	8007858 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f6c:	4b97      	ldr	r3, [pc, #604]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f003 030c 	and.w	r3, r3, #12
 8006f74:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f76:	4b95      	ldr	r3, [pc, #596]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80e6 	beq.w	800715a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x4c>
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	2b0c      	cmp	r3, #12
 8006f98:	f040 808d 	bne.w	80070b6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	f040 8089 	bne.w	80070b6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fa4:	4b89      	ldr	r3, [pc, #548]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d006      	beq.n	8006fbe <HAL_RCC_OscConfig+0x66>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d102      	bne.n	8006fbe <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f000 bc4d 	b.w	8007858 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fc2:	4b82      	ldr	r3, [pc, #520]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x80>
 8006fce:	4b7f      	ldr	r3, [pc, #508]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fd6:	e005      	b.n	8006fe4 <HAL_RCC_OscConfig+0x8c>
 8006fd8:	4b7c      	ldr	r3, [pc, #496]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8006fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fde:	091b      	lsrs	r3, r3, #4
 8006fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d224      	bcs.n	8007032 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fdf3 	bl	8007bd8 <RCC_SetFlashLatencyFromMSIRange>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f000 bc2d 	b.w	8007858 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ffe:	4b73      	ldr	r3, [pc, #460]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a72      	ldr	r2, [pc, #456]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007004:	f043 0308 	orr.w	r3, r3, #8
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	4b70      	ldr	r3, [pc, #448]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	496d      	ldr	r1, [pc, #436]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007018:	4313      	orrs	r3, r2
 800701a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800701c:	4b6b      	ldr	r3, [pc, #428]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	4968      	ldr	r1, [pc, #416]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 800702c:	4313      	orrs	r3, r2
 800702e:	604b      	str	r3, [r1, #4]
 8007030:	e025      	b.n	800707e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007032:	4b66      	ldr	r3, [pc, #408]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a65      	ldr	r2, [pc, #404]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007038:	f043 0308 	orr.w	r3, r3, #8
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	4b63      	ldr	r3, [pc, #396]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	4960      	ldr	r1, [pc, #384]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 800704c:	4313      	orrs	r3, r2
 800704e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007050:	4b5e      	ldr	r3, [pc, #376]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	495b      	ldr	r1, [pc, #364]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007060:	4313      	orrs	r3, r2
 8007062:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d109      	bne.n	800707e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fdb2 	bl	8007bd8 <RCC_SetFlashLatencyFromMSIRange>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e3ec      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800707e:	f000 fd1f 	bl	8007ac0 <HAL_RCC_GetSysClockFreq>
 8007082:	4602      	mov	r2, r0
 8007084:	4b51      	ldr	r3, [pc, #324]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	091b      	lsrs	r3, r3, #4
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	4950      	ldr	r1, [pc, #320]	; (80071d0 <HAL_RCC_OscConfig+0x278>)
 8007090:	5ccb      	ldrb	r3, [r1, r3]
 8007092:	f003 031f 	and.w	r3, r3, #31
 8007096:	fa22 f303 	lsr.w	r3, r2, r3
 800709a:	4a4e      	ldr	r2, [pc, #312]	; (80071d4 <HAL_RCC_OscConfig+0x27c>)
 800709c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800709e:	4b4e      	ldr	r3, [pc, #312]	; (80071d8 <HAL_RCC_OscConfig+0x280>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fd fd3c 	bl	8004b20 <HAL_InitTick>
 80070a8:	4603      	mov	r3, r0
 80070aa:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d052      	beq.n	8007158 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	e3d0      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d032      	beq.n	8007124 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80070be:	4b43      	ldr	r3, [pc, #268]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a42      	ldr	r2, [pc, #264]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070ca:	f7fd fd79 	bl	8004bc0 <HAL_GetTick>
 80070ce:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070d0:	e008      	b.n	80070e4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070d2:	f7fd fd75 	bl	8004bc0 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e3b9      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070e4:	4b39      	ldr	r3, [pc, #228]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0302 	and.w	r3, r3, #2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f0      	beq.n	80070d2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070f0:	4b36      	ldr	r3, [pc, #216]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a35      	ldr	r2, [pc, #212]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80070f6:	f043 0308 	orr.w	r3, r3, #8
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	4b33      	ldr	r3, [pc, #204]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	4930      	ldr	r1, [pc, #192]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 800710a:	4313      	orrs	r3, r2
 800710c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800710e:	4b2f      	ldr	r3, [pc, #188]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	021b      	lsls	r3, r3, #8
 800711c:	492b      	ldr	r1, [pc, #172]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 800711e:	4313      	orrs	r3, r2
 8007120:	604b      	str	r3, [r1, #4]
 8007122:	e01a      	b.n	800715a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007124:	4b29      	ldr	r3, [pc, #164]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a28      	ldr	r2, [pc, #160]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 800712a:	f023 0301 	bic.w	r3, r3, #1
 800712e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007130:	f7fd fd46 	bl	8004bc0 <HAL_GetTick>
 8007134:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007138:	f7fd fd42 	bl	8004bc0 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e386      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800714a:	4b20      	ldr	r3, [pc, #128]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x1e0>
 8007156:	e000      	b.n	800715a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007158:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d073      	beq.n	800724e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d005      	beq.n	8007178 <HAL_RCC_OscConfig+0x220>
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	2b0c      	cmp	r3, #12
 8007170:	d10e      	bne.n	8007190 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b03      	cmp	r3, #3
 8007176:	d10b      	bne.n	8007190 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007178:	4b14      	ldr	r3, [pc, #80]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d063      	beq.n	800724c <HAL_RCC_OscConfig+0x2f4>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d15f      	bne.n	800724c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e363      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007198:	d106      	bne.n	80071a8 <HAL_RCC_OscConfig+0x250>
 800719a:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80071a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	e025      	b.n	80071f4 <HAL_RCC_OscConfig+0x29c>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071b0:	d114      	bne.n	80071dc <HAL_RCC_OscConfig+0x284>
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a05      	ldr	r2, [pc, #20]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80071b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	4b03      	ldr	r3, [pc, #12]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a02      	ldr	r2, [pc, #8]	; (80071cc <HAL_RCC_OscConfig+0x274>)
 80071c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e013      	b.n	80071f4 <HAL_RCC_OscConfig+0x29c>
 80071cc:	40021000 	.word	0x40021000
 80071d0:	08009ccc 	.word	0x08009ccc
 80071d4:	200001fc 	.word	0x200001fc
 80071d8:	20000200 	.word	0x20000200
 80071dc:	4b8f      	ldr	r3, [pc, #572]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a8e      	ldr	r2, [pc, #568]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80071e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	4b8c      	ldr	r3, [pc, #560]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a8b      	ldr	r2, [pc, #556]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80071ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d013      	beq.n	8007224 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fc:	f7fd fce0 	bl	8004bc0 <HAL_GetTick>
 8007200:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007204:	f7fd fcdc 	bl	8004bc0 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b64      	cmp	r3, #100	; 0x64
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e320      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007216:	4b81      	ldr	r3, [pc, #516]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCC_OscConfig+0x2ac>
 8007222:	e014      	b.n	800724e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007224:	f7fd fccc 	bl	8004bc0 <HAL_GetTick>
 8007228:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800722a:	e008      	b.n	800723e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800722c:	f7fd fcc8 	bl	8004bc0 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b64      	cmp	r3, #100	; 0x64
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e30c      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800723e:	4b77      	ldr	r3, [pc, #476]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1f0      	bne.n	800722c <HAL_RCC_OscConfig+0x2d4>
 800724a:	e000      	b.n	800724e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800724c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d060      	beq.n	800731c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	2b04      	cmp	r3, #4
 800725e:	d005      	beq.n	800726c <HAL_RCC_OscConfig+0x314>
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	2b0c      	cmp	r3, #12
 8007264:	d119      	bne.n	800729a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d116      	bne.n	800729a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800726c:	4b6b      	ldr	r3, [pc, #428]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <HAL_RCC_OscConfig+0x32c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e2e9      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007284:	4b65      	ldr	r3, [pc, #404]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	061b      	lsls	r3, r3, #24
 8007292:	4962      	ldr	r1, [pc, #392]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 8007294:	4313      	orrs	r3, r2
 8007296:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007298:	e040      	b.n	800731c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d023      	beq.n	80072ea <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072a2:	4b5e      	ldr	r3, [pc, #376]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a5d      	ldr	r2, [pc, #372]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80072a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ae:	f7fd fc87 	bl	8004bc0 <HAL_GetTick>
 80072b2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072b4:	e008      	b.n	80072c8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072b6:	f7fd fc83 	bl	8004bc0 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e2c7      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072c8:	4b54      	ldr	r3, [pc, #336]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0f0      	beq.n	80072b6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d4:	4b51      	ldr	r3, [pc, #324]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	061b      	lsls	r3, r3, #24
 80072e2:	494e      	ldr	r1, [pc, #312]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	604b      	str	r3, [r1, #4]
 80072e8:	e018      	b.n	800731c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072ea:	4b4c      	ldr	r3, [pc, #304]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a4b      	ldr	r2, [pc, #300]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80072f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f6:	f7fd fc63 	bl	8004bc0 <HAL_GetTick>
 80072fa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072fc:	e008      	b.n	8007310 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072fe:	f7fd fc5f 	bl	8004bc0 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e2a3      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007310:	4b42      	ldr	r3, [pc, #264]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f0      	bne.n	80072fe <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 8082 	beq.w	800742e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d05f      	beq.n	80073f2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8007332:	4b3a      	ldr	r3, [pc, #232]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 8007334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007338:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699a      	ldr	r2, [r3, #24]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	429a      	cmp	r2, r3
 8007346:	d037      	beq.n	80073b8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d006      	beq.n	8007360 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e27b      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01b      	beq.n	80073a2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800736a:	4b2c      	ldr	r3, [pc, #176]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 800736c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007370:	4a2a      	ldr	r2, [pc, #168]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800737a:	f7fd fc21 	bl	8004bc0 <HAL_GetTick>
 800737e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007382:	f7fd fc1d 	bl	8004bc0 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b11      	cmp	r3, #17
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e261      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007394:	4b21      	ldr	r3, [pc, #132]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 8007396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1ef      	bne.n	8007382 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80073a2:	4b1e      	ldr	r3, [pc, #120]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80073a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073a8:	f023 0210 	bic.w	r2, r3, #16
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	491a      	ldr	r1, [pc, #104]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073b8:	4b18      	ldr	r3, [pc, #96]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80073ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073be:	4a17      	ldr	r2, [pc, #92]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c8:	f7fd fbfa 	bl	8004bc0 <HAL_GetTick>
 80073cc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073d0:	f7fd fbf6 	bl	8004bc0 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b11      	cmp	r3, #17
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e23a      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073e2:	4b0e      	ldr	r3, [pc, #56]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80073e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0ef      	beq.n	80073d0 <HAL_RCC_OscConfig+0x478>
 80073f0:	e01d      	b.n	800742e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073f2:	4b0a      	ldr	r3, [pc, #40]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80073f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073f8:	4a08      	ldr	r2, [pc, #32]	; (800741c <HAL_RCC_OscConfig+0x4c4>)
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007402:	f7fd fbdd 	bl	8004bc0 <HAL_GetTick>
 8007406:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007408:	e00a      	b.n	8007420 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800740a:	f7fd fbd9 	bl	8004bc0 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b11      	cmp	r3, #17
 8007416:	d903      	bls.n	8007420 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e21d      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
 800741c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007420:	4b83      	ldr	r3, [pc, #524]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1ed      	bne.n	800740a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 80bd 	beq.w	80075b6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800743c:	2300      	movs	r3, #0
 800743e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007442:	4b7b      	ldr	r3, [pc, #492]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10e      	bne.n	800746c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800744e:	4b78      	ldr	r3, [pc, #480]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	4a77      	ldr	r2, [pc, #476]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007458:	6593      	str	r3, [r2, #88]	; 0x58
 800745a:	4b75      	ldr	r3, [pc, #468]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 800745c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007466:	2301      	movs	r3, #1
 8007468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800746c:	4b71      	ldr	r3, [pc, #452]	; (8007634 <HAL_RCC_OscConfig+0x6dc>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007474:	2b00      	cmp	r3, #0
 8007476:	d118      	bne.n	80074aa <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007478:	4b6e      	ldr	r3, [pc, #440]	; (8007634 <HAL_RCC_OscConfig+0x6dc>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a6d      	ldr	r2, [pc, #436]	; (8007634 <HAL_RCC_OscConfig+0x6dc>)
 800747e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007482:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007484:	f7fd fb9c 	bl	8004bc0 <HAL_GetTick>
 8007488:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800748a:	e008      	b.n	800749e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800748c:	f7fd fb98 	bl	8004bc0 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e1dc      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800749e:	4b65      	ldr	r3, [pc, #404]	; (8007634 <HAL_RCC_OscConfig+0x6dc>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0f0      	beq.n	800748c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d02c      	beq.n	8007510 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80074b6:	4b5e      	ldr	r3, [pc, #376]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c8:	4959      	ldr	r1, [pc, #356]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d010      	beq.n	80074fe <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80074dc:	4b54      	ldr	r3, [pc, #336]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e2:	4a53      	ldr	r2, [pc, #332]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80074e4:	f043 0304 	orr.w	r3, r3, #4
 80074e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80074ec:	4b50      	ldr	r3, [pc, #320]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80074ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f2:	4a4f      	ldr	r2, [pc, #316]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074fc:	e018      	b.n	8007530 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80074fe:	4b4c      	ldr	r3, [pc, #304]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007504:	4a4a      	ldr	r2, [pc, #296]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800750e:	e00f      	b.n	8007530 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007510:	4b47      	ldr	r3, [pc, #284]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007516:	4a46      	ldr	r2, [pc, #280]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007518:	f023 0301 	bic.w	r3, r3, #1
 800751c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007520:	4b43      	ldr	r3, [pc, #268]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007526:	4a42      	ldr	r2, [pc, #264]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007528:	f023 0304 	bic.w	r3, r3, #4
 800752c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d016      	beq.n	8007566 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007538:	f7fd fb42 	bl	8004bc0 <HAL_GetTick>
 800753c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800753e:	e00a      	b.n	8007556 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007540:	f7fd fb3e 	bl	8004bc0 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f241 3288 	movw	r2, #5000	; 0x1388
 800754e:	4293      	cmp	r3, r2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e180      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007556:	4b36      	ldr	r3, [pc, #216]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0ed      	beq.n	8007540 <HAL_RCC_OscConfig+0x5e8>
 8007564:	e01d      	b.n	80075a2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007566:	f7fd fb2b 	bl	8004bc0 <HAL_GetTick>
 800756a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800756c:	e00a      	b.n	8007584 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800756e:	f7fd fb27 	bl	8004bc0 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	f241 3288 	movw	r2, #5000	; 0x1388
 800757c:	4293      	cmp	r3, r2
 800757e:	d901      	bls.n	8007584 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e169      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007584:	4b2a      	ldr	r3, [pc, #168]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1ed      	bne.n	800756e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8007592:	4b27      	ldr	r3, [pc, #156]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007598:	4a25      	ldr	r2, [pc, #148]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 800759a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800759e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d105      	bne.n	80075b6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075aa:	4b21      	ldr	r3, [pc, #132]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80075ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ae:	4a20      	ldr	r2, [pc, #128]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80075b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d041      	beq.n	8007646 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01c      	beq.n	8007604 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075ca:	4b19      	ldr	r3, [pc, #100]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80075cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075d0:	4a17      	ldr	r2, [pc, #92]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80075d2:	f043 0301 	orr.w	r3, r3, #1
 80075d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075da:	f7fd faf1 	bl	8004bc0 <HAL_GetTick>
 80075de:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075e2:	f7fd faed 	bl	8004bc0 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e131      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075f4:	4b0e      	ldr	r3, [pc, #56]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 80075f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0ef      	beq.n	80075e2 <HAL_RCC_OscConfig+0x68a>
 8007602:	e020      	b.n	8007646 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007604:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 8007606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800760a:	4a09      	ldr	r2, [pc, #36]	; (8007630 <HAL_RCC_OscConfig+0x6d8>)
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007614:	f7fd fad4 	bl	8004bc0 <HAL_GetTick>
 8007618:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800761a:	e00d      	b.n	8007638 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800761c:	f7fd fad0 	bl	8004bc0 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d906      	bls.n	8007638 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e114      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
 800762e:	bf00      	nop
 8007630:	40021000 	.word	0x40021000
 8007634:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007638:	4b89      	ldr	r3, [pc, #548]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 800763a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1ea      	bne.n	800761c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 8103 	beq.w	8007856 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	2b02      	cmp	r3, #2
 8007656:	f040 80cb 	bne.w	80077f0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800765a:	4b81      	ldr	r3, [pc, #516]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f003 0203 	and.w	r2, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	429a      	cmp	r2, r3
 800766c:	d12c      	bne.n	80076c8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007678:	3b01      	subs	r3, #1
 800767a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800767c:	429a      	cmp	r2, r3
 800767e:	d123      	bne.n	80076c8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800768c:	429a      	cmp	r2, r3
 800768e:	d11b      	bne.n	80076c8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800769c:	429a      	cmp	r2, r3
 800769e:	d113      	bne.n	80076c8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	085b      	lsrs	r3, r3, #1
 80076ac:	3b01      	subs	r3, #1
 80076ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d109      	bne.n	80076c8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	3b01      	subs	r3, #1
 80076c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d06d      	beq.n	80077a4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	2b0c      	cmp	r3, #12
 80076cc:	d068      	beq.n	80077a0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80076ce:	4b64      	ldr	r3, [pc, #400]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80076da:	4b61      	ldr	r3, [pc, #388]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e0b6      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80076ea:	4b5d      	ldr	r3, [pc, #372]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a5c      	ldr	r2, [pc, #368]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80076f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80076f6:	f7fd fa63 	bl	8004bc0 <HAL_GetTick>
 80076fa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076fc:	e008      	b.n	8007710 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076fe:	f7fd fa5f 	bl	8004bc0 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d901      	bls.n	8007710 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e0a3      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007710:	4b53      	ldr	r3, [pc, #332]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f0      	bne.n	80076fe <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800771c:	4b50      	ldr	r3, [pc, #320]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	4b50      	ldr	r3, [pc, #320]	; (8007864 <HAL_RCC_OscConfig+0x90c>)
 8007722:	4013      	ands	r3, r2
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800772c:	3a01      	subs	r2, #1
 800772e:	0112      	lsls	r2, r2, #4
 8007730:	4311      	orrs	r1, r2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007736:	0212      	lsls	r2, r2, #8
 8007738:	4311      	orrs	r1, r2
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800773e:	0852      	lsrs	r2, r2, #1
 8007740:	3a01      	subs	r2, #1
 8007742:	0552      	lsls	r2, r2, #21
 8007744:	4311      	orrs	r1, r2
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800774a:	0852      	lsrs	r2, r2, #1
 800774c:	3a01      	subs	r2, #1
 800774e:	0652      	lsls	r2, r2, #25
 8007750:	4311      	orrs	r1, r2
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007756:	06d2      	lsls	r2, r2, #27
 8007758:	430a      	orrs	r2, r1
 800775a:	4941      	ldr	r1, [pc, #260]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 800775c:	4313      	orrs	r3, r2
 800775e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007760:	4b3f      	ldr	r3, [pc, #252]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a3e      	ldr	r2, [pc, #248]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 8007766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800776a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800776c:	4b3c      	ldr	r3, [pc, #240]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	4a3b      	ldr	r2, [pc, #236]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 8007772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007776:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007778:	f7fd fa22 	bl	8004bc0 <HAL_GetTick>
 800777c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007780:	f7fd fa1e 	bl	8004bc0 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e062      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007792:	4b33      	ldr	r3, [pc, #204]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0f0      	beq.n	8007780 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800779e:	e05a      	b.n	8007856 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e059      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077a4:	4b2e      	ldr	r3, [pc, #184]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d152      	bne.n	8007856 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80077b0:	4b2b      	ldr	r3, [pc, #172]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a2a      	ldr	r2, [pc, #168]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80077b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80077bc:	4b28      	ldr	r3, [pc, #160]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4a27      	ldr	r2, [pc, #156]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80077c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077c8:	f7fd f9fa 	bl	8004bc0 <HAL_GetTick>
 80077cc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d0:	f7fd f9f6 	bl	8004bc0 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e03a      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077e2:	4b1f      	ldr	r3, [pc, #124]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0f0      	beq.n	80077d0 <HAL_RCC_OscConfig+0x878>
 80077ee:	e032      	b.n	8007856 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	2b0c      	cmp	r3, #12
 80077f4:	d02d      	beq.n	8007852 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f6:	4b1a      	ldr	r3, [pc, #104]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a19      	ldr	r2, [pc, #100]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 80077fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007800:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007802:	4b17      	ldr	r3, [pc, #92]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800780e:	4b14      	ldr	r3, [pc, #80]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	4a13      	ldr	r2, [pc, #76]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 8007814:	f023 0303 	bic.w	r3, r3, #3
 8007818:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800781a:	4b11      	ldr	r3, [pc, #68]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	4a10      	ldr	r2, [pc, #64]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 8007820:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007828:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782a:	f7fd f9c9 	bl	8004bc0 <HAL_GetTick>
 800782e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007830:	e008      	b.n	8007844 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007832:	f7fd f9c5 	bl	8004bc0 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d901      	bls.n	8007844 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e009      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007844:	4b06      	ldr	r3, [pc, #24]	; (8007860 <HAL_RCC_OscConfig+0x908>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1f0      	bne.n	8007832 <HAL_RCC_OscConfig+0x8da>
 8007850:	e001      	b.n	8007856 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3728      	adds	r7, #40	; 0x28
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40021000 	.word	0x40021000
 8007864:	019d800c 	.word	0x019d800c

08007868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e10f      	b.n	8007aa0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007880:	4b89      	ldr	r3, [pc, #548]	; (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 030f 	and.w	r3, r3, #15
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d910      	bls.n	80078b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800788e:	4b86      	ldr	r3, [pc, #536]	; (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f023 020f 	bic.w	r2, r3, #15
 8007896:	4984      	ldr	r1, [pc, #528]	; (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	4313      	orrs	r3, r2
 800789c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800789e:	4b82      	ldr	r3, [pc, #520]	; (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d001      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e0f7      	b.n	8007aa0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 8089 	beq.w	80079d0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d133      	bne.n	800792e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078c6:	4b79      	ldr	r3, [pc, #484]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e0e4      	b.n	8007aa0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80078d6:	f000 f9d9 	bl	8007c8c <RCC_GetSysClockFreqFromPLLSource>
 80078da:	4603      	mov	r3, r0
 80078dc:	4a74      	ldr	r2, [pc, #464]	; (8007ab0 <HAL_RCC_ClockConfig+0x248>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d955      	bls.n	800798e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80078e2:	4b72      	ldr	r3, [pc, #456]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078ee:	4b6f      	ldr	r3, [pc, #444]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078f6:	4a6d      	ldr	r2, [pc, #436]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 80078f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80078fe:	2380      	movs	r3, #128	; 0x80
 8007900:	617b      	str	r3, [r7, #20]
 8007902:	e044      	b.n	800798e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d03e      	beq.n	800798e <HAL_RCC_ClockConfig+0x126>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d13a      	bne.n	800798e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007918:	4b64      	ldr	r3, [pc, #400]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007920:	4a62      	ldr	r2, [pc, #392]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007926:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007928:	2380      	movs	r3, #128	; 0x80
 800792a:	617b      	str	r3, [r7, #20]
 800792c:	e02f      	b.n	800798e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d107      	bne.n	8007946 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007936:	4b5d      	ldr	r3, [pc, #372]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d115      	bne.n	800796e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e0ac      	b.n	8007aa0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d107      	bne.n	800795e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800794e:	4b57      	ldr	r3, [pc, #348]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e0a0      	b.n	8007aa0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800795e:	4b53      	ldr	r3, [pc, #332]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e098      	b.n	8007aa0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800796e:	f000 f8a7 	bl	8007ac0 <HAL_RCC_GetSysClockFreq>
 8007972:	4603      	mov	r3, r0
 8007974:	4a4e      	ldr	r2, [pc, #312]	; (8007ab0 <HAL_RCC_ClockConfig+0x248>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d909      	bls.n	800798e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800797a:	4b4c      	ldr	r3, [pc, #304]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007982:	4a4a      	ldr	r2, [pc, #296]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007988:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800798a:	2380      	movs	r3, #128	; 0x80
 800798c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800798e:	4b47      	ldr	r3, [pc, #284]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f023 0203 	bic.w	r2, r3, #3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	4944      	ldr	r1, [pc, #272]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 800799c:	4313      	orrs	r3, r2
 800799e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079a0:	f7fd f90e 	bl	8004bc0 <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079a6:	e00a      	b.n	80079be <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079a8:	f7fd f90a 	bl	8004bc0 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e070      	b.n	8007aa0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079be:	4b3b      	ldr	r3, [pc, #236]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 020c 	and.w	r2, r3, #12
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d1eb      	bne.n	80079a8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079dc:	4b33      	ldr	r3, [pc, #204]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	4930      	ldr	r1, [pc, #192]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	608b      	str	r3, [r1, #8]
 80079ee:	e008      	b.n	8007a02 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d105      	bne.n	8007a02 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80079f6:	4b2d      	ldr	r3, [pc, #180]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a00:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a02:	4b29      	ldr	r3, [pc, #164]	; (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d210      	bcs.n	8007a32 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a10:	4b25      	ldr	r3, [pc, #148]	; (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f023 020f 	bic.w	r2, r3, #15
 8007a18:	4923      	ldr	r1, [pc, #140]	; (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a20:	4b21      	ldr	r3, [pc, #132]	; (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 030f 	and.w	r3, r3, #15
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d001      	beq.n	8007a32 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e036      	b.n	8007aa0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0304 	and.w	r3, r3, #4
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d008      	beq.n	8007a50 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a3e:	4b1b      	ldr	r3, [pc, #108]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	4918      	ldr	r1, [pc, #96]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0308 	and.w	r3, r3, #8
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d009      	beq.n	8007a70 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a5c:	4b13      	ldr	r3, [pc, #76]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	4910      	ldr	r1, [pc, #64]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a70:	f000 f826 	bl	8007ac0 <HAL_RCC_GetSysClockFreq>
 8007a74:	4602      	mov	r2, r0
 8007a76:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	091b      	lsrs	r3, r3, #4
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	490c      	ldr	r1, [pc, #48]	; (8007ab4 <HAL_RCC_ClockConfig+0x24c>)
 8007a82:	5ccb      	ldrb	r3, [r1, r3]
 8007a84:	f003 031f 	and.w	r3, r3, #31
 8007a88:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8c:	4a0a      	ldr	r2, [pc, #40]	; (8007ab8 <HAL_RCC_ClockConfig+0x250>)
 8007a8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <HAL_RCC_ClockConfig+0x254>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fd f843 	bl	8004b20 <HAL_InitTick>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]

  return status;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40022000 	.word	0x40022000
 8007aac:	40021000 	.word	0x40021000
 8007ab0:	04c4b400 	.word	0x04c4b400
 8007ab4:	08009ccc 	.word	0x08009ccc
 8007ab8:	200001fc 	.word	0x200001fc
 8007abc:	20000200 	.word	0x20000200

08007ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b089      	sub	sp, #36	; 0x24
 8007ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]
 8007aca:	2300      	movs	r3, #0
 8007acc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ace:	4b3e      	ldr	r3, [pc, #248]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 030c 	and.w	r3, r3, #12
 8007ad6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ad8:	4b3b      	ldr	r3, [pc, #236]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <HAL_RCC_GetSysClockFreq+0x34>
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b0c      	cmp	r3, #12
 8007aec:	d121      	bne.n	8007b32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d11e      	bne.n	8007b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007af4:	4b34      	ldr	r3, [pc, #208]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0308 	and.w	r3, r3, #8
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d107      	bne.n	8007b10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007b00:	4b31      	ldr	r3, [pc, #196]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b06:	0a1b      	lsrs	r3, r3, #8
 8007b08:	f003 030f 	and.w	r3, r3, #15
 8007b0c:	61fb      	str	r3, [r7, #28]
 8007b0e:	e005      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007b10:	4b2d      	ldr	r3, [pc, #180]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	091b      	lsrs	r3, r3, #4
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007b1c:	4a2b      	ldr	r2, [pc, #172]	; (8007bcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10d      	bne.n	8007b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007b30:	e00a      	b.n	8007b48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d102      	bne.n	8007b3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007b38:	4b25      	ldr	r3, [pc, #148]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	e004      	b.n	8007b48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d101      	bne.n	8007b48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007b44:	4b23      	ldr	r3, [pc, #140]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007b46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2b0c      	cmp	r3, #12
 8007b4c:	d134      	bne.n	8007bb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b4e:	4b1e      	ldr	r3, [pc, #120]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d003      	beq.n	8007b66 <HAL_RCC_GetSysClockFreq+0xa6>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d003      	beq.n	8007b6c <HAL_RCC_GetSysClockFreq+0xac>
 8007b64:	e005      	b.n	8007b72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007b66:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007b68:	617b      	str	r3, [r7, #20]
      break;
 8007b6a:	e005      	b.n	8007b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007b6c:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007b6e:	617b      	str	r3, [r7, #20]
      break;
 8007b70:	e002      	b.n	8007b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	617b      	str	r3, [r7, #20]
      break;
 8007b76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b78:	4b13      	ldr	r3, [pc, #76]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	091b      	lsrs	r3, r3, #4
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	3301      	adds	r3, #1
 8007b84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b86:	4b10      	ldr	r3, [pc, #64]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	fb03 f202 	mul.w	r2, r3, r2
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	0e5b      	lsrs	r3, r3, #25
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	3301      	adds	r3, #1
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3724      	adds	r7, #36	; 0x24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	08009cdc 	.word	0x08009cdc
 8007bd0:	00f42400 	.word	0x00f42400
 8007bd4:	007a1200 	.word	0x007a1200

08007bd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007be0:	2300      	movs	r3, #0
 8007be2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007be4:	4b27      	ldr	r3, [pc, #156]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007bf0:	f7ff f8ee 	bl	8006dd0 <HAL_PWREx_GetVoltageRange>
 8007bf4:	6178      	str	r0, [r7, #20]
 8007bf6:	e014      	b.n	8007c22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bf8:	4b22      	ldr	r3, [pc, #136]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfc:	4a21      	ldr	r2, [pc, #132]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c02:	6593      	str	r3, [r2, #88]	; 0x58
 8007c04:	4b1f      	ldr	r3, [pc, #124]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007c10:	f7ff f8de 	bl	8006dd0 <HAL_PWREx_GetVoltageRange>
 8007c14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007c16:	4b1b      	ldr	r3, [pc, #108]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1a:	4a1a      	ldr	r2, [pc, #104]	; (8007c84 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c28:	d10b      	bne.n	8007c42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b80      	cmp	r3, #128	; 0x80
 8007c2e:	d913      	bls.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2ba0      	cmp	r3, #160	; 0xa0
 8007c34:	d902      	bls.n	8007c3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007c36:	2302      	movs	r3, #2
 8007c38:	613b      	str	r3, [r7, #16]
 8007c3a:	e00d      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	e00a      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b7f      	cmp	r3, #127	; 0x7f
 8007c46:	d902      	bls.n	8007c4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007c48:	2302      	movs	r3, #2
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	e004      	b.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b70      	cmp	r3, #112	; 0x70
 8007c52:	d101      	bne.n	8007c58 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c54:	2301      	movs	r3, #1
 8007c56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c58:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f023 020f 	bic.w	r2, r3, #15
 8007c60:	4909      	ldr	r1, [pc, #36]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007c68:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d001      	beq.n	8007c7a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40021000 	.word	0x40021000
 8007c88:	40022000 	.word	0x40022000

08007c8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8007c96:	4b2d      	ldr	r3, [pc, #180]	; (8007d4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d118      	bne.n	8007cd4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ca2:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d107      	bne.n	8007cbe <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007cae:	4b27      	ldr	r3, [pc, #156]	; (8007d4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	e005      	b.n	8007cca <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007cbe:	4b23      	ldr	r3, [pc, #140]	; (8007d4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007cca:	4a21      	ldr	r2, [pc, #132]	; (8007d50 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cd4:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d003      	beq.n	8007cec <RCC_GetSysClockFreqFromPLLSource+0x60>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d003      	beq.n	8007cf2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8007cea:	e005      	b.n	8007cf8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007cec:	4b19      	ldr	r3, [pc, #100]	; (8007d54 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007cee:	613b      	str	r3, [r7, #16]
    break;
 8007cf0:	e005      	b.n	8007cfe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007cf2:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007cf4:	613b      	str	r3, [r7, #16]
    break;
 8007cf6:	e002      	b.n	8007cfe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	613b      	str	r3, [r7, #16]
    break;
 8007cfc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	091b      	lsrs	r3, r3, #4
 8007d04:	f003 030f 	and.w	r3, r3, #15
 8007d08:	3301      	adds	r3, #1
 8007d0a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	0a1b      	lsrs	r3, r3, #8
 8007d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	fb03 f202 	mul.w	r2, r3, r2
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d22:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d24:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	0e5b      	lsrs	r3, r3, #25
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	3301      	adds	r3, #1
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007d3e:	683b      	ldr	r3, [r7, #0]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	371c      	adds	r7, #28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	40021000 	.word	0x40021000
 8007d50:	08009cdc 	.word	0x08009cdc
 8007d54:	00f42400 	.word	0x00f42400
 8007d58:	007a1200 	.word	0x007a1200

08007d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d64:	2300      	movs	r3, #0
 8007d66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d68:	2300      	movs	r3, #0
 8007d6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d040      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d7c:	2b80      	cmp	r3, #128	; 0x80
 8007d7e:	d02a      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d80:	2b80      	cmp	r3, #128	; 0x80
 8007d82:	d825      	bhi.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d84:	2b60      	cmp	r3, #96	; 0x60
 8007d86:	d026      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d88:	2b60      	cmp	r3, #96	; 0x60
 8007d8a:	d821      	bhi.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d8c:	2b40      	cmp	r3, #64	; 0x40
 8007d8e:	d006      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007d90:	2b40      	cmp	r3, #64	; 0x40
 8007d92:	d81d      	bhi.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d009      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d010      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007d9c:	e018      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d9e:	4b89      	ldr	r3, [pc, #548]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	4a88      	ldr	r2, [pc, #544]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007da8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007daa:	e015      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3304      	adds	r3, #4
 8007db0:	2100      	movs	r1, #0
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fb3e 	bl	8008434 <RCCEx_PLLSAI1_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007dbc:	e00c      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3320      	adds	r3, #32
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fc29 	bl	800861c <RCCEx_PLLSAI2_Config>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007dce:	e003      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	74fb      	strb	r3, [r7, #19]
      break;
 8007dd4:	e000      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dd8:	7cfb      	ldrb	r3, [r7, #19]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10b      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dde:	4b79      	ldr	r3, [pc, #484]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007de4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dec:	4975      	ldr	r1, [pc, #468]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007df4:	e001      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df6:	7cfb      	ldrb	r3, [r7, #19]
 8007df8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d047      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0e:	d030      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e14:	d82a      	bhi.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e1a:	d02a      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e20:	d824      	bhi.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e26:	d008      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e2c:	d81e      	bhi.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e36:	d010      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e38:	e018      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e3a:	4b62      	ldr	r3, [pc, #392]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	4a61      	ldr	r2, [pc, #388]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e44:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e46:	e015      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 faf0 	bl	8008434 <RCCEx_PLLSAI1_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e58:	e00c      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3320      	adds	r3, #32
 8007e5e:	2100      	movs	r1, #0
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fbdb 	bl	800861c <RCCEx_PLLSAI2_Config>
 8007e66:	4603      	mov	r3, r0
 8007e68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e6a:	e003      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	74fb      	strb	r3, [r7, #19]
      break;
 8007e70:	e000      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e74:	7cfb      	ldrb	r3, [r7, #19]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10b      	bne.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007e7a:	4b52      	ldr	r3, [pc, #328]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e88:	494e      	ldr	r1, [pc, #312]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007e90:	e001      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e92:	7cfb      	ldrb	r3, [r7, #19]
 8007e94:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 809f 	beq.w	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007ea8:	4b46      	ldr	r3, [pc, #280]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00d      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ebe:	4b41      	ldr	r3, [pc, #260]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec2:	4a40      	ldr	r2, [pc, #256]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8007eca:	4b3e      	ldr	r3, [pc, #248]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed2:	60bb      	str	r3, [r7, #8]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007eda:	4b3b      	ldr	r3, [pc, #236]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a3a      	ldr	r2, [pc, #232]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ee6:	f7fc fe6b 	bl	8004bc0 <HAL_GetTick>
 8007eea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007eec:	e009      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eee:	f7fc fe67 	bl	8004bc0 <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d902      	bls.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	74fb      	strb	r3, [r7, #19]
        break;
 8007f00:	e005      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f02:	4b31      	ldr	r3, [pc, #196]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0ef      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007f0e:	7cfb      	ldrb	r3, [r7, #19]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d15b      	bne.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f14:	4b2b      	ldr	r3, [pc, #172]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01f      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d019      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f32:	4b24      	ldr	r3, [pc, #144]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f3e:	4b21      	ldr	r3, [pc, #132]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f44:	4a1f      	ldr	r2, [pc, #124]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f4e:	4b1d      	ldr	r3, [pc, #116]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f54:	4a1b      	ldr	r2, [pc, #108]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f5e:	4a19      	ldr	r2, [pc, #100]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d016      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f70:	f7fc fe26 	bl	8004bc0 <HAL_GetTick>
 8007f74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f76:	e00b      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f78:	f7fc fe22 	bl	8004bc0 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d902      	bls.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	74fb      	strb	r3, [r7, #19]
            break;
 8007f8e:	e006      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0ec      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007f9e:	7cfb      	ldrb	r3, [r7, #19]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10c      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fa4:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007faa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fb4:	4903      	ldr	r1, [pc, #12]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007fbc:	e008      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007fbe:	7cfb      	ldrb	r3, [r7, #19]
 8007fc0:	74bb      	strb	r3, [r7, #18]
 8007fc2:	e005      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007fc4:	40021000 	.word	0x40021000
 8007fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fcc:	7cfb      	ldrb	r3, [r7, #19]
 8007fce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fd0:	7c7b      	ldrb	r3, [r7, #17]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d105      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fd6:	4ba0      	ldr	r3, [pc, #640]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fda:	4a9f      	ldr	r2, [pc, #636]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fee:	4b9a      	ldr	r3, [pc, #616]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff4:	f023 0203 	bic.w	r2, r3, #3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffc:	4996      	ldr	r1, [pc, #600]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00a      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008010:	4b91      	ldr	r3, [pc, #580]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008016:	f023 020c 	bic.w	r2, r3, #12
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	498e      	ldr	r1, [pc, #568]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008020:	4313      	orrs	r3, r2
 8008022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008032:	4b89      	ldr	r3, [pc, #548]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008038:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008040:	4985      	ldr	r1, [pc, #532]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0308 	and.w	r3, r3, #8
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00a      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008054:	4b80      	ldr	r3, [pc, #512]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008062:	497d      	ldr	r1, [pc, #500]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008064:	4313      	orrs	r3, r2
 8008066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0310 	and.w	r3, r3, #16
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008076:	4b78      	ldr	r3, [pc, #480]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008084:	4974      	ldr	r1, [pc, #464]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008086:	4313      	orrs	r3, r2
 8008088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00a      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008098:	4b6f      	ldr	r3, [pc, #444]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800809a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a6:	496c      	ldr	r1, [pc, #432]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ba:	4b67      	ldr	r3, [pc, #412]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080c8:	4963      	ldr	r1, [pc, #396]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080dc:	4b5e      	ldr	r3, [pc, #376]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ea:	495b      	ldr	r1, [pc, #364]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080fe:	4b56      	ldr	r3, [pc, #344]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008104:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810c:	4952      	ldr	r1, [pc, #328]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800810e:	4313      	orrs	r3, r2
 8008110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008120:	4b4d      	ldr	r3, [pc, #308]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008126:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812e:	494a      	ldr	r1, [pc, #296]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008130:	4313      	orrs	r3, r2
 8008132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008142:	4b45      	ldr	r3, [pc, #276]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008150:	4941      	ldr	r1, [pc, #260]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008152:	4313      	orrs	r3, r2
 8008154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008164:	4b3c      	ldr	r3, [pc, #240]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008166:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800816a:	f023 0203 	bic.w	r2, r3, #3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008172:	4939      	ldr	r1, [pc, #228]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008174:	4313      	orrs	r3, r2
 8008176:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d028      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008186:	4b34      	ldr	r3, [pc, #208]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008194:	4930      	ldr	r1, [pc, #192]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008196:	4313      	orrs	r3, r2
 8008198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081a4:	d106      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081a6:	4b2c      	ldr	r3, [pc, #176]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	4a2b      	ldr	r2, [pc, #172]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081b0:	60d3      	str	r3, [r2, #12]
 80081b2:	e011      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081bc:	d10c      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3304      	adds	r3, #4
 80081c2:	2101      	movs	r1, #1
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 f935 	bl	8008434 <RCCEx_PLLSAI1_Config>
 80081ca:	4603      	mov	r3, r0
 80081cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80081ce:	7cfb      	ldrb	r3, [r7, #19]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80081d4:	7cfb      	ldrb	r3, [r7, #19]
 80081d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d04d      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081ec:	d108      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80081ee:	4b1a      	ldr	r3, [pc, #104]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081f4:	4a18      	ldr	r2, [pc, #96]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80081fe:	e012      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008200:	4b15      	ldr	r3, [pc, #84]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008206:	4a14      	ldr	r2, [pc, #80]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800820c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008210:	4b11      	ldr	r3, [pc, #68]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800821e:	490e      	ldr	r1, [pc, #56]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008220:	4313      	orrs	r3, r2
 8008222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800822a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800822e:	d106      	bne.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	4a08      	ldr	r2, [pc, #32]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800823a:	60d3      	str	r3, [r2, #12]
 800823c:	e020      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008246:	d109      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008248:	4b03      	ldr	r3, [pc, #12]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	4a02      	ldr	r2, [pc, #8]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800824e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008252:	60d3      	str	r3, [r2, #12]
 8008254:	e014      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008256:	bf00      	nop
 8008258:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008264:	d10c      	bne.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3304      	adds	r3, #4
 800826a:	2101      	movs	r1, #1
 800826c:	4618      	mov	r0, r3
 800826e:	f000 f8e1 	bl	8008434 <RCCEx_PLLSAI1_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008276:	7cfb      	ldrb	r3, [r7, #19]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800827c:	7cfb      	ldrb	r3, [r7, #19]
 800827e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d028      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800828c:	4b68      	ldr	r3, [pc, #416]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800828e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008292:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800829a:	4965      	ldr	r1, [pc, #404]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800829c:	4313      	orrs	r3, r2
 800829e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082aa:	d106      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082ac:	4b60      	ldr	r3, [pc, #384]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	4a5f      	ldr	r2, [pc, #380]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80082b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082b6:	60d3      	str	r3, [r2, #12]
 80082b8:	e011      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082c2:	d10c      	bne.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3304      	adds	r3, #4
 80082c8:	2101      	movs	r1, #1
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f8b2 	bl	8008434 <RCCEx_PLLSAI1_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082d4:	7cfb      	ldrb	r3, [r7, #19]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80082da:	7cfb      	ldrb	r3, [r7, #19]
 80082dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d01e      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082ea:	4b51      	ldr	r3, [pc, #324]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80082ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082fa:	494d      	ldr	r1, [pc, #308]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800830c:	d10c      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3304      	adds	r3, #4
 8008312:	2102      	movs	r1, #2
 8008314:	4618      	mov	r0, r3
 8008316:	f000 f88d 	bl	8008434 <RCCEx_PLLSAI1_Config>
 800831a:	4603      	mov	r3, r0
 800831c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800831e:	7cfb      	ldrb	r3, [r7, #19]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008324:	7cfb      	ldrb	r3, [r7, #19]
 8008326:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008334:	4b3e      	ldr	r3, [pc, #248]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800833a:	f023 0204 	bic.w	r2, r3, #4
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008344:	493a      	ldr	r1, [pc, #232]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008346:	4313      	orrs	r3, r2
 8008348:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008358:	4b35      	ldr	r3, [pc, #212]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800835a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800835e:	f023 0218 	bic.w	r2, r3, #24
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008368:	4931      	ldr	r1, [pc, #196]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800836a:	4313      	orrs	r3, r2
 800836c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d035      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800837c:	4b2c      	ldr	r3, [pc, #176]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a2b      	ldr	r2, [pc, #172]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008388:	f7fc fc1a 	bl	8004bc0 <HAL_GetTick>
 800838c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800838e:	e009      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008390:	f7fc fc16 	bl	8004bc0 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d902      	bls.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	74fb      	strb	r3, [r7, #19]
        break;
 80083a2:	e005      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80083a4:	4b22      	ldr	r3, [pc, #136]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1ef      	bne.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80083b0:	7cfb      	ldrb	r3, [r7, #19]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d113      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80083b6:	4b1e      	ldr	r3, [pc, #120]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80083b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c6:	491a      	ldr	r1, [pc, #104]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3320      	adds	r3, #32
 80083d2:	2102      	movs	r1, #2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 f921 	bl	800861c <RCCEx_PLLSAI2_Config>
 80083da:	4603      	mov	r3, r0
 80083dc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80083de:	7cfb      	ldrb	r3, [r7, #19]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80083e4:	7cfb      	ldrb	r3, [r7, #19]
 80083e6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d017      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80083f4:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80083f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008404:	490a      	ldr	r1, [pc, #40]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008406:	4313      	orrs	r3, r2
 8008408:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008416:	d105      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008418:	4b05      	ldr	r3, [pc, #20]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	4a04      	ldr	r2, [pc, #16]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800841e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008422:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008424:	7cbb      	ldrb	r3, [r7, #18]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	40021000 	.word	0x40021000

08008434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008442:	4b72      	ldr	r3, [pc, #456]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00e      	beq.n	800846c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800844e:	4b6f      	ldr	r3, [pc, #444]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f003 0203 	and.w	r2, r3, #3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d103      	bne.n	8008466 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
       ||
 8008462:	2b00      	cmp	r3, #0
 8008464:	d142      	bne.n	80084ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
 800846a:	e03f      	b.n	80084ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b03      	cmp	r3, #3
 8008472:	d018      	beq.n	80084a6 <RCCEx_PLLSAI1_Config+0x72>
 8008474:	2b03      	cmp	r3, #3
 8008476:	d825      	bhi.n	80084c4 <RCCEx_PLLSAI1_Config+0x90>
 8008478:	2b01      	cmp	r3, #1
 800847a:	d002      	beq.n	8008482 <RCCEx_PLLSAI1_Config+0x4e>
 800847c:	2b02      	cmp	r3, #2
 800847e:	d009      	beq.n	8008494 <RCCEx_PLLSAI1_Config+0x60>
 8008480:	e020      	b.n	80084c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008482:	4b62      	ldr	r3, [pc, #392]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d11d      	bne.n	80084ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008492:	e01a      	b.n	80084ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008494:	4b5d      	ldr	r3, [pc, #372]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800849c:	2b00      	cmp	r3, #0
 800849e:	d116      	bne.n	80084ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084a4:	e013      	b.n	80084ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80084a6:	4b59      	ldr	r3, [pc, #356]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10f      	bne.n	80084d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80084b2:	4b56      	ldr	r3, [pc, #344]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084c2:	e006      	b.n	80084d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	73fb      	strb	r3, [r7, #15]
      break;
 80084c8:	e004      	b.n	80084d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084ca:	bf00      	nop
 80084cc:	e002      	b.n	80084d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084ce:	bf00      	nop
 80084d0:	e000      	b.n	80084d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d108      	bne.n	80084ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80084da:	4b4c      	ldr	r3, [pc, #304]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f023 0203 	bic.w	r2, r3, #3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4949      	ldr	r1, [pc, #292]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f040 8086 	bne.w	8008600 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80084f4:	4b45      	ldr	r3, [pc, #276]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a44      	ldr	r2, [pc, #272]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008500:	f7fc fb5e 	bl	8004bc0 <HAL_GetTick>
 8008504:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008506:	e009      	b.n	800851c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008508:	f7fc fb5a 	bl	8004bc0 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d902      	bls.n	800851c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	73fb      	strb	r3, [r7, #15]
        break;
 800851a:	e005      	b.n	8008528 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800851c:	4b3b      	ldr	r3, [pc, #236]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1ef      	bne.n	8008508 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d168      	bne.n	8008600 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d113      	bne.n	800855c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008534:	4b35      	ldr	r3, [pc, #212]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	4b35      	ldr	r3, [pc, #212]	; (8008610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800853a:	4013      	ands	r3, r2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6892      	ldr	r2, [r2, #8]
 8008540:	0211      	lsls	r1, r2, #8
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	68d2      	ldr	r2, [r2, #12]
 8008546:	06d2      	lsls	r2, r2, #27
 8008548:	4311      	orrs	r1, r2
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	6852      	ldr	r2, [r2, #4]
 800854e:	3a01      	subs	r2, #1
 8008550:	0112      	lsls	r2, r2, #4
 8008552:	430a      	orrs	r2, r1
 8008554:	492d      	ldr	r1, [pc, #180]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008556:	4313      	orrs	r3, r2
 8008558:	610b      	str	r3, [r1, #16]
 800855a:	e02d      	b.n	80085b8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d115      	bne.n	800858e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008562:	4b2a      	ldr	r3, [pc, #168]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008564:	691a      	ldr	r2, [r3, #16]
 8008566:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008568:	4013      	ands	r3, r2
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6892      	ldr	r2, [r2, #8]
 800856e:	0211      	lsls	r1, r2, #8
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6912      	ldr	r2, [r2, #16]
 8008574:	0852      	lsrs	r2, r2, #1
 8008576:	3a01      	subs	r2, #1
 8008578:	0552      	lsls	r2, r2, #21
 800857a:	4311      	orrs	r1, r2
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	6852      	ldr	r2, [r2, #4]
 8008580:	3a01      	subs	r2, #1
 8008582:	0112      	lsls	r2, r2, #4
 8008584:	430a      	orrs	r2, r1
 8008586:	4921      	ldr	r1, [pc, #132]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008588:	4313      	orrs	r3, r2
 800858a:	610b      	str	r3, [r1, #16]
 800858c:	e014      	b.n	80085b8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800858e:	4b1f      	ldr	r3, [pc, #124]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008590:	691a      	ldr	r2, [r3, #16]
 8008592:	4b21      	ldr	r3, [pc, #132]	; (8008618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008594:	4013      	ands	r3, r2
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6892      	ldr	r2, [r2, #8]
 800859a:	0211      	lsls	r1, r2, #8
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6952      	ldr	r2, [r2, #20]
 80085a0:	0852      	lsrs	r2, r2, #1
 80085a2:	3a01      	subs	r2, #1
 80085a4:	0652      	lsls	r2, r2, #25
 80085a6:	4311      	orrs	r1, r2
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6852      	ldr	r2, [r2, #4]
 80085ac:	3a01      	subs	r2, #1
 80085ae:	0112      	lsls	r2, r2, #4
 80085b0:	430a      	orrs	r2, r1
 80085b2:	4916      	ldr	r1, [pc, #88]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80085b8:	4b14      	ldr	r3, [pc, #80]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a13      	ldr	r2, [pc, #76]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085c4:	f7fc fafc 	bl	8004bc0 <HAL_GetTick>
 80085c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085ca:	e009      	b.n	80085e0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085cc:	f7fc faf8 	bl	8004bc0 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d902      	bls.n	80085e0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	73fb      	strb	r3, [r7, #15]
          break;
 80085de:	e005      	b.n	80085ec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085e0:	4b0a      	ldr	r3, [pc, #40]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0ef      	beq.n	80085cc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d106      	bne.n	8008600 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085f4:	691a      	ldr	r2, [r3, #16]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	4904      	ldr	r1, [pc, #16]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	40021000 	.word	0x40021000
 8008610:	07ff800f 	.word	0x07ff800f
 8008614:	ff9f800f 	.word	0xff9f800f
 8008618:	f9ff800f 	.word	0xf9ff800f

0800861c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800862a:	4b72      	ldr	r3, [pc, #456]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008636:	4b6f      	ldr	r3, [pc, #444]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f003 0203 	and.w	r2, r3, #3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	429a      	cmp	r2, r3
 8008644:	d103      	bne.n	800864e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
       ||
 800864a:	2b00      	cmp	r3, #0
 800864c:	d142      	bne.n	80086d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	73fb      	strb	r3, [r7, #15]
 8008652:	e03f      	b.n	80086d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d018      	beq.n	800868e <RCCEx_PLLSAI2_Config+0x72>
 800865c:	2b03      	cmp	r3, #3
 800865e:	d825      	bhi.n	80086ac <RCCEx_PLLSAI2_Config+0x90>
 8008660:	2b01      	cmp	r3, #1
 8008662:	d002      	beq.n	800866a <RCCEx_PLLSAI2_Config+0x4e>
 8008664:	2b02      	cmp	r3, #2
 8008666:	d009      	beq.n	800867c <RCCEx_PLLSAI2_Config+0x60>
 8008668:	e020      	b.n	80086ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800866a:	4b62      	ldr	r3, [pc, #392]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d11d      	bne.n	80086b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800867a:	e01a      	b.n	80086b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800867c:	4b5d      	ldr	r3, [pc, #372]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008684:	2b00      	cmp	r3, #0
 8008686:	d116      	bne.n	80086b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800868c:	e013      	b.n	80086b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800868e:	4b59      	ldr	r3, [pc, #356]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10f      	bne.n	80086ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800869a:	4b56      	ldr	r3, [pc, #344]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d109      	bne.n	80086ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086aa:	e006      	b.n	80086ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	73fb      	strb	r3, [r7, #15]
      break;
 80086b0:	e004      	b.n	80086bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80086b2:	bf00      	nop
 80086b4:	e002      	b.n	80086bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80086b6:	bf00      	nop
 80086b8:	e000      	b.n	80086bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80086ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d108      	bne.n	80086d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80086c2:	4b4c      	ldr	r3, [pc, #304]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f023 0203 	bic.w	r2, r3, #3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4949      	ldr	r1, [pc, #292]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f040 8086 	bne.w	80087e8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80086dc:	4b45      	ldr	r3, [pc, #276]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a44      	ldr	r2, [pc, #272]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e8:	f7fc fa6a 	bl	8004bc0 <HAL_GetTick>
 80086ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086ee:	e009      	b.n	8008704 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80086f0:	f7fc fa66 	bl	8004bc0 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d902      	bls.n	8008704 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	73fb      	strb	r3, [r7, #15]
        break;
 8008702:	e005      	b.n	8008710 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008704:	4b3b      	ldr	r3, [pc, #236]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1ef      	bne.n	80086f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d168      	bne.n	80087e8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d113      	bne.n	8008744 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800871c:	4b35      	ldr	r3, [pc, #212]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800871e:	695a      	ldr	r2, [r3, #20]
 8008720:	4b35      	ldr	r3, [pc, #212]	; (80087f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008722:	4013      	ands	r3, r2
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	6892      	ldr	r2, [r2, #8]
 8008728:	0211      	lsls	r1, r2, #8
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68d2      	ldr	r2, [r2, #12]
 800872e:	06d2      	lsls	r2, r2, #27
 8008730:	4311      	orrs	r1, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	6852      	ldr	r2, [r2, #4]
 8008736:	3a01      	subs	r2, #1
 8008738:	0112      	lsls	r2, r2, #4
 800873a:	430a      	orrs	r2, r1
 800873c:	492d      	ldr	r1, [pc, #180]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800873e:	4313      	orrs	r3, r2
 8008740:	614b      	str	r3, [r1, #20]
 8008742:	e02d      	b.n	80087a0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d115      	bne.n	8008776 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800874a:	4b2a      	ldr	r3, [pc, #168]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800874c:	695a      	ldr	r2, [r3, #20]
 800874e:	4b2b      	ldr	r3, [pc, #172]	; (80087fc <RCCEx_PLLSAI2_Config+0x1e0>)
 8008750:	4013      	ands	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6892      	ldr	r2, [r2, #8]
 8008756:	0211      	lsls	r1, r2, #8
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6912      	ldr	r2, [r2, #16]
 800875c:	0852      	lsrs	r2, r2, #1
 800875e:	3a01      	subs	r2, #1
 8008760:	0552      	lsls	r2, r2, #21
 8008762:	4311      	orrs	r1, r2
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6852      	ldr	r2, [r2, #4]
 8008768:	3a01      	subs	r2, #1
 800876a:	0112      	lsls	r2, r2, #4
 800876c:	430a      	orrs	r2, r1
 800876e:	4921      	ldr	r1, [pc, #132]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008770:	4313      	orrs	r3, r2
 8008772:	614b      	str	r3, [r1, #20]
 8008774:	e014      	b.n	80087a0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008776:	4b1f      	ldr	r3, [pc, #124]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008778:	695a      	ldr	r2, [r3, #20]
 800877a:	4b21      	ldr	r3, [pc, #132]	; (8008800 <RCCEx_PLLSAI2_Config+0x1e4>)
 800877c:	4013      	ands	r3, r2
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6892      	ldr	r2, [r2, #8]
 8008782:	0211      	lsls	r1, r2, #8
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6952      	ldr	r2, [r2, #20]
 8008788:	0852      	lsrs	r2, r2, #1
 800878a:	3a01      	subs	r2, #1
 800878c:	0652      	lsls	r2, r2, #25
 800878e:	4311      	orrs	r1, r2
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6852      	ldr	r2, [r2, #4]
 8008794:	3a01      	subs	r2, #1
 8008796:	0112      	lsls	r2, r2, #4
 8008798:	430a      	orrs	r2, r1
 800879a:	4916      	ldr	r1, [pc, #88]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800879c:	4313      	orrs	r3, r2
 800879e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80087a0:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ac:	f7fc fa08 	bl	8004bc0 <HAL_GetTick>
 80087b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80087b2:	e009      	b.n	80087c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80087b4:	f7fc fa04 	bl	8004bc0 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d902      	bls.n	80087c8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	73fb      	strb	r3, [r7, #15]
          break;
 80087c6:	e005      	b.n	80087d4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0ef      	beq.n	80087b4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d106      	bne.n	80087e8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80087da:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087dc:	695a      	ldr	r2, [r3, #20]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	4904      	ldr	r1, [pc, #16]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	40021000 	.word	0x40021000
 80087f8:	07ff800f 	.word	0x07ff800f
 80087fc:	ff9f800f 	.word	0xff9f800f
 8008800:	f9ff800f 	.word	0xf9ff800f

08008804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e095      	b.n	8008942 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	2b00      	cmp	r3, #0
 800881c:	d108      	bne.n	8008830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008826:	d009      	beq.n	800883c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	61da      	str	r2, [r3, #28]
 800882e:	e005      	b.n	800883c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fb ff32 	bl	80046c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008872:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800887c:	d902      	bls.n	8008884 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	e002      	b.n	800888a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008888:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008892:	d007      	beq.n	80088a4 <HAL_SPI_Init+0xa0>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800889c:	d002      	beq.n	80088a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	431a      	orrs	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	431a      	orrs	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088d2:	431a      	orrs	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e6:	ea42 0103 	orr.w	r1, r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	0c1b      	lsrs	r3, r3, #16
 8008900:	f003 0204 	and.w	r2, r3, #4
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	431a      	orrs	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008920:	ea42 0103 	orr.w	r1, r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <_ZdlPvj>:
 800894a:	f000 b800 	b.w	800894e <_ZdlPv>

0800894e <_ZdlPv>:
 800894e:	f000 b85b 	b.w	8008a08 <free>
	...

08008954 <__assert_func>:
 8008954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008956:	4614      	mov	r4, r2
 8008958:	461a      	mov	r2, r3
 800895a:	4b09      	ldr	r3, [pc, #36]	; (8008980 <__assert_func+0x2c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4605      	mov	r5, r0
 8008960:	68d8      	ldr	r0, [r3, #12]
 8008962:	b14c      	cbz	r4, 8008978 <__assert_func+0x24>
 8008964:	4b07      	ldr	r3, [pc, #28]	; (8008984 <__assert_func+0x30>)
 8008966:	9100      	str	r1, [sp, #0]
 8008968:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800896c:	4906      	ldr	r1, [pc, #24]	; (8008988 <__assert_func+0x34>)
 800896e:	462b      	mov	r3, r5
 8008970:	f000 f814 	bl	800899c <fiprintf>
 8008974:	f000 fd04 	bl	8009380 <abort>
 8008978:	4b04      	ldr	r3, [pc, #16]	; (800898c <__assert_func+0x38>)
 800897a:	461c      	mov	r4, r3
 800897c:	e7f3      	b.n	8008966 <__assert_func+0x12>
 800897e:	bf00      	nop
 8008980:	20000208 	.word	0x20000208
 8008984:	08009d0c 	.word	0x08009d0c
 8008988:	08009d19 	.word	0x08009d19
 800898c:	08009d47 	.word	0x08009d47

08008990 <__errno>:
 8008990:	4b01      	ldr	r3, [pc, #4]	; (8008998 <__errno+0x8>)
 8008992:	6818      	ldr	r0, [r3, #0]
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	20000208 	.word	0x20000208

0800899c <fiprintf>:
 800899c:	b40e      	push	{r1, r2, r3}
 800899e:	b503      	push	{r0, r1, lr}
 80089a0:	4601      	mov	r1, r0
 80089a2:	ab03      	add	r3, sp, #12
 80089a4:	4805      	ldr	r0, [pc, #20]	; (80089bc <fiprintf+0x20>)
 80089a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089aa:	6800      	ldr	r0, [r0, #0]
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	f000 f953 	bl	8008c58 <_vfiprintf_r>
 80089b2:	b002      	add	sp, #8
 80089b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b8:	b003      	add	sp, #12
 80089ba:	4770      	bx	lr
 80089bc:	20000208 	.word	0x20000208

080089c0 <__libc_init_array>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	4d0d      	ldr	r5, [pc, #52]	; (80089f8 <__libc_init_array+0x38>)
 80089c4:	4c0d      	ldr	r4, [pc, #52]	; (80089fc <__libc_init_array+0x3c>)
 80089c6:	1b64      	subs	r4, r4, r5
 80089c8:	10a4      	asrs	r4, r4, #2
 80089ca:	2600      	movs	r6, #0
 80089cc:	42a6      	cmp	r6, r4
 80089ce:	d109      	bne.n	80089e4 <__libc_init_array+0x24>
 80089d0:	4d0b      	ldr	r5, [pc, #44]	; (8008a00 <__libc_init_array+0x40>)
 80089d2:	4c0c      	ldr	r4, [pc, #48]	; (8008a04 <__libc_init_array+0x44>)
 80089d4:	f000 fff8 	bl	80099c8 <_init>
 80089d8:	1b64      	subs	r4, r4, r5
 80089da:	10a4      	asrs	r4, r4, #2
 80089dc:	2600      	movs	r6, #0
 80089de:	42a6      	cmp	r6, r4
 80089e0:	d105      	bne.n	80089ee <__libc_init_array+0x2e>
 80089e2:	bd70      	pop	{r4, r5, r6, pc}
 80089e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e8:	4798      	blx	r3
 80089ea:	3601      	adds	r6, #1
 80089ec:	e7ee      	b.n	80089cc <__libc_init_array+0xc>
 80089ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f2:	4798      	blx	r3
 80089f4:	3601      	adds	r6, #1
 80089f6:	e7f2      	b.n	80089de <__libc_init_array+0x1e>
 80089f8:	08009de0 	.word	0x08009de0
 80089fc:	08009de0 	.word	0x08009de0
 8008a00:	08009de0 	.word	0x08009de0
 8008a04:	08009de8 	.word	0x08009de8

08008a08 <free>:
 8008a08:	4b02      	ldr	r3, [pc, #8]	; (8008a14 <free+0xc>)
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	6818      	ldr	r0, [r3, #0]
 8008a0e:	f000 b819 	b.w	8008a44 <_free_r>
 8008a12:	bf00      	nop
 8008a14:	20000208 	.word	0x20000208

08008a18 <memcpy>:
 8008a18:	440a      	add	r2, r1
 8008a1a:	4291      	cmp	r1, r2
 8008a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a20:	d100      	bne.n	8008a24 <memcpy+0xc>
 8008a22:	4770      	bx	lr
 8008a24:	b510      	push	{r4, lr}
 8008a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a2e:	4291      	cmp	r1, r2
 8008a30:	d1f9      	bne.n	8008a26 <memcpy+0xe>
 8008a32:	bd10      	pop	{r4, pc}

08008a34 <memset>:
 8008a34:	4402      	add	r2, r0
 8008a36:	4603      	mov	r3, r0
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d100      	bne.n	8008a3e <memset+0xa>
 8008a3c:	4770      	bx	lr
 8008a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a42:	e7f9      	b.n	8008a38 <memset+0x4>

08008a44 <_free_r>:
 8008a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a46:	2900      	cmp	r1, #0
 8008a48:	d044      	beq.n	8008ad4 <_free_r+0x90>
 8008a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a4e:	9001      	str	r0, [sp, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f1a1 0404 	sub.w	r4, r1, #4
 8008a56:	bfb8      	it	lt
 8008a58:	18e4      	addlt	r4, r4, r3
 8008a5a:	f000 feb9 	bl	80097d0 <__malloc_lock>
 8008a5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ad8 <_free_r+0x94>)
 8008a60:	9801      	ldr	r0, [sp, #4]
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	b933      	cbnz	r3, 8008a74 <_free_r+0x30>
 8008a66:	6063      	str	r3, [r4, #4]
 8008a68:	6014      	str	r4, [r2, #0]
 8008a6a:	b003      	add	sp, #12
 8008a6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a70:	f000 beb4 	b.w	80097dc <__malloc_unlock>
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	d908      	bls.n	8008a8a <_free_r+0x46>
 8008a78:	6825      	ldr	r5, [r4, #0]
 8008a7a:	1961      	adds	r1, r4, r5
 8008a7c:	428b      	cmp	r3, r1
 8008a7e:	bf01      	itttt	eq
 8008a80:	6819      	ldreq	r1, [r3, #0]
 8008a82:	685b      	ldreq	r3, [r3, #4]
 8008a84:	1949      	addeq	r1, r1, r5
 8008a86:	6021      	streq	r1, [r4, #0]
 8008a88:	e7ed      	b.n	8008a66 <_free_r+0x22>
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	b10b      	cbz	r3, 8008a94 <_free_r+0x50>
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	d9fa      	bls.n	8008a8a <_free_r+0x46>
 8008a94:	6811      	ldr	r1, [r2, #0]
 8008a96:	1855      	adds	r5, r2, r1
 8008a98:	42a5      	cmp	r5, r4
 8008a9a:	d10b      	bne.n	8008ab4 <_free_r+0x70>
 8008a9c:	6824      	ldr	r4, [r4, #0]
 8008a9e:	4421      	add	r1, r4
 8008aa0:	1854      	adds	r4, r2, r1
 8008aa2:	42a3      	cmp	r3, r4
 8008aa4:	6011      	str	r1, [r2, #0]
 8008aa6:	d1e0      	bne.n	8008a6a <_free_r+0x26>
 8008aa8:	681c      	ldr	r4, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	6053      	str	r3, [r2, #4]
 8008aae:	4421      	add	r1, r4
 8008ab0:	6011      	str	r1, [r2, #0]
 8008ab2:	e7da      	b.n	8008a6a <_free_r+0x26>
 8008ab4:	d902      	bls.n	8008abc <_free_r+0x78>
 8008ab6:	230c      	movs	r3, #12
 8008ab8:	6003      	str	r3, [r0, #0]
 8008aba:	e7d6      	b.n	8008a6a <_free_r+0x26>
 8008abc:	6825      	ldr	r5, [r4, #0]
 8008abe:	1961      	adds	r1, r4, r5
 8008ac0:	428b      	cmp	r3, r1
 8008ac2:	bf04      	itt	eq
 8008ac4:	6819      	ldreq	r1, [r3, #0]
 8008ac6:	685b      	ldreq	r3, [r3, #4]
 8008ac8:	6063      	str	r3, [r4, #4]
 8008aca:	bf04      	itt	eq
 8008acc:	1949      	addeq	r1, r1, r5
 8008ace:	6021      	streq	r1, [r4, #0]
 8008ad0:	6054      	str	r4, [r2, #4]
 8008ad2:	e7ca      	b.n	8008a6a <_free_r+0x26>
 8008ad4:	b003      	add	sp, #12
 8008ad6:	bd30      	pop	{r4, r5, pc}
 8008ad8:	20000a4c 	.word	0x20000a4c

08008adc <sbrk_aligned>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	4e0e      	ldr	r6, [pc, #56]	; (8008b18 <sbrk_aligned+0x3c>)
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	6831      	ldr	r1, [r6, #0]
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	b911      	cbnz	r1, 8008aee <sbrk_aligned+0x12>
 8008ae8:	f000 fb7a 	bl	80091e0 <_sbrk_r>
 8008aec:	6030      	str	r0, [r6, #0]
 8008aee:	4621      	mov	r1, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 fb75 	bl	80091e0 <_sbrk_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d00a      	beq.n	8008b10 <sbrk_aligned+0x34>
 8008afa:	1cc4      	adds	r4, r0, #3
 8008afc:	f024 0403 	bic.w	r4, r4, #3
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d007      	beq.n	8008b14 <sbrk_aligned+0x38>
 8008b04:	1a21      	subs	r1, r4, r0
 8008b06:	4628      	mov	r0, r5
 8008b08:	f000 fb6a 	bl	80091e0 <_sbrk_r>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d101      	bne.n	8008b14 <sbrk_aligned+0x38>
 8008b10:	f04f 34ff 	mov.w	r4, #4294967295
 8008b14:	4620      	mov	r0, r4
 8008b16:	bd70      	pop	{r4, r5, r6, pc}
 8008b18:	20000a50 	.word	0x20000a50

08008b1c <_malloc_r>:
 8008b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b20:	1ccd      	adds	r5, r1, #3
 8008b22:	f025 0503 	bic.w	r5, r5, #3
 8008b26:	3508      	adds	r5, #8
 8008b28:	2d0c      	cmp	r5, #12
 8008b2a:	bf38      	it	cc
 8008b2c:	250c      	movcc	r5, #12
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	4607      	mov	r7, r0
 8008b32:	db01      	blt.n	8008b38 <_malloc_r+0x1c>
 8008b34:	42a9      	cmp	r1, r5
 8008b36:	d905      	bls.n	8008b44 <_malloc_r+0x28>
 8008b38:	230c      	movs	r3, #12
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	4630      	mov	r0, r6
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b44:	4e2e      	ldr	r6, [pc, #184]	; (8008c00 <_malloc_r+0xe4>)
 8008b46:	f000 fe43 	bl	80097d0 <__malloc_lock>
 8008b4a:	6833      	ldr	r3, [r6, #0]
 8008b4c:	461c      	mov	r4, r3
 8008b4e:	bb34      	cbnz	r4, 8008b9e <_malloc_r+0x82>
 8008b50:	4629      	mov	r1, r5
 8008b52:	4638      	mov	r0, r7
 8008b54:	f7ff ffc2 	bl	8008adc <sbrk_aligned>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	d14d      	bne.n	8008bfa <_malloc_r+0xde>
 8008b5e:	6834      	ldr	r4, [r6, #0]
 8008b60:	4626      	mov	r6, r4
 8008b62:	2e00      	cmp	r6, #0
 8008b64:	d140      	bne.n	8008be8 <_malloc_r+0xcc>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	eb04 0803 	add.w	r8, r4, r3
 8008b70:	f000 fb36 	bl	80091e0 <_sbrk_r>
 8008b74:	4580      	cmp	r8, r0
 8008b76:	d13a      	bne.n	8008bee <_malloc_r+0xd2>
 8008b78:	6821      	ldr	r1, [r4, #0]
 8008b7a:	3503      	adds	r5, #3
 8008b7c:	1a6d      	subs	r5, r5, r1
 8008b7e:	f025 0503 	bic.w	r5, r5, #3
 8008b82:	3508      	adds	r5, #8
 8008b84:	2d0c      	cmp	r5, #12
 8008b86:	bf38      	it	cc
 8008b88:	250c      	movcc	r5, #12
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f7ff ffa5 	bl	8008adc <sbrk_aligned>
 8008b92:	3001      	adds	r0, #1
 8008b94:	d02b      	beq.n	8008bee <_malloc_r+0xd2>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	442b      	add	r3, r5
 8008b9a:	6023      	str	r3, [r4, #0]
 8008b9c:	e00e      	b.n	8008bbc <_malloc_r+0xa0>
 8008b9e:	6822      	ldr	r2, [r4, #0]
 8008ba0:	1b52      	subs	r2, r2, r5
 8008ba2:	d41e      	bmi.n	8008be2 <_malloc_r+0xc6>
 8008ba4:	2a0b      	cmp	r2, #11
 8008ba6:	d916      	bls.n	8008bd6 <_malloc_r+0xba>
 8008ba8:	1961      	adds	r1, r4, r5
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	6025      	str	r5, [r4, #0]
 8008bae:	bf18      	it	ne
 8008bb0:	6059      	strne	r1, [r3, #4]
 8008bb2:	6863      	ldr	r3, [r4, #4]
 8008bb4:	bf08      	it	eq
 8008bb6:	6031      	streq	r1, [r6, #0]
 8008bb8:	5162      	str	r2, [r4, r5]
 8008bba:	604b      	str	r3, [r1, #4]
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	f104 060b 	add.w	r6, r4, #11
 8008bc2:	f000 fe0b 	bl	80097dc <__malloc_unlock>
 8008bc6:	f026 0607 	bic.w	r6, r6, #7
 8008bca:	1d23      	adds	r3, r4, #4
 8008bcc:	1af2      	subs	r2, r6, r3
 8008bce:	d0b6      	beq.n	8008b3e <_malloc_r+0x22>
 8008bd0:	1b9b      	subs	r3, r3, r6
 8008bd2:	50a3      	str	r3, [r4, r2]
 8008bd4:	e7b3      	b.n	8008b3e <_malloc_r+0x22>
 8008bd6:	6862      	ldr	r2, [r4, #4]
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	bf0c      	ite	eq
 8008bdc:	6032      	streq	r2, [r6, #0]
 8008bde:	605a      	strne	r2, [r3, #4]
 8008be0:	e7ec      	b.n	8008bbc <_malloc_r+0xa0>
 8008be2:	4623      	mov	r3, r4
 8008be4:	6864      	ldr	r4, [r4, #4]
 8008be6:	e7b2      	b.n	8008b4e <_malloc_r+0x32>
 8008be8:	4634      	mov	r4, r6
 8008bea:	6876      	ldr	r6, [r6, #4]
 8008bec:	e7b9      	b.n	8008b62 <_malloc_r+0x46>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	603b      	str	r3, [r7, #0]
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	f000 fdf2 	bl	80097dc <__malloc_unlock>
 8008bf8:	e7a1      	b.n	8008b3e <_malloc_r+0x22>
 8008bfa:	6025      	str	r5, [r4, #0]
 8008bfc:	e7de      	b.n	8008bbc <_malloc_r+0xa0>
 8008bfe:	bf00      	nop
 8008c00:	20000a4c 	.word	0x20000a4c

08008c04 <__sfputc_r>:
 8008c04:	6893      	ldr	r3, [r2, #8]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	b410      	push	{r4}
 8008c0c:	6093      	str	r3, [r2, #8]
 8008c0e:	da08      	bge.n	8008c22 <__sfputc_r+0x1e>
 8008c10:	6994      	ldr	r4, [r2, #24]
 8008c12:	42a3      	cmp	r3, r4
 8008c14:	db01      	blt.n	8008c1a <__sfputc_r+0x16>
 8008c16:	290a      	cmp	r1, #10
 8008c18:	d103      	bne.n	8008c22 <__sfputc_r+0x1e>
 8008c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c1e:	f000 baef 	b.w	8009200 <__swbuf_r>
 8008c22:	6813      	ldr	r3, [r2, #0]
 8008c24:	1c58      	adds	r0, r3, #1
 8008c26:	6010      	str	r0, [r2, #0]
 8008c28:	7019      	strb	r1, [r3, #0]
 8008c2a:	4608      	mov	r0, r1
 8008c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <__sfputs_r>:
 8008c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c34:	4606      	mov	r6, r0
 8008c36:	460f      	mov	r7, r1
 8008c38:	4614      	mov	r4, r2
 8008c3a:	18d5      	adds	r5, r2, r3
 8008c3c:	42ac      	cmp	r4, r5
 8008c3e:	d101      	bne.n	8008c44 <__sfputs_r+0x12>
 8008c40:	2000      	movs	r0, #0
 8008c42:	e007      	b.n	8008c54 <__sfputs_r+0x22>
 8008c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c48:	463a      	mov	r2, r7
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f7ff ffda 	bl	8008c04 <__sfputc_r>
 8008c50:	1c43      	adds	r3, r0, #1
 8008c52:	d1f3      	bne.n	8008c3c <__sfputs_r+0xa>
 8008c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c58 <_vfiprintf_r>:
 8008c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5c:	460d      	mov	r5, r1
 8008c5e:	b09d      	sub	sp, #116	; 0x74
 8008c60:	4614      	mov	r4, r2
 8008c62:	4698      	mov	r8, r3
 8008c64:	4606      	mov	r6, r0
 8008c66:	b118      	cbz	r0, 8008c70 <_vfiprintf_r+0x18>
 8008c68:	6983      	ldr	r3, [r0, #24]
 8008c6a:	b90b      	cbnz	r3, 8008c70 <_vfiprintf_r+0x18>
 8008c6c:	f000 fcaa 	bl	80095c4 <__sinit>
 8008c70:	4b89      	ldr	r3, [pc, #548]	; (8008e98 <_vfiprintf_r+0x240>)
 8008c72:	429d      	cmp	r5, r3
 8008c74:	d11b      	bne.n	8008cae <_vfiprintf_r+0x56>
 8008c76:	6875      	ldr	r5, [r6, #4]
 8008c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c7a:	07d9      	lsls	r1, r3, #31
 8008c7c:	d405      	bmi.n	8008c8a <_vfiprintf_r+0x32>
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
 8008c80:	059a      	lsls	r2, r3, #22
 8008c82:	d402      	bmi.n	8008c8a <_vfiprintf_r+0x32>
 8008c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c86:	f000 fd3b 	bl	8009700 <__retarget_lock_acquire_recursive>
 8008c8a:	89ab      	ldrh	r3, [r5, #12]
 8008c8c:	071b      	lsls	r3, r3, #28
 8008c8e:	d501      	bpl.n	8008c94 <_vfiprintf_r+0x3c>
 8008c90:	692b      	ldr	r3, [r5, #16]
 8008c92:	b9eb      	cbnz	r3, 8008cd0 <_vfiprintf_r+0x78>
 8008c94:	4629      	mov	r1, r5
 8008c96:	4630      	mov	r0, r6
 8008c98:	f000 fb04 	bl	80092a4 <__swsetup_r>
 8008c9c:	b1c0      	cbz	r0, 8008cd0 <_vfiprintf_r+0x78>
 8008c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ca0:	07dc      	lsls	r4, r3, #31
 8008ca2:	d50e      	bpl.n	8008cc2 <_vfiprintf_r+0x6a>
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	b01d      	add	sp, #116	; 0x74
 8008caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cae:	4b7b      	ldr	r3, [pc, #492]	; (8008e9c <_vfiprintf_r+0x244>)
 8008cb0:	429d      	cmp	r5, r3
 8008cb2:	d101      	bne.n	8008cb8 <_vfiprintf_r+0x60>
 8008cb4:	68b5      	ldr	r5, [r6, #8]
 8008cb6:	e7df      	b.n	8008c78 <_vfiprintf_r+0x20>
 8008cb8:	4b79      	ldr	r3, [pc, #484]	; (8008ea0 <_vfiprintf_r+0x248>)
 8008cba:	429d      	cmp	r5, r3
 8008cbc:	bf08      	it	eq
 8008cbe:	68f5      	ldreq	r5, [r6, #12]
 8008cc0:	e7da      	b.n	8008c78 <_vfiprintf_r+0x20>
 8008cc2:	89ab      	ldrh	r3, [r5, #12]
 8008cc4:	0598      	lsls	r0, r3, #22
 8008cc6:	d4ed      	bmi.n	8008ca4 <_vfiprintf_r+0x4c>
 8008cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cca:	f000 fd1a 	bl	8009702 <__retarget_lock_release_recursive>
 8008cce:	e7e9      	b.n	8008ca4 <_vfiprintf_r+0x4c>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cde:	2330      	movs	r3, #48	; 0x30
 8008ce0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ea4 <_vfiprintf_r+0x24c>
 8008ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ce8:	f04f 0901 	mov.w	r9, #1
 8008cec:	4623      	mov	r3, r4
 8008cee:	469a      	mov	sl, r3
 8008cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cf4:	b10a      	cbz	r2, 8008cfa <_vfiprintf_r+0xa2>
 8008cf6:	2a25      	cmp	r2, #37	; 0x25
 8008cf8:	d1f9      	bne.n	8008cee <_vfiprintf_r+0x96>
 8008cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8008cfe:	d00b      	beq.n	8008d18 <_vfiprintf_r+0xc0>
 8008d00:	465b      	mov	r3, fp
 8008d02:	4622      	mov	r2, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff ff93 	bl	8008c32 <__sfputs_r>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	f000 80aa 	beq.w	8008e66 <_vfiprintf_r+0x20e>
 8008d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d14:	445a      	add	r2, fp
 8008d16:	9209      	str	r2, [sp, #36]	; 0x24
 8008d18:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 80a2 	beq.w	8008e66 <_vfiprintf_r+0x20e>
 8008d22:	2300      	movs	r3, #0
 8008d24:	f04f 32ff 	mov.w	r2, #4294967295
 8008d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d2c:	f10a 0a01 	add.w	sl, sl, #1
 8008d30:	9304      	str	r3, [sp, #16]
 8008d32:	9307      	str	r3, [sp, #28]
 8008d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d38:	931a      	str	r3, [sp, #104]	; 0x68
 8008d3a:	4654      	mov	r4, sl
 8008d3c:	2205      	movs	r2, #5
 8008d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d42:	4858      	ldr	r0, [pc, #352]	; (8008ea4 <_vfiprintf_r+0x24c>)
 8008d44:	f7f7 fa5c 	bl	8000200 <memchr>
 8008d48:	9a04      	ldr	r2, [sp, #16]
 8008d4a:	b9d8      	cbnz	r0, 8008d84 <_vfiprintf_r+0x12c>
 8008d4c:	06d1      	lsls	r1, r2, #27
 8008d4e:	bf44      	itt	mi
 8008d50:	2320      	movmi	r3, #32
 8008d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d56:	0713      	lsls	r3, r2, #28
 8008d58:	bf44      	itt	mi
 8008d5a:	232b      	movmi	r3, #43	; 0x2b
 8008d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d60:	f89a 3000 	ldrb.w	r3, [sl]
 8008d64:	2b2a      	cmp	r3, #42	; 0x2a
 8008d66:	d015      	beq.n	8008d94 <_vfiprintf_r+0x13c>
 8008d68:	9a07      	ldr	r2, [sp, #28]
 8008d6a:	4654      	mov	r4, sl
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	f04f 0c0a 	mov.w	ip, #10
 8008d72:	4621      	mov	r1, r4
 8008d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d78:	3b30      	subs	r3, #48	; 0x30
 8008d7a:	2b09      	cmp	r3, #9
 8008d7c:	d94e      	bls.n	8008e1c <_vfiprintf_r+0x1c4>
 8008d7e:	b1b0      	cbz	r0, 8008dae <_vfiprintf_r+0x156>
 8008d80:	9207      	str	r2, [sp, #28]
 8008d82:	e014      	b.n	8008dae <_vfiprintf_r+0x156>
 8008d84:	eba0 0308 	sub.w	r3, r0, r8
 8008d88:	fa09 f303 	lsl.w	r3, r9, r3
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	9304      	str	r3, [sp, #16]
 8008d90:	46a2      	mov	sl, r4
 8008d92:	e7d2      	b.n	8008d3a <_vfiprintf_r+0xe2>
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	1d19      	adds	r1, r3, #4
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	9103      	str	r1, [sp, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bfbb      	ittet	lt
 8008da0:	425b      	neglt	r3, r3
 8008da2:	f042 0202 	orrlt.w	r2, r2, #2
 8008da6:	9307      	strge	r3, [sp, #28]
 8008da8:	9307      	strlt	r3, [sp, #28]
 8008daa:	bfb8      	it	lt
 8008dac:	9204      	strlt	r2, [sp, #16]
 8008dae:	7823      	ldrb	r3, [r4, #0]
 8008db0:	2b2e      	cmp	r3, #46	; 0x2e
 8008db2:	d10c      	bne.n	8008dce <_vfiprintf_r+0x176>
 8008db4:	7863      	ldrb	r3, [r4, #1]
 8008db6:	2b2a      	cmp	r3, #42	; 0x2a
 8008db8:	d135      	bne.n	8008e26 <_vfiprintf_r+0x1ce>
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	1d1a      	adds	r2, r3, #4
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	9203      	str	r2, [sp, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfb8      	it	lt
 8008dc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dca:	3402      	adds	r4, #2
 8008dcc:	9305      	str	r3, [sp, #20]
 8008dce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008eb4 <_vfiprintf_r+0x25c>
 8008dd2:	7821      	ldrb	r1, [r4, #0]
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	4650      	mov	r0, sl
 8008dd8:	f7f7 fa12 	bl	8000200 <memchr>
 8008ddc:	b140      	cbz	r0, 8008df0 <_vfiprintf_r+0x198>
 8008dde:	2340      	movs	r3, #64	; 0x40
 8008de0:	eba0 000a 	sub.w	r0, r0, sl
 8008de4:	fa03 f000 	lsl.w	r0, r3, r0
 8008de8:	9b04      	ldr	r3, [sp, #16]
 8008dea:	4303      	orrs	r3, r0
 8008dec:	3401      	adds	r4, #1
 8008dee:	9304      	str	r3, [sp, #16]
 8008df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df4:	482c      	ldr	r0, [pc, #176]	; (8008ea8 <_vfiprintf_r+0x250>)
 8008df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dfa:	2206      	movs	r2, #6
 8008dfc:	f7f7 fa00 	bl	8000200 <memchr>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d03f      	beq.n	8008e84 <_vfiprintf_r+0x22c>
 8008e04:	4b29      	ldr	r3, [pc, #164]	; (8008eac <_vfiprintf_r+0x254>)
 8008e06:	bb1b      	cbnz	r3, 8008e50 <_vfiprintf_r+0x1f8>
 8008e08:	9b03      	ldr	r3, [sp, #12]
 8008e0a:	3307      	adds	r3, #7
 8008e0c:	f023 0307 	bic.w	r3, r3, #7
 8008e10:	3308      	adds	r3, #8
 8008e12:	9303      	str	r3, [sp, #12]
 8008e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e16:	443b      	add	r3, r7
 8008e18:	9309      	str	r3, [sp, #36]	; 0x24
 8008e1a:	e767      	b.n	8008cec <_vfiprintf_r+0x94>
 8008e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e20:	460c      	mov	r4, r1
 8008e22:	2001      	movs	r0, #1
 8008e24:	e7a5      	b.n	8008d72 <_vfiprintf_r+0x11a>
 8008e26:	2300      	movs	r3, #0
 8008e28:	3401      	adds	r4, #1
 8008e2a:	9305      	str	r3, [sp, #20]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	f04f 0c0a 	mov.w	ip, #10
 8008e32:	4620      	mov	r0, r4
 8008e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e38:	3a30      	subs	r2, #48	; 0x30
 8008e3a:	2a09      	cmp	r2, #9
 8008e3c:	d903      	bls.n	8008e46 <_vfiprintf_r+0x1ee>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0c5      	beq.n	8008dce <_vfiprintf_r+0x176>
 8008e42:	9105      	str	r1, [sp, #20]
 8008e44:	e7c3      	b.n	8008dce <_vfiprintf_r+0x176>
 8008e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e7f0      	b.n	8008e32 <_vfiprintf_r+0x1da>
 8008e50:	ab03      	add	r3, sp, #12
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	462a      	mov	r2, r5
 8008e56:	4b16      	ldr	r3, [pc, #88]	; (8008eb0 <_vfiprintf_r+0x258>)
 8008e58:	a904      	add	r1, sp, #16
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f3af 8000 	nop.w
 8008e60:	4607      	mov	r7, r0
 8008e62:	1c78      	adds	r0, r7, #1
 8008e64:	d1d6      	bne.n	8008e14 <_vfiprintf_r+0x1bc>
 8008e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e68:	07d9      	lsls	r1, r3, #31
 8008e6a:	d405      	bmi.n	8008e78 <_vfiprintf_r+0x220>
 8008e6c:	89ab      	ldrh	r3, [r5, #12]
 8008e6e:	059a      	lsls	r2, r3, #22
 8008e70:	d402      	bmi.n	8008e78 <_vfiprintf_r+0x220>
 8008e72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e74:	f000 fc45 	bl	8009702 <__retarget_lock_release_recursive>
 8008e78:	89ab      	ldrh	r3, [r5, #12]
 8008e7a:	065b      	lsls	r3, r3, #25
 8008e7c:	f53f af12 	bmi.w	8008ca4 <_vfiprintf_r+0x4c>
 8008e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e82:	e711      	b.n	8008ca8 <_vfiprintf_r+0x50>
 8008e84:	ab03      	add	r3, sp, #12
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	462a      	mov	r2, r5
 8008e8a:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <_vfiprintf_r+0x258>)
 8008e8c:	a904      	add	r1, sp, #16
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f000 f880 	bl	8008f94 <_printf_i>
 8008e94:	e7e4      	b.n	8008e60 <_vfiprintf_r+0x208>
 8008e96:	bf00      	nop
 8008e98:	08009da0 	.word	0x08009da0
 8008e9c:	08009dc0 	.word	0x08009dc0
 8008ea0:	08009d80 	.word	0x08009d80
 8008ea4:	08009d4c 	.word	0x08009d4c
 8008ea8:	08009d56 	.word	0x08009d56
 8008eac:	00000000 	.word	0x00000000
 8008eb0:	08008c33 	.word	0x08008c33
 8008eb4:	08009d52 	.word	0x08009d52

08008eb8 <_printf_common>:
 8008eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	4616      	mov	r6, r2
 8008ebe:	4699      	mov	r9, r3
 8008ec0:	688a      	ldr	r2, [r1, #8]
 8008ec2:	690b      	ldr	r3, [r1, #16]
 8008ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	bfb8      	it	lt
 8008ecc:	4613      	movlt	r3, r2
 8008ece:	6033      	str	r3, [r6, #0]
 8008ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ed4:	4607      	mov	r7, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	b10a      	cbz	r2, 8008ede <_printf_common+0x26>
 8008eda:	3301      	adds	r3, #1
 8008edc:	6033      	str	r3, [r6, #0]
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	0699      	lsls	r1, r3, #26
 8008ee2:	bf42      	ittt	mi
 8008ee4:	6833      	ldrmi	r3, [r6, #0]
 8008ee6:	3302      	addmi	r3, #2
 8008ee8:	6033      	strmi	r3, [r6, #0]
 8008eea:	6825      	ldr	r5, [r4, #0]
 8008eec:	f015 0506 	ands.w	r5, r5, #6
 8008ef0:	d106      	bne.n	8008f00 <_printf_common+0x48>
 8008ef2:	f104 0a19 	add.w	sl, r4, #25
 8008ef6:	68e3      	ldr	r3, [r4, #12]
 8008ef8:	6832      	ldr	r2, [r6, #0]
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	dc26      	bgt.n	8008f4e <_printf_common+0x96>
 8008f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f04:	1e13      	subs	r3, r2, #0
 8008f06:	6822      	ldr	r2, [r4, #0]
 8008f08:	bf18      	it	ne
 8008f0a:	2301      	movne	r3, #1
 8008f0c:	0692      	lsls	r2, r2, #26
 8008f0e:	d42b      	bmi.n	8008f68 <_printf_common+0xb0>
 8008f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f14:	4649      	mov	r1, r9
 8008f16:	4638      	mov	r0, r7
 8008f18:	47c0      	blx	r8
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	d01e      	beq.n	8008f5c <_printf_common+0xa4>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	68e5      	ldr	r5, [r4, #12]
 8008f22:	6832      	ldr	r2, [r6, #0]
 8008f24:	f003 0306 	and.w	r3, r3, #6
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	bf08      	it	eq
 8008f2c:	1aad      	subeq	r5, r5, r2
 8008f2e:	68a3      	ldr	r3, [r4, #8]
 8008f30:	6922      	ldr	r2, [r4, #16]
 8008f32:	bf0c      	ite	eq
 8008f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f38:	2500      	movne	r5, #0
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	bfc4      	itt	gt
 8008f3e:	1a9b      	subgt	r3, r3, r2
 8008f40:	18ed      	addgt	r5, r5, r3
 8008f42:	2600      	movs	r6, #0
 8008f44:	341a      	adds	r4, #26
 8008f46:	42b5      	cmp	r5, r6
 8008f48:	d11a      	bne.n	8008f80 <_printf_common+0xc8>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	e008      	b.n	8008f60 <_printf_common+0xa8>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4652      	mov	r2, sl
 8008f52:	4649      	mov	r1, r9
 8008f54:	4638      	mov	r0, r7
 8008f56:	47c0      	blx	r8
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d103      	bne.n	8008f64 <_printf_common+0xac>
 8008f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f64:	3501      	adds	r5, #1
 8008f66:	e7c6      	b.n	8008ef6 <_printf_common+0x3e>
 8008f68:	18e1      	adds	r1, r4, r3
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	2030      	movs	r0, #48	; 0x30
 8008f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f72:	4422      	add	r2, r4
 8008f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	e7c7      	b.n	8008f10 <_printf_common+0x58>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4622      	mov	r2, r4
 8008f84:	4649      	mov	r1, r9
 8008f86:	4638      	mov	r0, r7
 8008f88:	47c0      	blx	r8
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d0e6      	beq.n	8008f5c <_printf_common+0xa4>
 8008f8e:	3601      	adds	r6, #1
 8008f90:	e7d9      	b.n	8008f46 <_printf_common+0x8e>
	...

08008f94 <_printf_i>:
 8008f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f98:	7e0f      	ldrb	r7, [r1, #24]
 8008f9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f9c:	2f78      	cmp	r7, #120	; 0x78
 8008f9e:	4691      	mov	r9, r2
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	469a      	mov	sl, r3
 8008fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008faa:	d807      	bhi.n	8008fbc <_printf_i+0x28>
 8008fac:	2f62      	cmp	r7, #98	; 0x62
 8008fae:	d80a      	bhi.n	8008fc6 <_printf_i+0x32>
 8008fb0:	2f00      	cmp	r7, #0
 8008fb2:	f000 80d8 	beq.w	8009166 <_printf_i+0x1d2>
 8008fb6:	2f58      	cmp	r7, #88	; 0x58
 8008fb8:	f000 80a3 	beq.w	8009102 <_printf_i+0x16e>
 8008fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fc4:	e03a      	b.n	800903c <_printf_i+0xa8>
 8008fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fca:	2b15      	cmp	r3, #21
 8008fcc:	d8f6      	bhi.n	8008fbc <_printf_i+0x28>
 8008fce:	a101      	add	r1, pc, #4	; (adr r1, 8008fd4 <_printf_i+0x40>)
 8008fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fd4:	0800902d 	.word	0x0800902d
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	08008fbd 	.word	0x08008fbd
 8008fe0:	08008fbd 	.word	0x08008fbd
 8008fe4:	08008fbd 	.word	0x08008fbd
 8008fe8:	08008fbd 	.word	0x08008fbd
 8008fec:	08009041 	.word	0x08009041
 8008ff0:	08008fbd 	.word	0x08008fbd
 8008ff4:	08008fbd 	.word	0x08008fbd
 8008ff8:	08008fbd 	.word	0x08008fbd
 8008ffc:	08008fbd 	.word	0x08008fbd
 8009000:	0800914d 	.word	0x0800914d
 8009004:	08009071 	.word	0x08009071
 8009008:	0800912f 	.word	0x0800912f
 800900c:	08008fbd 	.word	0x08008fbd
 8009010:	08008fbd 	.word	0x08008fbd
 8009014:	0800916f 	.word	0x0800916f
 8009018:	08008fbd 	.word	0x08008fbd
 800901c:	08009071 	.word	0x08009071
 8009020:	08008fbd 	.word	0x08008fbd
 8009024:	08008fbd 	.word	0x08008fbd
 8009028:	08009137 	.word	0x08009137
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	1d1a      	adds	r2, r3, #4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	602a      	str	r2, [r5, #0]
 8009034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800903c:	2301      	movs	r3, #1
 800903e:	e0a3      	b.n	8009188 <_printf_i+0x1f4>
 8009040:	6820      	ldr	r0, [r4, #0]
 8009042:	6829      	ldr	r1, [r5, #0]
 8009044:	0606      	lsls	r6, r0, #24
 8009046:	f101 0304 	add.w	r3, r1, #4
 800904a:	d50a      	bpl.n	8009062 <_printf_i+0xce>
 800904c:	680e      	ldr	r6, [r1, #0]
 800904e:	602b      	str	r3, [r5, #0]
 8009050:	2e00      	cmp	r6, #0
 8009052:	da03      	bge.n	800905c <_printf_i+0xc8>
 8009054:	232d      	movs	r3, #45	; 0x2d
 8009056:	4276      	negs	r6, r6
 8009058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800905c:	485e      	ldr	r0, [pc, #376]	; (80091d8 <_printf_i+0x244>)
 800905e:	230a      	movs	r3, #10
 8009060:	e019      	b.n	8009096 <_printf_i+0x102>
 8009062:	680e      	ldr	r6, [r1, #0]
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	f010 0f40 	tst.w	r0, #64	; 0x40
 800906a:	bf18      	it	ne
 800906c:	b236      	sxthne	r6, r6
 800906e:	e7ef      	b.n	8009050 <_printf_i+0xbc>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	6820      	ldr	r0, [r4, #0]
 8009074:	1d19      	adds	r1, r3, #4
 8009076:	6029      	str	r1, [r5, #0]
 8009078:	0601      	lsls	r1, r0, #24
 800907a:	d501      	bpl.n	8009080 <_printf_i+0xec>
 800907c:	681e      	ldr	r6, [r3, #0]
 800907e:	e002      	b.n	8009086 <_printf_i+0xf2>
 8009080:	0646      	lsls	r6, r0, #25
 8009082:	d5fb      	bpl.n	800907c <_printf_i+0xe8>
 8009084:	881e      	ldrh	r6, [r3, #0]
 8009086:	4854      	ldr	r0, [pc, #336]	; (80091d8 <_printf_i+0x244>)
 8009088:	2f6f      	cmp	r7, #111	; 0x6f
 800908a:	bf0c      	ite	eq
 800908c:	2308      	moveq	r3, #8
 800908e:	230a      	movne	r3, #10
 8009090:	2100      	movs	r1, #0
 8009092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009096:	6865      	ldr	r5, [r4, #4]
 8009098:	60a5      	str	r5, [r4, #8]
 800909a:	2d00      	cmp	r5, #0
 800909c:	bfa2      	ittt	ge
 800909e:	6821      	ldrge	r1, [r4, #0]
 80090a0:	f021 0104 	bicge.w	r1, r1, #4
 80090a4:	6021      	strge	r1, [r4, #0]
 80090a6:	b90e      	cbnz	r6, 80090ac <_printf_i+0x118>
 80090a8:	2d00      	cmp	r5, #0
 80090aa:	d04d      	beq.n	8009148 <_printf_i+0x1b4>
 80090ac:	4615      	mov	r5, r2
 80090ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80090b2:	fb03 6711 	mls	r7, r3, r1, r6
 80090b6:	5dc7      	ldrb	r7, [r0, r7]
 80090b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090bc:	4637      	mov	r7, r6
 80090be:	42bb      	cmp	r3, r7
 80090c0:	460e      	mov	r6, r1
 80090c2:	d9f4      	bls.n	80090ae <_printf_i+0x11a>
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d10b      	bne.n	80090e0 <_printf_i+0x14c>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	07de      	lsls	r6, r3, #31
 80090cc:	d508      	bpl.n	80090e0 <_printf_i+0x14c>
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	6861      	ldr	r1, [r4, #4]
 80090d2:	4299      	cmp	r1, r3
 80090d4:	bfde      	ittt	le
 80090d6:	2330      	movle	r3, #48	; 0x30
 80090d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090e0:	1b52      	subs	r2, r2, r5
 80090e2:	6122      	str	r2, [r4, #16]
 80090e4:	f8cd a000 	str.w	sl, [sp]
 80090e8:	464b      	mov	r3, r9
 80090ea:	aa03      	add	r2, sp, #12
 80090ec:	4621      	mov	r1, r4
 80090ee:	4640      	mov	r0, r8
 80090f0:	f7ff fee2 	bl	8008eb8 <_printf_common>
 80090f4:	3001      	adds	r0, #1
 80090f6:	d14c      	bne.n	8009192 <_printf_i+0x1fe>
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295
 80090fc:	b004      	add	sp, #16
 80090fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009102:	4835      	ldr	r0, [pc, #212]	; (80091d8 <_printf_i+0x244>)
 8009104:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009108:	6829      	ldr	r1, [r5, #0]
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009110:	6029      	str	r1, [r5, #0]
 8009112:	061d      	lsls	r5, r3, #24
 8009114:	d514      	bpl.n	8009140 <_printf_i+0x1ac>
 8009116:	07df      	lsls	r7, r3, #31
 8009118:	bf44      	itt	mi
 800911a:	f043 0320 	orrmi.w	r3, r3, #32
 800911e:	6023      	strmi	r3, [r4, #0]
 8009120:	b91e      	cbnz	r6, 800912a <_printf_i+0x196>
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	f023 0320 	bic.w	r3, r3, #32
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	2310      	movs	r3, #16
 800912c:	e7b0      	b.n	8009090 <_printf_i+0xfc>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	f043 0320 	orr.w	r3, r3, #32
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	2378      	movs	r3, #120	; 0x78
 8009138:	4828      	ldr	r0, [pc, #160]	; (80091dc <_printf_i+0x248>)
 800913a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800913e:	e7e3      	b.n	8009108 <_printf_i+0x174>
 8009140:	0659      	lsls	r1, r3, #25
 8009142:	bf48      	it	mi
 8009144:	b2b6      	uxthmi	r6, r6
 8009146:	e7e6      	b.n	8009116 <_printf_i+0x182>
 8009148:	4615      	mov	r5, r2
 800914a:	e7bb      	b.n	80090c4 <_printf_i+0x130>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	6826      	ldr	r6, [r4, #0]
 8009150:	6961      	ldr	r1, [r4, #20]
 8009152:	1d18      	adds	r0, r3, #4
 8009154:	6028      	str	r0, [r5, #0]
 8009156:	0635      	lsls	r5, r6, #24
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	d501      	bpl.n	8009160 <_printf_i+0x1cc>
 800915c:	6019      	str	r1, [r3, #0]
 800915e:	e002      	b.n	8009166 <_printf_i+0x1d2>
 8009160:	0670      	lsls	r0, r6, #25
 8009162:	d5fb      	bpl.n	800915c <_printf_i+0x1c8>
 8009164:	8019      	strh	r1, [r3, #0]
 8009166:	2300      	movs	r3, #0
 8009168:	6123      	str	r3, [r4, #16]
 800916a:	4615      	mov	r5, r2
 800916c:	e7ba      	b.n	80090e4 <_printf_i+0x150>
 800916e:	682b      	ldr	r3, [r5, #0]
 8009170:	1d1a      	adds	r2, r3, #4
 8009172:	602a      	str	r2, [r5, #0]
 8009174:	681d      	ldr	r5, [r3, #0]
 8009176:	6862      	ldr	r2, [r4, #4]
 8009178:	2100      	movs	r1, #0
 800917a:	4628      	mov	r0, r5
 800917c:	f7f7 f840 	bl	8000200 <memchr>
 8009180:	b108      	cbz	r0, 8009186 <_printf_i+0x1f2>
 8009182:	1b40      	subs	r0, r0, r5
 8009184:	6060      	str	r0, [r4, #4]
 8009186:	6863      	ldr	r3, [r4, #4]
 8009188:	6123      	str	r3, [r4, #16]
 800918a:	2300      	movs	r3, #0
 800918c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009190:	e7a8      	b.n	80090e4 <_printf_i+0x150>
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	462a      	mov	r2, r5
 8009196:	4649      	mov	r1, r9
 8009198:	4640      	mov	r0, r8
 800919a:	47d0      	blx	sl
 800919c:	3001      	adds	r0, #1
 800919e:	d0ab      	beq.n	80090f8 <_printf_i+0x164>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	079b      	lsls	r3, r3, #30
 80091a4:	d413      	bmi.n	80091ce <_printf_i+0x23a>
 80091a6:	68e0      	ldr	r0, [r4, #12]
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	4298      	cmp	r0, r3
 80091ac:	bfb8      	it	lt
 80091ae:	4618      	movlt	r0, r3
 80091b0:	e7a4      	b.n	80090fc <_printf_i+0x168>
 80091b2:	2301      	movs	r3, #1
 80091b4:	4632      	mov	r2, r6
 80091b6:	4649      	mov	r1, r9
 80091b8:	4640      	mov	r0, r8
 80091ba:	47d0      	blx	sl
 80091bc:	3001      	adds	r0, #1
 80091be:	d09b      	beq.n	80090f8 <_printf_i+0x164>
 80091c0:	3501      	adds	r5, #1
 80091c2:	68e3      	ldr	r3, [r4, #12]
 80091c4:	9903      	ldr	r1, [sp, #12]
 80091c6:	1a5b      	subs	r3, r3, r1
 80091c8:	42ab      	cmp	r3, r5
 80091ca:	dcf2      	bgt.n	80091b2 <_printf_i+0x21e>
 80091cc:	e7eb      	b.n	80091a6 <_printf_i+0x212>
 80091ce:	2500      	movs	r5, #0
 80091d0:	f104 0619 	add.w	r6, r4, #25
 80091d4:	e7f5      	b.n	80091c2 <_printf_i+0x22e>
 80091d6:	bf00      	nop
 80091d8:	08009d5d 	.word	0x08009d5d
 80091dc:	08009d6e 	.word	0x08009d6e

080091e0 <_sbrk_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d06      	ldr	r5, [pc, #24]	; (80091fc <_sbrk_r+0x1c>)
 80091e4:	2300      	movs	r3, #0
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	602b      	str	r3, [r5, #0]
 80091ec:	f7fb fb9c 	bl	8004928 <_sbrk>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_sbrk_r+0x1a>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_sbrk_r+0x1a>
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	20000a58 	.word	0x20000a58

08009200 <__swbuf_r>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	460e      	mov	r6, r1
 8009204:	4614      	mov	r4, r2
 8009206:	4605      	mov	r5, r0
 8009208:	b118      	cbz	r0, 8009212 <__swbuf_r+0x12>
 800920a:	6983      	ldr	r3, [r0, #24]
 800920c:	b90b      	cbnz	r3, 8009212 <__swbuf_r+0x12>
 800920e:	f000 f9d9 	bl	80095c4 <__sinit>
 8009212:	4b21      	ldr	r3, [pc, #132]	; (8009298 <__swbuf_r+0x98>)
 8009214:	429c      	cmp	r4, r3
 8009216:	d12b      	bne.n	8009270 <__swbuf_r+0x70>
 8009218:	686c      	ldr	r4, [r5, #4]
 800921a:	69a3      	ldr	r3, [r4, #24]
 800921c:	60a3      	str	r3, [r4, #8]
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	071a      	lsls	r2, r3, #28
 8009222:	d52f      	bpl.n	8009284 <__swbuf_r+0x84>
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	b36b      	cbz	r3, 8009284 <__swbuf_r+0x84>
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	6820      	ldr	r0, [r4, #0]
 800922c:	1ac0      	subs	r0, r0, r3
 800922e:	6963      	ldr	r3, [r4, #20]
 8009230:	b2f6      	uxtb	r6, r6
 8009232:	4283      	cmp	r3, r0
 8009234:	4637      	mov	r7, r6
 8009236:	dc04      	bgt.n	8009242 <__swbuf_r+0x42>
 8009238:	4621      	mov	r1, r4
 800923a:	4628      	mov	r0, r5
 800923c:	f000 f92e 	bl	800949c <_fflush_r>
 8009240:	bb30      	cbnz	r0, 8009290 <__swbuf_r+0x90>
 8009242:	68a3      	ldr	r3, [r4, #8]
 8009244:	3b01      	subs	r3, #1
 8009246:	60a3      	str	r3, [r4, #8]
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	6022      	str	r2, [r4, #0]
 800924e:	701e      	strb	r6, [r3, #0]
 8009250:	6963      	ldr	r3, [r4, #20]
 8009252:	3001      	adds	r0, #1
 8009254:	4283      	cmp	r3, r0
 8009256:	d004      	beq.n	8009262 <__swbuf_r+0x62>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	07db      	lsls	r3, r3, #31
 800925c:	d506      	bpl.n	800926c <__swbuf_r+0x6c>
 800925e:	2e0a      	cmp	r6, #10
 8009260:	d104      	bne.n	800926c <__swbuf_r+0x6c>
 8009262:	4621      	mov	r1, r4
 8009264:	4628      	mov	r0, r5
 8009266:	f000 f919 	bl	800949c <_fflush_r>
 800926a:	b988      	cbnz	r0, 8009290 <__swbuf_r+0x90>
 800926c:	4638      	mov	r0, r7
 800926e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009270:	4b0a      	ldr	r3, [pc, #40]	; (800929c <__swbuf_r+0x9c>)
 8009272:	429c      	cmp	r4, r3
 8009274:	d101      	bne.n	800927a <__swbuf_r+0x7a>
 8009276:	68ac      	ldr	r4, [r5, #8]
 8009278:	e7cf      	b.n	800921a <__swbuf_r+0x1a>
 800927a:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <__swbuf_r+0xa0>)
 800927c:	429c      	cmp	r4, r3
 800927e:	bf08      	it	eq
 8009280:	68ec      	ldreq	r4, [r5, #12]
 8009282:	e7ca      	b.n	800921a <__swbuf_r+0x1a>
 8009284:	4621      	mov	r1, r4
 8009286:	4628      	mov	r0, r5
 8009288:	f000 f80c 	bl	80092a4 <__swsetup_r>
 800928c:	2800      	cmp	r0, #0
 800928e:	d0cb      	beq.n	8009228 <__swbuf_r+0x28>
 8009290:	f04f 37ff 	mov.w	r7, #4294967295
 8009294:	e7ea      	b.n	800926c <__swbuf_r+0x6c>
 8009296:	bf00      	nop
 8009298:	08009da0 	.word	0x08009da0
 800929c:	08009dc0 	.word	0x08009dc0
 80092a0:	08009d80 	.word	0x08009d80

080092a4 <__swsetup_r>:
 80092a4:	4b32      	ldr	r3, [pc, #200]	; (8009370 <__swsetup_r+0xcc>)
 80092a6:	b570      	push	{r4, r5, r6, lr}
 80092a8:	681d      	ldr	r5, [r3, #0]
 80092aa:	4606      	mov	r6, r0
 80092ac:	460c      	mov	r4, r1
 80092ae:	b125      	cbz	r5, 80092ba <__swsetup_r+0x16>
 80092b0:	69ab      	ldr	r3, [r5, #24]
 80092b2:	b913      	cbnz	r3, 80092ba <__swsetup_r+0x16>
 80092b4:	4628      	mov	r0, r5
 80092b6:	f000 f985 	bl	80095c4 <__sinit>
 80092ba:	4b2e      	ldr	r3, [pc, #184]	; (8009374 <__swsetup_r+0xd0>)
 80092bc:	429c      	cmp	r4, r3
 80092be:	d10f      	bne.n	80092e0 <__swsetup_r+0x3c>
 80092c0:	686c      	ldr	r4, [r5, #4]
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092c8:	0719      	lsls	r1, r3, #28
 80092ca:	d42c      	bmi.n	8009326 <__swsetup_r+0x82>
 80092cc:	06dd      	lsls	r5, r3, #27
 80092ce:	d411      	bmi.n	80092f4 <__swsetup_r+0x50>
 80092d0:	2309      	movs	r3, #9
 80092d2:	6033      	str	r3, [r6, #0]
 80092d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	f04f 30ff 	mov.w	r0, #4294967295
 80092de:	e03e      	b.n	800935e <__swsetup_r+0xba>
 80092e0:	4b25      	ldr	r3, [pc, #148]	; (8009378 <__swsetup_r+0xd4>)
 80092e2:	429c      	cmp	r4, r3
 80092e4:	d101      	bne.n	80092ea <__swsetup_r+0x46>
 80092e6:	68ac      	ldr	r4, [r5, #8]
 80092e8:	e7eb      	b.n	80092c2 <__swsetup_r+0x1e>
 80092ea:	4b24      	ldr	r3, [pc, #144]	; (800937c <__swsetup_r+0xd8>)
 80092ec:	429c      	cmp	r4, r3
 80092ee:	bf08      	it	eq
 80092f0:	68ec      	ldreq	r4, [r5, #12]
 80092f2:	e7e6      	b.n	80092c2 <__swsetup_r+0x1e>
 80092f4:	0758      	lsls	r0, r3, #29
 80092f6:	d512      	bpl.n	800931e <__swsetup_r+0x7a>
 80092f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092fa:	b141      	cbz	r1, 800930e <__swsetup_r+0x6a>
 80092fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009300:	4299      	cmp	r1, r3
 8009302:	d002      	beq.n	800930a <__swsetup_r+0x66>
 8009304:	4630      	mov	r0, r6
 8009306:	f7ff fb9d 	bl	8008a44 <_free_r>
 800930a:	2300      	movs	r3, #0
 800930c:	6363      	str	r3, [r4, #52]	; 0x34
 800930e:	89a3      	ldrh	r3, [r4, #12]
 8009310:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	2300      	movs	r3, #0
 8009318:	6063      	str	r3, [r4, #4]
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	f043 0308 	orr.w	r3, r3, #8
 8009324:	81a3      	strh	r3, [r4, #12]
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	b94b      	cbnz	r3, 800933e <__swsetup_r+0x9a>
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009334:	d003      	beq.n	800933e <__swsetup_r+0x9a>
 8009336:	4621      	mov	r1, r4
 8009338:	4630      	mov	r0, r6
 800933a:	f000 fa09 	bl	8009750 <__smakebuf_r>
 800933e:	89a0      	ldrh	r0, [r4, #12]
 8009340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009344:	f010 0301 	ands.w	r3, r0, #1
 8009348:	d00a      	beq.n	8009360 <__swsetup_r+0xbc>
 800934a:	2300      	movs	r3, #0
 800934c:	60a3      	str	r3, [r4, #8]
 800934e:	6963      	ldr	r3, [r4, #20]
 8009350:	425b      	negs	r3, r3
 8009352:	61a3      	str	r3, [r4, #24]
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	b943      	cbnz	r3, 800936a <__swsetup_r+0xc6>
 8009358:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800935c:	d1ba      	bne.n	80092d4 <__swsetup_r+0x30>
 800935e:	bd70      	pop	{r4, r5, r6, pc}
 8009360:	0781      	lsls	r1, r0, #30
 8009362:	bf58      	it	pl
 8009364:	6963      	ldrpl	r3, [r4, #20]
 8009366:	60a3      	str	r3, [r4, #8]
 8009368:	e7f4      	b.n	8009354 <__swsetup_r+0xb0>
 800936a:	2000      	movs	r0, #0
 800936c:	e7f7      	b.n	800935e <__swsetup_r+0xba>
 800936e:	bf00      	nop
 8009370:	20000208 	.word	0x20000208
 8009374:	08009da0 	.word	0x08009da0
 8009378:	08009dc0 	.word	0x08009dc0
 800937c:	08009d80 	.word	0x08009d80

08009380 <abort>:
 8009380:	b508      	push	{r3, lr}
 8009382:	2006      	movs	r0, #6
 8009384:	f000 fa58 	bl	8009838 <raise>
 8009388:	2001      	movs	r0, #1
 800938a:	f7fb fa55 	bl	8004838 <_exit>
	...

08009390 <__sflush_r>:
 8009390:	898a      	ldrh	r2, [r1, #12]
 8009392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009396:	4605      	mov	r5, r0
 8009398:	0710      	lsls	r0, r2, #28
 800939a:	460c      	mov	r4, r1
 800939c:	d458      	bmi.n	8009450 <__sflush_r+0xc0>
 800939e:	684b      	ldr	r3, [r1, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	dc05      	bgt.n	80093b0 <__sflush_r+0x20>
 80093a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	dc02      	bgt.n	80093b0 <__sflush_r+0x20>
 80093aa:	2000      	movs	r0, #0
 80093ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093b2:	2e00      	cmp	r6, #0
 80093b4:	d0f9      	beq.n	80093aa <__sflush_r+0x1a>
 80093b6:	2300      	movs	r3, #0
 80093b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093bc:	682f      	ldr	r7, [r5, #0]
 80093be:	602b      	str	r3, [r5, #0]
 80093c0:	d032      	beq.n	8009428 <__sflush_r+0x98>
 80093c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	075a      	lsls	r2, r3, #29
 80093c8:	d505      	bpl.n	80093d6 <__sflush_r+0x46>
 80093ca:	6863      	ldr	r3, [r4, #4]
 80093cc:	1ac0      	subs	r0, r0, r3
 80093ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093d0:	b10b      	cbz	r3, 80093d6 <__sflush_r+0x46>
 80093d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093d4:	1ac0      	subs	r0, r0, r3
 80093d6:	2300      	movs	r3, #0
 80093d8:	4602      	mov	r2, r0
 80093da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093dc:	6a21      	ldr	r1, [r4, #32]
 80093de:	4628      	mov	r0, r5
 80093e0:	47b0      	blx	r6
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	d106      	bne.n	80093f6 <__sflush_r+0x66>
 80093e8:	6829      	ldr	r1, [r5, #0]
 80093ea:	291d      	cmp	r1, #29
 80093ec:	d82c      	bhi.n	8009448 <__sflush_r+0xb8>
 80093ee:	4a2a      	ldr	r2, [pc, #168]	; (8009498 <__sflush_r+0x108>)
 80093f0:	40ca      	lsrs	r2, r1
 80093f2:	07d6      	lsls	r6, r2, #31
 80093f4:	d528      	bpl.n	8009448 <__sflush_r+0xb8>
 80093f6:	2200      	movs	r2, #0
 80093f8:	6062      	str	r2, [r4, #4]
 80093fa:	04d9      	lsls	r1, r3, #19
 80093fc:	6922      	ldr	r2, [r4, #16]
 80093fe:	6022      	str	r2, [r4, #0]
 8009400:	d504      	bpl.n	800940c <__sflush_r+0x7c>
 8009402:	1c42      	adds	r2, r0, #1
 8009404:	d101      	bne.n	800940a <__sflush_r+0x7a>
 8009406:	682b      	ldr	r3, [r5, #0]
 8009408:	b903      	cbnz	r3, 800940c <__sflush_r+0x7c>
 800940a:	6560      	str	r0, [r4, #84]	; 0x54
 800940c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800940e:	602f      	str	r7, [r5, #0]
 8009410:	2900      	cmp	r1, #0
 8009412:	d0ca      	beq.n	80093aa <__sflush_r+0x1a>
 8009414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009418:	4299      	cmp	r1, r3
 800941a:	d002      	beq.n	8009422 <__sflush_r+0x92>
 800941c:	4628      	mov	r0, r5
 800941e:	f7ff fb11 	bl	8008a44 <_free_r>
 8009422:	2000      	movs	r0, #0
 8009424:	6360      	str	r0, [r4, #52]	; 0x34
 8009426:	e7c1      	b.n	80093ac <__sflush_r+0x1c>
 8009428:	6a21      	ldr	r1, [r4, #32]
 800942a:	2301      	movs	r3, #1
 800942c:	4628      	mov	r0, r5
 800942e:	47b0      	blx	r6
 8009430:	1c41      	adds	r1, r0, #1
 8009432:	d1c7      	bne.n	80093c4 <__sflush_r+0x34>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0c4      	beq.n	80093c4 <__sflush_r+0x34>
 800943a:	2b1d      	cmp	r3, #29
 800943c:	d001      	beq.n	8009442 <__sflush_r+0xb2>
 800943e:	2b16      	cmp	r3, #22
 8009440:	d101      	bne.n	8009446 <__sflush_r+0xb6>
 8009442:	602f      	str	r7, [r5, #0]
 8009444:	e7b1      	b.n	80093aa <__sflush_r+0x1a>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800944c:	81a3      	strh	r3, [r4, #12]
 800944e:	e7ad      	b.n	80093ac <__sflush_r+0x1c>
 8009450:	690f      	ldr	r7, [r1, #16]
 8009452:	2f00      	cmp	r7, #0
 8009454:	d0a9      	beq.n	80093aa <__sflush_r+0x1a>
 8009456:	0793      	lsls	r3, r2, #30
 8009458:	680e      	ldr	r6, [r1, #0]
 800945a:	bf08      	it	eq
 800945c:	694b      	ldreq	r3, [r1, #20]
 800945e:	600f      	str	r7, [r1, #0]
 8009460:	bf18      	it	ne
 8009462:	2300      	movne	r3, #0
 8009464:	eba6 0807 	sub.w	r8, r6, r7
 8009468:	608b      	str	r3, [r1, #8]
 800946a:	f1b8 0f00 	cmp.w	r8, #0
 800946e:	dd9c      	ble.n	80093aa <__sflush_r+0x1a>
 8009470:	6a21      	ldr	r1, [r4, #32]
 8009472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009474:	4643      	mov	r3, r8
 8009476:	463a      	mov	r2, r7
 8009478:	4628      	mov	r0, r5
 800947a:	47b0      	blx	r6
 800947c:	2800      	cmp	r0, #0
 800947e:	dc06      	bgt.n	800948e <__sflush_r+0xfe>
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	e78e      	b.n	80093ac <__sflush_r+0x1c>
 800948e:	4407      	add	r7, r0
 8009490:	eba8 0800 	sub.w	r8, r8, r0
 8009494:	e7e9      	b.n	800946a <__sflush_r+0xda>
 8009496:	bf00      	nop
 8009498:	20400001 	.word	0x20400001

0800949c <_fflush_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	690b      	ldr	r3, [r1, #16]
 80094a0:	4605      	mov	r5, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	b913      	cbnz	r3, 80094ac <_fflush_r+0x10>
 80094a6:	2500      	movs	r5, #0
 80094a8:	4628      	mov	r0, r5
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	b118      	cbz	r0, 80094b6 <_fflush_r+0x1a>
 80094ae:	6983      	ldr	r3, [r0, #24]
 80094b0:	b90b      	cbnz	r3, 80094b6 <_fflush_r+0x1a>
 80094b2:	f000 f887 	bl	80095c4 <__sinit>
 80094b6:	4b14      	ldr	r3, [pc, #80]	; (8009508 <_fflush_r+0x6c>)
 80094b8:	429c      	cmp	r4, r3
 80094ba:	d11b      	bne.n	80094f4 <_fflush_r+0x58>
 80094bc:	686c      	ldr	r4, [r5, #4]
 80094be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d0ef      	beq.n	80094a6 <_fflush_r+0xa>
 80094c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094c8:	07d0      	lsls	r0, r2, #31
 80094ca:	d404      	bmi.n	80094d6 <_fflush_r+0x3a>
 80094cc:	0599      	lsls	r1, r3, #22
 80094ce:	d402      	bmi.n	80094d6 <_fflush_r+0x3a>
 80094d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094d2:	f000 f915 	bl	8009700 <__retarget_lock_acquire_recursive>
 80094d6:	4628      	mov	r0, r5
 80094d8:	4621      	mov	r1, r4
 80094da:	f7ff ff59 	bl	8009390 <__sflush_r>
 80094de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094e0:	07da      	lsls	r2, r3, #31
 80094e2:	4605      	mov	r5, r0
 80094e4:	d4e0      	bmi.n	80094a8 <_fflush_r+0xc>
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	059b      	lsls	r3, r3, #22
 80094ea:	d4dd      	bmi.n	80094a8 <_fflush_r+0xc>
 80094ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094ee:	f000 f908 	bl	8009702 <__retarget_lock_release_recursive>
 80094f2:	e7d9      	b.n	80094a8 <_fflush_r+0xc>
 80094f4:	4b05      	ldr	r3, [pc, #20]	; (800950c <_fflush_r+0x70>)
 80094f6:	429c      	cmp	r4, r3
 80094f8:	d101      	bne.n	80094fe <_fflush_r+0x62>
 80094fa:	68ac      	ldr	r4, [r5, #8]
 80094fc:	e7df      	b.n	80094be <_fflush_r+0x22>
 80094fe:	4b04      	ldr	r3, [pc, #16]	; (8009510 <_fflush_r+0x74>)
 8009500:	429c      	cmp	r4, r3
 8009502:	bf08      	it	eq
 8009504:	68ec      	ldreq	r4, [r5, #12]
 8009506:	e7da      	b.n	80094be <_fflush_r+0x22>
 8009508:	08009da0 	.word	0x08009da0
 800950c:	08009dc0 	.word	0x08009dc0
 8009510:	08009d80 	.word	0x08009d80

08009514 <std>:
 8009514:	2300      	movs	r3, #0
 8009516:	b510      	push	{r4, lr}
 8009518:	4604      	mov	r4, r0
 800951a:	e9c0 3300 	strd	r3, r3, [r0]
 800951e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009522:	6083      	str	r3, [r0, #8]
 8009524:	8181      	strh	r1, [r0, #12]
 8009526:	6643      	str	r3, [r0, #100]	; 0x64
 8009528:	81c2      	strh	r2, [r0, #14]
 800952a:	6183      	str	r3, [r0, #24]
 800952c:	4619      	mov	r1, r3
 800952e:	2208      	movs	r2, #8
 8009530:	305c      	adds	r0, #92	; 0x5c
 8009532:	f7ff fa7f 	bl	8008a34 <memset>
 8009536:	4b05      	ldr	r3, [pc, #20]	; (800954c <std+0x38>)
 8009538:	6263      	str	r3, [r4, #36]	; 0x24
 800953a:	4b05      	ldr	r3, [pc, #20]	; (8009550 <std+0x3c>)
 800953c:	62a3      	str	r3, [r4, #40]	; 0x28
 800953e:	4b05      	ldr	r3, [pc, #20]	; (8009554 <std+0x40>)
 8009540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <std+0x44>)
 8009544:	6224      	str	r4, [r4, #32]
 8009546:	6323      	str	r3, [r4, #48]	; 0x30
 8009548:	bd10      	pop	{r4, pc}
 800954a:	bf00      	nop
 800954c:	08009871 	.word	0x08009871
 8009550:	08009893 	.word	0x08009893
 8009554:	080098cb 	.word	0x080098cb
 8009558:	080098ef 	.word	0x080098ef

0800955c <_cleanup_r>:
 800955c:	4901      	ldr	r1, [pc, #4]	; (8009564 <_cleanup_r+0x8>)
 800955e:	f000 b8af 	b.w	80096c0 <_fwalk_reent>
 8009562:	bf00      	nop
 8009564:	0800949d 	.word	0x0800949d

08009568 <__sfmoreglue>:
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	2268      	movs	r2, #104	; 0x68
 800956c:	1e4d      	subs	r5, r1, #1
 800956e:	4355      	muls	r5, r2
 8009570:	460e      	mov	r6, r1
 8009572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009576:	f7ff fad1 	bl	8008b1c <_malloc_r>
 800957a:	4604      	mov	r4, r0
 800957c:	b140      	cbz	r0, 8009590 <__sfmoreglue+0x28>
 800957e:	2100      	movs	r1, #0
 8009580:	e9c0 1600 	strd	r1, r6, [r0]
 8009584:	300c      	adds	r0, #12
 8009586:	60a0      	str	r0, [r4, #8]
 8009588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800958c:	f7ff fa52 	bl	8008a34 <memset>
 8009590:	4620      	mov	r0, r4
 8009592:	bd70      	pop	{r4, r5, r6, pc}

08009594 <__sfp_lock_acquire>:
 8009594:	4801      	ldr	r0, [pc, #4]	; (800959c <__sfp_lock_acquire+0x8>)
 8009596:	f000 b8b3 	b.w	8009700 <__retarget_lock_acquire_recursive>
 800959a:	bf00      	nop
 800959c:	20000a55 	.word	0x20000a55

080095a0 <__sfp_lock_release>:
 80095a0:	4801      	ldr	r0, [pc, #4]	; (80095a8 <__sfp_lock_release+0x8>)
 80095a2:	f000 b8ae 	b.w	8009702 <__retarget_lock_release_recursive>
 80095a6:	bf00      	nop
 80095a8:	20000a55 	.word	0x20000a55

080095ac <__sinit_lock_acquire>:
 80095ac:	4801      	ldr	r0, [pc, #4]	; (80095b4 <__sinit_lock_acquire+0x8>)
 80095ae:	f000 b8a7 	b.w	8009700 <__retarget_lock_acquire_recursive>
 80095b2:	bf00      	nop
 80095b4:	20000a56 	.word	0x20000a56

080095b8 <__sinit_lock_release>:
 80095b8:	4801      	ldr	r0, [pc, #4]	; (80095c0 <__sinit_lock_release+0x8>)
 80095ba:	f000 b8a2 	b.w	8009702 <__retarget_lock_release_recursive>
 80095be:	bf00      	nop
 80095c0:	20000a56 	.word	0x20000a56

080095c4 <__sinit>:
 80095c4:	b510      	push	{r4, lr}
 80095c6:	4604      	mov	r4, r0
 80095c8:	f7ff fff0 	bl	80095ac <__sinit_lock_acquire>
 80095cc:	69a3      	ldr	r3, [r4, #24]
 80095ce:	b11b      	cbz	r3, 80095d8 <__sinit+0x14>
 80095d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d4:	f7ff bff0 	b.w	80095b8 <__sinit_lock_release>
 80095d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095dc:	6523      	str	r3, [r4, #80]	; 0x50
 80095de:	4b13      	ldr	r3, [pc, #76]	; (800962c <__sinit+0x68>)
 80095e0:	4a13      	ldr	r2, [pc, #76]	; (8009630 <__sinit+0x6c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80095e6:	42a3      	cmp	r3, r4
 80095e8:	bf04      	itt	eq
 80095ea:	2301      	moveq	r3, #1
 80095ec:	61a3      	streq	r3, [r4, #24]
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 f820 	bl	8009634 <__sfp>
 80095f4:	6060      	str	r0, [r4, #4]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 f81c 	bl	8009634 <__sfp>
 80095fc:	60a0      	str	r0, [r4, #8]
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 f818 	bl	8009634 <__sfp>
 8009604:	2200      	movs	r2, #0
 8009606:	60e0      	str	r0, [r4, #12]
 8009608:	2104      	movs	r1, #4
 800960a:	6860      	ldr	r0, [r4, #4]
 800960c:	f7ff ff82 	bl	8009514 <std>
 8009610:	68a0      	ldr	r0, [r4, #8]
 8009612:	2201      	movs	r2, #1
 8009614:	2109      	movs	r1, #9
 8009616:	f7ff ff7d 	bl	8009514 <std>
 800961a:	68e0      	ldr	r0, [r4, #12]
 800961c:	2202      	movs	r2, #2
 800961e:	2112      	movs	r1, #18
 8009620:	f7ff ff78 	bl	8009514 <std>
 8009624:	2301      	movs	r3, #1
 8009626:	61a3      	str	r3, [r4, #24]
 8009628:	e7d2      	b.n	80095d0 <__sinit+0xc>
 800962a:	bf00      	nop
 800962c:	08009d48 	.word	0x08009d48
 8009630:	0800955d 	.word	0x0800955d

08009634 <__sfp>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	4607      	mov	r7, r0
 8009638:	f7ff ffac 	bl	8009594 <__sfp_lock_acquire>
 800963c:	4b1e      	ldr	r3, [pc, #120]	; (80096b8 <__sfp+0x84>)
 800963e:	681e      	ldr	r6, [r3, #0]
 8009640:	69b3      	ldr	r3, [r6, #24]
 8009642:	b913      	cbnz	r3, 800964a <__sfp+0x16>
 8009644:	4630      	mov	r0, r6
 8009646:	f7ff ffbd 	bl	80095c4 <__sinit>
 800964a:	3648      	adds	r6, #72	; 0x48
 800964c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009650:	3b01      	subs	r3, #1
 8009652:	d503      	bpl.n	800965c <__sfp+0x28>
 8009654:	6833      	ldr	r3, [r6, #0]
 8009656:	b30b      	cbz	r3, 800969c <__sfp+0x68>
 8009658:	6836      	ldr	r6, [r6, #0]
 800965a:	e7f7      	b.n	800964c <__sfp+0x18>
 800965c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009660:	b9d5      	cbnz	r5, 8009698 <__sfp+0x64>
 8009662:	4b16      	ldr	r3, [pc, #88]	; (80096bc <__sfp+0x88>)
 8009664:	60e3      	str	r3, [r4, #12]
 8009666:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800966a:	6665      	str	r5, [r4, #100]	; 0x64
 800966c:	f000 f847 	bl	80096fe <__retarget_lock_init_recursive>
 8009670:	f7ff ff96 	bl	80095a0 <__sfp_lock_release>
 8009674:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009678:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800967c:	6025      	str	r5, [r4, #0]
 800967e:	61a5      	str	r5, [r4, #24]
 8009680:	2208      	movs	r2, #8
 8009682:	4629      	mov	r1, r5
 8009684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009688:	f7ff f9d4 	bl	8008a34 <memset>
 800968c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009694:	4620      	mov	r0, r4
 8009696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009698:	3468      	adds	r4, #104	; 0x68
 800969a:	e7d9      	b.n	8009650 <__sfp+0x1c>
 800969c:	2104      	movs	r1, #4
 800969e:	4638      	mov	r0, r7
 80096a0:	f7ff ff62 	bl	8009568 <__sfmoreglue>
 80096a4:	4604      	mov	r4, r0
 80096a6:	6030      	str	r0, [r6, #0]
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d1d5      	bne.n	8009658 <__sfp+0x24>
 80096ac:	f7ff ff78 	bl	80095a0 <__sfp_lock_release>
 80096b0:	230c      	movs	r3, #12
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	e7ee      	b.n	8009694 <__sfp+0x60>
 80096b6:	bf00      	nop
 80096b8:	08009d48 	.word	0x08009d48
 80096bc:	ffff0001 	.word	0xffff0001

080096c0 <_fwalk_reent>:
 80096c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c4:	4606      	mov	r6, r0
 80096c6:	4688      	mov	r8, r1
 80096c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096cc:	2700      	movs	r7, #0
 80096ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096d2:	f1b9 0901 	subs.w	r9, r9, #1
 80096d6:	d505      	bpl.n	80096e4 <_fwalk_reent+0x24>
 80096d8:	6824      	ldr	r4, [r4, #0]
 80096da:	2c00      	cmp	r4, #0
 80096dc:	d1f7      	bne.n	80096ce <_fwalk_reent+0xe>
 80096de:	4638      	mov	r0, r7
 80096e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e4:	89ab      	ldrh	r3, [r5, #12]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d907      	bls.n	80096fa <_fwalk_reent+0x3a>
 80096ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096ee:	3301      	adds	r3, #1
 80096f0:	d003      	beq.n	80096fa <_fwalk_reent+0x3a>
 80096f2:	4629      	mov	r1, r5
 80096f4:	4630      	mov	r0, r6
 80096f6:	47c0      	blx	r8
 80096f8:	4307      	orrs	r7, r0
 80096fa:	3568      	adds	r5, #104	; 0x68
 80096fc:	e7e9      	b.n	80096d2 <_fwalk_reent+0x12>

080096fe <__retarget_lock_init_recursive>:
 80096fe:	4770      	bx	lr

08009700 <__retarget_lock_acquire_recursive>:
 8009700:	4770      	bx	lr

08009702 <__retarget_lock_release_recursive>:
 8009702:	4770      	bx	lr

08009704 <__swhatbuf_r>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	460e      	mov	r6, r1
 8009708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800970c:	2900      	cmp	r1, #0
 800970e:	b096      	sub	sp, #88	; 0x58
 8009710:	4614      	mov	r4, r2
 8009712:	461d      	mov	r5, r3
 8009714:	da08      	bge.n	8009728 <__swhatbuf_r+0x24>
 8009716:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	602a      	str	r2, [r5, #0]
 800971e:	061a      	lsls	r2, r3, #24
 8009720:	d410      	bmi.n	8009744 <__swhatbuf_r+0x40>
 8009722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009726:	e00e      	b.n	8009746 <__swhatbuf_r+0x42>
 8009728:	466a      	mov	r2, sp
 800972a:	f000 f907 	bl	800993c <_fstat_r>
 800972e:	2800      	cmp	r0, #0
 8009730:	dbf1      	blt.n	8009716 <__swhatbuf_r+0x12>
 8009732:	9a01      	ldr	r2, [sp, #4]
 8009734:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009738:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800973c:	425a      	negs	r2, r3
 800973e:	415a      	adcs	r2, r3
 8009740:	602a      	str	r2, [r5, #0]
 8009742:	e7ee      	b.n	8009722 <__swhatbuf_r+0x1e>
 8009744:	2340      	movs	r3, #64	; 0x40
 8009746:	2000      	movs	r0, #0
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	b016      	add	sp, #88	; 0x58
 800974c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009750 <__smakebuf_r>:
 8009750:	898b      	ldrh	r3, [r1, #12]
 8009752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009754:	079d      	lsls	r5, r3, #30
 8009756:	4606      	mov	r6, r0
 8009758:	460c      	mov	r4, r1
 800975a:	d507      	bpl.n	800976c <__smakebuf_r+0x1c>
 800975c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	6123      	str	r3, [r4, #16]
 8009764:	2301      	movs	r3, #1
 8009766:	6163      	str	r3, [r4, #20]
 8009768:	b002      	add	sp, #8
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	ab01      	add	r3, sp, #4
 800976e:	466a      	mov	r2, sp
 8009770:	f7ff ffc8 	bl	8009704 <__swhatbuf_r>
 8009774:	9900      	ldr	r1, [sp, #0]
 8009776:	4605      	mov	r5, r0
 8009778:	4630      	mov	r0, r6
 800977a:	f7ff f9cf 	bl	8008b1c <_malloc_r>
 800977e:	b948      	cbnz	r0, 8009794 <__smakebuf_r+0x44>
 8009780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009784:	059a      	lsls	r2, r3, #22
 8009786:	d4ef      	bmi.n	8009768 <__smakebuf_r+0x18>
 8009788:	f023 0303 	bic.w	r3, r3, #3
 800978c:	f043 0302 	orr.w	r3, r3, #2
 8009790:	81a3      	strh	r3, [r4, #12]
 8009792:	e7e3      	b.n	800975c <__smakebuf_r+0xc>
 8009794:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <__smakebuf_r+0x7c>)
 8009796:	62b3      	str	r3, [r6, #40]	; 0x28
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	6020      	str	r0, [r4, #0]
 800979c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a0:	81a3      	strh	r3, [r4, #12]
 80097a2:	9b00      	ldr	r3, [sp, #0]
 80097a4:	6163      	str	r3, [r4, #20]
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	6120      	str	r0, [r4, #16]
 80097aa:	b15b      	cbz	r3, 80097c4 <__smakebuf_r+0x74>
 80097ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b0:	4630      	mov	r0, r6
 80097b2:	f000 f8d5 	bl	8009960 <_isatty_r>
 80097b6:	b128      	cbz	r0, 80097c4 <__smakebuf_r+0x74>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f023 0303 	bic.w	r3, r3, #3
 80097be:	f043 0301 	orr.w	r3, r3, #1
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	89a0      	ldrh	r0, [r4, #12]
 80097c6:	4305      	orrs	r5, r0
 80097c8:	81a5      	strh	r5, [r4, #12]
 80097ca:	e7cd      	b.n	8009768 <__smakebuf_r+0x18>
 80097cc:	0800955d 	.word	0x0800955d

080097d0 <__malloc_lock>:
 80097d0:	4801      	ldr	r0, [pc, #4]	; (80097d8 <__malloc_lock+0x8>)
 80097d2:	f7ff bf95 	b.w	8009700 <__retarget_lock_acquire_recursive>
 80097d6:	bf00      	nop
 80097d8:	20000a54 	.word	0x20000a54

080097dc <__malloc_unlock>:
 80097dc:	4801      	ldr	r0, [pc, #4]	; (80097e4 <__malloc_unlock+0x8>)
 80097de:	f7ff bf90 	b.w	8009702 <__retarget_lock_release_recursive>
 80097e2:	bf00      	nop
 80097e4:	20000a54 	.word	0x20000a54

080097e8 <_raise_r>:
 80097e8:	291f      	cmp	r1, #31
 80097ea:	b538      	push	{r3, r4, r5, lr}
 80097ec:	4604      	mov	r4, r0
 80097ee:	460d      	mov	r5, r1
 80097f0:	d904      	bls.n	80097fc <_raise_r+0x14>
 80097f2:	2316      	movs	r3, #22
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097fe:	b112      	cbz	r2, 8009806 <_raise_r+0x1e>
 8009800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009804:	b94b      	cbnz	r3, 800981a <_raise_r+0x32>
 8009806:	4620      	mov	r0, r4
 8009808:	f000 f830 	bl	800986c <_getpid_r>
 800980c:	462a      	mov	r2, r5
 800980e:	4601      	mov	r1, r0
 8009810:	4620      	mov	r0, r4
 8009812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009816:	f000 b817 	b.w	8009848 <_kill_r>
 800981a:	2b01      	cmp	r3, #1
 800981c:	d00a      	beq.n	8009834 <_raise_r+0x4c>
 800981e:	1c59      	adds	r1, r3, #1
 8009820:	d103      	bne.n	800982a <_raise_r+0x42>
 8009822:	2316      	movs	r3, #22
 8009824:	6003      	str	r3, [r0, #0]
 8009826:	2001      	movs	r0, #1
 8009828:	e7e7      	b.n	80097fa <_raise_r+0x12>
 800982a:	2400      	movs	r4, #0
 800982c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009830:	4628      	mov	r0, r5
 8009832:	4798      	blx	r3
 8009834:	2000      	movs	r0, #0
 8009836:	e7e0      	b.n	80097fa <_raise_r+0x12>

08009838 <raise>:
 8009838:	4b02      	ldr	r3, [pc, #8]	; (8009844 <raise+0xc>)
 800983a:	4601      	mov	r1, r0
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f7ff bfd3 	b.w	80097e8 <_raise_r>
 8009842:	bf00      	nop
 8009844:	20000208 	.word	0x20000208

08009848 <_kill_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d07      	ldr	r5, [pc, #28]	; (8009868 <_kill_r+0x20>)
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	4611      	mov	r1, r2
 8009854:	602b      	str	r3, [r5, #0]
 8009856:	f7fa ffdf 	bl	8004818 <_kill>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d102      	bne.n	8009864 <_kill_r+0x1c>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b103      	cbz	r3, 8009864 <_kill_r+0x1c>
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	20000a58 	.word	0x20000a58

0800986c <_getpid_r>:
 800986c:	f7fa bfcc 	b.w	8004808 <_getpid>

08009870 <__sread>:
 8009870:	b510      	push	{r4, lr}
 8009872:	460c      	mov	r4, r1
 8009874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009878:	f000 f894 	bl	80099a4 <_read_r>
 800987c:	2800      	cmp	r0, #0
 800987e:	bfab      	itete	ge
 8009880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009882:	89a3      	ldrhlt	r3, [r4, #12]
 8009884:	181b      	addge	r3, r3, r0
 8009886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800988a:	bfac      	ite	ge
 800988c:	6563      	strge	r3, [r4, #84]	; 0x54
 800988e:	81a3      	strhlt	r3, [r4, #12]
 8009890:	bd10      	pop	{r4, pc}

08009892 <__swrite>:
 8009892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009896:	461f      	mov	r7, r3
 8009898:	898b      	ldrh	r3, [r1, #12]
 800989a:	05db      	lsls	r3, r3, #23
 800989c:	4605      	mov	r5, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	4616      	mov	r6, r2
 80098a2:	d505      	bpl.n	80098b0 <__swrite+0x1e>
 80098a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a8:	2302      	movs	r3, #2
 80098aa:	2200      	movs	r2, #0
 80098ac:	f000 f868 	bl	8009980 <_lseek_r>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	4632      	mov	r2, r6
 80098be:	463b      	mov	r3, r7
 80098c0:	4628      	mov	r0, r5
 80098c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098c6:	f000 b817 	b.w	80098f8 <_write_r>

080098ca <__sseek>:
 80098ca:	b510      	push	{r4, lr}
 80098cc:	460c      	mov	r4, r1
 80098ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d2:	f000 f855 	bl	8009980 <_lseek_r>
 80098d6:	1c43      	adds	r3, r0, #1
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	bf15      	itete	ne
 80098dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80098de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098e6:	81a3      	strheq	r3, [r4, #12]
 80098e8:	bf18      	it	ne
 80098ea:	81a3      	strhne	r3, [r4, #12]
 80098ec:	bd10      	pop	{r4, pc}

080098ee <__sclose>:
 80098ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f2:	f000 b813 	b.w	800991c <_close_r>
	...

080098f8 <_write_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	; (8009918 <_write_r+0x20>)
 80098fc:	4604      	mov	r4, r0
 80098fe:	4608      	mov	r0, r1
 8009900:	4611      	mov	r1, r2
 8009902:	2200      	movs	r2, #0
 8009904:	602a      	str	r2, [r5, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	f7fa ffbd 	bl	8004886 <_write>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_write_r+0x1e>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_write_r+0x1e>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	20000a58 	.word	0x20000a58

0800991c <_close_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d06      	ldr	r5, [pc, #24]	; (8009938 <_close_r+0x1c>)
 8009920:	2300      	movs	r3, #0
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	f7fa ffc9 	bl	80048be <_close>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_close_r+0x1a>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_close_r+0x1a>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	20000a58 	.word	0x20000a58

0800993c <_fstat_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	; (800995c <_fstat_r+0x20>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	602b      	str	r3, [r5, #0]
 800994a:	f7fa ffc4 	bl	80048d6 <_fstat>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d102      	bne.n	8009958 <_fstat_r+0x1c>
 8009952:	682b      	ldr	r3, [r5, #0]
 8009954:	b103      	cbz	r3, 8009958 <_fstat_r+0x1c>
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	20000a58 	.word	0x20000a58

08009960 <_isatty_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	; (800997c <_isatty_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7fa ffc3 	bl	80048f6 <_isatty>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_isatty_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_isatty_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20000a58 	.word	0x20000a58

08009980 <_lseek_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d07      	ldr	r5, [pc, #28]	; (80099a0 <_lseek_r+0x20>)
 8009984:	4604      	mov	r4, r0
 8009986:	4608      	mov	r0, r1
 8009988:	4611      	mov	r1, r2
 800998a:	2200      	movs	r2, #0
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f7fa ffbc 	bl	800490c <_lseek>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_lseek_r+0x1e>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_lseek_r+0x1e>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20000a58 	.word	0x20000a58

080099a4 <_read_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	; (80099c4 <_read_r+0x20>)
 80099a8:	4604      	mov	r4, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	602a      	str	r2, [r5, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f7fa ff4a 	bl	800484c <_read>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_read_r+0x1e>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_read_r+0x1e>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	20000a58 	.word	0x20000a58

080099c8 <_init>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	bf00      	nop
 80099cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ce:	bc08      	pop	{r3}
 80099d0:	469e      	mov	lr, r3
 80099d2:	4770      	bx	lr

080099d4 <_fini>:
 80099d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d6:	bf00      	nop
 80099d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099da:	bc08      	pop	{r3}
 80099dc:	469e      	mov	lr, r3
 80099de:	4770      	bx	lr
