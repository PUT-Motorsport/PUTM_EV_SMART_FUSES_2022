
Smart fuses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002964  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b78  08002b78  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b78  08002b78  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b78  08002b78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002b78  08002b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08002bf4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002bf4  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179d3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f2  00000000  00000000  00037a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0003ad68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  0003b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003073e  00000000  00000000  0003cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010073  00000000  00000000  0006d706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001128bc  00000000  00000000  0007d779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  00190088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003acb  00000000  00000000  00192ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002b08 	.word	0x08002b08

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	08002b08 	.word	0x08002b08

080001fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000200:	4b16      	ldr	r3, [pc, #88]	; (800025c <MX_CAN1_Init+0x60>)
 8000202:	4a17      	ldr	r2, [pc, #92]	; (8000260 <MX_CAN1_Init+0x64>)
 8000204:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <MX_CAN1_Init+0x60>)
 8000208:	2210      	movs	r2, #16
 800020a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <MX_CAN1_Init+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <MX_CAN1_Init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <MX_CAN1_Init+0x60>)
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MX_CAN1_Init+0x60>)
 8000220:	2200      	movs	r2, #0
 8000222:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <MX_CAN1_Init+0x60>)
 8000226:	2200      	movs	r2, #0
 8000228:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_CAN1_Init+0x60>)
 800022c:	2200      	movs	r2, #0
 800022e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <MX_CAN1_Init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_CAN1_Init+0x60>)
 8000238:	2200      	movs	r2, #0
 800023a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <MX_CAN1_Init+0x60>)
 800023e:	2200      	movs	r2, #0
 8000240:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <MX_CAN1_Init+0x60>)
 8000244:	2200      	movs	r2, #0
 8000246:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_CAN1_Init+0x60>)
 800024a:	f000 ffd5 	bl	80011f8 <HAL_CAN_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000254:	f000 fcee 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000008c 	.word	0x2000008c
 8000260:	40006400 	.word	0x40006400

08000264 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <HAL_CAN_MspInit+0x80>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d129      	bne.n	80002da <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800028a:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 800028c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000290:	6593      	str	r3, [r2, #88]	; 0x58
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 8000294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <HAL_CAN_MspInit+0x84>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002bc:	2302      	movs	r3, #2
 80002be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002c4:	2303      	movs	r3, #3
 80002c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002c8:	2309      	movs	r3, #9
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f001 f971 	bl	80015bc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002da:	bf00      	nop
 80002dc:	3728      	adds	r7, #40	; 0x28
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40006400 	.word	0x40006400
 80002e8:	40021000 	.word	0x40021000

080002ec <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>:
	current = 0x0000;
}

/*SmartFuse declarations --------------------------------------------------------------------------------------------*/

SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, const FusesSettings &fuses_settings) :
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	9d04      	ldr	r5, [sp, #16]
					 port(port), pin(pin), hspi(hspi), fuses_settings(fuses_settings)
 80002f0:	6042      	str	r2, [r0, #4]
    T2 second;

    /// Default constructor
    ETL_CONSTEXPR pair()
      : first(T1())
      , second(T2())
 80002f2:	2600      	movs	r6, #0
 80002f4:	e9c0 130e 	strd	r1, r3, [r0, #56]	; 0x38
	active = false;
 80002f8:	7206      	strb	r6, [r0, #8]
 80002fa:	7406      	strb	r6, [r0, #16]
 80002fc:	7606      	strb	r6, [r0, #24]
 80002fe:	f880 6020 	strb.w	r6, [r0, #32]
 8000302:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
 8000306:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
 800030a:	81c6      	strh	r6, [r0, #14]
	current = 0x0000;
 800030c:	f8c0 600a 	str.w	r6, [r0, #10]
 8000310:	82c6      	strh	r6, [r0, #22]
 8000312:	f8c0 6012 	str.w	r6, [r0, #18]
 8000316:	83c6      	strh	r6, [r0, #30]
 8000318:	f8c0 601a 	str.w	r6, [r0, #26]
 800031c:	84c6      	strh	r6, [r0, #38]	; 0x26
 800031e:	f8c0 6022 	str.w	r6, [r0, #34]	; 0x22
 8000322:	85c6      	strh	r6, [r0, #46]	; 0x2e
 8000324:	f8c0 602a 	str.w	r6, [r0, #42]	; 0x2a
 8000328:	86c6      	strh	r6, [r0, #54]	; 0x36
 800032a:	f8c0 6032 	str.w	r6, [r0, #50]	; 0x32
	f3,
	f4,
	f5
};

struct FusesSettings
 800032e:	88ab      	ldrh	r3, [r5, #4]
 8000330:	682a      	ldr	r2, [r5, #0]
 8000332:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8000336:	896b      	ldrh	r3, [r5, #10]
 8000338:	6402      	str	r2, [r0, #64]	; 0x40
 800033a:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 800033e:	f8d5 2006 	ldr.w	r2, [r5, #6]
 8000342:	68eb      	ldr	r3, [r5, #12]
 8000344:	f8c0 2046 	str.w	r2, [r0, #70]	; 0x46
 8000348:	64c3      	str	r3, [r0, #76]	; 0x4c
 800034a:	8a2b      	ldrh	r3, [r5, #16]
 800034c:	f8d5 2012 	ldr.w	r2, [r5, #18]
 8000350:	f8c0 2052 	str.w	r2, [r0, #82]	; 0x52
 8000354:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8000358:	f8d5 2016 	ldr.w	r2, [r5, #22]
 800035c:	f8d5 301a 	ldr.w	r3, [r5, #26]
 8000360:	f8c0 2056 	str.w	r2, [r0, #86]	; 0x56
 8000364:	f8c0 305a 	str.w	r3, [r0, #90]	; 0x5a
    {
    }

    /// Copy constructor
    pair(const pair<T1, T2>& other)
      : first(other.first)
 8000368:	f8d5 301e 	ldr.w	r3, [r5, #30]
      , second(other.second)
 800036c:	f8c0 305e 	str.w	r3, [r0, #94]	; 0x5e
      : first(other.first)
 8000370:	f8d5 3022 	ldr.w	r3, [r5, #34]	; 0x22
      , second(other.second)
 8000374:	f8c0 3062 	str.w	r3, [r0, #98]	; 0x62
      : first(other.first)
 8000378:	f8d5 3026 	ldr.w	r3, [r5, #38]	; 0x26
      , second(other.second)
 800037c:	f8c0 3066 	str.w	r3, [r0, #102]	; 0x66
      : first(other.first)
 8000380:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
      , second(other.second)
 8000384:	f8c0 306a 	str.w	r3, [r0, #106]	; 0x6a
      : first(other.first)
 8000388:	f8d5 302e 	ldr.w	r3, [r5, #46]	; 0x2e
      , second(other.second)
 800038c:	f8c0 306e 	str.w	r3, [r0, #110]	; 0x6e
      : first(other.first)
 8000390:	f8d5 3032 	ldr.w	r3, [r5, #50]	; 0x32
      , second(other.second)
 8000394:	f8c0 3072 	str.w	r3, [r0, #114]	; 0x72
SmartFuse::SmartFuse(const GPIO_TypeDef * const port, const uint32_t pin, const SPI_HandleTypeDef * const hspi, const FusesSettings &fuses_settings) :
 8000398:	4604      	mov	r4, r0
					 port(port), pin(pin), hspi(hspi), fuses_settings(fuses_settings)
 800039a:	3078      	adds	r0, #120	; 0x78
 800039c:	f000 fe54 	bl	8001048 <_ZN5TimerC1Ev>
      swap(second, other.second);
    }

    pair<T1, T2>& operator =(const pair<T1, T2>& other)
    {
      first = other.first;
 80003a0:	f8d5 101e 	ldr.w	r1, [r5, #30]
	this->toggle = false;

	for (int i = 0; i < 6; i++)
	{
		this->fuses[i].clamping_currents = fuses_settings.clamping_currents[i];
		this->fuses[i].active = fuses_settings.active[i];
 80003a4:	786b      	ldrb	r3, [r5, #1]
 80003a6:	782a      	ldrb	r2, [r5, #0]
 80003a8:	60e1      	str	r1, [r4, #12]
 80003aa:	f8d5 1022 	ldr.w	r1, [r5, #34]	; 0x22
 80003ae:	7423      	strb	r3, [r4, #16]
 80003b0:	78ab      	ldrb	r3, [r5, #2]
 80003b2:	7222      	strb	r2, [r4, #8]
 80003b4:	f8d5 2026 	ldr.w	r2, [r5, #38]	; 0x26
 80003b8:	7623      	strb	r3, [r4, #24]
 80003ba:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
 80003be:	6263      	str	r3, [r4, #36]	; 0x24
 80003c0:	78eb      	ldrb	r3, [r5, #3]
 80003c2:	f884 3020 	strb.w	r3, [r4, #32]
 80003c6:	792b      	ldrb	r3, [r5, #4]
 80003c8:	f8d5 002e 	ldr.w	r0, [r5, #46]	; 0x2e
 80003cc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80003d0:	796b      	ldrb	r3, [r5, #5]
 80003d2:	61e2      	str	r2, [r4, #28]
 80003d4:	f8d5 2032 	ldr.w	r2, [r5, #50]	; 0x32
 80003d8:	6161      	str	r1, [r4, #20]
 80003da:	62e0      	str	r0, [r4, #44]	; 0x2c
 80003dc:	6362      	str	r2, [r4, #52]	; 0x34
	HAL_GPIO_WritePin( (GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
}

void SmartFuse::slaveDeselect(void)
{
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 80003de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80003e0:	88a1      	ldrh	r1, [r4, #4]
	this->toggle = false;
 80003e2:	7026      	strb	r6, [r4, #0]
		this->fuses[i].active = fuses_settings.active[i];
 80003e4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	f001 fa79 	bl	80018e0 <HAL_GPIO_WritePin>
}
 80003ee:	4620      	mov	r0, r4
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	bf00      	nop

080003f4 <_ZN9SmartFuse17getSmartFuseStateEv>:
}

SmartFuseState SmartFuse::getSmartFuseState(void)
{
	return this->state;
}
 80003f4:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop

080003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>:

void SmartFuse::transmitReceiveData(std::array<uint8_t, 3> tx_data, std::array<uint8_t, 3> &rx_data)
{
 80003fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/// just check
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 80003fe:	4c59      	ldr	r4, [pc, #356]	; (8000564 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x168>)
{
 8000400:	b085      	sub	sp, #20
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8000402:	6823      	ldr	r3, [r4, #0]
{
 8000404:	9101      	str	r1, [sp, #4]
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8000406:	6819      	ldr	r1, [r3, #0]
{
 8000408:	4615      	mov	r5, r2
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 800040a:	064a      	lsls	r2, r1, #25
{
 800040c:	4606      	mov	r6, r0
	if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 800040e:	d403      	bmi.n	8000418 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x1c>
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000416:	601a      	str	r2, [r3, #0]
	data[2] &= ~(1 << 0);
 8000418:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800041c:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
 8000420:	f88d 2006 	strb.w	r2, [sp, #6]
	if (checkParity(data)) data[2] |= (1 << 0);
 8000424:	9f01      	ldr	r7, [sp, #4]
 8000426:	f8ad 700c 	strh.w	r7, [sp, #12]
 800042a:	0c3b      	lsrs	r3, r7, #16
	for(int i = 0; i < 3; i++) for(int j = 0; j < 8; j++) if(x[i] & 1 << j) buff++;
 800042c:	b2f8      	uxtb	r0, r7
 800042e:	f88d 300e 	strb.w	r3, [sp, #14]
      typedef _Tp _Type[_Nm];
      typedef __is_swappable<_Tp> _Is_swappable;
      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000432:	f007 0301 	and.w	r3, r7, #1
 8000436:	07bf      	lsls	r7, r7, #30
 8000438:	bf48      	it	mi
 800043a:	3301      	addmi	r3, #1
 800043c:	0747      	lsls	r7, r0, #29
 800043e:	bf44      	itt	mi
 8000440:	3301      	addmi	r3, #1
 8000442:	b2db      	uxtbmi	r3, r3
 8000444:	0707      	lsls	r7, r0, #28
 8000446:	bf44      	itt	mi
 8000448:	3301      	addmi	r3, #1
 800044a:	b2db      	uxtbmi	r3, r3
 800044c:	06c7      	lsls	r7, r0, #27
 800044e:	bf44      	itt	mi
 8000450:	3301      	addmi	r3, #1
 8000452:	b2db      	uxtbmi	r3, r3
 8000454:	0687      	lsls	r7, r0, #26
 8000456:	bf44      	itt	mi
 8000458:	3301      	addmi	r3, #1
 800045a:	b2db      	uxtbmi	r3, r3
 800045c:	0647      	lsls	r7, r0, #25
 800045e:	bf44      	itt	mi
 8000460:	3301      	addmi	r3, #1
 8000462:	b2db      	uxtbmi	r3, r3
 8000464:	09c0      	lsrs	r0, r0, #7
 8000466:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800046a:	bf1c      	itt	ne
 800046c:	3301      	addne	r3, #1
 800046e:	b2db      	uxtbne	r3, r3
 8000470:	07c7      	lsls	r7, r0, #31
 8000472:	bf44      	itt	mi
 8000474:	3301      	addmi	r3, #1
 8000476:	b2db      	uxtbmi	r3, r3
 8000478:	0787      	lsls	r7, r0, #30
 800047a:	bf44      	itt	mi
 800047c:	3301      	addmi	r3, #1
 800047e:	b2db      	uxtbmi	r3, r3
 8000480:	0747      	lsls	r7, r0, #29
 8000482:	bf44      	itt	mi
 8000484:	3301      	addmi	r3, #1
 8000486:	b2db      	uxtbmi	r3, r3
 8000488:	0707      	lsls	r7, r0, #28
 800048a:	bf44      	itt	mi
 800048c:	3301      	addmi	r3, #1
 800048e:	b2db      	uxtbmi	r3, r3
 8000490:	06c7      	lsls	r7, r0, #27
 8000492:	bf44      	itt	mi
 8000494:	3301      	addmi	r3, #1
 8000496:	b2db      	uxtbmi	r3, r3
 8000498:	0687      	lsls	r7, r0, #26
 800049a:	bf44      	itt	mi
 800049c:	3301      	addmi	r3, #1
 800049e:	b2db      	uxtbmi	r3, r3
 80004a0:	0647      	lsls	r7, r0, #25
 80004a2:	bf44      	itt	mi
 80004a4:	3301      	addmi	r3, #1
 80004a6:	b2db      	uxtbmi	r3, r3
 80004a8:	09c0      	lsrs	r0, r0, #7
 80004aa:	bf1c      	itt	ne
 80004ac:	3301      	addne	r3, #1
 80004ae:	b2db      	uxtbne	r3, r3
 80004b0:	0788      	lsls	r0, r1, #30
 80004b2:	bf44      	itt	mi
 80004b4:	3301      	addmi	r3, #1
 80004b6:	b2db      	uxtbmi	r3, r3
 80004b8:	074f      	lsls	r7, r1, #29
 80004ba:	bf44      	itt	mi
 80004bc:	3301      	addmi	r3, #1
 80004be:	b2db      	uxtbmi	r3, r3
 80004c0:	0708      	lsls	r0, r1, #28
 80004c2:	bf44      	itt	mi
 80004c4:	3301      	addmi	r3, #1
 80004c6:	b2db      	uxtbmi	r3, r3
 80004c8:	06cf      	lsls	r7, r1, #27
 80004ca:	bf44      	itt	mi
 80004cc:	3301      	addmi	r3, #1
 80004ce:	b2db      	uxtbmi	r3, r3
 80004d0:	0688      	lsls	r0, r1, #26
 80004d2:	bf44      	itt	mi
 80004d4:	3301      	addmi	r3, #1
 80004d6:	b2db      	uxtbmi	r3, r3
 80004d8:	064f      	lsls	r7, r1, #25
 80004da:	bf44      	itt	mi
 80004dc:	3301      	addmi	r3, #1
 80004de:	b2db      	uxtbmi	r3, r3
 80004e0:	09d1      	lsrs	r1, r2, #7
 80004e2:	bf1c      	itt	ne
 80004e4:	3301      	addne	r3, #1
 80004e6:	b2db      	uxtbne	r3, r3
	if (checkParity(data)) data[2] |= (1 << 0);
 80004e8:	07d8      	lsls	r0, r3, #31
 80004ea:	bf58      	it	pl
 80004ec:	f042 0201 	orrpl.w	r2, r2, #1
	HAL_GPIO_WritePin( (GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 80004f0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
	if (checkParity(data)) data[2] |= (1 << 0);
 80004f2:	bf58      	it	pl
 80004f4:	f88d 2006 	strbpl.w	r2, [sp, #6]
	HAL_GPIO_WritePin( (GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_RESET);
 80004f8:	88b1      	ldrh	r1, [r6, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	f001 f9f0 	bl	80018e0 <HAL_GPIO_WritePin>
	/// data needs to have a parity check bit
	calculateParityBit(tx_data);

	this->slaveSelect();

	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8000500:	2000      	movs	r0, #0
 8000502:	4603      	mov	r3, r0
 8000504:	2b02      	cmp	r3, #2
 8000506:	d90d      	bls.n	8000524 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x128>
 8000508:	2802      	cmp	r0, #2
 800050a:	d81d      	bhi.n	8000548 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x14c>
	{
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 800050c:	6822      	ldr	r2, [r4, #0]
 800050e:	6891      	ldr	r1, [r2, #8]
 8000510:	07cf      	lsls	r7, r1, #31
 8000512:	d504      	bpl.n	800051e <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x122>
		{
			(*(uint8_t*) &rx_data[rx]) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 8000514:	7b12      	ldrb	r2, [r2, #12]
 8000516:	542a      	strb	r2, [r5, r0]
			rx++;
 8000518:	3001      	adds	r0, #1
		}

		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 800051a:	6822      	ldr	r2, [r4, #0]
			rx++;
 800051c:	b2c0      	uxtb	r0, r0
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 800051e:	2b02      	cmp	r3, #2
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000520:	6892      	ldr	r2, [r2, #8]
	for (uint8_t tx = 0, rx = 0; tx < 3 || rx < 3;)
 8000522:	d8f1      	bhi.n	8000508 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x10c>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) && rx < 3)
 8000524:	6822      	ldr	r2, [r4, #0]
 8000526:	6891      	ldr	r1, [r2, #8]
 8000528:	07c9      	lsls	r1, r1, #31
 800052a:	d501      	bpl.n	8000530 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x134>
 800052c:	2802      	cmp	r0, #2
 800052e:	d913      	bls.n	8000558 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x15c>
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000530:	6891      	ldr	r1, [r2, #8]
 8000532:	0789      	lsls	r1, r1, #30
 8000534:	d5e6      	bpl.n	8000504 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x108>
		{
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = tx_data[tx];
 8000536:	f103 0110 	add.w	r1, r3, #16
 800053a:	4469      	add	r1, sp
			tx++;
 800053c:	3301      	adds	r3, #1
			*(__IO uint8_t *) &(&hspi1)->Instance->DR = tx_data[tx];
 800053e:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
 8000542:	7311      	strb	r1, [r2, #12]
			tx++;
 8000544:	b2db      	uxtb	r3, r3
 8000546:	e7dd      	b.n	8000504 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x108>
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 8000548:	88b1      	ldrh	r1, [r6, #4]
 800054a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 800054c:	2201      	movs	r2, #1
		}
	}

	this->slaveDeselect();
}
 800054e:	b005      	add	sp, #20
 8000550:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, GPIO_PIN_SET);
 8000554:	f001 b9c4 	b.w	80018e0 <HAL_GPIO_WritePin>
			(*(uint8_t*) &rx_data[rx]) = *(__IO uint8_t *) &(&hspi1)->Instance->DR;
 8000558:	7b12      	ldrb	r2, [r2, #12]
 800055a:	542a      	strb	r2, [r5, r0]
			rx++;
 800055c:	3001      	adds	r0, #1
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 800055e:	6822      	ldr	r2, [r4, #0]
			rx++;
 8000560:	b2c0      	uxtb	r0, r0
		if (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) && tx < 3)
 8000562:	e7e5      	b.n	8000530 <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_+0x134>
 8000564:	200000bc 	.word	0x200000bc

08000568 <_ZN9SmartFuse12handle_timerEv>:
{
 8000568:	b570      	push	{r4, r5, r6, lr}
	if(watch_dog.getPassedTime() >= 30)
 800056a:	f100 0678 	add.w	r6, r0, #120	; 0x78
{
 800056e:	b082      	sub	sp, #8
 8000570:	4604      	mov	r4, r0
	if(watch_dog.getPassedTime() >= 30)
 8000572:	4630      	mov	r0, r6
 8000574:	f000 fd76 	bl	8001064 <_ZN5Timer13getPassedTimeEv>
 8000578:	281d      	cmp	r0, #29
 800057a:	d803      	bhi.n	8000584 <_ZN9SmartFuse12handle_timerEv+0x1c>
	return this->state;
 800057c:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
}
 8000580:	b002      	add	sp, #8
 8000582:	bd70      	pop	{r4, r5, r6, pc}
		this->toggle = !this->toggle;
 8000584:	7823      	ldrb	r3, [r4, #0]
		std::array < uint8_t, 3 >  tx_data { 0, 0, 0 };
 8000586:	2500      	movs	r5, #0
		this->toggle = !this->toggle;
 8000588:	f083 0301 	eor.w	r3, r3, #1
		tx_data[0] = READ_RAM(0x13);
 800058c:	2253      	movs	r2, #83	; 0x53
 800058e:	f8ad 2000 	strh.w	r2, [sp]
		this->toggle = !this->toggle;
 8000592:	7023      	strb	r3, [r4, #0]
		std::array < uint8_t, 3 >  tx_data { 0, 0, 0 };
 8000594:	f88d 5002 	strb.w	r5, [sp, #2]
		this->transmitReceiveData(tx_data, rx_data);
 8000598:	9900      	ldr	r1, [sp, #0]
		std::array < uint8_t, 3 >  rx_data { 0, 0, 0 };
 800059a:	f8ad 5004 	strh.w	r5, [sp, #4]
		this->transmitReceiveData(tx_data, rx_data);
 800059e:	aa01      	add	r2, sp, #4
 80005a0:	4620      	mov	r0, r4
		std::array < uint8_t, 3 >  rx_data { 0, 0, 0 };
 80005a2:	f88d 5006 	strb.w	r5, [sp, #6]
		this->transmitReceiveData(tx_data, rx_data);
 80005a6:	f7ff ff29 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		modifyTab(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] ^= (1 << 1));
 80005aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
	tab[1] = dat_2;
 80005ae:	f88d 3001 	strb.w	r3, [sp, #1]
		modifyTab(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] ^= (1 << 1));
 80005b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80005b6:	f083 0302 	eor.w	r3, r3, #2
	tab[2] = dat_3;
 80005ba:	f88d 3002 	strb.w	r3, [sp, #2]
		modifyTab(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] ^= (1 << 1));
 80005be:	f88d 3006 	strb.w	r3, [sp, #6]
	tab[0] = dat_1;
 80005c2:	2313      	movs	r3, #19
 80005c4:	f88d 3000 	strb.w	r3, [sp]
		this->transmitReceiveData(tx_data, rx_data);
 80005c8:	aa01      	add	r2, sp, #4
 80005ca:	9900      	ldr	r1, [sp, #0]
 80005cc:	4620      	mov	r0, r4
 80005ce:	f7ff ff15 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 80005d2:	4630      	mov	r0, r6
 80005d4:	f000 fd40 	bl	8001058 <_ZN5Timer7restartEv>
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 80005d8:	f99d 2004 	ldrsb.w	r2, [sp, #4]
		this->state = checkGSB(rx_data[0]);
 80005dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 80005e0:	42aa      	cmp	r2, r5
 80005e2:	db11      	blt.n	8000608 <_ZN9SmartFuse12handle_timerEv+0xa0>
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 80005e4:	07d9      	lsls	r1, r3, #31
 80005e6:	d416      	bmi.n	8000616 <_ZN9SmartFuse12handle_timerEv+0xae>
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 80005e8:	079a      	lsls	r2, r3, #30
 80005ea:	d416      	bmi.n	800061a <_ZN9SmartFuse12handle_timerEv+0xb2>
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 80005ec:	075e      	lsls	r6, r3, #29
 80005ee:	d416      	bmi.n	800061e <_ZN9SmartFuse12handle_timerEv+0xb6>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 80005f0:	071d      	lsls	r5, r3, #28
 80005f2:	d416      	bmi.n	8000622 <_ZN9SmartFuse12handle_timerEv+0xba>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 80005f4:	06d9      	lsls	r1, r3, #27
 80005f6:	d40c      	bmi.n	8000612 <_ZN9SmartFuse12handle_timerEv+0xaa>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 80005f8:	069a      	lsls	r2, r3, #26
 80005fa:	d414      	bmi.n	8000626 <_ZN9SmartFuse12handle_timerEv+0xbe>
	if(gsb & 0b01000000) return SmartFuseState::ResetState;
 80005fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000600:	bf0c      	ite	eq
 8000602:	2008      	moveq	r0, #8
 8000604:	2001      	movne	r0, #1
 8000606:	e000      	b.n	800060a <_ZN9SmartFuse12handle_timerEv+0xa2>
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000608:	4628      	mov	r0, r5
		this->state = checkGSB(rx_data[0]);
 800060a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800060e:	b002      	add	sp, #8
 8000610:	bd70      	pop	{r4, r5, r6, pc}
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 8000612:	2003      	movs	r0, #3
 8000614:	e7f9      	b.n	800060a <_ZN9SmartFuse12handle_timerEv+0xa2>
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 8000616:	2007      	movs	r0, #7
 8000618:	e7f7      	b.n	800060a <_ZN9SmartFuse12handle_timerEv+0xa2>
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 800061a:	2006      	movs	r0, #6
 800061c:	e7f5      	b.n	800060a <_ZN9SmartFuse12handle_timerEv+0xa2>
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 800061e:	2005      	movs	r0, #5
 8000620:	e7f3      	b.n	800060a <_ZN9SmartFuse12handle_timerEv+0xa2>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000622:	2004      	movs	r0, #4
 8000624:	e7f1      	b.n	800060a <_ZN9SmartFuse12handle_timerEv+0xa2>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 8000626:	2002      	movs	r0, #2
 8000628:	e7ef      	b.n	800060a <_ZN9SmartFuse12handle_timerEv+0xa2>
 800062a:	bf00      	nop

0800062c <_ZN9SmartFuse4initEv>:
{
 800062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000630:	b083      	sub	sp, #12
	std::array<uint8_t, 3> tx_data{ 0, 0, 0 };
 8000632:	2600      	movs	r6, #0
	tx_data[0] = RESET_SMARTFUSE();
 8000634:	23ff      	movs	r3, #255	; 0xff
 8000636:	f8ad 3000 	strh.w	r3, [sp]
	std::array<uint8_t, 3> tx_data{ 0, 0, 0 };
 800063a:	f88d 6002 	strb.w	r6, [sp, #2]
	transmitReceiveData(tx_data, rx_data);
 800063e:	9900      	ldr	r1, [sp, #0]
	std::array<uint8_t, 3> rx_data{ 0, 0, 0 };
 8000640:	f8ad 6004 	strh.w	r6, [sp, #4]
	transmitReceiveData(tx_data, rx_data);
 8000644:	aa01      	add	r2, sp, #4
{
 8000646:	4604      	mov	r4, r0
	std::array<uint8_t, 3> rx_data{ 0, 0, 0 };
 8000648:	f88d 6006 	strb.w	r6, [sp, #6]
	transmitReceiveData(tx_data, rx_data);
 800064c:	f7ff fed6 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	tx_data[0] = READ_ROM(0x01);
 8000650:	23c1      	movs	r3, #193	; 0xc1
 8000652:	f88d 3000 	strb.w	r3, [sp]
 8000656:	2506      	movs	r5, #6
		if(!IF_RESET_STATE(rx_data)) break;
 8000658:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d141      	bne.n	80006e4 <_ZN9SmartFuse4initEv+0xb8>
 8000660:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8000664:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000668:	430a      	orrs	r2, r1
 800066a:	d03d      	beq.n	80006e8 <_ZN9SmartFuse4initEv+0xbc>
	tab[0] = dat_1;
 800066c:	f244 0314 	movw	r3, #16404	; 0x4014
 8000670:	f8ad 3000 	strh.w	r3, [sp]
	transmitReceiveData(tx_data, rx_data);
 8000674:	9900      	ldr	r1, [sp, #0]
 8000676:	aa01      	add	r2, sp, #4
 8000678:	4620      	mov	r0, r4
 800067a:	f7ff febf 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	transmitReceiveData(tx_data, rx_data);
 800067e:	2308      	movs	r3, #8
 8000680:	f88d 3001 	strb.w	r3, [sp, #1]
 8000684:	9900      	ldr	r1, [sp, #0]
 8000686:	aa01      	add	r2, sp, #4
 8000688:	4620      	mov	r0, r4
 800068a:	f7ff feb7 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->toggle = false;
 800068e:	4625      	mov	r5, r4
	this->watch_dog.restart();
 8000690:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000694:	f000 fce0 	bl	8001058 <_ZN5Timer7restartEv>
	this->toggle = false;
 8000698:	2300      	movs	r3, #0
 800069a:	f805 3b52 	strb.w	r3, [r5], #82
	for(int i = 0; i < 6; i++)
 800069e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80006a2:	469a      	mov	sl, r3
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 80006a4:	f04f 09c0 	mov.w	r9, #192	; 0xc0
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 80006a8:	f04f 0880 	mov.w	r8, #128	; 0x80
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 80006ac:	461f      	mov	r7, r3
		tx_data[1] = uint8_t(this->fuses_settings.duty_cykle[i] >> 4);
 80006ae:	f835 2b02 	ldrh.w	r2, [r5], #2
		tx_data[2] = uint8_t(this->fuses_settings.duty_cykle[i] << 4) | this->toggle << 1;
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80006b8:	fa5f fb8a 	uxtb.w	fp, sl
		tx_data[1] = uint8_t(this->fuses_settings.duty_cykle[i] >> 4);
 80006bc:	0912      	lsrs	r2, r2, #4
		tx_data[2] = uint8_t(this->fuses_settings.duty_cykle[i] << 4) | this->toggle << 1;
 80006be:	f88d 3002 	strb.w	r3, [sp, #2]
		tx_data[1] = uint8_t(this->fuses_settings.duty_cykle[i] >> 4);
 80006c2:	f88d 2001 	strb.w	r2, [sp, #1]
		tx_data[0] = WRITE_RAM(0x00 + i);
 80006c6:	f88d b000 	strb.w	fp, [sp]
		transmitReceiveData(tx_data, rx_data);
 80006ca:	9900      	ldr	r1, [sp, #0]
 80006cc:	aa01      	add	r2, sp, #4
 80006ce:	4620      	mov	r0, r4
 80006d0:	f7ff fe94 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		switch (this->fuses_settings.sampling_mode[i])
 80006d4:	f816 3b01 	ldrb.w	r3, [r6], #1
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d814      	bhi.n	8000706 <_ZN9SmartFuse4initEv+0xda>
 80006dc:	e8df f003 	tbb	[pc, r3]
 80006e0:	1163666a 	.word	0x1163666a
		if(!IF_RESET_STATE(rx_data)) break;
 80006e4:	0658      	lsls	r0, r3, #25
 80006e6:	d5c1      	bpl.n	800066c <_ZN9SmartFuse4initEv+0x40>
		else if(i == FUSE_TIMEOUT - 1)
 80006e8:	3d01      	subs	r5, #1
		transmitReceiveData(tx_data, rx_data);
 80006ea:	4620      	mov	r0, r4
 80006ec:	aa01      	add	r2, sp, #4
		else if(i == FUSE_TIMEOUT - 1)
 80006ee:	d042      	beq.n	8000776 <_ZN9SmartFuse4initEv+0x14a>
		transmitReceiveData(tx_data, rx_data);
 80006f0:	f88d 6001 	strb.w	r6, [sp, #1]
 80006f4:	9900      	ldr	r1, [sp, #0]
 80006f6:	f7ff fe81 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		HAL_Delay(1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 fd58 	bl	80011b0 <HAL_Delay>
	for (int i = 0; i < FUSE_TIMEOUT; i++)
 8000700:	e7aa      	b.n	8000658 <_ZN9SmartFuse4initEv+0x2c>
			case SamplingMode::Filtered: tx_data[2] = 0xc0; break;
 8000702:	f88d 9002 	strb.w	r9, [sp, #2]
		tx_data[0] = WRITE_RAM(0x08 + i);
 8000706:	f10b 0b08 	add.w	fp, fp, #8
 800070a:	f88d b000 	strb.w	fp, [sp]
		transmitReceiveData(tx_data, rx_data);
 800070e:	f88d 7001 	strb.w	r7, [sp, #1]
 8000712:	9900      	ldr	r1, [sp, #0]
 8000714:	aa01      	add	r2, sp, #4
 8000716:	4620      	mov	r0, r4
 8000718:	f7ff fe70 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	for(int i = 0; i < 6; i++)
 800071c:	f10a 0a01 	add.w	sl, sl, #1
		this->handle_timer();
 8000720:	4620      	mov	r0, r4
 8000722:	f7ff ff21 	bl	8000568 <_ZN9SmartFuse12handle_timerEv>
	for(int i = 0; i < 6; i++)
 8000726:	f1ba 0f06 	cmp.w	sl, #6
 800072a:	d001      	beq.n	8000730 <_ZN9SmartFuse4initEv+0x104>
		tx_data[2] = uint8_t(this->fuses_settings.duty_cykle[i] << 4) | this->toggle << 1;
 800072c:	7823      	ldrb	r3, [r4, #0]
 800072e:	e7be      	b.n	80006ae <_ZN9SmartFuse4initEv+0x82>
	for(int i = 0; i < 6; i++) tx_data[1] |= this->fuses[i].active << i;
 8000730:	7c21      	ldrb	r1, [r4, #16]
 8000732:	7a23      	ldrb	r3, [r4, #8]
 8000734:	7e22      	ldrb	r2, [r4, #24]
 8000736:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800073a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800073e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8000742:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000746:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800074a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800074e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
	tx_data[2] = this->toggle << 1;
 8000752:	7822      	ldrb	r2, [r4, #0]
	for(int i = 0; i < 6; i++) tx_data[1] |= this->fuses[i].active << i;
 8000754:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
	tx_data[2] = this->toggle << 1;
 8000758:	0052      	lsls	r2, r2, #1
	tx_data[0] = WRITE_RAM(0x13);
 800075a:	2113      	movs	r1, #19
	tx_data[2] = this->toggle << 1;
 800075c:	f88d 2002 	strb.w	r2, [sp, #2]
	transmitReceiveData(tx_data, rx_data);
 8000760:	f88d 3001 	strb.w	r3, [sp, #1]
	tx_data[0] = WRITE_RAM(0x13);
 8000764:	f88d 1000 	strb.w	r1, [sp]
	transmitReceiveData(tx_data, rx_data);
 8000768:	9900      	ldr	r1, [sp, #0]
 800076a:	aa01      	add	r2, sp, #4
 800076c:	4620      	mov	r0, r4
 800076e:	f7ff fe45 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	this->state = checkGSB(rx_data[0]);
 8000772:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000776:	0619      	lsls	r1, r3, #24
 8000778:	d41f      	bmi.n	80007ba <_ZN9SmartFuse4initEv+0x18e>
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 800077a:	07da      	lsls	r2, r3, #31
 800077c:	d429      	bmi.n	80007d2 <_ZN9SmartFuse4initEv+0x1a6>
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 800077e:	079f      	lsls	r7, r3, #30
 8000780:	d421      	bmi.n	80007c6 <_ZN9SmartFuse4initEv+0x19a>
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 8000782:	075e      	lsls	r6, r3, #29
 8000784:	d42b      	bmi.n	80007de <_ZN9SmartFuse4initEv+0x1b2>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000786:	071d      	lsls	r5, r3, #28
 8000788:	d42b      	bmi.n	80007e2 <_ZN9SmartFuse4initEv+0x1b6>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 800078a:	06d9      	lsls	r1, r3, #27
 800078c:	d42b      	bmi.n	80007e6 <_ZN9SmartFuse4initEv+0x1ba>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 800078e:	069a      	lsls	r2, r3, #26
 8000790:	d42b      	bmi.n	80007ea <_ZN9SmartFuse4initEv+0x1be>
	if(gsb & 0b01000000) return SmartFuseState::ResetState;
 8000792:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000796:	bf0c      	ite	eq
 8000798:	2008      	moveq	r0, #8
 800079a:	2001      	movne	r0, #1
	this->state = checkGSB(rx_data[0]);
 800079c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80007a0:	b003      	add	sp, #12
 80007a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case SamplingMode::Continuous: tx_data[2] = 0x80; break;
 80007a6:	f88d 8002 	strb.w	r8, [sp, #2]
 80007aa:	e7ac      	b.n	8000706 <_ZN9SmartFuse4initEv+0xda>
			case SamplingMode::Start: tx_data[2] = 0x40; break;
 80007ac:	2340      	movs	r3, #64	; 0x40
 80007ae:	f88d 3002 	strb.w	r3, [sp, #2]
 80007b2:	e7a8      	b.n	8000706 <_ZN9SmartFuse4initEv+0xda>
			case SamplingMode::Stop: tx_data[2] = 0x00; break;
 80007b4:	f88d 7002 	strb.w	r7, [sp, #2]
 80007b8:	e7a5      	b.n	8000706 <_ZN9SmartFuse4initEv+0xda>
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 80007ba:	2000      	movs	r0, #0
	this->state = checkGSB(rx_data[0]);
 80007bc:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80007c0:	b003      	add	sp, #12
 80007c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 80007c6:	2006      	movs	r0, #6
	this->state = checkGSB(rx_data[0]);
 80007c8:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80007cc:	b003      	add	sp, #12
 80007ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 80007d2:	2007      	movs	r0, #7
	this->state = checkGSB(rx_data[0]);
 80007d4:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80007d8:	b003      	add	sp, #12
 80007da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 80007de:	2005      	movs	r0, #5
 80007e0:	e7ec      	b.n	80007bc <_ZN9SmartFuse4initEv+0x190>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 80007e2:	2004      	movs	r0, #4
 80007e4:	e7ea      	b.n	80007bc <_ZN9SmartFuse4initEv+0x190>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 80007e6:	2003      	movs	r0, #3
 80007e8:	e7e8      	b.n	80007bc <_ZN9SmartFuse4initEv+0x190>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 80007ea:	2002      	movs	r0, #2
 80007ec:	e7e6      	b.n	80007bc <_ZN9SmartFuse4initEv+0x190>
 80007ee:	bf00      	nop

080007f0 <_ZN9SmartFuse6handleEv>:
{
 80007f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(watch_dog.getPassedTime() >= 40)
 80007f2:	f100 0478 	add.w	r4, r0, #120	; 0x78
{
 80007f6:	b083      	sub	sp, #12
	std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 80007f8:	2300      	movs	r3, #0
{
 80007fa:	4605      	mov	r5, r0
	if(watch_dog.getPassedTime() >= 40)
 80007fc:	4620      	mov	r0, r4
	std::array < uint8_t, 3 > tx_data { 0, 0, 0 };
 80007fe:	f8ad 3000 	strh.w	r3, [sp]
 8000802:	f88d 3002 	strb.w	r3, [sp, #2]
	std::array < uint8_t, 3 > rx_data { 0, 0, 0 };
 8000806:	f8ad 3004 	strh.w	r3, [sp, #4]
 800080a:	f88d 3006 	strb.w	r3, [sp, #6]
	if(watch_dog.getPassedTime() >= 40)
 800080e:	f000 fc29 	bl	8001064 <_ZN5Timer13getPassedTimeEv>
 8000812:	2827      	cmp	r0, #39	; 0x27
 8000814:	d835      	bhi.n	8000882 <_ZN9SmartFuse6handleEv+0x92>
 8000816:	af01      	add	r7, sp, #4
{
 8000818:	2400      	movs	r4, #0
 800081a:	f105 060a 	add.w	r6, r5, #10
		tx_data[0] = READ_RAM(0x28 + i);
 800081e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8000822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000826:	f88d 3000 	strb.w	r3, [sp]
		transmitReceiveData(tx_data, rx_data);
 800082a:	463a      	mov	r2, r7
 800082c:	9900      	ldr	r1, [sp, #0]
 800082e:	4628      	mov	r0, r5
 8000830:	f7ff fde4 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->fuses[i].current = uint16_t(rx_data[1]) << 4 | uint16_t(rx_data[2]) >> 4;//(*(uint16_t*)(rx_data + 1) >> 4) & 0x03ff;
 8000834:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000838:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800083c:	091b      	lsrs	r3, r3, #4
 800083e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000842:	f826 3034 	strh.w	r3, [r6, r4, lsl #3]
	for(int i = 0; i < 6; i++)
 8000846:	3401      	adds	r4, #1
 8000848:	2c06      	cmp	r4, #6
 800084a:	d1e8      	bne.n	800081e <_ZN9SmartFuse6handleEv+0x2e>
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 800084c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
	this->state = checkGSB(rx_data[0]);
 8000850:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000854:	2a00      	cmp	r2, #0
 8000856:	db3d      	blt.n	80008d4 <_ZN9SmartFuse6handleEv+0xe4>
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 8000858:	07da      	lsls	r2, r3, #31
 800085a:	d445      	bmi.n	80008e8 <_ZN9SmartFuse6handleEv+0xf8>
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 800085c:	079f      	lsls	r7, r3, #30
 800085e:	d43e      	bmi.n	80008de <_ZN9SmartFuse6handleEv+0xee>
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 8000860:	075e      	lsls	r6, r3, #29
 8000862:	d446      	bmi.n	80008f2 <_ZN9SmartFuse6handleEv+0x102>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000864:	071c      	lsls	r4, r3, #28
 8000866:	d446      	bmi.n	80008f6 <_ZN9SmartFuse6handleEv+0x106>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 8000868:	06d9      	lsls	r1, r3, #27
 800086a:	d446      	bmi.n	80008fa <_ZN9SmartFuse6handleEv+0x10a>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 800086c:	069a      	lsls	r2, r3, #26
 800086e:	d446      	bmi.n	80008fe <_ZN9SmartFuse6handleEv+0x10e>
	if(gsb & 0b01000000) return SmartFuseState::ResetState;
 8000870:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000874:	bf0c      	ite	eq
 8000876:	2008      	moveq	r0, #8
 8000878:	2001      	movne	r0, #1
	this->state = checkGSB(rx_data[0]);
 800087a:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
}
 800087e:	b003      	add	sp, #12
 8000880:	bdf0      	pop	{r4, r5, r6, r7, pc}
		this->toggle = !this->toggle;
 8000882:	782b      	ldrb	r3, [r5, #0]
		tx_data[0] = READ_RAM(0x13);
 8000884:	2253      	movs	r2, #83	; 0x53
		this->toggle = !this->toggle;
 8000886:	f083 0301 	eor.w	r3, r3, #1
		tx_data[0] = READ_RAM(0x13);
 800088a:	f88d 2000 	strb.w	r2, [sp]
		this->toggle = !this->toggle;
 800088e:	702b      	strb	r3, [r5, #0]
		transmitReceiveData(tx_data, rx_data);
 8000890:	af01      	add	r7, sp, #4
 8000892:	9900      	ldr	r1, [sp, #0]
 8000894:	463a      	mov	r2, r7
 8000896:	4628      	mov	r0, r5
 8000898:	f7ff fdb0 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		rx_data[2] &= ~(1 << 1);
 800089c:	f89d 3006 	ldrb.w	r3, [sp, #6]
		modifyTab(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1));
 80008a0:	782a      	ldrb	r2, [r5, #0]
		rx_data[2] &= ~(1 << 1);
 80008a2:	f023 0302 	bic.w	r3, r3, #2
		modifyTab(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1));
 80008a6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
	tab[2] = dat_3;
 80008b0:	f88d 3002 	strb.w	r3, [sp, #2]
		modifyTab(tx_data, WRITE_RAM(0x13), rx_data[1], rx_data[2] |= (toggle << 1));
 80008b4:	f88d 3006 	strb.w	r3, [sp, #6]
	tab[0] = dat_1;
 80008b8:	2313      	movs	r3, #19
	tab[1] = dat_2;
 80008ba:	f88d 2001 	strb.w	r2, [sp, #1]
	tab[0] = dat_1;
 80008be:	f88d 3000 	strb.w	r3, [sp]
		transmitReceiveData(tx_data, rx_data);
 80008c2:	4628      	mov	r0, r5
 80008c4:	9900      	ldr	r1, [sp, #0]
 80008c6:	463a      	mov	r2, r7
 80008c8:	f7ff fd98 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
		this->watch_dog.restart();
 80008cc:	4620      	mov	r0, r4
 80008ce:	f000 fbc3 	bl	8001058 <_ZN5Timer7restartEv>
 80008d2:	e7a1      	b.n	8000818 <_ZN9SmartFuse6handleEv+0x28>
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 80008d4:	2000      	movs	r0, #0
	this->state = checkGSB(rx_data[0]);
 80008d6:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
}
 80008da:	b003      	add	sp, #12
 80008dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 80008de:	4620      	mov	r0, r4
	this->state = checkGSB(rx_data[0]);
 80008e0:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
}
 80008e4:	b003      	add	sp, #12
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 80008e8:	2007      	movs	r0, #7
	this->state = checkGSB(rx_data[0]);
 80008ea:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
}
 80008ee:	b003      	add	sp, #12
 80008f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 80008f2:	2005      	movs	r0, #5
 80008f4:	e7ef      	b.n	80008d6 <_ZN9SmartFuse6handleEv+0xe6>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 80008f6:	2004      	movs	r0, #4
 80008f8:	e7ed      	b.n	80008d6 <_ZN9SmartFuse6handleEv+0xe6>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 80008fa:	2003      	movs	r0, #3
 80008fc:	e7eb      	b.n	80008d6 <_ZN9SmartFuse6handleEv+0xe6>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 80008fe:	2002      	movs	r0, #2
 8000900:	e7e9      	b.n	80008d6 <_ZN9SmartFuse6handleEv+0xe6>
 8000902:	bf00      	nop

08000904 <_ZN9SmartFuse14activeAllFusesEv>:
{
 8000904:	b510      	push	{r4, lr}
	modifyTab(tx_data, WRITE_RAM(0x13), 0x3f, this->toggle << 1);
 8000906:	7802      	ldrb	r2, [r0, #0]
{
 8000908:	b082      	sub	sp, #8
	tab[0] = dat_1;
 800090a:	f04f 0c13 	mov.w	ip, #19
	tab[1] = dat_2;
 800090e:	213f      	movs	r1, #63	; 0x3f
	modifyTab(tx_data, WRITE_RAM(0x13), 0x3f, this->toggle << 1);
 8000910:	0052      	lsls	r2, r2, #1
	for(int i = 0; i < 6; i++) this->fuses[i].active = true;
 8000912:	2301      	movs	r3, #1
	tab[2] = dat_3;
 8000914:	f88d 2002 	strb.w	r2, [sp, #2]
	tab[0] = dat_1;
 8000918:	f88d c000 	strb.w	ip, [sp]
	tab[1] = dat_2;
 800091c:	f88d 1001 	strb.w	r1, [sp, #1]
	this->transmitReceiveData(tx_data, rx_data);
 8000920:	9900      	ldr	r1, [sp, #0]
	for(int i = 0; i < 6; i++) this->fuses[i].active = true;
 8000922:	7203      	strb	r3, [r0, #8]
 8000924:	7403      	strb	r3, [r0, #16]
 8000926:	7603      	strb	r3, [r0, #24]
 8000928:	f880 3020 	strb.w	r3, [r0, #32]
 800092c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8000930:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	this->transmitReceiveData(tx_data, rx_data);
 8000934:	aa01      	add	r2, sp, #4
{
 8000936:	4604      	mov	r4, r0
	this->transmitReceiveData(tx_data, rx_data);
 8000938:	f7ff fd60 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 800093c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
	this->state = checkGSB(rx_data[0]);
 8000940:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000944:	2a00      	cmp	r2, #0
 8000946:	db14      	blt.n	8000972 <_ZN9SmartFuse14activeAllFusesEv+0x6e>
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 8000948:	07d9      	lsls	r1, r3, #31
 800094a:	d41c      	bmi.n	8000986 <_ZN9SmartFuse14activeAllFusesEv+0x82>
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 800094c:	079a      	lsls	r2, r3, #30
 800094e:	d415      	bmi.n	800097c <_ZN9SmartFuse14activeAllFusesEv+0x78>
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d41d      	bmi.n	8000990 <_ZN9SmartFuse14activeAllFusesEv+0x8c>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000954:	071a      	lsls	r2, r3, #28
 8000956:	d41d      	bmi.n	8000994 <_ZN9SmartFuse14activeAllFusesEv+0x90>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 8000958:	06d9      	lsls	r1, r3, #27
 800095a:	d41d      	bmi.n	8000998 <_ZN9SmartFuse14activeAllFusesEv+0x94>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 800095c:	069a      	lsls	r2, r3, #26
 800095e:	d41d      	bmi.n	800099c <_ZN9SmartFuse14activeAllFusesEv+0x98>
	if(gsb & 0b01000000) return SmartFuseState::ResetState;
 8000960:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000964:	bf0c      	ite	eq
 8000966:	2008      	moveq	r0, #8
 8000968:	2001      	movne	r0, #1
	this->state = checkGSB(rx_data[0]);
 800096a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800096e:	b002      	add	sp, #8
 8000970:	bd10      	pop	{r4, pc}
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000972:	2000      	movs	r0, #0
	this->state = checkGSB(rx_data[0]);
 8000974:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8000978:	b002      	add	sp, #8
 800097a:	bd10      	pop	{r4, pc}
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 800097c:	2006      	movs	r0, #6
	this->state = checkGSB(rx_data[0]);
 800097e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8000982:	b002      	add	sp, #8
 8000984:	bd10      	pop	{r4, pc}
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 8000986:	2007      	movs	r0, #7
	this->state = checkGSB(rx_data[0]);
 8000988:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800098c:	b002      	add	sp, #8
 800098e:	bd10      	pop	{r4, pc}
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 8000990:	2005      	movs	r0, #5
 8000992:	e7ef      	b.n	8000974 <_ZN9SmartFuse14activeAllFusesEv+0x70>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000994:	2004      	movs	r0, #4
 8000996:	e7ed      	b.n	8000974 <_ZN9SmartFuse14activeAllFusesEv+0x70>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 8000998:	2003      	movs	r0, #3
 800099a:	e7eb      	b.n	8000974 <_ZN9SmartFuse14activeAllFusesEv+0x70>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 800099c:	2002      	movs	r0, #2
 800099e:	e7e9      	b.n	8000974 <_ZN9SmartFuse14activeAllFusesEv+0x70>

080009a0 <_ZN9SmartFuse18deactivateAllFusesEv>:
{
 80009a0:	b530      	push	{r4, r5, lr}
	modifyTab(tx_data, WRITE_RAM(0x13), 0x00, this->toggle << 1);
 80009a2:	7803      	ldrb	r3, [r0, #0]
{
 80009a4:	b083      	sub	sp, #12
		this->fuses[i].active = false;
 80009a6:	2400      	movs	r4, #0
	modifyTab(tx_data, WRITE_RAM(0x13), 0x00, this->toggle << 1);
 80009a8:	005b      	lsls	r3, r3, #1
	tab[0] = dat_1;
 80009aa:	2213      	movs	r2, #19
 80009ac:	f88d 2000 	strb.w	r2, [sp]
	tab[2] = dat_3;
 80009b0:	f88d 3002 	strb.w	r3, [sp, #2]
	tab[1] = dat_2;
 80009b4:	f88d 4001 	strb.w	r4, [sp, #1]
	this->transmitReceiveData(tx_data, rx_data);
 80009b8:	9900      	ldr	r1, [sp, #0]
		this->fuses[i].active = false;
 80009ba:	7204      	strb	r4, [r0, #8]
	this->transmitReceiveData(tx_data, rx_data);
 80009bc:	aa01      	add	r2, sp, #4
		this->fuses[i].active = false;
 80009be:	7404      	strb	r4, [r0, #16]
 80009c0:	7604      	strb	r4, [r0, #24]
 80009c2:	f880 4020 	strb.w	r4, [r0, #32]
 80009c6:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 80009ca:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
{
 80009ce:	4605      	mov	r5, r0
	this->transmitReceiveData(tx_data, rx_data);
 80009d0:	f7ff fd14 	bl	80003fc <_ZN9SmartFuse19transmitReceiveDataESt5arrayIhLj3EERS1_>
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 80009d4:	f99d 2004 	ldrsb.w	r2, [sp, #4]
	this->state = checkGSB(rx_data[0]);
 80009d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 80009dc:	42a2      	cmp	r2, r4
 80009de:	db14      	blt.n	8000a0a <_ZN9SmartFuse18deactivateAllFusesEv+0x6a>
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 80009e0:	07dc      	lsls	r4, r3, #31
 80009e2:	d41c      	bmi.n	8000a1e <_ZN9SmartFuse18deactivateAllFusesEv+0x7e>
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 80009e4:	0799      	lsls	r1, r3, #30
 80009e6:	d415      	bmi.n	8000a14 <_ZN9SmartFuse18deactivateAllFusesEv+0x74>
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 80009e8:	075a      	lsls	r2, r3, #29
 80009ea:	d41d      	bmi.n	8000a28 <_ZN9SmartFuse18deactivateAllFusesEv+0x88>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 80009ec:	071c      	lsls	r4, r3, #28
 80009ee:	d41d      	bmi.n	8000a2c <_ZN9SmartFuse18deactivateAllFusesEv+0x8c>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 80009f0:	06d9      	lsls	r1, r3, #27
 80009f2:	d41d      	bmi.n	8000a30 <_ZN9SmartFuse18deactivateAllFusesEv+0x90>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 80009f4:	069a      	lsls	r2, r3, #26
 80009f6:	d41d      	bmi.n	8000a34 <_ZN9SmartFuse18deactivateAllFusesEv+0x94>
	if(gsb & 0b01000000) return SmartFuseState::ResetState;
 80009f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80009fc:	bf0c      	ite	eq
 80009fe:	2008      	moveq	r0, #8
 8000a00:	2001      	movne	r0, #1
	this->state = checkGSB(rx_data[0]);
 8000a02:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
}
 8000a06:	b003      	add	sp, #12
 8000a08:	bd30      	pop	{r4, r5, pc}
	if(gsb & 0b10000000) return SmartFuseState::Ok; 		//at the beginning to save some computing time
 8000a0a:	4620      	mov	r0, r4
	this->state = checkGSB(rx_data[0]);
 8000a0c:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
}
 8000a10:	b003      	add	sp, #12
 8000a12:	bd30      	pop	{r4, r5, pc}
	if(gsb & 0b00000010) return SmartFuseState::OLOFF;
 8000a14:	2006      	movs	r0, #6
	this->state = checkGSB(rx_data[0]);
 8000a16:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
}
 8000a1a:	b003      	add	sp, #12
 8000a1c:	bd30      	pop	{r4, r5, pc}
	if(gsb & 0b00000001) return SmartFuseState::FailSafe;
 8000a1e:	2007      	movs	r0, #7
	this->state = checkGSB(rx_data[0]);
 8000a20:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
}
 8000a24:	b003      	add	sp, #12
 8000a26:	bd30      	pop	{r4, r5, pc}
	if(gsb & 0b00000100) return SmartFuseState::LatchOff;
 8000a28:	2005      	movs	r0, #5
 8000a2a:	e7ef      	b.n	8000a0c <_ZN9SmartFuse18deactivateAllFusesEv+0x6c>
	if(gsb & 0b00001000) return SmartFuseState::TempFail;
 8000a2c:	2004      	movs	r0, #4
 8000a2e:	e7ed      	b.n	8000a0c <_ZN9SmartFuse18deactivateAllFusesEv+0x6c>
	if(gsb & 0b00010000) return SmartFuseState::OTPLVDS;
 8000a30:	2003      	movs	r0, #3
 8000a32:	e7eb      	b.n	8000a0c <_ZN9SmartFuse18deactivateAllFusesEv+0x6c>
	if(gsb & 0b00100000) return SmartFuseState::SPIError;
 8000a34:	2002      	movs	r0, #2
 8000a36:	e7e9      	b.n	8000a0c <_ZN9SmartFuse18deactivateAllFusesEv+0x6c>

08000a38 <_ZN14GpioOutElementD1Ev>:
		const uint32_t pin;

		const GPIO_TypeDef * const port;
};

class GpioOutElement : public GpioElement
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <_ZN14GpioOutElementD0Ev>:
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	2110      	movs	r1, #16
 8000a40:	4604      	mov	r4, r0
 8000a42:	f001 ffce 	bl	80029e2 <_ZdlPvj>
 8000a46:	4620      	mov	r0, r4
 8000a48:	bd10      	pop	{r4, pc}
 8000a4a:	bf00      	nop

08000a4c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>:
 */

#include "gpio elements.hpp"

GpioElement::GpioElement(const GPIO_TypeDef * const port, const uint32_t pin, const bool is_inverted) :
						 port(port), pin(pin), is_inverted(is_inverted) { }
 8000a4c:	7143      	strb	r3, [r0, #5]

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin) :
							   GpioElement(port, pin, false) { }

GpioOutElement::GpioOutElement(const GPIO_TypeDef *port, const uint32_t pin, const bool is_inverted) :
							   GpioElement(port, pin, is_inverted) { }
 8000a4e:	4b02      	ldr	r3, [pc, #8]	; (8000a58 <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb+0xc>)
 8000a50:	6003      	str	r3, [r0, #0]
						 port(port), pin(pin), is_inverted(is_inverted) { }
 8000a52:	e9c0 2102 	strd	r2, r1, [r0, #8]
							   GpioElement(port, pin, is_inverted) { }
 8000a56:	4770      	bx	lr
 8000a58:	08002b30 	.word	0x08002b30

08000a5c <_ZN14GpioOutElement8activateEv>:

void GpioOutElement::activate()
{
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, this->is_inverted ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000a5c:	7942      	ldrb	r2, [r0, #5]
 8000a5e:	8901      	ldrh	r1, [r0, #8]
 8000a60:	68c0      	ldr	r0, [r0, #12]
 8000a62:	f082 0201 	eor.w	r2, r2, #1
 8000a66:	f000 bf3b 	b.w	80018e0 <HAL_GPIO_WritePin>
 8000a6a:	bf00      	nop

08000a6c <_ZN14GpioOutElement10deactivateEv>:
}

void GpioOutElement::deactivate()
{
	HAL_GPIO_WritePin((GPIO_TypeDef*)(this->port), this->pin, this->is_inverted ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a6c:	7942      	ldrb	r2, [r0, #5]
 8000a6e:	8901      	ldrh	r1, [r0, #8]
 8000a70:	68c0      	ldr	r0, [r0, #12]
 8000a72:	f000 bf35 	b.w	80018e0 <HAL_GPIO_WritePin>
 8000a76:	bf00      	nop

08000a78 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a63      	ldr	r2, [pc, #396]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a5d      	ldr	r2, [pc, #372]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b5b      	ldr	r3, [pc, #364]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b58      	ldr	r3, [pc, #352]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a57      	ldr	r2, [pc, #348]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b55      	ldr	r3, [pc, #340]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a51      	ldr	r2, [pc, #324]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b4f      	ldr	r3, [pc, #316]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	4b4c      	ldr	r3, [pc, #304]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a4b      	ldr	r2, [pc, #300]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b49      	ldr	r3, [pc, #292]	; (8000c20 <MX_GPIO_Init+0x1a8>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	210f      	movs	r1, #15
 8000b0a:	4846      	ldr	r0, [pc, #280]	; (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b0c:	f000 fee8 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	211e      	movs	r1, #30
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f000 fee2 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000b22:	4841      	ldr	r0, [pc, #260]	; (8000c28 <MX_GPIO_Init+0x1b0>)
 8000b24:	f000 fedc 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000b28:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b2c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4839      	ldr	r0, [pc, #228]	; (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b3e:	f000 fd3d 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b42:	230f      	movs	r3, #15
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4832      	ldr	r0, [pc, #200]	; (8000c24 <MX_GPIO_Init+0x1ac>)
 8000b5a:	f000 fd2f 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000b5e:	f248 7301 	movw	r3, #34561	; 0x8701
 8000b62:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b64:	2303      	movs	r3, #3
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f000 fd21 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000b7a:	231e      	movs	r3, #30
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f000 fd12 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000b98:	2357      	movs	r3, #87	; 0x57
 8000b9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481f      	ldr	r0, [pc, #124]	; (8000c28 <MX_GPIO_Init+0x1b0>)
 8000bac:	f000 fd06 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000bb0:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000bb4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <MX_GPIO_Init+0x1b0>)
 8000bc6:	f000 fcf9 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4813      	ldr	r0, [pc, #76]	; (8000c2c <MX_GPIO_Init+0x1b4>)
 8000bde:	f000 fced 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000be2:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <MX_GPIO_Init+0x1b0>)
 8000bfc:	f000 fcde 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c00:	2308      	movs	r3, #8
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c04:	2303      	movs	r3, #3
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <MX_GPIO_Init+0x1b8>)
 8000c14:	f000 fcd2 	bl	80015bc <HAL_GPIO_Init>

}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000800 	.word	0x48000800
 8000c28:	48000400 	.word	0x48000400
 8000c2c:	48000c00 	.word	0x48000c00
 8000c30:	48001c00 	.word	0x48001c00

08000c34 <Error_Handler>:
 */
void Error_Handler(void)
{
	/*USER CODE BEGIN Error_Handler_Debug */
	/*User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_OK, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
{
 8000c36:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LED_OK, GPIO_PIN_SET);
 8000c38:	4611      	mov	r1, r2
 8000c3a:	480a      	ldr	r0, [pc, #40]	; (8000c64 <Error_Handler+0x30>)
 8000c3c:	f000 fe50 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING1, GPIO_PIN_SET);
 8000c40:	4808      	ldr	r0, [pc, #32]	; (8000c64 <Error_Handler+0x30>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	2102      	movs	r1, #2
 8000c46:	f000 fe4b 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_WARNING2, GPIO_PIN_SET);
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <Error_Handler+0x30>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2104      	movs	r1, #4
 8000c50:	f000 fe46 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ERROR, GPIO_PIN_RESET);
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <Error_Handler+0x30>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	2108      	movs	r1, #8
 8000c5a:	f000 fe41 	bl	80018e0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5e:	b672      	cpsid	i
	__disable_irq();
	while (1) {}
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x2c>
 8000c62:	bf00      	nop
 8000c64:	48000800 	.word	0x48000800

08000c68 <_Z18SystemClock_Configv>:
{
 8000c68:	b500      	push	{lr}
 8000c6a:	b099      	sub	sp, #100	; 0x64
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c6c:	2248      	movs	r2, #72	; 0x48
 8000c6e:	2100      	movs	r1, #0
 8000c70:	a806      	add	r0, sp, #24
 8000c72:	f001 fee7 	bl	8002a44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c76:	2300      	movs	r3, #0
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c78:	f44f 7000 	mov.w	r0, #512	; 0x200
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c7c:	e9cd 3300 	strd	r3, r3, [sp]
 8000c80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000c84:	9304      	str	r3, [sp, #16]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c86:	f000 fe63 	bl	8001950 <HAL_PWREx_ControlVoltageScaling>
 8000c8a:	b9e8      	cbnz	r0, 8000cc8 <_Z18SystemClock_Configv+0x60>
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4603      	mov	r3, r0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c90:	2110      	movs	r1, #16
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c92:	920d      	str	r2, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c96:	2260      	movs	r2, #96	; 0x60
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c98:	9106      	str	r1, [sp, #24]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c9a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c9e:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f000 fefa 	bl	8001a98 <HAL_RCC_OscConfig>
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	b978      	cbnz	r0, 8000cc8 <_Z18SystemClock_Configv+0x60>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000ca8:	220f      	movs	r2, #15
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9cd 2300 	strd	r2, r3, [sp]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb0:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cba:	9104      	str	r1, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cbc:	f001 fb74 	bl	80023a8 <HAL_RCC_ClockConfig>
 8000cc0:	b910      	cbnz	r0, 8000cc8 <_Z18SystemClock_Configv+0x60>
}
 8000cc2:	b019      	add	sp, #100	; 0x64
 8000cc4:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8000cc8:	f7ff ffb4 	bl	8000c34 <Error_Handler>

08000ccc <main>:
{
 8000ccc:	b570      	push	{r4, r5, r6, lr}
	FusesSettings fuses_settings
 8000cce:	4a58      	ldr	r2, [pc, #352]	; (8000e30 <main+0x164>)
{
 8000cd0:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
	FusesSettings fuses_settings
 8000cd4:	6810      	ldr	r0, [r2, #0]
 8000cd6:	8892      	ldrh	r2, [r2, #4]
 8000cd8:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
 8000cdc:	4a55      	ldr	r2, [pc, #340]	; (8000e34 <main+0x168>)
 8000cde:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8000ce2:	ac13      	add	r4, sp, #76	; 0x4c
 8000ce4:	f04f 3103 	mov.w	r1, #50529027	; 0x3030303
    void emplace_back(Args && ... args)
    {
#if defined(ETL_CHECK_PUSH_POP)
      ETL_ASSERT(size() != CAPACITY, ETL_ERROR(vector_full));
#endif
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000ce8:	9400      	str	r4, [sp, #0]
 8000cea:	ab24      	add	r3, sp, #144	; 0x90
 8000cec:	e9c4 1203 	strd	r1, r2, [r4, #12]
 8000cf0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000cf4:	f240 1c01 	movw	ip, #257	; 0x101
 8000cf8:	61e2      	str	r2, [r4, #28]
    /// Constructor.
    //*********************************************************************
    ivector(T* p_buffer_, size_t MAX_SIZE)
      : vector_base(MAX_SIZE)
      , p_buffer(p_buffer_)
      , p_end(p_buffer_)
 8000cfa:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
 8000cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d02:	4618      	mov	r0, r3
 8000d04:	f04f 3601 	mov.w	r6, #16843009	; 0x1010101
 8000d08:	f06f 23fc 	mvn.w	r3, #4227922944	; 0xfc00fc00
 8000d0c:	f8a4 c004 	strh.w	ip, [r4, #4]

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
      : CAPACITY(max_size_)
 8000d10:	2504      	movs	r5, #4
 8000d12:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8000d16:	e9c4 2208 	strd	r2, r2, [r4, #32]
 8000d1a:	e9c4 220a 	strd	r2, r2, [r4, #40]	; 0x28
 8000d1e:	6322      	str	r2, [r4, #48]	; 0x30
 8000d20:	86a2      	strh	r2, [r4, #52]	; 0x34
 8000d22:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <main+0x16c>)
 8000d24:	6026      	str	r6, [r4, #0]
 8000d26:	2202      	movs	r2, #2
 8000d28:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d2c:	9521      	str	r5, [sp, #132]	; 0x84
 8000d2e:	f7ff fadd 	bl	80002ec <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000d32:	9823      	ldr	r0, [sp, #140]	; 0x8c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d34:	4b40      	ldr	r3, [pc, #256]	; (8000e38 <main+0x16c>)
 8000d36:	9400      	str	r4, [sp, #0]
 8000d38:	462a      	mov	r2, r5
      ++p_end;
 8000d3a:	3080      	adds	r0, #128	; 0x80
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d3c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
      ++p_end;
 8000d40:	9023      	str	r0, [sp, #140]	; 0x8c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d42:	f7ff fad3 	bl	80002ec <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000d46:	9823      	ldr	r0, [sp, #140]	; 0x8c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <main+0x16c>)
 8000d4a:	9400      	str	r4, [sp, #0]
      ++p_end;
 8000d4c:	3080      	adds	r0, #128	; 0x80
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d4e:	2208      	movs	r2, #8
 8000d50:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
      ++p_end;
 8000d54:	9023      	str	r0, [sp, #140]	; 0x8c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d56:	f7ff fac9 	bl	80002ec <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000d5a:	9823      	ldr	r0, [sp, #140]	; 0x8c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d5c:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <main+0x16c>)
 8000d5e:	9400      	str	r4, [sp, #0]
      ++p_end;
 8000d60:	3080      	adds	r0, #128	; 0x80
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d62:	2210      	movs	r2, #16
 8000d64:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
      ++p_end;
 8000d68:	9023      	str	r0, [sp, #140]	; 0x8c
      ::new (p_end) T(etl::forward<Args>(args)...);
 8000d6a:	f7ff fabf 	bl	80002ec <_ZN9SmartFuseC1EPK12GPIO_TypeDefmPK19__SPI_HandleTypeDefRK13FusesSettings>
      ++p_end;
 8000d6e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
	GpioOutElement led_ok(GPIOC, GPIO_PIN_0, true);
 8000d70:	4932      	ldr	r1, [pc, #200]	; (8000e3c <main+0x170>)
 8000d72:	2301      	movs	r3, #1
 8000d74:	3280      	adds	r2, #128	; 0x80
 8000d76:	9223      	str	r2, [sp, #140]	; 0x8c
 8000d78:	a803      	add	r0, sp, #12
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f7ff fe66 	bl	8000a4c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
	GpioOutElement led_warning_1(GPIOC, GPIO_PIN_1, true);
 8000d80:	492e      	ldr	r1, [pc, #184]	; (8000e3c <main+0x170>)
 8000d82:	2301      	movs	r3, #1
 8000d84:	2202      	movs	r2, #2
 8000d86:	a807      	add	r0, sp, #28
 8000d88:	f7ff fe60 	bl	8000a4c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
	GpioOutElement led_warning_2(GPIOC, GPIO_PIN_2, true);
 8000d8c:	462a      	mov	r2, r5
 8000d8e:	492b      	ldr	r1, [pc, #172]	; (8000e3c <main+0x170>)
 8000d90:	2301      	movs	r3, #1
 8000d92:	a80b      	add	r0, sp, #44	; 0x2c
 8000d94:	f7ff fe5a 	bl	8000a4c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
	GpioOutElement led_error(GPIOC, GPIO_PIN_3, true);
 8000d98:	4928      	ldr	r1, [pc, #160]	; (8000e3c <main+0x170>)
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	2208      	movs	r2, #8
 8000d9e:	a80f      	add	r0, sp, #60	; 0x3c
 8000da0:	f7ff fe54 	bl	8000a4c <_ZN14GpioOutElementC1EPK12GPIO_TypeDefmb>
	HAL_Init();
 8000da4:	f000 f98f 	bl	80010c6 <HAL_Init>
	SystemClock_Config();
 8000da8:	f7ff ff5e 	bl	8000c68 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8000dac:	f7ff fe64 	bl	8000a78 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000db0:	f7ff fa24 	bl	80001fc <MX_CAN1_Init>
	MX_SPI1_Init();
 8000db4:	f000 f852 	bl	8000e5c <MX_SPI1_Init>
      return p_buffer[i];
 8000db8:	9822      	ldr	r0, [sp, #136]	; 0x88
	sf_handler.smart_fuses[1].init();
 8000dba:	3080      	adds	r0, #128	; 0x80
 8000dbc:	f7ff fc36 	bl	800062c <_ZN9SmartFuse4initEv>
	led_ok.activate();
 8000dc0:	a803      	add	r0, sp, #12
 8000dc2:	f7ff fe4b 	bl	8000a5c <_ZN14GpioOutElement8activateEv>
	led_warning_1.deactivate();
 8000dc6:	a807      	add	r0, sp, #28
 8000dc8:	f7ff fe50 	bl	8000a6c <_ZN14GpioOutElement10deactivateEv>
	led_warning_2.deactivate();
 8000dcc:	a80b      	add	r0, sp, #44	; 0x2c
 8000dce:	f7ff fe4d 	bl	8000a6c <_ZN14GpioOutElement10deactivateEv>
	led_error.deactivate();
 8000dd2:	a80f      	add	r0, sp, #60	; 0x3c
 8000dd4:	f7ff fe4a 	bl	8000a6c <_ZN14GpioOutElement10deactivateEv>
	Timer tim;
 8000dd8:	a802      	add	r0, sp, #8
 8000dda:	f000 f935 	bl	8001048 <_ZN5TimerC1Ev>
	bool tog = false;
 8000dde:	2500      	movs	r5, #0
 		if(tim.getPassedTime() >= 5000)
 8000de0:	f241 3487 	movw	r4, #4999	; 0x1387
 8000de4:	9822      	ldr	r0, [sp, #136]	; 0x88
		sf_handler.smart_fuses[1].handle();
 8000de6:	3080      	adds	r0, #128	; 0x80
 8000de8:	f7ff fd02 	bl	80007f0 <_ZN9SmartFuse6handleEv>
 8000dec:	9822      	ldr	r0, [sp, #136]	; 0x88
		state = sf_handler.smart_fuses[1].getSmartFuseState();
 8000dee:	3080      	adds	r0, #128	; 0x80
 8000df0:	f7ff fb00 	bl	80003f4 <_ZN9SmartFuse17getSmartFuseStateEv>
 8000df4:	4603      	mov	r3, r0
 		if(tim.getPassedTime() >= 5000)
 8000df6:	a802      	add	r0, sp, #8
		if(state != SmartFuseState::Ok ) led_error.activate();
 8000df8:	b973      	cbnz	r3, 8000e18 <main+0x14c>
 		if(tim.getPassedTime() >= 5000)
 8000dfa:	f000 f933 	bl	8001064 <_ZN5Timer13getPassedTimeEv>
 8000dfe:	42a0      	cmp	r0, r4
 8000e00:	d9f0      	bls.n	8000de4 <main+0x118>
 			tim.restart();
 8000e02:	a802      	add	r0, sp, #8
 8000e04:	f000 f928 	bl	8001058 <_ZN5Timer7restartEv>
 8000e08:	9822      	ldr	r0, [sp, #136]	; 0x88
				sf_handler.smart_fuses[1].activeAllFuses();
 8000e0a:	3080      	adds	r0, #128	; 0x80
			if (tog)
 8000e0c:	b16d      	cbz	r5, 8000e2a <main+0x15e>
				sf_handler.smart_fuses[1].activeAllFuses();
 8000e0e:	f7ff fd79 	bl	8000904 <_ZN9SmartFuse14activeAllFusesEv>
			tog = !tog;
 8000e12:	f085 0501 	eor.w	r5, r5, #1
 8000e16:	e7e5      	b.n	8000de4 <main+0x118>
		if(state != SmartFuseState::Ok ) led_error.activate();
 8000e18:	a80f      	add	r0, sp, #60	; 0x3c
 8000e1a:	f7ff fe1f 	bl	8000a5c <_ZN14GpioOutElement8activateEv>
 		if(tim.getPassedTime() >= 5000)
 8000e1e:	a802      	add	r0, sp, #8
 8000e20:	f000 f920 	bl	8001064 <_ZN5Timer13getPassedTimeEv>
 8000e24:	42a0      	cmp	r0, r4
 8000e26:	d9dd      	bls.n	8000de4 <main+0x118>
 8000e28:	e7eb      	b.n	8000e02 <main+0x136>
				sf_handler.smart_fuses[1].deactivateAllFuses();
 8000e2a:	f7ff fdb9 	bl	80009a0 <_ZN9SmartFuse18deactivateAllFusesEv>
 8000e2e:	e7f0      	b.n	8000e12 <main+0x146>
 8000e30:	08002b20 	.word	0x08002b20
 8000e34:	03ff0303 	.word	0x03ff0303
 8000e38:	200000bc 	.word	0x200000bc
 8000e3c:	48000800 	.word	0x48000800

08000e40 <_GLOBAL__sub_I_fuse_watch_dog>:

	/*USER CODE END Error_Handler_Debug */
}
 8000e40:	b508      	push	{r3, lr}
Timer fuse_watch_dog;
 8000e42:	4804      	ldr	r0, [pc, #16]	; (8000e54 <_GLOBAL__sub_I_fuse_watch_dog+0x14>)
 8000e44:	f000 f900 	bl	8001048 <_ZN5TimerC1Ev>
}
 8000e48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Timer fuses_cotrol;
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <_GLOBAL__sub_I_fuse_watch_dog+0x18>)
 8000e4e:	f000 b8fb 	b.w	8001048 <_ZN5TimerC1Ev>
 8000e52:	bf00      	nop
 8000e54:	200000b4 	.word	0x200000b4
 8000e58:	200000b8 	.word	0x200000b8

08000e5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000e62:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <MX_SPI1_Init+0xa4>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000e76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000e92:	2210      	movs	r2, #16
 8000e94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000eaa:	2207      	movs	r2, #7
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eba:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000ebc:	f001 fcee 	bl	800289c <HAL_SPI_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f7ff feb5 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  SET_BIT((&hspi1)->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ed8:	605a      	str	r2, [r3, #4]
  if (((&hspi1)->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) __HAL_SPI_ENABLE(&hspi1);
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee4:	2b40      	cmp	r3, #64	; 0x40
 8000ee6:	d007      	beq.n	8000ef8 <MX_SPI1_Init+0x9c>
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <MX_SPI1_Init+0xa0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ef6:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000bc 	.word	0x200000bc
 8000f00:	40013000 	.word	0x40013000

08000f04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_SPI_MspInit+0x7c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d128      	bne.n	8000f78 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_SPI_MspInit+0x80>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	4a16      	ldr	r2, [pc, #88]	; (8000f84 <HAL_SPI_MspInit+0x80>)
 8000f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f30:	6613      	str	r3, [r2, #96]	; 0x60
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_SPI_MspInit+0x80>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_SPI_MspInit+0x80>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_SPI_MspInit+0x80>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_SPI_MspInit+0x80>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f56:	23e0      	movs	r3, #224	; 0xe0
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f66:	2305      	movs	r3, #5
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f000 fb22 	bl	80015bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40013000 	.word	0x40013000
 8000f84:	40021000 	.word	0x40021000

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_MspInit+0x44>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_MspInit+0x44>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_MspInit+0x44>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_MspInit+0x44>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_MspInit+0x44>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_MspInit+0x44>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f8a8 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <_ZN5TimerC1Ev>:
 *      Author: pile
 */

#include "timer.h"

Timer::Timer()
 8001048:	b510      	push	{r4, lr}
 800104a:	4604      	mov	r4, r0
{
	this->start_time = HAL_GetTick();
 800104c:	f000 f8a4 	bl	8001198 <HAL_GetTick>
 8001050:	6020      	str	r0, [r4, #0]
}
 8001052:	4620      	mov	r0, r4
 8001054:	bd10      	pop	{r4, pc}
 8001056:	bf00      	nop

08001058 <_ZN5Timer7restartEv>:

void Timer::restart()
{
 8001058:	b510      	push	{r4, lr}
 800105a:	4604      	mov	r4, r0
	this->start_time = HAL_GetTick();
 800105c:	f000 f89c 	bl	8001198 <HAL_GetTick>
 8001060:	6020      	str	r0, [r4, #0]
}
 8001062:	bd10      	pop	{r4, pc}

08001064 <_ZN5Timer13getPassedTimeEv>:

uint32_t Timer::getPassedTime()
{
 8001064:	b510      	push	{r4, lr}
 8001066:	4604      	mov	r4, r0
	return HAL_GetTick() - this->start_time;
 8001068:	f000 f896 	bl	8001198 <HAL_GetTick>
 800106c:	6823      	ldr	r3, [r4, #0]
}
 800106e:	1ac0      	subs	r0, r0, r3
 8001070:	bd10      	pop	{r4, pc}
 8001072:	bf00      	nop

08001074 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001078:	f7ff ffd4 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800107e:	490d      	ldr	r1, [pc, #52]	; (80010b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <LoopForever+0xe>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001094:	4c0a      	ldr	r4, [pc, #40]	; (80010c0 <LoopForever+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f001 fca3 	bl	80029ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a6:	f7ff fe11 	bl	8000ccc <main>

080010aa <LoopForever>:

LoopForever:
    b LoopForever
 80010aa:	e7fe      	b.n	80010aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b8:	08002b84 	.word	0x08002b84
  ldr r2, =_sbss
 80010bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010c0:	2000012c 	.word	0x2000012c

080010c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_2_IRQHandler>

080010c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 fa3f 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d6:	200f      	movs	r0, #15
 80010d8:	f000 f80e 	bl	80010f8 <HAL_InitTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	e001      	b.n	80010ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e8:	f7ff ff4e 	bl	8000f88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_InitTick+0x6c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d023      	beq.n	8001154 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_InitTick+0x70>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_InitTick+0x6c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fa3d 	bl	80015a2 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10f      	bne.n	800114e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d809      	bhi.n	8001148 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 fa15 	bl	800156a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_InitTick+0x74>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e007      	b.n	8001158 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e004      	b.n	8001158 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e001      	b.n	8001158 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	20000000 	.word	0x20000000
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	20000120 	.word	0x20000120

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000120 	.word	0x20000120

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008

080011f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0ed      	b.n	80013e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff f824 	bl	8000264 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800122c:	f7ff ffb4 	bl	8001198 <HAL_GetTick>
 8001230:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001232:	e012      	b.n	800125a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001234:	f7ff ffb0 	bl	8001198 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b0a      	cmp	r3, #10
 8001240:	d90b      	bls.n	800125a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2205      	movs	r2, #5
 8001252:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0c5      	b.n	80013e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0e5      	beq.n	8001234 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0202 	bic.w	r2, r2, #2
 8001276:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001278:	f7ff ff8e 	bl	8001198 <HAL_GetTick>
 800127c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800127e:	e012      	b.n	80012a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001280:	f7ff ff8a 	bl	8001198 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b0a      	cmp	r3, #10
 800128c:	d90b      	bls.n	80012a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2205      	movs	r2, #5
 800129e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e09f      	b.n	80013e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1e5      	bne.n	8001280 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7e1b      	ldrb	r3, [r3, #24]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d108      	bne.n	80012ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e007      	b.n	80012de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7e5b      	ldrb	r3, [r3, #25]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d108      	bne.n	80012f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e007      	b.n	8001308 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001306:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7e9b      	ldrb	r3, [r3, #26]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d108      	bne.n	8001322 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0220 	orr.w	r2, r2, #32
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e007      	b.n	8001332 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0220 	bic.w	r2, r2, #32
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	7edb      	ldrb	r3, [r3, #27]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d108      	bne.n	800134c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0210 	bic.w	r2, r2, #16
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e007      	b.n	800135c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0210 	orr.w	r2, r2, #16
 800135a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7f1b      	ldrb	r3, [r3, #28]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d108      	bne.n	8001376 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0208 	orr.w	r2, r2, #8
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e007      	b.n	8001386 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0208 	bic.w	r2, r2, #8
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7f5b      	ldrb	r3, [r3, #29]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d108      	bne.n	80013a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0204 	orr.w	r2, r2, #4
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e007      	b.n	80013b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0204 	bic.w	r2, r2, #4
 80013ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	ea42 0103 	orr.w	r1, r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff8e 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff47 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff5c 	bl	8001438 <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff8e 	bl	80014a8 <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5d 	bl	8001454 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffb0 	bl	8001510 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ca:	e166      	b.n	800189a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2101      	movs	r1, #1
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8158 	beq.w	8001894 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d005      	beq.n	80015fc <HAL_GPIO_Init+0x40>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d130      	bne.n	800165e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001632:	2201      	movs	r2, #1
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	f003 0201 	and.w	r2, r3, #1
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b03      	cmp	r3, #3
 8001668:	d017      	beq.n	800169a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d123      	bne.n	80016ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	08da      	lsrs	r2, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3208      	adds	r2, #8
 80016ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	08da      	lsrs	r2, r3, #3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3208      	adds	r2, #8
 80016e8:	6939      	ldr	r1, [r7, #16]
 80016ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0203 	and.w	r2, r3, #3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80b2 	beq.w	8001894 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001730:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 8001732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001734:	4a60      	ldr	r2, [pc, #384]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6613      	str	r3, [r2, #96]	; 0x60
 800173c:	4b5e      	ldr	r3, [pc, #376]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001748:	4a5c      	ldr	r2, [pc, #368]	; (80018bc <HAL_GPIO_Init+0x300>)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001772:	d02b      	beq.n	80017cc <HAL_GPIO_Init+0x210>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a52      	ldr	r2, [pc, #328]	; (80018c0 <HAL_GPIO_Init+0x304>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d025      	beq.n	80017c8 <HAL_GPIO_Init+0x20c>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a51      	ldr	r2, [pc, #324]	; (80018c4 <HAL_GPIO_Init+0x308>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d01f      	beq.n	80017c4 <HAL_GPIO_Init+0x208>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a50      	ldr	r2, [pc, #320]	; (80018c8 <HAL_GPIO_Init+0x30c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d019      	beq.n	80017c0 <HAL_GPIO_Init+0x204>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <HAL_GPIO_Init+0x310>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d013      	beq.n	80017bc <HAL_GPIO_Init+0x200>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <HAL_GPIO_Init+0x314>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00d      	beq.n	80017b8 <HAL_GPIO_Init+0x1fc>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a4d      	ldr	r2, [pc, #308]	; (80018d4 <HAL_GPIO_Init+0x318>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d007      	beq.n	80017b4 <HAL_GPIO_Init+0x1f8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_GPIO_Init+0x31c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_GPIO_Init+0x1f4>
 80017ac:	2307      	movs	r3, #7
 80017ae:	e00e      	b.n	80017ce <HAL_GPIO_Init+0x212>
 80017b0:	2308      	movs	r3, #8
 80017b2:	e00c      	b.n	80017ce <HAL_GPIO_Init+0x212>
 80017b4:	2306      	movs	r3, #6
 80017b6:	e00a      	b.n	80017ce <HAL_GPIO_Init+0x212>
 80017b8:	2305      	movs	r3, #5
 80017ba:	e008      	b.n	80017ce <HAL_GPIO_Init+0x212>
 80017bc:	2304      	movs	r3, #4
 80017be:	e006      	b.n	80017ce <HAL_GPIO_Init+0x212>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e004      	b.n	80017ce <HAL_GPIO_Init+0x212>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x212>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_GPIO_Init+0x212>
 80017cc:	2300      	movs	r3, #0
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	f002 0203 	and.w	r2, r2, #3
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	4093      	lsls	r3, r2
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017de:	4937      	ldr	r1, [pc, #220]	; (80018bc <HAL_GPIO_Init+0x300>)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ec:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_GPIO_Init+0x320>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001810:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_GPIO_Init+0x320>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_GPIO_Init+0x320>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800183a:	4a28      	ldr	r2, [pc, #160]	; (80018dc <HAL_GPIO_Init+0x320>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001840:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_GPIO_Init+0x320>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001864:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_GPIO_Init+0x320>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_GPIO_Init+0x320>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <HAL_GPIO_Init+0x320>)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f ae91 	bne.w	80015cc <HAL_GPIO_Init+0x10>
  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000c00 	.word	0x48000c00
 80018cc:	48001000 	.word	0x48001000
 80018d0:	48001400 	.word	0x48001400
 80018d4:	48001800 	.word	0x48001800
 80018d8:	48001c00 	.word	0x48001c00
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800191c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001920:	d102      	bne.n	8001928 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001926:	e00b      	b.n	8001940 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_PWREx_GetVoltageRange+0x3c>)
 800192a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001936:	d102      	bne.n	800193e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193c:	e000      	b.n	8001940 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800193e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40007000 	.word	0x40007000

08001950 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d141      	bne.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800195e:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196a:	d131      	bne.n	80019d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001972:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001978:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800197c:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001984:	4a41      	ldr	r2, [pc, #260]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2232      	movs	r2, #50	; 0x32
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	4a3f      	ldr	r2, [pc, #252]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	0c9b      	lsrs	r3, r3, #18
 800199e:	3301      	adds	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019a2:	e002      	b.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b6:	d102      	bne.n	80019be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f2      	bne.n	80019a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ca:	d158      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e057      	b.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019e0:	e04d      	b.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e8:	d141      	bne.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d131      	bne.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019fe:	4a23      	ldr	r2, [pc, #140]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a10:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2232      	movs	r2, #50	; 0x32
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a24:	fba2 2303 	umull	r2, r3, r2, r3
 8001a28:	0c9b      	lsrs	r3, r3, #18
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a2e:	e002      	b.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a42:	d102      	bne.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f2      	bne.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a56:	d112      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e011      	b.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a6c:	e007      	b.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	20000000 	.word	0x20000000
 8001a94:	431bde83 	.word	0x431bde83

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f000 bc76 	b.w	8002398 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aac:	4b97      	ldr	r3, [pc, #604]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab6:	4b95      	ldr	r3, [pc, #596]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80e6 	beq.w	8001c9a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4c>
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	f040 808d 	bne.w	8001bf6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	f040 8089 	bne.w	8001bf6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ae4:	4b89      	ldr	r3, [pc, #548]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_RCC_OscConfig+0x66>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f000 bc4d 	b.w	8002398 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b02:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <HAL_RCC_OscConfig+0x80>
 8001b0e:	4b7f      	ldr	r3, [pc, #508]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b16:	e005      	b.n	8001b24 <HAL_RCC_OscConfig+0x8c>
 8001b18:	4b7c      	ldr	r3, [pc, #496]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d224      	bcs.n	8001b72 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 fdf3 	bl	8002718 <RCC_SetFlashLatencyFromMSIRange>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f000 bc2d 	b.w	8002398 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a72      	ldr	r2, [pc, #456]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b70      	ldr	r3, [pc, #448]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	496d      	ldr	r1, [pc, #436]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5c:	4b6b      	ldr	r3, [pc, #428]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	4968      	ldr	r1, [pc, #416]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	e025      	b.n	8001bbe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b72:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a65      	ldr	r2, [pc, #404]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	4960      	ldr	r1, [pc, #384]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b90:	4b5e      	ldr	r3, [pc, #376]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	495b      	ldr	r1, [pc, #364]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fdb2 	bl	8002718 <RCC_SetFlashLatencyFromMSIRange>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e3ec      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bbe:	f000 fd1f 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	4950      	ldr	r1, [pc, #320]	; (8001d10 <HAL_RCC_OscConfig+0x278>)
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	4a4e      	ldr	r2, [pc, #312]	; (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bde:	4b4e      	ldr	r3, [pc, #312]	; (8001d18 <HAL_RCC_OscConfig+0x280>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fa88 	bl	80010f8 <HAL_InitTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d052      	beq.n	8001c98 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
 8001bf4:	e3d0      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d032      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fac5 	bl	8001198 <HAL_GetTick>
 8001c0e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c12:	f7ff fac1 	bl	8001198 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e3b9      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c24:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c30:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a35      	ldr	r2, [pc, #212]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	4930      	ldr	r1, [pc, #192]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	492b      	ldr	r1, [pc, #172]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
 8001c62:	e01a      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c64:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fa92 	bl	8001198 <HAL_GetTick>
 8001c74:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c78:	f7ff fa8e 	bl	8001198 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e386      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1e0>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d073      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x220>
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d063      	beq.n	8001d8c <HAL_RCC_OscConfig+0x2f4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d15f      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e363      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd8:	d106      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x250>
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e025      	b.n	8001d34 <HAL_RCC_OscConfig+0x29c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf0:	d114      	bne.n	8001d1c <HAL_RCC_OscConfig+0x284>
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a02      	ldr	r2, [pc, #8]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e013      	b.n	8001d34 <HAL_RCC_OscConfig+0x29c>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08002b38 	.word	0x08002b38
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004
 8001d1c:	4b8f      	ldr	r3, [pc, #572]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a8e      	ldr	r2, [pc, #568]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a8b      	ldr	r2, [pc, #556]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fa2c 	bl	8001198 <HAL_GetTick>
 8001d40:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fa28 	bl	8001198 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e320      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d56:	4b81      	ldr	r3, [pc, #516]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x2ac>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff fa18 	bl	8001198 <HAL_GetTick>
 8001d68:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fa14 	bl	8001198 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e30c      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d7e:	4b77      	ldr	r3, [pc, #476]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2d4>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d060      	beq.n	8001e5c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_OscConfig+0x314>
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d119      	bne.n	8001dda <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d116      	bne.n	8001dda <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dac:	4b6b      	ldr	r3, [pc, #428]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x32c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e2e9      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b65      	ldr	r3, [pc, #404]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	061b      	lsls	r3, r3, #24
 8001dd2:	4962      	ldr	r1, [pc, #392]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd8:	e040      	b.n	8001e5c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d023      	beq.n	8001e2a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de2:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5d      	ldr	r2, [pc, #372]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dee:	f7ff f9d3 	bl	8001198 <HAL_GetTick>
 8001df2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df6:	f7ff f9cf 	bl	8001198 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e2c7      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e08:	4b54      	ldr	r3, [pc, #336]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	494e      	ldr	r1, [pc, #312]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
 8001e28:	e018      	b.n	8001e5c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2a:	4b4c      	ldr	r3, [pc, #304]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a4b      	ldr	r2, [pc, #300]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7ff f9af 	bl	8001198 <HAL_GetTick>
 8001e3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7ff f9ab 	bl	8001198 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e2a3      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e50:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8082 	beq.w	8001f6e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d05f      	beq.n	8001f32 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001e72:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e78:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d037      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e27b      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01b      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eba:	f7ff f96d 	bl	8001198 <HAL_GetTick>
 8001ebe:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff f969 	bl	8001198 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b11      	cmp	r3, #17
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e261      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ef      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee8:	f023 0210 	bic.w	r2, r3, #16
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	491a      	ldr	r1, [pc, #104]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef8:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff f946 	bl	8001198 <HAL_GetTick>
 8001f0c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff f942 	bl	8001198 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b11      	cmp	r3, #17
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e23a      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ef      	beq.n	8001f10 <HAL_RCC_OscConfig+0x478>
 8001f30:	e01d      	b.n	8001f6e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f38:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff f929 	bl	8001198 <HAL_GetTick>
 8001f46:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7ff f925 	bl	8001198 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b11      	cmp	r3, #17
 8001f56:	d903      	bls.n	8001f60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e21d      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
 8001f5c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	4b83      	ldr	r3, [pc, #524]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ed      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80bd 	beq.w	80020f6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f82:	4b7b      	ldr	r3, [pc, #492]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10e      	bne.n	8001fac <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b78      	ldr	r3, [pc, #480]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a77      	ldr	r2, [pc, #476]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9a:	4b75      	ldr	r3, [pc, #468]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	4b71      	ldr	r3, [pc, #452]	; (8002174 <HAL_RCC_OscConfig+0x6dc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d118      	bne.n	8001fea <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb8:	4b6e      	ldr	r3, [pc, #440]	; (8002174 <HAL_RCC_OscConfig+0x6dc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6d      	ldr	r2, [pc, #436]	; (8002174 <HAL_RCC_OscConfig+0x6dc>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f8e8 	bl	8001198 <HAL_GetTick>
 8001fc8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fcc:	f7ff f8e4 	bl	8001198 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1dc      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_RCC_OscConfig+0x6dc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d02c      	beq.n	8002050 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001ff6:	4b5e      	ldr	r3, [pc, #376]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002008:	4959      	ldr	r1, [pc, #356]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800201c:	4b54      	ldr	r3, [pc, #336]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	4a53      	ldr	r2, [pc, #332]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800202c:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	4a4f      	ldr	r2, [pc, #316]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800203c:	e018      	b.n	8002070 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800203e:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204e:	e00f      	b.n	8002070 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002050:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	4a46      	ldr	r2, [pc, #280]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002060:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002066:	4a42      	ldr	r2, [pc, #264]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d016      	beq.n	80020a6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff f88e 	bl	8001198 <HAL_GetTick>
 800207c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7ff f88a 	bl	8001198 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e180      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ed      	beq.n	8002080 <HAL_RCC_OscConfig+0x5e8>
 80020a4:	e01d      	b.n	80020e2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7ff f877 	bl	8001198 <HAL_GetTick>
 80020aa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff f873 	bl	8001198 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e169      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ed      	bne.n	80020ae <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d8:	4a25      	ldr	r2, [pc, #148]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 80020da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d105      	bne.n	80020f6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	4a20      	ldr	r2, [pc, #128]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d041      	beq.n	8002186 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01c      	beq.n	8002144 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 800210c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7ff f83d 	bl	8001198 <HAL_GetTick>
 800211e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002122:	f7ff f839 	bl	8001198 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e131      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ef      	beq.n	8002122 <HAL_RCC_OscConfig+0x68a>
 8002142:	e020      	b.n	8002186 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 8002146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <HAL_RCC_OscConfig+0x6d8>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7ff f820 	bl	8001198 <HAL_GetTick>
 8002158:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800215a:	e00d      	b.n	8002178 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800215c:	f7ff f81c 	bl	8001198 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d906      	bls.n	8002178 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e114      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002178:	4b89      	ldr	r3, [pc, #548]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 800217a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ea      	bne.n	800215c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8103 	beq.w	8002396 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	2b02      	cmp	r3, #2
 8002196:	f040 80cb 	bne.w	8002330 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800219a:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0203 	and.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d12c      	bne.n	8002208 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	3b01      	subs	r3, #1
 80021ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d123      	bne.n	8002208 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d11b      	bne.n	8002208 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d113      	bne.n	8002208 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	3b01      	subs	r3, #1
 80021ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d109      	bne.n	8002208 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	3b01      	subs	r3, #1
 8002202:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d06d      	beq.n	80022e4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	d068      	beq.n	80022e0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800220e:	4b64      	ldr	r3, [pc, #400]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800221a:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0b6      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800222a:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a5c      	ldr	r2, [pc, #368]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002234:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002236:	f7fe ffaf 	bl	8001198 <HAL_GetTick>
 800223a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe ffab 	bl	8001198 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0a3      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <HAL_RCC_OscConfig+0x90c>)
 8002262:	4013      	ands	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800226c:	3a01      	subs	r2, #1
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	4311      	orrs	r1, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002276:	0212      	lsls	r2, r2, #8
 8002278:	4311      	orrs	r1, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800227e:	0852      	lsrs	r2, r2, #1
 8002280:	3a01      	subs	r2, #1
 8002282:	0552      	lsls	r2, r2, #21
 8002284:	4311      	orrs	r1, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800228a:	0852      	lsrs	r2, r2, #1
 800228c:	3a01      	subs	r2, #1
 800228e:	0652      	lsls	r2, r2, #25
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002296:	06d2      	lsls	r2, r2, #27
 8002298:	430a      	orrs	r2, r1
 800229a:	4941      	ldr	r1, [pc, #260]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 800229c:	4313      	orrs	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022a0:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a3e      	ldr	r2, [pc, #248]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 80022a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ac:	4b3c      	ldr	r3, [pc, #240]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a3b      	ldr	r2, [pc, #236]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b8:	f7fe ff6e 	bl	8001198 <HAL_GetTick>
 80022bc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe ff6a 	bl	8001198 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e062      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d2:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022de:	e05a      	b.n	8002396 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e059      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d152      	bne.n	8002396 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2a      	ldr	r2, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002308:	f7fe ff46 	bl	8001198 <HAL_GetTick>
 800230c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe ff42 	bl	8001198 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e03a      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x878>
 800232e:	e032      	b.n	8002396 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d02d      	beq.n	8002392 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 800233c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002340:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002354:	f023 0303 	bic.w	r3, r3, #3
 8002358:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002360:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002368:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe ff15 	bl	8001198 <HAL_GetTick>
 800236e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7fe ff11 	bl	8001198 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e009      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_RCC_OscConfig+0x908>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x8da>
 8002390:	e001      	b.n	8002396 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	019d800c 	.word	0x019d800c

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e10f      	b.n	80025e0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b89      	ldr	r3, [pc, #548]	; (80025e8 <HAL_RCC_ClockConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d910      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b86      	ldr	r3, [pc, #536]	; (80025e8 <HAL_RCC_ClockConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 020f 	bic.w	r2, r3, #15
 80023d6:	4984      	ldr	r1, [pc, #528]	; (80025e8 <HAL_RCC_ClockConfig+0x240>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b82      	ldr	r3, [pc, #520]	; (80025e8 <HAL_RCC_ClockConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0f7      	b.n	80025e0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8089 	beq.w	8002510 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d133      	bne.n	800246e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002406:	4b79      	ldr	r3, [pc, #484]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0e4      	b.n	80025e0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002416:	f000 f9d9 	bl	80027cc <RCC_GetSysClockFreqFromPLLSource>
 800241a:	4603      	mov	r3, r0
 800241c:	4a74      	ldr	r2, [pc, #464]	; (80025f0 <HAL_RCC_ClockConfig+0x248>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d955      	bls.n	80024ce <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002422:	4b72      	ldr	r3, [pc, #456]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10a      	bne.n	8002444 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800242e:	4b6f      	ldr	r3, [pc, #444]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002436:	4a6d      	ldr	r2, [pc, #436]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 8002438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	e044      	b.n	80024ce <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d03e      	beq.n	80024ce <HAL_RCC_ClockConfig+0x126>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d13a      	bne.n	80024ce <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002458:	4b64      	ldr	r3, [pc, #400]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002460:	4a62      	ldr	r2, [pc, #392]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 8002462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002466:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e02f      	b.n	80024ce <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002476:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0ac      	b.n	80025e0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0a0      	b.n	80025e0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800249e:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e098      	b.n	80025e0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80024ae:	f000 f8a7 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a4e      	ldr	r2, [pc, #312]	; (80025f0 <HAL_RCC_ClockConfig+0x248>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d909      	bls.n	80024ce <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024ba:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c2:	4a4a      	ldr	r2, [pc, #296]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 80024c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 0203 	bic.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4944      	ldr	r1, [pc, #272]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e0:	f7fe fe5a 	bl	8001198 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f7fe fe56 	bl	8001198 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e070      	b.n	80025e0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 020c 	and.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	429a      	cmp	r2, r3
 800250e:	d1eb      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b33      	ldr	r3, [pc, #204]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4930      	ldr	r1, [pc, #192]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
 800252e:	e008      	b.n	8002542 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	d105      	bne.n	8002542 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4a2c      	ldr	r2, [pc, #176]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 800253c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002540:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_RCC_ClockConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d210      	bcs.n	8002572 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_RCC_ClockConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 020f 	bic.w	r2, r3, #15
 8002558:	4923      	ldr	r1, [pc, #140]	; (80025e8 <HAL_RCC_ClockConfig+0x240>)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002560:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_RCC_ClockConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e036      	b.n	80025e0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	4918      	ldr	r1, [pc, #96]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 800258c:	4313      	orrs	r3, r2
 800258e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4910      	ldr	r1, [pc, #64]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b0:	f000 f826 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <HAL_RCC_ClockConfig+0x244>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <HAL_RCC_ClockConfig+0x24c>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x250>)
 80025ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x254>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fd8f 	bl	80010f8 <HAL_InitTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40022000 	.word	0x40022000
 80025ec:	40021000 	.word	0x40021000
 80025f0:	04c4b400 	.word	0x04c4b400
 80025f4:	08002b38 	.word	0x08002b38
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002618:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x34>
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d121      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d11e      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e005      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800265c:	4a2b      	ldr	r2, [pc, #172]	; (800270c <HAL_RCC_GetSysClockFreq+0x10c>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002664:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d102      	bne.n	800267e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <HAL_RCC_GetSysClockFreq+0x110>)
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	e004      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d101      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_RCC_GetSysClockFreq+0x114>)
 8002686:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d134      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d003      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0xac>
 80026a4:	e005      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_RCC_GetSysClockFreq+0x110>)
 80026a8:	617b      	str	r3, [r7, #20]
      break;
 80026aa:	e005      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ae:	617b      	str	r3, [r7, #20]
      break;
 80026b0:	e002      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	617b      	str	r3, [r7, #20]
      break;
 80026b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3301      	adds	r3, #1
 80026c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	fb03 f202 	mul.w	r2, r3, r2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	0e5b      	lsrs	r3, r3, #25
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	3301      	adds	r3, #1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026f8:	69bb      	ldr	r3, [r7, #24]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	08002b48 	.word	0x08002b48
 8002710:	00f42400 	.word	0x00f42400
 8002714:	007a1200 	.word	0x007a1200

08002718 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002730:	f7ff f8ee 	bl	8001910 <HAL_PWREx_GetVoltageRange>
 8002734:	6178      	str	r0, [r7, #20]
 8002736:	e014      	b.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800273e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002742:	6593      	str	r3, [r2, #88]	; 0x58
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002750:	f7ff f8de 	bl	8001910 <HAL_PWREx_GetVoltageRange>
 8002754:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002760:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002768:	d10b      	bne.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b80      	cmp	r3, #128	; 0x80
 800276e:	d913      	bls.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2ba0      	cmp	r3, #160	; 0xa0
 8002774:	d902      	bls.n	800277c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002776:	2302      	movs	r3, #2
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	e00d      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800277c:	2301      	movs	r3, #1
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	e00a      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b7f      	cmp	r3, #127	; 0x7f
 8002786:	d902      	bls.n	800278e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002788:	2302      	movs	r3, #2
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	e004      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b70      	cmp	r3, #112	; 0x70
 8002792:	d101      	bne.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002794:	2301      	movs	r3, #1
 8002796:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 020f 	bic.w	r2, r3, #15
 80027a0:	4909      	ldr	r1, [pc, #36]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40022000 	.word	0x40022000

080027cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80027d6:	4b2d      	ldr	r3, [pc, #180]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d118      	bne.n	8002814 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027e2:	4b2a      	ldr	r3, [pc, #168]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e005      	b.n	800280a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800280a:	4a21      	ldr	r2, [pc, #132]	; (8002890 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d003      	beq.n	800282c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d003      	beq.n	8002832 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800282a:	e005      	b.n	8002838 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800282e:	613b      	str	r3, [r7, #16]
    break;
 8002830:	e005      	b.n	800283e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002832:	4b19      	ldr	r3, [pc, #100]	; (8002898 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002834:	613b      	str	r3, [r7, #16]
    break;
 8002836:	e002      	b.n	800283e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	613b      	str	r3, [r7, #16]
    break;
 800283c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	3301      	adds	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	fb03 f202 	mul.w	r2, r3, r2
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0e5b      	lsrs	r3, r3, #25
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	3301      	adds	r3, #1
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800287e:	683b      	ldr	r3, [r7, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40021000 	.word	0x40021000
 8002890:	08002b48 	.word	0x08002b48
 8002894:	00f42400 	.word	0x00f42400
 8002898:	007a1200 	.word	0x007a1200

0800289c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e095      	b.n	80029da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d108      	bne.n	80028c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028be:	d009      	beq.n	80028d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
 80028c6:	e005      	b.n	80028d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fb08 	bl	8000f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800290a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002914:	d902      	bls.n	800291c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	e002      	b.n	8002922 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800291c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002920:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800292a:	d007      	beq.n	800293c <HAL_SPI_Init+0xa0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002934:	d002      	beq.n	800293c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	ea42 0103 	orr.w	r1, r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	0c1b      	lsrs	r3, r3, #16
 8002998:	f003 0204 	and.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029b8:	ea42 0103 	orr.w	r1, r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_ZdlPvj>:
 80029e2:	f000 b800 	b.w	80029e6 <_ZdlPv>

080029e6 <_ZdlPv>:
 80029e6:	f000 b825 	b.w	8002a34 <free>
	...

080029ec <__libc_init_array>:
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	4d0d      	ldr	r5, [pc, #52]	; (8002a24 <__libc_init_array+0x38>)
 80029f0:	4c0d      	ldr	r4, [pc, #52]	; (8002a28 <__libc_init_array+0x3c>)
 80029f2:	1b64      	subs	r4, r4, r5
 80029f4:	10a4      	asrs	r4, r4, #2
 80029f6:	2600      	movs	r6, #0
 80029f8:	42a6      	cmp	r6, r4
 80029fa:	d109      	bne.n	8002a10 <__libc_init_array+0x24>
 80029fc:	4d0b      	ldr	r5, [pc, #44]	; (8002a2c <__libc_init_array+0x40>)
 80029fe:	4c0c      	ldr	r4, [pc, #48]	; (8002a30 <__libc_init_array+0x44>)
 8002a00:	f000 f882 	bl	8002b08 <_init>
 8002a04:	1b64      	subs	r4, r4, r5
 8002a06:	10a4      	asrs	r4, r4, #2
 8002a08:	2600      	movs	r6, #0
 8002a0a:	42a6      	cmp	r6, r4
 8002a0c:	d105      	bne.n	8002a1a <__libc_init_array+0x2e>
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
 8002a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a14:	4798      	blx	r3
 8002a16:	3601      	adds	r6, #1
 8002a18:	e7ee      	b.n	80029f8 <__libc_init_array+0xc>
 8002a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1e:	4798      	blx	r3
 8002a20:	3601      	adds	r6, #1
 8002a22:	e7f2      	b.n	8002a0a <__libc_init_array+0x1e>
 8002a24:	08002b78 	.word	0x08002b78
 8002a28:	08002b78 	.word	0x08002b78
 8002a2c:	08002b78 	.word	0x08002b78
 8002a30:	08002b80 	.word	0x08002b80

08002a34 <free>:
 8002a34:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <free+0xc>)
 8002a36:	4601      	mov	r1, r0
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	f000 b80b 	b.w	8002a54 <_free_r>
 8002a3e:	bf00      	nop
 8002a40:	2000000c 	.word	0x2000000c

08002a44 <memset>:
 8002a44:	4402      	add	r2, r0
 8002a46:	4603      	mov	r3, r0
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <memset+0xa>
 8002a4c:	4770      	bx	lr
 8002a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a52:	e7f9      	b.n	8002a48 <memset+0x4>

08002a54 <_free_r>:
 8002a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a56:	2900      	cmp	r1, #0
 8002a58:	d044      	beq.n	8002ae4 <_free_r+0x90>
 8002a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a5e:	9001      	str	r0, [sp, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f1a1 0404 	sub.w	r4, r1, #4
 8002a66:	bfb8      	it	lt
 8002a68:	18e4      	addlt	r4, r4, r3
 8002a6a:	f000 f83f 	bl	8002aec <__malloc_lock>
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <_free_r+0x94>)
 8002a70:	9801      	ldr	r0, [sp, #4]
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	b933      	cbnz	r3, 8002a84 <_free_r+0x30>
 8002a76:	6063      	str	r3, [r4, #4]
 8002a78:	6014      	str	r4, [r2, #0]
 8002a7a:	b003      	add	sp, #12
 8002a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a80:	f000 b83a 	b.w	8002af8 <__malloc_unlock>
 8002a84:	42a3      	cmp	r3, r4
 8002a86:	d908      	bls.n	8002a9a <_free_r+0x46>
 8002a88:	6825      	ldr	r5, [r4, #0]
 8002a8a:	1961      	adds	r1, r4, r5
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	bf01      	itttt	eq
 8002a90:	6819      	ldreq	r1, [r3, #0]
 8002a92:	685b      	ldreq	r3, [r3, #4]
 8002a94:	1949      	addeq	r1, r1, r5
 8002a96:	6021      	streq	r1, [r4, #0]
 8002a98:	e7ed      	b.n	8002a76 <_free_r+0x22>
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	b10b      	cbz	r3, 8002aa4 <_free_r+0x50>
 8002aa0:	42a3      	cmp	r3, r4
 8002aa2:	d9fa      	bls.n	8002a9a <_free_r+0x46>
 8002aa4:	6811      	ldr	r1, [r2, #0]
 8002aa6:	1855      	adds	r5, r2, r1
 8002aa8:	42a5      	cmp	r5, r4
 8002aaa:	d10b      	bne.n	8002ac4 <_free_r+0x70>
 8002aac:	6824      	ldr	r4, [r4, #0]
 8002aae:	4421      	add	r1, r4
 8002ab0:	1854      	adds	r4, r2, r1
 8002ab2:	42a3      	cmp	r3, r4
 8002ab4:	6011      	str	r1, [r2, #0]
 8002ab6:	d1e0      	bne.n	8002a7a <_free_r+0x26>
 8002ab8:	681c      	ldr	r4, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	6053      	str	r3, [r2, #4]
 8002abe:	4421      	add	r1, r4
 8002ac0:	6011      	str	r1, [r2, #0]
 8002ac2:	e7da      	b.n	8002a7a <_free_r+0x26>
 8002ac4:	d902      	bls.n	8002acc <_free_r+0x78>
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	6003      	str	r3, [r0, #0]
 8002aca:	e7d6      	b.n	8002a7a <_free_r+0x26>
 8002acc:	6825      	ldr	r5, [r4, #0]
 8002ace:	1961      	adds	r1, r4, r5
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	bf04      	itt	eq
 8002ad4:	6819      	ldreq	r1, [r3, #0]
 8002ad6:	685b      	ldreq	r3, [r3, #4]
 8002ad8:	6063      	str	r3, [r4, #4]
 8002ada:	bf04      	itt	eq
 8002adc:	1949      	addeq	r1, r1, r5
 8002ade:	6021      	streq	r1, [r4, #0]
 8002ae0:	6054      	str	r4, [r2, #4]
 8002ae2:	e7ca      	b.n	8002a7a <_free_r+0x26>
 8002ae4:	b003      	add	sp, #12
 8002ae6:	bd30      	pop	{r4, r5, pc}
 8002ae8:	20000124 	.word	0x20000124

08002aec <__malloc_lock>:
 8002aec:	4801      	ldr	r0, [pc, #4]	; (8002af4 <__malloc_lock+0x8>)
 8002aee:	f000 b809 	b.w	8002b04 <__retarget_lock_acquire_recursive>
 8002af2:	bf00      	nop
 8002af4:	20000128 	.word	0x20000128

08002af8 <__malloc_unlock>:
 8002af8:	4801      	ldr	r0, [pc, #4]	; (8002b00 <__malloc_unlock+0x8>)
 8002afa:	f000 b804 	b.w	8002b06 <__retarget_lock_release_recursive>
 8002afe:	bf00      	nop
 8002b00:	20000128 	.word	0x20000128

08002b04 <__retarget_lock_acquire_recursive>:
 8002b04:	4770      	bx	lr

08002b06 <__retarget_lock_release_recursive>:
 8002b06:	4770      	bx	lr

08002b08 <_init>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	bf00      	nop
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr

08002b14 <_fini>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	bf00      	nop
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr
